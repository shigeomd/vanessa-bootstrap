
Процедура ДобавитьПоляРесурсовВЗапрещенныеПоля(Форма, СписокПолей) Экспорт
	
	Попытка
		НаборПоказателей = Форма.НаборПоказателей;
	Исключение
		НаборПоказателей = Неопределено;
	КонецПопытки;
	
	Если НаборПоказателей = Неопределено Тогда
		Для Каждого ДоступноеПоле Из Форма.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ИмяПоказателя Из Форма.НаборПоказателей Цикл
			Если Форма.Отчет["Показатель" + ИмяПоказателя] Тогда 
				ВидОстатка = "";
				Если Форма.Отчет.Свойство("РазвернутоеСальдо") Тогда
					Если ТипЗнч(Форма.Отчет.РазвернутоеСальдо) = Тип("Булево") Тогда
						Если Форма.Отчет.РазвернутоеСальдо Тогда
							ВидОстатка = "";
						Иначе
							ВидОстатка = "Развернутый";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокДт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокКт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "Конечный" + ВидОстатка + "ОстатокДт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "Конечный" + ВидОстатка + "ОстатокКт");
			Иначе
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт");
				СписокПолей.Добавить("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
				СписокПолей.Добавить("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокДт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокКт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйРазвернутыйОстатокДт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйРазвернутыйОстатокКт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйРазвернутыйОстатокДт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйРазвернутыйОстатокКт");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
		
КонецПроцедуры

Процедура ГруппировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"          , "Группировка");
	ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Группировка"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"  , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ГруппировкаПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.Группировка.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.ГруппировкаПредставление Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"          , "Группировка");
		ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Группировка"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
			
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ГруппировкаПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
		Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
			НоваяСтрока = Элемент.ТекущиеДанные;
			НоваяСтрока.Использование = Истина;
			НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
			НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
			
			Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
			КонецЕсли;
		КонецЕсли;
	
КонецПроцедуры

Процедура ОтборыПриИзменении(Форма, Элемент, ЕстьРеквизитПодразделение = Истина) Экспорт
	
	Отчет = Форма.Отчет;
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
					Отчет.Организация = ЭлементОтбора.ПравоеЗначение;	
				Иначе
					Отчет.Организация = Неопределено;	
				КонецЕсли; 
				
				Отчет.ВключатьОбособленныеПодразделения = Ложь;
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") И ЕстьРеквизитПодразделение Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда 
					Отчет.Подразделение = ЭлементОтбора.ПравоеЗначение;
				Иначе
					Отчет.Подразделение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтборыПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Отбор");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Отбор"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;

КонецПроцедуры

Процедура ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		Если Элемент.ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = Неопределено;
		Иначе
			ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		КонецЕсли;

		Если ТипЗнч(ТекущаяСтрока) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора = ТекущаяСтрока.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТекущаяСтрока.Родитель <> Неопределено Тогда
				ЭлементОтбора = ТекущаяСтрока.Родитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Иначе
				ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			КонецЕсли;
		Иначе
			ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		Если Строка(ПараметрыВыбранногоПоля.Поле) = "Организация"
			И Форма.Отчет.Свойство("Организация") Тогда
			ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Организация;
		ИначеЕсли Строка(ПараметрыВыбранногоПоля.Поле) = "Подразделение"
			И Форма.Отчет.Свойство("Подразделение") Тогда 
			ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Подразделение;
		КонецЕсли;
		ЭлементОтбора.ВидСравнения = ПараметрыВыбранногоПоля.ВидСравнения;
		
		Элемент.ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьИдентификаторПоОбъекту(ЭлементОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборыПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если (Найти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 И ТипЗнч(Элемент.ТекущиеДанные.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных")) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Отбор");
		ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Отбор"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.ЛевоеЗначение);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
			
		Отказ = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		Если Найти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 Тогда 
			ТекущаяСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Выбор");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Выбор"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДополнительныеПоляПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.ДополнительныеПоляПредставление Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Выбор");
		ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Выбор"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДополнительныеПоляПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Элемент.ТекущиеДанные;
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СортировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Порядок");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Порядок"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СортировкаПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
	Отказ = Истина;
	
КонецПроцедуры

Процедура СортировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НоваяСтрока.Использование     = Истина;
		НоваяСтрока.Поле              = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		НоваяСтрока.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

Процедура СортировкаПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если Найти(Элемент.ТекущийЭлемент.Имя, "СортировкаПоле") = 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"          , "Порядок");
		ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Порядок"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("СортировкаПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СортировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		РедактируемаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Порядок.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		РедактируемаяСтрока.Использование = Истина;
		РедактируемаяСтрока.Поле          = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Форма, Элемент) Экспорт 
	
	БухгалтерскиеОтчетыКлиентСервер.ОрганизацияПриИзменении(Форма);
	
КонецПроцедуры

Процедура ПодразделениеПриИзменении(Форма, Элемент) Экспорт
	
	БухгалтерскиеОтчетыКлиентСервер.ПодразделениеПриИзменении(Форма);
	
КонецПроцедуры


Процедура ТабличноеПолеПоСчетамГруппировкаПередНачаломДобавления(ФормаОтчета, ИмяЭлемента, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	Отказ = Истина;
	НоваяСтрока = ФормаОтчета.Отчет[ИмяЭлемента].Добавить();
	НоваяСтрока.Использование = Истина;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамСчетПриИзменении(ФормаОтчета, ИмяЭлемента, Элемент) Экспорт
	
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	ТекущиеДанные = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Счет) Тогда
			ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.Счет);
			ТекущиеДанные.ПоСубсчетам = ДанныеСчета.КоличествоСубконто = 0;

			СтрокаПоСубконто    = "";
			СтрокаПредставление = "";
			
			Если ИмяЭлемента = "ГруппировкаКор" И ДанныеСчета.УчетПоПодразделениям Тогда
				СтрокаПоСубконто = СтрокаПоСубконто + "+" + "0";
				СтрокаПредставление = СтрокаПредставление + "Подразделения, ";
			КонецЕсли;
			
			Если ДанныеСчета.КоличествоСубконто > 0 Тогда
				Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
					// Если одна номенклатурная группа, то не добавляем Номенклатурные группы в список субконто
					Если ИспользоватьОднуНоменклатурнуюГруппу 
						И ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы") Тогда
						СтрокаПоСубконто    = СтрокаПоСубконто + "-" + Индекс;
					Иначе
						СтрокаПоСубконто    = СтрокаПоСубконто + "+" + Индекс;
						СтрокаПредставление = СтрокаПредставление + ДанныеСчета["ВидСубконто" + Индекс + "Наименование"] + ", ";
					КонецЕсли;
					
				КонецЦикла;
				СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление) - 2);
			КонецЕсли;
			ТекущиеДанные.ПоСубконто    = СтрокаПоСубконто;
			ТекущиеДанные.Представление = СтрокаПредставление;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПоСубсчетамПриИзменении(ФормаОтчета, ИмяЭлемента, Элемент) Экспорт
	
	ТекущиеДанные = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные;
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.Счет);
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ПоСубсчетам Тогда
			Если ИмяЭлемента = "РазвернутоеСальдо" Тогда
				ТабличноеПолеПоСчетамПредставлениеОчистка(ФормаОтчета, ИмяЭлемента, Элемент, Ложь);
			КонецЕсли; 
		Иначе
			Если ПустаяСтрока(ТекущиеДанные.Представление) Тогда
				ТекущиеДанные.ПоСубсчетам = Истина;
				Возврат;
			КонецЕсли;
			ТекущиеДанные.ПоСубконто    = СтрЗаменить(ТекущиеДанные.ПоСубконто, "-", "+");
			ТекущиеДанные.Представление = "";
			СтрокаПоСубконто    = "";
			СтрокаПредставление = "";
			
			Если ИмяЭлемента = "ГруппировкаКор" И ДанныеСчета.УчетПоПодразделениям Тогда
				СтрокаПоСубконто = СтрокаПоСубконто + "+" + "0";
				СтрокаПредставление = СтрокаПредставление + "Подразделения, ";
			КонецЕсли;
			
			Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
				СтрокаПоСубконто    = СтрокаПоСубконто + "+" + Индекс;
				СтрокаПредставление = СтрокаПредставление + ДанныеСчета["ВидСубконто" + Индекс + "Наименование"] + ", ";
			КонецЦикла;
			СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление) - 2);
			ТекущиеДанные.ПоСубконто    = СтрокаПоСубконто;
			ТекущиеДанные.Представление = СтрокаПредставление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПредставлениеНачалоВыбора(ФормаОтчета, ИмяЭлемента, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтрокаПоСубконто = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.ПоСубконто;
	Счет = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.Счет;
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	СписокВидовСубконто = Новый СписокЗначений;
	Если ПустаяСтрока(СтрокаПоСубконто) Тогда		
		Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
			СписокВидовСубконто.Добавить(ДанныеСчета["ВидСубконто" + Индекс], ДанныеСчета["ВидСубконто" + Индекс + "Наименование"]);
		КонецЦикла;
	Иначе
		КоличествоСубконто = СтрДлина(СтрокаПоСубконто) / 2;
		Для Индекс = 1 По КоличествоСубконто Цикл
			ИндексСубконто = Сред(СтрокаПоСубконто, Индекс*2, 1);
			Если ИндексСубконто = "0" Тогда
				СписокВидовСубконто.Добавить("Подразделения", "Подразделения", ?(Сред(СтрокаПоСубконто, Индекс * 2 - 1, 1) = "+", Истина, Ложь));
			Иначе
				СписокВидовСубконто.Добавить(ДанныеСчета["ВидСубконто" + Сред(СтрокаПоСубконто, Индекс*2, 1)], ДанныеСчета["ВидСубконто" + Сред(СтрокаПоСубконто, Индекс*2, 1) + "Наименование"], ?(Сред(СтрокаПоСубконто, Индекс * 2 - 1, 1) = "+", Истина, Ложь));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкаПоСубконто", Новый Структура("СписокВидовСубконто", СписокВидовСубконто), Элемент);
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПредставлениеОчистка(ФормаОтчета, ИмяЭлемента, Элемент, СтандартнаяОбработка) Экспорт
	
	ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.ПоСубконто    = СтрЗаменить(ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.ПоСубконто, "+", "-");
	ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные.Представление = "";
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПредставлениеОбработкаВыбора(ФормаОтчета, ИмяЭлемента, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ФормаОтчета.Элементы[ИмяЭлемента].ТекущиеДанные;
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.Счет);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда 
		СтрокаПоСубконто = "";
		СтрокаПредставление = "";
		Для Каждого ЭлементСписка Из ВыбранноеЗначение Цикл
			Если ЭлементСписка.Пометка Тогда
				СтрокаПоСубконто    = СтрокаПоСубконто + "+";
				СтрокаПредставление = СтрокаПредставление + Строка(ЭлементСписка.Значение) + ", ";
			Иначе
				СтрокаПоСубконто = СтрокаПоСубконто + "-";
			КонецЕсли;
			
			Если ТипЗнч(ЭлементСписка.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
				Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл 
					Если ДанныеСчета["ВидСубконто" + Индекс] = ЭлементСписка.Значение Тогда
						СтрокаПоСубконто = СтрокаПоСубконто + Индекс;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СтрокаПоСубконто = СтрокаПоСубконто + "0";
			КонецЕсли;
		КонецЦикла;
		СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление) - 2);
		
		ТекущиеДанные.ПоСубконто    = СтрокаПоСубконто;
		ТекущиеДанные.Представление = СтрокаПредставление;
		
		Если ПустаяСтрока(СтрокаПредставление) Тогда
			ТекущиеДанные.ПоСубсчетам = Истина;
		Иначе
			Если ИмяЭлемента = "РазвернутоеСальдо" Тогда
				ТекущиеДанные.ПоСубсчетам = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ОбработкаРасшифровкиСтандартногоОтчета(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ФормаОтчета);
	
	ПараметрыРасшифровки = БухгалтерскиеОтчетыВызовСервера.ПолучитьПараметрыРасшифровкиОтчета(ФормаОтчета.ДанныеРасшифровки, ИдентификаторОбъекта, Расшифровка);
	
	Если Не ЗначениеЗаполнено(ПараметрыРасшифровки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные", Ложь, Истина, Ложь, Истина);
	Если ПараметрыРасшифровки.ОткрытьОбъект Тогда
		ПоказатьЗначение( , ПараметрыРасшифровки.Значение);
	ИначеЕсли ПараметрыРасшифровки.Свойство("ОткрытьФорму") И ПараметрыРасшифровки.ОткрытьФорму Тогда
		ОткрытьФорму(ПараметрыРасшифровки.Форма, ПараметрыРасшифровки.ПараметрыФормы);		
	Иначе
		СписокПунктовМеню = ПараметрыРасшифровки.СписокПунктовМеню;
		Если СписокПунктовМеню.Количество() = 1 Тогда
			ИДРасшифровки = СписокПунктовМеню[0].Значение;
			ИмяФормы = ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки);
			ПараметрыФормы = Новый Структура("ВидРасшифровки, АдресНастроек, СформироватьПриОткрытии, ИДРасшифровки, ЗаполняемыеНастройки",
			                                 1, ФормаОтчета.ДанныеРасшифровки, Истина, ИДРасшифровки, ЗаполняемыеНастройки);
			ОткрытьФорму(ИмяФормы, ПараметрыФормы,, Истина);
		ИначеЕсли СписокПунктовМеню.Количество() > 0 Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);
			ДополнительныеПараметры.Вставить("ФормаОтчета", ФормаОтчета);
			Оповещение = Новый ОписаниеОповещения("ВыбратьИзМенюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ФормаОтчета.ПоказатьВыборИзМеню(Оповещение, СписокПунктовМеню, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьИзМенюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Строка") Тогда
			ИмяФормы = ПолучитьИмяФормыПоИДРасшифровки(Результат.Значение);
			ПараметрыФормы = Новый Структура("ВидРасшифровки, АдресНастроек, СформироватьПриОткрытии, ИДРасшифровки, ЗаполняемыеНастройки",
			1, ДополнительныеПараметры.ФормаОтчета.ДанныеРасшифровки, Истина, Результат.Значение, ДополнительныеПараметры.ЗаполняемыеНастройки);
			ОткрытьФорму(ИмяФормы, ПараметрыФормы,, Истина);
		Иначе
			ПоказатьЗначение( , Результат.Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки)
	
	ИмяОбъекта = ИДРасшифровки;
	ШаблонИмениФормы = "Отчет.%ИмяОбъекта%.Форма.ФормаОтчета";
	
	Если ИДРасшифровки = "ОборотыСчетаПоДням" 
		Или ИДРасшифровки = "ОборотыСчетаПоМесяцам" Тогда
		ИмяОбъекта = "ОборотыСчета";
	КонецЕсли;
	
	Возврат СтрЗаменить(ШаблонИмениФормы, "%ИмяОбъекта%", ИмяОбъекта);
	
КонецФункции

Процедура ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля) Экспорт
	Перем ФормаВыбора;
	
	ОписанияТиповВидовСубконто = Форма.ОписанияТиповВидовСубконто;
	
	Если ТипЗнч(ТипПоля) <> Тип("ОписаниеТипов") Тогда
		
		Возврат;
		
	ИначеЕсли ТипПоля.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(Значение);
		Если ?(ТипЭлемента = Неопределено, Истина, не ТипПоля.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ТипПоля.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не СписокПараметров.Свойство("ФормаВыбора", ФормаВыбора) Тогда
		ФормаВыбора = "ФормаВыбора";
	КонецЕсли;
	
	Если ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияОтборов = Новый Структура;
		Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
			ЗначенияОтборов.Вставить("Владелец", СписокПараметров.Организация);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
		
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораБанковскогоСчетОрганизации(ПараметрыФормы, Элемент);
		
	ИначеЕсли ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияОтборов = Новый Структура;
		ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
			Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
				ЗначенияОтборов.Вставить(ИмяРеквизитаОрганизации, СписокПараметров.Организация);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
		
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораПодразделения(ПараметрыФормы, Элемент);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияОтборов = Новый Структура;
		Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
			ЗначенияОтборов.Вставить("Организация", СписокПараметров.Организация);
		КонецЕсли;
		ИмяРеквизитаКонтрагента = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
		Если ЗначениеЗаполнено(СписокПараметров.Контрагент) Тогда
			ЗначенияОтборов.Вставить(ИмяРеквизитаКонтрагента, СписокПараметров.Контрагент);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
		
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораДоговора(ПараметрыФормы, Элемент, ФормаВыбора);
		
	ИначеЕсли ТипПоля = ОписанияТиповВидовСубконто["Партия"] 
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.Партия") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОбъекта  = Новый Структура;
		Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
			ПараметрыОбъекта.Вставить("Организация", СписокПараметров.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокПараметров.Номенклатура) Тогда
			ПараметрыОбъекта.Вставить("Номенклатура", СписокПараметров.Номенклатура);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокПараметров.Склад) Тогда
			ПараметрыОбъекта.Вставить("Склад", СписокПараметров.Склад);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокПараметров.Дата) Тогда
			ПараметрыОбъекта.Вставить("КонецПериода", СписокПараметров.Дата);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокПараметров.СчетУчета) Тогда
			ПараметрыОбъекта.Вставить("СчетУчета", СписокПараметров.СчетУчета);
		КонецЕсли;
		ПараметрыОбъекта.Вставить("ТипыДокументов", ТипПоля);
		
		ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
		ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ТипПоля = ОписанияТиповВидовСубконто.ДокументРасчетовСКонтрагентами 
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОбъекта  = Новый Структура;
		Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
			ПараметрыОбъекта.Вставить("Организация", СписокПараметров.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокПараметров.Контрагент) Тогда
			ПараметрыОбъекта.Вставить("Контрагент", СписокПараметров.Контрагент);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокПараметров.ДоговорКонтрагента) Тогда
			ПараметрыОбъекта.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокПараметров.Дата) Тогда
			ПараметрыОбъекта.Вставить("Дата", СписокПараметров.Дата);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокПараметров.СчетУчета) Тогда
			ПараметрыОбъекта.Вставить("СчетУчета", СписокПараметров.СчетУчета);
		КонецЕсли;
		ПараметрыОбъекта.Вставить("ТипыДокументов", ТипПоля);
		
		ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
		
		ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ПартияМатериаловВЭксплуатации") Тогда
		
		ЗначенияОтборов = Новый Структура;
		Если ЗначениеЗаполнено(СписокПараметров.Контрагент) Тогда
			ЗначенияОтборов.Вставить("Номенклатура", СписокПараметров.Номенклатура);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Отбор", ЗначенияОтборов);
		ОткрытьФорму("Документ.ПартияМатериаловВЭксплуатации.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборыПравоеЗначениеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров) Экспорт
	
	Элементы = Форма.Элементы;
	Отчет    = Форма.Отчет;
	
	ОписанияТиповВидовСубконто = Форма.ОписанияТиповВидовСубконто;
	
	Если Элементы.Отборы.ТекущиеДанные <> Неопределено Тогда
		
		Поле               = Элементы.Отборы.ТекущиеДанные.ЛевоеЗначение;
		Значение           = Элементы.Отборы.ТекущиеДанные.ПравоеЗначение;
		ВидСравненияСтрока = Элементы.Отборы.ТекущиеДанные.ВидСравнения;
		
		ЭтоКорСубконто = (Найти(Строка(Поле), "КорСубконто") = 1);
		
		ТипПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, Поле, "Тип");
		
		// Принятая в конфигурации обработка работает только для равенства или вхождения в группу
		Если    Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.Равно)
			Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеРавно)
			Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.ВИерархии)
			Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеВИерархии) Тогда
			
			Для Каждого СтрокаОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Если ТипЗнч(СтрокаОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
					И ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
					
					ДругоеПоле      = СтрокаОтбора.ЛевоеЗначение;
					ДругоеЗначение  = ?(ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("СписокЗначений"), СтрокаОтбора.ПравоеЗначение, СтрокаОтбора.ПравоеЗначение[0].Значение);
					ДругойТипПоля   = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, ДругоеПоле, "Тип");
					
					Если ЭтоКорСубконто <> (Найти(Строка(ДругоеПоле), "КорСубконто") = 1) Тогда
						// Параметр относится к другому отбору
						Продолжить;
					КонецЕсли;
					
					Если ДругойТипПоля = ОписанияТиповВидовСубконто.Номенклатура Тогда
						СписокПараметров.Вставить("Номенклатура", ДругоеЗначение);
					ИначеЕсли ДругойТипПоля = ОписанияТиповВидовСубконто.Склад Тогда
						СписокПараметров.Вставить("Склад", ДругоеЗначение);
					ИначеЕсли ДругойТипПоля = ОписанияТиповВидовСубконто.Контрагент Тогда
						СписокПараметров.Вставить("Контрагент", ДругоеЗначение);
					ИначеЕсли ДругойТипПоля = ОписанияТиповВидовСубконто.ДоговорКонтрагента Тогда
						СписокПараметров.Вставить("ДоговорКонтрагента", ДругоеЗначение);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Если Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.ВИерархии)
				Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеВИерархии) Тогда
				СписокПараметров.Вставить("ФормаВыбора", "ФормаВыбораГруппы");
			Иначе
				СписокПараметров.Вставить("ФормаВыбора", "ФормаВыбора");
			КонецЕсли;
			
			ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Функция НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти)
	Перем СтруктураАдресВыделеннойОбласти;
	
	ВыделенныеОбласти    = Результат.ВыделенныеОбласти;
	КоличествоВыделенных = ВыделенныеОбласти.Количество();
	
	Если КоличествоВыделенных = 0 Тогда
		КэшВыделеннойОбласти = Новый Структура();
		Возврат Истина;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Ложь;
	Если ТипЗнч(КэшВыделеннойОбласти) <> Тип("Структура") Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	ИначеЕсли ВыделенныеОбласти.Количество() <> КэшВыделеннойОбласти.Количество() Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	Иначе
		Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
			ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
			ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
			КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			
			// не нашли нужную область в кэше, поэтому переинициализируем кэш
			Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
				КэшВыделеннойОбласти = Новый Структура();
				ВозвращаемоеЗначение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
		ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
		ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура("Верх, Низ, Лево, Право", 0, 0, 0, 0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
			Продолжить;
		КонецЕсли;
		
		КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
		Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура("Верх, Низ, Лево, Право", 0, 0, 0, 0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
		Если СтруктураАдресВыделеннойОбласти.Верх <> ВыделеннаяОбласть.Верх
			ИЛИ СтруктураАдресВыделеннойОбласти.Низ <> ВыделеннаяОбласть.Низ
			ИЛИ СтруктураАдресВыделеннойОбласти.Лево <> ВыделеннаяОбласть.Лево
			ИЛИ СтруктураАдресВыделеннойОбласти.Право <> ВыделеннаяОбласть.Право Тогда
				СтруктураАдресВыделеннойОбласти = Новый Структура("Верх, Низ, Лево, Право",
					ВыделеннаяОбласть.Верх, ВыделеннаяОбласть.Низ, ВыделеннаяОбласть.Лево, ВыделеннаяОбласть.Право);
				КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
				ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере) Экспорт
	
	Если НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти) Тогда
		ПолеСумма = 0;
		КоличествоВыделенныхОбластей = КэшВыделеннойОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0      // Ничего не выделено
			ИЛИ КэшВыделеннойОбласти.Свойство("T") // Выделен весь табличный документ (Ctrl+A)
			Тогда
			КэшВыделеннойОбласти.Вставить("Сумма", 0);
		ИначеЕсли КоличествоВыделенныхОбластей = 1 Тогда
			// Если выделено небольшое количество ячеек, то получим сумму на клиенте
			Для каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
				СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
			КонецЦикла;
			
			РазмерОбластиПоВертикали   = СтруктураАдресВыделеннойОбласти.Низ   - СтруктураАдресВыделеннойОбласти.Верх;
			РазмерОбластиПоГоризонтали = СтруктураАдресВыделеннойОбласти.Право - СтруктураАдресВыделеннойОбласти.Лево;
			
			// В некоторых отчетах показатели (да и аналитика на которую может встать пользователь
			// выводятся в "объединенных" ячейках - не желательно в этом случае делать серверный вызов. 
			// Выделенная область из 10 ячеек закрывает все такие случае и скорее всего всегда будет доступна на клиенте.
			// Максимум, может быть сделан один неявный серверный вызов
			ВычислитьНаКлиенте = (РазмерОбластиПоВертикали + РазмерОбластиПоГоризонтали) < 12;
			Если ВычислитьНаКлиенте Тогда
				СуммаВЯчейках = 0;
				Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
					Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
						Попытка
							Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
							Если Ячейка.Видимость = Истина Тогда
								Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
									СуммаВЯчейках = СуммаВЯчейках + Ячейка.Значение;
								ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
									ЧислоВЯчейке  = Вычислить("Число(СтрЗаменить(Ячейка.Текст, Символ(32), Символ(0)))");
									СуммаВЯчейках = СуммаВЯчейках + ЧислоВЯчейке;
								КонецЕсли;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЦикла;
				КонецЦикла;
				
				ПолеСумма = СуммаВЯчейках;
				КэшВыделеннойОбласти.Вставить("Сумма", ПолеСумма);
			Иначе
				// Если ячеек много, то лучше вычислим сумму ячеек на сервере за один вызов,
				// т.к. неявных серверных вызовов может быть гораздо больше
				НеобходимоВычислятьНаСервере = Истина;
			КонецЕсли;
		Иначе
			// Вычислим сумму ячеек на сервере
			НеобходимоВычислятьНаСервере = Истина;
		КонецЕсли;
	Иначе	
		ПолеСумма = КэшВыделеннойОбласти.Сумма;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	// Установка модифицированности пользовательских настроек 
	// для их автоматического сохранения при закрытии формы
	Если Форма.Отчет.Свойство("РежимРасшифровки") Тогда
		Форма.ПользовательскиеНастройкиМодифицированы = Не Форма.Отчет.РежимРасшифровки;
	Иначе
		Форма.ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	Попытка
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
			Форма.ПолеОрганизация, Форма.Отчет.Организация, Форма.Отчет.ВключатьОбособленныеПодразделения);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередЗакрытием(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Структура отчета задается динамически, поэтому в сохранении Варианта нет необходимости
	Форма.ВариантМодифицирован = Ложь;
	
КонецПроцедуры

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Процедура РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Форма, Тип = 1) Экспорт
	
	ПараметрыФормы = Новый Структура("Тип", Тип);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаСчетовУчетаРасчетов", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

Процедура РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженностиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	СписокИзменен = РезультатЗакрытия;
	
	Если ТипЗнч(СписокИзменен) = Тип("Булево") И СписокИзменен Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
	КонецЕсли;	
	
КонецПроцедуры

// Открывает предопределенный вариант отчета
//
// Параметры:
//  Вариант  - Структура - описание варианта отчета:
//     * ИмяОтчета           - Строка - имя отчета
//     * КлючВарианта        - Строка - ключ варианта отчета
//
Процедура ОткрытьВариантОтчета(Вариант) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючВарианта", Вариант.КлючВарианта);
	
	Уникальность = "Отчет." + Вариант.ИмяОтчета + "/КлючВарианта." + Вариант.КлючВарианта;
	
	ПараметрыОткрытия.Вставить("КлючПараметровПечати",        Уникальность);
	ПараметрыОткрытия.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
	
	ОткрытьФорму("Отчет." + Вариант.ИмяОтчета + ".Форма", ПараметрыОткрытия, Неопределено, Истина);
	
КонецПроцедуры
