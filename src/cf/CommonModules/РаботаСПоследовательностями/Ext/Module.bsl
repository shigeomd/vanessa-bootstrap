////////////////////////////////////////////////////////////////////////////////
// Работа с последовательностями
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает блокировку на набор записи последовательности по регистратору.
//
// Параметры:
//	Регистратор - ДокументСсылка.*
//	Отказ 		- Булево
//	Заголовок	- Строка, текст для сообщения
//
Процедура УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(Регистратор, Отказ = Ложь, Заголовок = "") Экспорт

	ПараметрыБлокировки = Новый Структура();
	ПараметрыБлокировки.Вставить("ТипТаблицы", "Последовательность.ДокументыОрганизаций");
	ПараметрыБлокировки.Вставить("ИмяТаблицы", "НаборЗаписей");
	
	ЗначенияБлокировки = Новый Структура();
	ЗначенияБлокировки.Вставить("Регистратор", Регистратор);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(
		ПараметрыБлокировки, ЗначенияБлокировки, , Отказ, Заголовок);

КонецПроцедуры

// Устанавливает блокировку последовательности по Организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организация
//	Отказ 		- Булево
//	Заголовок	- Строка, текст для сообщения
//
Процедура УстановитьБлокировкуПоследовательностиПоОрганизации(Организация, Отказ = Ложь, Заголовок = "") Экспорт

	ПараметрыБлокировки = Новый Структура();
	ПараметрыБлокировки.Вставить("ТипТаблицы", "Последовательность");
	ПараметрыБлокировки.Вставить("ИмяТаблицы", "ДокументыОрганизаций");
	
	ЗначенияБлокировки = Новый Структура();
	ЗначенияБлокировки.Вставить("Организация", Организация);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(
		ПараметрыБлокировки, ЗначенияБлокировки, , Отказ, Заголовок);

КонецПроцедуры

// Функция возвращает момент времени, с которого последовательность была нарушена в указанном периоде.
// 
// Параметры:
// 	Организация 	- СправочникСсылка.Организации, список организаций
//	ДатаНачала		- Дата, с которой необходимо анализировать (включительно).
//						Если указана пустая дата, то без ограничения.
//	ДатаОкончания	- Дата, до которого необходимо анализировать (включительно).
//						Если указана пустая дата, то без ограничения.
//
// Возвращаемое значение:
//	МоментВремени, с которого последовательность нарушена
//		или Неопределено, если нарушения последовательности не обнаружено
//
Функция МоментНарушенияПоследовательности(Организация, ДатаНачала = '0001-01-01', ДатаОкончания = '0001-01-01') Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоследовательности.Период КАК Период,
	|	ТаблицаПоследовательности.Регистратор КАК Регистратор
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ТаблицаПоследовательности
	|ГДЕ
	|	ТаблицаПоследовательности.Организация В(&Организация)
	|	И ТаблицаПоследовательности.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности))
	|	И &УсловиеПоПериоду
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	ТекстУсловиеПоПериоду = "";
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстУсловиеПоПериоду = "ТаблицаПоследовательности.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
		ТекстУсловиеПоПериоду = "ТаблицаПоследовательности.Период >= &ДатаНачала";
		
	ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстУсловиеПоПериоду = "ТаблицаПоследовательности.Период <= &ДатаОкончания";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстУсловиеПоПериоду) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПериоду", ТекстУсловиеПоПериоду);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПоПериоду", "");
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Новый МоментВремени(Выборка.Период, Выборка.Регистратор);
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает более поздний из моментов времени:
//		- когда была нарушена последовательность
//		- первое число следующего месяца, за период с момента нарушения последовательности и ДоДаты, 
//			который не отмечен в регистре сведений ИсключенныеИзПерепроведенияМесяцы.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации
//	ДоДаты 		- Дата, до которого необходимо анализировать (включительно)
//
// Возвращаемое значение:
//	МоментВремени, с которого последовательность нарушена
//		или Неопределено, если нарушения последовательности не обнаружено
//
Функция МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(Организация, ДоДаты) Экспорт

	// Если месяц был пропущен, то находим ближайщий следующий за ним,
	// который не является исключенным.

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДоДаты", ДоДаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИсключенныеИзПерепроведенияМесяцы.ПериодРегистрации) КАК ПериодРегистрации
	|ИЗ
	|	РегистрСведений.ИсключенныеИзПерепроведенияМесяцы КАК ИсключенныеИзПерепроведенияМесяцы
	|ГДЕ
	|	ИсключенныеИзПерепроведенияМесяцы.Организация = &Организация
	|	И ИсключенныеИзПерепроведенияМесяцы.ПериодРегистрации <= &ДоДаты";

	ДатаНачала = '0001-01-01';
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.ПериодРегистрации <> NULL Тогда
			// Начинаем с месяца, следующего за исключенным из перепроводимых.
			ДатаНачала = КонецМесяца(Выборка.ПериодРегистрации) + 1;
		КонецЕсли;
	КонецЕсли;

	Если ДатаНачала <= ДоДаты Тогда
		Результат = МоментНарушенияПоследовательности(Организация, ДатаНачала, ДоДаты);
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Устанавливает состояние для документа в последовательности в "Проведен с нарушением последовательности".
//
Процедура СброситьСостояниеПоследовательностиДокумента(Регистратор, Период, Организация) Экспорт

	// Если вызывается вне более общей транзакции, то стартуем транзакцию самостоятельно,
	// т.к. управляемая блокировка на набор записей последовательности может производиться 
	// только в рамках транзакции.
	ТранзакцияБылаАктивна = ТранзакцияАктивна();
	Если НЕ ТранзакцияБылаАктивна Тогда
		НачатьТранзакцию();
	КонецЕсли;

	Попытка

		УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(Регистратор);

		НаборЗаписей = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();

		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Для Каждого Движение Из НаборЗаписей Цикл
				Если Движение.Организация = Организация Тогда
					Если Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности Тогда
						Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Проверим, помечен ли документ на удаление или нет
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор, "ПометкаУдаления");
		
			Движение = НаборЗаписей.Добавить();
			Движение.Период 		= Период;
			Движение.Регистратор 	= Регистратор;
			Движение.Организация 	= Организация;
			Если РеквизитыДокумента.ПометкаУдаления Тогда
				Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности;
			Иначе
				Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности;
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
		Если НЕ ТранзакцияБылаАктивна Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
	
		ИнформацияОбОшибке = ИнформацияОбОшибке();

		Если НЕ ТранзакцияБылаАктивна Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'РаботаСПоследовательностями'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Регистратор, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)); 
		
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

// Возвращает приблизительное количество документов, подлежащий перепроведению
// в указанном периоде по заданной организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, по которой выполняется оценка
//	ДатаНачала - Дата+Время - начало периода для оценки количества документов
//	ДатаОкончания - Дата+Время - окончание периода
//	МоментНарушения - МоментВремени - момент нарушения последовательности или Неопределено.
//	
// Возвращаемое значение:
//	Число - оценка количества документов для перепроведения
//
Функция ОценкаКоличестваДокументовДляПерепроведения(Организация, ДатаНачала, ДатаОкончания, МоментНарушения) Экспорт

	// Определим приблизительное число документов, которые попадают в перепроведение.
	// Фактически число документов может быть больше, за счет того, что
	// могут быть документы, которые не отражаются в журнале операций.
	//
	// При этом счета-фактуры полученные перепроводятся в групповой обработке 
	// не самостоятельно, а при проведении подчиненного документа-основания.
	// Поэтому их исключаем из подсчета, чтобы не получалось 
	// количество документов по отчету группового перепроведения меньше, чем
	// в информационной строке формы закрытия месяца.
	
	МоментНарушенияСсылка = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	Если МоментНарушения = Неопределено Тогда
		ДатаНач = ДатаНачала;
	Иначе
		ДатаНач = Макс(ДатаНачала, МоментНарушения.Дата);
		Если ЗначениеЗаполнено(МоментНарушения.Ссылка) Тогда
			МоментНарушенияСсылка = МоментНарушения.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ДатаНач", 		ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 		ДатаОкончания);
	Запрос.УстановитьПараметр("МоментНарушенияСсылка", 		МоментНарушенияСсылка);

	Если МоментНарушения = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЖурналОпераций.Ссылка) КАК КоличествоДокументов
		|ИЗ
		|	ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
		|ГДЕ
		|	ЖурналОпераций.Организация = &Организация
		|	И ЖурналОпераций.Проведен
		|	И ЖурналОпераций.Дата >= &ДатаНач
		|	И ЖурналОпераций.Дата <= &ДатаКон
		|	И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.СчетФактураПолученный
		|	И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.СчетФактураВыданный";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(Журнал.КоличествоДокументов) КАК КоличествоДокументов
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(ЖурналОпераций.Ссылка) КАК КоличествоДокументов
		|	ИЗ
		|		ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
		|	ГДЕ
		|		ЖурналОпераций.Организация = &Организация
		|		И ЖурналОпераций.Проведен
		|		И ЖурналОпераций.Дата > &ДатаНач
		|		И ЖурналОпераций.Дата <= &ДатаКон
		|		И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.СчетФактураПолученный
		|		И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.СчетФактураВыданный
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КОЛИЧЕСТВО(ЖурналОпераций.Ссылка)
		|	ИЗ
		|		ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
		|	ГДЕ
		|		ЖурналОпераций.Организация = &Организация
		|		И ЖурналОпераций.Проведен
		|		И ЖурналОпераций.Дата = &ДатаНач
		|		И ЖурналОпераций.Ссылка >= &МоментНарушенияСсылка
		|		И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.СчетФактураПолученный
		|		И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.СчетФактураВыданный) КАК Журнал";
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();

	КоличествоДокументов = 0;

	Если Выборка.Следующий() Тогда
		КоличествоДокументов = ?(Выборка.КоличествоДокументов = NULL, 0, Выборка.КоличествоДокументов);
	КонецЕсли;

	// Округлим в меньшую сторону до "круглых" цифры, чтобы в тексте сообщения можно было написать "более".
	Если КоличествоДокументов > 100 Тогда
		КоличествоДокументов = Цел(КоличествоДокументов / 100) * 100;
	ИначеЕсли КоличествоДокументов > 10 Тогда
		КоличествоДокументов = Цел(КоличествоДокументов / 10) * 10;
	КонецЕсли;

	Возврат КоличествоДокументов;

КонецФункции

// Возвращает момент времени первого документа, который ближе всех находится
// к указанной дате (в будущее).
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, по которой выполняется оценка
//	НачинаяСДаты - Дата+Время - дата, начиная с которой ищется документ
//	
// Возвращаемое значение:
//	Момент времени
//
Функция МоментВремениПервогоДокументаВПоследовательности(Организация, НачинаяСДаты) Экспорт

	// Находим первый документ, который лежит с указанной даты+время.
	// 
	// При поиске учитываем не только данные из самой последовательности, но и из РБ.Хозрасчетный, 
	// т.к. в последовательность при обновлении с БП 2.0 не пишутся все имеющиеся 
	// в базе документы для сокращения времени обновления, а только фиксируется первый документ, 
	// нарушивший старые последовательности.
	// Поэтому в последовательности ДокументыОрганизаций "в прошлом" могут быть пропуски
	// в документах, которые были изначально введены в БП 2.0.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("НачинаяСДаты", 	НачинаяСДаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоследовательности.Регистратор КАК Регистратор,
	|	ТаблицаПоследовательности.Период КАК Период,
	|	ИСТИНА КАК ЭтоДанныеПоследовательности
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ТаблицаПоследовательности
	|ГДЕ
	|	ТаблицаПоследовательности.Организация = &Организация
	|	И ТаблицаПоследовательности.Период >= &НачинаяСДаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор,
	|	Хозрасчетный.Период,
	|	ЛОЖЬ КАК ЭтоДанныеПоследовательности
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.Период >= &НачинаяСДаты
	|	И &УсловиеПоРегистратору
	|	И НЕ (Хозрасчетный.Регистратор ССЫЛКА Документ.СчетФактураПолученный)
	|	И НЕ (Хозрасчетный.Регистратор ССЫЛКА Документ.СчетФактураВыданный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	// Составим перечень типов документов, которые являются регистраторами Хозрасчетного, 
	// но не входят в состав последовательности.
	ТипыРегистраторовХозрасчетного = Метаданные.РегистрыБухгалтерии.Хозрасчетный.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	МетаданныеРегистраторовПоследовательности = Метаданные.Последовательности.ДокументыОрганизаций.Документы;
	
	ТекстИсключения = "";
	
	Для Каждого ТипРегистратора Из ТипыРегистраторовХозрасчетного Цикл
	
		МетаданныеРегистратора = Метаданные.НайтиПоТипу(ТипРегистратора);
		Если МетаданныеРегистратора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ МетаданныеРегистраторовПоследовательности.Содержит(МетаданныеРегистратора) Тогда
			Если НЕ ПустаяСтрока(ТекстИсключения) Тогда
				ТекстИсключения = ТекстИсключения + " И ";
			КонецЕсли;
			ТекстИсключения = ТекстИсключения + " НЕ Хозрасчетный.Регистратор ССЫЛКА Документ." + МетаданныеРегистратора.Имя;
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстИсключения) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоРегистратору", "(" + ТекстИсключения + ")");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПоРегистратору", "");
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВводНачальныхОстатков")
			И НЕ Выборка.ЭтоДанныеПоследовательности Тогда
			Результат = Новый МоментВремени(КонецМесяца(Выборка.Период) + 1, Выборка.Регистратор);
		Иначе
			Результат = Новый МоментВремени(Выборка.Период, Выборка.Регистратор);
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;

КонецФункции


// Возвращает момент времени первого документа в последовательности.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, по которой выполняется поиск.
// Возвращаемое значение:
//  МоментВремени - Момент времени первого документа в последовательности.
//  Если в последовательности нет ни одного документа, возвращается Неопределено.
//
Функция НачалоПоследовательности(Организация) Экспорт
	
	Возврат МоментВремениПервогоДокументаВПоследовательности(Организация, Дата(1,1,1));
		
КонецФункции


// Возвращает момент времени последнего документа в последовательности.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, по которой выполняется поиск.
// Возвращаемое значение:
//  МоментВремени - Момент времени первого документа в последовательности.
//  Если в последовательности нет ни одного документа, возвращается Неопределено.
//
Функция КонецПоследовательности(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Тип", Тип("ДокументСсылка.ВводНачальныхОстатков"));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыОрганизаций.МоментВремени КАК МоментВремени
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций
	|ГДЕ
	|	ДокументыОрганизаций.Организация = &Организация
	|	И ТИПЗНАЧЕНИЯ(ДокументыОрганизаций.Регистратор) <> &Тип
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		МоментНачалаПоследовательности = Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		МоментНачалаПоследовательности = Выборка.МоментВремени;
	КонецЕсли;
	
	Возврат МоментНачалаПоследовательности;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// Заменяет существующие последовательности "Общая последовательность"
// и "Взаиморасчеты" на последовательность "Документы организаций".
//
Процедура ЗаменитьСтарыеПоследовательностиНаДокументыОрганизаций() Экспорт

	// Гарантированно очищаем последовательность перед записью актуальных данных.
	ОчиститьПоследовательностьДокументыОрганизаций();

	ПараметрыПерехода = ОбновлениеСПредыдущейРедакции.ПараметрыПереходаСРедакции20();

	ЭтоПереходСРедакции20 = ПараметрыПерехода.ВыполнитьЗаполнениеПоследовательностей;

	// Если ранее учитывались последовательности, то находим их границы 
	БылКонтрольПоследовательности = Константы.УдалитьКонтролироватьПоследовательностьПроведения.Получить();
	Если БылКонтрольПоследовательности Тогда
		ЗаменитьСтарыеПоследовательностиРанееИспользовалсяКонтроль(ЭтоПереходСРедакции20);
	Иначе
		ЗаменитьСтарыеПоследовательностиРанееНеИспользовалсяКонтроль();
	КонецЕсли;

	Если ЭтоПереходСРедакции20 Тогда
		// Снимем признак необходимости обновления последовательностей 2.0
		ПараметрыПерехода.ВыполнитьЗаполнениеПоследовательностей = Ложь;
		ОбновлениеСПредыдущейРедакции.УстановитьПараметрыПереходаСРедакции20(ПараметрыПерехода);
	КонецЕсли;

КонецПроцедуры

// Заменяет существующие последовательности "Общая последовательность"
// и "Взаиморасчеты" на последовательность "Документы организаций" для 
// случая, если ранее в базе использовался контроль последовательности проведения.
//
Процедура ЗаменитьСтарыеПоследовательностиРанееИспользовалсяКонтроль(ЭтоПереходСРедакции20)

	Если ЭтоПереходСРедакции20 Тогда
		ТекстЗапроса = ТекстЗапросаГраницыПоследовательностей20();
	Иначе
		ТекстЗапроса = ТекстЗапросаГраницыПоследовательностей30();
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
	
		ДатаНачалаПерепроведения = Неопределено;
		Регистратор = Неопределено;
	
		Если Выборка.СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
			ДатаНачалаПерепроведения = Выборка.ПериодОбщаяПоследовательность;
			Регистратор = Выборка.РегистраторОбщаяПоследовательность;
		Иначе
			ДатаНачалаПерепроведения = Выборка.ПериодВзаиморасчеты;
			Регистратор = Выборка.РегистраторВзаиморасчеты;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаНачалаПерепроведения) Тогда
			ДатаНачалаПерепроведения = НачалоМесяца(Выборка.Период);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Регистратор) Тогда
			// В старых последовательностях и их границах иногда встречаются 
			// ссылки на несуществующие документы, такие учитывать не будем.
			Если НЕ ОбщегоНазначения.СсылкаСуществует(Регистратор) Тогда
				Регистратор = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Регистратор) Тогда
		
			МоментПервогоДокументаЗаМесяц = МоментВремениПервогоДокументаВПоследовательности(
				Выборка.Организация, ДатаНачалаПерепроведения);
			
			Если МоментПервогоДокументаЗаМесяц <> Неопределено Тогда
				Регистратор = МоментПервогоДокументаЗаМесяц.Ссылка;
				ДатаНачалаПерепроведения = МоментПервогоДокументаЗаМесяц.Дата;
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Регистратор) Тогда
			ОтметитьНарушениеПоследовательности(ДатаНачалаПерепроведения, Регистратор, Выборка.Организация);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Заменяет существующие последовательности "Общая последовательность"
// и "Взаиморасчеты" на последовательность "Документы организаций" для 
// случая, если ранее в базе использовался не контроль последовательности проведения.
//
Процедура ЗаменитьСтарыеПоследовательностиРанееНеИспользовалсяКонтроль()

	// Последовательности "Общая последовательность" или "Взаиморасчеты" не велись в базе,
	// поэтому в качестве первого документа, с которого необходимо перепроводить,
	// возьмем начало последнего месяца из регистра Хозрасчетный.

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Организация,
	|	МАКСИМУМ(Хозрасчетный.Период) КАК Период
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Организация
	|";
	
	Запрос = Новый Запрос;

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
	
		ДатаНачалаПерепроведения = Неопределено;
		Регистратор = Неопределено;
	
		ДатаНачалаПерепроведения = НачалоМесяца(Выборка.Период);
		
		МоментПервогоДокументаЗаМесяц = МоментВремениПервогоДокументаВПоследовательности(
			Выборка.Организация, ДатаНачалаПерепроведения);
		
		Если МоментПервогоДокументаЗаМесяц <> Неопределено Тогда
			Регистратор = МоментПервогоДокументаЗаМесяц.Ссылка;
			ДатаНачалаПерепроведения = МоментПервогоДокументаЗаМесяц.Дата;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Регистратор) Тогда
			ОтметитьНарушениеПоследовательности(ДатаНачалаПерепроведения, Регистратор, Выборка.Организация);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОтметитьНарушениеПоследовательности(Период, Регистратор, Организация)

	НаборЗаписей = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор, Истина);
	
	Попытка
		ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "ПометкаУдаления");
	
		Движение = НаборЗаписей.Добавить();
		
		Движение.Период 		= Период;
		Движение.Регистратор 	= Регистратор;
		Движение.Организация 	= Организация;
		Если ПометкаУдаления Тогда
			Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности;
		Иначе
			Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи набора последовательности ДокументыОрганизаций для документа %1'"),
			Регистратор);
		
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
			
	КонецПопытки;

КонецПроцедуры

Функция ТекстЗапросаГраницыПоследовательностей20()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация,
	|	УчетнаяПолитикаОрганизаций.СпособОценкиМПЗ
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаГоловныхОрганизаций
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, ) КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УчетнаяПолитикаОрганизаций.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрОрганизации.Ссылка КАК Организация,
	|	ЕСТЬNULL(УПГоловной.СпособОценкиМПЗ, УПСобственная.СпособОценкиМПЗ) КАК СпособОценкиМПЗ
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	Справочник.Организации КАК СпрОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаГоловныхОрганизаций КАК УПГоловной
	|		ПО СпрОрганизации.ГоловнаяОрганизация = УПГоловной.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаГоловныхОрганизаций КАК УПСобственная
	|		ПО СпрОрганизации.Ссылка = УПСобственная.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Организация,
	|	МАКСИМУМ(Хозрасчетный.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ПоследниеДатыПроводок
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Хозрасчетный.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеДатыПроводок.Организация,
	|	ВТ_ПоследниеДатыПроводок.Период,
	|	ВТ_УчетнаяПолитика.СпособОценкиМПЗ,
	|	УдалитьВзаиморасчеты20.Период КАК ПериодВзаиморасчеты,
	|	УдалитьВзаиморасчеты20.Регистратор КАК РегистраторВзаиморасчеты,
	|	УдалитьОбщаяПоследовательность.Период КАК ПериодОбщаяПоследовательность,
	|	УдалитьОбщаяПоследовательность.Регистратор КАК РегистраторОбщаяПоследовательность
	|ИЗ
	|	ВТ_ПоследниеДатыПроводок КАК ВТ_ПоследниеДатыПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ВТ_ПоследниеДатыПроводок.Организация = ВТ_УчетнаяПолитика.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.УдалитьВзаиморасчеты20.Границы КАК УдалитьВзаиморасчеты20
	|		ПО ВТ_ПоследниеДатыПроводок.Организация = УдалитьВзаиморасчеты20.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.УдалитьОбщаяПоследовательность20.Границы КАК УдалитьОбщаяПоследовательность
	|		ПО ВТ_ПоследниеДатыПроводок.Организация = УдалитьОбщаяПоследовательность.Организация";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаГраницыПоследовательностей30()

	// Для последовательности Взаиморасчеты из ред. 3.0 по каждому договору
	// сравниваем границу последовательности с самой последней записью последовательности
	// по этому же договору. Если граница последовательности не совпадает с этой последней записью,
	// то последовательность по договору считается нарушенной.
	// Среди всех таких нарушенных границ договоров определяем самую раннюю по организации
	// и переносим из нее информацию о дате и регистраторе в новую последовательность.

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация,
	|	УчетнаяПолитикаОрганизаций.СпособОценкиМПЗ
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, ) КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УчетнаяПолитикаОрганизаций.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьВзаиморасчеты30.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	МАКСИМУМ(УдалитьВзаиморасчеты30.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ПоследниеДатыПоДоговорам
	|ИЗ
	|	Последовательность.УдалитьВзаиморасчеты30 КАК УдалитьВзаиморасчеты30
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьВзаиморасчеты30.ДоговорКонтрагента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоговорКонтрагента,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьВзаиморасчеты30.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	УдалитьВзаиморасчеты30.Период,
	|	МАКСИМУМ(УдалитьВзаиморасчеты30.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ПоследниеДокументыПоДоговорам
	|ИЗ
	|	Последовательность.УдалитьВзаиморасчеты30 КАК УдалитьВзаиморасчеты30
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеДатыПоДоговорам КАК ВТ_ПоследниеДатыПоДоговорам
	|		ПО УдалитьВзаиморасчеты30.ДоговорКонтрагента = ВТ_ПоследниеДатыПоДоговорам.ДоговорКонтрагента
	|			И УдалитьВзаиморасчеты30.Период = ВТ_ПоследниеДатыПоДоговорам.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьВзаиморасчеты30.ДоговорКонтрагента,
	|	УдалитьВзаиморасчеты30.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГраницыВзаиморасчеты.ДоговорКонтрагента.Организация КАК Организация,
	|	ГраницыВзаиморасчеты.Период КАК Период,
	|	ГраницыВзаиморасчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_Взаиморасчеты
	|ИЗ
	|	Последовательность.УдалитьВзаиморасчеты30.Границы КАК ГраницыВзаиморасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеДокументыПоДоговорам КАК ВТ_ПоследниеДатыПоДоговорам
	|		ПО ГраницыВзаиморасчеты.ДоговорКонтрагента = ВТ_ПоследниеДатыПоДоговорам.ДоговорКонтрагента
	|			И ГраницыВзаиморасчеты.Период = ВТ_ПоследниеДатыПоДоговорам.Период
	|			И ГраницыВзаиморасчеты.Регистратор = ВТ_ПоследниеДатыПоДоговорам.Регистратор
	|ГДЕ
	|	ВТ_ПоследниеДатыПоДоговорам.ДоговорКонтрагента ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Взаиморасчеты.Организация КАК Организация,
	|	МИНИМУМ(ВТ_Взаиморасчеты.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ВзаиморасчетыМинПериоды
	|ИЗ
	|	ВТ_Взаиморасчеты КАК ВТ_Взаиморасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Взаиморасчеты.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВзаиморасчетыМинПериоды.Организация КАК Организация,
	|	ВТ_ВзаиморасчетыМинПериоды.Период КАК Период,
	|	МИНИМУМ(ВТ_Взаиморасчеты.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ВзаиморасчетыОкончательный
	|ИЗ
	|	ВТ_ВзаиморасчетыМинПериоды КАК ВТ_ВзаиморасчетыМинПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Взаиморасчеты КАК ВТ_Взаиморасчеты
	|		ПО ВТ_ВзаиморасчетыМинПериоды.Организация = ВТ_Взаиморасчеты.Организация
	|			И ВТ_ВзаиморасчетыМинПериоды.Период = ВТ_Взаиморасчеты.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВзаиморасчетыМинПериоды.Организация,
	|	ВТ_ВзаиморасчетыМинПериоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Организация,
	|	МАКСИМУМ(Хозрасчетный.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ПоследниеДатыПроводок
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Хозрасчетный.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеДатыПроводок.Организация,
	|	ВТ_ПоследниеДатыПроводок.Период,
	|	ВТ_УчетнаяПолитика.СпособОценкиМПЗ,
	|	ВТ_ВзаиморасчетыОкончательный.Период КАК ПериодВзаиморасчеты,
	|	ВТ_ВзаиморасчетыОкончательный.Регистратор КАК РегистраторВзаиморасчеты,
	|	УдалитьОбщаяПоследовательность.Период КАК ПериодОбщаяПоследовательность,
	|	УдалитьОбщаяПоследовательность.Регистратор КАК РегистраторОбщаяПоследовательность
	|ИЗ
	|	ВТ_ПоследниеДатыПроводок КАК ВТ_ПоследниеДатыПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ВТ_ПоследниеДатыПроводок.Организация = ВТ_УчетнаяПолитика.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВзаиморасчетыОкончательный КАК ВТ_ВзаиморасчетыОкончательный
	|		ПО ВТ_ПоследниеДатыПроводок.Организация = ВТ_ВзаиморасчетыОкончательный.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.УдалитьОбщаяПоследовательность30.Границы КАК УдалитьОбщаяПоследовательность
	|		ПО ВТ_ПоследниеДатыПроводок.Организация = УдалитьОбщаяПоследовательность.Организация";

	Возврат ТекстЗапроса;

КонецФункции

Процедура ОчиститьПоследовательностьДокументыОрганизаций()

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Регистратор
	|ИЗ
	|	Последовательность.ДокументыОрганизаций
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
	
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Записать();
	
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьПоследовательностьВзаиморасчеты20Отложенно(Параметры) Экспорт

	ОчиститьПоследовательностьОтложенно("УдалитьВзаиморасчеты20", Параметры);

КонецПроцедуры

Процедура ОчиститьОбщуюПоследовательность20Отложенно(Параметры) Экспорт

	ОчиститьПоследовательностьОтложенно("УдалитьОбщаяПоследовательность20", Параметры);

КонецПроцедуры

Процедура ОчиститьПоследовательностьВзаиморасчеты30Отложенно(Параметры) Экспорт

	ОчиститьПоследовательностьОтложенно("УдалитьВзаиморасчеты30", Параметры);

КонецПроцедуры

Процедура ОчиститьОбщуюПоследовательность30Отложенно(Параметры) Экспорт

	ОчиститьПоследовательностьОтложенно("УдалитьОбщаяПоследовательность30", Параметры);

КонецПроцедуры

Процедура ОчиститьПоследовательностьОтложенно(ИмяПоследовательности, Параметры)

	Запрос = Новый Запрос;
	
	// Старые последовательности 2.0 и 3.0 очищаем полностью, чтобы не занимать 
	// под них место в базе. Т.к. эти последовательности в новом релизе после
	// выполнения монопольной процедуры обновления не используются совсем, 
	// то порядок обработки неважен. Отбираем порцию по 1000 записей по регистратору. 
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ТаблицаПоследовательности.Регистратор КАК Регистратор
	|ИЗ
	|	Последовательность." + ИмяПоследовательности + " КАК ТаблицаПоследовательности
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";

	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	НаборЗаписей = Последовательности[ИмяПоследовательности].СоздатьНаборЗаписей();

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Попытка
		
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();			
		
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение

			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось очистить последовательность ""%1"" по документу ""%2"" по причине:
					|%3'"), 
					ИмяПоследовательности,
					Выборка.Регистратор,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,, 
				Выборка.Регистратор, ТекстСообщения);
			
			ВызватьИсключение;

		КонецПопытки;	
	
	КонецЦикла;

	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре РаботаСПоследовательностями.ОчиститьПоследовательностьОтложенно
					|не удалось очистить в последовательности ""%1"" %2 документов.'"), 
					ИмяПоследовательности,
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Процедура РаботаСПоследовательностями.ОчиститьПоследовательностьОтложенно
						|обработала очередную порцию записей в последовательности ""%1"": %2 документов'"), 
						ИмяПоследовательности,
						ОбъектовОбработано));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ИсключитьСчетаФактурыИзПоследовательностиДокументыОрганизаций(Параметры) Экспорт

	Запрос = Новый Запрос;
	
	// Счета-фактуры (полученные и выданные) не должны нарушать последовательность
	// первичных документов при регистрации счетов-фактур на аванс или налогового агента. 
	// Счета-фактуры на поступление, реализацию и корректировочные 
	// изначально не регистрировались в последовательности.
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ТаблицаПоследовательности.Период КАК Период,
	|	ТаблицаПоследовательности.Регистратор КАК Регистратор
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ТаблицаПоследовательности
	|ГДЕ
	|	ТаблицаПоследовательности.Регистратор ССЫЛКА Документ.СчетФактураВыданный
	|	ИЛИ ТаблицаПоследовательности.Регистратор ССЫЛКА Документ.СчетФактураПолученный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	Регистратор УБЫВ";

	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	НаборЗаписей = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Попытка
		
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();			
		
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение

			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось очистить последовательность ""Документы организаций"" по документу ""%1"" по причине:
					|%2'"), 
					Выборка.Регистратор,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,, 
				Выборка.Регистратор, ТекстСообщения);
			
			ВызватьИсключение;

		КонецПопытки;	
	
	КонецЦикла;

	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре РаботаСПоследовательностями.ИсключитьСчетаФактурыИзПоследовательностиДокументыОрганизаций
					|не удалось очистить в последовательности %1 документов.'"), 
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Процедура РаботаСПоследовательностями.ИсключитьСчетаФактурыИзПоследовательностиДокументыОрганизаций
						|обработала очередную порцию записей в последовательности: %1 документов'"), 
						ОбъектовОбработано));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
