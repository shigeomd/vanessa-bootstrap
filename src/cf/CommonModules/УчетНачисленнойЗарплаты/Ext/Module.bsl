
#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - регистрируемые начисления.
//		Если передано НеОпределено, то начисления не регистрируются.
//		Таблица значений с колонками:
//			ФизическоеЛицо
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета.
//			Сумма
//			ОтработаноДней - не обязательно.
//			ОтработаноЧасов - не обязательно.
//			ОплаченоДней - не обязательно.
//			ОплаченоЧасов - не обязательно.
//			ПериодДействия - не обязательно.
//			ДатаНачала - не обязательно.
//
//		Удержания  - регистрируемые удержания.
//		Если передано НеОпределено, то удержания не регистрируются.
//		Таблица значений с колонками:
//			ФизическоеЛицо
//			Удержание - ссылка на план видов расчета.
//			Сумма
//			СуммаКорректировкиВыплаты - НДФЛ к возврату (отрицательный и ранее уже удержанный НДФЛ).
//
//		БазаУдержаний - таблица значений с колонками
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Удержание - ссылка на план видов расчета.
//			Сумма - "вес" строки базы удержаний. В соответствии с данными 
//					весами и будет выполнено распределение удержаний.
//			
//		ПрочиеДоходы - регистрируемые натуральные доходы.
//		Если передано НеОпределено, то доходы не регистрируются.
//		Таблица значений с колонками:
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета.
//			Сумма
//		ХарактерВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты
//			Незаполненное значение - признак того, что регистрировать 
//			данные в подсистеме взаиморасчетов не требуется.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьНачисленияУдержания(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Удержания, БазаУдержаний, ПрочиеДоходы, ХарактерВыплаты = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	СтрокиНачислений = Новый Массив;
	УдержанияПоРабочимМестам = НоваяТаблицаУдержанияПоРабочимМестам();
	ДанныеМежрасчетногоПериода = ?(	ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Или
									ХарактерВыплаты = Неопределено, Ложь, Истина);
	
	Если Начисления <> Неопределено Тогда
		ПравилаУчетаНачислений = УчетНачисленнойЗарплатыПовтИсп.ПравилаУчетаНачисленийСотрудников();
		// Заполняем движения
		Для Каждого Строка Из Начисления Цикл
			ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			УчитыватьВоВзаиморасчетах = Истина;
			ПравилаУчетаНачисления = ПравилаУчетаНачислений[Строка.Начисление];
			Если ПравилаУчетаНачисления <> Неопределено Тогда
				ГруппаНачисленияУдержанияВыплаты = ПравилаУчетаНачисления.ГруппаНачисленияУдержанияВыплаты;
				УчитыватьВоВзаиморасчетах = ПравилаУчетаНачисления.УчитыватьВоВзаиморасчетах;
			КонецЕсли;
			НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = ГруппаНачисленияУдержанияВыплаты;
			НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
			Если УчитыватьВоВзаиморасчетах Тогда
				СтрокиНачислений.Добавить(НоваяСтрока);
			КонецЕсли;
			// Заполняем даты начала/окончания.
			Если Не ЗначениеЗаполнено(НоваяСтрока.ДатаНачала) Тогда
				НоваяСтрока.ДатаНачала = ПериодРегистрации;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяСтрока.ДатаОкончания) Тогда
				НоваяСтрока.ДатаОкончания = КонецМесяца(ПериодРегистрации);
			КонецЕсли;
			НоваяСтрока.ПериодДействия = НачалоМесяца(НоваяСтрока.ДатаНачала);
		КонецЦикла;
		УчетНачисленнойЗарплатыВнутренний.СкорректироватьДатыНачисленийБезПериодаДействия(Движения.НачисленияУдержанияПоСотрудникам, ПериодРегистрации);
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	КонецЕсли;
	
	Если Удержания <> Неопределено Тогда
		// При использовании учета по источникам удержания уже распределены.
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
			Для Каждого Строка Из Удержания Цикл
				НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Период				= ПериодРегистрации;
				НоваяСтрока.ПериодДействия		= ПериодРегистрации;
				НоваяСтрока.Организация			= Организация;
				НоваяСтрока.НачислениеУдержание = Строка.Удержание;
				НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			КонецЦикла;
		Иначе
			// При отсутствии учета по источникам удержания нужно распределить.
			Если БазаУдержаний = Неопределено Тогда
				// Получить данные для распределения удержаний по текущим начислениям.
				МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "ФизическоеЛицо", Истина);
				БазаУдержаний = ПолучитьБазуУдержаний(Движения, МассивФизическихЛиц, ПериодРегистрации, Организация);
			КонецЕсли;
			УдержанияПоРабочимМестам = УдержанияПоРабочимМестам(Удержания, ПериодРегистрации, Организация, БазаУдержаний); 
		КонецЕсли;
		// Заполняем движения 
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	КонецЕсли;
		
	Если ПрочиеДоходы <> Неопределено Тогда
		Для Каждого Строка Из ПрочиеДоходы Цикл
			НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период = ПериодРегистрации;
			НоваяСтрока.Организация		= Организация;
			НоваяСтрока.НачислениеУдержание = Строка.Начисление;
			НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
		КонецЦикла;
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		НачисленияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		УдержанияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		Для Каждого Строка Из СтрокиНачислений Цикл
			НоваяСтрока = НачисленияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
			НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ХарактерВыплаты,
			НачисленияДляВзаиморасчетов, УдержанияДляВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками (не обязательно)
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета 
//			ОтработаноДней
//			ОтработаноЧасов
//			ОплаченоДней
//			ОплаченоЧасов.
//			ПериодДействия - не обязательно.
//			ДатаНачала - не обязательно.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьОтработанноеВремя(Движения, Отказ, Организация, ПериодРегистрации, Начисления, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если Начисления.Колонки.Найти("ПериодДействия") = Неопределено Тогда
		Начисления.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
		Начисления.ЗаполнитьЗначения(ПериодРегистрации, "ПериодДействия");
	КонецЕсли;
	
	Для Каждого Строка Из Начисления Цикл
		
		НоваяСтрока = Движения.ОтработанноеВремяПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Период 		= ПериодРегистрации;
		НоваяСтрока.Организация = Организация;
		
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
		
	КонецЦикла;
	
	Движения.ОтработанноеВремяПоСотрудникам.Записывать = Истина;
		
	Если ЗаписыватьДвижения Тогда
		Движения.ОтработанноеВремяПоСотрудникам.Записать();
		Движения.ОтработанноеВремяПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	УчетНачисленнойЗарплатыВнутренний.ПриРегистрацииОтработанногоВремени(Движения, ЗаписыватьДвижения);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		РезультатыРасчетаНДФЛ - таблица значений с колонками.
//			ФизическоеЛицо - обязательная
//          одна из пар колонок Сумма, СуммаКорректировкиВыплаты (необязательна при регистрации без распределения)
//          или НалогПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке13, НалогПоСтавке13КЗачетуВозврату
//
//      МенеджерВременныхТаблиц - содержит вр. таблицу со списком людей по которым выполняется распределение НДФЛ
//      	ВТФизическиеЛица 
//				ФизическоеЛицо.
//
//		РегистрироватьВзаиморасчеты - признак того, что требуется зарегистрировать 
//			данные в подсистеме взаиморасчетов.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//			
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, РезультатыРасчетаНДФЛ, МенеджерВременныхТаблиц, ХарактерВыплаты = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	ДанныеМежрасчетногоПериода = ?(	ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Или
									ХарактерВыплаты = Неопределено, Ложь, Истина);
									
	Если РезультатыРасчетаНДФЛ.Колонки.Найти("Сумма") = Неопределено И РезультатыРасчетаНДФЛ.Колонки.Найти("НалогПоСтавке13") <> Неопределено Тогда
		РезультатыРасчетаНДФЛ.Колонки.НалогПоСтавке13.Имя = "Сумма";
		РезультатыРасчетаНДФЛ.Колонки.НалогПоСтавке13КЗачетуВозврату.Имя = "СуммаКорректировкиВыплаты";
		Если РезультатыРасчетаНДФЛ.Колонки.Найти("ЗачтеноАвансовыхПлатежейПоСтавке13") <> Неопределено Тогда
			Для каждого СтрокаТЗ Из РезультатыРасчетаНДФЛ Цикл
				СтрокаТЗ.Сумма = СтрокаТЗ.Сумма - СтрокаТЗ.ЗачтеноАвансовыхПлатежейПоСтавке13
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаНДФЛ = РезультатыРасчетаНДФЛ.Скопировать();
	
	Если ТаблицаНДФЛ.Колонки.Найти("ТерриторияВыполненияРаботВОрганизации") <> Неопределено Тогда
		ТаблицаНДФЛ.Колонки.Удалить("ТерриторияВыполненияРаботВОрганизации");
	КонецЕсли;
	// УдержанияПоРабочимМестам требует колонки ТерриторияВыполненияРаботВОрганизации и Подразделение
	Если ТаблицаНДФЛ.Колонки.Найти("ПодразделениеСотрудника") <> Неопределено Тогда
		ТаблицаНДФЛ.Колонки.Подразделение.Имя = "ТерриторияВыполненияРаботВОрганизации";
		ТаблицаНДФЛ.Колонки.ПодразделениеСотрудника.Имя = "Подразделение";
	Иначе
		ТаблицаНДФЛ.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", ТаблицаНДФЛ.Колонки.Подразделение.ТипЗначения);
		Для Каждого СтрокаТаблицы Из ТаблицаНДФЛ Цикл
			СтрокаТаблицы.ТерриторияВыполненияРаботВОрганизации = СтрокаТаблицы.Подразделение;
		КонецЦикла;
	КонецЕсли;
	
	// При использовании учета по источникам НДФЛ уже распределен.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		УдержанияПоРабочимМестам = НоваяТаблицаУдержанияПоРабочимМестам();
		Для Каждого Строка Из ТаблицаНДФЛ Цикл
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.ПериодДействия		= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
			НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
		КонецЦикла;
	Иначе
		// При отсутствии учета по источникам НДФЛ нужно распределить.
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНДФЛ, "ФизическоеЛицо", Истина);
		// Если характер выплаты документа задан и при этом начисления по документу не буду выплачиваться 
		// после расчета зарплаты или аванса, то нужно ограничить базу расчета НДФЛ движениями самого регистратора.
		Если ХарактерВыплаты <> Перечисления.ХарактерВыплатыЗарплаты.Зарплата И ХарактерВыплаты <> НеОпределено Тогда
			РегистраторОграниченияБазы = Движения.НачисленияУдержанияПоСотрудникам.Отбор.Регистратор.Значение;
		Иначе
			РегистраторОграниченияБазы = НеОпределено;
		КонецЕсли;
		БазаРасчетаНДФЛ = УчетНДФЛ.ПолучитьБазуРасчетаНДФЛ(Организация, ПериодРегистрации, ФизическиеЛицаМассив, РегистраторОграниченияБазы);
		УдержанияПоРабочимМестам = УдержанияПоРабочимМестам(ТаблицаНДФЛ, ПериодРегистрации, Организация, БазаРасчетаНДФЛ, Истина, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ, 0);
	КонецЕсли;

	// Заполняем движения начислений (удержаний) удержанными суммами.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
	
	// Дополняем движения начислений (удержаний) зачетом НДФЛ.
	ТаблицаКЗачету = УдержанияПоРабочимМестам.СкопироватьКолонки();
	ТаблицаЗачтено = УдержанияПоРабочимМестам.СкопироватьКолонки();
	Для каждого СтрокаТЗ Из УдержанияПоРабочимМестам Цикл
		
		Если СтрокаТЗ.СуммаКорректировкиВыплаты > 0 Тогда
			НоваяСтрока = ТаблицаЗачтено.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
			НоваяСтрока.Сумма = СтрокаТЗ.СуммаКорректировкиВыплаты
		ИначеЕсли СтрокаТЗ.СуммаКорректировкиВыплаты < 0 Тогда
			НоваяСтрока = ТаблицаКЗачету.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
			НоваяСтрока.Сумма = - СтрокаТЗ.СуммаКорректировкиВыплаты
		КонецЕсли;
		
	КонецЦикла;
	ЗарегистрироватьСправочноНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, ТаблицаЗачтено, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено, Ложь);	
	ЗарегистрироватьСправочноНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, ТаблицаКЗачету, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету, Ложь);	
	
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		УдержанияДляВзаиморасчетов = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, УдержанияДляВзаиморасчетов);
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ХарактерВыплаты,
			Неопределено, УдержанияДляВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для регистрации в учете вовврата НДФЛ физлицу
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		РезультатыРасчетаНДФЛ - таблица значений с колонками.
//			ФизическоеЛицо - обязательная
//          одна из пар колонок Сумма, СуммаКорректировкиВыплаты (необязательна при регистрации без распределения)
//          или НалогПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке13, НалогПоСтавке13КЗачетуВозврату
//
//		РегистрироватьВзаиморасчеты - признак того, что требуется зарегистрировать 
//			данные в подсистеме взаиморасчетов.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//			
//		Допустимо присутствие других колонок в передаваемых таблицах
//
Процедура ЗарегистрироватьВозвратНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, РезультатыРасчетаНДФЛ, ХарактерВыплаты = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	ДанныеМежрасчетногоПериода = ?(	ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Или
									ХарактерВыплаты = Неопределено, Ложь, Истина);
									
	УчетНДФЛ.ПроставитьРегистрациюВНалоговомОрганеВТаблице(Организация, РезультатыРасчетаНДФЛ, ПериодРегистрации);
	
	ТаблицаНДФЛ = РезультатыРасчетаНДФЛ.Скопировать();
	
	// УдержанияПоРабочимМестам требует колонки ТерриторияВыполненияРаботВОрганизации и Подразделение
	ТаблицаНДФЛ.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", ТаблицаНДФЛ.Колонки.Подразделение.ТипЗначения);
	Для Каждого СтрокаТаблицы Из ТаблицаНДФЛ Цикл
		СтрокаТаблицы.ТерриторияВыполненияРаботВОрганизации = СтрокаТаблицы.Подразделение;
	КонецЦикла;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНДФЛ, "ФизическоеЛицо", Истина);
	// Если характер выплаты документа задан и при этом начисления по документу не буду выплачиваться 
	// после расчета зарплаты или аванса, то нужно ограничить базу расчета НДФЛ движениями самого регистратора.
	Если ХарактерВыплаты <> Перечисления.ХарактерВыплатыЗарплаты.Зарплата И ХарактерВыплаты <> НеОпределено Тогда
		РегистраторОграниченияБазы = Движения.НачисленияУдержанияПоСотрудникам.Отбор.Регистратор.Значение;
	Иначе
		РегистраторОграниченияБазы = НеОпределено;
	КонецЕсли;
	БазаРасчетаНДФЛ = УчетНДФЛ.ПолучитьБазуРасчетаНДФЛ(Организация, ПериодРегистрации, ФизическиеЛицаМассив, РегистраторОграниченияБазы);
	УдержанияПоРабочимМестам = УдержанияПоРабочимМестам(ТаблицаНДФЛ, ПериодРегистрации, Организация, БазаРасчетаНДФЛ, Истина, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ, 0);
	
	// При использовании учета по источникам НДФЛ необходимо распределить еще и по источникам финансирования
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		// Создаем временную таблицу с рабочими местами и распределенными по ним суммами удержания
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	УдержанияПоРабочимМестам.Организация,
		|	УдержанияПоРабочимМестам.ФизическоеЛицо,
		|	УдержанияПоРабочимМестам.Сотрудник,
		|	УдержанияПоРабочимМестам.Подразделение,
		|	УдержанияПоРабочимМестам.СуммаКорректировкиВыплаты,
		|	УдержанияПоРабочимМестам.ТерриторияВыполненияРаботВОрганизации
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&УдержанияПоРабочимМестам КАК УдержанияПоРабочимМестам";
		Запрос.УстановитьПараметр("Период", КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("УдержанияПоРабочимМестам", УдержанияПоРабочимМестам);
		Запрос.Выполнить();
		// Создаем временную таблицу с отражениями в учете
		ОтражениеЗарплатыВБухучете.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(МенеджерВременныхТаблиц, "ВТСотрудники"); 
		// Получаем данные распределения в привязке к статьям финансирования
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Организация,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Подразделение,
		|	Сотрудники.СуммаКорректировкиВыплаты,
		|	Сотрудники.ТерриторияВыполненияРаботВОрганизации,
		|	СведенияОБухучетеЗарплатыСотрудников.СтатьяФинансирования,
		|	СведенияОБухучетеЗарплатыСотрудников.СтатьяРасходов
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБухучетеЗарплатыСотрудников КАК СведенияОБухучетеЗарплатыСотрудников
		|		ПО (СведенияОБухучетеЗарплатыСотрудников.Подразделение = Сотрудники.Подразделение)
		|			И (СведенияОБухучетеЗарплатыСотрудников.Организация = Сотрудники.Организация)
		|			И (СведенияОБухучетеЗарплатыСотрудников.Сотрудник = Сотрудники.Сотрудник)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		УдержанияПоРабочимМестам.Очистить();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Период = ПериодРегистрации;
			НоваяСтрока.ПериодДействия = ПериодРегистрации;
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.СтатьяФинансирования = Выборка.СтатьяФинансирования;
			НоваяСтрока.СтатьяРасходов = Выборка.СтатьяРасходов;
			НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
		КонецЦикла;
	КонецЕсли;

	// Для записи движений НачисленияУдержанияПоСотрудникам заполним сумму и поля НачислениеУдержание, ГруппаНачисленияУдержанияВыплаты
	Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
		Строка.Сумма = Строка.СуммаКорректировкиВыплаты;
		Строка.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
		Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		// Во взаиморасчеты передаем только СуммаКорректировкиВыплаты
		Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
			Строка.Сумма = 0;
		КонецЦикла;
		УдержанияДляВзаиморасчетов = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, УдержанияДляВзаиморасчетов);
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ХарактерВыплаты,
			Неопределено, УдержанияДляВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет распределение сумм удержаний с физических лиц по рабочим местам, 
// т.е. по сотрудникам и подразделениям.
//
// Параметры:
//	Удержания - исходная таблица удержаний, суммы из которой нужно распределить.
//  	Должна содержать колонку Сумма
//      Может содержать колонку СуммаКорректировкиВыплаты, которая применяется для корректировки 
//      	выплачиваемой суммы, например, для корректировки НДФЛ в случае возникновения долга перед 
//			сотрудником по НДФЛ и невозможности его выплаты
//		Может содержать колонку КоэффициентУдержания для уточнения алгоритма распределения удержаний
//		Может содержать колонку ВычетПрименяемыйПриУдержании для уточнения алгоритма распределения удержаний
//	ПериодРегистрации
//	Организация
//	БазаРаспределения
// 	УчитыватьПодразделение - булево значение. Позволяет учитывать колонку Подразделение при распределении
//  ВидУдержания
//  ТочностьРаспределения - по умолчанию - 2. Например, для НДФЛ слледует использовать 0
//
Функция УдержанияПоРабочимМестам(Удержания, ПериодРегистрации, Организация, БазаРаспределения = Неопределено, УчитыватьПодразделение = Ложь, ВидУдержания = Неопределено, ТочностьРаспределения = 2) Экспорт
	
	УдержанияПоРабочимМестам = НоваяТаблицаУдержанияПоРабочимМестам();
	
	ЕстьКорректировкиВыплаты = Удержания.Колонки.Найти("СуммаКорректировкиВыплаты") <> Неопределено;
	ЕстьКоэффициентУдержания = Удержания.Колонки.Найти("КоэффициентУдержания") <> Неопределено;
	ЕстьВычетПрименяемыйПриУдержании = Удержания.Колонки.Найти("ВычетПрименяемыйПриУдержании") <> Неопределено;
	
	// Если база не определена, получаем базу распределения по умолчанию.
	ИспользуетсяРаспределениеПоУмолчанию = Ложь;
	Если БазаРаспределения = Неопределено Тогда
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "ФизическоеЛицо", Истина);
		БазаРаспределения = РасчетЗарплаты.ПолучитьБазуУдержанийПоУмолчанию(ФизическиеЛицаМассив, ПериодРегистрации, Организация);
		ИспользуетсяРаспределениеПоУмолчанию = Истина;
	КонецЕсли;
	
	// Раскладываем строки базы по физическим лицам.
	СтрокиБазыПоФизическимЛицам = Новый Соответствие;
	Для Каждого СтрокаРаспределения Из БазаРаспределения Цикл
		СтрокиБазыПоФизическомуЛицу = СтрокиБазыПоФизическимЛицам[СтрокаРаспределения.ФизическоеЛицо];
		Если СтрокиБазыПоФизическомуЛицу = Неопределено Тогда
			СтрокиБазыПоФизическомуЛицу = Новый Массив;
		КонецЕсли;
		СтрокиБазыПоФизическомуЛицу.Добавить(СтрокаРаспределения);
		СтрокиБазыПоФизическимЛицам.Вставить(СтрокаРаспределения.ФизическоеЛицо, СтрокиБазыПоФизическомуЛицу);
	КонецЦикла;
	
	// Откладываем строки, для которых не удалось найти строки базы распределения.
	СтрокиБазаНеопределена = Новый Массив;
	Для Каждого СтрокаУдержаний Из Удержания Цикл
		Пропустить = Истина;
		Если ЕстьКорректировкиВыплаты И СтрокаУдержаний.СуммаКорректировкиВыплаты <> 0 Тогда
			Пропустить = Ложь;
		КонецЕсли;
		Если СтрокаУдержаний.Сумма <> 0 Тогда
			Пропустить = Ложь;
		КонецЕсли;
		Если Пропустить Тогда 
			Продолжить;
		КонецЕсли;
		// Находим строки распределения.
		СтрокиБазыПоФизическомуЛицу = СтрокиБазыПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
		Если СтрокиБазыПоФизическомуЛицу = Неопределено Тогда
			СтрокиБазаНеопределена.Добавить(СтрокаУдержаний);
			Продолжить;
		КонецЕсли;
		СтрокиРаспределенияБезУчетаПодразделения = Новый Массив;
		СтрокиРаспределенияСУчетомПодразделения = Новый Массив;
		Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиБазыПоФизическомуЛицу Цикл
			СтрокиРаспределенияБезУчетаПодразделения.Добавить(СтрокаБазыПоФизическомуЛицу);
			// Если подразделение совпадает, то эта строка с более точным источником распределением.
			Если УчитыватьПодразделение И СтрокаУдержаний.Подразделение = СтрокаБазыПоФизическомуЛицу.Подразделение Тогда
				СтрокиРаспределенияСУчетомПодразделения.Добавить(СтрокаБазыПоФизическомуЛицу);
			КонецЕсли;
		КонецЦикла;
		СтрокиРаспределения = СтрокиРаспределенияСУчетомПодразделения;
		Если СтрокиРаспределенияСУчетомПодразделения.Количество() = 0 Тогда
			СтрокиРаспределения = СтрокиРаспределенияБезУчетаПодразделения;
		КонецЕсли;
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
		КоэффициентУдержания = 1;
		Если ЕстьКоэффициентУдержания Тогда
			КоэффициентУдержания = СтрокаУдержаний.КоэффициентУдержания;
		КонецЕсли;
		ВычетПрименяемыйПриУдержании = 0;
		Если ЕстьВычетПрименяемыйПриУдержании Тогда
			ВычетПрименяемыйПриУдержании = СтрокаУдержаний.ВычетПрименяемыйПриУдержании;
		КонецЕсли;
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.Сумма, Коэффициенты, ТочностьРаспределения, КоэффициентУдержания, ВычетПрименяемыйПриУдержании);
		Если РаспределенныеСуммы <> НеОпределено Тогда
			Если ЕстьКорректировкиВыплаты Тогда
				РаспределенныеСуммыКорректировки = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.СуммаКорректировкиВыплаты, Коэффициенты, ТочностьРаспределения, КоэффициентУдержания, ВычетПрименяемыйПриУдержании);
			Иначе
				РаспределенныеСуммыКорректировки = Неопределено;
			КонецЕсли;	
			Если РаспределенныеСуммыКорректировки = Неопределено Тогда
				РаспределенныеСуммыКорректировки = Новый Массив(РаспределенныеСуммы.Количество());
				Для ИндексРаспределенияСуммыКорректировки = 0 По РаспределенныеСуммыКорректировки.ВГраница() Цикл
					РаспределенныеСуммыКорректировки[ИндексРаспределенияСуммыКорректировки] = 0;
				КонецЦикла	
			КонецЕсли;	
			Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
				Если РаспределенныеСуммы[Индекс] = 0 И РаспределенныеСуммыКорректировки[Индекс] = 0 Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[Индекс]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
				Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
					НоваяСтрока.ПериодДействия = ПериодРегистрации;
				КонецЕсли;
				НоваяСтрока.Период			= ПериодРегистрации;
				НоваяСтрока.Организация		= Организация;
				НоваяСтрока.ФизическоеЛицо	= СтрокиРаспределения[Индекс].ФизическоеЛицо;
				НоваяСтрока.Сотрудник		= СтрокиРаспределения[Индекс].Сотрудник;
				НоваяСтрока.Подразделение	= СтрокиРаспределения[Индекс].Подразделение;
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
				НоваяСтрока.Сумма = РаспределенныеСуммы[Индекс];
				Если ЕстьКорректировкиВыплаты Тогда
					НоваяСтрока.СуммаКорректировкиВыплаты = РаспределенныеСуммыКорректировки[Индекс];
				КонецЕсли;	
				Если ВидУдержания = Неопределено Тогда
					НоваяСтрока.НачислениеУдержание = СтрокаУдержаний.Удержание;
				Иначе
					НоваяСтрока.НачислениеУдержание = ВидУдержания;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НоваяСтрока.Период			= ПериодРегистрации;
			НоваяСтрока.ПериодДействия	= ПериодРегистрации;
			НоваяСтрока.Организация		= Организация;
			НоваяСтрока.ФизическоеЛицо	= СтрокиРаспределения[0].ФизическоеЛицо;
			НоваяСтрока.Сотрудник		= СтрокиРаспределения[0].Сотрудник;
			НоваяСтрока.Подразделение	= СтрокиРаспределения[0].Подразделение;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			НоваяСтрока.Сумма = СтрокаУдержаний.Сумма;
			Если ЕстьКорректировкиВыплаты Тогда
				НоваяСтрока.СуммаКорректировкиВыплаты = СтрокаУдержаний.СуммаКорректировкиВыплаты;
			КонецЕсли;	
			Если ВидУдержания = Неопределено Тогда
				НоваяСтрока.НачислениеУдержание = СтрокаУдержаний.Удержание;
			Иначе
				НоваяСтрока.НачислениеУдержание = ВидУдержания;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Если СтрокиБазаНеопределена.Количество() > 0 И Не ИспользуетсяРаспределениеПоУмолчанию Тогда
		// Распределяем этим же методом по базе распределения "по умолчанию".
		УдержанияПоРабочимМестамПоУмолчанию = УдержанияПоРабочимМестам(
			Удержания.Скопировать(СтрокиБазаНеопределена), ПериодРегистрации, Организация, Неопределено, УчитыватьПодразделение, ВидУдержания);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестамПоУмолчанию, УдержанияПоРабочимМестам);
	КонецЕсли;
	
	Возврат УдержанияПоРабочимМестам;
	
КонецФункции

// Функция конструирует таблицу, используемую в качестве параметра 
// для регистрации данных НДФЛ в учете начисленной зарплаты
// см. УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ.
//
Функция ПустаяТаблицаРегистрацииНДФЛ() Экспорт
	
	НДФЛ = Новый ТаблицаЗначений;
	НДФЛ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	НДФЛ.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	НДФЛ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	НДФЛ.Колонки.Добавить("СуммаКорректировкиВыплаты", Новый ОписаниеТипов("Число"));
	
	Возврат НДФЛ;
	
КонецФункции

Процедура ЗарегистрироватьСправочноНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, НДФЛ, ВидУдержания, ЗаписыватьДвижения = Ложь) Экспорт

	Если НДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из НДФЛ Цикл
		
		НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.Период			= ПериодРегистрации;
		НоваяСтрока.ПериодДействия	= ПериодРегистрации;
		НоваяСтрока.Организация		= Организация;
		НоваяСтрока.НачислениеУдержание = ВидУдержания;
		
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;

	КонецЦикла;
	
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьНалогиПереданныеВНалоговыйОрган(Движения, Отказ, Организация, ПериодРегистрации, НДФЛ, ВидУдержания, ЗаписыватьДвижения = Ложь) Экспорт

	Если НДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Движения.НачисленияУдержанияПоСотрудникам.Отбор.Регистратор.Значение;
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НДФЛ.ВыгрузитьКолонку("ФизическоеЛицо"));
	
	ПериодыРегистрации = Новый Массив;
	Период = ПериодРегистрации;
	Пока Период >= НачалоГода(ПериодРегистрации) Цикл
		ПериодыРегистрации.Добавить(Период);
		Период = ДобавитьМесяц(Период, -1);
	КонецЦикла;	
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор",		Регистратор);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ФизическиеЛица",		ФизическиеЛица);
	Запрос.УстановитьПараметр("ПериодыРегистрации",	ПериодыРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Остатки.ПериодРегистрации,
	|	Остатки.Сотрудник,
	|	Остатки.ФизическоеЛицо,
	|	Остатки.Подразделение,
	|	Остатки.СтатьяФинансирования,
	|	Остатки.СтатьяРасходов,
	|	СУММА(Остатки.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленияУдержанияПоСотрудникам.Период КАК ПериодРегистрации,
	|		НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
	|		НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	|		НачисленияУдержанияПоСотрудникам.Подразделение КАК Подразделение,
	|		НачисленияУдержанияПоСотрудникам.СтатьяФинансирования КАК СтатьяФинансирования,
	|		НачисленияУдержанияПоСотрудникам.СтатьяРасходов КАК СтатьяРасходов,
	|		НачисленияУдержанияПоСотрудникам.Сумма КАК Сумма
	|	ИЗ
	|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|	ГДЕ
	|		НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|		И НачисленияУдержанияПоСотрудникам.Период В(&ПериодыРегистрации)
	|		И НачисленияУдержанияПоСотрудникам.Организация = &Организация
	|		И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В(&ФизическиеЛица)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленияУдержанияПоСотрудникам.Период,
	|		НачисленияУдержанияПоСотрудникам.Сотрудник,
	|		НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
	|		НачисленияУдержанияПоСотрудникам.Подразделение,
	|		НачисленияУдержанияПоСотрудникам.СтатьяФинансирования,
	|		НачисленияУдержанияПоСотрудникам.СтатьяРасходов,
	|		НачисленияУдержанияПоСотрудникам.Сумма
	|	ИЗ
	|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|	ГДЕ
	|		НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|		И НачисленияУдержанияПоСотрудникам.Период В(&ПериодыРегистрации)
	|		И НачисленияУдержанияПоСотрудникам.Организация = &Организация
	|		И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В(&ФизическиеЛица)
	|		И НачисленияУдержанияПоСотрудникам.Регистратор = &Регистратор) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ПериодРегистрации,
	|	Остатки.Сотрудник,
	|	Остатки.ФизическоеЛицо,
	|	Остатки.Подразделение,
	|	Остатки.СтатьяФинансирования,
	|	Остатки.СтатьяРасходов";
	
	ИсчисленныеНалоги = Запрос.Выполнить().Выгрузить();
			
	Отбор = Новый Структура("ФизическоеЛицо, ПериодРегистрации");		
	Для Каждого Налог Из НДФЛ Цикл
		
		Отбор.ФизическоеЛицо = Налог.ФизическоеЛицо;
		
		НераспределеннаяСумма = Налог.Сумма;
		
		Для Каждого Период Из ПериодыРегистрации Цикл
			
			Отбор.ПериодРегистрации = Период;
			
			НалогиРаботникаВПериоде = ИсчисленныеНалоги.Скопировать(Отбор);
			
			ПогашаемаяСуммаВПериоде = МИН(НалогиРаботникаВПериоде.Итог("Сумма"), НераспределеннаяСумма);
			
			Если ПогашаемаяСуммаВПериоде = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(НалогиРаботникаВПериоде, "Сумма");
			РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(ПогашаемаяСуммаВПериоде, Коэффициенты);
			
			Для ИндексСтроки = 0 По НалогиРаботникаВПериоде.Количество() - 1 Цикл
			
				НалогРаботникаВПериоде = НалогиРаботникаВПериоде[ИндексСтроки];
				
				ПогашаемаяСумма = РаспределенныеСуммы[ИндексСтроки];
				
				ЗарплатаКВыплате = Движения.ЗарплатаКВыплате.ДобавитьПриход();
				ЗаполнитьЗначенияСвойств(ЗарплатаКВыплате, НалогРаботникаВПериоде);
				ЗарплатаКВыплате.Период			= ПериодРегистрации;
				ЗарплатаКВыплате.Организация	= Организация;
				ЗарплатаКВыплате.ПериодВзаиморасчетов	= ПериодРегистрации;
				ЗарплатаКВыплате.СуммаКВыплате	= ПогашаемаяСумма;
				
				Взаиморасчеты = Движения.ВзаиморасчетыССотрудниками.ДобавитьПриход();
				ЗаполнитьЗначенияСвойств(Взаиморасчеты, НалогРаботникаВПериоде);
				Взаиморасчеты.Период			= ПериодРегистрации;
				Взаиморасчеты.Организация		= Организация;
				Взаиморасчеты.ВидВзаиморасчетов					= Перечисления.ВидыВзаиморасчетовССотрудниками.ПогашениеЗадолженностиПоЗарплате;
				Взаиморасчеты.ГруппаНачисленияУдержанияВыплаты	= Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
				Взаиморасчеты.СуммаВзаиморасчетов= ПогашаемаяСумма;
				
				НачисленияУдержания = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
				ЗаполнитьЗначенияСвойств(НачисленияУдержания, НалогРаботникаВПериоде);
				НачисленияУдержания.Период			= ПериодРегистрации;
				НачисленияУдержания.Организация		= Организация;
				НачисленияУдержания.ПериодДействия	= ПериодРегистрации;
				НачисленияУдержания.НачислениеУдержание = ВидУдержания;
				НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
				НачисленияУдержания.Сумма = ПогашаемаяСумма;
				
			КонецЦикла;	
			
			НераспределеннаяСумма = НераспределеннаяСумма - ПогашаемаяСуммаВПериоде;
			
			Если НераспределеннаяСумма = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.ЗарплатаКВыплате.Записывать = Истина;
	Движения.ВзаиморасчетыССотрудниками.Записывать = Истина;
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		
		Движения.ЗарплатаКВыплате.Записать();
		Движения.ЗарплатаКВыплате.Записывать = Ложь;
		
		Движения.ВзаиморасчетыССотрудниками.Записать();
		Движения.ВзаиморасчетыССотрудниками.Записывать = Ложь;
		
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует строки удержаний путем распределения исходной строки по сотрудникам и подразделениям.
//
// Параметры:
//	Движения
//	ПериодРегистрации
//	ИсходнаяСтрока
//	СтрокиРаспределения
//	СтрокиУдержаний - массив строк, добавленных в движения как удержания.
//	ВидУдержания - если задан конкретный вид удержания - прописывается он, если нет - берется из исходной строки.
// Возвращаемое значение:
//	Истина, если удалось сформировать строки по переданные.
//
Функция СформироватьСтрокиУдержаний(Движения, Организация, ПериодРегистрации, ИсходнаяСтрока, СтрокиРаспределения, СтрокиУдержаний, ВидУдержания = Неопределено) Экспорт
	
	Коэффициенты = Новый Массив();
	
	СуммаКРаспределению = ИсходнаяСтрока.Сумма;
	
	Для Каждого Строка Из СтрокиРаспределения Цикл
		Если Строка.Владелец().Колонки.Найти("Удержано") = Неопределено Тогда
			Коэффициенты.Добавить(Строка.Сумма);
		Иначе
			СуммаКРаспределению = СуммаКРаспределению + Строка.Удержано;
			Коэффициенты.Добавить(Строка.Сумма);
		КонецЕсли;		
	КонецЦикла;
	МассивСумм = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СуммаКРаспределению, Коэффициенты);
	Если МассивСумм = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для ИндексСтроки = 0 По СтрокиРаспределения.Количество() - 1 Цикл
		
		СтрокаРаспределения = СтрокиРаспределения[ИндексСтроки];
		
		Если СтрокаРаспределения.Владелец().Колонки.Найти("Удержано") = Неопределено Тогда
			СуммаУдержания = МассивСумм[ИндексСтроки];
		Иначе
			СуммаУдержания = МассивСумм[ИндексСтроки] - СтрокаРаспределения.Удержано;
		КонецЕсли;
		
		// Строка удержаний не формируется при нулевой сумме удержаний.
		Если СуммаУдержания = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.Период			= ПериодРегистрации;
		НоваяСтрока.ПериодДействия	= ПериодРегистрации;
		НоваяСтрока.Организация		= Организация;
		НоваяСтрока.ФизическоеЛицо	= СтрокаРаспределения.ФизическоеЛицо;
		НоваяСтрока.Сотрудник		= СтрокаРаспределения.Сотрудник;
		НоваяСтрока.Подразделение	= СтрокаРаспределения.Подразделение;
		Если ВидУдержания = Неопределено Тогда
			НоваяСтрока.НачислениеУдержание = ИсходнаяСтрока.Удержание;
		Иначе
			НоваяСтрока.НачислениеУдержание = ВидУдержания;
		КонецЕсли;
		
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
		НоваяСтрока.Сумма = СуммаУдержания;

		СтрокиУдержаний.Добавить(НоваяСтрока);
		
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

// Отбирает строки из таблицы БазаРаспределения по условию на ФизическоеЛицо и Подразделение, если оно указано.
//
Функция СтрокиРаспределенияПоБазе(ФизическоеЛицо, БазаРаспределения, Подразделение = Неопределено) Экспорт
	
	ОтборБазыРаспределения = Новый Структура;
	
	ОтборБазыРаспределения.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	Если Подразделение <> Неопределено Тогда
		ОтборБазыРаспределения.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	Возврат БазаРаспределения.НайтиСтроки(ОтборБазыРаспределения);
	
КонецФункции

// Возвращает таблицу значений с колонками
//	ФизическоеЛицо.
//	Сотрудник
//	Подразделение
//	Сумма
//
// Параметры:
//	Движения - движения регистратора, которые формируются в СформироватьДвижения
//	МассивФизическихЛиц
//	ПериодРегистрации.
//	Организация
//
Функция ПолучитьБазуУдержаний(Движения, МассивФизическихЛиц, ПериодРегистрации, Организация) Экспорт
	
	// регистратор движений
	Регистратор = Движения.НачисленияУдержанияПоСотрудникам.Отбор.Регистратор.Значение;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= МассивФизическихЛиц;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	// Получим данные о начислениях из других регистраторов.
	//
	// В последнем запросе происходит объединение с таблицей удержаний для тех удержаний,
	// которые после отмены движений регистратора остались без базовых начислений.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияУдержания.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	НачисленияУдержания.Сотрудник,
	               |	НачисленияУдержания.Подразделение,
	               |	СУММА(НачисленияУдержания.Сумма) КАК Сумма
	               |ПОМЕСТИТЬ ВТУдержания
	               |ИЗ
	               |	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК Сотрудники
	               |		ПО (Сотрудники.Сотрудник = НачисленияУдержания.Сотрудник)
	               |ГДЕ
	               |	НачисленияУдержания.Регистратор <> &Регистратор
	               |	И НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	               |	И НачисленияУдержания.Организация = &Организация
	               |	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
	               |	И НачисленияУдержания.Период = &ПериодРегистрации
	               |	И ТИПЗНАЧЕНИЯ(НачисленияУдержания.НачислениеУдержание) = ТИП(ПланВидовРасчета.Удержания)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НачисленияУдержания.Сотрудник.ФизическоеЛицо,
	               |	НачисленияУдержания.Сотрудник,
	               |	НачисленияУдержания.Подразделение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НачисленияУдержания.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	НачисленияУдержания.Сотрудник,
	               |	НачисленияУдержания.Подразделение,
	               |	СУММА(НачисленияУдержания.Сумма) КАК Сумма
	               |ПОМЕСТИТЬ ВТНачисления
	               |ИЗ
	               |	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК Сотрудники
	               |		ПО (Сотрудники.Сотрудник = НачисленияУдержания.Сотрудник)
	               |ГДЕ
	               |	НачисленияУдержания.Регистратор <> &Регистратор
	               |	И НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	               |	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
	               |	И НачисленияУдержания.Организация = &Организация
	               |	И НачисленияУдержания.Период = &ПериодРегистрации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НачисленияУдержания.Сотрудник.ФизическоеЛицо,
	               |	НачисленияУдержания.Сотрудник,
	               |	НачисленияУдержания.Подразделение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТНачисления.ФизическоеЛицо,
	               |	ВТНачисления.Сотрудник,
	               |	ВТНачисления.Подразделение,
	               |	ВТНачисления.Сумма,
	               |	ЕСТЬNULL(ВТУдержания.Сумма, 0) КАК Удержано
	               |ИЗ
	               |	ВТНачисления КАК ВТНачисления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержания КАК ВТУдержания
	               |		ПО ВТНачисления.Сотрудник = ВТУдержания.Сотрудник
	               |			И ВТНачисления.Подразделение = ВТУдержания.Подразделение
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТУдержания.ФизическоеЛицо,
	               |	ВТУдержания.Сотрудник,
	               |	ВТУдержания.Подразделение,
	               |	0,
	               |	ВТУдержания.Сумма
	               |ИЗ
	               |	ВТУдержания КАК ВТУдержания
	               |ГДЕ
	               |	НЕ ВТУдержания.Подразделение В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ВТНачисления.Подразделение
	               |				ИЗ
	               |					ВТНачисления КАК ВТНачисления)";
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	БазаУдержаний = Запрос.Выполнить().Выгрузить();
	
	// Дополним данными из текущих движений.
	Для Каждого Строка Из Движения.НачисленияУдержанияПоСотрудникам Цикл
		Если Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено Тогда
			Если МассивФизическихЛиц.Найти(Строка.ФизическоеЛицо) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокиБазы = БазаУдержаний.НайтиСтроки(Новый Структура("Сотрудник,Подразделение", Строка.Сотрудник, Строка.Подразделение));
			Если СтрокиБазы.Количество() = 0 Тогда
				СтрокаБазы = БазаУдержаний.Добавить();
				СтрокаБазы.ФизическоеЛицо = Строка.ФизическоеЛицо;
				СтрокаБазы.Сотрудник = Строка.Сотрудник;
				СтрокаБазы.Подразделение = Строка.Подразделение;
				СтрокаБазы.Сумма = 0;
				СтрокаБазы.Удержано = 0;
			Иначе
				СтрокаБазы = СтрокиБазы[0];
			КонецЕсли;
			СтрокаБазы.Сумма = СтрокаБазы.Сумма + Строка.Сумма;
		КонецЕсли;
				
	КонецЦикла;
	Возврат БазаУдержаний;
	
КонецФункции

#Область ПроцедурыИФункцииРаботыСОтчетами

// Процедура формирования отчетов анализа начислений и удержаний.
//
Процедура ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Объект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, КлючВарианта) Экспорт
	УчетНачисленнойЗарплатыВнутренний.ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Объект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, КлючВарианта);
КонецПроцедуры

// Возвращает описание добавляемых пользовательских полей.
//
// Возвращаемое значение:
//		Имя - Имя колонки
//		Заголовок - Представление колонки в отчете.
//		ПорядокКолонки - Порядок, в котором должна располагаться колонка отчета.
//		НомерКолонки - Номер колонки - используется для получения имени параметра отчета ("Колонка" + НомерКолонки).
//		ДобавитьПользовательскоеПоле - Булево - Если Истина, то пользовательское поле добавляется в коллекцию
//		                                        "ПользовательскиеПоля" варианта отчета, Ложь - поле не добавляется в
//		                                        коллекцию.
//		ДобавитьПользовательскоеПолеЕсть - Булево - Если Истина, то пользовательское поле с префиксом "Есть" добавляется в
//		                                            коллекцию "ПользовательскиеПоля" варианта отчета, Ложь - поле не
//		                                            добавляется в коллекцию.
//										Используется, чтобы узнать есть ли начисления по полю или нет. Если начислений нет, то колонка не будет
//										выводиться.
//		КатегорииКолонки - Массив - Категории, которые выводятся в колонке, используется при составлении условия в
//		                            выражении пользовательского поля.
//		ПользовательскоеУсловие - Строка - Условие, которое будет использовано в выражении пользовательского поля,
//										при использовании условия "КатегорииКолонки" игнорируются.
//		УсловиеИсключенияИзПрочих - Строка - Условие исключения суммы из колонки "ПрочиеНачисления" или "ПрочиеУдержания",
//										используется в паре с "ПользовательскоеУсловие".
//		РезультатУсловия - Строка - Результат выполнения условия, если в выражении нужно получить не сумму по начислению, а
//		                            например дни.
//		НеВыводитьКолонку - Булево - Если Истина, то колонка не будет включена в список выводимых колонок,
//										используется, например, если пользовательское поле нужно создать, но выводить в отчет в определенном месте
//										всегда.
//
Функция ПорядокДополнительныхНачисленийИУдержаний() Экспорт
	
	ТаблицаНачисленийИУдержаний = Новый ТаблицаЗначений;
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("Имя", 								Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("Заголовок",							Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ПорядокКолонки",						Новый ОписаниеТипов("Число"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("НомерКолонки",						Новый ОписаниеТипов("Число"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ДобавитьПользовательскоеПоле",		Новый ОписаниеТипов("Булево"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ДобавитьПользовательскоеПолеЕсть",	Новый ОписаниеТипов("Булево"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КатегорииКолонки",					Новый ОписаниеТипов("Массив"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ПользовательскоеУсловие",				Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("УсловиеИсключенияИзПрочих",			Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("РезультатУсловия",					Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("НеВыводитьКолонку",						Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаНачисленийИУдержаний;
	
КонецФункции

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49();
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49();
КонецФункции

Процедура ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисленияИУдержания, НастройкиОтчета, ВидПолей = "Начисления") Экспорт
	УчетНачисленнойЗарплатыВнутренний.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисленияИУдержания, НастройкиОтчета, ВидПолей);
КонецПроцедуры

// Возвращает начисления в том порядке, в котором они должны быть выведены в отчете.
//
Функция ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки, ВсегоНачислений) Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки, ВсегоНачислений);
КонецФункции

// Возвращает удержания в том порядке, в котором они должны быть выведены в отчете.
//
Функция ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки, ВсегоУдержаний) Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки, ВсегоУдержаний);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Дополняет СКД отчета АнализНачисленийИУдержаний в зависимости от контекста его использования.
Процедура ДополнитьАнализНачисленийИУдержаний(ОтчетОбъект) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		УчетНачисленнойЗарплатыВнутренний.ДополнитьАнализНачисленийИУдержаний(ОтчетОбъект);
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаУдержанияПоРабочимМестам() Экспорт
	
	УдержанияПоРабочимМестам = Новый ТаблицаЗначений;
	УдержанияПоРабочимМестам.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	УдержанияПоРабочимМестам.Колонки.Добавить("СуммаКорректировкиВыплаты", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	// Состав колонок таблицы точно соответствует таблице учета начисленной зарплаты.
	МетаданныеРегистра = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам;
	
	// Измерения
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		УдержанияПоРабочимМестам.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
	КонецЦикла;
	// Ресурсы
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		УдержанияПоРабочимМестам.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	// Реквизиты
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		УдержанияПоРабочимМестам.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Возврат УдержанияПоРабочимМестам;
	
КонецФункции

#Область ФормированиеПечатныхФорм

Функция РасчетныйЛистокПодробнее(ДокументОбъект, Модифицированность, МассивФизическихЛиц, ДатаОтчета) Экспорт
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
	ДокументРезультат.ОтображатьСетку = Ложь;
	
	Если ДокументОбъект.ПометкаУдаления Тогда
		ВызватьИсключение НСтр("ru='Документ помечен на удаление, отчет не будет сформирован'");
	Иначе
		
		Попытка
			
			НачатьТранзакцию();
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если ТипЗнч(МассивФизическихЛиц) = Тип("Массив") Тогда
				ФизическиеЛицаОтчета = МассивФизическихЛиц;
			Иначе
				ФизическиеЛицаОтчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивФизическихЛиц);
			КонецЕсли;
			
			Если НЕ ДокументОбъект.Проведен ИЛИ Модифицированность Тогда
				
				ДокументОбъект.ДополнительныеСвойства.Вставить(
					"ФизическиеЛица", ФизическиеЛицаОтчета);
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			
			ОтчетАнализНачисленийИУдержаний = Отчеты.АнализНачисленийИУдержаний.Создать();
			
			ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.ЗагрузитьНастройки(
				ОтчетАнализНачисленийИУдержаний.СхемаКомпоновкиДанных.ВариантыНастроек.РасчетныйЛисток.Настройки);
	
			Отбор = ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.Настройки.Отбор;
			Отбор.Элементы.Очистить();
			
			СтандартныйПериод = Новый СтандартныйПериод;
			СтандартныйПериод.ДатаНачала    = НачалоМесяца(ДатаОтчета);
			СтандартныйПериод.ДатаОкончания = КонецМесяца(ДатаОтчета);
			
			ОтчетАнализНачисленийИУдержаний.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Период", СтандартныйПериод);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Организация", ВидСравненияКомпоновкиДанных.Равно, ДокументОбъект.Организация);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ФизическоеЛицо", ВидСравненияКомпоновкиДанных.ВСписке, ФизическиеЛицаОтчета);
			
			ОтчетАнализНачисленийИУдержаний.СкомпоноватьРезультат(ДокументРезультат);
			
			ОтменитьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли; 
			
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru = 'Не удалось, сформировать отчет.'") + " " + Инфо.Описание;

		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
