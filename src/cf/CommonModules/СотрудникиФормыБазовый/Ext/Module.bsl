////////////////////////////////////////////////////////////////////////////////
// СотрудникиФормыБазовый: методы, обслуживающие работу формы сотрудника.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийФормыСотрудника

Процедура СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	
	СозданиеНового = Параметры.Ключ.Пустая();
	Форма.СозданиеНового = СозданиеНового;
	
	Если СозданиеНового Тогда
		
		Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
		Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
		Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
		
		Форма.ДоступенПросмотрДанныхДляНачисленияЗарплаты = Пользователи.РолиДоступны("ЧтениеДанныхДляНачисленияЗарплаты,ДобавлениеИзменениеДанныхДляНачисленияЗарплаты");
	
		Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
		Форма.ДоступенПросмотрДанныхФизическихЛиц = Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц
			ИЛИ Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры");
			
		СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
		
	КонецЕсли;
	
	ЗаданоФизическоеЛицо = Ложь;
	
	// Открытие форму существующего сотрудника.
	Если НЕ СозданиеНового Тогда
		
		Форма.ФизическоеЛицоСсылка  = Форма.Сотрудник.ФизическоеЛицо;

	// Создание сотрудника из формы физического лица.
	ИначеЕсли Параметры.Свойство("ФизическоеЛицо") 
		И ЗначениеЗаполнено(Параметры.ФизическоеЛицо) Тогда
		
		// Возможно получение ссылки на физлицо через параметр формы.
		Форма.ФизическоеЛицоСсылка = Параметры.ФизическоеЛицо;
		ЗаданоФизическоеЛицо = Истина;
		
	// Создание сотрудника путем копирования существующего.
	ИначеЕсли ЗначениеЗаполнено(Форма.Сотрудник.ФизическоеЛицо) Тогда
		
		ЗаданоФизическоеЛицо = Истина;
		Форма.ФизическоеЛицоСсылка  = Форма.Сотрудник.ФизическоеЛицо;
		
	// Просто создание сотрудника
	Иначе
		
		// ссылка для нового физлица
		Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
		Форма.ФизическоеЛицо.ФИО = Форма.Сотрудник.Наименование;
		
	КонецЕсли;
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	// Если форма нового сотрудника.
	Если СозданиеНового Тогда 
		
		Если ФОИспользоватьКадровыйУчет Тогда
			
			Форма.ДатаПриема = '00010101000000';
			
			Если Форма.Параметры.Свойство("ГоловнаяОрганизация") Тогда
				Форма.Сотрудник.ГоловнаяОрганизация = Форма.Параметры.ГоловнаяОрганизация;
			ИначеЕсли Форма.Параметры.Свойство("ТекущаяОрганизация") Тогда
				Форма.Сотрудник.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Форма.Параметры.ТекущаяОрганизация);
			ИначеЕсли Форма.Параметры.ЗначенияЗаполнения.Свойство("ТекущаяОрганизация") Тогда
				Форма.Сотрудник.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Форма.Параметры.ЗначенияЗаполнения.ТекущаяОрганизация);
			КонецЕсли; 
			
		Иначе
			
			// Если создаем нового сотрудника, то заполняем дату приема текущей датой.
			Если НЕ ЗначениеЗаполнено(Форма.ДатаПриема) Тогда
				Форма.ДатаПриема = ТекущаяДатаСеанса();
			КонецЕсли;
			
		КонецЕсли; 
		
		Форма.СотрудникСсылка = Справочники.Сотрудники.ПолучитьСсылку();
		
		Если ЗаданоФизическоеЛицо Тогда
			
			СотрудникиФормы.ПрочитатьДанныеСвязанныеССотрудником(Форма);
			
			УточнениеНаименованияФизическогоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ФизическоеЛицоСсылка, "УточнениеНаименования");
			Форма.Сотрудник.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
				Форма.ФИОФизическихЛиц.Фамилия, 
				Форма.ФИОФизическихЛиц.Имя, 
				Форма.ФИОФизическихЛиц.Отчество, 
				УточнениеНаименованияФизическогоЛица,
				Форма.Сотрудник.УточнениеНаименования);
			
		Иначе
			
			Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
			
			// Если это форма нового объекта - инициализация реквизитов формы, 
			// предназначенных для редактирования дополнительных
			// данных (помимо основного редактируемого объекта).
			РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
			РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка);			
			
			СотрудникиФормы.ФизическиеЛицаОбновитьЭлементыФормы(Форма);
			
		КонецЕсли;
		
		СотрудникиКлиентСервер.УстановитьВидЗанятостиНовогоСотрудника(Форма);
		СотрудникиФормы.ИнициализироватьТекущиеДанныеСотрудника(Форма);
		
	Иначе
		
		Форма.СотрудникСсылка = Форма.Сотрудник.Ссылка;
		Форма.ФизическоеЛицоСсылка  = Форма.Сотрудник.ФизическоеЛицо;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	
	// Обработчик подсистемы "Свойства".
	УправлениеСвойствами.ПриСозданииНаСервере(Форма, Форма.Сотрудник, "ГруппаДополнительныеРеквизиты");
	
	ДополнитьФормуСотрудника(Форма, "ДругиеРабочиеМеста");
	
	Если СозданиеНового Тогда
		СотрудникиФормы.ЗаполнитьПервоначальныеЗначения(Форма);
	КонецЕсли;
	
	Если ФОИспользоватьКадровыйУчет И ЗначениеЗаполнено(Форма.Сотрудник.ГоловнаяОрганизация) Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.Найти("ФИО");
	КонецЕсли; 
	
	Форма.СотрудникНаименование  = Форма.Сотрудник.Наименование;
	
	Если Форма.Параметры.Свойство("РежимОткрытияОкна") 
		И ЗначениеЗаполнено(Форма.Параметры.РежимОткрытияОкна) Тогда
		Форма.РежимОткрытияОкна = Форма.Параметры.РежимОткрытияОкна;
	КонецЕсли; 
	
	Если Форма.ДоступенПросмотрДанныхДляНачисленияЗарплаты Тогда
		
		Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьКадровыйУчет") Тогда
			
			СотрудникиФормы.УстановитьОтображениеСпособовРасчетаАванса(Форма);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ГруппаАванс",
				"Видимость",
				Ложь);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ПлановыйАванс",
				"Видимость",
				Ложь);
			
			СотрудникиФормы.ПрочитатьРазмерАвансаПоУмолчанию(Форма);
			
			Если СозданиеНового
				И НЕ ЗначениеЗаполнено(Форма.ТекущийАванс) Тогда
				
				Форма.ТекущийАванс = Форма.РазмерАвансаВПроцентахПоУмолчанию;
				Форма.ТекущийСпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа;
				
			КонецЕсли; 
			
			РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма, "ТекущийСпособРасчетаАванса");
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
	Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
		
	Форма.ДоступенПросмотрДанныхДляНачисленияЗарплаты = Пользователи.РолиДоступны("ЧтениеДанныхДляНачисленияЗарплаты,ДобавлениеИзменениеДанныхДляНачисленияЗарплаты");
	
	Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	Форма.ДоступенПросмотрДанныхФизическихЛиц = Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц
		ИЛИ Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры");
		
	Форма.ФизическоеЛицоСсылка = ТекущийОбъект.ФизическоеЛицо;
	Форма.СотрудникСсылка = ТекущийОбъект.Ссылка;
	СотрудникиФормы.ПрочитатьДанныеСвязанныеССотрудником(Форма);
	
	// Элемент ВАрхиве показываем для новых сотрудников.
	Форма.Элементы.ВАрхиве.Видимость = Истина;
	
КонецПроцедуры

Процедура СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если НЕ Форма.Параметры.Ключ.Пустая() Тогда
		СотрудникиФормы.ЗаписатьФизическоеЛицоСотрудника(Форма);
	КонецЕсли; 
	
	ЗаписатьТекущиеДанные(Форма, ТекущийОбъект);
	СотрудникиФормы.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, Форма.ФизическоеЛицоСсылка, Форма.ТекущаяОрганизация);
	
	Если Форма.ГражданствоФизическихЛицПрежняя = Неопределено Тогда
		
			РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(
				Форма,
				"ГражданствоФизическихЛиц",
				Форма.ФизическоеЛицоСсылка);
			
	КонецЕсли; 
	
	Если Форма.ДокументыФизическихЛицПрежняя = Неопределено Тогда
		
		ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	ФОИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	Если НЕ ФОИспользоватьКадровыйУчет И ФОИспользоватьНачислениеЗарплаты Тогда
		
		Если ЗначениеЗаполнено(Форма.ТекущаяОрганизация) Тогда
			
			Если ЗначениеЗаполнено(Форма.ДатаУвольнения) Тогда
				
				Если Форма.ДатаУвольнения <= Форма.ДатаПриема Тогда
					
					ТекстСообщения = НСтр("ru='Дата увольнения не может быть меньше или равна дате приема на работу'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						"ДатаУвольнения",
						,
						Отказ);
						
				ИначеЕсли НЕ ЗначениеЗаполнено(Форма.ДатаПриема) Тогда
					
					ТекстСообщения = НСтр("ru='Необходимо заполнить дату приема на работу'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						"ДатаПриема",
						,
						Отказ);
						
				КонецЕсли;
				
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Форма.ДатаПриема)
				И НЕ ЗначениеЗаполнено(Форма.ТекущийВидЗанятости) Тогда
			
				ТекстСообщения = НСтр("ru='Не заполнен Вид занятости'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					"ТекущийВидЗанятости",
					,
					Отказ);
					
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	ПравоНаДобавлениеИзменениеФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	Если ПравоНаДобавлениеИзменениеФизическихЛиц Тогда

		СотрудникиФормы.ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, Форма.ФизическоеЛицоСсылка, Отказ);
	
		ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("ФизическоеЛицо");
		Если НЕ ФизическоеЛицоОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФОИспользоватьНачислениеЗарплаты 
		И НЕ ФОИспользоватьКадровыйУчет Тогда
		СообщениеПроверкиВидЗанятости = СотрудникиФормы.СообщениеОКонфликтеВидаЗанятостиНовогоСотрудникаССуществующими(Форма.СотрудникСсылка, Форма.ФизическоеЛицоСсылка, Форма.ТекущаяОрганизация, Форма.ТекущийВидЗанятости, Форма.ДатаПриема);
		Если Не ПустаяСтрока(СообщениеПроверкиВидЗанятости) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПроверкиВидЗанятости,,"ТекущийВидЗанятости", , Отказ);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормыФизическогоЛица

Процедура ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Перем ИмяТекущегоЭлемента;
	
	Форма.СозданиеНового = Форма.Параметры.Ключ.Пустая();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(Форма);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	
	// Обработчик подсистемы "Свойства".
	УправлениеСвойствами.ПриСозданииНаСервере(Форма, Форма.ФизическоеЛицо, "ГруппаДополнительныеРеквизиты");
	
	УправлениеКонтактнойИнформациейЗарплатаКадры.ПриСозданииНаСервере(Форма, Форма.ФизическоеЛицо, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);

	Если Форма.СозданиеНового Тогда
		
		Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
		Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
		Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
		
		Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
		Форма.ФизическоеЛицо.ФИО = Форма.ФизическоеЛицо.Наименование;
		
		// Если это форма нового объекта - инициализация реквизитов формы, 
		// предназначенных для редактирования дополнительных
		// данных (помимо основного редактируемого объекта).
		Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
		Форма.ДоступенПросмотрДанныхФизическихЛиц = Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц
			ИЛИ Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры");
		
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
		
		ЗаполнитьПервоначальныеЗначенияФизическогоЛица(Форма);
		
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ТекущийЭлемент", ИмяТекущегоЭлемента) Тогда
		ТекущийЭлемент = Форма.Элементы[ИмяТекущегоЭлемента];		
	КонецЕсли;	
	
	СотрудникиФормы.ОбновитьОтображениеПредупреждающихНадписей(Форма);
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
	Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
		
	Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	Форма.ДоступенПросмотрДанныхФизическихЛиц = Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц
		ИЛИ Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры");
		
	Форма.ФизическоеЛицоСсылка  = Форма.ФизическоеЛицо.Ссылка;
	СотрудникиФормы.ПрочитатьДанныеСвязанныеСФизлицом(Форма, Форма.ДоступенПросмотрДанныхФизическихЛиц);
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		Если ЗначениеЗаполнено(Форма.ГражданствоФизическихЛиц.Страна) Тогда
			Форма.ГражданствоФизическихЛицЛицоБезГражданства = 0;
		Иначе
			Форма.ГражданствоФизическихЛицЛицоБезГражданства = 1;
		КонецЕсли;
		СотрудникиКлиентСервер.ОбновитьДоступностьПолейВводаГражданства(Форма, ТекущаяДатаСеанса());
		
		ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ФизическоеЛицо.УточнениеНаименования) Тогда
		Форма.ДополнятьПредставление = Ложь;
	Иначе
		Форма.ДополнятьПредставление = Истина;
	КонецЕсли;
	
	СотрудникиКлиентСервер.УстановитьДоступностьУточненияНаименования(Форма);
		
КонецПроцедуры

Процедура ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Перем ДополнительныеСвойства;
	
	ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	
	Если Форма.СозданиеНового Тогда
		
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ГражданствоПоУмолчанию =
			НЕ ДоступноДобавлениеИзменениеДанныхФизическихЛиц ИЛИ Форма.ГражданствоФизическихЛиц.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
			
		СотрудникиФормы.ЗаписатьЗначенияПоУмолчанию(Форма.ФизическоеЛицоСсылка, ГражданствоПоУмолчанию);
		
	КонецЕсли;
	
	СотрудникиФормы.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, Форма.ФизическоеЛицоСсылка);	
	Если ДоступноДобавлениеИзменениеДанныхФизическихЛиц Тогда
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"ГражданствоФизическихЛиц",
			Форма.ФизическоеЛицоСсылка,
			,
			ДополнительныеСвойства);
			
		ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормы.ПрочитатьДанныеСвязанныеСФизлицом(Форма, Форма.ДоступенПросмотрДанныхФизическихЛиц);
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		Если ЗначениеЗаполнено(Форма.ГражданствоФизическихЛиц.Страна) Тогда
			Форма.ГражданствоФизическихЛицЛицоБезГражданства = 0;
		Иначе
			Форма.ГражданствоФизическихЛицЛицоБезГражданства = 1;
		КонецЕсли;
		СотрудникиКлиентСервер.ОбновитьДоступностьПолейВводаГражданства(Форма, ТекущаяДатаСеанса());
		
		ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиМодулейОбъектаИМенеджера

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Перем Организация;
	Перем ГоловнаяОрганизация;
	Перем Подразделение;
	
	Параметры.Отбор.Свойство("ТекущаяОрганизация", Организация);
	Параметры.Отбор.Свойство("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Параметры.Отбор.Свойство("ТекущееПодразделение", Подразделение);
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(ГоловнаяОрганизация);
		Параметры.Отбор.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		Параметры.Отбор.Удалить("ГоловнаяОрганизация");
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Параметры.Отбор.Удалить("ТекущаяОрганизация");
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Параметры.Отбор.Удалить("ТекущееПодразделение");
	КонецЕсли; 
	
	Если Организация <> НеОпределено Или Подразделение <> НеОпределено Тогда
		// Если есть отбор по текущей организации или подразделению - отрабатываем особенным образом.
		
		Запрос = Новый Запрос;
	
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		ЗапросТекст = 
		"ВЫБРАТЬ *
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО (ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка)
		|			И (ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|ГДЕ
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
		|	И ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &Подразделение
		|	И &ДополнительноеУсловие";
		
		Если Параметры.Свойство("ДоступныНепринятые")
			И Параметры.ДоступныНеПринятые Тогда
			
			Если ЗначениеЗаполнено(Организация) Тогда
				
				ЗапросТекст = СтрЗаменить(ЗапросТекст, "&ДополнительноеУсловие",
					"Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация
					|	И &ДополнительноеУсловие");
				Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
				
			КонецЕсли;
			
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &Подразделение
				|	И ", "");
				
			Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
			
		Иначе
			
			Если Организация = НеОпределено Тогда
				ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
					|	И ", "");
			КонецЕсли;
				
		    Если ТипЗнч(Организация) = Тип("Массив") Тогда
				ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
					|	И ", "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) В (&Организация)
					|	И ");
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Подразделение) Тогда
				
			    Если ТипЗнч(Подразделение) = Тип("Массив") Тогда
					ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &Подразделение
						|	И ", "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) В (&Подразделение)
						|	И ");
				КонецЕсли;
					
			Иначе
				ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &Подразделение
					|	И ", "");
			КонецЕсли;
				
		КонецЕсли;
		
		Запрос.Текст = ЗапросТекст;
		
		ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.Сотрудники, Параметры, Запрос, "Сотрудники");
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаСписка" Тогда
		ВыбраннаяФорма = "ФормаСписка";
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		ВыбраннаяФорма = "ФормаСписка";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбраннаяФорма) Тогда
		
		СтандартнаяОбработка = Ложь;
		Если Не Параметры.Свойство("Отбор") Тогда
			Параметры.Вставить("Отбор", Новый Структура);
		КонецЕсли; 
		
		СотрудникиФормы.УстановитьСтандартныеОтборыСотрудников(Параметры.Отбор);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьКомандыПечатиСправочникуСотрудники(КомандыПечати) Экспорт
	
	ФОИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если ФОИспользоватьНачислениеЗарплаты ИЛИ ФОИспользоватьКадровыйУчет Тогда
		
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты", , Ложь) Тогда
			
			СотрудникиФормы.ДобавитьКомандуПечатиЛичнойКарточкиТ2(КомандыПечати);
			
			СотрудникиФормы.ДобавитьКомандуПечатиПриказаОПриеме(КомандыПечати);
			СотрудникиФормы.ДобавитьКомандуПечатиПриказаОПриемеВMSWord(КомандыПечати);
			СотрудникиФормы.ДобавитьКомандуПечатиПриказаОПереводе(КомандыПечати);
			СотрудникиФормы.ДобавитьКомандуПечатиПриказаОПереводеВMSWord(КомандыПечати);
			
		КонецЕсли; 
		
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты", , Ложь)
			ИЛИ ПравоДоступа("Просмотр", Метаданные.Документы.Увольнение) Тогда
				
			СотрудникиФормы.ДобавитьКомандуПечатиПриказаОбУвольнении(КомандыПечати);
			СотрудникиФормы.ДобавитьКомандуПечатиПриказаОбУвольненииВMSWord(КомандыПечати);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФОИспользоватьНачислениеЗарплаты Тогда
		
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеНалоговИВзносов,ЧтениеНалоговИВзносов", , Ложь) Тогда
			СотрудникиФормы.ДобавитьКомандуПечатиКарточкиУчетаСтраховыхВзносов(КомандыПечати);
			СотрудникиФормы.ДобавитьКомандуПечатиРегистраНалоговогоУчетаПоНДФЛ(КомандыПечати);
		КонецЕсли; 
		
	КонецЕсли;
	
	СотрудникиФормы.ДобавитьКомандуПечатиСогласияНаОбработкуПерсональныхДанных(КомандыПечати);
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
						КоллекцияПечатныхФорм,
						"ПФ_MXL_Т2", НСтр("ru='Личная карточка (Т-2)'"),
						ПечатьТ2(МассивОбъектов, ОбъектыПечати), ,);
	КонецЕсли;

КонецПроцедуры

// Процедура печати Т-2.
// Возвращает табличный документ - сформированную унифицированную форму Т-2.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ПечатьТ2(МассивОбъектов, ОбъектыПечати) 
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ОтчетТ2 = Отчеты.ОтчетыПоСотрудникам.Создать();
	ОтчетТ2.КомпоновщикНастроек.ЗагрузитьНастройки(
		ОтчетТ2.СхемаКомпоновкиДанных.ВариантыНастроек.Т2.Настройки);
	Отбор = ОтчетТ2.КомпоновщикНастроек.Настройки.Отбор;
	Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "РабочееМесто.Сотрудник", ВидСравненияКомпоновкиДанных.ВСписке, МассивОбъектов);
	ОтчетТ2.СкомпоноватьРезультат(ДокументРезультат);
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция СтандартныеОтборыСотрудников() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВАрхиве", Ложь);
	
	Возврат Отбор;
	
КонецФункции

Процедура ОбновитьРежимыРаботыФормы() Экспорт
	
	МассивРежимовРаботы = Новый Массив;
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.ФизическоеЛицо);
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.Сотрудник);
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоТрудовомуДоговору);
		
	РегистрыСведений.СведенияОРежимахРаботыФормыСотрудника.ЗаполнитьНастройкиРежимов(МассивРежимовРаботы);
		
КонецПроцедуры

Процедура ПроверитьНеобходимостьНастройкиРежимовРаботыФормыСотрудника(Источник, Отказ) Экспорт
	
	ЗначениеИзменено = Ложь;
	Если ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьКадровыйУчет") Тогда
		ЗначениеИзменено = (Константы.ИспользоватьКадровыйУчет.Получить() <> Источник.Значение);
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьНачислениеЗарплаты") Тогда
		ЗначениеИзменено = (Константы.ИспользоватьНачислениеЗарплаты.Получить() <> Источник.Значение);
	КонецЕсли;
	
	Если ЗначениеИзменено Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено");
	КонецЕсли; 
	
КонецПроцедуры

Функция ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений, ВыводитьПодробнуюИнформацию = Ложь) Экспорт
	
	Если Не ВыводитьПодробнуюИнформацию Тогда
		
		НаименованиеОрганизации = ?(ЗначениеЗаполнено(РеквизитыОрганизации.НаименованиеСокращенное), РеквизитыОрганизации.НаименованиеСокращенное, РеквизитыОрганизации.Наименование); 
		Если ДанныеСотрудника.ОформленПоТрудовомуДоговору
			И ДанныеСотрудника.ДатаПриема <= ДатаСведений
			И ((Не ЗначениеЗаполнено(ДанныеСотрудника.ДатаУвольнения))
				Или (ДанныеСотрудника.ДатаУвольнения > ДатаСведений)) Тогда
			
			Если ЗначениеЗаполнено(ДанныеСотрудника.Должность) Тогда
				ДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСотрудника.Должность, "Наименование");
			Иначе
				ДолжностьНаименование = НСтр("ru='<Должность не указана>'");
			КонецЕсли;
			
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|работает с %2 %3'"), 
				НаименованиеОрганизации,
				Формат(ДанныеСотрудника.ДатаПриема, "ДФ=дд.ММ.гггг"),
				?(ЗначениеЗаполнено(ДолжностьНаименование), "("+ДолжностьНаименование+")", "") , Символы.ПС);
				
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.ДатаУвольнения) И ДанныеСотрудника.ДатаУвольнения <= ДатаСведений  Тогда	
				
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 
					|уволен с %2'"), 
				НаименованиеОрганизации,
				Формат(ДанныеСотрудника.ДатаУвольнения, "ДФ=дд.ММ.гггг"));
																			
		Иначе
				
			Если ДанныеСотрудника.ДатаПриема > ДатаСведений Тогда
				
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1  
						|будет работать с %2'"), 
					НаименованиеОрганизации,
					Формат(ДанныеСотрудника.ДатаПриема, "ДФ=дд.ММ.гггг"));	
																			
			Иначе
					
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1  
						|не оформлен на работу'"), 
					НаименованиеОрганизации);
																			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе 
		
		Если Не ДанныеСотрудника.ОформленПоТрудовомуДоговору
			И Не ЗначениеЗаполнено(ДанныеСотрудника.ДатаУвольнения) Тогда	
			
			Возврат НСтр("ru = 'Принять на работу'");
			
		Иначе	
			Возврат НСтр("ru = 'Подробнее...'");
		КонецЕсли;
		
	КонецЕсли;	
																		
КонецФункции

Функция ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений) Экспорт
	
	Если ДанныеСотрудника.СотрудникАктуален Тогда
		СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Работает с %1 года'"), Формат(ДанныеСотрудника.ДатаПриема, "ДФ=дд.ММ.гггг"));
	Иначе
		Если ДанныеСотрудника.ОформленПоТрудовомуДоговору И ДанныеСотрудника.ДатаПриема > ДатаСведений Тогда
			СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Будет работать с %1 года'"), Формат(ДанныеСотрудника.ДатаПриема, "ДФ=дд.ММ.гггг"));	
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.ДатаПриема) И ЗначениеЗаполнено(ДанныеСотрудника.ДатаУвольнения) Тогда 
			СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Работал с %1 по %2'"), Формат(ДанныеСотрудника.ДатаПриема, "ДФ=дд.ММ.гггг"), Формат(ДанныеСотрудника.ДатаУвольнения, "ДФ=дд.ММ.гггг"));
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.ДатаУвольнения) Тогда 
			СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уволен с %1'"), Формат(ДанныеСотрудника.ДатаУвольнения, "ДФ=дд.ММ.гггг"));
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.ДатаПриема) Тогда 
			СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата планируемого приема: %1'"), Формат(ДанныеСотрудника.ДатаПриема, "ДФ=дд.ММ.гггг")); 		
		Иначе	
			СтрокаПериодРаботы = НСтр("ru = 'Не указана дата приема на работу'");
		КонецЕсли;				
	КонецЕсли;	
	
	ДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСотрудника.Должность, "Наименование");
	
	Результат = Новый Структура;
	Результат.Вставить("ИнфоНадписьПериодРаботы", СтрокаПериодРаботы);
	Результат.Вставить("ИнфоНадписьОрганизация", ?(ЗначениеЗаполнено(РеквизитыОрганизации.Наименование), РеквизитыОрганизации.Наименование,  НСТР("ru = 'не указана'")));
	Результат.Вставить("ИнфоНадписьДолжность", ?(ЗначениеЗаполнено(ДолжностьНаименование), ДолжностьНаименование,  НСТР("ru = 'не указана'")));
	
	Если ДанныеСотрудника.Владелец().Колонки.Найти("ТекущаяТарифнаяСтавка") <> Неопределено Тогда
		Результат.Вставить("ИнфоНадписьОклад", ?(ЗначениеЗаполнено(ДанныеСотрудника.ТекущаяТарифнаяСтавка), ДанныеСотрудника.ТекущаяТарифнаяСтавка, НСТР("ru = 'не указан'")));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции	

Процедура ЗаполнитьПервоначальныеЗначенияФизическогоЛица(Форма)
	
	Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписейФизическиеЛица") Тогда
		
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("ГруппаДоступа", "ФизическоеЛицо.ГруппаДоступа");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗначенияДляЗаполнения);	
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПервоначальныеЗначения(Форма) Экспорт
	
	ЗаполнитьПервоначальныеЗначенияФизическогоЛица(Форма);
	
	ЗначенияДляЗаполнения = Новый Структура;
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
		
	Если ФОИспользоватьКадровыйУчет Тогда
		
		ЗначенияДляЗаполнения.Вставить("Организация", "Сотрудник.ГоловнаяОрганизация");
		
	Иначе
		
		ЗначенияДляЗаполнения.Вставить("Организация", "ТекущаяОрганизация");
		ЗначенияДляЗаполнения.Вставить("Подразделение", "ТекущееПодразделение");
		
	КонецЕсли;
	
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗначенияДляЗаполнения);	
	
	Если ФОИспользоватьКадровыйУчет 
		И ЗначениеЗаполнено(Форма.Сотрудник.ГоловнаяОрганизация) Тогда
		
		Форма.Сотрудник.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Форма.Сотрудник.ГоловнаяОрганизация);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СотрудникиОбновитьЭлементыФормы(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыФункциональныхОпций = Новый Структура;
	ПараметрыФункциональныхОпций.Вставить("Организация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Форма.ТекущаяОрганизация));
	
	ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ТекущаяОрганизация, "ОбособленноеПодразделение");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФункциональныхОпций);
	
	СотрудникиКлиентСервер.УстановитьИнфоНадпись(Форма, ТекущаяДатаСеанса());
	
	ЭтоПодработка = ЗначениеЗаполнено(Форма.Сотрудник.Ссылка) И Форма.Сотрудник.Ссылка <> Форма.Сотрудник.ГоловнойСотрудник;
	
	// Получим значение ДополнятьПредставление.
	Если ПустаяСтрока(Форма.Сотрудник.УточнениеНаименования) Тогда
		Форма.ДополнятьПредставление = Ложь;
	Иначе
		Форма.ДополнятьПредставление = Истина;
	КонецЕсли;
	
	СотрудникиКлиентСервер.УстановитьДоступностьУточненияНаименования(Форма);
	
	// Настройка команд панели навигации формы.
	СтруктураПараметровФО = Новый Структура;
	Если Форма.ОформленПоТрудовомуДоговору Тогда
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоТрудовомуДоговору);
	Иначе
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.Сотрудник);
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметровФО);
	
	ИспользуетсяКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	ПараметрыПостроения = Новый Структура;
	ПараметрыПостроения.Вставить("Сотрудник", Форма.Сотрудник.Ссылка);
	ПараметрыПостроения.Вставить("ОформленПоТрудовомуДоговору", Форма.ОформленПоТрудовомуДоговору);
	ПараметрыПостроения.Вставить("ДатаУвольнения", Форма.ДатаУвольнения);
	
	Если НЕ ЭтоПодработка Тогда
		СотрудникиФормы.УстановитьМенюВводаНаОсновании(Форма, "ОформитьДокумент", ПараметрыПостроения);
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяОрганизация",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущееПодразделение",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяДолжность",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущийВидЗанятости",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяТарифнаяСтавка",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаПриема",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет 
			И (ЗначениеЗаполнено(Форма.ПриказОПриеме)
			ИЛИ НЕ Форма.ОформленПоТрудовомуДоговору)
			ИЛИ ЭтоПодработка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаУвольнения",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГоловнаяОрганизация",
		"Видимость",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяОрганизация",
		"Видимость",
		НЕ ИспользуетсяКадровыйУчет);
	
	Если ИспользуетсяКадровыйУчет Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГоловнаяОрганизация",
			"ТолькоПросмотр",
			Форма.ОформленПоТрудовомуДоговору);
			
		Если ОбособленноеПодразделение <> Неопределено И ОбособленноеПодразделение Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ТекущаяОрганизация",
				"Видимость",
				Истина);
			
			Форма.Элементы.ТекущаяОрганизация.Заголовок = НСтр("ru = 'Филиал'");
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ТекущаяОрганизация",
				"Видимость",
				Ложь);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаКомандыОформления",
			"Видимость",
			НЕ Форма.ОформленПоТрудовомуДоговору);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОформитьПриемНаРаботу",
			"Видимость",
			НЕ Форма.ОформленПоТрудовомуДоговору);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОформитьКадровыйПеревод",
			"Видимость",
			Форма.ОформленПоТрудовомуДоговору И НЕ ЗначениеЗаполнено(Форма.ДатаУвольнения));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОформитьУвольнение",
			"Видимость",
			Форма.ОформленПоТрудовомуДоговору И НЕ ЗначениеЗаполнено(Форма.ДатаУвольнения));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаКомандыОформления",
			"Видимость",
			Ложь);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьОтображениеСпособовРасчетаАванса(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ТекущийСпособРасчетаАванса) Тогда
			
		ЗаголовокПлановыйАванс = "";
		ШиринаПлановыйАванс = 14;
		Если НЕ ЗначениеЗаполнено(Форма.ТекущийСпособРасчетаАванса) Тогда
			
			ЗаголовокПлановыйАванс = НСтр("ru='Аванс'");
			Форма.ПлановыйАванс = НСтр("ru='не задан'") ;
			ГоризонтальноеПоложениеПлановыйАванс = ГоризонтальноеПоложениеЭлемента.Лево;
			ВидПлановыйАванс = ВидПоляФормы.ПолеНадписи;
			
		ИначеЕсли Форма.ТекущийСпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ФиксированнойСуммой Тогда
			
			ЗаголовокПлановыйАванс = НСтр("ru='Аванс (руб)'");
			Форма.ПлановыйАванс = Формат(Форма.ТекущийАванс, "ЧДЦ=2");
			ГоризонтальноеПоложениеПлановыйАванс = ГоризонтальноеПоложениеЭлемента.Право;
			ВидПлановыйАванс = ВидПоляФормы.ПолеВвода;
			
		ИначеЕсли Форма.ТекущийСпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа Тогда
			
			ЗаголовокПлановыйАванс = НСтр("ru='Аванс (%)'");
			Форма.ПлановыйАванс = Формат(Форма.ТекущийАванс, "ЧДЦ=2");
			ГоризонтальноеПоложениеПлановыйАванс = ГоризонтальноеПоложениеЭлемента.Право;
			ВидПлановыйАванс = ВидПоляФормы.ПолеВвода;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПлановыйАванс",
			"Заголовок",
			ЗаголовокПлановыйАванс);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПлановыйАванс",
			"ГоризонтальноеПоложение",
			ГоризонтальноеПоложениеПлановыйАванс);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПлановыйАванс",
			"Ширина",
			ШиринаПлановыйАванс);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПлановыйАванс",
			"Вид",
			ВидПлановыйАванс);
		
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПлановыйАванс",
		"Видимость",
		ЗначениеЗаполнено(Форма.ТекущийСпособРасчетаАванса));
		
КонецПроцедуры

Процедура ФизическиеЛицаОбновитьЭлементыФормы(Форма) Экспорт
	
	СотрудникиКлиентСервер.ОбработатьОтображениеПоляИНН(Форма.ФизическоеЛицо.ИНН, Форма.Элементы.ФизлицоИНН, Форма);
	СотрудникиКлиентСервер.ОбработатьОтображениеПоляСтраховойНомерПФР(Форма.ФизическоеЛицо.СтраховойНомерПФР, Форма.Элементы.ФизлицоСтраховойНомерПФР, Форма);
	СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
	СотрудникиКлиентСервер.УстановитьПодсказкуКДатеРождения(Форма);
	
КонецПроцедуры

Функция БанковскийСчетИнформацияОПричинахНедоступности() Экспорт
	Возврат НСтр("ru = 'Для ввода лицевого счета заполните организацию'");
КонецФункции

Процедура ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ) Экспорт
	
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		
		РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(Форма, "ФИОФизическихЛиц", ФизическоеЛицоСсылка, Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация) Экспорт
	
	ИзменилосьФИО = Ложь;
	ИзменилосьУдостоверениеЛичности = Ложь;
	
	НачатьТранзакцию();
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры") Тогда
		ИзменилосьФИО = РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(Форма, "ФИОФизическихЛиц", ФизическоеЛицоСсылка, ИзменилосьФИО);
	КонецЕсли;
	
	Если НЕ ИзменилосьФИО И Форма["ИзмененоУточнениеНаименования"] Тогда
		ТаблицаФизЛиц = Новый ТаблицаЗначений;
		ТаблицаФизЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		Строка = ТаблицаФизЛиц.Добавить();
		Строка.ФизическоеЛицо = ФизическоеЛицоСсылка;
		
		ЗарплатаКадры.ОбновитьНаименованияФизЛицаИСотрудника(ТаблицаФизЛиц);
	КонецЕсли;

	ЗафиксироватьТранзакцию();
	
	Если НЕ Форма.ИзмененыЛичныеДанные Тогда
		
		ИзменяемыеПоля = СотрудникиФормы.ИзменяемыеПоляФизическогоЛица();
		
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			
			Форма.ИзмененыЛичныеДанные = Форма[КлючИЗначение.Значение];
			
			Если Форма.ИзмененыЛичныеДанные Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
		Если НЕ Форма.ИзмененыЛичныеДанные Тогда
			
			Форма.ИзмененыЛичныеДанные = ИзменилосьФИО 
				Или ИзменилосьУдостоверениеЛичности;
				
		Иначе
				
			Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
				
				Форма[КлючИЗначение.Значение] = Ложь;
				
			КонецЦикла;
			
		КонецЕсли; 
							
	КонецЕсли; 
								
КонецПроцедуры	

Процедура ПрочитатьДанныеСвязанныеССотрудником(Форма) Экспорт
	
	ПрочитатьДанныеФизлица(Форма);
	
	ПрочитатьТекущиеДанныеСотрудника(Форма);
	
	СотрудникиФормы.ПрочитатьДанныеСвязанныеСФизлицом(Форма, Форма.ДоступенПросмотрДанныхФизическихЛиц, Форма.ТекущаяОрганизация, Истина);
	
КонецПроцедуры

Процедура ПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрДанныхФизическихЛиц, Организация, ИзФормыСотрудника) Экспорт
	
	Если ДоступенПросмотрДанныхФизическихЛиц Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьТекущиеДанные(Форма, СотрудникОбъект)
	
	ЗаписатьТекущиеКадровыеДанные(Форма, СотрудникОбъект);
	
	Если Форма.СозданиеНового ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		ЗаписатьТекущуюТарифнуюСтавку(Форма, СотрудникОбъект)	
	КонецЕсли; 
	
КонецПроцедуры

Функция КлючиСтруктурыТекущихКадровыхДанныхСотрудника() Экспорт
	КлючиСтруктуры = "ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,ТекущийВидЗанятости,ДатаПриема,ДатаУвольнения,ОформленПоТрудовомуДоговору,ПриказОПриеме";
	Возврат КлючиСтруктуры;
КонецФункции

Функция КлючиСтруктурыТекущихТарифныхСтавокСотрудника() Экспорт
	КлючиСтруктуры = "";
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты") Тогда
		КлючиСтруктуры = КлючиСтруктуры + "ТекущаяТарифнаяСтавка,ТекущийСпособРасчетаАванса,ТекущийАванс";
	КонецЕсли;
	Возврат КлючиСтруктуры;
КонецФункции

#КонецОбласти

#Область ПроцедурыДляДополненияФормыЭлементаСправФизическиеЛица

Процедура ДополнитьФормуМестамиРаботы(Форма, ИмяГруппы, ИмяПоследнегоЭлементаГруппы = "", СотрудникИсключение = Неопределено, ВыводитьПодробнуюИнформацию = Ложь)
	
	СотрудникиФормы.ЗаполнитьФормуМестамиРаботы(Форма, ИмяГруппы, ИмяПоследнегоЭлементаГруппы, СотрудникИсключение, ВыводитьПодробнуюИнформацию);
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедуры

Функция ДругиеРабочиеМеста(ФизическоеЛицоСсылка, СотрудникИсключение) Экспорт
	
	СписокНеобходимыхДанных = "Организация,Должность,ОформленПоТрудовомуДоговору,ДатаПриема,ДатаУвольнения";
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты") Тогда
		СписокНеобходимыхДанных = СписокНеобходимыхДанных + ",ТекущаяТарифнаяСтавка";
	КонецЕсли; 
	
	ТаблицаПоРабочимМестам = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиФормы.СотрудникиФизическогоЛица(ФизическоеЛицоСсылка), СписокНеобходимыхДанных, ТекущаяДатаСеанса());
	
	// Удаляем записи по СотрудникИсключение.
	Если СотрудникИсключение <> Неопределено Тогда
		МассивСтрокССотрудникИсключение = ТаблицаПоРабочимМестам.НайтиСтроки(Новый Структура("Сотрудник", СотрудникИсключение));
		Для Каждого ЭлементМассивСтрокССотрудникИсключение Из МассивСтрокССотрудникИсключение Цикл
			ТаблицаПоРабочимМестам.Удалить(ЭлементМассивСтрокССотрудникИсключение);
		КонецЦикла;
	КонецЕсли; 
	
	// Рассчитаем актуальность сотрудника.
	ТаблицаПоРабочимМестам.Колонки.Добавить("СотрудникАктуален", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестам Цикл
		СтрокаТаблицаПоРабочимМестам.СотрудникАктуален = СтрокаТаблицаПоРабочимМестам.ОформленПоТрудовомуДоговору И СтрокаТаблицаПоРабочимМестам.ДатаПриема < ТекущаяДатаСеанса()
			И (СтрокаТаблицаПоРабочимМестам.ДатаУвольнения > ТекущаяДатаСеанса() ИЛИ СтрокаТаблицаПоРабочимМестам.ДатаУвольнения = '00010101000000');
		
	КонецЦикла;
		
	Если ТаблицаПоРабочимМестам.Количество() > 1 Тогда
		
		// Выполним сортировку рабочих мест.
		ТаблицаПоРабочимМестам.Сортировать("СотрудникАктуален Убыв, ДатаПриема Возр, Организация");
		
	КонецЕсли;
		
	Возврат ТаблицаПоРабочимМестам;
	
КонецФункции

Процедура ПрочитатьДанныеФизлица(Форма)
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ФизическоеЛицоОбъект = Форма.ФизическоеЛицоСсылка.ПолучитьОбъект(); 	
	Иначе		
		ФизическоеЛицоОбъект = Форма.Сотрудник.ФизическоеЛицо.ПолучитьОбъект();
	КонецЕсли;	
	
	Форма.ФизическоеЛицоВерсияДанных = ФизическоеЛицоОбъект.ВерсияДанных;
	Форма.ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");
	
	Если Не Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ФизическоеЛицоСсылка = Форма.Сотрудник.ФизическоеЛицо;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПрочитатьТекущиеДанныеСотрудника(Форма)
	
	КлючиСтруктурыТекущихКадровыхДанныхСотрудника = СотрудникиФормы.КлючиСтруктурыТекущихКадровыхДанныхСотрудника();
	КадровыеДанные = КлючиСтруктурыТекущихКадровыхДанныхСотрудника;
	
	СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Сотрудник.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаКадровыхДанных = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, КадровыеДанные, ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаКадровыхДанных.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Форма, ТаблицаКадровыхДанных[0], КлючиСтруктурыТекущихКадровыхДанныхСотрудника);
	КонецЕсли;
	
	КлючиСтруктурыТарифныхСтавок = КлючиСтруктурыТекущихТарифныхСтавокСотрудника();
	Если Не ПустаяСтрока(КлючиСтруктурыТарифныхСтавок) Тогда
		
		ТаблицаКадровыхДанных = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, КлючиСтруктурыТарифныхСтавок, ТекущаяДатаСеанса());
		Если ТаблицаКадровыхДанных.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Форма, ТаблицаКадровыхДанных[0], КлючиСтруктурыТарифныхСтавок);
		КонецЕсли;
		
		КлючиСтруктурыТекущихКадровыхДанныхСотрудника = КлючиСтруктурыТекущихКадровыхДанныхСотрудника + "," + КлючиСтруктурыТарифныхСтавок;
		
	КонецЕсли; 
	
	ТекущиеДанныеКакСтруктура = Новый Структура(КлючиСтруктурыТекущихКадровыхДанныхСотрудника);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанныеКакСтруктура, Форма);
	
	Форма.ТекущиеДанныеПрежняя = Новый ФиксированнаяСтруктура(ТекущиеДанныеКакСтруктура);

КонецПроцедуры

Процедура ДополнитьФормуСотрудника(Форма, ИмяГруппы)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		ДополнитьФормуМестамиРаботы(Форма, ИмяГруппы, , Форма.Сотрудник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаписатьТекущиеКадровыеДанные(Форма, СотрудникОбъект)
	
	Если НЕ Форма.СозданиеНового И ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ИзмененаДатаПриема = Форма.ТекущиеДанныеПрежняя.ДатаПриема <> Форма.ДатаПриема;
		Если ИзмененаДатаПриема Тогда
			
			ТекущиеКадровыеДанныеНаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			ТекущиеКадровыеДанныеНаборЗаписей.Отбор.Сотрудник.Установить(СотрудникОбъект.Ссылка);
			ТекущиеКадровыеДанныеНаборЗаписей.Прочитать();
			
			ТекущиеКадровыеДанныеНаборЗаписей[0].ДатаПриема = Форма.ДатаПриема;
	
			УстановитьПривилегированныйРежим(Истина);
			ТекущиеКадровыеДанныеНаборЗаписей.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли; 
		
		Возврат;
		
	КонецЕсли;
	
	ЕстьИзменениеТекущихКадровыхДанных = Ложь;
	Для каждого ТекущиеКадровыеДанныеПрежние Из Форма.ТекущиеДанныеПрежняя Цикл
		ЕстьИзменениеТекущихКадровыхДанных = ТекущиеКадровыеДанныеПрежние.Значение <> Форма[ТекущиеКадровыеДанныеПрежние.Ключ];
		Если ЕстьИзменениеТекущихКадровыхДанных Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если НЕ ЕстьИзменениеТекущихКадровыхДанных Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеКадровыеДанныеНаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
	ТекущиеКадровыеДанныеНаборЗаписей.Отбор.Сотрудник.Установить(СотрудникОбъект.Ссылка);
	
	Строка = ТекущиеКадровыеДанныеНаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, Форма);
	Строка.Сотрудник = СотрудникОбъект.Ссылка; 
	Строка.ГоловнаяОрганизация = СотрудникОбъект.ГоловнаяОрганизация; 
	Строка.ФизическоеЛицо = СотрудникОбъект.ФизическоеЛицо; 
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущиеКадровыеДанныеНаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаписатьТекущуюТарифнуюСтавку(Форма, СотрудникОбъект)
	
	Если НЕ Форма.ТекущиеДанныеПрежняя.Свойство("ТекущаяТарифнаяСтавка")
		ИЛИ (Форма.ТекущиеДанныеПрежняя.ТекущаяТарифнаяСтавка = Форма.ТекущаяТарифнаяСтавка 
			И Форма.ТекущиеДанныеПрежняя.ТекущаяОрганизация = Форма.ТекущаяОрганизация
			И Форма.ТекущиеДанныеПрежняя.ТекущийСпособРасчетаАванса = Форма.ТекущийСпособРасчетаАванса
			И Форма.ТекущиеДанныеПрежняя.ТекущийАванс = Форма.ТекущийАванс) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяТарифнаяСтавкаНаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
	ТекущаяТарифнаяСтавкаНаборЗаписей.Отбор.Сотрудник.Установить(СотрудникОбъект.Ссылка);
	
	Строка = ТекущаяТарифнаяСтавкаНаборЗаписей.Добавить();
	Строка.Сотрудник = СотрудникОбъект.Ссылка; 
	Строка.ФизическоеЛицо = СотрудникОбъект.ФизическоеЛицо; 
	Строка.ГоловнаяОрганизация = СотрудникОбъект.ГоловнаяОрганизация; 
	Строка.ТекущаяОрганизация = Форма.ТекущаяОрганизация; 
	Строка.ТекущаяТарифнаяСтавка = Форма.ТекущаяТарифнаяСтавка; 
	Строка.ТекущийСпособРасчетаАванса = Форма.ТекущийСпособРасчетаАванса; 
	Строка.ТекущийАванс = Форма.ТекущийАванс; 
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущаяТарифнаяСтавкаНаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Форма.ТекущиеДанныеПрежняя.ТекущийАванс <> Форма.ТекущийАванс Тогда
		
		РасчетЗарплатыФормы.ЗапомнитьРазмерАвансаПоУмолчанию(
			Форма.ТекущийАванс, Форма.ТекущаяОрганизация, Форма.ТекущийСпособРасчетаАванса);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЧтенияЗаписиДанныхДокументовУдостоверяющихЛичность

Процедура ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, ВедущийОбъект) Экспорт
	
	Если Форма.Параметры.Свойство("Ключ") И НЕ Форма.Параметры.Ключ.Пустая() Тогда
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", ВедущийОбъект);
	КонецЕсли;
	
	МенеджерЗаписи = МенеджерПоследнейЗаписиДокументовФизическихЛиц(ВедущийОбъект);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	
	// Имя реквизита формы совпадает с именем регистра.
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "ДокументыФизическихЛиц");
	
	ЗаписьКакСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
	Форма["ДокументыФизическихЛицПрежняя"] = Новый ФиксированнаяСтруктура(ЗаписьКакСтруктура);
	
	Форма["ДокументыФизическихЛицНоваяЗапись"] = Ложь;
	
КонецПроцедуры

Функция МенеджерПоследнейЗаписиДокументовФизическихЛиц(ВедущийОбъект) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	
	МенеджерЗаписи = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи["Физлицо"] = ВедущийОбъект;
	
	// Ищем последнюю запись
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрСведений.Период,
	|	РегистрСведений.Физлицо,
	|	РегистрСведений.ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК РегистрСведений
	|ГДЕ
	|	РегистрСведений.Физлицо = &ВедущийОбъект
	|	И РегистрСведений.ЯвляетсяДокументомУдостоверяющимЛичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрСведений.Период УБЫВ";
	Запрос.УстановитьПараметр("ВедущийОбъект", ВедущийОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
	
	Возврат МенеджерЗаписи;
	
КонецФункции

Функция ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект)
	
	Если Форма["ДокументыФизическихЛицНаборЗаписейПрочитан"] Тогда
		Возврат ЗаписатьНаборЗаписейДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект);
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	ИмяИзмерения = МетаданныеРегистра.Измерения[0].Имя;

	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		ИзменилисьДанные = Форма["ДокументыФизическихЛиц"].Период <> Форма["ДокументыФизическихЛицПрежняя"].Период;
	Иначе
		ИзменилисьДанные = Ложь;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		ИзменилисьДанные = ИзменилисьДанные ИЛИ 
		(ВедущийОбъект <> Форма["ДокументыФизическихЛицПрежняя"][ИмяИзмерения] И 
		ЗначениеЗаполнено(Форма["ДокументыФизическихЛицПрежняя"][ИмяИзмерения]));
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Измерения Цикл
			Если Поле.Имя = ИмяИзмерения Тогда
				Продолжить;
			КонецЕсли; 
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилисьДанные Тогда
		// Пишем новое состояние записи.
		МенеджерЗаписи = Форма.РеквизитФормыВЗначение("ДокументыФизическихЛиц");
		МенеджерЗаписи[ИмяИзмерения] = ВедущийОбъект;
		// Если нужно сохранить старую запись, то создадим новый менеджер записи.
		Если Форма["ДокументыФизическихЛицНоваяЗапись"] Тогда
			НоваяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,  МенеджерЗаписи);
			НоваяЗапись.Записать();
		Иначе
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИзменилисьДанные;
	
КонецФункции

Функция ЗаписатьНаборЗаписейДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект)
	
	ИзменилисьДанные = Ложь;
	
	СотрудникиКлиентСервер.ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект);

	ИмяИзмерения = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"].Измерения[0].Имя;
	
	// Подготовим к сравнению набор исходных сведений.
	Набор = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьНаборЗаписей();
	Набор.Отбор[ИмяИзмерения].Установить(ВедущийОбъект);
	Набор.Прочитать();
	ТаблицаИсходногоНабора = Набор.Выгрузить();
	
	// Подготовим к сравнению набор, хранящийся в реквизите формы.
	ТаблицаНовогоНабора = Форма["ДокументыФизическихЛицНаборЗаписей"].Выгрузить();
	ТаблицаНовогоНабора.Колонки.Удалить("ИсходныйНомерСтроки");
	
	// Проверим необходимость записи нового набора.
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ТаблицаИсходногоНабора, ТаблицаНовогоНабора, , "Представление") Тогда
		
		ИзменилисьДанные = Истина;
		МассивСохраняемыхСтрок = Новый Массив;
		
		Для Каждого СтрокаТаблицаНовогоНабора Из ТаблицаНовогоНабора Цикл
			
			СохранитьСтроку = Истина;
			СтрокиТаблицыИсходногоНабора = ТаблицаИсходногоНабора.НайтиСтроки(Новый Структура("Период,ВидДокумента", СтрокаТаблицаНовогоНабора.Период, СтрокаТаблицаНовогоНабора.ВидДокумента));
			Если СтрокиТаблицыИсходногоНабора.Количество() > 0 Тогда
				СтрокаТаблицаИсходногоНабора = СтрокиТаблицыИсходногоНабора[0];
				Если ОбщегоНазначения.КоллекцииИдентичны(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаНовогоНабора), ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаИсходногоНабора), , "Представление") Тогда
					СохранитьСтроку = Ложь;
				КонецЕсли;
				// Удалим строку из таблицы исходного набора.
				ТаблицаИсходногоНабора.Удалить(СтрокаТаблицаИсходногоНабора);
			КонецЕсли; 
			
			Если СохранитьСтроку Тогда
				МассивСохраняемыхСтрок.Добавить(СтрокаТаблицаНовогоНабора);
			КонецЕсли; 
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицаИсходногоНабора Из ТаблицаИсходногоНабора Цикл
			УдаляемаяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(УдаляемаяЗапись, СтрокаТаблицаИсходногоНабора);
			УдаляемаяЗапись.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТаблицаНовогоНабора Из МассивСохраняемыхСтрок Цикл
			НоваяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицаНовогоНабора);
			НоваяЗапись.Записать();
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ИзменилисьДанные;
	
КонецФункции

#КонецОбласти

#Область РаботаСДополнительнымиФормами

Процедура СохранитьДанныеДополнительнойФормы(Форма, ИмяФормы, Отказ) Экспорт
	
	Перем ДополнительныеСвойства;
	
	Если ИмяФормы = "Справочник.Сотрудники.Форма.ЛичныеДанные" Тогда
		
		Если Форма.СозданиеНового Тогда
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		КонецЕсли;
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"ГражданствоФизическихЛиц",
			Форма.ФизическоеЛицоСсылка,
			,
			ДополнительныеСвойства);
			
		ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(
			Форма,
			Форма.ФизическоеЛицоСсылка);
		
	ИначеЕсли ИмяФормы = "Справочник.Сотрудники.Форма.ВыплатаЗарплаты" Тогда
	
		Если Форма.СозданиеНового Тогда
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		КонецЕсли;
		
		СтруктураВедущихОбъектов = Новый Структура();
		СтруктураВедущихОбъектов.Вставить("Организация", Форма.ТекущаяОрганизация);
		СтруктураВедущихОбъектов.Вставить("ФизическоеЛицо", Форма.ФизическоеЛицоСсылка);
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФормеПоСтруктуре(
			Форма,
			"ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам",
			СтруктураВедущихОбъектов,
			,
			ДополнительныеСвойства);
	
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"БухучетЗарплатыСотрудников",
			Форма.СотрудникСсылка,
			,
			ДополнительныеСвойства);
		
	ИначеЕсли ИмяФормы = "Справочник.ФизическиеЛица.Форма.Страхование" Тогда
	
		Если Форма.СозданиеНового Тогда
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		КонецЕсли;
		
		Набор = РегистрыСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.СоздатьНаборЗаписей();
		Набор.Отбор.ФизическоеЛицо.Установить(Форма.ФизическоеЛицоСсылка);
		
		СтруктураПараметров = Новый Структура("ГоловнаяОрганизация");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Форма);
		Если ЗначениеЗаполнено(СтруктураПараметров.ГоловнаяОрганизация) Тогда
			Набор.Отбор.ГоловнаяОрганизация.Установить(ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(СтруктураПараметров.ГоловнаяОрганизация));
		КонецЕсли; 
		
		Набор.Прочитать();
		ДанныеНабора = Набор.Выгрузить();
		ВыгружаемыеКолонкиДанныхФормы = "";
		
		Для Каждого Колонка Из ДанныеНабора.Колонки Цикл
			ВыгружаемыеКолонкиДанныхФормы = ВыгружаемыеКолонкиДанныхФормы + "," + Колонка.Имя;
		КонецЦикла;
		
		ВыгружаемыеКолонкиДанныхФормы = Сред(ВыгружаемыеКолонкиДанныхФормы, 2);
		
		ДанныеФормыНабор = Форма.НаборЗаписейВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.Выгрузить(, ВыгружаемыеКолонкиДанныхФормы);
		
		Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ДанныеНабора, ДанныеФормыНабор) Тогда

			Набор.Загрузить(ДанныеФормыНабор);
			Если Форма.СозданиеНового Тогда
				Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			КонецЕсли; 
			Набор.Записать();
		КонецЕсли; 
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"СтатусыЗастрахованныхФизическихЛиц",
			Форма.ФизическоеЛицоСсылка,
			,
			ДополнительныеСвойства);
			
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"СведенияОбИнвалидностиФизическихЛиц",
			Форма.ФизическоеЛицоСсылка,
			,
			ДополнительныеСвойства);
		
	ИначеЕсли ИмяФормы = "Справочник.Сотрудники.Форма.НалогНаДоходы" Тогда
	
		Если Форма.СозданиеНового Тогда
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		КонецЕсли;
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"СтатусФизическихЛицКакНалогоплательщиковНДФЛ",
			Форма.ФизическоеЛицоСсылка,
			,
			ДополнительныеСвойства);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПостроительМеню

Функция ОписаниеМенюВводаНаОсновании(ПараметрыПостроения) Экспорт
	
	ПунктыМеню = Новый Массив;
	
	ПунктыМеню.Добавить("Документы.ПриемНаРаботу");
	ПунктыМеню.Добавить("Документы.КадровыйПеревод");
	ПунктыМеню.Добавить("Документы.Увольнение");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.БольничныйЛист");
	ПунктыМеню.Добавить("Документы.Отпуск");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.ИсполнительныйЛист");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.СправкаНДФЛ");
	ПунктыМеню.Добавить("Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ");
	ПунктыМеню.Добавить("Документы.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ");
	ПунктыМеню.Добавить("Документы.ПрекращениеСтандартныхВычетовНДФЛ");
	ПунктыМеню.Добавить("Документы.ВозвратНДФЛ");
	ПунктыМеню.Добавить("Документы.АвансовыйПлатежИностранцаПоНДФЛ");
	ПунктыМеню.Добавить("Документы.ОперацияНалоговогоУчетаПоНДФЛ");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.ОперацияУчетаПоСтраховымВзносам");
	ПунктыМеню.Добавить("Документы.ИсходящаяСправкаОЗаработкеДляРасчетаПособий");
	
	ИсключаемыеПунктыМеню = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		Модуль.УстановитьИсключаемыеПунктыМенюВводаНаОснованииСотрудников(ИсключаемыеПунктыМеню);
	КонецЕсли; 
	
	Если ПараметрыПостроения <> Неопределено Тогда
		
		Если НЕ ПараметрыПостроения.ОформленПоТрудовомуДоговору
			ИЛИ ЗначениеЗаполнено(ПараметрыПостроения.ДатаУвольнения) Тогда
		
			ИсключаемыеПунктыМеню.Добавить("Документы.КадровыйПеревод");
			ИсключаемыеПунктыМеню.Добавить("Документы.Увольнение");
			ИсключаемыеПунктыМеню.Добавить("Документы.БольничныйЛист");
			ИсключаемыеПунктыМеню.Добавить("Документы.Отпуск");
			ИсключаемыеПунктыМеню.Добавить("Документы.ИсполнительныйЛист");
			
			Если НЕ ПараметрыПостроения.ОформленПоТрудовомуДоговору Тогда
				ИсключаемыеПунктыМеню.Добавить("Документы.ИсходящаяСправкаОЗаработкеДляРасчетаПособий");
			КонецЕсли; 
		
		КонецЕсли; 
	
		Если ПараметрыПостроения.ОформленПоТрудовомуДоговору Тогда
		
			ИсключаемыеПунктыМеню.Добавить("Документы.ПриемНаРаботу");
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ОписаниеМеню = СотрудникиФормы.РазделМеню(НСтр("ru='Оформить документ'"), ПунктыМеню, ИсключаемыеПунктыМеню);
	
	ПунктыМенюНеНастроенныхОбъектов = СотрудникиФормы.ПунктыМенюНеНастроенныхОбъектов(ОписаниеМеню);
	Если ПунктыМенюНеНастроенныхОбъектов.Количество() > 0 Тогда
		
		ПредставленияДоступныхОбъектов = ЗарплатаКадры.ПредставленияДоступныхОбъектовМетаданных(ПунктыМенюНеНастроенныхОбъектов, "Добавление");
		СотрудникиФормы.ДобавитьПунктыВРазделМеню(ОписаниеМеню, ПунктыМенюНеНастроенныхОбъектов, ПредставленияДоступныхОбъектов);
		
	КонецЕсли; 
	
	Возврат ОписаниеМеню;
	
КонецФункции

#КонецОбласти

#КонецОбласти
