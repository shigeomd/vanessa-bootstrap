
#Область СлужебныйПрограммныйИнтерфейс

// Обрабатывает СКД отчетов в части общих источников данных, описанных в СКД
// См. например в текстах запросов СКД
// ПОМЕСТИТЬ ОбщиеЗапросы_НачисленияУдержания
// ВЫБРАТЬ ... ИЗ Представления_КадровыеДанныеСотрудников.
// 
// Параметры:
//  Объект - отчет
//
Процедура ЗаполнитьОбщиеИсточникиДанныхОтчета(Объект) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ЗаполнитьОбщиеЗапросы(Объект);
		ЗаменитьПредставленияЗапросов(Объект);
	КонецЕсли;
	
КонецПроцедуры

// Формирует временную таблицу периодов с заданной периодичностью, формируемой, с помощью,
// запроса, возвращаемого методом ЗапросВтПериоды.
// Создает в МенеджерВременныхТаблиц временную таблицу с именем <ИмяВТ> 
// и периодичностью <Периодичность>	
// за интервал с <НачалоИнтервала> по <ОкончаниеИнтервала>.
//
Процедура СоздатьВТПериоды(МенеджерВременныхТаблиц, НачалоИнтервала, ОкончаниеИнтервала, Периодичность = "МЕСЯЦ", ИмяПоляПериод = "Период", ИмяВТ = "ВТПериоды", ИспользоватьКонецПериода = Ложь) Экспорт
	
	Если НачалоИнтервала > ОкончаниеИнтервала Тогда
		ВызватьИсключение НСтр("ru='Дата окончания не может быть меньше даты начала.'")
	КонецЕсли;
	
	Запрос = ЗапросВТПериоды(НачалоИнтервала, ОкончаниеИнтервала, Периодичность, ИмяПоляПериод, ИмяВТ, ИспользоватьКонецПериода);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

#Область ПроцедурыИФункцииИспользуемыеПриКонструированииЗапросов

// Возвращает фрагмент текста запроса, отделяющего один запрос от другого.
//
Функция РазделительЗапросов() Экспорт
	
	Возврат "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
КонецФункции

// Возвращает уникальное имя на основе переданного имени.
//
// Параметры:
//		ИмяТекстаЗапроса - Строка
//
// Возвращаемое значение:
//		Строка
//
Функция УникальноеИмяТекстаЗапроса(Знач ИмяТекстаЗапроса) Экспорт
	
	Возврат ИмяТекстаЗапроса + "_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "x");
	
КонецФункции

// Производит замену ключевой фразы "ВЫБРАТЬ РАЗРЕШЕННЫЕ" на "ВЫБРАТЬ". Предполагается, что
// текст запроса изначально содержит фразу "ВЫБРАТЬ РАЗРЕШЕННЫЕ".
//
// Параметры:
//		ТекстЗапроса - Строка
//		ТолькоРазрешенные - Булево
//
Процедура УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные) Экспорт
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли; 
	
КонецПроцедуры

// Осуществляет замену имени временной таблицы. Если не указано новое имя 
// временной таблицы, производится удаление из текста запроса строки, осуществляющей
// создание временной таблицы. Если новое имя временной таблицы передано, то производится
// замена всех фрагментов текста, содержащих старое имя временной таблицы на новое имя.
//
// Параметры:
//	ТекстЗапроса
//	ТекущееИмяТаблицы
//	НовоеИмяТаблицы
//
Процедура ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, ТекущееИмяТаблицы, НовоеИмяТаблицы = "") Экспорт
	
	Если ПустаяСтрока(НовоеИмяТаблицы) Тогда
		ЗамещаемыйТекст = "";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ " + ТекущееИмяТаблицы, "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекущееИмяТаблицы, НовоеИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Копирует параметры запроса ЗапросИсточник в параметры запроса ЗапросПриемник.
//
// Параметры:
//		ЗапросПриемник - Запрос
//		ЗапросИсточник - Запрос
//
Процедура СкопироватьПараметрыЗапроса(ЗапросПриемник, ЗапросИсточник) Экспорт
	
	Для каждого Параметр Из ЗапросИсточник.Параметры Цикл
		
		ЗапросПриемник.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет к тексту запроса, переданному в параметре ТекстЗапросаПриемник, текст запроса
// переданного в параметре ТекстЗапросаИсточник, через фрагмент текста разделения запросов
// см.РазделительЗапросов.
//
// Параметры:
//		ТекстЗапросаПриемник - Строка
//		ТекстЗапросаИсточник - Строка
//
Процедура ОбъединитьТекстыЗапросов(ТекстЗапросаПриемник, ТекстЗапросаИсточник) Экспорт
	
	ТекстЗапросаПриемник = ?(ПустаяСтрока(ТекстЗапросаПриемник), "", ТекстЗапросаПриемник + РазделительЗапросов()) + ТекстЗапросаИсточник;
	
КонецПроцедуры

// Объединяет два запроса в один. При этом производится копирование параметров
// см.СкопироватьПараметрыЗапроса и объединение текстов запросов см.ОбъединитьТекстыЗапросов.
//
// Параметры:
//		ЗапросПриемник - Запрос
//		ЗапросИсточник - Запрос
//
Процедура ОбъединитьЗапросы(ЗапросПриемник, ЗапросИсточник) Экспорт
	
	ОбъединитьТекстыЗапросов(ЗапросПриемник.Текст, ЗапросИсточник.Текст);
	СкопироватьПараметрыЗапроса(ЗапросПриемник,  ЗапросИсточник);
	
КонецПроцедуры

#КонецОбласти

#Область ПостроениеПредставленийВТИмяРегистра

// Добавляет в коллекцию описание отбора.
//
// Параметры:
//		КоллекцияОтборов - Массив
//		ЛевоеЗначение - Строка
//		ВидСравнения - Строка, допустимы условия, применяемые в текстах запросов.
//		ПравоеЗначение - Любое значение, допустимое в условиях текстов запросов.
//		ОтносительныйПуть - Булево, если истина, то в параметре ЛевоеЗначение должно содержаться
//					имя измерения, ресурса, реквизита регистра и перед именем через точку будет
//					подставляться имя таблицы из которой осуществляется выборка.
//
Процедура ДобавитьВКоллекциюОтбор(КоллекцияОтборов, ЛевоеЗначение, ВидСравнения, ПравоеЗначение, ОтносительныйПуть = Истина) Экспорт
	
	Если КоллекцияОтборов = Неопределено Тогда
		КоллекцияОтборов = Новый Массив;
	КонецЕсли;
	
	ОписаниеОтбора = Новый Структура;
	ОписаниеОтбора.Вставить("ЛевоеЗначение", ЛевоеЗначение);
	ОписаниеОтбора.Вставить("ВидСравнения", ВидСравнения);
	ОписаниеОтбора.Вставить("ПравоеЗначение", ПравоеЗначение);
	ОписаниеОтбора.Вставить("ОтносительныйПуть", ОтносительныйПуть);
	
	КоллекцияОтборов.Добавить(ОписаниеОтбора);
	
КонецПроцедуры

// Возвращает описание регистра сведений или регистра накопления.
//
// Параметры:
//		ИмяРегистра - Строка, имя регистра сведений или регистра накопления, как задано в конфигураторе.
//		ИсключатьНеИспользуемые - Булево, если истина из обработки будут исключены имена измерений (реквизитов, ресурсов),
//							чьи имена начинаются со слова "Удалить".
//		
// Возвращаемое значение:
//		Структура:
//			* ТипРегистра			- Строка, "РегистрСведений" или "РегистрНакопления".
//			* Измерения 			- массив имен всех измерений регистра.
//			* Ресурсы 				- массив имен ресурсов, которые не имеют "пары" ...ПоОкончании, кроме ДействуетДо.
//			* Реквизиты 			- массив имен всех реквизитов.
// 			* СтандартныеРеквизиты 	- массив имен стандартных реквизитов.
//			* ИзмеренияДляПоиска	- Соответствие, содержит ключи имена измерений регистра в (верхнем регистре), значение -
//			                       Истина.
//			Для регистров сведений дополнительно содержит ключи:
//			* ВозвратныеРесурсы 	- массив имен ресурсов, которые имеют "пару" с именем ...ПоОкончании.
//			* Периодичность 		- Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений
//
Функция ОписаниеРегистра(Знач ИмяРегистра, Знач ИсключатьНеИспользуемые = Истина) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
	Если МетаданныеРегистра = Неопределено Тогда
		
		МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
		Если МетаданныеРегистра = Неопределено Тогда
			
			ВызватьИсключение НСтр("ru='Неизвестное имя регистра'") + " """ + ИмяРегистра + """";
			
		КонецЕсли;
		
		ТипРегистра = "РегистрНакопления";
		
	Иначе
		ТипРегистра = "РегистрСведений";
	КонецЕсли;
	
	// Все измерения
	Измерения = Новый Массив;
	ИзмеренияДляПоиска = Новый Соответствие;
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		Если ИсключатьНеИспользуемые И ИмяНеИспользуется(Измерение.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		
		Измерения.Добавить(Измерение.Имя);
		ИзмеренияДляПоиска.Вставить(ВРег(Измерение.Имя), Истина);
		
	КонецЦикла;
	
	ЕстьВозвратныеСобытия = Ложь;
	
	// Ресурсы
	Ресурсы = Новый Массив;
	ВозвратныеРесурсы = Новый Массив;
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		Если ИсключатьНеИспользуемые И ИмяНеИспользуется(Ресурс.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ВРег(Ресурс.Имя) = ВРег("ДействуетДо") Тогда
			ЕстьВозвратныеСобытия = Истина;
			Продолжить; // Не включаем ресурс ДействуетДо в список получаемых ресурсов.
		КонецЕсли;	
		
		Если ВРег(Прав(Ресурс.Имя, 11)) <> ВРег("ПоОкончании") Тогда
			Ресурсы.Добавить(Ресурс.Имя);
		Иначе	
			ВозвратныеРесурсы.Добавить(Лев(Ресурс.Имя, СтрДлина(Ресурс.Имя) - 11));
		КонецЕсли;	
		
	КонецЦикла;
	
	// Удалим из списка "простых" ресурсов те, которые являются "возвратными".
	Для Каждого Ресурс Из ВозвратныеРесурсы Цикл
		ИндексРесурса = Ресурсы.Найти(Ресурс);
		Если ИндексРесурса <> Неопределено Тогда
			Ресурсы.Удалить(ИндексРесурса);
		КонецЕсли;			
	КонецЦикла;
	
	// Реквизиты
	Реквизиты = Новый Массив;
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		
		Если ИсключатьНеИспользуемые И ИмяНеИспользуется(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		
		Реквизиты.Добавить(Реквизит.Имя);
		
	КонецЦикла;
	
	// СтандартныеРеквизиты
	СтандартныеРеквизиты = Новый Массив;
	Для Каждого СтандартныйРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
		
		Если СтандартныйРеквизит.Имя <> "Период" Тогда
			СтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураОписанияРегистра = Новый Структура("ТипРегистра,Измерения,Ресурсы,Реквизиты,СтандартныеРеквизиты,ИзмеренияДляПоиска",
		ТипРегистра, Измерения, Ресурсы, Реквизиты, СтандартныеРеквизиты, ИзмеренияДляПоиска);
		
	Если ТипРегистра = "РегистрСведений" Тогда
		
		СтруктураОписанияРегистра.Вставить("ВозвратныеРесурсы",	ВозвратныеРесурсы);
		СтруктураОписанияРегистра.Вставить("Периодичность", МетаданныеРегистра.ПериодичностьРегистраСведений);

	КонецЕсли;
	
	Возврат СтруктураОписанияРегистра;
	
КонецФункции

// Возвращает описание регистра сведений.
//
// Параметры:
//		ИмяРегистра - Строка, имя регистра сведений, как задано в конфигураторе.
//		ИзмеренияФильтра - Строка, имена измерений, по которым строится фильтр, перечисленные через запятую.
//						 - Массив, имен измерений.
//		ИсключатьНеИспользуемые - Булево, если истина из обработки будут исключены имена измерений (реквизитов, ресурсов),
//							чьи имена начинаются со слова "Удалить".
//		
// Возвращаемое значение:
//		Структура	- Возвращаемая методом см. функцию ОписаниеРегистра, дополненная ключом:
//			* ИзмеренияФильтра 		- массив имен измерений по которым выполняется отбор.
//
Функция ОписаниеРегистраСведений(Знач ИмяРегистра, Знач ИзмеренияФильтра, Знач ИсключатьНеИспользуемые = Истина) Экспорт
	
	Если ТипЗнч(ИзмеренияФильтра) = Тип("Строка") Тогда
		МассивИзмеренийФильтра = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияФильтра);
	Иначе
		МассивИзмеренийФильтра = ИзмеренияФильтра;
	КонецЕсли;
	
	// Измерения для отбора
	ИзмеренияФильтра = Новый Массив;
	Для Каждого Измерение Из МассивИзмеренийФильтра Цикл
		
		Если ВРег(Измерение) = ВРег("Период")
			ИЛИ	ВРег(Измерение) = ВРег("ДатаНачала")
			ИЛИ ВРег(Измерение) = ВРег("ДатаОкончания") Тогда
			
			Продолжить;
			
		КонецЕсли;
		ИзмеренияФильтра.Добавить(Измерение);
		
	КонецЦикла;
	
	СтруктураОписанияРегистра = ОписаниеРегистра(ИмяРегистра, ИсключатьНеИспользуемые);
	СтруктураОписанияРегистра.Вставить("ИзмеренияФильтра", ИзмеренияФильтра);

	Возврат СтруктураОписанияРегистра;
	
КонецФункции

// Возвращает описание источника данных - временная таблица.
//
// Параметры:
//		ТаблицаФильтра 		- Строка, имя временной таблицы
//					   		- ТаблицаЗначений
//								содержат обязательные колонки:
//									"Период" (для получения представлений среза первых или
//										среза последних)
//									"ДатаНачала" и "ДатаОкончания" (для получения таблицы регистра).
//		ИзмеренияФильтра 	- Строка, имена колонок таблицы равные именам измерений регистра,
//								по которым устанавливается фильтр, для колонок с именами отличающимися
//								от имен измерений, в значениях ключа "СоответствиеИзмеренийРегистраИзмерениямФильтра",
//								указывается соответствие имени измерения регистра имени колонки таблицы фильтра.
//								Допускается не указывать, когда ТаблицаФильтра имеет тип ТаблицаЗначений.
//
// Возвращаемое значение;
//		Структура
//			* ВременнаяТаблица 	- Булево, Истина для источника данных временная таблица, Ложь
//									для источника данных таблица значений.
//			* ТаблицаФильтра 	- Строка
//							 	- ТаблицаЗначений
//			* ИзмеренияФильтра 	- Строка.
//			* СоответствиеИзмеренийРегистраИзмерениямФильтра - Соответствие.
//
Функция ОписаниеФильтраДляСоздатьВТИмяРегистра(Знач ТаблицаФильтра, Знач ИзмеренияФильтра = "") Экспорт
	
	ОписаниеФильтра = Новый Структура;
	
	ОписаниеФильтра.Вставить("ВременнаяТаблица", ТипЗнч(ТаблицаФильтра) = Тип("Строка"));
	ОписаниеФильтра.Вставить("ТаблицаФильтра", ТаблицаФильтра);
	ОписаниеФильтра.Вставить("ИзмеренияФильтра", ИзмеренияФильтра);
	ОписаниеФильтра.Вставить("СоответствиеИзмеренийРегистраИзмерениямФильтра", Новый Соответствие);
	
	Возврат ОписаниеФильтра;
	
КонецФункции

// Возвращает параметры построения для СоздатьВТИмяРегистра.
//
// Возвращаемое значение;
//		Структура:
//			* ИндексироватьПо 							- Неопределено - см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* Отборы 									- Массив - см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* ВключатьЗаписиНаНачалоПериода 			- Булево, если истина в результирующую таблицу будут
//															включены значения по измерениям фильтра на начало периода
//															(применимо при построении запросов к регистрам с периодичностью.
//															Секунда, День, Месяц, Квартал или Год).
//			* ИмяВременнойТаблицыЗаписейНаНачалоПериода - Строка, задает имя временной таблицы записей на начало периода.
//			* ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода - Строка, по окончании работы метода ЗапросВТИмяРегистра
//			                                                          будет сохранено имя временной таблицы, содержащей записи
//			                                                          на начало периода, если задано значение
//			                                                          ИмяВременнойТаблицыЗаписейНаНачалоПериода, то будет
//			                                                          содержать значение
//			                                                          ИмяВременнойТаблицыЗаписейНаНачалоПериода.
//			* ОтборыЗаписейНаНачалоПериода 				- Массив, описаний отбора (см.ДобавитьВКоллекциюОтбор), применяется к таблице
//															формирующий записи на начало периода, при формировании результирующей таблицы.
//
Функция ПараметрыПостроенияДляСоздатьВТИмяРегистра() Экспорт
	
	ПараметрыПостроения = ПараметрыПостроенияВТИмяРегистра();
	ПараметрыПостроения.Вставить("ВключатьЗаписиНаНачалоПериода", Ложь);
	ПараметрыПостроения.Вставить("ИмяВременнойТаблицыЗаписейНаНачалоПериода", "");
	ПараметрыПостроения.Вставить("ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода", "");
	ПараметрыПостроения.Вставить("ОтборыЗаписейНаНачалоПериода", Неопределено);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

// Возвращает параметры построения для СоздатьВТИмяРегистраСрезПервых.
//
// Возвращаемое значение;
//		Структура:
//			* ИндексироватьПо 	- Неопределено 	- см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* Отборы 			- Массив 		- см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* ВсеЗаписи 		- Булево, если Истина в результирующую таблицу будут включены
//									записи таблицы фильтра, для которых нет записей в регистре.
//			* ВключаяГраницу 	- Булево, если Ложь из результирующей таблицы будут исключены
//									записи с периодами равными ограничивающим.
//
Функция ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез() Экспорт
	
	ПараметрыПостроения = ПараметрыПостроенияВТИмяРегистра();
	ПараметрыПостроения.Вставить("ВсеЗаписи", Ложь);
	ПараметрыПостроения.Вставить("ВключаяГраницу", Истина);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

// Создает временную таблицу записей регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка, имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистра.
//		ИмяРезультирующейТаблицы 	- Строка, имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано каК ВТ<ИмяРегистра>.
//					
Функция СоздатьВТИмяРегистра(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	
	Запрос = ЗапросВтИмяРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяРезультирующейТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецФункции

// Создает временную таблицу среза первых регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка, имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез.
//		ИмяРезультирующейТаблицы 	- Строка, имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано каК ВТ<ИмяРегистра>.
//					
Функция СоздатьВТИмяРегистраСрезПервых(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	
	Запрос = ЗапросВтИмяРегистраСрез(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, Ложь, ИмяРезультирующейТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецФункции

// Создает временную таблицу среза последних регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка, имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез.
//		ИмяРезультирующейТаблицы 	- Строка, имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано каК ВТ<ИмяРегистра>.
//					
Функция СоздатьВТИмяРегистраСрезПоследних(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	
	Запрос = ЗапросВтИмяРегистраСрез(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, Истина, ИмяРезультирующейТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецФункции

// Возвращает запрос представления ВТИмяРегистра.
//
// Параметры:
//		ТолькоРазрешенные - Булево
//		ИмяРегистра - Строка, Имя регистра как задано в конфигураторе.
//		ПараметрыПостроения - Структура, см.ПараметрыПостроенияПредставленияВТТаблицаРегистра.
//		ИмяСоздаваемойТаблицы - Строка, если не указано, запрос будет создавать временную
//					таблицу ВТ<ИмяРегистра>
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТИмяРегистра(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено) Экспорт

	Запрос = Новый Запрос;
	
	Если Не ОписаниеФильтра.ВременнаяТаблица Тогда
		
		Если Не ЗначениеЗаполнено(ОписаниеФильтра.ИзмеренияФильтра) Тогда
			
			МассивИзмерений = Новый Массив;
			Для Каждого Колонка Из ОписаниеФильтра.ТаблицаФильтра.Колонки Цикл
				МассивИзмерений.Добавить(Колонка.Имя);		
			КонецЦикла;	
			
		Иначе
			
			Если ТипЗнч(ОписаниеФильтра.ИзмеренияФильтра) = Тип("Строка") Тогда
				МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ОписаниеФильтра.ИзмеренияФильтра);
			Иначе
				МассивИзмерений = ОписаниеФильтра.ИзмеренияФильтра;
			КонецЕсли;
			
		КонецЕсли; 
		
		ИмяВТИзмеренияДаты = УникальноеИмяТекстаЗапроса("ВТИзмеренияДаты");
		
		ТекстЗапроса = "ВЫБРАТЬ";
		
		Для Каждого Измерение Из МассивИзмерений Цикл
			ТекстЗапроса = ТекстЗапроса + "
				|	ИзмеренияДаты." + Измерение + " КАК " + Измерение + ",";
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
			|	ИзмеренияДаты.ДатаНачала,
			|	ИзмеренияДаты.ДатаОкончания";
		
		ТекстЗапроса = ТекстЗапроса + "
			|ПОМЕСТИТЬ " + ИмяВТИзмеренияДаты + "
			|ИЗ
			|	&ИзмеренияДаты КАК ИзмеренияДаты";
		
		ИмяПараметраИзмеренияДаты = ИмяВТИзмеренияДаты +"_Параметр";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИзмеренияДаты", "&" + ИмяПараметраИзмеренияДаты);
		ТекстЗапроса = ТекстЗапроса + РазделительЗапросов() + Символы.ПС;
		
		Запрос.УстановитьПараметр(ИмяПараметраИзмеренияДаты, ОписаниеФильтра.ТаблицаФильтра);
		
		ОписаниеФильтра.ВременнаяТаблица = Истина;
		ОписаниеФильтра.ТаблицаФильтра = ИмяВТИзмеренияДаты;
		ОписаниеФильтра.ИзмеренияФильтра = МассивИзмерений;
		
	Иначе
		ТекстЗапроса = "";
	КонецЕсли;
	
	ОписаниеРегистра = ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра);
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли; 

	ИзмерениеФильтраДатаНачала = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаНачала");
	Если ИзмерениеФильтраДатаНачала = Неопределено Тогда
		ИзмерениеФильтраДатаНачала = "ДатаНачала";
	КонецЕсли;
	
	ИзмерениеФильтраДатаОкончания = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаОкончания");
	Если ИзмерениеФильтраДатаОкончания = Неопределено Тогда
		ИзмерениеФильтраДатаОкончания = "ДатаОкончания";
	КонецЕсли;
		
	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра;
	КонецЕсли; 
	
	ПараметрыПостроения.ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода = "";
	
	ФормироватьСПериодичностьДень = ПараметрыПостроения.ФормироватьСПериодичностьДень
		И ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда;
		
	ВключатьЗаписиНаНачалоПериода = ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода
		И (ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда
			Или ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.День
			Или ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц
			Или ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Квартал
			Или ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Год
		);
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
			
		Если ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда Тогда
			Если ФормироватьСПериодичностьДень Тогда
				ПредставлениеПериода = "ДЕНЬ";
			Иначе
				ПредставлениеПериода = "СЕКУНДА";
			КонецЕсли;
		ИначеЕсли ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.День Тогда
			ПредставлениеПериода = "ДЕНЬ";
		ИначеЕсли ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц Тогда
			ПредставлениеПериода = "МЕСЯЦ";
		ИначеЕсли ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Квартал Тогда
			ПредставлениеПериода = "КВАРТАЛ";
		Иначе
			ПредставлениеПериода = "ГОД";
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыПостроения.ИмяВременнойТаблицыЗаписейНаНачалоПериода) Тогда
			ИмяСоздаваемойТаблицыСрезПоследних = УникальноеИмяТекстаЗапроса("ВТ" + ИмяРегистра + "СрезПоследних");
		Иначе
			ИмяСоздаваемойТаблицыСрезПоследних = ПараметрыПостроения.ИмяВременнойТаблицыЗаписейНаНачалоПериода;
		КонецЕсли; 
		
		ПараметрыПостроения.ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода = ИмяСоздаваемойТаблицыСрезПоследних;
		
		Если ОписаниеФильтра.ВременнаяТаблица Тогда
			ОписаниеФильтраСреза = ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписаниеФильтра.ТаблицаФильтра, ОписаниеФильтра.ИзмеренияФильтра);
		Иначе
			ОписаниеФильтраСреза = ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТИзмеренияДаты, МассивИзмерений);
		КонецЕсли;
		
		ОписаниеФильтраСреза.СоответствиеИзмеренийРегистраИзмерениямФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра;
		СоответствиеИмениДатаНачала = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаНачала");
		Если СоответствиеИмениДатаНачала = Неопределено Тогда
			ИмяКолонкиДатаНачала = "ДатаНачала";
		Иначе
			ИмяКолонкиДатаНачала = СоответствиеИмениДатаНачала;
		КонецЕсли; 
			
		ОписаниеФильтраСреза.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ИмяКолонкиДатаНачала);
			
		ПараметрыПостроенияСреза = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроенияСреза.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
		Для каждого ОписаниеОтбора Из ПараметрыПостроения.Отборы Цикл
			
			Если ОписаниеОтбора.Свойство("ОтносительныйПуть") Тогда
				ОтносительныйПуть = ОписаниеОтбора.ОтносительныйПуть;
			Иначе
				ОтносительныйПуть = Истина;
			КонецЕсли;
			
			Если ОтносительныйПуть И ОписаниеРегистра.ИзмеренияДляПоиска.Получить(ВРег(ОписаниеОтбора.ЛевоеЗначение)) <> Неопределено Тогда
				ДобавитьВКоллекциюОтбор(ПараметрыПостроенияСреза.Отборы, ОписаниеОтбора.ЛевоеЗначение, ОписаниеОтбора.ВидСравнения, ОписаниеОтбора.ПравоеЗначение, ОтносительныйПуть);
			Иначе
				ДобавитьВКоллекциюОтбор(ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода, ОписаниеОтбора.ЛевоеЗначение, ОписаниеОтбора.ВидСравнения, ОписаниеОтбора.ПравоеЗначение, ОтносительныйПуть);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗапросВТИмяРегистраСрез = ЗапросВТИмяРегистраСрез(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтраСреза, ПараметрыПостроенияСреза, Истина,  ИмяСоздаваемойТаблицыСрезПоследних);
		
		СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистраСрез);
		
		ТекстЗапроса = ТекстЗапроса + ЗапросВТИмяРегистраСрез.Текст + РазделительЗапросов();
		
		ПредставлениеИзмерениеФильтраДатаНачала = "ДОБАВИТЬКДАТЕ(ИзмеренияДаты." + ИзмерениеФильтраДатаНачала + ", " + ПредставлениеПериода + ", 1)";
		
	Иначе
		ПредставлениеИзмерениеФильтраДатаНачала = "ИзмеренияДаты." + ИзмерениеФильтраДатаНачала;
	КонецЕсли; 
	
	Если ФормироватьСПериодичностьДень Тогда
		
		ПредставлениеРегистрСведенийПериод = "НАЧАЛОПЕРИОДА(РегистрСведений.Период, ДЕНЬ)";
		
		ПредставлениеУсловияИзмеренияДатыДатаНачала = "НАЧАЛОПЕРИОДА(" + ПредставлениеИзмерениеФильтраДатаНачала + ", ДЕНЬ)";
		ПредставлениеУсловияИзмеренияДатыДатаОкончания = "КОНЕЦПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраДатаОкончания + ", ДЕНЬ)";
		
	Иначе
		
		ПредставлениеРегистрСведенийПериод = "РегистрСведений.Период";
		
		ПредставлениеУсловияИзмеренияДатыДатаНачала = ПредставлениеИзмерениеФильтраДатаНачала;
		ПредставлениеУсловияИзмеренияДатыДатаОкончания = "ИзмеренияДаты." + ИзмерениеФильтраДатаОкончания;
		
	КонецЕсли;
	
	ТекстОписанияИзмерений = "";
	
	ТекстОписанияПолей = "	" + ПредставлениеРегистрСведенийПериод + " КАК Период,
		|	РегистрСведений.Период КАК ПериодЗаписи";
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
		ТекстОписанияПолей = ТекстОписанияПолей + ",
			|	РегистрСведений." + Измерение + " КАК " + Измерение;
			
		ТекстОписанияИзмерений = ?(ПустаяСтрока(ТекстОписанияИзмерений), "", ТекстОписанияИзмерений + "," + Символы.ПС)
			+ "	РегистрСведений." + Измерение;
			
	КонецЦикла;
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ТекстОписанияПолей = ТекстОписанияПолей + ",
			|	РегистрСведений." + Ресурс + " КАК " + Ресурс;
	КонецЦикла;
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ТекстОписанияПолей = ТекстОписанияПолей + ",
			|	РегистрСведений." + Ресурс + " КАК " + Ресурс;
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ТекстОписанияПолей = ТекстОписанияПолей + ",
			|	РегистрСведений." + Реквизит + " КАК " + Реквизит;
	КонецЦикла;
	
	Для Каждого СтандартныйРеквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл
		ТекстОписанияПолей = ТекстОписанияПолей + ",
			|	РегистрСведений." + СтандартныйРеквизит + " КАК " + СтандартныйРеквизит;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|" + ТекстОписанияПолей + "
		|ПОМЕСТИТЬ ВТПредставленияИмяРегистраТаблица
		|ИЗ
		|	" + ОписаниеФильтра.ТаблицаФильтра + " КАК ИзмеренияДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
		|		ПО (ВЫБОР 
		|				КОГДА ИзмеренияДаты." + ИзмерениеФильтраДатаНачала + " = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ИСТИНА
		|				КОГДА РегистрСведений.Период >= " + ПредставлениеУсловияИзмеренияДатыДатаНачала + " ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|	И (ВЫБОР
		|			КОГДА ИзмеренияДаты." + ИзмерениеФильтраДатаОкончания + " = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ИСТИНА
		|			КОГДА РегистрСведений.Период <= " + ПредставлениеУсловияИзмеренияДатыДатаОкончания + " ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) И ";
	
	Для Каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			
		ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
		Если ИзмерениеФильтра = Неопределено Тогда
			ИзмерениеФильтра = Измерение;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "(ИзмеренияДаты." + ИзмерениеФильтра + " = РегистрСведений." + Измерение + ") И ";
		
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	
	СчПараметров = 1;
	Если ПараметрыПостроения.Отборы <> Неопределено И ПараметрыПостроения.Отборы.Количество() > 0 Тогда
		
		ТекстОтбор = "";
		
		Для Каждого СтруктураОтбора Из ПараметрыПостроения.Отборы Цикл
				
			Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
				ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
			Иначе
				ИмяПараметра = ИмяСоздаваемойТаблицы +"_Параметр" + СчПараметров;
				ОписаниеПараметра = "&" + ИмяПараметра;
				Запрос.УстановитьПараметр(ИмяПараметра, СтруктураОтбора.ПравоеЗначение);
			КонецЕсли;
			
			Если Не СтруктураОтбора.Свойство("ОтносительныйПуть") Или СтруктураОтбора.ОтносительныйПуть Тогда
				
				ПредставленияЛевогоЗначение = "РегистрСведений." + СтруктураОтбора.ЛевоеЗначение;
				ТекстОтбор = ?(ПустаяСтрока(ТекстОтбор), "", ТекстОтбор + Символы.ПС + Символы.Таб + "И ")
					+ "(" + ПредставленияЛевогоЗначение + " " + СтруктураОтбора.ВидСравнения + " (" + ОписаниеПараметра + "))";
					
			Иначе
					
				ПредставленияЛевогоЗначение = СтруктураОтбора.ЛевоеЗначение;
				ТекстОтбор = ?(ПустаяСтрока(ТекстОтбор), "", ТекстОтбор + Символы.ПС + Символы.Таб + "И ")
					+ "(" + ПредставленияЛевогоЗначение + " " + СтруктураОтбора.ВидСравнения + " " + ОписаниеПараметра + ")";
					
			КонецЕсли;
			
			СчПараметров = СчПараметров + 1;
			
		КонецЦикла;	
		
		ТекстОтбор = "
			|ГДЕ
			|	(" + ТекстОтбор + ")";
		
		ТекстЗапроса = ТекстЗапроса + ТекстОтбор;
		
	КонецЕсли;	
	
	ТекстОтборовСКД = "";
	Для каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
		ТекстОтборовСКД = ?(ПустаяСтрока(ТекстОтборовСКД), "", ТекстОтборовСКД + "," + Символы.ПС) + "	РегистрСведений." + Измерение + ".*";
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстОтборовСКД) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|{ГДЕ
			|" + ТекстОтборовСКД + "}";
			
	КонецЕсли; 
	
	Если ОписаниеРегистра.ВозвратныеРесурсы.Количество() > 0 Тогда
		
		ТекстОписанияПолейСВозвратнымиРесурсами = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений.Период", "РегистрСведений.ДействуетДо");
		
		Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			
			ТекстОписанияПолейСВозвратнымиРесурсами = СтрЗаменить(ТекстОписанияПолейСВозвратнымиРесурсами, 
				"РегистрСведений." + Ресурс + " КАК " + Ресурс,
				"РегистрСведений." + Ресурс + "ПоОкончании  КАК " + Ресурс);
				
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|" + ТекстОписанияПолейСВозвратнымиРесурсами + "
			|ИЗ
			|	" + ОписаниеФильтра.ТаблицаФильтра + " КАК ИзмеренияДаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
			|		ПО (ВЫБОР
			|				КОГДА ИзмеренияДаты." + ИзмерениеФильтраДатаНачала + " = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ИСТИНА
			|				КОГДА РегистрСведений.ДействуетДо >= " + ПредставлениеУсловияИзмеренияДатыДатаНачала + " ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|	И (ВЫБОР
			|			КОГДА ИзмеренияДаты." + ИзмерениеФильтраДатаОкончания + " = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ИСТИНА
			|			КОГДА РегистрСведений.ДействуетДо <= " + ПредставлениеУсловияИзмеренияДатыДатаОкончания + " ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ)
			|	И РегистрСведений.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)";

		Для Каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
				
			Если ВРег(Измерение) <> ВРег("ДатаНачала") И ВРег(Измерение) <> ВРег("ДатаОкончания") Тогда
				
				ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
				Если ИзмерениеФильтра = Неопределено Тогда
					ИзмерениеФильтра = Измерение;
				КонецЕсли;
				
				ТекстЗапроса = ТекстЗапроса + "	И (ИзмеренияДаты." + ИзмерениеФильтра + " = РегистрСведений." + Измерение + ")";
				
			КонецЕсли;
			
		КонецЦикла;
	
		ТекстЗапроса = ТекстЗапроса + "
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК РегистрСведенийВспомогательный
			|		ПО РегистрСведений.Период < РегистрСведенийВспомогательный.Период
			|			И РегистрСведений.ДействуетДо >= РегистрСведенийВспомогательный.Период";
			
		Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
				
			ТекстЗапроса = ТекстЗапроса + "
				|			И РегистрСведений." + Измерение + " = РегистрСведенийВспомогательный." + Измерение;
			
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "}" + Символы.ПС
			+ "ГДЕ
			|	РегистрСведенийВспомогательный.Период ЕСТЬ NULL";
		
		СчПараметров = 1;
		Если ПараметрыПостроения.Отборы <> Неопределено И ПараметрыПостроения.Отборы.Количество() > 0 Тогда
			
			ТекстОтбор = "";
				
				Для Каждого СтруктураОтбора Из ПараметрыПостроения.Отборы Цикл
					
				Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
					ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
				Иначе
					ИмяПараметра = ИмяСоздаваемойТаблицы +"_Параметр" + СчПараметров;
					ОписаниеПараметра = "&" + ИмяПараметра;
				КонецЕсли;
				
				Если Не СтруктураОтбора.Свойство("ОтносительныйПуть") Или СтруктураОтбора.ОтносительныйПуть Тогда
					
					ПредставленияЛевогоЗначение = "РегистрСведений." + СтруктураОтбора.ЛевоеЗначение;
					ТекстОтбор = ТекстОтбор + Символы.ПС
						+ Символы.Таб + "И (" + ПредставленияЛевогоЗначение + " " + СтруктураОтбора.ВидСравнения + " (" + ОписаниеПараметра + "))";
					
				Иначе
					
					ПредставленияЛевогоЗначение = СтруктураОтбора.ЛевоеЗначение;
					ТекстОтбор = ТекстОтбор + Символы.ПС
						+ Символы.Таб + "И (" + ПредставленияЛевогоЗначение + " " + СтруктураОтбора.ВидСравнения + " " + ОписаниеПараметра + ")";
					
				КонецЕсли;
			
				СчПараметров = СчПараметров + 1;
				
			КонецЦикла;	
			
			Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
				ТекстОтбор = СтрЗаменить(ТекстОтбор, 
					"." + Ресурс + " ",
					"." + Ресурс + "ПоОкончании ");
			КонецЦикла;
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + ТекстОтбор;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ФормироватьСПериодичностьДень Тогда
		
		ИмяВТМаксимальныеПериодыПоДням = УникальноеИмяТекстаЗапроса("ВТМаксимальныеПериодыПоДням" + ИмяРегистра);
		
		ТекстЗапроса = ТекстЗапроса + РазделительЗапросов() + "
			|ВЫБРАТЬ
			|	РегистрСведений.Период,
			|	МАКСИМУМ(РегистрСведений.ПериодЗаписи) КАК ПериодЗаписи,
			|" + ТекстОписанияИзмерений
			+ "
			|ПОМЕСТИТЬ " + ИмяВТМаксимальныеПериодыПоДням + "
			|ИЗ 
			|	ВТПредставленияИмяРегистраТаблица КАК РегистрСведений
			|
			|СГРУППИРОВАТЬ ПО
			|	РегистрСведений.Период,
			|" + ТекстОписанияИзмерений;
			
		ИмяВТПредставленияВсеЗаписиИмяРегистра = УникальноеИмяТекстаЗапроса("ВТПредставленияВсеЗаписи" + ИмяРегистра);
		ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТПредставленияИмяРегистраТаблица", ИмяВТПредставленияВсеЗаписиИмяРегистра);

		ТекстРезультирующегоОписанияПолей = СтрЗаменить(ТекстОписанияПолей,
			"НАЧАЛОПЕРИОДА(РегистрСведений.Период, ДЕНЬ) КАК Период", "РегистрСведений.Период КАК Период");
			
		ТекстРезультирующегоОписанияПолей = СтрЗаменить(ТекстРезультирующегоОписанияПолей,
			"РегистрСведений.Период КАК ПериодЗаписи", "РегистрСведений.ПериодЗаписи КАК ПериодЗаписи");
		
		ТекстЗапроса = ТекстЗапроса + РазделительЗапросов() + "
			|ВЫБРАТЬ
			|" + ТекстРезультирующегоОписанияПолей + "
			|ПОМЕСТИТЬ ВТПредставленияИмяРегистраТаблица
			|ИЗ 
			|	" + ИмяВТМаксимальныеПериодыПоДням + " КАК РегистрСведенийСрез
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТПредставленияВсеЗаписиИмяРегистра + " КАК РегистрСведений
			|		ПО РегистрСведенийСрез.Период = РегистрСведений.Период
			|			И РегистрСведенийСрез.ПериодЗаписи = РегистрСведений.ПериодЗаписи";
			
		Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
			ТекстЗапроса = ТекстЗапроса + "
				|			И РегистрСведенийСрез." + Измерение + " = РегистрСведений." + Измерение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|" + СтрЗаменить(ТекстОписанияПолей, "РегистрСведений.Период КАК ПериодЗаписи", "РегистрСведений.ПериодЗаписи КАК ПериодЗаписи") + "
			|ИЗ 
			|	" + ИмяСоздаваемойТаблицыСрезПоследних + " КАК РегистрСведений
			|ГДЕ
			|	КОНЕЦПЕРИОДА(РегистрСведений.Период, ДЕНЬ) >= РегистрСведений.ПериодЗаписи";
			
		Если ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода <> Неопределено И ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода.Количество() > 0 Тогда
			
			ТекстОтбор = "";
			
			Для Каждого СтруктураОтбора Из ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода Цикл
					
				Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
					ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
				Иначе
					ИмяПараметра = ИмяСоздаваемойТаблицы +"_Параметр" + СчПараметров;
					ОписаниеПараметра = "&" + ИмяПараметра;
					Запрос.УстановитьПараметр(ИмяПараметра, СтруктураОтбора.ПравоеЗначение);
				КонецЕсли;
				
				Если Не СтруктураОтбора.Свойство("ОтносительныйПуть") Или СтруктураОтбора.ОтносительныйПуть Тогда
					
					ПредставленияЛевогоЗначение = "РегистрСведений." + СтруктураОтбора.ЛевоеЗначение;
					ТекстОтбор = ТекстОтбор + "
						|	И (" + ПредставленияЛевогоЗначение + " " + СтруктураОтбора.ВидСравнения + " (" + ОписаниеПараметра + "))";
						
				Иначе
						
					ПредставленияЛевогоЗначение = СтруктураОтбора.ЛевоеЗначение;
					ТекстОтбор = ТекстОтбор + "
						|	И (" + ПредставленияЛевогоЗначение + " " + СтруктураОтбора.ВидСравнения + " " + ОписаниеПараметра + ")";
						
				КонецЕсли;
				
				СчПараметров = СчПараметров + 1;
				
			КонецЦикла;	
			
			ТекстЗапроса = ТекстЗапроса + ТекстОтбор;
			
		КонецЕсли;	
		
	КонецЕсли;
		
	ДобавитьВТекстЗапросаПоляИндексирования(ТекстЗапроса, ПараметрыПостроения.ИндексироватьПо);
	
	УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТПредставленияИмяРегистраТаблица", ИмяСоздаваемойТаблицы);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос представления ВТИмяРегистраСрез.
//
// Параметры:
//		ТолькоРазрешенные 		- Булево
//		ИмяРегистра 			- Строка, Имя регистра как задано в конфигураторе.
//		ПараметрыПостроения 	- Структура, см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		СрезПоследних			- Булево, если Истина - срез последних, если Ложь - Срез первых.
//		ИмяСоздаваемойТаблицы 	- Строка, если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>СрезПоследних или ВТ<ИмяРегистра>СрезПервых
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТИмяРегистраСрез(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач СрезПоследних = Истина, Знач ИмяСоздаваемойТаблицы = Неопределено) Экспорт

	Запрос = Новый Запрос;
	
	Если НЕ ОписаниеФильтра.ВременнаяТаблица Тогда
		
		Если НЕ ЗначениеЗаполнено(ОписаниеФильтра.ИзмеренияФильтра) Тогда
			
			МассивИзмерений = Новый Массив;
			Для Каждого Колонка Из ОписаниеФильтра.ТаблицаФильтра.Колонки Цикл
				МассивИзмерений.Добавить(Колонка.Имя);		
			КонецЦикла;	
			
		Иначе
			
			Если ТипЗнч(ОписаниеФильтра.ИзмеренияФильтра) = Тип("Строка") Тогда
				МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ОписаниеФильтра.ИзмеренияФильтра);
			Иначе
				МассивИзмерений = ОписаниеФильтра.ИзмеренияФильтра;
			КонецЕсли;
			
		КонецЕсли; 
		
		ИмяВТИзмеренияДаты = УникальноеИмяТекстаЗапроса("ВТИзмеренияДаты");
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ИзмеренияДаты.Период";
			
		Для Каждого Измерение Из МассивИзмерений Цикл
			ТекстЗапроса = ТекстЗапроса + ",
				|	ИзмеренияДаты." + Измерение;
		КонецЦикла;
			
		ТекстЗапроса = ТекстЗапроса + "
			|ПОМЕСТИТЬ " + ИмяВТИзмеренияДаты + "
			|ИЗ
			|	&ИзмеренияДаты КАК ИзмеренияДаты";
		
		ИмяПараметраИзмеренияДаты = ИмяВТИзмеренияДаты +"_Параметр";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИзмеренияДаты", "&" + ИмяПараметраИзмеренияДаты);
		ТекстЗапроса = ТекстЗапроса + РазделительЗапросов() + Символы.ПС;
		
		Запрос.УстановитьПараметр(ИмяПараметраИзмеренияДаты, ОписаниеФильтра.ТаблицаФильтра);
		
		ОписаниеФильтра.ВременнаяТаблица = Истина;
		ОписаниеФильтра.ТаблицаФильтра = ИмяВТИзмеренияДаты;
		ОписаниеФильтра.ИзмеренияФильтра = МассивИзмерений;
		
	Иначе
		ТекстЗапроса = "";
	КонецЕсли;
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли; 

	ОписаниеРегистра = ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра);

	ИзмерениеФильтраПериод = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("Период");
	Если ИзмерениеФильтраПериод = Неопределено Тогда
		ИзмерениеФильтраПериод = "Период";
	КонецЕсли;
	
	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра + ?(СрезПоследних,"СрезПоследних","СрезПервых");
	КонецЕсли; 
	
	ИмяВТМаксимальныеПериоды = УникальноеИмяТекстаЗапроса("ВТМаксимальныеПериоды" + ИмяРегистра);
	
	ФормироватьСПериодичностьДень = ПараметрыПостроения.ФормироватьСПериодичностьДень
		И ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда;
	
	Если ФормироватьСПериодичностьДень Тогда
		
		Если СрезПоследних Тогда
			
			Если ПараметрыПостроения.ВключаяГраницу Тогда
				ПредставлениеУсловияИзмеренияДатыПериод = "КОНЕЦПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраПериод + ", ДЕНЬ)";	
			Иначе
				ПредставлениеУсловияИзмеренияДатыПериод = "НАЧАЛОПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраПериод + ", ДЕНЬ)";	
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыПостроения.ВключаяГраницу Тогда
				ПредставлениеУсловияИзмеренияДатыПериод = "НАЧАЛОПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраПериод + ", ДЕНЬ)";	
			Иначе
				ПредставлениеУсловияИзмеренияДатыПериод = "КОНЕЦПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраПериод + ", ДЕНЬ)";	
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыПостроения.ВключаяГраницу Тогда
			ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод = "КОНЕЦПЕРИОДА(МаксимальныеПериоды.ЗаданныйПериод, ДЕНЬ)";
		Иначе
			ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод = "НАЧАЛОПЕРИОДА(МаксимальныеПериоды.ЗаданныйПериод, ДЕНЬ)";
		КонецЕсли;
		
	Иначе
		ПредставлениеУсловияИзмеренияДатыПериод = "ИзмеренияДаты." + ИзмерениеФильтраПериод;	
		ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод = "МаксимальныеПериоды.ЗаданныйПериод";
	КонецЕсли;
	
	ТекстУсловийСКД = "{ВЫБРАТЬ
		|	ЗаданныйПериод";
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИзмеренияДаты." + ИзмерениеФильтраПериод + " КАК ЗаданныйПериод";
		
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
		Если ОписаниеРегистра.ИзмеренияФильтра.Найти(Измерение) <> НеОпределено Тогда
			
			ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
			Если ИзмерениеФильтра = Неопределено Тогда
				ИзмерениеФильтра = Измерение;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ",
				|	ИзмеренияДаты." + ИзмерениеФильтра + " КАК " + Измерение;
				
			ТекстУсловийСКД = ТекстУсловийСКД + ",
				|	" + Измерение;
		Иначе
				
			ТекстЗапроса = ТекстЗапроса + ",
				|	РегистрСведений." + Измерение + " КАК " + Измерение;
				
			ТекстУсловийСКД = ТекстУсловийСКД + ",
				|	" + Измерение;
				
		КонецЕсли;
			
	КонецЦикла;
	
	ТекстУсловийСКД = ТекстУсловийСКД + "}";
	
	Если СрезПоследних Тогда
		
		ТекстЗапроса = ТекстЗапроса + ",
			|	МАКСИМУМ(РегистрСведений.Период) КАК Период
			|ПОМЕСТИТЬ " + ИмяВТМаксимальныеПериоды + "
			|" + ТекстУсловийСКД + "
			|ИЗ
			|	" + ОписаниеФильтра.ТаблицаФильтра + " КАК ИзмеренияДаты
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
			|		ПО (РегистрСведений.Период <= " + ПредставлениеУсловияИзмеренияДатыПериод + " ИЛИ ИзмеренияДаты." + ИзмерениеФильтраПериод + " = ДАТАВРЕМЯ(1,1,1,0,0,0))";
			
		Если НЕ ПараметрыПостроения.ВключаяГраницу Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"<=","<");
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + ",
			|	МИНИМУМ(РегистрСведений.Период) КАК Период
			|ПОМЕСТИТЬ " + ИмяВТМаксимальныеПериоды + "
			|" + ТекстУсловийСКД + "
			|ИЗ
			|	" + ОписаниеФильтра.ТаблицаФильтра + " КАК ИзмеренияДаты
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
			|		ПО (РегистрСведений.Период >= " + ПредставлениеУсловияИзмеренияДатыПериод + ")";
			
		Если НЕ ПараметрыПостроения.ВключаяГраницу Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,">=",">");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
		
		ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
		Если ИзмерениеФильтра = Неопределено Тогда
			ИзмерениеФильтра = Измерение;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|			И (РегистрСведений." + Измерение + " = ИзмеренияДаты." + ИзмерениеФильтра + ")";
			
	КонецЦикла;
	
	Если ПараметрыПостроения.Отборы <> Неопределено И ПараметрыПостроения.Отборы.Количество() > 0 Тогда
		
		СчПараметров = 1;
		
		ТекстОтбор = "";
	
		Для Каждого СтруктураОтбора Из ПараметрыПостроения.Отборы Цикл
				
			Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
				ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
			Иначе
				
				ИмяПараметра = ИмяСоздаваемойТаблицы +"_Параметр" + СчПараметров;
				ОписаниеПараметра = "&" + ИмяПараметра;
				Запрос.УстановитьПараметр(ИмяПараметра, СтруктураОтбора.ПравоеЗначение);
				
			КонецЕсли;
			
			Если НЕ СтруктураОтбора.Свойство("ОтносительныйПуть") ИЛИ СтруктураОтбора.ОтносительныйПуть Тогда
				
				ПредставленияЛевогоЗначение = "РегистрСведений." + СтруктураОтбора.ЛевоеЗначение;
				ТекстОтбор = ?(ПустаяСтрока(ТекстОтбор), "	И (", ТекстОтбор + Символы.ПС + "	И ") 
					+ "(" + ПредставленияЛевогоЗначение + " " + СтруктураОтбора.ВидСравнения + " (" + ОписаниеПараметра + "))";
				
			Иначе
					
				ПредставленияЛевогоЗначение = СтруктураОтбора.ЛевоеЗначение;
				ТекстОтбор = ?(ПустаяСтрока(ТекстОтбор), "	И (", ТекстОтбор + Символы.ПС + "	И ") 
					+ "(" + ПредставленияЛевогоЗначение + " " + СтруктураОтбора.ВидСравнения + " " + ОписаниеПараметра + ")";
				
			КонецЕсли;
			
			СчПараметров = СчПараметров + 1;
			
		КонецЦикла;	
		
		ТекстОтбор = ТекстОтбор + ")";
		ТекстЗапроса = ТекстЗапроса + ТекстОтбор;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "}";
	
	Если НЕ ПараметрыПостроения.ВсеЗаписи Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	(НЕ РегистрСведений.Период ЕСТЬ NULL)";
			
	КонецЕсли;
		
	ТекстОтборовСКД = "";
	Для каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
		ТекстОтборовСКД = ?(ПустаяСтрока(ТекстОтборовСКД), "", ТекстОтборовСКД + "," + Символы.ПС) + "	РегистрСведений." + Измерение + ".*";
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОтборовСКД) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|{ГДЕ
			|" + ТекстОтборовСКД + "}";
			
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмеренияДаты." + ИзмерениеФильтраПериод;
		
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
		Если ОписаниеРегистра.ИзмеренияФильтра.Найти(Измерение) <> НеОпределено Тогда
			
			ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
			Если ИзмерениеФильтра = Неопределено Тогда
				ИзмерениеФильтра = Измерение;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ",
				|	ИзмеренияДаты." + ИзмерениеФильтра;
				
		Иначе
				
			ТекстЗапроса = ТекстЗапроса + ",
				|	РегистрСведений." + Измерение;
				
		КонецЕсли;
			
	КонецЦикла;
	
	ТекстУсловийСКД = "{ВЫБРАТЬ
		|	Период,
		|	ПериодЗаписи";

	ТекстЗапроса = ТекстЗапроса + РазделительЗапросов() + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаксимальныеПериоды.ЗаданныйПериод КАК Период,
		|	РегистрСведений.Период КАК ПериодЗаписи";
		
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
		ТекстЗапроса = ТекстЗапроса + ",
			|	МаксимальныеПериоды." + Измерение + " КАК " + Измерение;
			
		ТекстУсловийСКД = ТекстУсловийСКД + ",
			|	" + Измерение;
			
	КонецЦикла;
	
	Если СрезПоследних Тогда
		
		ТекстЗапросаПолей = "";
		Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			
			ТекстЗапросаПолей = ТекстЗапросаПолей + ",
				|	ВЫБОР
				|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
				|				ИЛИ РегистрСведений.ДействуетДо >= " + ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод + " И МаксимальныеПериоды.ЗаданныйПериод <> ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА РегистрСведений." + Ресурс + "
				|		ИНАЧЕ РегистрСведений." + Ресурс + "ПоОкончании
				|	КОНЕЦ КАК " + Ресурс;
			
			ТекстУсловийСКД = ТекстУсловийСКД + ",
				|	" + Ресурс;
		
		КонецЦикла;
		
		Если ПараметрыПостроения.ВключаяГраницу Тогда
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей,">=",">");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПолей;
		
	Иначе
		
		Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			
			ТекстЗапроса = ТекстЗапроса + ",
				|	РегистрСведений." + Ресурс + " КАК " + Ресурс;
				
			ТекстЗапроса = ТекстЗапроса + ",
				|	РегистрСведений." + Ресурс + "ПоОкончании КАК " + Ресурс + "ПоОкончании";
				
			ТекстУсловийСКД = ТекстУсловийСКД + ",
				|	" + Ресурс + ",
				|	" + Ресурс + "ПоОкончании";
		
		КонецЦикла;
			
	КонецЕсли;
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		
		ТекстЗапроса = ТекстЗапроса + ",
			|	РегистрСведений." + Ресурс + " КАК " + Ресурс;
			
		ТекстУсловийСКД = ТекстУсловийСКД + ",
			|	" + Ресурс;
			
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		
		ТекстЗапроса = ТекстЗапроса + ",
			|	РегистрСведений." + Реквизит + " КАК " + Реквизит;
			
		ТекстУсловийСКД = ТекстУсловийСКД + ",
			|	" + Реквизит;
			
	КонецЦикла;
	
	Для Каждого СтандартныйРеквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл
		
		ТекстЗапроса = ТекстЗапроса + ",
			|	РегистрСведений." + СтандартныйРеквизит + " КАК " + СтандартныйРеквизит;
			
		ТекстУсловийСКД = ТекстУсловийСКД + ",
			|	" + СтандартныйРеквизит;
			
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ПОМЕСТИТЬ ВТПредставленияИмяРегистраСрез
		|	" + ТекстУсловийСКД + "}
		|ИЗ
		|	" + ИмяВТМаксимальныеПериоды + " КАК МаксимальныеПериоды
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
		|		ПО (РегистрСведений.Период = МаксимальныеПериоды.Период)";
		
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
		ТекстЗапроса = ТекстЗапроса + "
			|			И (РегистрСведений." + Измерение + " = МаксимальныеПериоды." + Измерение + ")";
			
	КонецЦикла;
		
	ТекстЗапроса = ТекстЗапроса + "}";
	
	ДобавитьВТекстЗапросаПоляИндексирования(ТекстЗапроса, ПараметрыПостроения.ИндексироватьПо);
	
	УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТПредставленияИмяРегистраСрез", ИмяСоздаваемойТаблицы);
	
	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает запрос, формирующий временную таблицу периодов с заданной периодичностью.
//
// Параметры:
//	ОписаниеНачалаИнтервала - Строка, имя параметра в тексте запроса ("&НачалоПериода", "ДАТАВРЕМЯ(2013, 1, 1)").
//							- Дата, начальная дата интервала, за который формируются периоды.
//	ОписаниеОкончанияИнтервала -  Строка, имя параметра в тексте запроса,
//							- Дата, конечная дата интервала, за который формируются периоды.
//	Периодичность - периодичность, на которую будет разбиваться интервал.
//		По умолчанию <МЕСЯЦ>. Может принимать значения:	ГОД, КВАРТАЛ, МЕСЯЦ, ДЕНЬ.
//	ИмяПоляПериод - наименование колонки во временной таблице периодов. 
//		По умолчанию <Период>.
//	ИмяВТ - наименование временной таблицы периодов, по умолчанию <ВТПериоды>.
//	ИспользоватьКонецПериода - булево, необязательный, по умолчанию - Ложь. 
//		Определяет необходимость использовать в качестве значения последнюю секунду периода. 
//		То есть если Истина, то для периодичности месяц, 
//		временная таблица будет заполнена датами конца каждого месяца, 
//		и если ложь, то - датами начала.
//
Функция ЗапросВтПериоды(Знач ОписаниеНачалаИнтервала, Знач ОписаниеОкончанияИнтервала, Периодичность = "МЕСЯЦ", ИмяПоляПериод = "Период", ИмяВТ = "ВТПериоды", ИспользоватьКонецПериода = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	0 КАК Цифра
	|ПОМЕСТИТЬ Цифры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	8
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	9
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &НачалоПериодаИнтервала <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1980, 1, 1), ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС)
	|	КОНЕЦ КАК ИмяПоляПериод
	|ПОМЕСТИТЬ ИмяВТ
	|ИЗ
	|	Цифры КАК Цифры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры10
	|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 9)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры100
	|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 99)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры1000
	|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 999)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры10000
	|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 9999)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры100000
	|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 99999)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НачалоПериодаИнтервала <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС)
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1980, 1, 1), ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС)
	|		КОНЕЦ МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Цифры";
	
	Если ВРег(Периодичность) <> "ГОД"
		И ВРег(Периодичность) <> "КВАРТАЛ"
		И ВРег(Периодичность) <> "МЕСЯЦ"
		И ВРег(Периодичность) <> "ДЕНЬ" Тогда
		
		ВызватьИсключение НСтр("ru='Невозможно сформировать запрос с переданными параметрами.'");
		
	КонецЕсли;
	
	Если ИспользоватьКонецПериода Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НАЧАЛОПЕРИОДА", "КОНЕЦПЕРИОДА");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЧАС", Периодичность);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВТ", "ПОМЕСТИТЬ " + ИмяВТ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ИмяПоляПериод", "КАК " + ИмяПоляПериод);
	
	Если ИспользоватьКонецПериода Тогда
		НачалоПериодаИнтервалаПредставление = "КОНЕЦПЕРИОДА(&НачалоИнтервала, " + ВРег(Периодичность) + ")";
		ОкончаниеПериодаИнтервалаПредставление = "КОНЕЦПЕРИОДА(&ОкончаниеИнтервала, " + ВРег(Периодичность) + ")";
	Иначе
		НачалоПериодаИнтервалаПредставление = "НАЧАЛОПЕРИОДА(&НачалоИнтервала, " + ВРег(Периодичность) + ")";
		ОкончаниеПериодаИнтервалаПредставление = "НАЧАЛОПЕРИОДА(&ОкончаниеИнтервала, " + ВРег(Периодичность) + ")";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоПериодаИнтервала", НачалоПериодаИнтервалаПредставление);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОкончаниеПериодаИнтервала", ОкончаниеПериодаИнтервалаПредставление);
	
	Если ТипЗнч(ОписаниеНачалаИнтервала) = Тип("Строка") Тогда
		НачалоИнтервалаПредставление = ОписаниеНачалаИнтервала;
	Иначе
		НачалоИнтервалаПредставление = "ДАТАВРЕМЯ(" + Формат(ОписаниеНачалаИнтервала, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОкончанияИнтервала) = Тип("Строка") Тогда
		ОкончаниеИнтервалаПредставление = ОписаниеОкончанияИнтервала;
	Иначе
		ОкончаниеИнтервалаПредставление = "ДАТАВРЕМЯ(" + Формат(ОписаниеОкончанияИнтервала, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоИнтервала", НачалоИнтервалаПредставление);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОкончаниеИнтервала", ОкончаниеИнтервалаПредставление);
	
	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос;
		
КонецФункции

Процедура ЗаполнитьОбщиеЗапросы(Объект)
	
	Для Каждого НаборДанных Из Объект.СхемаКомпоновкиДанных.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") И Найти(НаборДанных.Запрос, "ОбщиеЗапросы_") > 0 Тогда
			ТекстЗапроса = НаборДанных.Запрос;
			ЗаменитьОбщийТекстЗапросаОбщиеЗапросы(ТекстЗапроса);
			НаборДанных.Запрос = ТекстЗапроса;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьОбщийТекстЗапросаОбщиеЗапросы(ТекстЗапросаПриемник)
	МассивЗапросов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапросаПриемник, ";");
	СтрокаПОМЕСТИТЬ = "ПОМЕСТИТЬ ОБЩИЕЗАПРОСЫ_";
	РазделителиСлов = РазделителиСловТекстаЗапроса();
	
	Для Каждого ТекстЗапроса Из МассивЗапросов Цикл
		ПозицияСлова = Найти(ВРег(ТекстЗапроса), СтрокаПОМЕСТИТЬ);
		Если ПозицияСлова > 0 Тогда
			ИмяИсточникаДанных = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - ПозицияСлова - СтрДлина(СтрокаПОМЕСТИТЬ) + 1);
			Для НомерСимвола = 1 По СтрДлина(ИмяИсточникаДанных) Цикл
				КодСимвола = КодСимвола(ИмяИсточникаДанных, НомерСимвола);
				Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
					ИмяИсточникаДанных = Лев(ИмяИсточникаДанных, НомерСимвола - 1);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ТекстЗапросаИсточник = ЗарплатаКадрыОбщиеНаборыДанныхПовтИсп.ПолучитьТекстОбщегоЗапроса(ИмяИсточникаДанных);
			ТекстЗапросаПриемник = СтрЗаменить(ТекстЗапросаПриемник, ТекстЗапроса, ТекстЗапросаИсточник);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

Функция ЗапросВТВсеЗаписиРегистраСведений(ИмяВТВсеЗаписиРегистраСведений, ИмяВТСрезПоследних, ИмяВТТаблицаРегистра, КоллекцииПолей, УсловияВТСрезПоследних = "", УсловияВТТаблицаРегистра = "") Экспорт
	
	ПоляСрезПоследних = "";
	ПоляТаблицаРегистра = "";
	УсловияСвязи = "";
	
	Для каждого ИмяПоля Из КоллекцииПолей.Измерения Цикл
		УсловияСвязи = ?(ПустаяСтрока(УсловияСвязи), "", УсловияСвязи + Символы.ПС + "		И ") + "ТаблицаРегистра." + ИмяПоля + " = СрезПоследних." + ИмяПоля;
		ПоляСрезПоследних = ?(ПустаяСтрока(ПоляСрезПоследних), "", ПоляСрезПоследних + "," + Символы.ПС + "	") + "СрезПоследних." + ИмяПоля;
		ПоляТаблицаРегистра = ?(ПустаяСтрока(ПоляТаблицаРегистра), "", ПоляТаблицаРегистра + "," + Символы.ПС + "	") + "ТаблицаРегистра." + ИмяПоля;
	КонецЦикла;
	
	Для каждого ИмяПоля Из КоллекцииПолей.Ресурсы Цикл
		ПоляСрезПоследних = ?(ПустаяСтрока(ПоляСрезПоследних), "", ПоляСрезПоследних + "," + Символы.ПС + "	") + "СрезПоследних." + ИмяПоля;
		ПоляТаблицаРегистра = ?(ПустаяСтрока(ПоляТаблицаРегистра), "", ПоляТаблицаРегистра + "," + Символы.ПС + "	") + "ТаблицаРегистра." + ИмяПоля;
	КонецЦикла;
		
	Для каждого ИмяПоля Из КоллекцииПолей.ВозвратныеРесурсы Цикл
		ПоляСрезПоследних = ?(ПустаяСтрока(ПоляСрезПоследних), "", ПоляСрезПоследних + "," + Символы.ПС + "	") + "СрезПоследних." + ИмяПоля;
		ПоляТаблицаРегистра = ?(ПустаяСтрока(ПоляТаблицаРегистра), "", ПоляТаблицаРегистра + "," + Символы.ПС + "	") + "ТаблицаРегистра." + ИмяПоля;
	КонецЦикла;
		
	Для каждого ИмяПоля Из КоллекцииПолей.Реквизиты Цикл
		ПоляСрезПоследних = ?(ПустаяСтрока(ПоляСрезПоследних), "", ПоляСрезПоследних + "," + Символы.ПС + "	") + "СрезПоследних." + ИмяПоля;
		ПоляТаблицаРегистра = ?(ПустаяСтрока(ПоляТаблицаРегистра), "", ПоляТаблицаРегистра + "," + Символы.ПС + "	") + "ТаблицаРегистра." + ИмяПоля;
	КонецЦикла;
		
	Для каждого ИмяПоля Из КоллекцииПолей.СтандартныеРеквизиты Цикл
		ПоляСрезПоследних = ?(ПустаяСтрока(ПоляСрезПоследних), "", ПоляСрезПоследних + "," + Символы.ПС + "	") + "СрезПоследних." + ИмяПоля;
		ПоляТаблицаРегистра = ?(ПустаяСтрока(ПоляТаблицаРегистра), "", ПоляТаблицаРегистра + "," + Символы.ПС + "	") + "ТаблицаРегистра." + ИмяПоля;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СрезПоследних.Период,
		|	СрезПоследних.ПоляРегистра
		|ПОМЕСТИТЬ ВТВсеЗаписиРегистраСведений
		|ИЗ
		|	ВТСрезПоследних КАК СрезПоследних
		|ГДЕ
		|	&УсловияСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаРегистра.Период,
		|	ТаблицаРегистра.ПоляРегистра
		|ИЗ
		|	ВТТаблицаРегистра КАК ТаблицаРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСрезПоследних КАК СрезПоследних
		|		ПО ТаблицаРегистра.Период = СрезПоследних.Период
		|			И (&УсловияСвязиКлючевыхПолей)
		|ГДЕ
		|	СрезПоследних.Период ЕСТЬ NULL 
		|	И &УсловияТаблицаРегистра";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСрезПоследних", ИмяВТСрезПоследних);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СрезПоследних.ПоляРегистра", ПоляСрезПоследних);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияСрезПоследних", "(" + ?(ПустаяСтрока(УсловияВТСрезПоследних), "Истина", УсловияВТСрезПоследних) + ")");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблицаРегистра", ИмяВТТаблицаРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистра.ПоляРегистра", ПоляТаблицаРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияТаблицаРегистра", "(" + ?(ПустаяСтрока(УсловияВТТаблицаРегистра), "Истина", УсловияВТТаблицаРегистра) + ")");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияСвязиКлючевыхПолей", УсловияСвязи);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТВсеЗаписиРегистраСведений", ?(ПустаяСтрока(ИмяВТВсеЗаписиРегистраСведений), "", "ПОМЕСТИТЬ " + ИмяВТВсеЗаписиРегистраСведений));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

#Область ПроцедурыИФункцииВстраиванияЗапросов

Процедура ЗаменитьПредставленияЗапросов(Объект)
	
	Для каждого НаборДанных Из Объект.СхемаКомпоновкиДанных.НаборыДанных Цикл
	
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") И Найти(НаборДанных.Запрос, "Представления_") > 0 Тогда
			
			ЗаменитьЗапросыКПредставлениямВиртуальныхТаблиц(НаборДанных.Запрос, Объект.СхемаКомпоновкиДанных);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьЗапросыКПредставлениямВиртуальныхТаблиц(ТекстЗапросаПриемник, СхемаКомпоновкиДанных = Неопределено) Экспорт
	
	СоответствиеПараметров = Новый Структура;
	
	МассивЗапросов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапросаПриемник, ";");
	
	Для Каждого ТекстЗапроса Из МассивЗапросов Цикл
		
		ТекстЗапросаВРег = ВРег(ТекстЗапроса);
		
		ПозицияСловаПоместить = Найти(ТекстЗапросаВРег, "ПОМЕСТИТЬ ");
		
		Если ПозицияСловаПоместить > 0 Тогда
			
			ПозицияСловаПредставления = Найти(ТекстЗапросаВРег, "ПРЕДСТАВЛЕНИЯ_");
			
			ЭтоОписаниеПредставления = Ложь;
			
			Если ПозицияСловаПредставления > 0 
				И ПозицияСловаПредставления > ПозицияСловаПоместить Тогда
				
				ЭтоОписаниеПредставления = ПустаяСтрока(Сред(ТекстЗапросаВРег, ПозицияСловаПоместить + СтрДлина("ПОМЕСТИТЬ"), ПозицияСловаПредставления - ПозицияСловаПоместить - СтрДлина("ПОМЕСТИТЬ")));
				
			КонецЕсли;
			
			Если ЭтоОписаниеПредставления Тогда
				
				Запрос = ЗарплатаКадрыОбщиеНаборыДанныхПовтИсп.ПолучитьЗапросПоПредставлению(ТекстЗапроса, СоответствиеПараметров);
					
				Если Запрос <> Неопределено Тогда
						
					ТекстЗапросаИсточник = Запрос.Текст;
					ТекстЗапросаПриемник = СтрЗаменить(ТекстЗапросаПриемник, ТекстЗапроса, ТекстЗапросаИсточник);
					
					Если СхемаКомпоновкиДанных <> Неопределено И Запрос.Параметры.Количество() > 0 Тогда
						
						ЭтоДинамическийСписок = ТипЗнч(СхемаКомпоновкиДанных) = Тип("ДинамическийСписок");
						Для каждого ПараметрЗапроса Из Запрос.Параметры Цикл
							
							Если ЭтоДинамическийСписок Тогда
								КоллекцияПараметров = СхемаКомпоновкиДанных.Параметры.Элементы;
							Иначе
								КоллекцияПараметров = СхемаКомпоновкиДанных.Параметры;
							КонецЕсли;
							
							ПараметрСКД = КоллекцияПараметров.Найти(ПараметрЗапроса.Ключ);
							Если ПараметрСКД = Неопределено Тогда
								ПараметрСКД = КоллекцияПараметров.Добавить();
							КонецЕсли;
							
							Если Не ЗначениеЗаполнено(ПараметрСКД.Значение) Тогда
								
								ПараметрСКД.Значение = ПараметрЗапроса.Значение;
								
								Если ЭтоДинамическийСписок Тогда
									ПараметрСКД.Использование = Истина; 
								Иначе
									
									ПараметрСКД.Имя = ПараметрЗапроса.Ключ;
									ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
									ПараметрСКД.ОграничениеИспользования = Истина;
									ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда; 
									
								КонецЕсли;
								
							КонецЕсли; 
							
						КонецЦикла;
						
					КонецЕсли; 
					
				КонецЕсли;
				
			Иначе
				
				ИмяИсточникаДанных = ПервоеСловоНачинаяСПозицииВТексте(ТекстЗапроса, ПозицияСловаПоместить + СтрДлина("ПОМЕСТИТЬ "));
				СоответствиеПараметров.Вставить(ИмяИсточникаДанных, Лев(ТекстЗапроса, ПозицияСловаПоместить - 1));
				
			КонецЕсли;
			 
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПервоеСловоНачинаяСПозицииВТексте(Текст, Позиция) Экспорт
	
	ПервоеСлово = Прав(Текст, СтрДлина(Текст) - Позиция + 1);
	РазделителиСлов = РазделителиСловТекстаЗапроса();
	
	Для НомерСимвола = 1 По СтрДлина(ПервоеСлово) Цикл
		
		КодСимвола = КодСимвола(ПервоеСлово, НомерСимвола);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
			ПервоеСлово = Лев(ПервоеСлово, НомерСимвола - 1);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПервоеСлово;
	
КонецФункции

Функция МассивПолейЗапроса(ТекстПолейЗапроса) Экспорт
	
	МассивПолейЗапроса = Новый Массив;
	СловоКАК = " КАК ";
	РазделителиСлов = РазделителиСловТекстаЗапроса();
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстПолейЗапроса) Цикл
		
		ИмяИзмерения = СтрПолучитьСтроку(ТекстПолейЗапроса, НомерСтроки);
		
		ПозицияСлова = Найти(ВРег(ИмяИзмерения), СловоКАК);
		Если ПозицияСлова = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ПозицияСлова > 0 Цикл
			ИмяИзмерения = Сред(ИмяИзмерения, ПозицияСлова + СтрДлина(СловоКАК));
			ПозицияСлова = Найти(ВРег(ИмяИзмерения), СловоКАК);
		КонецЦикла;
		
		Для НомерСимвола = 1 По СтрДлина(ИмяИзмерения) Цикл
			КодСимвола = КодСимвола(ИмяИзмерения, НомерСимвола);
			Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
				ИмяИзмерения = Лев(ИмяИзмерения, НомерСимвола - 1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		МассивПолейЗапроса.Добавить(ИмяИзмерения);
		
	КонецЦикла;
	
	Возврат МассивПолейЗапроса;
	
КонецФункции

Функция МассивИменВТИсточниковПараметров(ТекстЗапроса, ИмяИсточникаДанных) Экспорт
	
	МассивИменВТИсточниковПараметров = Новый Массив;
	
	ТекстСИЗ = СокрЛП(Сред(ТекстЗапроса, Найти(ТекстЗапроса, ИмяИсточникаДанных)));
	ПозицияСловаИЗ = Найти(ТекстСИЗ, "ИЗ" + Символы.ПС);
	Если ПозицияСловаИЗ > 0 Тогда
		ПозицияСловаГДЕ = Найти(ТекстСИЗ, "ГДЕ" + Символы.ПС);
		ИменаИсточниковПараметров = СокрЛП(Сред(ТекстСИЗ, ПозицияСловаИЗ + 2, ?(ПозицияСловаГДЕ = 0, СтрДлина(ТекстСИЗ), ПозицияСловаГДЕ - ПозицияСловаИЗ - 2)));
		
		МассивИменВТИсточниковПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаИсточниковПараметров, ",");
		
		Для ИндексЭлемента = 0 По МассивИменВТИсточниковПараметров.Количество() - 1 Цикл
			ИмяВТИсточникДанных = МассивИменВТИсточниковПараметров[ИндексЭлемента];
			ПозицияСловаКАК = Найти(ВРег(ИмяВТИсточникДанных), " КАК ");
			Если ПозицияСловаКАК > 0 Тогда
				ИмяВТИсточникДанных = Лев(ИмяВТИсточникДанных, ПозицияСловаКАК - 1);
			КонецЕсли; 
			МассивИменВТИсточниковПараметров[ИндексЭлемента] = СокрЛП(ИмяВТИсточникДанных);
		КонецЦикла;
	КонецЕсли; 
	
	Возврат МассивИменВТИсточниковПараметров;
	
КонецФункции

Функция ПараметрыЗапроса(ТекстЗапроса, ИмяИсточникаДанных) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	
	ТекстСГДЕ = СокрЛП(Сред(ТекстЗапроса, Найти(ТекстЗапроса, ИмяИсточникаДанных)));
	ПозицияСловаГДЕ = Найти(ТекстСГДЕ, "ГДЕ" + Символы.ПС);
	
	Если ПозицияСловаГДЕ > 0 Тогда
		
		СтрокаПараметров = СокрЛП(Сред(ТекстСГДЕ, ПозицияСловаГДЕ + 3));
		
		МассивСтрокПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПараметров, "И ");
		
		Для ИндексЭлемента = 0 По МассивСтрокПараметров.Количество() - 1 Цикл
			
			ПараметрСтрокой = МассивСтрокПараметров[ИндексЭлемента];
			
			Если СтрЧислоСтрок(ПараметрСтрокой) > 1 Тогда
				
				ПозицияОбъединить = Найти(ПараметрСтрокой, ВРег("ОБЪЕДИНИТЬ"));
				Если ПозицияОбъединить > 0 Тогда
					ПараметрСтрокой = СокрЛП(Лев(ПараметрСтрокой, ПозицияОбъединить - 1));
				КонецЕсли; 
				
			КонецЕсли; 
			
			ПозицияРавно = Найти(ПараметрСтрокой, "=");
			ИмяПараметра = СокрЛП(СтрЗаменить(Лев(ПараметрСтрокой, ПозицияРавно - 1), """", ""));
			ЗначениеПараметра = СокрЛП(СтрЗаменить(Сред(ПараметрСтрокой, ПозицияРавно + 1), """", ""));
			ПараметрыЗапроса.Вставить(ИмяПараметра, ЗначениеПараметра);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция КоллекцияОтборПоПараметрам(ПараметрыЗапроса) Экспорт
	
	Отбор = Новый Массив;
	
	ЛевоеЗначениеСтрока = "";
	ВидСравненияСтрока = "";
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		
		Если Найти(ВРег(Параметр.Ключ), "ЛЕВОЕЗНАЧЕНИЕ") = 1 Тогда
			ЛевоеЗначениеСтрока = Параметр.Значение;
		ИначеЕсли Найти(ВРег(Параметр.Ключ), "ВИДСРАВНЕНИЯ") = 1 Тогда
			ВидСравненияСтрока =  Параметр.Значение;
		ИначеЕсли Найти(ВРег(Параметр.Ключ), "ПРАВОЕЗНАЧЕНИЕ") = 1 Тогда
			
			ПравоеЗначениеСтрока =  Параметр.Значение;
			
			Если Найти(ВРег(ПравоеЗначениеСтрока), "ВЫЧИСЛИТЬ(") Тогда
				Попытка
					ПравоеЗначениеУстанавливаемое = Вычислить(ПравоеЗначениеСтрока);
				Исключение
					ПравоеЗначениеУстанавливаемое = ПравоеЗначениеСтрока;
				КонецПопытки;
			Иначе
				ПравоеЗначениеУстанавливаемое = ПравоеЗначениеСтрока;
			КонецЕсли;
			
			Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", ЛевоеЗначениеСтрока, ВидСравненияСтрока, ПравоеЗначениеУстанавливаемое));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отбор.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Отбор;
	КонецЕсли;
	
КонецФункции

// Возвращает представление параметра текста запроса по имени.
//
// Параметры:
//		ИмяПараметра - Строка
//		ПараметрыЗапроса - Структура, см.ПараметрыЗапроса.
//		УдалитьИзКоллекции - Булево, если истина, после определения значения
//					параметр будет удален из коллекции параметров.
//
// Возвращаемое значение:
//		Строка - представление параметра в тексте запроса
//		Неопределено - если параметра с таким именем не было найдено.
//
Функция ПараметрЗапроса(ИмяПараметра, ПараметрыЗапроса, УдалитьИзКоллекции = Истина) Экспорт
	
	ПредставлениеЗначенияПараметра = Неопределено;
	Если ПараметрыЗапроса.Свойство(ИмяПараметра) Тогда
		
		ПредставлениеЗначенияПараметра = ПараметрыЗапроса[ИмяПараметра];
		Если УдалитьИзКоллекции Тогда
			ПараметрыЗапроса.Удалить(ИмяПараметра);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ПредставлениеЗначенияПараметра;
	
КонецФункции

#КонецОбласти

#Область ПостроениеПредставленийВТИмяРегистра

// Проверят на то, что имя поля начинается со слова "Удалить".
//
// Параметры:
//		ИмяПоля - Строка
//
// Возвращаемое значение:
//		Булево
//
Функция ИмяНеИспользуется(Знач ИмяПоля)
	
	Возврат Найти(Врег(ИмяПоля), ВРег("Удалить")) = 1;
	
КонецФункции

// Добавляет к тексту запроса фрагмент индексирования.
//
// Параметры:
//		ТекстЗапроса - Строка
//		ПоляИндексирования - см. описание параметра ПоляИндексирования,
//				метода ПараметрыПостроенияПредставленияВТИмяРегистра.
//
Процедура ДобавитьВТекстЗапросаПоляИндексирования(ТекстЗапроса, ПоляИндексирования)
	
	Если ПоляИндексирования <> Неопределено Тогда
		
		Если ТипЗнч(ПоляИндексирования) = Тип("Строка") Тогда
			МассивПолейИндексирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляИндексирования);
		Иначе
			МассивПолейИндексирования = ПоляИндексирования;
		КонецЕсли;
		
		Если МассивПолейИндексирования.Количество() > 0 Тогда
			
			ОписаниеПолейИндексирования = "";
			Для каждого ИмяПоляИндекса Из МассивПолейИндексирования Цикл
				ОписаниеПолейИндексирования = ?(ПустаяСтрока(ОписаниеПолейИндексирования), "", ОписаниеПолейИндексирования + "," + Символы.ПС) + Символы.Таб + ИмяПоляИндекса;
			КонецЦикла;
				
			ТекстЗапроса = ТекстЗапроса + "
				|ИНДЕКСИРОВАТЬ ПО
				|" + ОписаниеПолейИндексирования;
			
		КонецЕсли; 
			
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает параметры построения представлений.
// 
// Возвращаемое значение;
//		Структура:
//			* ИндексироватьПо 				- Неопределено, в параметре можно указать.
//											- Строку, содержащую имена полей регистра по которым
//												будет произведено индексирование, перечисленным через запятую.
//											- Массив, содержащий имена полей регистра.
//			* Отборы 						- Массив, описаний отбора (см. процедуру ДобавитьВКоллекциюОтбор).
//			* ФормироватьСПериодичностьДень - Булево, если Истина сведения будут сформированы по последним записям
//												за день (применяется при получении сведений из регистров сведения
//												с периодичностью равной Секунда).
//
Функция ПараметрыПостроенияВТИмяРегистра()
	
	ПараметрыПостроения = Новый Структура;
	ПараметрыПостроения.Вставить("ИндексироватьПо");
	ПараметрыПостроения.Вставить("Отборы", Новый Массив);
	ПараметрыПостроения.Вставить("ФормироватьСПериодичностьДень", Истина);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

Функция РазделителиСловТекстаЗапроса()
	
	Возврат Символы.ПС + " .,;	()/+";
	
КонецФункции

#КонецОбласти

#КонецОбласти
