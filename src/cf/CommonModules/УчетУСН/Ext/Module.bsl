
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

///////////////////////////////////////////////////////////////////////////////
// Определение вида документа платежа

Функция ЕстьАвансыПокупателей(ВидОперации) Экспорт

	ЕстьАвансы = (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);

	Возврат ЕстьАвансы;

КонецФункции

Функция ЕстьПрочиеРасчетыПоДоходам(ВидОперации) Экспорт

	ЕстьРасчетыДоходы = (ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);

	Возврат ЕстьРасчетыДоходы;

КонецФункции

Функция ЕстьПрочиеРасчетыПоРасходам(ВидОперации) Экспорт

	ЕстьРасчетыРасходы = (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
		
	Возврат ЕстьРасчетыРасходы;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Заполнение документов платежа

Процедура УстановитьПатентАванса(ДокументОбъект) Экспорт
	
	Если УчетнаяПолитика.ПрименяетсяУСНПатент(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
		
		Если УчетУСН.ЕстьАвансыПокупателей(ДокументОбъект.ВидОперации) Тогда		
			
			ДокументОбъект.Патент = Справочники.Патенты.ПустаяСсылка();
			
			Для каждого СтрокаПлатеж Из ДокументОбъект.РасшифровкаПлатежа Цикл			
				Если ТипЗнч(СтрокаПлатеж.ПорядокОтраженияАванса) = Тип("СправочникСсылка.Патенты") Тогда				
					// авансы могут быть отражены только по одному патенту, выбор нескольких патентов исключен при проверке заполнения
					ДокументОбъект.Патент = СтрокаПлатеж.ПорядокОтраженияАванса;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
		ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
			СпособУчетаВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата);
			Если НЕ (ДокументОбъект.ВыручкаСНТТ 
				И СпособУчетаВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
				
				ДокументОбъект.Патент = Справочники.Патенты.ПустаяСсылка();
				
			КонецЕсли;
		Иначе
			ДокументОбъект.Патент = Справочники.Патенты.ПустаяСсылка();
		КонецЕсли;
	Иначе
		ДокументОбъект.Патент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПОСТУПЛЕНИЕ РАСХОДОВ УСН

Процедура ПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты, СуммаСторноРасхода, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаРасходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СуммаСторноРасхода) Тогда
		СуммаСторноРасхода = 0;
	КонецЕсли;

	ТоварыПоОплате    = (УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
	РасходыПоОтгрузке = (УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
	МатериалыПоОплате = (УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	ДопРасходыПоОплате = (УчетнаяПолитика.ПорядокПризнанияДопРасходов(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияДопРасходов.ПоОплатеПоставщику);
	ТаможенныеПлатежиПоОплате = (УчетнаяПолитика.ПорядокПризнанияТаможенныхПлатежей(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияТаможенныхПлатежей.ПоОплате);
	ВыделятьНДСУСН = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	ДвиженияРасхода = Движения.РасходыПриУСН;
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаРасходы Цикл

		НомерСтроки     = НомерСтроки + 1;
		ДвижениеРасхода = ДвиженияРасхода.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, Реквизиты);
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, СтрокаТаблицы);

		ДвижениеРасхода.НомерСтрокиДокумента = НомерСтроки;
		ДвижениеРасхода.РасчетныйДокумент    = Реквизиты.Регистратор;

		Если Реквизиты.ЭтоВозврат Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
		ИначеЕсли ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура
					ИЛИ ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		ИначеЕсли ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
			Если ДопРасходыПоОплате Тогда
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			Иначе
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
			КонецЕсли;
		ИначеЕсли ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи Тогда
			Если ТаможенныеПлатежиПоОплате Тогда
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			Иначе
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
			КонецЕсли;
		Иначе
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
		КонецЕсли;

		Если Реквизиты.УчетАгентскогоНДС Тогда

			ДвижениеРасходаНДС = ДвиженияРасхода.Добавить();
			ДвижениеРасходаНДС.Период				= Реквизиты.Период;
			ДвижениеРасходаНДС.Организация			= Реквизиты.Организация;
			ДвижениеРасходаНДС.Валюта 				= Реквизиты.Валюта;
			ДвижениеРасходаНДС.РасчетныйДокумент 	= Реквизиты.Регистратор;
			ДвижениеРасходаНДС.ВидРасхода 			= Перечисления.ВидыРасходовУСН.Налоги;
			ДвижениеРасходаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			ДвижениеРасходаНДС.СчетУчета 			= ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
			ДвижениеРасходаНДС.НомерСтрокиДокумента = НомерСтроки;
			ДвижениеРасходаНДС.ОтражениеВУСН        = ДвижениеРасхода.ОтражениеВУСН;
			ДвижениеРасходаНДС.Сумма                = ДвижениеРасхода.НДС;
			
			ДвижениеРасхода.Сумма = ДвижениеРасхода.Сумма - ДвижениеРасхода.НДС;
			ДвижениеРасхода.НДС = 0;

		КонецЕсли;

		Если Реквизиты.ЭтоВозврат И ДвижениеРасхода.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
			ДвижениеРасхода.НДС = 0;
			РасходыПоОплате = ((ТоварыПоОплате И СтрокаТаблицы.ЭтоТовар) ИЛИ (МатериалыПоОплате И СтрокаТаблицы.ЭтоМатериал));
			Если РасходыПоОплате Тогда // Если по оплате, ...
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
			Иначе // Если по отгрузке, ... (товары или материалы)
				СуммаСторноРасхода = СуммаСторноРасхода + ДвижениеРасхода.Сумма;
			КонецЕсли;
		КонецЕсли;

		Если ВыделятьНДСУСН
			И (СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС)
			И (СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА)
			И (СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи) Тогда
			ДвижениеРасхода.Сумма = ДвижениеРасхода.Сумма - ДвижениеРасхода.НДС;
		КонецЕсли;
		
	КонецЦикла;

	Движения.РасходыПриУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"					// <Дата> - дата документа
	+ "Регистратор,"			// <ДокументСсылка> - документ-регистратор движений
	+ "Организация,"			// <СправочникСсылка.Организации> - из документа
	+ "ДоговорКонтрагента,"		// <СправочникСсылка.ДоговорыКонтрагентов> - из документа
	+ "УчетАгентскогоНДС,"		// <Булево> - из реквизита договора "УчетАгентскогоНДС"
	+ "ЭтоВозврат,"				// <Булево> - является ли документ возвратом?
	+ "Валюта"					// <СправочникСсылка.Валюты> - из реквизита договора "ВалютаВзаиморасчетов"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы содержимого документа:
	СписокОбязательныхКолонок = ""
	+ "ВидРасхода," 		// <ПеречислениеСсылка.ВидыРасходовУСН>
	+ "СтатусыПартийУСН," 	// <ПеречислениеСсылка.СтатусыПартийУСН>
	+ "ЭлементРасхода," 	// <Неопределенно, СправочникСсылка.ОсновныеСредства, //СправочникСсылка.НематериальныеАктивы, //СправочникСсылка.РасходыБудущихПериодов, //СправочникСсылка.Номенклатура, //СправочникСсылка.ФизическиеЛица>
	+ "ЭтоТовар," 			//<Булево> - обычно определяется по счету учета
	+ "ЭтоМатериал,"		//<Булево> - обычно определяется по счету учета
	+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный >
	+ "Партия,"				// <ДокументСсылка.ХХХ >
	+ "Количество,"			// <Число>
	+ "Сумма,"				// <Число> - в валюте взаиморасчетов и всегда с НДС в т.ч. В случае отгрузки и реализации – сумма реализации. В случае возврата – сумма себестоимости.
	+ "НДС,"			    // <Число> - в валюте взаиморасчетов
	+ "ОтражениеВУСН"		// <перечислениеСсылка.ОтраженияВУСН> -
	;
	Параметры.Вставить("ТаблицаРасходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходы, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции
 
Процедура КорректировкаПоступленияПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыКорректировкаПоступленияПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаРасходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
		Возврат;
	КонецЕсли;
	
	// при корректировке поступления приход производим по правилам учетной политики на дату исходного документа
	ТоварыПоОплате    = (УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
	РасходыПоОтгрузке = (УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
	МатериалыПоОплате = (УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	ДопРасходыПоОплате = (УчетнаяПолитика.ПорядокПризнанияДопРасходов(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияДопРасходов.ПоОплатеПоставщику);
	ВыделятьНДСУСН = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	ДвиженияРасхода = Движения.РасходыПриУСН;
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаРасходы Цикл

		НомерСтроки     = НомерСтроки + 1;
		ДвижениеРасхода = ДвиженияРасхода.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, Реквизиты);
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, СтрокаТаблицы);

		ДвижениеРасхода.НомерСтрокиДокумента = НомерСтроки;
		// при корректировке поступления расчетным документом является корректируемый документ
		ДвижениеРасхода.РасчетныйДокумент    = Реквизиты.ДокументПоступленияСсылка;

		Если Реквизиты.ЭтоВозврат Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
		ИначеЕсли (ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура)				
					ИЛИ (ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП) Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		ИначеЕсли (ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы) 
					И ДопРасходыПоОплате Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
		ИначеЕсли (ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы) 
					И (НЕ ДопРасходыПоОплате) Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		Иначе
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
		КонецЕсли;

		Если Реквизиты.УчетАгентскогоНДС Тогда

			ДвижениеРасходаНДС = ДвиженияРасхода.Добавить();
			ДвижениеРасходаНДС.Период				= Реквизиты.Период;
			ДвижениеРасходаНДС.Организация			= Реквизиты.Организация;
			ДвижениеРасходаНДС.Валюта 				= Реквизиты.Валюта;
			ДвижениеРасходаНДС.РасчетныйДокумент 	= Реквизиты.ДокументПоступленияСсылка;
			ДвижениеРасходаНДС.ВидРасхода 			= Перечисления.ВидыРасходовУСН.Налоги;
			ДвижениеРасходаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			ДвижениеРасходаНДС.СчетУчета 			= ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
			ДвижениеРасходаНДС.НомерСтрокиДокумента = НомерСтроки;
			ДвижениеРасходаНДС.ОтражениеВУСН        = ДвижениеРасхода.ОтражениеВУСН;
			ДвижениеРасходаНДС.Сумма                = ДвижениеРасхода.НДС;
			
			ДвижениеРасхода.Сумма = ДвижениеРасхода.Сумма - ДвижениеРасхода.НДС;
			ДвижениеРасхода.НДС = 0;

		КонецЕсли;

		Если Реквизиты.ЭтоВозврат И ДвижениеРасхода.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
			ДвижениеРасхода.НДС = 0;
			РасходыПоОплате = ((ТоварыПоОплате И СтрокаТаблицы.ЭтоТовар) ИЛИ (МатериалыПоОплате И СтрокаТаблицы.ЭтоМатериал));
			Если РасходыПоОплате Тогда // Если по оплате, ...
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
			КонецЕсли;
		КонецЕсли;

		Если ВыделятьНДСУСН И
			(СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаТаблицы <> Перечисления.ВидыРасходовУСН.НМА) Тогда
			ДвижениеРасхода.Сумма = ДвижениеРасхода.Сумма - ДвижениеРасхода.НДС;
		КонецЕсли;
		
	КонецЦикла;

	Движения.РасходыПриУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкаПоступленияПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"					   // <Дата> - дата документа корректировки
	+ "Регистратор,"			   // <ДокументСсылка> - документ-регистратор движений
	+ "Организация,"			   // <СправочникСсылка.Организации> - из документа
	+ "ДоговорКонтрагента,"		   // <СправочникСсылка.ДоговорыКонтрагентов> - из документа
	+ "ДокументПоступленияСсылка," // <ДокументСсылка.ПоступлениеТоваровУслуг> - корректируемый документ
	+ "ДокументПоступленияДата,"   // <Дата> - дата корректируемого документа поступления
	+ "УчетАгентскогоНДС,"		   // <Булево> - из реквизита договора "УчетАгентскогоНДС"
	+ "ЭтоВозврат,"				   // <Булево> - является ли документ возвратом?
	+ "Валюта"					   // <СправочникСсылка.Валюты> - из реквизита договора "ВалютаВзаиморасчетов"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы содержимого документа:
	СписокОбязательныхКолонок = ""
	+ "ВидРасхода," 		// <ПеречислениеСсылка.ВидыРасходовУСН>
	+ "СтатусыПартийУСН," 	// <ПеречислениеСсылка.СтатусыПартийУСН>
	+ "ЭлементРасхода," 	// <Неопределенно, СправочникСсылка.ОсновныеСредства, //СправочникСсылка.НематериальныеАктивы, //СправочникСсылка.РасходыБудущихПериодов, //СправочникСсылка.Номенклатура, //СправочникСсылка.ФизическиеЛица>
	+ "ЭтоТовар," 			//<Булево> - обычно определяется по счету учета
	+ "ЭтоМатериал,"		//<Булево> - обычно определяется по счету учета
	+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный >
	+ "Партия,"				// <ДокументСсылка.ХХХ >
	+ "Количество,"			// <Число>
	+ "Сумма,"				// <Число> - в валюте взаиморасчетов и всегда с НДС в т.ч. В случае отгрузки и реализации – сумма реализации. В случае возврата – сумма себестоимости.
	+ "НДС,"			    // <Число> - в валюте взаиморасчетов
	+ "ОтражениеВУСН"		// <перечислениеСсылка.ОтраженияВУСН> -
	;
	Параметры.Вставить("ТаблицаРасходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходы, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции // ПодготовитьПараметрыКорректировкаПоступленияПоступлениеРасходовУСН()
 
///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ КУДиР УСН

Процедура СформироватьДвиженияКнигаУчетаДоходовИРасходов(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыКнигаУчетаДоходовИРасходов(ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	УСН	= УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период) 
			ИЛИ УчетнаяПолитика.ПрименяетсяУСНДоходы(Реквизиты.Организация, Реквизиты.Период);
			
	Если НЕ УСН Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаКниги  = Движения.КнигаУчетаДоходовИРасходов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаКниги, Реквизиты);
	СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Реквизиты.Регистратор);
    СтрокаКниги.Содержание = Реквизиты.Содержание + Реквизиты.НомерГТД;
	
	Движения.КнигаУчетаДоходовИРасходов.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыКнигаУчетаДоходовИРасходов(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"		 // <Дата> - дата документа
	+ "Регистратор," // <ДокументСсылка> - документ-регистратор движений
	+ "Организация," // <СправочникСсылка.Организации> - из документа
	+ "Графа4,"		 // <Число,15,2>
	+ "Графа5,"		 // <Число,15,2>
	+ "Графа6,"		 // <Число,15,2>
	+ "Графа7,"		 // <Число,15,2>
	+ "Содержание,"  // <Строка>
	+ "НомерГТД,"    // <СправочникСсылка.НомераГТД>
	+ "НДС"			 // <Число,15,2>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// КОРРЕКТИРОВКА ПОСТУПЛЕНИЯ - ОТРАЖЕНИЕ В УСН

Функция ПодготовитьПараметрыКорректировкаПоступленияУСН(ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"						      // <Дата> - дата документа
	+ "Регистратор,"			          // <ДокументСсылка> - документ-регистратор движений
	+ "Организация,"				      // <СправочникСсылка.Организации> - из документа
	+ "ПрименяетсяУСН,"                   // <Булево> из учетной политики на дату корректируемого документа
	+ "ПрименяетсяУСНДоходыМинусРасходы," // <Булево> из учетной политики на дату корректируемого документа
	+ "ПорядокПризнанияРасходовПоНДС,"    // <ПеречислениеСсылка.ПорядокПризнанияРасходовПоНДС> из учетной политики на дату корректируемого документа
	+ "ЭтоКорректировкаПрошлогоПериода,"  // <Булево> признак, что корректируется документ прошлого года
	+ "Контрагент,"					      // <СправочникСсылка.Контрагенты> - из документа
	+ "ДоговорКонтрагента,"			      // <СправочникСсылка.ДоговорыКонтрагентов> - из документа
	+ "ДокументПоступленияСсылка,"        // <ДокументСсылка.ПоступлениеТоваровУслуг> - корректируемый документ
	+ "ДокументПоступленияДата,"          // <Дата> - дата корректироемого документа
	+ "Валюта,"                           // <СправочникСсылка.Валюты> - из реквизита договора "ВалютаВзаиморасчетов"
	+ "КурсДокумента,"                    // <Число(10, 4)> - курс валюты корректируемого документа
	+ "КратностьДокумента,"               // <Число(10, 0)> - кратность  корректируемого документа
	+ "УчетАгентскогоНДС"			      // <Булево> - из реквизита договора "УчетАгентскогоНДС"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// КОРРЕКТИРОВКА РЕАЛИЗАЦИИ - ОТРАЖЕНИЕ В УСН

Функция ПодготовитьПараметрыКорректировкаРеализацииУСН(ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"						      // <Дата> - дата документа
	+ "Регистратор,"			          // <ДокументСсылка> - документ-регистратор движений
	+ "Организация,"				      // <СправочникСсылка.Организации> - из документа
	+ "ПрименяетсяУСН,"                   // <Булево> из учетной политики на дату корректируемого документа
	+ "ПрименяетсяУСНДоходыМинусРасходы," // <Булево> из учетной политики на дату корректируемого документа
	+ "ПорядокПризнанияРасходовПоНДС,"    // <ПеречислениеСсылка.ПорядокПризнанияРасходовПоНДС> из учетной политики на дату корректируемого документа
	+ "ЭтоКорректировкаПрошлогоПериода,"  // <Булево> признак, что корректируется документ прошлого года
	+ "Контрагент,"					      // <СправочникСсылка.Контрагенты> - из документа
	+ "ДоговорКонтрагента,"			      // <СправочникСсылка.ДоговорыКонтрагентов> - из документа
	+ "ДокументРеализацииСсылка,"        // <ДокументСсылка.РеализацияТоваровУслуг> - корректируемый документ
	+ "ДокументРеализацииДата,"          // <Дата> - дата корректироемого документа
	+ "Валюта,"                           // <СправочникСсылка.Валюты> - из реквизита договора "ВалютаВзаиморасчетов"
	+ "СуммаВключаетНДС"			      // <Булево> - из реквизита документа "СуммаВключаетНДС"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));	
		
	Возврат Параметры;

КонецФункции // ПодготовитьПараметрыКорректировкаРеализацииУСН()

///////////////////////////////////////////////////////////////////////////////
// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ

Процедура СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаПереоценка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты	= Параметры.Реквизиты[0];
	
	ТаблицаПереоценка	= Параметры.ТаблицаПереоценка;
	
	ПрименяетсяУСН						= УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	ПрименяетсяУСНДоходы				= УчетнаяПолитика.ПрименяетсяУСНДоходы(Реквизиты.Организация, Реквизиты.Период);
	ПрименяетсяУСНДоходыМинусРасходы	= УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ ПрименяетсяУСН Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПереоценка.Свернуть("ВалютаПредставление, Счет, СчетПредставление, СчетНаименование, НомерБанковскогоСчета", "СуммаПереоценки");
	
	// с 2013 доходы и расходы от переоценки валютных ценностей при исчислении УСН не определяются и не учитываются
	Если Реквизиты.Период >= '20130101' Тогда
		Возврат;
	КонецЕсли;
	
	СчетаПереоценкиУСН	= БухгалтерскийУчетВызовСервераПовтИсп.МассивСчетовПереоценкиУСН();
	РеквизитыПервичногоДокумента	= НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Реквизиты.Регистратор);
	
	Для Каждого СтрокаПереоценка Из ТаблицаПереоценка Цикл
		
		Если СчетаПереоценкиУСН.Найти(СтрокаПереоценка.Счет) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПереоценка.СуммаПереоценки > 0 Тогда
			
			Если НЕ ПустаяСтрока(СтрокаПереоценка.НомерБанковскогоСчета) Тогда
				Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Доход от переоценки %1 на счете %2, расчетный счет № ""%3""'"),
					СтрокаПереоценка.ВалютаПредставление, СтрокаПереоценка.СчетПредставление, СтрокаПереоценка.НомерБанковскогоСчета);
			Иначе
				Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Доход от переоценки %1 на счете %2 ""%3""'"),
					СтрокаПереоценка.ВалютаПредставление, СтрокаПереоценка.СчетПредставление, СтрокаПереоценка.СчетНаименование);
			КонецЕсли;
			
			ЗаписьКУДиР	= Движения.КнигаУчетаДоходовИРасходов.Добавить();
			ЗаписьКУДиР.Период			= Реквизиты.Период;
			ЗаписьКУДиР.Активность		= Истина;
			ЗаписьКУДиР.Организация		= Реквизиты.Организация;
			ЗаписьКУДиР.Графа4			= СтрокаПереоценка.СуммаПереоценки;
			ЗаписьКУДиР.Графа5			= СтрокаПереоценка.СуммаПереоценки;
			ЗаписьКУДиР.Графа6			= 0;
			ЗаписьКУДиР.Графа7			= 0;
			ЗаписьКУДиР.НДС				= 0;
			ЗаписьКУДиР.ЭтапПроведения	=-1;
			ЗаписьКУДиР.Содержание		= Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента	= РеквизитыПервичногоДокумента;
			
		ИначеЕсли СтрокаПереоценка.СуммаПереоценки < 0 И ПрименяетсяУСНДоходыМинусРасходы Тогда
			
			Если НЕ ПустаяСтрока(СтрокаПереоценка.НомерБанковскогоСчета) Тогда
				Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Расходы от переоценки %1 на счете %2, расчетный счет № ""%3""'"),
					СтрокаПереоценка.ВалютаПредставление, СтрокаПереоценка.СчетПредставление, СтрокаПереоценка.НомерБанковскогоСчета);
			Иначе
				Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Расходы от переоценки %1 на счете %2 ""%3""'"),
					СтрокаПереоценка.ВалютаПредставление, СтрокаПереоценка.СчетПредставление, СтрокаПереоценка.СчетНаименование);
			КонецЕсли;
			
			ЗаписьКУДиР	= Движения.КнигаУчетаДоходовИРасходов.Добавить();
			ЗаписьКУДиР.Период			= Реквизиты.Период;
			ЗаписьКУДиР.Активность		= Истина;
			ЗаписьКУДиР.Организация		= Реквизиты.Организация;
			ЗаписьКУДиР.Графа4			= 0;
			ЗаписьКУДиР.Графа5			= 0;
			ЗаписьКУДиР.Графа6			=-СтрокаПереоценка.СуммаПереоценки;
			ЗаписьКУДиР.Графа7			=-СтрокаПереоценка.СуммаПереоценки;
			ЗаписьКУДиР.НДС				= 0;
			ЗаписьКУДиР.ЭтапПроведения	=-1;
			ЗаписьКУДиР.Содержание		= Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента	= РеквизитыПервичногоДокумента;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.КнигаУчетаДоходовИРасходов.Записывать	= Истина;
		
КонецПроцедуры

Функция ПодготовитьПараметрыПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"				// <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"		// <ДокументСсылка...> - документ, записывающий движения в регистры
	+ "Организация"			// <СправочникСсылка.Организации> - организация документа
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "Счет,"					// <ПланСчетовСсылка.Хозрасчетный> - переоцениваемый счет
	+ "СчетПредставление,"		// <Строка> -код  переоцениваемого счета
	+ "СчетНаименование,"		// <Строка> - наименование переоцениваемого счета
	+ "Субконто1,"				// <> - значение аналитики переоцениваемого счета
	+ "Субконто2,"				// <> - значение аналитики переоцениваемого счета
	+ "Субконто3,"				// <> - значение аналитики переоцениваемого счета
	+ "Валюта,"					// <СправочникСсылка.Валюты> - переоцениваемая валюта
	+ "ВалютаПредставление,"	// <Строка> - представление перецениваемой валюты
	+ "НомерБанковскогоСчета,"	// <Строка> - номер банковского счета (Субконто1)
	+ "СуммаПереоценки"			// <Число(15,2)> - сумма переоценки
	;
	Параметры.Вставить("ТаблицаПереоценка", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВалютныхОстатков, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТИ

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2009Кв1(ПоказателиОтчета) Экспорт
	
	// Раздел 1
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005003", Истина, Ложь);
	
	// Раздел 2
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020023003", Истина, Ложь);
	//РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020026003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020028003", Истина, Ложь);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2014Кв1(ПоказателиОтчета) Экспорт

	// Раздел 2.1
	
	// признак налогоплательщика
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210010203", Истина, Ложь);
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011303", Истина, Ложь);
	
	// расходы, уменьшающие налог
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014303", Истина, Ложь);
	
	// Раздел 2.2
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021303", Истина, Ложь);
	
	// расходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022303", Истина, Ложь);
	
	// ставка налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026303", Истина, Ложь);
	
	// убытки прошлых лет
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220023003", Истина, Ложь);

КонецПроцедуры

Процедура ЗаполнитьОтчетУСНФормаОтчета2009Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.Организация,
											"РегистрацияВНалоговомОргане, КодНалоговогоОргана, ЮридическоеФизическоеЛицо");
	РегистрацияВНалоговомОргане = РеквизитыОрганизации.РегистрацияВНалоговомОргане;
	КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "Код");		
			
	Ставка = Контейнер.Раздел2.П000020020103;
	Раздел1 = Контейнер.Раздел1;
	Раздел2 = Контейнер.Раздел2;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация",           ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("парамНачалоГода",            НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&парамНачалоГода, &парамКонецОтчетногоПериода, , Организация = &парамОрганизация) КАК КнигаУчетаДоходовИРасходовОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Доходы = 0;
	Расходы = 0;
	Пока Выборка.Следующий() Цикл
		Доходы = Доходы + ?(Выборка.Графа5Оборот = Null, 0, Выборка.Графа5Оборот);
		Расходы = Расходы + ?(Выборка.Графа7Оборот = Null, 0, Выборка.Графа7Оборот);
	КонецЦикла;
	
	ПрименяетсяУСНДоходы = Ложь;
	 		
	// Учтем возможные сценарии:
	// 1. Единственная запись в учетной политике организации введена не с начала отчетного года.
	// 2. В течение года организация утратила право на применение УСН.	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|			&парамКонецОтчетногоПериода,
	|			Организация = &парамОрганизация
	|				И ПрименяетсяУСН) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ПрименяетсяУСНДоходы = ВыборкаДетальныеЗаписи.ПрименяетсяУСНДоходы;	
	КонецЕсли;
	
	Если ПрименяетсяУСНДоходы Тогда // Объект налогообложения "Доходы"
		Раздел2.П000020021003 = Доходы;
		Раздел2.П000020022003 = 0;
		
		ВзносыПФ = 0;
		
		Если Год(ПараметрыОтчета.мДатаКонцаПериодаОтчета) >= 2013 Тогда
			
			// взносы и иные выплаты, уменьшающие сумму налога, с 2013 г. отражаются в 4 разделе документа "ЗаписьКУДиР"
			
			ДатаНачалоГода = НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			ДатаКонецГода  = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			
			ЭтоИПБезРаботников = Ложь;
			
			Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				
				// для ИП - проверим, производились ли выплаты работникам и прочим физлицам (письмо Минфина РФ от 21 мая 2013 г. N 03-11-11/17926)
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ХозрасчетныйОбороты.Организация КАК Организация
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоГода, &КонецОтчетногоПериода, , Счет = &СчетЗарплаты, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
				|ГДЕ
				|	ХозрасчетныйОбороты.СуммаОборотКт <> 0
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ХозрасчетныйОбороты.Организация
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Обороты(
				|			&НачалоГода,
				|			&КонецОтчетногоПериода,
				|			,
				|			Счет В (&СчетаВзносов),
				|			&ВидСубконтоВидыПлатежей,
				|			Организация = &Организация
				|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
				|			,
				|			) КАК ХозрасчетныйОбороты
				|ГДЕ
				|	ХозрасчетныйОбороты.СуммаОборотКт <> 0"
				;
				
				Запрос.УстановитьПараметр("Организация",             ПараметрыОтчета.Организация);
				Запрос.УстановитьПараметр("НачалоГода",              ДатаНачалоГода);
				Запрос.УстановитьПараметр("КонецОтчетногоПериода",   ДатаКонецГода);
				Запрос.УстановитьПараметр("СчетЗарплаты",            ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
				Запрос.УстановитьПараметр("ВидСубконтоВидыПлатежей", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
				
				СчетаВзносов = Новый Массив;
				СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх);	// 69.02.1 - до 2014 года
				СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);	// 69.02.2 - до 2014 года
				СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС);	// 69.02.7 - с 2014 года
				
				Запрос.УстановитьПараметр("СчетаВзносов", СчетаВзносов);
				
				Результат = Запрос.Выполнить();
				
				ЭтоИПБезРаботников = Результат.Пустой();
				
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация",           ПараметрыОтчета.Организация);
			Запрос.УстановитьПараметр("НачалоГода",            ДатаНачалоГода);
			Запрос.УстановитьПараметр("КонецОтчетногоПериода", ДатаКонецГода);
			Запрос.УстановитьПараметр("ЭтоИПБезРаботников",    ЭтоИПБезРаботников);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(КнигаРаздел4.ПФРОборот + КнигаРаздел4.ФОМСОборот + ВЫБОР
			|				КОГДА &ЭтоИПБезРаботников
			|					ТОГДА 0
			|				ИНАЧЕ КнигаРаздел4.ФССОборот + КнигаРаздел4.ФСС_НСОборот + КнигаРаздел4.БольничныеОборот + КнигаРаздел4.ДобровольноеСтрахованиеОборот
			|			КОНЕЦ), 0) КАК СуммаКУменьшениюНалога
			|ИЗ
			|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоГода, &КонецОтчетногоПериода, , Организация = &Организация) КАК КнигаРаздел4";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ВзносыПФ = Выборка.СуммаКУменьшениюНалога;
			
			Строка080 = Доходы * Ставка / 100;
			Если ЭтоИПБезРаботников Тогда
				// Для ИП, не производивших выплаты работникам и прочим физлицам, ограничение в 50% не действует (Письмо Минфина от 02.04.2013 N 03-11-09/10547)
				ВзносыПФ = Мин(Строка080, ВзносыПФ);
			Иначе
				ВзносыПФ = Мин((Строка080 - 0.5 * Строка080), ВзносыПФ);
			КонецЕсли;
			
		Иначе
			// до 2012 года включительно - старый порядок заполнения
			НачДатаОплаты = НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета) + 15*86400;
			КонДатаОплаты = КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета) + 15*86400;
			
			Счета = Новый Массив;
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх);
			
			Если ПараметрыОтчета.мДатаКонцаПериодаОтчета > '20100101' Тогда
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ФСС);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ФФОМС);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ТФОМС);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамОрганизация", 	ПараметрыОтчета.Организация);
			Запрос.УстановитьПараметр("парамНачалоГода", 	НачДатаОплаты);
			Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонДатаОплаты);
			Запрос.УстановитьПараметр("Счета", Счета);
			Запрос.Текст =                                     
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
			|			&парамНачалоГода,
			|			&парамКонецОтчетногоПериода,
			|			,
			|			,
			|			Счет В (&Счета),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
			|				И Организация = &парамОрганизация) КАК ХозрасчетныйОстаткиИОбороты";
			
			Выборка = Запрос.Выполнить().Выбрать();
			ВзносыПФ = 0;
			Пока Выборка.Следующий() Цикл
				ВзносыПФ = ВзносыПФ + ?(Выборка.СуммаНачальныйОстатокДт = Null, 0, Выборка.СуммаНачальныйОстатокДт);
				ВзносыПФ = ВзносыПФ + ?(Выборка.СуммаОборотДт = Null, 0, Выборка.СуммаОборотДт);
				ВзносыПФ = ВзносыПФ - ?(Выборка.СуммаКонечныйОстатокДт = Null, 0, Выборка.СуммаКонечныйОстатокДт);
			КонецЦикла;
			
			Строка080 = Доходы * Ставка / 100;
			ВзносыПФ = Мин((Строка080 - 0.5 * Строка080), ВзносыПФ);
			
			// взносы по стоимости страхового года
			Счета = Новый Массив;
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_Страх_СтраховойГод);
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_Нак_СтраховойГод);
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
			
			Запрос.УстановитьПараметр("Счета", Счета);
			Запрос.Текст =                                     
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
			|			&парамНачалоГода,
			|			&парамКонецОтчетногоПериода,
			|			,
			|			,
			|			Счет В (&Счета),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
			|				И Организация = &парамОрганизация) КАК ХозрасчетныйОстаткиИОбороты";
			
			Выборка = Запрос.Выполнить().Выбрать();
			ИПВзносыПФ = 0;
			Пока Выборка.Следующий() Цикл
				ИПВзносыПФ = ИПВзносыПФ + ?(Выборка.СуммаНачальныйОстатокДт = Null, 0, Выборка.СуммаНачальныйОстатокДт);
				ИПВзносыПФ = ИПВзносыПФ + ?(Выборка.СуммаОборотДт = Null, 0, Выборка.СуммаОборотДт);
				ИПВзносыПФ = ИПВзносыПФ - ?(Выборка.СуммаКонечныйОстатокДт = Null, 0, Выборка.СуммаКонечныйОстатокДт);
			КонецЦикла;
			
			Если ИПВзносыПФ <> 0 Тогда
				ВзносыПФ = ВзносыПФ + ИПВзносыПФ;
				Если ПараметрыОтчета.мДатаКонцаПериодаОтчета > '20120101' Тогда					
					ВзносыПФ = Мин(Строка080, ВзносыПФ);
				Иначе
					ВзносыПФ = Мин((Строка080 - 0.5 * Строка080), ВзносыПФ);
				КонецЕсли;					
			КонецЕсли;
			
		КонецЕсли;
		
		Раздел2.П000020028003 = ВзносыПФ;
		
	Иначе // Объект налогообложения "Доходы минус расходы"
		
		УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(ПараметрыОтчета.Организация,
			НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета), КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
		
		СуммаНеПеренесенныхУбытков       = УбыткиПрошлыхЛет.ПеренесенныеУбытки;
		УбытокОтУплатыМинимальногоНалога = УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
		
		НалоговаяБазаТекПериод  = Доходы - Расходы - УбытокОтУплатыМинимальногоНалога;
		УменьшениеНалоговойБазы = ?(НалоговаяБазаТекПериод > 0, Мин(НалоговаяБазаТекПериод, СуммаНеПеренесенныхУбытков), 0);
		
		Раздел2.П000020021003 = Доходы;
		Раздел2.П000020022003 = Расходы + УбытокОтУплатыМинимальногоНалога;
		Раздел2.П000020023003 = УменьшениеНалоговойБазы;
		Раздел2.П000020028003 = 0;
		
	КонецЕсли;
	
	// заполним авансовые платежи
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоГода",   НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(ДобавитьМесяц(ПараметрыОтчета.мДатаКонцаПериодаОтчета, -3)));
	
	Запрос.УстановитьПараметр("СчетОтраженияНалога",  ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД); // Дт 99.01.1
	Запрос.УстановитьПараметр("СчетНачисленияНалога", ПланыСчетов.Хозрасчетный.ЕНприУСН); // Кт 68.12

	ВидыПлатежей = Новый Массив;
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", ВидыПлатежей);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК АвансовыйПлатеж,
	|	КВАРТАЛ(ХозрасчетныйОборотыДтКт.Период) КАК НомерКвартала
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоГода,
	|			&КонецПериода,
	|			Квартал,
	|			СчетДт = &СчетОтраженияНалога,
	|			,
	|			СчетКт = &СчетНачисленияНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала"
	;
	
	АвансовыеПлатежи = Запрос.Выполнить().Выгрузить();
	
	ПлатежиНарастающимИтогом = 0;
	
	Для НомерКвартала = 1 По 3 Цикл
		
		СтрокаПлатежа = АвансовыеПлатежи.Найти(НомерКвартала, "НомерКвартала");
		Если СтрокаПлатежа <> Неопределено Тогда
			ПлатежиНарастающимИтогом = ПлатежиНарастающимИтогом + СтрокаПлатежа.АвансовыйПлатеж;
		КонецЕсли;
		
		НомерГрафы = "П00001000"+ (НомерКвартала + 2) + "003";
		Раздел1[НомерГрафы] = ПлатежиНарастающимИтогом;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтчетУСНФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер) Экспорт

	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;

	НачалоПериода       = НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	КонецПериода        = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецПериодаГраница = Новый Граница(КонецПериода, ВидГраницы.Включая);

	ПрименяетсяУСНДоходы = Ложь;

	// Учтем возможные сценарии:
	// 1. Единственная запись в учетной политике организации введена не с начала отчетного года.
	// 2. В течение года организация утратила право на применение УСН.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",           ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", КонецПериода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|			&КонецОтчетногоПериода,
	|			Организация = &Организация
	|				И ПрименяетсяУСН) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПрименяетсяУСНДоходы = Выборка.ПрименяетсяУСНДоходы;
	КонецЕсли;
	
	ЭтоИПБезВыплатФизлицам = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация)
		И НЕ РегламентированнаяОтчетностьПереопределяемый.ИПИспользуетТрудНаемныхРаботников(ПараметрыОтчета.Организация);

	// периоды и ставки налога для поквартальных расчетов
	ДанныеПериодов = Новый ТаблицаЗначений;
	ДанныеПериодов.Колонки.Добавить("НомерКвартала", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	ДанныеПериодов.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеПериодов.Колонки.Добавить("СтавкаНалога",  ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));

	Для НомерКвартала = 1 По 4 Цикл
		
		ДатаНачалаКвартала = НачалоКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
		СтрокаПериода = ДанныеПериодов.Добавить();
		СтрокаПериода.НомерКвартала = НомерКвартала;
		СтрокаПериода.Период        = ДатаНачалаКвартала;
		
		Если ПрименяетсяУСНДоходы Тогда
			СтрокаПериода.СтавкаНалога = 6;
		Иначе
			ИмяЯчейки = "П000220026" + (НомерКвартала - 1) + "03";
			СтавкаИзДекларации = Контейнер.Раздел22[ИмяЯчейки];
			Если ЗначениеЗаполнено(СтавкаИзДекларации) Тогда
				СтрокаПериода.СтавкаНалога = СтавкаИзДекларации;
			Иначе
				ДатаОкончанияКвартала = КонецКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
				СтавкаИзУП = УчетнаяПолитика.СтавкаНалогаУСН(ПараметрыОтчета.Организация, ДатаОкончанияКвартала);
				Контейнер.Раздел22[ИмяЯчейки] = СтавкаИзУП;
				СтрокаПериода.СтавкаНалога = СтавкаИзУП;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// показатели налоговой базы по данным ИБ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("КонецПериодаГраница", КонецПериодаГраница);
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДанныеПериодов",      ДанныеПериодов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеПериодов.Период КАК Период,
	|	ДанныеПериодов.НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ДанныеПериодов КАК ДанныеПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.НомерКвартала,
	|	ВТ_Периоды.Период КАК Период,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот, 0) КАК Доходы,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот, 0) КАК Расходы
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|		ПО (ВТ_Периоды.Период = НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если ПрименяетсяУСНДоходы Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
		|	ВТ_Периоды.Период,
		|	ЕСТЬNULL(ВложенныйЗапрос.ПФР, 0) КАК ПФР,
		|	ЕСТЬNULL(ВложенныйЗапрос.ФСС, 0) КАК ФСС,
		|	ЕСТЬNULL(ВложенныйЗапрос.ФОМС, 0) КАК ФОМС,
		|	ЕСТЬNULL(ВложенныйЗапрос.ФСС_НС, 0) КАК ФСС_НС,
		|	ЕСТЬNULL(ВложенныйЗапрос.Больничные, 0) КАК Больничные,
		|	ЕСТЬNULL(ВложенныйЗапрос.ДобровольноеСтрахование, 0) КАК ДобровольноеСтрахование
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НАЧАЛОПЕРИОДА(КнигаРаздел4.Период, КВАРТАЛ) КАК Период,
		|			СУММА(КнигаРаздел4.ПФРОборот) КАК ПФР,
		|			СУММА(КнигаРаздел4.ФССОборот) КАК ФСС,
		|			СУММА(КнигаРаздел4.ФОМСОборот) КАК ФОМС,
		|			СУММА(КнигаРаздел4.ФСС_НСОборот) КАК ФСС_НС,
		|			СУММА(КнигаРаздел4.БольничныеОборот) КАК Больничные,
		|			СУММА(КнигаРаздел4.ДобровольноеСтрахованиеОборот) КАК ДобровольноеСтрахование
		|		ИЗ
		|			РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаРаздел4
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НАЧАЛОПЕРИОДА(КнигаРаздел4.Период, КВАРТАЛ)) КАК ВложенныйЗапрос
		|		ПО ВТ_Периоды.Период = ВложенныйЗапрос.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерКвартала"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапросаНалоговаяБаза = Запрос.ВыполнитьПакет();

	УбыткиПрошлыхЛет = Неопределено;
	Если НЕ ПрименяетсяУСНДоходы Тогда
		УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	КонецЕсли;
	
	// заполнение показателей отчета
	
	ИтогоДоходы  = 0;
	ИтогоРасходы = 0;
	ИтогоРасходыУменьшающиеНалог = 0;
	
	ТаблицаДоходыРасходы = РезультатЗапросаНалоговаяБаза[1].Выгрузить();
	
	Если ПрименяетсяУСНДоходы Тогда // объект налогообложения "доходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел21;
		
		КоэффМаксУменьшенияНалога = ?(ЭтоИПБезВыплатФизлицам, 1, 0.5);
		ЗаполняемыйРаздел["П000210010203"] = ?(ЭтоИПБезВыплатФизлицам, "2", "1");
		
		ТаблицаРасходыУменьшающиеНалог = РезультатЗапросаНалоговаяБаза[2].Выгрузить();
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
			ИтогоДоходы   = ИтогоДоходы + СтрокаДоходов.Доходы;
			
			СтрокаРасходовУменьшающихНалог = ТаблицаРасходыУменьшающиеНалог[СтрокаПериода.НомерКвартала-1];
			ИтогоРасходыУменьшающиеНалог   = ИтогоРасходыУменьшающиеНалог
				+ СтрокаРасходовУменьшающихНалог.ПФР + СтрокаРасходовУменьшающихНалог.ФОМС
				+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалог.ФСС + СтрокаРасходовУменьшающихНалог.ФСС_НС
					+ СтрокаРасходовУменьшающихНалог.Больничные + СтрокаРасходовУменьшающихНалог.ДобровольноеСтрахование);
				
			НалогОтБазы = ИтогоДоходы*СтрокаПериода.СтавкаНалога/100;
			УменьшениеНалога = Мин(НалогОтБазы*КоэффМаксУменьшенияНалога, ИтогоРасходыУменьшающиеНалог);
				
			ЗаполняемыйРаздел["П000210011" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000210014" + ИдКвартала + "03"] = УменьшениеНалога;
			
		КонецЦикла;
		
	Иначе // объект налогообложения "доходы минус расходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел22;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходовРасходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
		
			ИтогоДоходы  = ИтогоДоходы + СтрокаДоходовРасходов.Доходы;
			ИтогоРасходы = ИтогоРасходы + СтрокаДоходовРасходов.Расходы;
			
			// в последнем квартела года учтем перенесенные убытки прошлых лет
			Если СтрокаПериода.НомерКвартала = 4 Тогда
				ИтогоРасходы = ИтогоРасходы + УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
				НалоговаяБаза  = ИтогоДоходы - ИтогоРасходы;
				УменьшениеНалоговойБазы = Макс(0, Мин(НалоговаяБаза, УбыткиПрошлыхЛет.ПеренесенныеУбытки));
				ЗаполняемыйРаздел["П000220023003"] = УменьшениеНалоговойБазы;
			КонецЕсли;
			
			ЗаполняемыйРаздел["П000220021" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000220022" + ИдКвартала + "03"] = ИтогоРасходы;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ ВЫПОЛНЕНИЯ ОПЕРАЦИЙ ПО ПЕРЕХОДУ НА УСН

Процедура ОтразитьВыполнениеОперацииПереходаНаУСН(СтруктураПараметров, ФиксироватьУстаревшие = Ложь, Отказ = Ложь) Экспорт

	Если Отказ Тогда			
		Возврат;
	КонецЕсли; 
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Набор = РегистрыСведений.ВыполнениеОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
	
	Набор.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации);
	Набор.Отбор.Организация.Установить(СтруктураПараметров.Организация);
	Набор.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
	Набор.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);	
	
	Запись = Набор.Добавить();
	Запись.Активность          = Истина;
	Запись.ВидОперации         = СтруктураПараметров.ВидОперации;
	Запись.Организация         = СтруктураПараметров.Организация;
	Запись.ДатаПерехода        = СтруктураПараметров.ДатаПерехода;
	Запись.НаправлениеПерехода = СтруктураПараметров.НаправлениеПерехода;
	Запись.Состояние           = СтруктураПараметров.Состояние;
	Запись.Ответственный       = Ответственный;
	Запись.Актуальность        = Истина;		 
	
	Набор.Записать();
	
	// сохраняем ссылки на документы операции
	Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
		ДокументыОперации = СтруктураПараметров.ДокументыОперации;
		Если ДокументыОперации.Количество() > 0 Тогда					
			
			НаборДокументы = РегистрыСведений.ДокументыОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
			НаборДокументы.Отбор.Организация.Установить(СтруктураПараметров.Организация);
			НаборДокументы.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);
			НаборДокументы.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
			НаборДокументы.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации); 
			
			Для каждого ДокументОперации Из ДокументыОперации Цикл								
				Запись = НаборДокументы.Добавить();
				Запись.Активность = Истина;
				ЗаполнитьЗначенияСвойств(Запись, СтруктураПараметров);
				Запись.ДокументОперации = ДокументОперации;
			КонецЦикла; 
			
			НаборДокументы.Записать();
			
		КонецЕсли; 
	КонецЕсли;
	
	Если ФиксироватьУстаревшие Тогда
		ЗафиксироватьУстаревшиеОперацииПереходаНаУСН(СтруктураПараметров, Отказ); 		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтменитьВыполнениеОперацииПереходаНаУСН(СтруктураПараметров, ФиксироватьУстаревшие = Ложь, Отказ = Ложь) Экспорт

	Если Отказ Тогда			
		Возврат;
	КонецЕсли; 
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Набор = РегистрыСведений.ВыполнениеОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
	
	Набор.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации);
	Набор.Отбор.Организация.Установить(СтруктураПараметров.Организация);
	Набор.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
	Набор.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);	
	
	Запись = Набор.Добавить();
	Запись.Активность          = Истина;
	Запись.ВидОперации         = СтруктураПараметров.ВидОперации;
	Запись.Организация         = СтруктураПараметров.Организация;
	Запись.ДатаПерехода        = СтруктураПараметров.ДатаПерехода;
	Запись.НаправлениеПерехода = СтруктураПараметров.НаправлениеПерехода;
	Запись.Состояние           = СтруктураПараметров.Состояние;
	Запись.Ответственный       = Ответственный;
	Запись.Актуальность        = Ложь;		 
	
	Набор.Записать();
	
	// обработаем ссылки на документы операции и сами документы в зависимости от переданных параметров:
	// Если СтруктураПараметров.СпособОбработкиДокументовОперации = "ПометитьНаУдаление" - помечаем на удаление
	// Если СтруктураПараметров.СпособОбработкиДокументовОперации = "ОтменитьПроведение" - делаем не проведенными
	ОбрабатыватьДокументыОперации = Ложь;
	СтруктураПараметров.Свойство("ОбрабатыватьДокументыОперации", ОбрабатыватьДокументыОперации);
	ОчиститьСсылкиНаДокументы = Ложь;
	СтруктураПараметров.Свойство("ОчиститьСсылкиНаДокументы", ОчиститьСсылкиНаДокументы);
	
	Если ОбрабатыватьДокументыОперации Тогда
		
		НаборДокументы = РегистрыСведений.ДокументыОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
		НаборДокументы.Отбор.Организация.Установить(СтруктураПараметров.Организация);
		НаборДокументы.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);
		НаборДокументы.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
		НаборДокументы.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации);
		
		НаборДокументы.Прочитать(); 
		
		Если НаборДокументы.Количество() > 0 Тогда
			
			Для каждого ЗаписьПоДокументу Из НаборДокументы Цикл
				
				ДокументОперации = ЗаписьПоДокументу.ДокументОперации.ПолучитьОбъект();
				
				Если СтруктураПараметров.СпособОбработкиДокументовОперации = "ПометитьНаУдаление" Тогда
					
					ДокументОперации.УстановитьПометкуУдаления(Истина);
					
				ИначеЕсли СтруктураПараметров.СпособОбработкиДокументовОперации = "ОтменитьПроведение" Тогда
					
					Если ДокументОперации.Проведен Тогда						
						ДокументОперации.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе // Операция (БУ и НУ), требуется очистить движения
						ДвиженияДокумента = ДокументОперации.Движения;
						Для каждого НаборДвижений Из ДвиженияДокумента Цикл							
							НаборДвижений.Записать(Истина); 
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЦикла; 
			
			// Если требуется - очистим ссылки на документы операции
			Если ОчиститьСсылкиНаДокументы Тогда			
				НаборДокументы.Очистить();
				НаборДокументы.Записать();			
			КонецЕсли; 
			
		КонецЕсли; 		
		
	КонецЕсли;
	
	Если ФиксироватьУстаревшие Тогда
		ЗафиксироватьУстаревшиеОперацииПереходаНаУСН(СтруктураПараметров, Отказ);		 				
	КонецЕсли;

КонецПроцедуры

Процедура ЗафиксироватьУстаревшиеОперацииПереходаНаУСН(СтруктураПараметров, Отказ = Ложь) Экспорт
	
	ИндексТекущейОперации = Перечисления.ВидыОперацийПереходаНаУСН.Индекс(СтруктураПараметров.ВидОперации);
	СледующиеВидыОпераций = Новый Массив;
	
	Для Инд = ИндексТекущейОперации + 1 По Перечисления.ВидыОперацийПереходаНаУСН.Количество() - 1 Цикл			
		СледующиеВидыОпераций.Добавить(Перечисления.ВидыОперацийПереходаНаУСН.Получить(Инд));
	КонецЦикла; 
	
	Если СледующиеВидыОпераций.Количество() > 0 Тогда			
		
		Ответственный = Пользователи.ТекущийПользователь();
		
		Набор = РегистрыСведений.ВыполнениеОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
		
		Набор.Отбор.Организация.Установить(СтруктураПараметров.Организация);
		Набор.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
		Набор.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);
		
		Для каждого СледующийВидОперации Из СледующиеВидыОпераций Цикл
			
			Набор.Отбор.ВидОперации.Установить(СледующийВидОперации);
			Набор.Прочитать();
			
			Если Набор.Количество() = 0 Тогда					
				Продолжить;
			КонецЕсли; 
			
			// если есть записи о выполненных следующих операциях, пометим их как неактуальные
			Если Набор.Количество() = 1 Тогда // есть запись про следующую операцию
				
				Запись = Набор[0];
				Запись.Ответственный = Ответственный;
				Запись.Актуальность  = Ложь;
				
			Иначе
				
				Если Набор.Количество() > 1 Тогда
					
					Набор.Очистить();
					Запись = Набор.Добавить();
					Запись.ВидОперации         = СледующийВидОперации;
					Запись.Организация         = СтруктураПараметров.Организация;
					Запись.ДатаПерехода        = СтруктураПараметров.ДатаПерехода;
					Запись.НаправлениеПерехода = СтруктураПараметров.НаправлениеПерехода;
					Запись.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
					Запись.Ответственный       = Ответственный;
					Запись.Актуальность        = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Набор.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПАТЕНТНАЯ СИСТЕМА НАЛОГООБЛОЖЕНИЯ

Функция ДатаНачалаДействияПатентнойСистемы() Экспорт 
	
	Возврат '20130101';
	
КонецФункции

// Возвращает потенциально возможный доход в течение года по полученным патентам
// Если массив пустой - считаем по всем патентам
//
Функция ПотенциальноВозможныйДоход(Организация, ДатаНачала, ДатаОкончания, МассивПатентов = Неопределено, СообщатьОбОшибках = Истина) Экспорт
	
	ПотенциальноВозможныйДоход = 0;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат ПотенциальноВозможныйДоход;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("ДатаНачала",     ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",  ДатаОкончания);
	Запрос.УстановитьПараметр("МассивПатентов", МассивПатентов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Патенты.Ссылка,
	|	Патенты.ДатаНачала,
	|	Патенты.ДатаОкончания,
	|	Патенты.ПотенциальноВозможныйГодовойДоход
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.Владелец = &Организация
	|	И (Патенты.ДатаОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ Патенты.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ДатаНачала МЕЖДУ Патенты.ДатаНачала И Патенты.ДатаОкончания
	|			ИЛИ &ДатаОкончания МЕЖДУ Патенты.ДатаНачала И Патенты.ДатаОкончания)";
	
	Если МассивПатентов <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И Ссылка В (&МассивПатентов)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПотенциальноВозможныйГодовойДоход <> 0 Тогда
			ПотенциальноВозможныйДоход = ПотенциальноВозможныйДоход + УчетУСНКлиентСервер.РассчитатьПотенциальноВозможныйДоход(
				Выборка.ПотенциальноВозможныйГодовойДоход, Макс(ДатаНачала, Выборка.ДатаНачала), Мин(ДатаОкончания, Выборка.ДатаОкончания));
		Иначе
			Если СообщатьОбОшибках Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для патента ""%1"" не указан потенциально возможный доход'"), Выборка.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, Выборка.Ссылка, "ПотенциальноВозможныйГодовойДоход");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПотенциальноВозможныйДоход;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ РАСХОДОВ НА УПЛАТУ СТРАХОВЫХ ВЗНОСОВ ЗА СЕБЯ

Функция ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(ТаблицаСтраховыхВзносов, ТаблицаРеквизитов) Экспорт
	
	Параметры = ПодготовитьПараметрыТаблицыРасходовНаУплатуСтраховыхВзносов(ТаблицаСтраховыхВзносов, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 ИЛИ Параметры.СтраховыеВзносы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРасходов = Параметры.СтраховыеВзносы.СкопироватьКолонки();
	
	ВидыНалоговыхПлатежей = Новый Массив;
	ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
	ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
	
	Для каждого СтраховойВзнос Из Параметры.СтраховыеВзносы Цикл
		
		Если ВидыНалоговыхПлатежей.Найти(СтраховойВзнос.ВидПлатежаВГосБюджет) = Неопределено Тогда
			// платеж не отражается в расходах УСН
			Продолжить;
		КонецЕсли;
		
		СтрокаРасхода = ТаблицаРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасхода, СтраховойВзнос);
		
	КонецЦикла;
	
	ТаблицаРасходов.Свернуть("СчетУчета, ВидСтраховогоВзноса, СтраховойПериод", "Сумма");
	
	Возврат ТаблицаРасходов;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыРасходовНаУплатуСтраховыхВзносов(ТаблицаСтраховыхВзносов, ТаблицаРеквизитов) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СтраховыеВзносы
	
	СписокОбязательныхКолонок = ""
		+ "СчетУчета,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета страховых взносов
		+ "ВидСтраховогоВзноса,"	// <ПеречислениеСсылка.ВидыСтраховыхВзносовИП> - вид страхового взноса
		+ "СтраховойПериод,"		// <Дата> - страховой год
		+ "ВидПлатежаВГосБюджет,"   // <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - вид платежа в бюджет
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "Сумма";					// <Число, 15, 2>
		
	Параметры.Вставить("СтраховыеВзносы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтраховыхВзносов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияОтражениеРасходовНаУплатуСтраховыхВзносов(ТаблицаРасходов, ТаблицаРеквизитов, ДокументОбъект, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыОтраженияРасходовНаУплатуСтраховыхВзносов(ТаблицаРасходов, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 ИЛИ Параметры.СтраховыеВзносы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Движения.ПрочиеРасчеты.Записывать = Истина;
	
	СтруктураТаблицУСН = Новый Структура("ТаблицаВзносовИП", Параметры.СтраховыеВзносы);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Реквизиты.Регистратор);
	Параметры.Вставить("Объект", ДокументОбъект);
	Параметры.Вставить("Организация", Реквизиты.Организация);
	Параметры.Вставить("Дата", Реквизиты.Период);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
	
	НалоговыйУчетУСН.ОтразитьВУСН(Реквизиты.Регистратор, "НачислениеСтраховыхВзносовИП", Параметры,, СтруктураТаблицУСН);

КонецПроцедуры

Функция ПодготовитьПараметрыОтраженияРасходовНаУплатуСтраховыхВзносов(ТаблицаРасходов, ТаблицаРеквизитов)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "СчетУчета,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета страховых взносов
	+ "ВидСтраховогоВзноса,"	// <ПеречислениеСсылка.ВидыСтраховыхВзносовИП> - вид страхового взноса
	+ "СтраховойПериод,"		// <Дата> - страховой год
	+ "Сумма";					// <Число, 15, 2>
	;
	Параметры.Вставить("СтраховыеВзносы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ ИМУЩЕСТВЕННЫХ НАЛОГОВ

Функция ПодготовитьТаблицуРасходовПоИмущественномуНалогу(ТаблицаНалогов, ТаблицаРеквизитов) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыРасходовПоИмущественномуНалогу(ТаблицаНалогов, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 ИЛИ Параметры.ТаблицаНалогов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Реквизиты.Период < '20150101' И Реквизиты.ВидНалога = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
		// налог на имущество до 2015 года при применении УСН не начисляется и в расходах не отражается
		Возврат Неопределено;
	КонецЕсли;
	
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, Реквизиты.Период);
	
	Налоги = Параметры.ТаблицаНалогов;
	
	Налоги.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИмущественныхНалогов"));
	Налоги.ЗаполнитьЗначения(Реквизиты.ВидНалога, "ВидНалога");
	
	Налоги.Свернуть("ВидНалога, СчетКт, ОтражениеВУСН", "Сумма");
	Налоги.Колонки.СчетКт.Имя = "СчетУчета";
	
	Для каждого СтрокаНалога Из Налоги Цикл
		Если СтрокаНалога.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
			Если НЕ ПлательщикЕНВД Тогда
				// Если нет ЕНВД - расходы не могут быть распределяемыми
				СтрокаНалога.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			ИначеЕсли Реквизиты.ВидНалога = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
				// расходы по налогу на имущество не могут быть распределяемыми,
				// т.к. налог на имущество при совмещении с ЕНВД начисляется только в части основного режима налогообложения
				СтрокаНалога.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Налоги;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыРасходовПоИмущественномуНалогу(ТаблицаНалогов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаНалогов
	
	СписокОбязательныхКолонок = ""
		+ "СчетКт,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета налога
		+ "ОтражениеВУСН,"		// <ПеречислениеСсылка.ОтражениеВУСН> - отражение налога в УСН
		+ "Сумма";				// <Число, 15, 2> - сумма налога
		
	Параметры.Вставить("ТаблицаНалогов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалогов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"	// <СправочникСсылка.Организации> - оранизация
		+ "ВидНалога";		// <ПеречислениеСсылка.ВидыИмущественныхНалогов> - вид начисляемого налога
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияОтражениеРасходовПоИмущественнымНалогам(ТаблицаРасходов, ТаблицаРеквизитов, ДокументОбъект, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОтраженияРасходовПоИмущественнымНалогам(ТаблицаРасходов, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 ИЛИ Параметры.ТаблицаРасходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Движения.ПрочиеРасчеты.Записывать = Истина;
	
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасходов", Параметры.ТаблицаРасходов);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Реквизиты.Регистратор);
	Параметры.Вставить("Объект", ДокументОбъект);
	Параметры.Вставить("Организация", Реквизиты.Организация);
	Параметры.Вставить("Дата", Реквизиты.Период);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
	
	НалоговыйУчетУСН.ОтразитьВУСН(Реквизиты.Регистратор, "НачислениеИмущественныхНалогов", Параметры,, СтруктураТаблицУСН);

КонецПроцедуры

Функция ПодготовитьПараметрыОтраженияРасходовПоИмущественнымНалогам(ТаблицаРасходов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасходов
	
	СписокОбязательныхКолонок = ""
		+ "ВидНалога,"			// <ПеречислениеСсылка.ВидыИмущественныхНалогов> - вид начисляемого налога
		+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный> - счет учета налога
		+ "ОтражениеВУСН,"		// <ПеречислениеСсылка.ОтражениеВУСН> - отражение налога в УСН
		+ "Сумма";				// <Число, 15, 2> - сумма налога
		
	Параметры.Вставить("ТаблицаРасходов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РАСЧЕТ РАСХОДОВ, УМЕНЬШАЮЩИХ НАЛОГ УСН (ФОРМИРОВАНИЕ IV РАЗДЕЛА КУДИР)

Функция ПодготовитьПараметрыРасходовУменьшающихНалогУСН(ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"								// <Дата> - период движений - дата документа
		+ "Регистратор,"						// <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		+ "Организация,"						// <СправочникСсылка.Организации> - организация
		+ "ЭтоИндивидуальныйПредприниматель,"	// <Булево> - признак, что организация является индивидуальным предпринимателем
		+ "НачалоГода,"							// <Дата> - дата начала года
		+ "КонДата,"							// <Дата> - конец текущего квартала
		+ "ПрименяетсяУСН,"						// <Булево> - признак применения УСН
		+ "ПрименяетсяУСНДоходы,"				// <Булево> - признак применения УСН с объектом налогообложения "Доходы"
		+ "ПрименяетсяУСНПатент,"				// <Булево> - признак применения патентной системы налогообложения
		+ "ПлательщикЕНВД,"						// <Булево> - признак применения ЕНВД по отдельным видам деятельности
		+ "ИПИспользуетТрудНаемныхРаботников,"	// <Булево> - признак использования труда наемных работников
		+ "ВедетсяУчетБольничных,"				// <Булево> - признак ведения учета зарплаты и расчета больничных в программе
		+ "ВедетсяУчетПоРаботникам,"			// <Булево> - признак ведения учета расчетов с персоналом по каждому работнику
		+ "ЭтоНачалоГода,"						// <Булево> - признак: текущий расчет первый в году
		+ "ЭтоКонецГода";						// <Булево> - признак: текущий расчет проводится в конце года
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуРасходовУменьшающихНалогУСН(ТаблицаРеквизитов) Экспорт

	ТаблицаРасходов = Неопределено;
	
	Параметры = ПодготовитьПараметрыРасходовУменьшающихНалогУСН(ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат ТаблицаРасходов;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ Реквизиты.ПрименяетсяУСНДоходы Тогда
		Возврат ТаблицаРасходов;
	КонецЕсли;
	
	ТаблицыДанных = Новый Структура;
	
	// границы квартала
	НачалоПериода = НачалоКвартала(Реквизиты.Период);
	КонецПериода  = КонецКвартала(Реквизиты.Период);
	
	НачалоГода = НачалоГода(Реквизиты.Период);
	
	// сроки уплаты взносов с учетом переноса выходных и праздничных дней
	ТаблицаСрокиУплаты = СрокиУплатыВзносовПоМесяцам(НачалоПериода, КонецПериода);
	
	
	// 1. Таблицы первичных операций по расходам, уменьшающих налог,
	// и границы периодов для анализа начислений
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("Организация",          Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоПериодаГраница", Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериодаГраница",  Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПериодаДата",    НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериодаДата",     КонецПериода);
	Запрос.УстановитьПараметр("НачалоГодаДата",       НачалоГода(НачалоПериода));
	
	Запрос.УстановитьПараметр("ТаблицаСрокиУплаты",    ТаблицаСрокиУплаты);
	Запрос.УстановитьПараметр("ВидыПлатежейНалоговые", УчетУСНВызовСервераПовтИсп.ВидыПлатежейВГосБюджетНалоговые());
	
	Запрос.УстановитьПараметр("СчетаВзносовСФОТ", УчетУСНВызовСервераПовтИсп.СчетаУчетаВзносовСФОТ());
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда); // 70
	Запрос.УстановитьПараметр("СчетаУчетаЗарплаты",
		БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь,, Ложь));
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	Запрос.УстановитьПараметр("СчетаУчетаДС",
		БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь,, Ложь));
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод); // 69.06.3 - взносы в ФФОМС
	Запрос.УстановитьПараметр("СчетаВзносовИП_ФФОМС",
		БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь,, Ложь));
	
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);        // 69.06.5 - взносы в ПФР
	Запрос.УстановитьПараметр("СчетаВзносовИП_ПФР",
		БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь,, Ложь));
	
	Запрос.УстановитьПараметр("ВидСубконтоВидыПлатежей",
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ВидСубконтоРаботники",
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	Запрос.УстановитьПараметр("ВидСубконтоСтатьиЗатрат",
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидСубконтоПрочиеДоходыРасходы",
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	ВидыСубконтоВзносыИП_ПФР = Новый Массив;
	ВидыСубконтоВзносыИП_ПФР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	ВидыСубконтоВзносыИП_ПФР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтраховыхВзносовИП);
	Запрос.УстановитьПараметр("ВидыСубконтоВзносовИП_ПФР", ВидыСубконтоВзносыИП_ПФР);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаОперацииПоВзносамСФОТ(НомераТаблиц, ТаблицыДанных, Реквизиты)
		+ ТекстЗапросаОперацииПоВзносамИП(НомераТаблиц, ТаблицыДанных, Реквизиты)
		+ ТекстЗапросаОперацииВыплатыЗарплаты(НомераТаблиц, ТаблицыДанных, Реквизиты);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ТаблицыДанных.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	
	// 2. Таблицы расходов для отражения в IV разделе.
	// Если применяется ЕНВД - расходы будут скорректированы на процент начислений, относящихся к ЕНВД
	
	НомераТаблиц = Новый Структура;
	
	ПериодыНачисленияВзносов  = ТаблицыДанных.ГраницыПериодовНачисленияВзносов;
	ПериодыНачисленияЗарплаты = ТаблицыДанных.ГраницыПериодовНачисленияЗарплаты;
	
	ЕстьВзносы   = Ложь;
	ЕстьЗарплата = Ложь;
	
	Если ПериодыНачисленияВзносов <> Неопределено И ПериодыНачисленияВзносов.Количество() > 0 Тогда
		СтрокаПериоды = ПериодыНачисленияВзносов[0];
		Если ЗначениеЗаполнено(СтрокаПериоды.НачалоПериода) И ЗначениеЗаполнено(СтрокаПериоды.КонецПериода) Тогда
			ЕстьВзносы = Истина;
			Запрос.УстановитьПараметр("НачалоПериодаНачисленийВзносов",
				Новый Граница(ПериодыНачисленияВзносов[0].НачалоПериода, ВидГраницы.Включая));
			// начисления в будущих периодах, если пользователь неверно указал налоговый период, не анализируются
			ГраничнаяДата = Мин(ПериодыНачисленияВзносов[0].КонецПериода, КонецПериода); 
			Запрос.УстановитьПараметр("КонецПериодаНачисленийВзносов",
				Новый Граница(ГраничнаяДата, ВидГраницы.Включая));
		КонецЕсли;
	КонецЕсли;
	
	Если ПериодыНачисленияЗарплаты <> Неопределено И ПериодыНачисленияЗарплаты.Количество() > 0 Тогда
		СтрокаПериоды = ПериодыНачисленияЗарплаты[0];
		Если ЗначениеЗаполнено(СтрокаПериоды.НачалоПериода) И ЗначениеЗаполнено(СтрокаПериоды.КонецПериода) Тогда
			ЕстьЗарплата = Истина;
			Запрос.УстановитьПараметр("НачалоПериодаНачисленийЗарплаты",
				Новый Граница(ПериодыНачисленияЗарплаты[0].НачалоПериода, ВидГраницы.Включая));
			// начисления в будущих периодах, если пользователь неверно указал период при выплате, не анализируются
			ГраничнаяДата = Мин(ПериодыНачисленияЗарплаты[0].КонецПериода, КонецПериода);
			Запрос.УстановитьПараметр("КонецПериодаНачисленийЗарплаты",
				Новый Граница(ПериодыНачисленияЗарплаты[0].КонецПериода, ВидГраницы.Включая));
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаРасходыПоВзносам(НомераТаблиц, ТаблицыДанных, Реквизиты, ЕстьВзносы)
		+ ТекстЗапросаРасходыПоБольничным(НомераТаблиц, ТаблицыДанных, Реквизиты, ЕстьЗарплата)
		+ ТекстЗапросаПереплатыФиксированныхВзносовИП(НомераТаблиц, ТаблицыДанных,
			Реквизиты, ТаблицыДанных.РеквизитыУплатыВзносовИП);
		
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ТаблицыДанных.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	
	// 3. Формируем итоговую таблицу движений по IV разделу
	
	ТаблицаРасходов     = ПустаяТаблицаДвиженийПоРазделу4КУДиР();
	ВидыВзносовПоСчетам = СоответствиеСчетовИВидовВзносов();
	
	// взносы с ФОТ
	ДобавитьРасходыПоВзносамСФОТ(
		ТаблицаРасходов,
		ТаблицыДанных.РасходыПоВзносам,
		ТаблицыДанных.ПереплатыПрошлогоГода,
		ВидыВзносовПоСчетам,
		Реквизиты);
	
	// расходы по больничным
	ДобавитьРасходыПоВыплатеБольничных(ТаблицаРасходов, ТаблицыДанных.РасходыПоБольничным, Реквизиты);
	
	// расходы по взносам ИП
	ДобавитьРасходыПоВзносамИП(
		ТаблицаРасходов,
		ТаблицыДанных.УплатыВзносовИП,
		ТаблицыДанных.ПереплатыФиксированныхВзносов,
		ВидыВзносовПоСчетам,
		Реквизиты);
	
	// Приведем таблицу движений регистра в надлежащий вид
	ТаблицаРасходов.Свернуть("Период, Организация, ПериодНачисления, ПериодНачисленияПредставление,
							|ДокументРасхода, ДокументРасходаДата, РеквизитыПервичногоДокумента",
							"ПФР, ФСС, ФОМС, ФСС_НС, Больничные, ДобровольноеСтрахование");
	ТаблицаРасходов.Сортировать("ДокументРасходаДата, ДокументРасхода, ПериодНачисления", Новый СравнениеЗначений);
	
	Возврат ТаблицаРасходов;
	
КонецФункции

Процедура ДобавитьРасходыПоВзносамСФОТ(ТаблицаРасходов, РасходыПоВзносам, ПереплатыПрошлогоГода, ВидыВзносовПоСчетам, Реквизиты)

	Если РасходыПоВзносам = Неопределено Или РасходыПоВзносам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// получим и учтем при заполнении строк переплаты по взносам, осуществленные и не зачтенные в прошлом году
	// Согласно п. 3.1 статьи 346.21 эти переплаты не должны учитываться в расходах, уменьшающих налог,
	// при их зачете в начислениях следующего налогового периода
	НеотражаемыеПереплаты = ПереплатыПоВзносамНеПодлежащиеВключениюВРасходы(ПереплатыПрошлогоГода);
	
	Для каждого СтрокаВзноса Из РасходыПоВзносам Цикл
	
		ВидВзноса = ВидыВзносовПоСчетам[СтрокаВзноса.СчетВзноса];
		
		ПереплатаПрошлогоГода = НеотражаемыеПереплаты[СтрокаВзноса.СчетВзноса];
		ПереплатаПрошлогоГода = ?(ЗначениеЗаполнено(ПереплатаПрошлогоГода), ПереплатаПрошлогоГода, 0);
		
		СуммаРасхода = 0;
		
		// Сравниваем начислено-уплачено
		Если СтрокаВзноса.Уплата > 0 Тогда
			Разность = СтрокаВзноса.Уплата - СтрокаВзноса.НачальнаяЗадолженность;
			Если Разность < 1 И Разность > 0 Тогда
				// Взносы чаще всего уплачиваются в полных рублях, разницу в копейках не учитываем
				СуммаРасхода = СтрокаВзноса.Уплата;
			Иначе
				СуммаРасхода = Мин(СтрокаВзноса.НачальнаяЗадолженность, СтрокаВзноса.Уплата)
			КонецЕсли;
		ИначеЕсли СтрокаВзноса.Начисление > 0 Тогда
			
			// исключим переплату прошлого года
			УчитываемаяПереплата  = Макс(0, СтрокаВзноса.НачальнаяПереплата - ПереплатаПрошлогоГода);
			ПереплатаПрошлогоГода = ПереплатаПрошлогоГода - Макс(0, ПереплатаПрошлогоГода - СтрокаВзноса.НачальнаяПереплата);
			НеотражаемыеПереплаты[СтрокаВзноса.СчетВзноса] = ПереплатаПрошлогоГода; // отразим зачет переплаты прошлого года начислением
			
			СуммаРасхода = Мин(СтрокаВзноса.Начисление, УчитываемаяПереплата);
			Если СуммаРасхода < 1 Тогда
				// переплату менее 1 рубля не учитываем - эта разница округления при уплате в полных рублях уже была учтена
				СуммаРасхода = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		// Учтем распределение между УСН и ЕНВД
		Если Реквизиты.ПлательщикЕНВД И СтрокаВзноса.НачисленоЕНВД > 0 Тогда
			ДоляНачисленияЕНВД = ?(СтрокаВзноса.НачисленоВсего = 0, 0,
				СтрокаВзноса.НачисленоЕНВД/СтрокаВзноса.НачисленоВсего);
				СуммаРасхода = Окр(СуммаРасхода*(1 - ДоляНачисленияЕНВД), 2, РежимОкругления.Окр15как20);
		КонецЕсли;
		
		Если СуммаРасхода > 0 И ЗначениеЗаполнено(ВидВзноса) Тогда
			
			СтрокаРасхода = ТаблицаРасходов.Добавить();
			СтрокаРасхода.Период                        = Реквизиты.Период;
			СтрокаРасхода.Организация                   = Реквизиты.Организация;
			СтрокаРасхода.ДокументРасхода               = СтрокаВзноса.ДокументРасхода;
			СтрокаРасхода.ДокументРасходаДата           = СтрокаВзноса.ПериодРегистрации;
			СтрокаРасхода.ПериодНачисления              = СтрокаВзноса.ПериодНачисления;
			СтрокаРасхода.ПериодНачисленияПредставление = Формат(СтрокаРасхода.ПериодНачисления, "ДФ='MMMM yyyy'");
			
			ПечНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаВзноса.ДокументНомер, Истина, Истина);
			ПечДата  = Формат(СтрокаВзноса.ДокументДата, "ДФ=dd.MM.yyyy");
			
			СтрокаРасхода.РеквизитыПервичногоДокумента  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '№ %1 от %2'"), ПечНомер, ПечДата);
				
			СтрокаРасхода[ВидВзноса] = СуммаРасхода;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьРасходыПоВыплатеБольничных(ТаблицаРасходов, РасходыПоБольничным, Реквизиты)

	Если РасходыПоБольничным = Неопределено Или РасходыПоБольничным.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаБольничного Из РасходыПоБольничным Цикл
		
		КоэффВыплаченности = ?(СтрокаБольничного.ВсегоКВыплате = 0,
			0,
			СтрокаБольничного.СуммаВыплаты/СтрокаБольничного.ВсегоКВыплате);
		// отсекаем случаи, когда сумма выплаты в документе больше, чем всего к выплате за месяц
		КоэффВыплаченности = Мин(КоэффВыплаченности, 1);
		
		// Для больничных распределение УСН/ЕНВД уже учтено:
		// в таблице готовая сумма начисленного больничного за счет работодателя, относящаяся к УСН
		СуммаРасхода = Окр(СтрокаБольничного.БольничныйЗаСчетРаботодателя*КоэффВыплаченности, 2, РежимОкругления.Окр15как20);
		
		Если СуммаРасхода > 0 Тогда
		
			СтрокаРасхода = ТаблицаРасходов.Добавить();
			СтрокаРасхода.Период                        = Реквизиты.Период;
			СтрокаРасхода.Организация                   = Реквизиты.Организация;
			СтрокаРасхода.ДокументРасхода               = СтрокаБольничного.ДокументРасхода;
			СтрокаРасхода.ДокументРасходаДата           = СтрокаБольничного.ПериодРегистрации;
			СтрокаРасхода.ПериодНачисления              = СтрокаБольничного.ПериодНачисления;
			СтрокаРасхода.ПериодНачисленияПредставление = Формат(СтрокаБольничного.ПериодНачисления, "ДФ='MMMM yyyy'");
			
			ПечНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаБольничного.ДокументНомер, Истина, Истина);
			ПечДата  = Формат(СтрокаБольничного.ДокументДата, "ДФ=dd.MM.yyyy");
			
			СтрокаРасхода.РеквизитыПервичногоДокумента  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '№ %1 от %2'"), ПечНомер, ПечДата);
				
			СтрокаРасхода.Больничные = СуммаРасхода;
		
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьРасходыПоВзносамИП(ТаблицаРасходов, УплатыВзносовИП, ПереплатыФиксированныхВзносов, ВидыВзносовПоСчетам, Реквизиты)

	Если УплатыВзносовИП = Неопределено Или УплатыВзносовИП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	// ограничим фиксированные взносы при их переплате
	НеотражаемыеПереплатыФиксированныхВзносов = ПереплатыПоВзносамНеПодлежащиеВключениюВРасходы(
		ПереплатыФиксированныхВзносов);
	
	Если НеотражаемыеПереплатыФиксированныхВзносов.Количество() > 0 Тогда
		
		// строки таблицы уплат взносов обходим с конца - исключаем из расходов самые поздние уплаты
		УдаляемыеСтрокиУплат = Новый Массив;
		КоличествоСтрокУплат = УплатыВзносовИП.Количество();
		
		Для СчетчикСтрок = 1 По КоличествоСтрокУплат Цикл
			
			СтрокаУплаты = УплатыВзносовИП[КоличествоСтрокУплат - СчетчикСтрок];
			
			Если СтрокаУплаты.ВидСтраховогоВзноса <> Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы Тогда
				Продолжить;
			КонецЕсли;
			
			ПереплатаВзноса = НеотражаемыеПереплатыФиксированныхВзносов[СтрокаУплаты.СчетВзноса];
			ПереплатаВзноса = ?(ЗначениеЗаполнено(ПереплатаВзноса), ПереплатаВзноса, 0);
			
			Если ПереплатаВзноса <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			УчтеннаяПереплата = Мин(СтрокаУплаты.СуммаУплаты, ПереплатаВзноса);
			
			СтрокаУплаты.СуммаУплаты = СтрокаУплаты.СуммаУплаты - УчтеннаяПереплата;
			Если СтрокаУплаты.СуммаУплаты = 0 Тогда
				УдаляемыеСтрокиУплат.Добавить(СтрокаУплаты);
			КонецЕсли;
			
			ОстатокНеучтеннойПереплаты = ПереплатаВзноса - УчтеннаяПереплата;
			НеотражаемыеПереплатыФиксированныхВзносов[СтрокаУплаты.СчетВзноса] = ОстатокНеучтеннойПереплаты;
			
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока Из УдаляемыеСтрокиУплат Цикл
			УплатыВзносовИП.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	// добавим учитываемые взносы в расходы с учетом долей доходов УСН/ЕНВД
	
	КоэффициентЕНВД = ОтражениеЗарплатыВБухучетеПереопределяемый.ПроцентЕНВД(
		Реквизиты.Организация, КонецКвартала(Реквизиты.Период));
	
	Для каждого СтрокаВзносаИП Из УплатыВзносовИП Цикл
		
		СуммаРасхода = СтрокаВзносаИП.СуммаУплаты;
		Если ЗначениеЗаполнено(КоэффициентЕНВД) Тогда
			СуммаРасхода = Окр(СуммаРасхода*(1 - КоэффициентЕНВД / 100), 2, РежимОкругления.Окр15как20);
		КонецЕсли;
		
		Если СуммаРасхода > 0 Тогда
			
			СтрокаРасхода = ТаблицаРасходов.Добавить();
			СтрокаРасхода.Период                        = Реквизиты.Период;
			СтрокаРасхода.Организация                   = Реквизиты.Организация;
			СтрокаРасхода.ДокументРасхода               = СтрокаВзносаИП.ДокументРасхода;
			СтрокаРасхода.ДокументРасходаДата           = СтрокаВзносаИП.ПериодРегистрации;
			СтрокаРасхода.ПериодНачисления              = СтрокаВзносаИП.ПериодНачисления;
			СтрокаРасхода.ПериодНачисленияПредставление = Формат(СтрокаВзносаИП.ПериодНачисления, "Л=ru; ДФ=yyyy");
			
			ПечНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаВзносаИП.ДокументНомер, Истина, Истина);
			ПечДата  = Формат(СтрокаВзносаИП.ДокументДата, "ДФ=dd.MM.yyyy");
			
			СтрокаРасхода.РеквизитыПервичногоДокумента  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '№ %1 от %2'"), ПечНомер, ПечДата);
				
			ВидВзноса = ВидыВзносовПоСчетам[СтрокаВзносаИП.СчетВзноса];
				
			СтрокаРасхода[ВидВзноса] = СуммаРасхода;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаОперацииПоВзносамСФОТ(НомераТаблиц, ТаблицыДанных, Реквизиты)

	Если Реквизиты.ЭтоИндивидуальныйПредприниматель И НЕ Реквизиты.ИПИспользуетТрудНаемныхРаботников Тогда
		ТаблицыДанных.Вставить("ГраницыПериодовНачисленияВзносов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСрокиУплаты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаОперацииПоВзносам", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ГраницыПериодовНачисленияВзносов", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СрокиУплаты.МесяцУплаты, МЕСЯЦ) КАК МесяцУплаты,
	|	КОНЕЦПЕРИОДА(СрокиУплаты.СрокУплаты, ДЕНЬ) КАК СрокУплаты
	|ПОМЕСТИТЬ ВТ_СрокиУплаты
	|ИЗ
	|	&ТаблицаСрокиУплаты КАК СрокиУплаты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцУплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК ПериодРегистрации,
	|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК ДокументРасхода,
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК СчетВзноса,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстаткиИОбороты.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|				И ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Регистратор КАК Документ.СписаниеСРасчетногоСчета).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод, МЕСЯЦ)
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстаткиИОбороты.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|				И ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод, МЕСЯЦ)
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстаткиИОбороты.Регистратор) = ТИП(Документ.НачислениеЗарплаты)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Регистратор КАК Документ.НачислениеЗарплаты).МесяцНачисления, МЕСЯЦ)
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстаткиИОбороты.Регистратор) = ТИП(Документ.ОтражениеЗарплатыВУчете)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Регистратор КАК Документ.ОтражениеЗарплатыВУчете).ПериодРегистрации, МЕСЯЦ)
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстаткиИОбороты.Регистратор) = ТИП(Документ.ОтражениеЗарплатыВБухучете)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Регистратор КАК Документ.ОтражениеЗарплатыВБухучете).ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт > 0
	|					ТОГДА НАЧАЛОПЕРИОДА(ХозрасчетныйОстаткиИОбороты.Период, МЕСЯЦ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ХозрасчетныйОстаткиИОбороты.Период <= ВТ_СрокиУплаты.СрокУплаты
	|							ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ХозрасчетныйОстаткиИОбороты.Период, МЕСЯЦ, -1), МЕСЯЦ)
	|						ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОстаткиИОбороты.Период, МЕСЯЦ)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ПериодНачисления,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК НачальнаяПереплата,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК НачальнаяЗадолженность,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК Уплата,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК Начисление,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК ДокументНомер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО) КАК ДокументДата
	|ПОМЕСТИТЬ ВТ_ОперацииПоВзносам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериодаГраница,
	|			&КонецПериодаГраница,
	|			Регистратор,
	|			ДвиженияИГраницыПериода,
	|			Счет В (&СчетаВзносовСФОТ),
	|			&ВидСубконтоВидыПлатежей,
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыПлатежейНалоговые)) КАК ХозрасчетныйОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СрокиУплаты КАК ВТ_СрокиУплаты
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОстаткиИОбороты.Период, МЕСЯЦ) = ВТ_СрокиУплаты.МесяцУплаты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ХозрасчетныйОстаткиИОбороты.Организация = ДанныеПервичныхДокументов.Организация
	|			И ХозрасчетныйОстаткиИОбороты.Регистратор = ДанныеПервичныхДокументов.Документ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетВзноса,
	|	ПериодНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(МИНИМУМ(ВТ_ОперацииПоВзносам.ПериодНачисления), МЕСЯЦ) КАК НачалоПериода,
	|	КОНЕЦПЕРИОДА(МАКСИМУМ(ВТ_ОперацииПоВзносам.ПериодНачисления), МЕСЯЦ) КАК КонецПериода
	|ИЗ
	|	ВТ_ОперацииПоВзносам КАК ВТ_ОперацииПоВзносам"
	;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОперацииПоВзносамИП(НомераТаблиц, ТаблицыДанных, Реквизиты)

	Если НЕ Реквизиты.ЭтоИндивидуальныйПредприниматель Тогда
		ТаблицыДанных.Вставить("РеквизитыУплатыВзносовИП", Неопределено);
		ТаблицыДанных.Вставить("УплатыВзносовИП", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаУплатыВзносовИП", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеквизитыУплатыВзносовИП",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("УплатыВзносовИП",                 НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Период КАК ПериодРегистрации,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументРасхода,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетВзноса,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК ВидСтраховогоВзноса,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|				И ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод, МЕСЯЦ)
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|				И ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодНачисления,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаУплаты,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК ДокументНомер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО) КАК ДокументДата
	|ПОМЕСТИТЬ ВТ_УплатыВзносовИП
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериодаГраница,
	|			&КонецПериодаГраница,
	|			Регистратор,
	|			СчетДт В (&СчетаВзносовИП_ПФР),
	|			&ВидыСубконтоВзносовИП_ПФР,
	|			СчетКт В (&СчетаУчетаДС),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежейНалоговые)) КАК ХозрасчетныйОборотыДтКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ХозрасчетныйОборотыДтКт.Организация = ДанныеПервичныхДокументов.Организация
	|			И ХозрасчетныйОборотыДтКт.Регистратор = ДанныеПервичныхДокументов.Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Период,
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ХозрасчетныйОборотыДтКт.СчетДт,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСТраховыхВзносовИП.ФиксированныеСтраховыеВзносы),
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|				И ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод, МЕСЯЦ)
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|				И ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
	|	КОНЕЦ,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериодаГраница,
	|			&КонецПериодаГраница,
	|			Регистратор,
	|			СчетДт В (&СчетаВзносовИП_ФФОМС),
	|			&ВидСубконтоВидыПлатежей,
	|			СчетКт В (&СчетаУчетаДС),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежейНалоговые)) КАК ХозрасчетныйОборотыДтКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ХозрасчетныйОборотыДтКт.Организация = ДанныеПервичныхДокументов.Организация
	|			И ХозрасчетныйОборотыДтКт.Регистратор = ДанныеПервичныхДокументов.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ВТ_УплатыВзносовИП.СчетВзноса) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьФиксированныеВзносыИП
	|ИЗ
	|	ВТ_УплатыВзносовИП КАК ВТ_УплатыВзносовИП
	|ГДЕ
	|	ВТ_УплатыВзносовИП.ВидСтраховогоВзноса = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_УплатыВзносовИП.ПериодРегистрации КАК ПериодРегистрации,
	|	ВТ_УплатыВзносовИП.ДокументРасхода КАК ДокументРасхода,
	|	ВТ_УплатыВзносовИП.СчетВзноса,
	|	ВТ_УплатыВзносовИП.ВидСтраховогоВзноса,
	|	ВТ_УплатыВзносовИП.ПериодНачисления,
	|	ВТ_УплатыВзносовИП.СуммаУплаты,
	|	ВТ_УплатыВзносовИП.ДокументНомер,
	|	ВТ_УплатыВзносовИП.ДокументДата
	|ИЗ
	|	ВТ_УплатыВзносовИП КАК ВТ_УплатыВзносовИП
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодРегистрации,
	|	ДокументРасхода"
	;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОперацииВыплатыЗарплаты(НомераТаблиц, ТаблицыДанных, Реквизиты)

	// если учет зарплаты ведется во внешней программе -
	// суммы больничных пособий за счет работодателя выделить невозможно
	Если НЕ Реквизиты.ВедетсяУчетБольничных
		ИЛИ (Реквизиты.ЭтоИндивидуальныйПредприниматель И НЕ Реквизиты.ИПИспользуетТрудНаемныхРаботников) Тогда
		ТаблицыДанных.Вставить("ГраницыПериодовНачисленияЗарплаты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаОплатаВедомостей", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДанныеВыплатПоВедомостям", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаВыплатыЗарплаты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ГраницыПериодовНачисленияЗарплаты", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОплатаВедомостейНаВыплатуЗарплаты.Регистратор КАК Регистратор,
	|	ОплатаВедомостейНаВыплатуЗарплаты.Ведомость,
	|	&ПолеФизлицоОплатаВедомости КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_ОплатаВедомостейНаВыплатуЗарплаты
	|ИЗ
	|	РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостейНаВыплатуЗарплаты
	|ГДЕ
	|	ОплатаВедомостейНаВыплатуЗарплаты.Активность
	|	И ОплатаВедомостейНаВыплатуЗарплаты.Организация = &Организация
	|	И ОплатаВедомостейНаВыплатуЗарплаты.Регистратор.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериодаДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаВедомостейНаВыплатуЗарплаты.Регистратор,
	|	ОплатаВедомостейНаВыплатуЗарплаты.Ведомость,
	|	&ПолеФизлицоОплатаВедомости
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ХозрасчетныйОборотыДтКт.Период КАК ПериодРегистрации,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументРасхода,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаВыплаты,
	|	ЕСТЬNULL(ВТ_ОплатаВедомостейНаВыплатуЗарплаты.Ведомость, НЕОПРЕДЕЛЕНО) КАК Ведомость,
	|	ВЫБОР
	|		КОГДА ВТ_ОплатаВедомостейНаВыплатуЗарплаты.Ведомость ЕСТЬ NULL 
	|			ТОГДА НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ОплатаВедомостейНаВыплатуЗарплаты.Ведомость.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодНачисления,
	|	&ПолеРаботник КАК Работник,
	|	ЕСТЬNULL(ВТ_ОплатаВедомостейНаВыплатуЗарплаты.Ведомость.Номер, НЕОПРЕДЕЛЕНО) КАК ДокументНомер,
	|	ЕСТЬNULL(ВТ_ОплатаВедомостейНаВыплатуЗарплаты.Ведомость.Дата, НЕОПРЕДЕЛЕНО) КАК ДокументДата
	|ПОМЕСТИТЬ ВТ_ДанныеВыплатПоВедомостям
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериодаГраница, &КонецПериодаГраница, Регистратор, СчетДт В (&СчетаУчетаЗарплаты), &ВидСубконтоРаботники, СчетКт В (&СчетаУчетаДС), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОплатаВедомостейНаВыплатуЗарплаты КАК ВТ_ОплатаВедомостейНаВыплатуЗарплаты
	|		ПО ХозрасчетныйОборотыДтКт.Регистратор = ВТ_ОплатаВедомостейНаВыплатуЗарплаты.Регистратор
	|			И (&УсловиеСвязиПоРаботникам)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРасхода,
	|	Организация"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	СтрПолеФизлицоВедомости = ?(Реквизиты.ВедетсяУчетПоРаботникам,
		"ОплатаВедомостейНаВыплатуЗарплаты.ФизическоеЛицо",
		"НЕОПРЕДЕЛЕНО");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеФизлицоОплатаВедомости", СтрПолеФизлицоВедомости);
	
	СтрПолеРаботник = ?(Реквизиты.ВедетсяУчетПоРаботникам, "ХозрасчетныйОборотыДтКт.СубконтоДт1", "НЕОПРЕДЕЛЕНО");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеРаботник", СтрПолеРаботник);
	
	СтрВидСубконтоРаботники = ?(Реквизиты.ВедетсяУчетПоРаботникам, "&ВидСубконтоРаботники", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидСубконтоРаботники", СтрВидСубконтоРаботники);
	
	СтрСвязьПоРаботникам = ?(Реквизиты.ВедетсяУчетПоРаботникам,
		"ХозрасчетныйОборотыДтКт.СубконтоДт1 = ВТ_ОплатаВедомостейНаВыплатуЗарплаты.ФизическоеЛицо",
		"ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСвязиПоРаботникам", СтрСвязьПоРаботникам);
	
		
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ДанныеВыплатПоВедомостям.ПериодРегистрации,
	|	ДанныеВыплатПоВедомостям.ДокументРасхода,
	|	ДанныеВыплатПоВедомостям.Ведомость,
	|	ДанныеВыплатПоВедомостям.СуммаВыплаты,
	|	ДанныеВыплатПоВедомостям.ПериодНачисления,
	|	ДанныеВыплатПоВедомостям.Работник,
	|	ВЫБОР
	|		КОГДА ДанныеВыплатПоВедомостям.Ведомость = НЕОПРЕДЕЛЕНО
	|			ТОГДА ДанныеПервичныхДокументов.Номер
	|		ИНАЧЕ ДанныеВыплатПоВедомостям.ДокументНомер
	|	КОНЕЦ КАК ДокументНомер,
	|	ВЫБОР
	|		КОГДА ДанныеВыплатПоВедомостям.Ведомость = НЕОПРЕДЕЛЕНО
	|			ТОГДА ДанныеПервичныхДокументов.Дата
	|		ИНАЧЕ ДанныеВыплатПоВедомостям.ДокументДата
	|	КОНЕЦ КАК ДокументДата
	|ПОМЕСТИТЬ ВТ_ДанныеВыплатЗарплаты
	|ИЗ
	|	ВТ_ДанныеВыплатПоВедомостям КАК ДанныеВыплатПоВедомостям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДанныеВыплатПоВедомостям.ДокументРасхода = ДанныеПервичныхДокументов.Документ
	|			И ДанныеВыплатПоВедомостям.Организация = ДанныеПервичныхДокументов.Организация
	|			И (ДанныеВыплатПоВедомостям.Ведомость = НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(МИНИМУМ(ДанныеВыплатПоВедомостям.ПериодНачисления), МЕСЯЦ) КАК НачалоПериода,
	|	КОНЕЦПЕРИОДА(МАКСИМУМ(ДанныеВыплатПоВедомостям.ПериодНачисления), МЕСЯЦ) КАК КонецПериода
	|ИЗ
	|	ВТ_ДанныеВыплатПоВедомостям КАК ДанныеВыплатПоВедомостям"
	;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРасходыПоВзносам(НомераТаблиц, ТаблицыДанных, Реквизиты, ЕстьВзносы)

	Если (Реквизиты.ЭтоИндивидуальныйПредприниматель И НЕ Реквизиты.ИПИспользуетТрудНаемныхРаботников)
		Или НЕ ЕстьВзносы Тогда
		
		ТаблицыДанных.Вставить("РасходыПоВзносам",      Неопределено);
		ТаблицыДанных.Вставить("ПереплатыПрошлогоГода", Неопределено);
		Возврат "";
		
	КонецЕсли;

	Если Реквизиты.ПлательщикЕНВД Тогда
		
		НомераТаблиц.Вставить("ВременнаяТаблицаНачисленияВзносовДоляЕНВД", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("РасходыПоВзносам", НомераТаблиц.Количество());
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.СчетВзноса КАК СчетВзноса,
		|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
		|	СУММА(ВложенныйЗапрос.НачисленоВсего) КАК НачисленоВсего,
		|	СУММА(ВложенныйЗапрос.НачисленоЕНВД) КАК НачисленоЕНВД
		|ПОМЕСТИТЬ ВТ_НачисленияВзносовДоляЕНВД
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СчетКт КАК СчетВзноса,
		|		НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ) КАК ПериодНачисления,
		|		ХозрасчетныйОборотыДтКт.СуммаОборот КАК НачисленоВсего,
		|		0 КАК НачисленоЕНВД
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|				&НачалоПериодаНачисленийВзносов,
		|				&КонецПериодаНачисленийВзносов,
		|				Месяц,
		|				,
		|				,
		|				СчетКт В (&СчетаВзносовСФОТ),
		|				&ВидСубконтоВидыПлатежей,
		|				Организация = &Организация
		|					И СубконтоКт1 В (&ВидыПлатежейНалоговые)) КАК ХозрасчетныйОборотыДтКт
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СчетКт,
		|		НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ),
		|		0,
		|		ХозрасчетныйОборотыДтКт.СуммаОборот
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|				&НачалоПериодаНачисленийВзносов,
		|				&КонецПериодаНачисленийВзносов,
		|				Месяц,
		|				,
		|				&ВидСубконтоСтатьиЗатрат,
		|				СчетКт В (&СчетаВзносовСФОТ),
		|				&ВидСубконтоВидыПлатежей,
		|				Организация = &Организация
		|					И СубконтоКт1 В (&ВидыПлатежейНалоговые)
		|					И СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
		|					И ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)) КАК ХозрасчетныйОборотыДтКт
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СчетКт,
		|		НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ),
		|		0,
		|		ХозрасчетныйОборотыДтКт.СуммаОборот
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|				&НачалоПериодаНачисленийВзносов,
		|				&КонецПериодаНачисленийВзносов,
		|				Месяц,
		|				,
		|				&ВидСубконтоПрочиеДоходыРасходы,
		|				СчетКт В (&СчетаВзносовСФОТ),
		|				&ВидСубконтоВидыПлатежей,
		|				Организация = &Организация
		|					И СубконтоКт1 В (&ВидыПлатежейНалоговые)
		|					И СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|					И ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.СчетВзноса,
		|	ВложенныйЗапрос.ПериодНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетВзноса,
		|	ПериодНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОперацииПоВзносам.ПериодРегистрации КАК ПериодРегистрации,
		|	ВТ_ОперацииПоВзносам.СчетВзноса,
		|	ВТ_ОперацииПоВзносам.ДокументРасхода КАК ДокументРасхода,
		|	ВТ_ОперацииПоВзносам.ПериодНачисления,
		|	ВТ_ОперацииПоВзносам.НачальнаяПереплата,
		|	ВТ_ОперацииПоВзносам.НачальнаяЗадолженность,
		|	ВТ_ОперацииПоВзносам.Уплата,
		|	ВТ_ОперацииПоВзносам.Начисление,
		|	ВТ_ОперацииПоВзносам.ДокументНомер,
		|	ВТ_ОперацииПоВзносам.ДокументДата,
		|	ЕСТЬNULL(ВТ_НачисленияВзносовДоляЕНВД.НачисленоВсего, 0) КАК НачисленоВсего,
		|	ЕСТЬNULL(ВТ_НачисленияВзносовДоляЕНВД.НачисленоЕНВД, 0) КАК НачисленоЕНВД
		|ИЗ
		|	ВТ_ОперацииПоВзносам КАК ВТ_ОперацииПоВзносам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НачисленияВзносовДоляЕНВД КАК ВТ_НачисленияВзносовДоляЕНВД
		|		ПО ВТ_ОперацииПоВзносам.СчетВзноса = ВТ_НачисленияВзносовДоляЕНВД.СчетВзноса
		|			И ВТ_ОперацииПоВзносам.ПериодНачисления = ВТ_НачисленияВзносовДоляЕНВД.ПериодНачисления
		|ГДЕ
		|	ВТ_ОперацииПоВзносам.ДокументРасхода <> НЕОПРЕДЕЛЕНО
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации,
		|	ДокументРасхода"
		;
	
	Иначе
		
		НомераТаблиц.Вставить("РасходыПоВзносам", НомераТаблиц.Количество());
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВТ_ОперацииПоВзносам.ПериодРегистрации КАК ПериодРегистрации,
		|	ВТ_ОперацииПоВзносам.СчетВзноса,
		|	ВТ_ОперацииПоВзносам.ДокументРасхода КАК ДокументРасхода,
		|	ВТ_ОперацииПоВзносам.ПериодНачисления,
		|	ВТ_ОперацииПоВзносам.НачальнаяПереплата,
		|	ВТ_ОперацииПоВзносам.НачальнаяЗадолженность,
		|	ВТ_ОперацииПоВзносам.Уплата,
		|	ВТ_ОперацииПоВзносам.Начисление,
		|	ВТ_ОперацииПоВзносам.ДокументНомер,
		|	ВТ_ОперацииПоВзносам.ДокументДата,
		|	0 КАК НачисленоВсего,
		|	0 КАК НачисленоЕНВД
		|ИЗ
		|	ВТ_ОперацииПоВзносам КАК ВТ_ОперацииПоВзносам
		|ГДЕ
		|	ВТ_ОперацииПоВзносам.ДокументРасхода <> НЕОПРЕДЕЛЕНО
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации,
		|	ДокументРасхода"
		;
		
	КонецЕсли;
	
	Если Реквизиты.ЭтоНачалоГода Тогда
		НомераТаблиц.Вставить("ПереплатыПрошлогоГода", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса
			+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
			+
			"ВЫБРАТЬ
			|	ВТ_ОперацииПоВзносам.СчетВзноса,
			|	СУММА(ВТ_ОперацииПоВзносам.НачальнаяПереплата) КАК Переплата
			|ИЗ
			|	ВТ_ОперацииПоВзносам КАК ВТ_ОперацииПоВзносам
			|ГДЕ
			|	ВТ_ОперацииПоВзносам.ПериодРегистрации = &НачалоГодаДата
			|	И ВТ_ОперацииПоВзносам.ДокументРасхода = НЕОПРЕДЕЛЕНО
			|	И ВТ_ОперацииПоВзносам.НачальнаяПереплата > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ОперацииПоВзносам.СчетВзноса"
			;
		
	Иначе
		ТаблицыДанных.Вставить("ПереплатыПрошлогоГода", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПереплатыФиксированныхВзносовИП(НомераТаблиц, ТаблицыДанных, Реквизиты, РеквизитыВзносовИП)

	Если Не Реквизиты.ЭтоИндивидуальныйПредприниматель
		Или РеквизитыВзносовИП = Неопределено
		Или РеквизитыВзносовИП.Количество() = 0
		Или Не РеквизитыВзносовИП[0].ЕстьФиксированныеВзносыИП Тогда
		
		ТаблицыДанных.Вставить("ПереплатыФиксированныхВзносов", Неопределено);
		Возврат "";
		
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаНачисленоУплаченоФиксированныхВзносов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПереплатыФиксированныхВзносов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СчетВзноса КАК СчетВзноса,
	|	СУММА(ВложенныйЗапрос.Начислено) КАК Начислено,
	|	СУММА(ВложенныйЗапрос.Уплачено) КАК Уплачено
	|ПОМЕСТИТЬ ВТ_НачисленоУплаченоФиксированныхВзносов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОборотыДтКт.СчетКт КАК СчетВзноса,
	|		ХозрасчетныйОборотыДтКт.СуммаОборот КАК Начислено,
	|		0 КАК Уплачено
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоГодаДата,
	|				&КонецПериодаГраница,
	|				,
	|				,
	|				&ВидСубконтоПрочиеДоходыРасходы,
	|				СчетКт В (&СчетаВзносовИП_ПФР),
	|				&ВидыСубконтоВзносовИП_ПФР,
	|				Организация = &Организация
	|					И СубконтоКт1 В (&ВидыПлатежейНалоговые)
	|					И СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы)) КАК ХозрасчетныйОборотыДтКт
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОборотыДтКт.СчетКт,
	|		ХозрасчетныйОборотыДтКт.СуммаОборот,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоГодаДата,
	|				&КонецПериодаГраница,
	|				,
	|				,
	|				&ВидСубконтоПрочиеДоходыРасходы,
	|				СчетКт В (&СчетаВзносовИП_ФФОМС),
	|				&ВидСубконтоВидыПлатежей,
	|				Организация = &Организация
	|					И СубконтоКт1 В (&ВидыПлатежейНалоговые)) КАК ХозрасчетныйОборотыДтКт
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОборотыДтКт.СчетДт,
	|		0,
	|		ХозрасчетныйОборотыДтКт.СуммаОборот
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоГодаДата,
	|				&КонецПериодаГраница,
	|				,
	|				СчетДт В (&СчетаВзносовИП_ПФР),
	|				&ВидыСубконтоВзносовИП_ПФР,
	|				СчетКт В (&СчетаУчетаДС),
	|				,
	|				Организация = &Организация
	|					И СубконтоДт1 В (&ВидыПлатежейНалоговые)
	|					И СубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы)) КАК ХозрасчетныйОборотыДтКт
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОборотыДтКт.СчетДт,
	|		0,
	|		ХозрасчетныйОборотыДтКт.СуммаОборот
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоГодаДата,
	|				&КонецПериодаГраница,
	|				,
	|				СчетДт В (&СчетаВзносовИП_ФФОМС),
	|				&ВидСубконтоВидыПлатежей,
	|				СчетКт В (&СчетаУчетаДС),
	|				,
	|				Организация = &Организация
	|					И СубконтоДт1 В (&ВидыПлатежейНалоговые)) КАК ХозрасчетныйОборотыДтКт) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СчетВзноса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачисленоУплаченоФиксированныхВзносов.СчетВзноса,
	|	ВТ_НачисленоУплаченоФиксированныхВзносов.Уплачено - ВТ_НачисленоУплаченоФиксированныхВзносов.Начислено КАК Переплата
	|ИЗ
	|	ВТ_НачисленоУплаченоФиксированныхВзносов КАК ВТ_НачисленоУплаченоФиксированныхВзносов
	|ГДЕ
	|	ВТ_НачисленоУплаченоФиксированныхВзносов.Уплачено - ВТ_НачисленоУплаченоФиксированныхВзносов.Начислено > 0"
	;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРасходыПоБольничным(НомераТаблиц, ТаблицыДанных, Реквизиты, ЕстьЗарплата)

	// если учет зарплаты ведется во внешней программе -
	// суммы больничных пособий за счет работодателя выделить невозможно
	Если НЕ Реквизиты.ВедетсяУчетБольничных
		Или (Реквизиты.ЭтоИндивидуальныйПредприниматель И НЕ Реквизиты.ИПИспользуетТрудНаемныхРаботников)
		Или НЕ ЕстьЗарплата Тогда
		
		ТаблицыДанных.Вставить("РасходыПоБольничным", Неопределено);
		Возврат "";
		
	КонецЕсли;

	НомераТаблиц.Вставить("ВременнаяТаблицаНачисленияЗарплаты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РасходыПоБольничным", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ПериодНачисления КАК ПериодНачисления,
	|	ВложенныйЗапрос.Работник КАК Работник,
	|	СУММА(ВложенныйЗапрос.ВсегоНачислено) КАК ВсегоНачислено,
	|	СУММА(ВложенныйЗапрос.БольничныйЗаСчетРаботодателя) КАК БольничныйЗаСчетРаботодателя,
	|	СУММА(ВложенныйЗапрос.ВсегоКВыплате) КАК ВсегоКВыплате
	|ПОМЕСТИТЬ ВТ_НачисленияЗарплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ) КАК ПериодНачисления,
	|		&ПолеРаботникОборотыДтКт КАК Работник,
	|		ХозрасчетныйОборотыДтКт.СуммаОборот КАК ВсегоНачислено,
	|		0 КАК БольничныйЗаСчетРаботодателя,
	|		0 КАК ВсегоКВыплате
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериодаНачисленийЗарплаты, &КонецПериодаНачисленийЗарплаты, Месяц, , , СчетКт В (&СчетаУчетаЗарплаты), &ВидСубконтоРаботники, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ),
	|		&ПолеРаботникОборотыДтКт,
	|		0,
	|		ХозрасчетныйОборотыДтКт.СуммаОборот,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоПериодаНачисленийЗарплаты,
	|				&КонецПериодаНачисленийЗарплаты,
	|				Регистратор,
	|				,
	|				&ВидСубконтоСтатьиЗатрат,
	|				СчетКт В (&СчетаУчетаЗарплаты),
	|				&ВидСубконтоРаботники,
	|				Организация = &Организация
	|					И СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|					И ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)) КАК ХозрасчетныйОборотыДтКт
	|	ГДЕ
	|		ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.БольничныйЛист
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, МЕСЯЦ),
	|		&ПолеРаботникОборотыДтКт,
	|		0,
	|		ХозрасчетныйОборотыДтКт.СуммаОборот,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоПериодаНачисленийЗарплаты,
	|				&КонецПериодаНачисленийЗарплаты,
	|				Регистратор,
	|				,
	|				&ВидСубконтоПрочиеДоходыРасходы,
	|				СчетКт В (&СчетаУчетаЗарплаты),
	|				&ВидСубконтоРаботники,
	|				Организация = &Организация
	|					И СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					И ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)) КАК ХозрасчетныйОборотыДтКт
	|	ГДЕ
	|		ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.БольничныйЛист
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ),
	|		&ПолеРаботникОбороты,
	|		0,
	|		0,
	|		-ХозрасчетныйОбороты.СуммаОборот
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериодаНачисленийЗарплаты, &КонецПериодаНачисленийЗарплаты, Месяц, Счет В (&СчетаУчетаЗарплаты), &ВидСубконтоРаботники, Организация = &Организация, НЕ КорСчет В (&СчетаУчетаДС), ) КАК ХозрасчетныйОбороты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ПериодНачисления,
	|	ВложенныйЗапрос.Работник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодНачисления,
	|	Работник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеВыплатЗарплаты.ПериодРегистрации,
	|	ВТ_ДанныеВыплатЗарплаты.ДокументРасхода,
	|	ВТ_ДанныеВыплатЗарплаты.Ведомость,
	|	ВТ_ДанныеВыплатЗарплаты.СуммаВыплаты,
	|	ВТ_ДанныеВыплатЗарплаты.ПериодНачисления,
	|	ВТ_НачисленияЗарплаты.ВсегоНачислено,
	|	ВТ_НачисленияЗарплаты.БольничныйЗаСчетРаботодателя,
	|	ВТ_НачисленияЗарплаты.ВсегоКВыплате,
	|	ВТ_ДанныеВыплатЗарплаты.Работник,
	|	ВТ_ДанныеВыплатЗарплаты.ДокументНомер,
	|	ВТ_ДанныеВыплатЗарплаты.ДокументДата
	|ИЗ
	|	ВТ_ДанныеВыплатЗарплаты КАК ВТ_ДанныеВыплатЗарплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НачисленияЗарплаты КАК ВТ_НачисленияЗарплаты
	|		ПО ВТ_ДанныеВыплатЗарплаты.ПериодНачисления = ВТ_НачисленияЗарплаты.ПериодНачисления
	|			И ВТ_ДанныеВыплатЗарплаты.Работник = ВТ_НачисленияЗарплаты.Работник
	|			И (ВТ_НачисленияЗарплаты.БольничныйЗаСчетРаботодателя > 0)"
	;
	
	СтрПолеРаботникОборотыДтКт = ?(Реквизиты.ВедетсяУчетПоРаботникам,
		"ХозрасчетныйОборотыДтКт.СубконтоКт1", "НЕОПРЕДЕЛЕНО");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеРаботникОборотыДтКт", СтрПолеРаботникОборотыДтКт);
	
	СтрПолеРаботникОбороты = ?(Реквизиты.ВедетсяУчетПоРаботникам,
		"ХозрасчетныйОбороты.Субконто1", "НЕОПРЕДЕЛЕНО");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеРаботникОбороты", СтрПолеРаботникОбороты);
	
	СтрВидСубконтоРаботники = ?(Реквизиты.ВедетсяУчетПоРаботникам,
		"&ВидСубконтоРаботники", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидСубконтоРаботники", СтрВидСубконтоРаботники);
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция СрокиУплатыВзносовПоМесяцам(НачалоПериода, КонецПериода)

	ТаблицаСроков = Новый ТаблицаЗначений;
	ТаблицаСроков.Колонки.Добавить("МесяцУплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаСроков.Колонки.Добавить("ИсходныйСрок", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаСроков.Колонки.Добавить("СрокУплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ТекПериод = НачалоМесяца(НачалоПериода);
	
	Пока ТекПериод <= КонецПериода Цикл
		
		НоваяСтрока = ТаблицаСроков.Добавить();
		НоваяСтрока.МесяцУплаты = ТекПериод;
		НоваяСтрока.ИсходныйСрок = Дата(Год(ТекПериод), Месяц(ТекПериод), 15);
		
		ТекПериод = ДобавитьМесяц(ТекПериод, 1);
	
	КонецЦикла;
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
	СрокиУплаты = Новый Соответствие;
	
	Если ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		ИсходныеСроки = ТаблицаСроков.ВыгрузитьКолонку("ИсходныйСрок");
		СрокиУплаты   = КалендарныеГрафики.ПолучитьДатыРабочихДней(ПроизводственныйКалендарь, ИсходныеСроки, Ложь, Ложь, Истина);
	КонецЕсли;
	
	Для каждого СтрокаПериода Из ТаблицаСроков Цикл
		
		СтрокаПериода.СрокУплаты = СрокиУплаты[СтрокаПериода.ИсходныйСрок];
		
		Если НЕ ЗначениеЗаполнено(СтрокаПериода.СрокУплаты) Тогда
			// Если не удалось получить дату рабочего дня из календаря, и срок уплаты приходится на выходной день - 
			// сдвигаем срок уплаты на ближайший понедельник
			СмещениеДней = 0;
			Если ДеньНедели(СтрокаПериода.ИсходныйСрок) = 6 Тогда
				СмещениеДней = 2;
			ИначеЕсли ДеньНедели(СтрокаПериода.ИсходныйСрок) = 7 Тогда
				СмещениеДней = 1;
			КонецЕсли;
			СтрокаПериода.СрокУплаты = СтрокаПериода.ИсходныйСрок + СмещениеДней * 24*60*60;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСроков;
	
КонецФункции

Функция ПустаяТаблицаДвиженийПоРазделу4КУДиР()

	ТаблицаДвижений = Новый ТаблицаЗначений;

	ТаблицаДвижений.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДвижений.Колонки.Добавить("ДокументРасхода", Документы.ТипВсеСсылки());
	ТаблицаДвижений.Колонки.Добавить("ДокументРасходаДата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаДвижений.Колонки.Добавить("ПериодНачисления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДвижений.Колонки.Добавить("ПериодНачисленияПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаДвижений.Колонки.Добавить("РеквизитыПервичногоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаДвижений.Колонки.Добавить("ПФР", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Любой));
	ТаблицаДвижений.Колонки.Добавить("ФОМС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Любой));
	ТаблицаДвижений.Колонки.Добавить("ФСС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Любой));
	ТаблицаДвижений.Колонки.Добавить("ФСС_НС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Любой));
	ТаблицаДвижений.Колонки.Добавить("Больничные", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Любой));
	ТаблицаДвижений.Колонки.Добавить("ДобровольноеСтрахование",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Любой));
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция СоответствиеСчетовИВидовВзносов()

	СоответствиеСчетов = Новый Соответствие;
	
	// ПФР
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх);  // 69.02.1 (до 2014 года)
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);    // 69.02.2 (до 2014 года)
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС);    // 69.02.7 (с 2014 года)
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП); // 69.06.5 - страховые взносы ИП в ПФР
	
	СчетаПФР = БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь,, Ложь);
	
	Для каждого Счет Из СчетаПФР Цикл
		СоответствиеСчетов.Вставить(Счет, "ПФР");
	КонецЦикла;
	
	// ФОМС
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФОМС);              // 69.03
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод); // 69.06.3
	
	СчетаФОМС = БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь,, Ложь);
	
	Для каждого Счет Из СчетаФОМС Цикл
		СоответствиеСчетов.Вставить(Счет, "ФОМС");
	КонецЦикла;
	
	// ФСС
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФСС);               // 69.01
	
	СчетаФСС = БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь,, Ложь);
	
	Для каждого Счет Из СчетаФСС Цикл
		СоответствиеСчетов.Вставить(Счет, "ФСС");
	КонецЦикла;
	
	// ФСС_НС
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);         // 69.11
	
	СчетаФСС_НС = БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь,, Ложь);
	
	Для каждого Счет Из СчетаФСС_НС Цикл
		СоответствиеСчетов.Вставить(Счет, "ФСС_НС");
	КонецЦикла;
	
	Возврат СоответствиеСчетов;

КонецФункции

Функция ПереплатыПоВзносамНеПодлежащиеВключениюВРасходы(ТаблицаПереплат)

	Переплаты = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(ТаблицаПереплат) Тогда
		Возврат Переплаты;
	КонецЕсли;
	
	Для каждого СтрокаПереплаты Из ТаблицаПереплат Цикл
		УчтеноПоСчету = Переплаты[СтрокаПереплаты.СчетВзноса];
		УчтеноПоСчету = ?(ЗначениеЗаполнено(УчтеноПоСчету), УчтеноПоСчету, 0);
		Переплаты.Вставить(СтрокаПереплаты.СчетВзноса, УчтеноПоСчету + СтрокаПереплаты.Переплата);
	КонецЦикла;
	
	Возврат Переплаты;

КонецФункции

Процедура СформироватьДвиженияКУДиРРаздел4(ТаблицаДвижений, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыДвиженийКУДиРРаздел4(ТаблицаДвижений, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Реквизиты.Организация, Реквизиты.Период);
	
	Если Не ПрименяетсяУСНДоходы Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаЗаписи Из Параметры.ТаблицаДвижений Цикл
		
		Запись = Движения.КнигаУчетаДоходовИРасходовРаздел4.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаЗаписи);
		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);
		
		Движения.КнигаУчетаДоходовИРасходовРаздел4.Записывать = Истина;
		
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийКУДиРРаздел4(ТаблицаДвижений, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаДвижений
	
	СписокОбязательныхКолонок = ""
		+ "ДокументРасхода,"				// <ДокументСсылка> - документ-основание для отражения операции в КУДиР
		+ "ПериодНачисления,"				// <Дата> - дата периода начисления
		+ "ПериодНачисленияПредставление,"	// <Строка> - текстовое представление периода начисления
		+ "РеквизитыПервичногоДокумента,"	// <Строка> - реквизиты (дата и номер) документа-основания для операции
		+ "ПФР,"							// <Число, 15, 2> - сумма взносов в ПФР
		+ "ФОМС,"							// <Число, 15, 2> - сумма взносов в ФОМС
		+ "ФСС,"							// <Число, 15, 2> - сумма взносов в ФСС
		+ "ФСС_НС,"							// <Число, 15, 2> - сумма взносов в ФСС от несчастных случаев и проф. заболеваний
		+ "Больничные,"						// <Число, 15, 2> - сумма выплаченных больничных за счет работодтеля
		+ "ДобровольноеСтрахование";		// <Число, 15, 2> - сумма расходов на добровольное страхование
		
	Параметры.Вставить("ТаблицаДвижений", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДвижений, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ВыявитьУчетныеОшибкиРасходовУменьшающихНалогУСН(Ошибки, Период, Организация) Экспорт

	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период) Тогда
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И Не УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация) Тогда
		// у ИП без работников взносы с ФОТ не уплачиваются, проверки не требуются
		// Ошибки уплаты фиксированных взносов уже выявлены в операции "Начисление страховых взносов ИП"
		Возврат;
	КонецЕсли;

	НачалоПериода = НачалоКвартала(Период);
	КонецПериода  = КонецКвартала(Период);

	ПроверитьПериодУплатыВзносовЗаРаботников(Ошибки, НачалоПериода, КонецПериода, Организация);

КонецПроцедуры

Процедура ПроверитьПериодУплатыВзносовЗаРаботников(Ошибки, НачалоПериода, КонецПериода, Организация)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаВзносов",  УчетУСНВызовСервераПовтИсп.СчетаУчетаВзносовСФОТ());
	Запрос.УстановитьПараметр("ВидыПлатежей",  УчетУСНВызовСервераПовтИсп.ВидыПлатежейВГосБюджетНалоговые());
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	Запрос.УстановитьПараметр("СчетаУчетаДС",
		БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь,, Ложь));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОплаты,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетУчета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			СчетДт В (&СчетаВзносов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаУчетаДС),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|					И ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод, ДЕНЬ) = ДАТАВРЕМЯ(1, 1, 1)
	|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|					И ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод, ДЕНЬ) = ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание     = НСтр("ru = 'Не указан период, за который уплачивается страховой взнос.'");
	Ошибка.Рекомендация = НСтр("ru = 'Укажите период уплаты взноса.'");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'В документе [Документ] не указан период уплаты взноса'");
		
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Документ", Строка(Выборка.ДокументОплаты));
		
		МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
		МестоОшибки.Локализация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, ПараметрыСтроки);
		МестоОшибки.Ссылка      = Выборка.ДокументОплаты;
		
	КонецЦикла;
	

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ НАЛОГА (АВАНСОВОГО ПЛАТЕЖА ПО НАЛОГУ), УПЛАЧИВАЕМОГО ПРИ УСН

Функция ПодготовитьТаблицыНачисленияНалогаУСН(ТаблицаРеквизитов) Экспорт

	СтруктураТаблиц = Новый Структура();
	СтруктураТаблиц.Вставить("ТаблицаПроводок", Неопределено);
	СтруктураТаблиц.Вставить("ТаблицаСправкиРасчета", Неопределено);
	
	Параметры = ПодготовитьПараметрыТаблицыНачисленияНалогаУСН(ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ Реквизиты.ПрименяетсяУСН Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	ТаблицаПроводок  = ПустаяТаблицаОтраженияНалогаУСН();
	ТаблицаСправкиРасчета = ПустаяТаблицаСправкаРасчетНалогаУСН();
	
	Если Реквизиты.ПрименяетсяУСНДоходы Тогда
		РассчитатьНалогУСНОбъектДоходы(Реквизиты, ТаблицаПроводок, ТаблицаСправкиРасчета);
	Иначе
		РассчитатьНалогУСНОбъектДоходыМинусРасходы(Реквизиты, ТаблицаПроводок, ТаблицаСправкиРасчета);
	КонецЕсли;
	
	СтруктураТаблиц.Вставить("ТаблицаПроводок", ТаблицаПроводок);
	СтруктураТаблиц.Вставить("ТаблицаСправкиРасчета", ТаблицаСправкиРасчета);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыНачисленияНалогаУСН(ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"								// <Дата> - период движений - дата документа
		+ "Регистратор,"						// <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		+ "Организация,"						// <СправочникСсылка.Организации> - организация
		+ "НачалоГода,"							// <Дата> - дата начала года
		+ "КонДата,"							// <Дата> - конец текущего квартала
		+ "СтавкаНалогаУСН,"					// <Число, 5, 2> - налоговая ставка
		+ "ПрименяетсяУСН,"						// <Булево> - признак применения УСН
		+ "ПрименяетсяУСНДоходы,"				// <Булево> - признак применения УСН с объектом налогообложения "Доходы"
		+ "ПрименяетсяУСНДоходыМинусРасходы,"	// <Булево> - признак применения УСН с объектом "Доходы минус расходы"
		+ "ЭтоНачалоГода,"						// <Булево> - признак, что текущее начисление первое в году
		+ "ЭтоКонецГода";						// <Булево> - признак, что текущее начисление последнее в году
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура РассчитатьНалогУСНОбъектДоходы(Реквизиты, ТаблицаПроводок, ТаблицаСправкиРасчета)

	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН;			  // Кт 68.12
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	
	ИндивидуальныйПредприниматель = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация);
	
	ЕстьНаемныеРаботники = ?(ИндивидуальныйПредприниматель,
		УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Реквизиты.Организация),
		Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",        Реквизиты.НачалоГода);
	Запрос.УстановитьПараметр("КонецПериода",         Реквизиты.КонДата);
	Запрос.УстановитьПараметр("ЕстьНаемныеРаботники", ЕстьНаемныеРаботники);
	
	Если НЕ Реквизиты.ЭтоНачалоГода Тогда
		
		Запрос.УстановитьПараметр("КонецПредыдущегоКвартала",
			Новый Граница(КонецКвартала(ДобавитьМесяц(Реквизиты.КонДата, -3)), ВидГраницы.Включая));
		
		ВидыПлатежейВБюджет = Новый Массив;
		ВидыПлатежейВБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыПлатежейВБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		ВидыПлатежейВБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", ВидыПлатежейВБюджет);
		
		Запрос.УстановитьПараметр("СчетНачисленияНалога", СчетНачисленияНалога);
		Запрос.УстановитьПараметр("СчетОтраженияНалога",  СчетОтраженияНалога);
		
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Доходы
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел4Обороты.ПФРОборот + Раздел4Обороты.ФОМСОборот + ВЫБОР
	|		КОГДА &ЕстьНаемныеРаботники
	|			ТОГДА Раздел4Обороты.ФССОборот + Раздел4Обороты.ФСС_НСОборот + Раздел4Обороты.БольничныеОборот + Раздел4Обороты.ДобровольноеСтрахованиеОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РасходыУменьшающиеНалог
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК Раздел4Обороты"
	;
		
	Если НЕ Реквизиты.ЭтоНачалоГода Тогда 
		ТекстЗапроса = ТекстЗапроса
			+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
			+ "ВЫБРАТЬ
			|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК ИсчисленоЗаПредыдущиеПериоды
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|			&НачалоПериода,
			|			&КонецПредыдущегоКвартала,
			|			,
			|			СчетДт = &СчетОтраженияНалога,
			|			,
			|			СчетКт = &СчетНачисленияНалога,
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Организация = &Организация
			|				И СубконтоКт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт"
			;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.ВыполнитьПакет();
	
	// расчет налога
	Доходы						 = 0;
	РасходыУменьшающиеНалог		 = 0;
	ИсчисленоЗаПредыдущиеПериоды = 0;
	МаксПроцентУменьшенияНалога  = ?(ЕстьНаемныеРаботники, 50, 100);
	
	ВыборкаНалоговаяБаза = Результат[0].Выбрать();
	Если ВыборкаНалоговаяБаза.Следующий() Тогда
		Доходы = ?(ЗначениеЗаполнено(ВыборкаНалоговаяБаза.Доходы), ВыборкаНалоговаяБаза.Доходы, 0);
	КонецЕсли;
	
	ВыборкаУменьшениеНалога = Результат[1].Выбрать();
	Если ВыборкаУменьшениеНалога.Следующий() Тогда
		РасходыУменьшающиеНалог = ВыборкаУменьшениеНалога.РасходыУменьшающиеНалог;
	КонецЕсли;
	
	Если НЕ Реквизиты.ЭтоНачалоГода Тогда
		ВыборкаПредыдущиеПериоды = Результат[2].Выбрать();
		Если ВыборкаПредыдущиеПериоды.Следующий() Тогда
			ИсчисленоЗаПредыдущиеПериоды = ВыборкаПредыдущиеПериоды.ИсчисленоЗаПредыдущиеПериоды;
		КонецЕсли;
	КонецЕсли;
	
	НалогСНачалаГодаВсего = Окр(Доходы * Реквизиты.СтавкаНалогаУСН / 100, 2);
	УменьшениеНалога = Мин(РасходыУменьшающиеНалог, НалогСНачалаГодаВсего * МаксПроцентУменьшенияНалога / 100);
	
	НалогСначалаГодаИсчисленный = НалогСНачалаГодаВсего - УменьшениеНалога;
	НалогКУплате = Окр(Макс(НалогСначалаГодаИсчисленный - ИсчисленоЗаПредыдущиеПериоды, 0), 0);
	
	// данные для формирования проводки по начислению налога
	// проводку формируем только при ненулевом налоге
	Если НалогКУплате > 0 Тогда
		
		СтрокаПроводки = ТаблицаПроводок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПроводки, Реквизиты);
		
		СтрокаПроводки.СчетДт					= СчетОтраженияНалога;
		СтрокаПроводки.СчетКт					= СчетНачисленияНалога;
		СтрокаПроводки.ПрибылиИУбытки			= Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
		СтрокаПроводки.ВидыПлатежейВГосБюджет	= Перечисления.ВидыПлатежейВГосБюджет.Налог;
		СтрокаПроводки.Сумма					= НалогКУплате;
		СтрокаПроводки.Содержание				= СодержаниеПроводкиНачислениеНалогаУСН(Реквизиты);
		
	КонецЕсли;
	
	// данные для справки-расчета
	СтрокаСправки = ТаблицаСправкиРасчета.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаСправки, Реквизиты);
	
	СтрокаСправки.ПериодРасчета				= Реквизиты.Период;
	СтрокаСправки.ОбъектНалогообложения		= Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
	СтрокаСправки.Доходы					= Доходы;
	СтрокаСправки.НалоговаяБаза				= Доходы;
	СтрокаСправки.НалогВсего				= НалогСНачалаГодаВсего;
	СтрокаСправки.РасходыУменьшающиеНалог	= РасходыУменьшающиеНалог;
	СтрокаСправки.ПроцентУменьшенияНалога	= МаксПроцентУменьшенияНалога;
	СтрокаСправки.УменьшениеНалогаФакт		= УменьшениеНалога;
	СтрокаСправки.НалогИсчисленныйВсего		= НалогСначалаГодаИсчисленный;
	СтрокаСправки.АвансовыеПлатежи			= ИсчисленоЗаПредыдущиеПериоды;
	СтрокаСправки.НалогКУплате				= НалогКУплате;
	
КонецПроцедуры

Процедура РассчитатьНалогУСНОбъектДоходыМинусРасходы(Реквизиты, ТаблицаПроводок, ТаблицаСправкаРасчет)
	
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН;			  // Кт 68.12
	
	НалоговыеКаникулы = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация)
		И УчетнаяПолитика.НалоговыеКаникулыУСН(Реквизиты.Организация, Реквизиты.КонДата);
	
	Доходы						 = 0;
	Расходы						 = 0;
	ИсчисленоЗаПредыдущиеПериоды = 0;
	
	ПеренесенныеУбытки				 = 0;
	УбытокОтУплатыМинимальногоНалога = 0;
	УчтенныеУбытки					 = 0;
	
	МинимальныйНалог	= 0;
	ЭтоМинимальныйНалог = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Реквизиты.НачалоГода);
	Запрос.УстановитьПараметр("КонецПериода",  Реквизиты.КонДата);
	
	Если НЕ Реквизиты.ЭтоНачалоГода Тогда
		
		Запрос.УстановитьПараметр("КонецПредыдущегоКвартала",
			Новый Граница(КонецКвартала(ДобавитьМесяц(Реквизиты.КонДата, -3)), ВидГраницы.Включая));
		
		ВидыПлатежейВБюджет = Новый Массив;
		ВидыПлатежейВБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыПлатежейВБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		ВидыПлатежейВБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", ВидыПлатежейВБюджет);
		
		Запрос.УстановитьПараметр("СчетНачисленияНалога", СчетНачисленияНалога);
		Запрос.УстановитьПараметр("СчетОтраженияНалога",  СчетОтраженияНалога);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Доходы,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Расходы
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты"
	;
	
	Если НЕ Реквизиты.ЭтоНачалоГода Тогда 
		ТекстЗапроса = ТекстЗапроса
			+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
			+ "ВЫБРАТЬ
			|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК ИсчисленоЗаПредыдущиеПериоды
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|			&НачалоПериода,
			|			&КонецПредыдущегоКвартала,
			|			,
			|			СчетДт = &СчетОтраженияНалога,
			|			,
			|			СчетКт = &СчетНачисленияНалога,
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Организация = &Организация
			|				И СубконтоКт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт"
		;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	// перенесенные на текущий период убытки прошлых лет учитываются только при расчете налога по итогам года
	Если Реквизиты.ЭтоКонецГода Тогда
		Убытки = ПеренесенныеУбыткиПрошлыхЛет(Реквизиты.Организация, Реквизиты.НачалоГода, Реквизиты.КонДата);
		ПеренесенныеУбытки = Убытки.ПеренесенныеУбытки;
		УбытокОтУплатыМинимальногоНалога = Убытки.УбытокОтУплатыМинимальногоНалога;
	КонецЕсли;
	
	// расчет налога
	
	ВыборкаНалоговаяБаза = Результат[0].Выбрать();
	Если ВыборкаНалоговаяБаза.Следующий() Тогда
		Доходы  = ?(ЗначениеЗаполнено(ВыборкаНалоговаяБаза.Доходы), ВыборкаНалоговаяБаза.Доходы, 0);
		Расходы = ?(ЗначениеЗаполнено(ВыборкаНалоговаяБаза.Расходы), ВыборкаНалоговаяБаза.Расходы, 0);
	КонецЕсли;
	
	Если НЕ Реквизиты.ЭтоНачалоГода Тогда
		ВыборкаПредыдущиеПериоды = Результат[1].Выбрать();
		Если ВыборкаПредыдущиеПериоды.Следующий() Тогда
			ИсчисленоЗаПредыдущиеПериоды = ВыборкаПредыдущиеПериоды.ИсчисленоЗаПредыдущиеПериоды;
		КонецЕсли;
	КонецЕсли;
	
	// увеличиваем расходы на сумму разницы между уплаченным в прошлых периодах минимальным налогом и рассчитанным в общем порядке
	Расходы = Расходы + УбытокОтУплатыМинимальногоНалога;
	
	НалоговаяБаза  = Макс(Доходы - Расходы, 0);
	Если Реквизиты.ЭтоКонецГода Тогда
		УчтенныеУбытки = Мин(НалоговаяБаза, ПеренесенныеУбытки);
		НалоговаяБаза  = НалоговаяБаза - УчтенныеУбытки;
		МинимальныйНалог = ?(НалоговыеКаникулы,
							0,                     // для ИП на налоговых каникулах минимальный налог не рассчитывается
							Окр(Доходы / 100, 0)); // 1% от доходов за год
	КонецЕсли;
	
	НалогСНачалаГода = Окр(НалоговаяБаза * Реквизиты.СтавкаНалогаУСН / 100, 0);
	НалогКУплате	 = Окр(Макс(НалогСначалаГода - ИсчисленоЗаПредыдущиеПериоды, 0), 0);
	
	// Если налог, рассчитанный в общем порядке по итогам года, меньше минимального налога - требуется исчислить к уплате минимальный налог.
	// При начислении минимального налога ранее уплаченные авансовые платежи не зачитываются,
	// для их зачета налогоплательщик подает в ИФНС отдельное заявление
	
	Если Реквизиты.ЭтоКонецГода И МинимальныйНалог > НалогСНачалаГода Тогда
		НалогКУплате = МинимальныйНалог;
		ЭтоМинимальныйНалог = Истина;
	КонецЕсли;
	
	// данные для формирования проводки по начислению налога
	// проводку формируем только при ненулевом налоге
	Если НалогКУплате > 0 Тогда
		
		СтрокаПроводки = ТаблицаПроводок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПроводки, Реквизиты);
		
		СтрокаПроводки.СчетДт					= СчетОтраженияНалога;
		СтрокаПроводки.СчетКт					= СчетНачисленияНалога;
		СтрокаПроводки.ПрибылиИУбытки			= Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
		СтрокаПроводки.ВидыПлатежейВГосБюджет	= Перечисления.ВидыПлатежейВГосБюджет.Налог;
		СтрокаПроводки.Сумма					= НалогКУплате;
		СтрокаПроводки.Содержание				= СодержаниеПроводкиНачислениеНалогаУСН(Реквизиты, ЭтоМинимальныйНалог);
		
	КонецЕсли;
	
	// данные для справки-расчета
	СтрокаСправки = ТаблицаСправкаРасчет.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаСправки, Реквизиты);
	
	СтрокаСправки.ПериодРасчета			= Реквизиты.Период;
	СтрокаСправки.ОбъектНалогообложения	= Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
	СтрокаСправки.Доходы				= Доходы;
	СтрокаСправки.Расходы				= Расходы;
	СтрокаСправки.ПеренесенныеУбытки	= УчтенныеУбытки;
	СтрокаСправки.НалоговаяБаза			= НалоговаяБаза;
	СтрокаСправки.НалогВсего			= НалогСНачалаГода;
	СтрокаСправки.НалогИсчисленныйВсего	= НалогСНачалаГода;
	СтрокаСправки.МинимальныйНалог		= МинимальныйНалог;
	СтрокаСправки.АвансовыеПлатежи		= ИсчисленоЗаПредыдущиеПериоды;
	СтрокаСправки.НалогКУплате			= НалогКУплате;
	
КонецПроцедуры

Функция ПустаяТаблицаОтраженияНалогаУСН()

	ПустаяТаблица = Новый ТаблицаЗначений;
	
	ПустаяТаблица.Колонки.Добавить("Период",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("Организация",            Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПустаяТаблица.Колонки.Добавить("СчетДт",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("СчетКт",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("ПрибылиИУбытки",         Новый ОписаниеТипов("ПеречислениеСсылка.ПрибылиИУбытки"));
	ПустаяТаблица.Колонки.Добавить("ВидыПлатежейВГосБюджет", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ПустаяТаблица.Колонки.Добавить("Сумма",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("Содержание",             ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат ПустаяТаблица;

КонецФункции

Функция ПустаяТаблицаСправкаРасчетНалогаУСН()

	ПустаяТаблица = Новый ТаблицаЗначений;
	
	ПустаяТаблица.Колонки.Добавить("ПериодРасчета",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("Организация",            Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПустаяТаблица.Колонки.Добавить("ОбъектНалогообложения",
		Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыНалогообложенияПоУСН"));
	ПустаяТаблица.Колонки.Добавить("Доходы",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Любой));
	ПустаяТаблица.Колонки.Добавить("Расходы",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Любой));
	ПустаяТаблица.Колонки.Добавить("ПеренесенныеУбытки",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("НалоговаяБаза",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("СтавкаНалогаУСН",
		ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("НалогВсего",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("РасходыУменьшающиеНалог",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("ПроцентУменьшенияНалога",
		ОбщегоНазначения.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("УменьшениеНалогаФакт",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("НалогИсчисленныйВсего",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("МинимальныйНалог",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("АвансовыеПлатежи",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("НалогКУплате",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный));
	
	Возврат ПустаяТаблица;

КонецФункции

Функция СодержаниеПроводкиНачислениеНалогаУСН(Реквизиты, ЭтоМинимальныйНалог = Ложь)
	
	Содержание = "";
	
	ПредставлениеПериода = ?(Реквизиты.ЭтоКонецГода,
		ПредставлениеПериода(Реквизиты.НачалоГода, Реквизиты.КонДата, "ФП=Истина"),
		ПредставлениеПериода(НачалоКвартала(Реквизиты.КонДата), Реквизиты.КонДата, "ФП=Истина"));
	
	Если Реквизиты.ЭтоКонецГода Тогда
		СтрВидНалога = ?(ЭтоМинимальныйНалог, НСтр("ru = ' минимальный'"), "");
		Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начислен%1 налог, уплачиваемый в связи с применением УСН, за %2'"),
			СтрВидНалога,
			ПредставлениеПериода);
	Иначе
	    Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начислен авансовый платеж по налогу, уплачиваемому в связи с применением УСН, за %1'"),
			ПредставлениеПериода);
	КонецЕсли;

	Возврат Содержание;
	
КонецФункции

Процедура СформироватьДвиженияНачислениеНалогаУСН(ТаблицаПроводок, ТаблицаСправкиРасчета, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНачисленияНалогаУСН(ТаблицаПроводок, ТаблицаСправкиРасчета, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	// проводка по начислению налога
	Для каждого СтрокаПроводки Из Параметры.Проводки Цикл
	
		Проводка = Движения.Хозрасчетный.Добавить();
		
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаПроводки);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрибылиИУбытки", СтрокаПроводки.ПрибылиИУбытки);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", СтрокаПроводки.ВидыПлатежейВГосБюджет);
		
		Движения.Хозрасчетный.Записывать = Истина;
		
	КонецЦикла;
	
	// данные для справки-расчета
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения, Параметры.СправкаРасчет, Параметры.Реквизиты, "РасчетНалогаУСН");
	
КонецПроцедуры

Функция ПодготовитьПараметрыНачисленияНалогаУСН(ТаблицаПроводок, ТаблицаСправкиРасчета, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"								// <Дата> - период движений - дата документа
		+ "Регистратор,"						// <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		+ "Организация,"						// <СправочникСсылка.Организации> - организация
		+ "НачалоГода,"							// <Дата> - дата начала года
		+ "КонДата,"							// <Дата> - конец текущего квартала
		+ "СтавкаНалогаУСН,"					// <Число, 5, 2> - налоговая ставка
		+ "ПрименяетсяУСН,"						// <Булево> - признак применения УСН
		+ "ПрименяетсяУСНДоходы,"				// <Булево> - признак применения УСН с объектом налогообложения "Доходы"
		+ "ПрименяетсяУСНДоходыМинусРасходы";	// <Булево> - признак применения УСН с объектом "Доходы минус расходы"
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Проводки
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период проводок - дата документа
		+ "Организация,"			// <СправочникСсылка.Организации> - организация
		+ "СчетДт,"					// <ПланСчетовСсылка.Хозрасчетный> - счет дебета
		+ "СчетКт,"					// <ПланСчетовСсылка.Хозрасчетный> - счет кредита
		+ "ПрибылиИУбытки,"			// <ПеречислениеСсылка.ПрибылиИУбытки> - субконто счета дебета
		+ "ВидыПлатежейВГосБюджет,"	// <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - субконто кредита
		+ "Сумма,"					// <Число, 15, 2> - сумма проводки
		+ "Содержание";				// <Строка, 150> - содержание проводки
		
	Параметры.Вставить("Проводки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПроводок, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СправкаРасчет
	
	СписокОбязательныхКолонок = ""
		+ "ПериодРасчета,"				// <Дата> - период расчета (конец квартала)
		+ "Организация,"				// <СправочникСсылка.Организации> - организация
		+ "ОбъектНалогообложения,"		// <ПеречислениеСсылка.ОбъектыНалогообложенияПоУСН> - объект налогообложения
		+ "Доходы,"						// <<Число, 15, 2>> - сумма доходов за период (с начала года)
		+ "Расходы,"					// <<Число, 15, 2>> - сумма расходов за период (с начала года)
		+ "ПеренесенныеУбытки,"			// <<Число, 15, 2>> - сумма убытков, перенесенных на текущий налоговый период и уменьшающих налоговую базу
		+ "НалоговаяБаза,"				// <<Число, 15, 2>> - налоговая база с начала года
		+ "СтавкаНалогаУСН,"			// <<Число, 5, 2>> - ставка налога УСН
		+ "НалогВсего,"					// <<Число, 15, 2>> - сумма налога, рассчитанного от налоговой базы и ставки с начала года
		+ "РасходыУменьшающиеНалог,"	// <<Число, 15, 2>> - сумма расходов, уменьшающих налог при УСН-доходы (с начала года)
		+ "ПроцентУменьшенияНалога,"	// <<Число, 3, 0>> - максимально допустимый процент уменьшения налога на расходы по взносам, больничным и т.п. при УСН-Доходы
		+ "УменьшениеНалогаФакт,"		// <<Число, 15, 2>> - сумма, на которую фактически уменьшен налог (при УСН-доходы) с учетом процента ограничения
		+ "НалогИсчисленныйВсего,"		// <<Число, 15, 2>> - сумма фактически исчисленного налога с начала года по текущий квартал включительно
		+ "МинимальныйНалог,"			// <<Число, 15, 2>> - сумма минимального налога (при УСН доходы-расходы) по итогам налогового периода
		+ "АвансовыеПлатежи,"			// <Число, 15, 2> - сумма начисленных в предыдущих кварталах (с начала года) авансовых платежей по налогу
		+ "НалогКУплате";				// <Число, 15, 2> - сумма налога (авансового платежа), начисленного к уплате в текущем периоде
		
	Параметры.Вставить("СправкаРасчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСправкиРасчета, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// УПЛАТА НАЛОГА (АВАНСОВОГО ПЛАТЕЖА)

Функция ДанныеДляУплатыНалога(Организация, ПериодУплаты, Правило = Неопределено) Экспорт

	Перем Платежи;
	
	КонецПериода = КонецКвартала(ПериодУплаты);
	
	Если НЕ УчетнаяПолитика.ПрименяетсяУСН(Организация, КонецПериода) Тогда
		Возврат Платежи;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецПериода, ВидГраницы.Включая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК Субконто1,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕНприУСН),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0"
	;

	ВыборкаОстатки = Запрос.Выполнить().Выбрать();
	Если ВыборкаОстатки.Следующий() Тогда
		// в результате запроса всегда либо 1 запись, либо 0
		Платежи = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НоваяТаблицаПлатежей();
		СтрокаПлатеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, ВыборкаОстатки);
	КонецЕсли;
	
	Возврат Платежи;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Параметры объекта для настройки отражения в УСН при программной обработке
//
Функция СтруктураПараметровОбъектаДляУСН(Объект) Экспорт

	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыНастройкиУСН();
	
	// общие параметры
	ПараметрыУСН.Вставить("ПрименениеУСН", УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата));
	ПараметрыУСН.Вставить("ПрименениеУСНДоходы", УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата));
	
	Если Не ПараметрыУСН.ПрименениеУСН Тогда
		Возврат ПараметрыУСН;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыУСН, Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	ПараметрыУСН.Вставить("ВалютаРегламентированногоУчета",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	СтруктураКурса = Новый Структура("Курс, Кратность", 1, 1);
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеОбъекта) Тогда
		ПараметрыУСН.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		Если Объект.ВалютаДокумента <> ПараметрыУСН.ВалютаРегламентированногоУчета Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КонецЕсли;
	Иначе
		ПараметрыУСН.Вставить("ВалютаДокумента", ПараметрыУСН.ВалютаРегламентированногоУчета);
	КонецЕсли;

	ПараметрыУСН.КурсДокумента      = СтруктураКурса.Курс;
	ПараметрыУСН.КратностьДокумента = СтруктураКурса.Кратность;
	
	// специфичные параметры
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеОбъекта) Тогда
		
		ПараметрыУСН.Вставить("ВидОперации", Объект.ВидОперации);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
			
			ПараметрыУСН.НТТПоПродажнымЦенам = Объект.ВыручкаСНТТ
				И (УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата)
					= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
			
			РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Объект.Организация, Объект.Дата);
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(Объект.Организация, Объект.Контрагент, Объект.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД));
			
			ПараметрыУСН.НТТНаЕНВД = БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
			
		КонецЕсли;
		
		// В банковских и кассовых документах договор контрагента хранится в ТЧ "РасшифровкаПлатежа"
		Если (ЕстьПрочиеРасчетыПоДоходам(Объект.ВидОперации)
			Или ЕстьПрочиеРасчетыПоРасходам(Объект.ВидОперации))
			И Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		
			ПараметрыУСН.Вставить("ДоговорКонтрагента", Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыУСН;
	
КонецФункции

Функция СодержаниеУСНРедактируетсяПользователем(ДокументОбъект) Экспорт

	Результат = Ложь;
	
	// учтем возможное отсутствие нужных реквизитов
	ДанныеОбъекта = Новый Структура("ВидОперации, СчетУчетаРасчетовСКонтрагентом, СубконтоДт1");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
	
	Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		
		Результат = Истина;
		
	ИначеЕсли (ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога) Тогда
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.СчетУчетаРасчетовСКонтрагентом) Тогда
			
			СчетНалога = ДанныеОбъекта.СчетУчетаРасчетовСКонтрагентом;
			
			СчетаНалоговИВзносов  = УчетУСНВызовСервераПовтИсп.СчетаУчетаАвтоначисляемыхНалоговВключаемыхВРасходы();
			СчетаНалоговИзПрибыли = УчетУСНВызовСервераПовтИсп.СчетаУчетаНалоговУменьшающихПрибыль();
			
			ЭтоНалогИлиВзнос  = СчетаНалоговИВзносов.Найти(СчетНалога) <> Неопределено;
			ЭтоНалогИзПрибыли = СчетаНалоговИзПрибыли.Найти(СчетНалога) <> Неопределено;
			
			НалогНачисленВручную = НЕ (ЭтоНалогИлиВзнос ИЛИ ЭтоНалогИзПрибыли);
			
			ЭтоНеНалог = Ложь;
			Если НЕ НалогНачисленВручную И ТипЗнч(ДанныеОбъекта.СубконтоДт1) = Тип("ПеречислениеСсылка.ВидыПлатежейВГосбюджет") Тогда
				ВидыНалоговыхПлатежей = УчетУСНВызовСервераПовтИсп.ВидыПлатежейВГосБюджетНалоговые();
				ЭтоНеНалог = ВидыНалоговыхПлатежей.Найти(ДанныеОбъекта.СубконтоДт1) = Неопределено;
			КонецЕсли;
			
			Результат = (НалогНачисленВручную ИЛИ ЭтоНеНалог);
			
		Иначе
			
			Результат = Истина;
			
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция СуммаДохода(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	СуммаДохода = 0;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат СуммаДохода;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК СуммаДохода
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДохода = Выборка.СуммаДохода;
	КонецЕсли;
	
	Возврат СуммаДохода;
	
КонецФункции

Функция ДатаНачалаАктуальногоПериодаДляПереходаНаУпрощеннуюНастройкуКУДиР() Экспорт 
	
	Возврат '20131001';
	
КонецФункции

Функция ПеренесенныеУбыткиПрошлыхЛет(Организация, НачалоПериода, КонецПериода)

	СтруктураУбытков = Новый Структура("ПеренесенныеУбытки, УбытокОтУплатыМинимальногоНалога", 0, 0);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РегистрацияСуммыУбыткаУСН.СуммаНеПеренесенныхУбытков) КАК СуммаНеПеренесенныхУбытков,
	|	РегистрацияСуммыУбыткаУСН.Ссылка
	|ПОМЕСТИТЬ НеперенесенныеУбытки
	|ИЗ
	|	Документ.РегистрацияСуммыУбыткаУСН.Убытки КАК РегистрацияСуммыУбыткаУСН
	|ГДЕ
	|	РегистрацияСуммыУбыткаУСН.Ссылка.Организация = &Организация
	|	И РегистрацияСуммыУбыткаУСН.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегистрацияСуммыУбыткаУСН.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрацияСуммыУбыткаУСН.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РегистрацияСуммыУбыткаУСН.УбытокОтУплатыМинимальногоНалога), 0) КАК УбытокОтУплатыМинимальногоНалога,
	|	ЕСТЬNULL(СУММА(НеперенесенныеУбытки.СуммаНеПеренесенныхУбытков), 0) КАК СуммаНеПеренесенныхУбытков
	|ИЗ
	|	НеперенесенныеУбытки КАК НеперенесенныеУбытки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСуммыУбыткаУСН КАК РегистрацияСуммыУбыткаУСН
	|		ПО НеперенесенныеУбытки.Ссылка = РегистрацияСуммыУбыткаУСН.Ссылка"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураУбытков.ПеренесенныеУбытки				  = Выборка.СуммаНеПеренесенныхУбытков;
		СтруктураУбытков.УбытокОтУплатыМинимальногоНалога = Выборка.УбытокОтУплатыМинимальногоНалога;
	КонецЕсли;
	
	Возврат СтруктураУбытков;

КонецФункции
