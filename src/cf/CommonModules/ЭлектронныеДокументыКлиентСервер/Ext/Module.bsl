////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыКлиентСервер: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//
Функция ПолучитьТекстСостоянияЭД(СсылкаНаВладельца, Форма = Неопределено) Экспорт
	
	Гиперссылка = Ложь;
	ТекстСостоянияЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка);
	
	Если НЕ Форма = Неопределено Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ТекстСостоянияЭД", ТекстСостоянияЭД);
		СтруктураПараметров.Вставить("ВидОперации", "УстановкаГиперссылки");
		СтруктураПараметров.Вставить("ЗначениеПараметра", Гиперссылка);
		#Если  ТолстыйКлиентОбычноеПриложение Тогда
			ЭлектронныеДокументыПереопределяемый.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров);
		#Иначе
			ЭлектронныеДокументыСлужебныйВызовСервера.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров);
		#КонецЕсли
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

// Формирует текст сообщения, подставляя значения
// параметров в шаблоны сообщений.
//
// Параметры
//  ВидПоля       - Строка - может принимать значения:
//                  Поле, Колонка, Список
//  ВидСообщения  - Строка - может принимать значения:
//                  Заполнение, Корректность
//  Параметр1     - Строка - имя поля
//  Параметр2     - Строка - номер строки
//  Параметр3     - Строка - имя списка
//  Параметр4     - Строка - текст сообщения о некорректности заполнения
//
// Возвращаемое значение:
//   Строка - текст сообщения
//
Функция ПолучитьТекстСообщения(ВидПоля = "Поле", ВидСообщения = "Заполнение",
	Параметр1 = "", Параметр2 = "",	Параметр3 = "", Параметр4 = "") Экспорт

	ТекстСообщения = "";

	Если ВРег(ВидПоля) = "ПОЛЕ" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" не заполнено.'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" заполнено некорректно.
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "КОЛОНКА" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3"".'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнена колонка ""%1"" в строке %2 списка ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "СПИСОК" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%3"".'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнен список ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметр1, Параметр2, Параметр3, Параметр4);

КонецФункции

// Определяет отбор динамического списка в зависимости от наличия режима совместимости
//
// Параметры:
//  Список  - ДинамическийСписок - список, для которого надо определить отбор
//
// Возвращаемое значение:
//   Отбор   - требуемый отбор
//
Функция ОтборДинамическогоСписка(Список) Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		Возврат Список.КомпоновщикНастроек.Настройки.Отбор;
	Иначе
		Возврат Список.Отбор;
	КонецЕсли;

КонецФункции

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  ИдентификаторНазначения - УникальныйИдентификатор - к какой форме должно быть "привязано" сообщение
//
Процедура СообщитьПользователю(ТекстСообщенияПользователю, ИдентификаторНазначения) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
	Сообщение.Сообщить();
	
КонецПроцедуры

// Проверяет заполнение обязательных реквизитов настроек ЭДО с банками
//
// Параметры:
//  Объект  - СправочникОбъект.СоглашенияОбИспользованииЭД - проверяемая настройка ЭДО
//
// Возвращаемое значение:
//   Булево   - Истина - заполнены все необходимые реквизиты
//
Функция ЗаполненыРеквизитыНастройкиЭДОСБанками(Объект, ЭтоТест = Ложь) Экспорт
	
	Отказ = Ложь;
	
	СтатусДействует = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует");
	Если Не ЭтоТест И Объект.СтатусСоглашения <> СтатусДействует Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если ЭтоТест И Объект.СтатусСоглашения <> СтатусДействует Тогда
		ТекстСообщения = Нстр("ru = 'Данная настройка ЭДО будет активна только в статусе %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтатусДействует);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ПолучитьТекстСообщения("Поле", "Заполнение", "Организация");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект", Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ПолучитьТекстСообщения("Поле", "Заполнение", "Банк");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект", Отказ);
	КонецЕсли;
		
	Если (Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн")
			ИЛИ Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен"))
		И (НЕ ЗначениеЗаполнено(Объект.ИдентификаторОрганизации)
			ИЛИ Объект.ИдентификаторОрганизации = "00000000-0000-0000-0000-000000000000") Тогда
		ТекстСообщения = ПолучитьТекстСообщения("Поле", "Заполнение", "Идентификатор организации");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИдентификаторОрганизации", "Объект", Отказ);
	КонецЕсли;
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
		И НЕ ЗначениеЗаполнено(Объект.ДополнительнаяОбработка) Тогда
		ТекстСообщения = ПолучитьТекстСообщения("Поле", "Заполнение", "Дополнительная обработка");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДополнительнаяОбработка", "Объект", Отказ);
	КонецЕсли;
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн")
		ИЛИ Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.АдресСервера) Тогда
			ТекстСообщения = ПолучитьТекстСообщения("Поле", "Заполнение", "Адрес сервера банка");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервера", "Объект", Отказ);
		КонецЕсли;
		Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
			Если НЕ ЗначениеЗаполнено(Объект.РесурсИсходящихДокументов) Тогда
				ТекстСообщения = ПолучитьТекстСообщения("Поле", "Заполнение", "Ресурс для отправки");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "РесурсИсходящихДокументов", "Объект", Отказ);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.РесурсВходящихДокументов) Тогда
				ТекстСообщения = ПолучитьТекстСообщения("Поле", "Заполнение", "Ресурс для получения");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "РесурсВходящихДокументов", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если (Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
			ИЛИ Объект.ИспользуетсяКриптография) И Объект.СертификатыПодписейОрганизации.Количество() = 0 Тогда
		ТекстСообщения = ПолучитьТекстСообщения("Список", "Заполнение", , , "Сертификаты ключа ЭП");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СертификатыПодписейОрганизации", "Объект", Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

// Формирует текст гиперссылки для размещения в форме элемента справочника БанковскиеСчетаОрганизации
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, указанная в счете
//  Банк  - СправочникСсылка.КлассификаторБанковРФ - банк, указанный в счете
//
// Возвращаемое значение:
//   Строка - текст для гиперссылки
//
Функция ЗаголовокНастройкиЭДОСБанком(Знач Организация, Знач Банк) Экспорт
	
	ТекущаяНастройка = ЭлектронныеДокументыСлужебныйВызовСервера.НастройкаЭДОСБанком(Организация, Банк);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		Возврат(Нстр("ru = 'Создать настройку ЭДО для прямого обмена с банком'"));
	Иначе
		РеквизитыНастройкиЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыНастройкиЭДО(ТекущаяНастройка);
		СтатусДействует = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует");
		Если РеквизитыНастройкиЭДО.СтатусСоглашения = СтатусДействует И НЕ РеквизитыНастройкиЭДО.ПометкаУдаления Тогда
			Шаблон = Нстр("ru = 'Используется прямой обмен с банком, настройка ЭДО: %1'");
		Иначе
			Шаблон = Нстр("ru = 'Прямой обмен с банком не действует, настройка ЭДО: %1'");
		КонецЕсли;
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущаяНастройка);
	КонецЕсли
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Определяет необходимость конкретного действия из перечня действий.
//
// Параметры:
//  ПереченьДействий - Строка, перечень действий, которые должны быть совершены с объектом
//  Действие - Строка, конкретное действие, которое нужно найти в перечне действий
// 
// Возвращаемое значение:
//  Булево - Если действие найдено - возвращается Истина, иначе Ложь
//
Функция ЕстьДействие(ПереченьДействий, Действие) Экспорт
	
	Если Найти(ПереченьДействий, Действие) > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа со служебными ЭД

// В процедуре выполняются действия по служебным ЭД (извещение о получении, уведомление об уточнении):
// формирование, утверждение, подписание, отправка.
//
// Параметры:
//  МассивЭД - массив - содержит ссылки на ЭД, по которым требуется сформировать служебные ЭД (электронные
//    документы, владельцы обрабатываемых служебных ЭД).
//  ВидЭД - перечисление - вид ЭД, которые надо обработать (может принимать значения: Извещение о получении
//    и уведомление об уточнении).
//  ТекстУведомления - строка - текст уведомления, введенный пользователем, отклонившим ЭД (имеет смысл,
//    только для ВидЭД = УведомлениеОбУточнении).
//  ДопПараметры - структура - структура дополнительных параметров
//
Процедура СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭД,
	ВидЭД, ТекстУведомления = "", ДопПараметры = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	КолСформированных = 0;
	КолУтвержденных   = 0;
	КолПодписанных    = 0;
	КолПодготовленных = 0;
	КолОтправленных   = 0;
	// Структура соответствий содержит соответствия: соглашений и сертификатов подписи, соглашений и сертификатов авторизации,
	// сертификатов и структур параметров этих сертификатов (структура параметров сертификатов содержит: ссылку на сертификат,
	// признак "запомнить пароль к сертификату", пароль к сертификату, признак "отозван", отпечаток, файл сертификата, а так же
	// если этот сертификат используется для авторизации, то либо расшифрованный маркер, либо зашифрованный маркер или и то и другое).
	НемедленнаяОтправкаЭД = Неопределено;
	ВыполнятьКриптооперацииНаСервере = Неопределено;
	ЭлектронныеДокументыСлужебныйВызовСервера.ИнициализироватьПеременные(
		ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД);
	Если МассивЭД.Количество() > 0 И ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении") Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.УдалитьИзМассиваНеОбрабатываемыеЭД(МассивЭД);
	КонецЕсли;
	ВыполнитьОповещение = (ОписаниеОповещения <> Неопределено);
	Если МассивЭД.Количество() > 0 Тогда
		МассивСлужебныхЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СформироватьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУведомления);
		Если ЗначениеЗаполнено(МассивСлужебныхЭД) Тогда
			СтМассивовСтруктурСертификатов = Новый Структура;
			Действия = "ПодписатьОтправить";
			#Если Клиент Тогда
				ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(Новый Массив,
					Действия, ДопПараметры, МассивСлужебныхЭД, ОписаниеОповещения);
				ВыполнитьОповещение = Ложь;
			#Иначе
				СтруктураСоответствий = Неопределено;
				СтСоотвСоглашенийИМассивовЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнитьДействияПоЭД(Новый Массив,
					Новый Массив, Действия, ДопПараметры, МассивСлужебныхЭД, СтруктураСоответствий);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	Если ВыполнитьОповещение И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		#Если Клиент Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

