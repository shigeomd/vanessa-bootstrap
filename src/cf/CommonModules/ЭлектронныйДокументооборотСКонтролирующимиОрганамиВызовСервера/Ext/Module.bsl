////////////////////////////////////////////////////////////////////////////////
// ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// 
Функция ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов) Экспорт

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	
КонецФункции

// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции 

Функция ВыгрузитьДокументСервер(СсылкаНаОтчет, ИдентификаторФормыВызова) Экспорт
	СвойстваФайлаВыгрузки = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ВыгрузитьДокумент(СсылкаНаОтчет, ИдентификаторФормыВызова);
	Если НЕ ЗначениеЗаполнено(СвойстваФайлаВыгрузки) Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("АдресФайлаВыгрузки, ИмяФайлаВыгрузки", СвойстваФайлаВыгрузки.АдресФайлаВыгрузки, СвойстваФайлаВыгрузки.ИмяФайлаВыгрузки);
	КонецЕсли;
КонецФункции

// Для переданной организции определяет, является ли она юридическим лицом
// 
// Параметры:
//  СправочникСсылка.Организации - организация, для которой определяется, является ли она юридическим лицом
//
// Результат:
//  Булево - Истина, если организация - юридическое лицо, Ложь - в противном случае
//
Функция ЭтоЮрЛицо(Организация) Экспорт
	Возврат РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
КонецФункции

Функция ПолучитьПутьВК() Экспорт
	
	Компоненты = Новый Соответствие;
	АктуальнаяВерсия = 0;
	
	ОбработатьМакетыСКомпонентойОбмена(Метаданные.ОбщиеМакеты, Компоненты, АктуальнаяВерсия);
		
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	Если КонтекстЭДОСервер <> Неопределено Тогда
		ОбработатьМакетыСКомпонентойОбмена(
			КонтекстЭДОСервер.Метаданные().Макеты, Компоненты, АктуальнаяВерсия, КонтекстЭДОСервер.ПутьКОбъекту);
	КонецЕсли;
	
	Возврат Компоненты.Получить(АктуальнаяВерсия);

КонецФункции

Функция ФИОФизЛица(ФизЛицо) Экспорт
	
	МассивПоказателей = Новый Массив;
		
	МассивПоказателей.Добавить("Фамилия");
	МассивПоказателей.Добавить("Имя");
	МассивПоказателей.Добавить("Отчество");
	
	ДатаЗначения = ТекущаяДатаСеанса();

	Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(ФизЛицо, МассивПоказателей, ДатаЗначения);
	
КонецФункции

// Функция возвращает вид отправляемого документа 
// Параметры:      
//  ОбъектСсылка - ссылка на отправляемый объект.
// Результат:
//	СправочникСсылка.ВидыОтправляемыхДокументов, в случае неудачи - пустая ссылка данного типа
//
Функция ПолучитьВидОтправляемогоДокументаПоСсылке(ОбъектСсылка) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		ВидУведомления = ОбъектСсылка.ВидУведомления;
		
		Если ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.Форма_1_6_Учет Тогда 
			Возврат Справочники.ВидыОтправляемыхДокументов.ВыборНалоговогоОрганаДляПостановкиНаУчет;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОткрытиеЗакрытиеСчета;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_2 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УчастиеВРоссийскихИностранныхОрганизациях;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_1 Тогда 
			Возврат Справочники.ВидыОтправляемыхДокументов.СозданиеОбособленныхПодразделений;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_2 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗакрытиеОбособленныхПодразделений;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_4 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РеорганизацияЛиквидацияОрганизации;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПостановкаНаУчетОрганизацииПлательщикаЕНВД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПостановкаНаУчетПредпринимателяПлательщикаЕНВД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СнятиеСУчетаОрганизацииПлательщикаЕНВД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СнятиеСУчетаПредпринимателяПлательщикаЕНВД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбИзмененииОбъектаНалогообложенияПоУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИзменениеОбъектаУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбОтказеОтУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОтказОтУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбУтратеПраваНаУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УтратаПраваНаУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПереходНаУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПрекращенииДеятельностиПоУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПрекращениеДеятельностиУСН;
		Иначе
			Возврат Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура СкрытьЭлементыФормыПриИспользованииОднойОрганизации(Форма, ИмяЭлемента) Экспорт
		
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		
		Если ТипЗнч(ИмяЭлемента) = Тип("Массив") Тогда
			
			Для Каждого ИмяОдногоЭлемента Из ИмяЭлемента Цикл
				
				СкрываемыйЭлемент = Форма.Элементы.Найти(ИмяОдногоЭлемента);
				
				Если СкрываемыйЭлемент <> Неопределено Тогда
					СкрываемыйЭлемент.Видимость = Ложь;
				КонецЕсли;
				
			КонецЦикла; 
			
		ИначеЕсли ТипЗнч(ИмяЭлемента) = Тип("Строка") Тогда
			
			СкрываемыйЭлемент = Форма.Элементы.Найти(ИмяЭлемента);
			
			Если СкрываемыйЭлемент <> Неопределено Тогда
				
				СкрываемыйЭлемент.Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для проверки факта отправки в ФНС, ПФР или Росстат
// Функция возвращает вид отправляемого документа 
// Параметры:      
//  Ссылка - ссылка на отправляемый объект.
// Результат:
//	Истина, если объект отправлялся в контролирующие органы
//	Ложь, если объект не отправлялся в контролирующие органы
//
Функция ОбъектОтправлялсяВКонтролирующиеОрганы(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтатусыОтправки.Объект
		|ИЗ
		|	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
		|ГДЕ
		|	СтатусыОтправки.Статус в (&Статус)
		|	И СтатусыОтправки.Объект = &Объект";

	Статус = Новый Массив;
	Статус.Добавить(Перечисления.СтатусыОтправки.Отправлен);
	Статус.Добавить(Перечисления.СтатусыОтправки.Доставлен);
	Статус.Добавить(Перечисления.СтатусыОтправки.НеПринят);
	Статус.Добавить(Перечисления.СтатусыОтправки.Сдан);
	Статус.Добавить(Перечисления.СтатусыОтправки.ПринятЕстьОшибки);
	
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("Объект", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаголовокГиперссылкиЗаявления(Организация) Экспорт
	
	ЗаголовокПервичногоЗаявления = НСтр("ru = 'Заявление на подключение к 1С-Отчетности'");
	ЗаголовокВторичногоЗаявления = НСтр("ru = 'Заявление на изменение реквизитов или замену сертификата'");
	
	// Инициализируем контекст
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	// проверяем на наличие права к документообороту
	Если КонтекстЭДОСервер = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат ЗаголовокПервичногоЗаявления;
	КонецЕсли;
	
	ПоддерживаетсяВторичноеЗаявление = КонтекстЭДОСервер.ПоддерживаетсяВторичноеЗаявление(Организация);
	
	Если ПоддерживаетсяВторичноеЗаявление Тогда
		Возврат ЗаголовокВторичногоЗаявления;
	Иначе
		Возврат ЗаголовокПервичногоЗаявления;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыОтображенияВЖурналеОтчетов() Экспорт
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("ДокСсылка",					Неопределено);
	ПараметрыОтчета.Вставить("НаименованиеОтчета",			"");
	ПараметрыОтчета.Вставить("ВидКонтролирующегоОргана",	Неопределено);
	ПараметрыОтчета.Вставить("КодКонтролирующегоОргана",	"");
	ПараметрыОтчета.Вставить("ДатаНачалаОП",				Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("ДатаОкончанияОП",				Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("Организация",					Неопределено);
	ПараметрыОтчета.Вставить("СтатусОтправки",				"");
	ПараметрыОтчета.Вставить("ПредставлениеВида",			"");
	ПараметрыОтчета.Вставить("ДатаСоздания",				Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("Комментарий",					"");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Процедура ИзменитьЗначениеВРегистреЖурналОтправокВКонтролирующиеОрганы(Ссылка, ИмяПоля, Знач НовоеЗначение) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ссылка.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		ЗаписьНабора[ИмяПоля] = НовоеЗначение;
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

Функция ВидыОтправляемыхУведомленийОСпецрежимахНалогообложения() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыОтправляемыхДокументов.Ссылка КАК Вид
		|ИЗ
		|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
		|ГДЕ
		|	ВидыОтправляемыхДокументов.Ссылка В ИЕРАРХИИ(&Уведомления)
		|	И ВидыОтправляемыхДокументов.Ссылка <> &Уведомления";

	Запрос.УстановитьПараметр("Уведомления", Справочники.ВидыОтправляемыхДокументов.Уведомления);

	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивВидовУведомлений = Результат.ВыгрузитьКолонку("Вид");
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.МассивВидовПрочихУведомленийПоддерживающихДокументооборот(МассивВидовУведомлений);
	
КонецФункции

Функция ИмяПеречисления(ЗначениеПеречисления) Экспорт
	
	Если ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
	
		Возврат ОбщегоНазначения.ИмяЗначенияПеречисления(ЗначениеПеречисления);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПолноеИмяТипа(Тип) Экспорт

	Возврат Метаданные.НайтиПоТипу(Тип).ПолноеИмя();

КонецФункции

Функция ПолучитьСписокВложений(ВладелецВложения) Экспорт
	
	СписокИменФайлов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенияНеформализованныхДокументов.ИмяФайла,
	|	ВложенияНеформализованныхДокументов.Тип,
	|	ВложенияНеформализованныхДокументов.Размер
	|ИЗ
	|	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов
	|ГДЕ
	|	ВложенияНеформализованныхДокументов.НеформализованныйДокумент = &НеформализованныйДокумент";
	Запрос.УстановитьПараметр("НеформализованныйДокумент", ВладелецВложения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокИменФайлов.Добавить(Новый Структура("ИмяФайла,Размер", Выборка.ИмяФайла, Выборка.Размер));
	КонецЦикла;
	
	Возврат СписокИменФайлов;
	
КонецФункции

Функция ПолучитьВложенияДокументовРеализацииПолномочийНалоговыхОрганов(Владелец) Экспорт
	
	СписокИменФайлов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла,
	|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Размер
	|ИЗ
	|	РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов
	|ГДЕ
	|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокИменФайлов.Добавить(Новый Структура("ИмяФайла,Размер", Выборка.ИмяФайла, Выборка.Размер));
	КонецЦикла;
	
	Возврат СписокИменФайлов;
	
КонецФункции

Процедура УдалитьВыборCSPИзВременныхНастроек() Экспорт

	Попытка
		
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		"МастерФормированияЗаявкиНаПодключение",
		"ВыбранныйКриптопровайдер",
		ИмяПользователя()
		);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Удаление сохраненных настроек мастера подключения к 1С-Отчетности'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;

КонецПроцедуры

Функция УчетнаяЗаписьОрганизации(Организация) Экспорт
	
	ВидОбменаСКонтролирующимиОрганами = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ВидОбменаСКонтролирующимиОрганами");
	Если ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Возврат Организация.УчетнаяЗаписьОбмена;
	Иначе
		Возврат Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяЗначенияПеречисленияСпецоператорыСвязиПоСинониму(Синоним) Экспорт
	
	НужныйИндекс = Перечисления.СпецоператорыСвязи.Индекс(Синоним);
	ИмяЗначения = Перечисления.СпецоператорыСвязи.Прочие.Метаданные().ЗначенияПеречисления[НужныйИндекс].Имя;
	Возврат ИмяЗначения;
	
КонецФункции

Функция ПолучитьПараметрСпецоператора(Знач Спецоператор, Параметр) Экспорт
	
	Если ЗначениеЗаполнено(Спецоператор) Тогда
		
		Имя 			= ПолучитьИмяЗначенияПеречисленияСпецоператорыСвязиПоСинониму(Спецоператор);
		КонтекстЭДО 	= ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		Макет 			= КонтекстЭДО.ПолучитьМакет("ПараметрыСпецоператоровСвязи");
		НомерКолонки 	= Макет.Область(Параметр).Лево;
		
		Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл
			ТекРегион = Макет.Область(НомерСтроки, 1).Текст;
			
			Если нРег(ТекРегион) = нРег(Имя) Тогда
				
				Возврат(Макет.Область(НомерСтроки,  НомерКолонки).Текст);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗадатьКодОрганаФСГСВОрганизации(Организация, НовыйКодОрганаФСГС) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ЗадатьКодОрганаФСГСВОрганизации(Организация, НовыйКодОрганаФСГС, СтандартнаяОбработка);

	Если СтандартнаяОбработка Тогда
		ОрганизацияОбъект = Организация.ПолучитьОбъект();
		ОрганизацияОбъект.КодОрганаФСГС = НовыйКодОрганаФСГС;
		ОрганизацияОбъект.Записать();
	КонецЕсли;

КонецПроцедуры

Функция ЕстьДоступККонтекстуЭДО() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер <> Неопределено;
	
КонецФункции

Функция ЭтоВариантИнтерфейсаТакси() Экспорт
	
	Возврат ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	
КонецФункции

Функция ВерсияВнешнегоМодуляДокументооборота() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля.Получить();
	
КонецФункции

Функция АдресТекстаОтправленногоЗаявления(ЗаявлениеСсылка) Экспорт
	Возврат ПоместитьВоВременноеХранилище(ЗаявлениеСсылка.ТекстОтправленногоЗаявления.Получить(), Новый УникальныйИдентификатор);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьМакетыСКомпонентойОбмена(КоллекцияМакетов, Компоненты, АктуальнаяВерсия, ПутьКОбъекту = "")
	
	ЭтоВнешняяОбработка = ЗначениеЗаполнено(ПутьКОбъекту);
	Для Каждого Макет Из КоллекцияМакетов Цикл
		Если Найти(Макет.Имя, "КомпонентаОбмена") Тогда
			Если Макет.Имя = "КомпонентаОбмена" Тогда
				Компоненты.Вставить(?(ЭтоВнешняяОбработка, 1000000, 0), Макет.Имя);
			Иначе
				ВерсияИзМакета = Число(СтрЗаменить(Макет.Имя, "КомпонентаОбмена", ""));
				Версия = ?(ЭтоВнешняяОбработка, 1000000 + ВерсияИзМакета, ВерсияИзМакета);
				Компоненты.Вставить(Версия, ?(ЗначениеЗаполнено(ПутьКОбъекту), ПутьКОбъекту + "." + Макет.ПолноеИмя(), Макет.ПолноеИмя()));
				
				АктуальнаяВерсия = Макс(АктуальнаяВерсия, Версия);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти
