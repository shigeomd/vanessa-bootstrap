////////////////////////////////////////////////////////////////////////////////
// УчетУСНКлиентСервер: процедуры и функции для отражения документов в учете УСН,
// которые могут вызываться как на клиенте в формах документов, так и на сервере
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////
// Заполнение данных для УСН в формах документов

// Структура параметров для процедур и функций отражения документов в УСН
//
Функция ПараметрыНастройкиУСН() Экспорт

	Параметры = Новый Структура;
	
	// обязательные
	Параметры.Вставить("ПрименениеУСН",       Ложь);
	Параметры.Вставить("ПрименениеУСНДоходы", Ложь);
	
	// общие - заполняются из свойств объекта и реквизитов формы
	Параметры.Вставить("ВидОперации");
	Параметры.Вставить("Налог");
	Параметры.Вставить("Контрагент");
	Параметры.Вставить("ДоговорКонтрагента");
	Параметры.Вставить("СчетУчетаРасчетовСКонтрагентом");
	Параметры.Вставить("ПринятоОт", "");
	Параметры.Вставить("Выдано", "");
	Параметры.Вставить("ВалютаДокумента");
	Параметры.Вставить("СтатьяДвиженияДенежныхСредств");
	Параметры.Вставить("СубконтоДт1");
	Параметры.Вставить("СубконтоКт1");
	Параметры.Вставить("ВалютаРегламентированногоУчета");
	Параметры.Вставить("КурсДокумента", 1);
	Параметры.Вставить("КратностьДокумента", 1);
	
	// специфичные - заполняются явным образом по месту использования
	Параметры.Вставить("НТТПоПродажнымЦенам", Ложь);
	Параметры.Вставить("НТТНаЕНВД",           Ложь);
	
	Параметры.Вставить("ОбязательныеПараметры", "ПрименениеУСН, ПрименениеУСНДоходы");
	
	Возврат Параметры;

КонецФункции

// Возвращает структуру параметров для настройки отражения документа в УСН
// значениями из реквизитов переданной формы и объекта
//
Функция ПараметрыФормыДокументаДляУСН(Форма) Экспорт

	Параметры = ПараметрыНастройкиУСН();
	
	ЗаполнитьЗначенияСвойств(Параметры, Форма); // Параметры из ФО формы
	
	Если НЕ Параметры.ПрименениеУСН Тогда
		Возврат Параметры;
	КонецЕсли; 
	
	Объект = Форма.Объект;
	
	ЗаполнитьЗначенияСвойств(Параметры, Форма.Объект); // Параметры из реквизитов объекта
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка") Тогда
		Параметры.НТТПоПродажнымЦенам = Объект.ВыручкаСНТТ И Форма.УчетВПродажныхЦенах;
		Параметры.НТТНаЕНВД           = Форма.НТТНаЕНВД;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка") Тогда
		Параметры.НТТПоПродажнымЦенам = Форма.УчетВПродажныхЦенах;
		Параметры.НТТНаЕНВД           = Форма.НТТНаЕНВД;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Получает строковое представление порядка отражения аванса в документах поступления денежных средств
// для отображения на форме в ТЧ "Расшифровка платежа"
//
// Параметры:
//  ЗначениеПоиска      - <ПеречислениеСсылка.ПорядокОтраженияАванса|СправочникСсылка.Патенты> -
//                      значение порядка отображения аванса, сохраняемое в данных объекта
//                 
//  СоответствиеПоиска  - <ФиксированноеСоответствие> - соответствие значений и представлений порядка отражения аванса,
//                      кэшируется в реквизитах формы
//
//  СписокПредставлений  - <СписокЗначений> - список выбора поля, в которое выводится строковое представление
//                      текущего порядка отражения аванса
//
Функция ПредставлениеПорядкаОтраженияАванса(ЗначениеПоиска, СоответствиеПоиска, СписокПредставлений) Экспорт
	
	Представление = "";
	
	Если ЗначениеЗаполнено(СоответствиеПоиска) Тогда
		Для каждого КлючЗначение Из СоответствиеПоиска Цикл
			Если КлючЗначение.Значение = ЗначениеПоиска Тогда
				ЭлементСписка = СписокПредставлений.Получить(КлючЗначение.Ключ);
				Если ЭлементСписка <> Неопределено Тогда
					Представление = ЭлементСписка.Значение;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Патентная система налогообложения

// Возвращает налоговую ставку по патентной системе налогообложения
//
Функция НалоговаяСтавкаПоПатентнойСистеме(Знач Период = Неопределено) Экспорт 
	
	Возврат 6/100;
	
КонецФункции

// Рассчитывает потенциально возможный доход по патенту
//
// Параметры:
//  ПотенциальноВозможныйГодовойДоход - Число - потенциально возможный к получению годовой доход
//  ДатаНачала - Дата - дата начала действия патента
//  ДатаОкончания - Дата - дата окончания действия патента
//
Функция РассчитатьПотенциальноВозможныйДоход(ПотенциальноВозможныйГодовойДоход, ДатаНачала, ДатаОкончания) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат ПотенциальноВозможныйГодовойДоход;
	КонецЕсли;
	
	ПотенциальноВозможныйДоход = 0;
	
	ПолныхМесяцев = Месяц(ДатаОкончания) - Месяц(ДатаНачала) + 1;
	
	Если НачалоДня(ДатаНачала) <> НачалоМесяца(ДатаНачала) Тогда
		// Первый месяц неполный
		ПолныхМесяцев = ПолныхМесяцев - 1;
		ДнейВНеполномМесяце = День(КонецМесяца(ДатаНачала));
		Дней = ДнейВНеполномМесяце - День(ДатаНачала) + 1;
		ПотенциальноВозможныйДоход = ПотенциальноВозможныйДоход
			+ Окр((ПотенциальноВозможныйГодовойДоход / 12 * Дней / ДнейВНеполномМесяце), 2, 1);
	КонецЕсли;
	
	Если КонецДня(ДатаНачала) <> КонецМесяца(ДатаОкончания) Тогда
		// Последний месяц неполный
		ПолныхМесяцев = ПолныхМесяцев - 1;
		ДнейВНеполномМесяце = День(КонецМесяца(ДатаОкончания));
		Дней = День(ДатаОкончания);
		ПотенциальноВозможныйДоход = ПотенциальноВозможныйДоход
			+ Окр((ПотенциальноВозможныйГодовойДоход / 12 * Дней / ДнейВНеполномМесяце), 2, 1);
	КонецЕсли;
	
	ПотенциальноВозможныйДоход = ПотенциальноВозможныйДоход 
		+ Окр((ПотенциальноВозможныйГодовойДоход / 12 * ПолныхМесяцев), 2);
	
	Возврат ПотенциальноВозможныйДоход;
	
КонецФункции

#КонецОбласти

