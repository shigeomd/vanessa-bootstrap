
#Область ПрограммныйИнтерфейс

// Процедура регистрирует факт депонирования зарплаты.
//
// Параметры:
//  Движения 	- коллекция наборов записей движений платежного документа.
//  Отказ    	- признак отказа в проведении.
//	Зарплата	- таблица значений с данными о депонируемой зарплате:
//					см. НоваяТаблицаДепонированнойЗарплаты().
//
// Возвращаемое значение:
//
// Обработка ошибочных ситуаций
//	выдается сообщение, признак «Отказ» выставляется в Истина.
//
Процедура ЗарегистрироватьДепонированнуюЗарплату(Движения, Отказ, Знач Зарплата, ОтражатьВБухучете = Ложь) Экспорт
	
	// Взаиморасчеты с депонентами.
	ДепонируемыеСуммы = Зарплата.Скопировать();
	
	ДепонируемыеСуммы.Колонки.Добавить("ВидДвижения");
	ДепонируемыеСуммы.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
	
	ДепонируемыеСуммы.Колонки.Дата.Имя = "Период";
	
	Движения.ВзаиморасчетыСДепонентами.Загрузить(ДепонируемыеСуммы);
	
	Движения.ВзаиморасчетыСДепонентами.Записывать = Истина;
	
	// Отражение в бухучете
	Если ОтражатьВБухучете Тогда
		
		КолонкиГруппировок = "Дата, Организация";
		ОрганизацииДаты = Зарплата.Скопировать(, КолонкиГруппировок);
		ОрганизацииДаты.Свернуть(КолонкиГруппировок);
		
		Отбор = Новый Структура(КолонкиГруппировок);
		Для Каждого ОрганизацияДата Из ОрганизацииДаты Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, ОрганизацияДата);
			
			Депоненты = Зарплата.Скопировать(Отбор, "ФизическоеЛицо, Сумма");
			Депоненты.Свернуть("ФизическоеЛицо", "Сумма");
			
			ОтразитьВБухучете(Перечисления.ВидыОперацийПоЗарплате.Депонирование, Движения, Отказ, ОрганизацияДата.Организация, ОрганизацияДата.Дата, Зарплата);
			
		КонецЦикла	
		
	КонецЕсли	
	
КонецПроцедуры

// Функция возвращает информацию по остаткам депонированной зарплаты.
//
// Параметры:
//	Регистратор 	- ссылка на документ-заказчик (его выплаты депонентов не учитываются).
//	Организация		- организация
//	ДатаВыплаты		- дата выплаты депонированных сумм.
//  ФизическиеЛица	- массив ссылок на физические лица (необязательное, если не указано - по всем физлицам).
//	ДепонированоДо	- максимально допустимая дата депонирования.
//
// Возвращаемое значение:
//		НевыплаченныеДепоненты - Таблица значений с данными о депонентах вида:
//			ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			Сумма			- Число 15.2
//			Ведомость		- ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу (может быть пустым).
//
Функция ОстатокДепонированнойЗарплаты(Регистратор, Организация, ДатаВыплаты, ФизическиеЛица = Неопределено, ДепонированоДо = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор",		Регистратор);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ДатаВыплаты",		ДатаВыплаты);
	
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", ФизическиеЛица = Неопределено);
	
	Запрос.УстановитьПараметр("ДепонированоДо",	ДепонированоДо);
	Запрос.УстановитьПараметр("ПоВсемПериодам",	ДепонированоДо = Неопределено);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВзаиморасчетыСДепонентами.Ведомость,
	|	ВзаиморасчетыСДепонентами.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТДепонирования
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентами КАК ВзаиморасчетыСДепонентами
	|ГДЕ
	|	ВзаиморасчетыСДепонентами.Организация = &Организация
	|	И (&ПоВсемФизлицам
	|			ИЛИ ВзаиморасчетыСДепонентами.ФизическоеЛицо В (&ФизическиеЛица))
	|	И ВзаиморасчетыСДепонентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И (&ПоВсемПериодам
	|			ИЛИ ВзаиморасчетыСДепонентами.Период < &ДепонированоДо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеВыплаченныеДепоненты.ФизическоеЛицо,
	|	НеВыплаченныеДепоненты.Ведомость,
	|	СУММА(НеВыплаченныеДепоненты.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыСДепонентами.Ведомость КАК Ведомость,
	|		ВзаиморасчетыСДепонентами.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ВзаиморасчетыСДепонентами.СуммаОстаток КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСДепонентами.Остатки(
	|				КОНЕЦПЕРИОДА(&ДатаВыплаты, ДЕНЬ),
	|				(Ведомость, ФизическоеЛицо) В
	|					(ВЫБРАТЬ
	|						ВТДепонирования.Ведомость,
	|						ВТДепонирования.ФизическоеЛицо
	|					ИЗ
	|						ВТДепонирования)) КАК ВзаиморасчетыСДепонентами
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВзаиморасчетыСДепонентами.Ведомость,
	|		ВзаиморасчетыСДепонентами.ФизическоеЛицо,
	|		ВЫБОР
	|			КОГДА ВзаиморасчетыСДепонентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ВзаиморасчетыСДепонентами.Сумма
	|			ИНАЧЕ -ВзаиморасчетыСДепонентами.Сумма
	|		КОНЕЦ * -1
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСДепонентами КАК ВзаиморасчетыСДепонентами
	|	ГДЕ
	|		ВзаиморасчетыСДепонентами.Регистратор = &Регистратор
	|		И ВзаиморасчетыСДепонентами.Период < КОНЕЦПЕРИОДА(&ДатаВыплаты, ДЕНЬ)
	|		И (ВзаиморасчетыСДепонентами.Ведомость, ВзаиморасчетыСДепонентами.ФизическоеЛицо) В
	|				(ВЫБРАТЬ
	|					ВТДепонирования.Ведомость,
	|					ВТДепонирования.ФизическоеЛицо
	|				ИЗ
	|					ВТДепонирования)) КАК НеВыплаченныеДепоненты
	|
	|СГРУППИРОВАТЬ ПО
	|	НеВыплаченныеДепоненты.ФизическоеЛицо,
	|	НеВыплаченныеДепоненты.Ведомость
	|
	|ИМЕЮЩИЕ
	|	СУММА(НеВыплаченныеДепоненты.Сумма) > 0";
	
	ОстатокДепонированнойЗарплаты = Запрос.Выполнить().Выгрузить();
	
	Возврат ОстатокДепонированнойЗарплаты;
	
КонецФункции

// Процедура регистрирует списание (выдачу) депонированных сумм.
//
// Параметры:
//  Движения 		- коллекция наборов записей движений платежного документа.
//  Отказ    		- признак отказа в проведении.
//	Организация		- организация
//	ДатаСписания	- дата списания депонированных сумм
//	СписываемыеСуммы- таблица значений с данными о списании депонированных сумм вида:
//								•	ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//								•	Сумма (число 15.2)
//								•	Ведомость (ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу) - необязательное.
//
// Возвращаемое значение:
//
// Обработка ошибочных ситуаций
//	выдается сообщение, признак «Отказ» выставляется в Истина.
//
Процедура СписатьДепонированнуюЗарплату(Движения, Отказ, Организация, ДатаСписания, Знач Зарплата, ОтражатьВБухучете = Ложь, НомерПлатежногоДокумента = "") Экспорт
	
	Регистратор = Движения.ВзаиморасчетыСДепонентами.Отбор.Регистратор.Значение;
	Если НЕ ЗначениеЗаполнено(НомерПлатежногоДокумента) Тогда
		НомерПлатежногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "Номер");
	КонецЕсли;	
	
	// Взаиморасчеты с депонентами.
	СписываемыеСуммы = Зарплата.Скопировать();
	
	СписываемыеСуммы.Колонки.Добавить("ВидДвижения");
	СписываемыеСуммы.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	
	СписываемыеСуммы.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СписываемыеСуммы.ЗаполнитьЗначения(Организация, "Организация");
	
	СписываемыеСуммы.Колонки.Добавить("НомерПлатежногоДокумента", Новый ОписаниеТипов("Строка"));
	СписываемыеСуммы.ЗаполнитьЗначения(НомерПлатежногоДокумента, "НомерПлатежногоДокумента");
	
	СписываемыеСуммы.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СписываемыеСуммы.ЗаполнитьЗначения(ДатаСписания, "Период");
	
	Движения.ВзаиморасчетыСДепонентами.Загрузить(СписываемыеСуммы);
	
	Движения.ВзаиморасчетыСДепонентами.Записывать = Истина;
	
	// Отражение в бухучете
	Если ОтражатьВБухучете Тогда
		ОтразитьВБухучете(Перечисления.ВидыОперацийПоЗарплате.СписаниеДепонента, Движения, Отказ, Организация, ДатаСписания, Зарплата)
	КонецЕсли	
	
КонецПроцедуры

// Функция возвращает новую таблицу значений для данных о депонируемой зарплате.
//
// Возвращаемое значение:
//		Таблица значений с колонками.
//			Дата
//			Организация (СправочникСсылка.Организации)
//			ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//			Сумма
//			Ведомость (ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу) - необязательное.
//			СтатьяФинансирования (СправочникСсылка.СтатьиФинансированияЗарплата) - необязательное.
//			СтатьяРасходов (СправочникСсылка.СтатьиРасходовЗарплата)  - необязательное.
//
Функция НоваяТаблицаДепонированнойЗарплаты() Экспорт
	
	НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСДепонентами.СоздатьНаборЗаписей();
	
	Колонки = Новый Массив;
	Колонки.Добавить("Период");
	Колонки.Добавить("Организация");
	Колонки.Добавить("ФизическоеЛицо");
	Колонки.Добавить("Сумма");
	Колонки.Добавить("Ведомость");
	Колонки.Добавить("СтатьяФинансирования");
	Колонки.Добавить("СтатьяРасходов");
	Колонки = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Колонки);
	
	Таблица = НаборЗаписей.ВыгрузитьКолонки(Колонки);
	Таблица.Колонки.Период.Имя = "Дата";
	
	Возврат Таблица
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗащитаПерсональныхДанных

// Процедура обеспечивает сбор сведений о хранении данных, 
// относящихся к персональным
//
// Параметры:
//		ТаблицаСведений - таблица значений с полями:
//			Объект 			- строка, содержащая полное имя объекта метаданных,
//			ПоляРегистрации - строка, в которой перечислены имена полей регистрации, 
//								отдельные поля регистрации отделяются запятой,
//								альтернативные - символом "|",
//			ПоляДоступа		- строка, в которой перечислены через запятую имена полей доступа.
//			ОбластьДанных	- строка с идентификатором области данных, необязательно для заполнения.
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СписаниеДепонированнойЗарплаты";
	НовыеСведения.ПоляРегистрации	= "Депоненты.ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "СуммаДокумента,Депоненты.Сумма";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрНакопления.ВзаиморасчетыСДепонентами";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Сумма";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// Заполняет состав видов доступа, используемых при ограничении прав объектов метаданных.
// Если состав видов доступа не заполнен, отчет "Права доступа" покажет некорректные сведения.
//
// Обязательно требуется заполнить только виды доступа, используемые
// в шаблонах ограничения доступа явно, а виды доступа, используемые
// в наборах значений доступа могут быть получены из текущего состояния
// регистра сведений НаборыЗначенийДоступа.
//
// Подробнее см. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
//
Процедура УправлениеДоступомЗаполнитьВидыОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Документ.ДепонированиеЗарплаты.Чтение.ГруппыФизическихЛиц
	|Документ.ДепонированиеЗарплаты.Чтение.Организации
	|Документ.ДепонированиеЗарплаты.Изменение.ГруппыФизическихЛиц
	|Документ.ДепонированиеЗарплаты.Изменение.Организации
	|Документ.СписаниеДепонированнойЗарплаты.Чтение.ГруппыФизическихЛиц
	|Документ.СписаниеДепонированнойЗарплаты.Чтение.Организации
	|Документ.СписаниеДепонированнойЗарплаты.Изменение.ГруппыФизическихЛиц
	|Документ.СписаниеДепонированнойЗарплаты.Изменение.Организации
	|РегистрНакопления.ВзаиморасчетыСДепонентами.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ВзаиморасчетыСДепонентами.Чтение.Организации
	|РегистрНакопления.ВзаиморасчетыСДепонентами.Изменение.ГруппыФизическихЛиц
	|РегистрНакопления.ВзаиморасчетыСДепонентами.Изменение.Организации";
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзмененияДанных

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДепонированиеЗарплаты", 									"Дата", 				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СписаниеДепонированнойЗарплаты", 				"Дата", 				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВзаиморасчетыСДепонентами", 			"Период", 				"Зарплата", "Организация");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтразитьВБухучете(ВидОперации, Движения, Отказ, Организация, ДатаОперации, Знач Зарплата)

		Депоненты = Зарплата.Скопировать();
		Депоненты.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
		Депоненты.ЗаполнитьЗначения(ВидОперации, "ВидОперации");
		
		УчетДепонированнойЗарплатыПереопределяемый.ОтразитьВБухучете(Движения, Отказ, Организация, ДатаОперации, Депоненты);
		
КонецПроцедуры

#Область ПроцедурыИФункцииДокументаДепонированиеЗарплаты

/// Обработчики событий модуля объекта документов Депонирование зарплаты.

Процедура ДепонированиеЗарплатыОбработкаПроведения(ДокументОбъект, Отказ) Экспорт
	УчетДепонированнойЗарплатыВнутренний.ДепонированиеЗарплатыОбработкаПроведения(ДокументОбъект, Отказ);
КонецПроцедуры

/// Методы доступа к документу депонирования.

 Функция ДепонированиеЗарплатыДанныеДляПроведения(ДокументОбъект) Экспорт
	Возврат УчетДепонированнойЗарплатыВнутренний.ДепонированиеЗарплатыДанныеДляПроведения(ДокументОбъект);
КонецФункции

#КонецОбласти

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ
//

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.13";
	Обработчик.Процедура = "РегистрыНакопления.ВзаиморасчетыСДепонентами.ЗаполнитьВедомость";
	Обработчик.Опциональный = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
