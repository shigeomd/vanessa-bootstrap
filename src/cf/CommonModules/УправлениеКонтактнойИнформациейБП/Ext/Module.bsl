////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И МОДУЛЯ ОБЪЕКТА

// Обработчик для события формы ПриСозданииНаСервере
//
// Параметры:
//	 ТаблицаРазмещенияКИ - <Таблица значений> - таблица значений, с колонками:
//		Вид - <СправочникСсылка.ВидыКонтактнойИнформации> вид размещаемой контактной информации
//		ИмяРеквизита - <Строка> имя реквизита формы значения контактной информации
//	 ИсключаемыеВидыКИ - <Массив> массив элементов вида <СправочникСсылка.ВидыКонтактнойИнформации>,
//		содержит исключаемые виды контактной информации
//
Процедура ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ = "", ТаблицаРазмещенияКИ = Неопределено, ИсключаемыеВидыКИ = Неопределено) Экспорт
	
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	// Создадим таблицу значений
	ИмяОписания = ИмяОписанияДополнительныхРеквизитов();
	
	Если НЕ ФормаПодготовлена(Форма) Тогда
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоРеквизитТабличнойЧасти", ОписаниеТипаБулево, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭлементДобавлен", ОписаниеТипаБулево, ИмяОписания));
		
		ИмяТаблицыДобавленных = "ДобавленныеЭлементыКонтактнойИнформации";
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицыДобавленных, Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяЭлемента", Строка500, ИмяТаблицыДобавленных));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Приоритет", Новый ОписаниеТипов("Число"), ИмяТаблицыДобавленных));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоКоманда", ОписаниеТипаБулево, ИмяТаблицыДобавленных));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоРеквизитТабличнойЧасти", ОписаниеТипаБулево, ИмяТаблицыДобавленных));
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СписокДобавляемыхЭлементовКонтактнойИнформации", Новый ОписаниеТипов("СписокЗначений")));
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КонтактнаяИнформацияПоложениеЗаголовка", Строка500));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КонтактнаяИнформацияГруппаДляРазмещения", Строка500));
	КонецЕсли;
	
	// Получим список видов КИ
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	
	Запрос = Новый Запрос;
	
	Если ТаблицаРазмещенияКИ = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
		|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	ВидыКонтактнойИнформации.Тип КАК Тип,
		|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
		|	ВидыКонтактнойИнформации.Подсказка КАК Подсказка,
		|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
		|	ВидыКонтактнойИнформации.Наименование КАК Заголовок,
		|	ВидыКонтактнойИнформации.ЭтоГруппа КАК ЭтоРеквизитТабличнойЧасти,
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Представление,
		|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """") КАК ЗначенияПолей,
		|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0) КАК НомерСтроки,
		|	0 КАК ИдентификаторСтроки,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(200)) КАК ИмяРеквизита,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК Комментарий
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|	" +  ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Ссылка = &Владелец)
		|			И ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
		|ГДЕ
		|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
		|	И (ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
		|			ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)
		|	И &УсловиеИсключения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ";
		
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРазмещения.Вид,
		|	ТаблицаРазмещения.ИмяРеквизита
		|ПОМЕСТИТЬ ВТ_ТаблицаРазмещения
		|ИЗ
		|	&ТаблицаРазмещения КАК ТаблицаРазмещения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
		|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	ВидыКонтактнойИнформации.Тип КАК Тип,
		|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
		|	ВидыКонтактнойИнформации.Подсказка КАК Подсказка,
		|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
		|	ВидыКонтактнойИнформации.Наименование КАК Заголовок,
		|	ВидыКонтактнойИнформации.ЭтоГруппа КАК ЭтоРеквизитТабличнойЧасти,
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Представление,
		|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """") КАК ЗначенияПолей,
		|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0) КАК НомерСтроки,
		|	0 КАК ИдентификаторСтроки,
		|	ТаблицаРазмещения.ИмяРеквизита КАК ИмяРеквизита,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК Комментарий
		|ИЗ
		|	ВТ_ТаблицаРазмещения КАК ТаблицаРазмещения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ПО ТаблицаРазмещения.Вид = ВидыКонтактнойИнформации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|		" +  ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Ссылка = &Владелец)
		|			И (ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид)
		|ГДЕ
		|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
		|	И (ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
		|			ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)
		|	И &УсловиеИсключения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ";
	КонецЕсли;
	
	Если НЕ ИсключаемыеВидыКИ = Неопределено Тогда
		ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "&УсловиеИсключения", "НЕ ВидыКонтактнойИнформации.Ссылка В(&ИсключаемыеВидыКИ)");
	Иначе
		ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "&УсловиеИсключения", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	
	Запрос.УстановитьПараметр("ТаблицаРазмещения",	ТаблицаРазмещенияКИ);
	Запрос.УстановитьПараметр("ИсключаемыеВидыКИ",	ИсключаемыеВидыКИ);
	
	УстановитьПривилегированныйРежим(Истина);
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки;
	УстановитьПривилегированныйРежим(Ложь);
	
	КонтактнаяИнформация.Сортировать("РеквизитДопУпорядочивания, НомерСтроки");
	
	Для Каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		Если ОбъектКонтактнойИнформации.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
			Поз = Найти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВид = Неопределено;
			ИмяРеквизита = "";
			
			ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
			
			Для Каждого СтрокаКИ Из ОбъектКонтактнойИнформации.Строки Цикл
				
				ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
				
				ТекущийВид = СтрокаКИ.Вид;
				
				Если ТекущийВид <> ПредыдущийВид Тогда
					
					ИмяРеквизита = "КонтактнаяИнформацияПоле" + ИмяТабличнойЧасти + ОбъектКонтактнойИнформации.Строки.Индекс(СтрокаКИ);
					
					ПутьРеквизитов = "Объект." + ИмяТабличнойЧасти;
					
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Строка500, ПутьРеквизитов, СтрокаКИ.Заголовок, Истина));
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита + "ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ПутьРеквизитов,, Истина));
					ПредыдущийВид = ТекущийВид;
					
				КонецЕсли;
				
				СтрокаКИ.ИмяРеквизита = ИмяРеквизита;
				
			КонецЦикла;
			
		Иначе
			Если СокрЛП(ОбъектКонтактнойИнформации.ИмяРеквизита) = "" Тогда
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + КонтактнаяИнформация.Индекс(ОбъектКонтактнойИнформации);
				
				МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ОбъектКонтактнойИнформации.ИмяРеквизита, Строка500, , ОбъектКонтактнойИнформации.Заголовок, Истина));
				
			КонецЕсли;
			
			// При обнаружении ошибок распознавания не прерываем генерацию
			Попытка
				ОбъектКонтактнойИнформации.Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ОбъектКонтактнойИнформации.ЗначенияПолей);
			Исключение
				ЗаписьЖурналаРегистрации(УправлениеКонтактнойИнформациейСлужебный.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка, , ОбъектКонтактнойИнформации.ЗначенияПолей, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Ошибка анализа контактной информации, возможно неверный формат значений полей.'"), ,
					ОбъектКонтактнойИнформации.ИмяРеквизита);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим новые реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Форма.КонтактнаяИнформацияПоложениеЗаголовка = ПоложениеЗаголовкаКИ;
	Форма.КонтактнаяИнформацияГруппаДляРазмещения = ИмяЭлементаДляРазмещения;
	
	ПредыдущийВид = Неопределено;
	
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = КонтактнаяИнформация.НайтиСтроки(Отбор).Количество();
	
	// Создадим элементы на форме и заполним значения реквизитов
	Родитель = ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	
	// Создаем группы для контактной информации
	ГруппаКомпоновки = Группа("ГруппаКомпоновкиКонтактнойИнформации",
	Форма, Родитель, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
	ГруппаЗаголовков = Группа("ГруппаЗаголовковКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаПолейВвода = Группа("ГруппаПолейВводаКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаДействий = Группа("ГруппаДействийКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	
	ЗаголовокСлева = ЗаголовокСлева(Форма, ПоложениеЗаголовкаКИ);
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		
		Если СтрокаКИ.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбщегоНазначения.ИмяПредопределенного(СтрокаКИ.Вид);
			Поз = Найти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВидТЧ = Неопределено;
			
			Для Каждого СтрокаТабличнойЧастиКИ Из СтрокаКИ.Строки Цикл
				
				ВидТЧ = СтрокаТабличнойЧастиКИ.Вид;
				
				Если ВидТЧ <> ПредыдущийВидТЧ Тогда
					
					ГруппаТабличнойЧасти = Форма.Элементы[ИмяТабличнойЧасти + "ГруппаКонтактнаяИнформация"];
					
					Элемент = Форма.Элементы.Добавить(СтрокаТабличнойЧастиКИ.ИмяРеквизита, Тип("ПолеФормы"), ГруппаТабличнойЧасти);
					Элемент.Вид = ВидПоляФормы.ПолеВвода;
					Элемент.ПутьКДанным = "Объект." + ИмяТабличнойЧасти + "." + СтрокаТабличнойЧастиКИ.ИмяРеквизита;
					
					Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаТабличнойЧастиКИ.Тип) Тогда
						Элемент.КнопкаВыбора = Истина;
						Если ВидТЧ.РедактированиеТолькоВДиалоге Тогда
							Элемент.РедактированиеТекста = Ложь;
						КонецЕсли;
						
						Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
					КонецЕсли;
					Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
					
					Если ВидТЧ.ОбязательноеЗаполнение Тогда
						Элемент.АвтоОтметкаНезаполненного = Истина;
					КонецЕсли;
					
					ДобавитьОписаниеЭлемента(Форма, СтрокаТабличнойЧастиКИ.ИмяРеквизита, 2, , Истина);
					ДобавитьРеквизитВОписание(Форма, Элемент, СтрокаТабличнойЧастиКИ, Ложь, Истина);
					ПредыдущийВидТЧ = ВидТЧ;
					
				КонецЕсли;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧастиКИ.ИдентификаторСтроки);
				
				СтрокиТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(Отбор);
				
				Если СтрокиТаблицы.Количество() = 1 Тогда
					
					СтрокаТаблицы = СтрокиТаблицы[0];
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита] = СтрокаТабличнойЧастиКИ.Представление;
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита + "ЗначенияПолей"] = СтрокаТабличнойЧастиКИ.ЗначенияПолей;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		Вид = СтрокаКИ.Вид;
		Тип = СтрокаКИ.Тип;
		ЕстьКомментарий = ЗначениеЗаполнено(СтрокаКИ.Комментарий);
		ИмяРеквизита = СтрокаКИ.ИмяРеквизита;
		
		ЭтоНовыйВидКИ = (Вид <> ПредыдущийВид);
		
		Элемент = Форма.Элементы.Найти(ИмяРеквизита);
		Если Элемент = Неопределено Тогда
			
			// Добавляем заголовок
			Если ЗаголовокСлева Тогда
				
				Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, СтрокаКИ.Наименование, ЭтоНовыйВидКИ, ЕстьКомментарий);
				
			КонецЕсли;
			
			Элемент = ПолеВвода(Форма, Вид, Тип, ИмяРеквизита, СтрокаКИ.Подсказка, ЭтоНовыйВидКИ, СтрокаКИ.ОбязательноеЗаполнение);
			
			// Выводим комментарий
			Если ЕстьКомментарий Тогда
				
				ИмяКомментария = "Комментарий" + ИмяРеквизита;
				Комментарий(Форма, СтрокаКИ.Комментарий, ИмяКомментария, ГруппаПолейВвода);
				
			КонецЕсли;
			
			// Заглушка , если заголовок у поля сверху
			Если Не ЗаголовокСлева И ЭтоНовыйВидКИ Тогда
				
				ИмяДекорации = "ДекорацияВерх" + ИмяРеквизита;
				Декорация = Форма.Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), ГруппаДействий);
				ДобавитьОписаниеЭлемента(Форма, ИмяДекорации, 2);
				
			КонецЕсли;
			
			Действие(Форма, Тип, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий);
			ДобавитьРеквизитВОписание(Форма, Элемент, СтрокаКИ, ЭтоНовыйВидКИ);
			
		Иначе
			
			ДобавитьРеквизитВОписание(Форма, Элемент, СтрокаКИ, ЭтоНовыйВидКИ, Ложь, Ложь);
			
		КонецЕсли;
		
		ПредыдущийВид = Вид;
		
	КонецЦикла;
	
	Если Форма.СписокДобавляемыхЭлементовКонтактнойИнформации.Количество() > 0 Тогда
		
		ГруппаКоманды = Группа("ГруппаКонтактнаяИнформацияДобавитьПолеВвода",
		Форма, Родитель, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
		ГруппаКоманды.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		
		ИмяКоманды = "КонтактнаяИнформацияДобавитьПолеВвода";
		Команда = Форма.Команды.Найти(ИмяКоманды);
		Если Команда = Неопределено Тогда
		
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			Команда.Подсказка = НСтр("ru = 'Добавить дополнительное поле контактной информации'");
			Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
			Команда.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
			Команда.ИзменяетСохраняемыеДанные = Истина;
			
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		
			Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманды);
			Кнопка.Заголовок = НСтр("ru = 'Добавить'");
			Кнопка.ИмяКоманды = ИмяКоманды;
			ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПриЧтенииНаСервере
Процедура ПриЧтенииНаСервере(Форма, Объект) Экспорт
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	ПовторныйЗапуск = Ложь;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов" Тогда
			ПовторныйЗапуск = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПовторныйЗапуск Тогда
		
		ПоложениеЗаголовкаКИ = Форма.КонтактнаяИнформацияПоложениеЗаголовка;
		ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(ПоложениеЗаголовкаКИ), ПоложениеЗаголовкаЭлементаФормы[ПоложениеЗаголовкаКИ], ПоложениеЗаголовкаЭлементаФормы.Верх);
		
		ИмяЭлементаДляРазмещения = Форма.КонтактнаяИнформацияГруппаДляРазмещения;
		
		ИсключаемыеВидыКИ	= Новый Массив;
		
		ДобавленныеЭлементы = Форма.ДобавленныеЭлементыКонтактнойИнформации;
		ДобавленныеЭлементы.Сортировать("Приоритет");
	
		Для Каждого УдаляемыйЭлемент Из ДобавленныеЭлементы Цикл
			
			Если УдаляемыйЭлемент.ЭтоКоманда Тогда
				Форма.Команды.Удалить(Форма.Команды[УдаляемыйЭлемент.ИмяЭлемента]);
			Иначе
				Форма.Элементы.Удалить(Форма.Элементы[УдаляемыйЭлемент.ИмяЭлемента]);
			КонецЕсли;
			
		КонецЦикла;
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		
		ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
		
		Для Каждого РеквизитФормы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			
			Если НЕ РеквизитФормы.ЭлементДобавлен Тогда
				ИсключаемыеВидыКИ.Добавить(РеквизитФормы.Вид);
				Продолжить;
			КонецЕсли;
			
			Если Не РеквизитФормы.ЭтоРеквизитТабличнойЧасти Тогда
				МассивУдаляемыхРеквизитов.Добавить(РеквизитФормы.ИмяРеквизита);
			Иначе
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧастиПоВидуКИ(РеквизитФормы.Вид, ИмяОбъекта) + "." + РеквизитФормы.ИмяРеквизита);
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧастиПоВидуКИ(РеквизитФормы.Вид, ИмяОбъекта) + "." + РеквизитФормы.ИмяРеквизита + "ЗначенияПолей");
			КонецЕсли;
		КонецЦикла;
		
		МассивУдаляемыхРеквизитов.Добавить("ДобавленныеЭлементыКонтактнойИнформации");
		МассивУдаляемыхРеквизитов.Добавить("СписокДобавляемыхЭлементовКонтактнойИнформации");
		МассивУдаляемыхРеквизитов.Добавить("КонтактнаяИнформацияПоложениеЗаголовка");
		МассивУдаляемыхРеквизитов.Добавить("КонтактнаяИнформацияГруппаДляРазмещения");
		МассивУдаляемыхРеквизитов.Добавить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов");
		
		Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПередЗаписьюНаСервере
Процедура ПередЗаписьюНаСервере(Форма, Объект, Отказ = Ложь) Экспорт
	
	Объект.КонтактнаяИнформация.Очистить();
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	ПредыдущийВид = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяТабличнойЧасти = ИмяТабличнойЧастиПоВидуКИ(ВидИнформации, ИмяОбъекта);
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				ИдентификаторСтроки = СтрокаТабличнойЧастиФормы.ПолучитьИдентификатор();
				СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти][СтрокаТабличнойЧастиФормы.НомерСтроки - 1];
				СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
				
				ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки);
				
			КонецЦикла;
			
		Иначе
			
			Представление = Форма[СтрокаТаблицы.ИмяРеквизита];
			Если ПустаяСтрока(Представление) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ Форма.Элементы.Найти(СтрокаТаблицы.ИмяРеквизита) = Неопределено Тогда
				Элемент = Форма.Элементы[СтрокаТаблицы.ИмяРеквизита];
				Если Элемент.Вид = ВидПоляФормы.ПолеНадписи И Элемент.Гиперссылка Тогда
					Если Представление = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЗаписатьКонтактнуюИнформацию(Объект, СтрокаТаблицы.ЗначенияПолей, ВидИнформации, ТипИнформации);
			
		КонецЕсли;
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет (удаляет) поле ввода или комментарий на форму, обновляя данные
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы
//
// Параметры:
//    Форма     - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации
//    Объект    - Объект-владелец контактной информации
//    Результат - Необязательный служебный реквизит, полученный из предыдущего обработчика события.
//
Функция ОбновитьКонтактнуюИнформацию(Форма, Объект, Результат = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
		
	ИначеЕсли Результат.Свойство("ЭтоДобавлениеКомментария") Тогда
		Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(Форма, Объект, Результат);
		
	ИначеЕсли Результат.Свойство("ДобавляемыйВид") Тогда
		ДобавитьСтрокуКонтактнойИнформации(Форма, Результат);
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДОПОЛНИТЕЛЬНЫХ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса
//
// Параметры:
//    СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - объект XDTO с контактной информацией
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.Страна = "";
	СтрокаТабличнойЧасти.Регион = "";
	СтрокаТабличнойЧасти.Город  = "";
	
	Адрес = Источник.Состав;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	ЭтоАдрес = ТипЗнч(Адрес) = Тип("ОбъектXDTO") И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес");
	Если ЭтоАдрес И Адрес.Состав <> Неопределено Тогда 
		СтрокаТабличнойЧасти.Страна = Адрес.Страна;
		АдресРФ = УправлениеКонтактнойИнформациейСлужебный.РоссийскийАдрес(Адрес);
		Если АдресРФ <> Неопределено Тогда
			// Российский адрес
			СтрокаТабличнойЧасти.Регион = АдресРФ.СубъектРФ;
			СтрокаТабличнойЧасти.Город  = АдресРФ.Город;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса электронной почты.
//
// Параметры:
//    СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - объект XDTO с контактной информацией
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаТабличнойЧасти, Источник)
	
	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаТабличнойЧасти.Представление, Ложь);
	
	Если Результат.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.АдресЭП = Результат[0].Адрес;
		
		Поз = Найти(СтрокаТабличнойЧасти.АдресЭП, "@");
		Если Поз <> 0 Тогда
			СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз+1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - объект XDTO с контактной информацией
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = "";
	СтрокаТабличнойЧасти.НомерТелефона         = "";
	
	Телефон = Источник.Состав;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Если Телефон <> Неопределено И Телефон.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		КодСтраны     = Телефон.КодСтраны;
		КодГорода     = Телефон.КодГорода;
		НомерТелефона = Телефон.Номер;
		
		Если Лев(КодСтраны, 1) = "+" Тогда
			КодСтраны = Сред(КодСтраны, 2);
		КонецЕсли;
		
		Поз = Найти(НомерТелефона, ",");
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		Поз = Найти(НомерТелефона, Символы.ПС);
		Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
		СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(Строка(КодСтраны) + КодГорода + НомерТелефона);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - объект XDTO с контактной информацией
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.ДоменноеИмяСервера = "";
	
	АдресСтраницы = Источник.Состав;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Если АдресСтраницы <> Неопределено И АдресСтраницы.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
		АдресСтрокой = АдресСтраницы.Значение;
		
		//Удалим протокол
		АдресСервера = Прав(АдресСтрокой, СтрДлина(АдресСтрокой) - Найти(АдресСтрокой, "://") );
		Поз = Найти(АдресСервера, "/");
		//Удалим путь
		АдресСервера = ?(Поз = 0, АдресСервера, Лев(АдресСервера,  Поз-1));
		
		СтрокаТабличнойЧасти.ДоменноеИмяСервера = АдресСервера;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УбратьРазделителиВНомерТелефона(Знач СтрНомер)
	
	Поз = Найти(СтрНомер, ",");
	Если Поз <> 0 Тогда
		СтрНомер = Лев(СтрНомер, Поз-1);
	КонецЕсли;
	
	СтрНомер = СтрЗаменить(СтрНомер, "-", "");
	СтрНомер = СтрЗаменить(СтрНомер, " ", "");
	СтрНомер = СтрЗаменить(СтрНомер, "+", "");

	Возврат СтрНомер;

КонецФункции

Процедура ДобавитьСтрокуКонтактнойИнформации(Форма, Результат)
	
	ДобавляемыйВид = Результат.ДобавляемыйВид;
	ТаблицаКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("Вид, ЭлементДобавлен", ДобавляемыйВид, Истина);
	НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор);
	КоличествоЭлементов = НайденныеСтроки.Количество();
	
	ПоследняяСтрока = НайденныеСтроки.Получить(КоличествоЭлементов-1);
	ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Индекс(ПоследняяСтрока) + 1;
	ЭтоПоследняяСтрока = Ложь;
	Если ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Количество() Тогда
		ЭтоПоследняяСтрока = Истина;
	Иначе
		ИмяСледующегоРеквизита = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].ИмяРеквизита;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаКонтактнойИнформации.Вставить(ИндексДобавляемойСтроки);
	ИмяРеквизита = "КонтактнаяИнформацияПоле" + НоваяСтрока.ПолучитьИдентификатор();
	Тип = ДобавляемыйВид.Тип;
	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
	НоваяСтрока.Вид = ДобавляемыйВид;
	НоваяСтрока.Тип = Тип;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = Ложь;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)), , ДобавляемыйВид.Наименование, Истина));
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	//Отрисовка на форме
	Если ЗаголовокСлева Тогда
		ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации;
		Заголовок = Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, ДобавляемыйВид.Наименование);
		
		Если Не ЭтоПоследняяСтрока Тогда
			СледующийЗаголовок = Форма.Элементы["Заголовок" + ИмяСледующегоРеквизита];
			Форма.Элементы.Переместить(Заголовок, ГруппаЗаголовков, СледующийЗаголовок);
		КонецЕсли;
	КонецЕсли;
	
	ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации;
	ПолеВвода = ПолеВвода(Форма, ДобавляемыйВид, Тип, ИмяРеквизита, ДобавляемыйВид.Подсказка);
	
	Если Не ЭтоПоследняяСтрока Тогда
		
		ИмяСледующегоЭлемента = ПоследняяСтрока.ИмяРеквизита;
		
		Если ЗначениеЗаполнено(ПоследняяСтрока.Комментарий) Тогда
			ИмяСледующегоЭлемента = "Комментарий" + ИмяСледующегоЭлемента;
		КонецЕсли;
		
		ИндексСледующегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующегоЭлемента]) + 1;
		СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексСледующегоЭлемента);
		
		Форма.Элементы.Переместить(ПолеВвода, ГруппаПолейВвода, СледующийЭлемент);
		
	КонецЕсли;
	
	ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации;
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор).Количество();
	
	ИмяДействия = "Команда" + ИмяСледующегоРеквизита;
	ИмяЗаглушки = "ДекорацияВерх" + ИмяСледующегоРеквизита;
	
	Если Форма.Элементы.Найти(ИмяЗаглушки) <> Неопределено Тогда
		ИмяСледующегоДействия = ИмяЗаглушки;
	ИначеЕсли Форма.Элементы.Найти(ИмяДействия) <> Неопределено Тогда
		ИмяСледующегоДействия = ИмяДействия;
	Иначе
		ИмяСледующегоДействия = "ЗаглушкаДействия" + ИмяСледующегоРеквизита;
	КонецЕсли;
	
	Действие = Действие(Форма, Тип, ИмяРеквизита, ГруппаДействий, КоличествоАдресов);
	Если Не ЭтоПоследняяСтрока Тогда
		СледующееДействие = Форма.Элементы[ИмяСледующегоДействия];
		Форма.Элементы.Переместить(Действие, ГруппаДействий, СледующееДействие);
	КонецЕсли;
	
	Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
		И ДобавляемыйВид.РедактированиеТолькоВДиалоге Тогда
		
		Результат.Вставить("ЭлементФормыАдреса", ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ

Функция НоваяКонтактнаяИнформация() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КонтактнаяИнформация"); // Строка, 0 - XML 
	Результат.Вставить("Представление");        // Строка, 0
	Результат.Вставить("Комментарий");          // Строка, 0
	Возврат Результат;

КонецФункции

Функция ПолучитьПустуюТаблицуСоответствияВидовКонтактнойИнформации() Экспорт
	
	ТаблицаСоответствияВидовКонтактнойИнформации	= Новый ТаблицаЗначений;
	ТаблицаСоответствияВидовКонтактнойИнформации.Колонки.Добавить("ВидИсточника", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	ТаблицаСоответствияВидовКонтактнойИнформации.Колонки.Добавить("ВидПриемника", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));

	Возврат ТаблицаСоответствияВидовКонтактнойИнформации;
	
КонецФункции

Процедура ДобавитьСоответствиеВидовКонтактнойИнформации(ТаблицаСоответствияВидовКонтактнойИнформации, ВидИсточника, ВидПриемника) Экспорт
	
	СоответствиеВидаКонтактнойИнформации	= ТаблицаСоответствияВидовКонтактнойИнформации.Добавить();
	СоответствиеВидаКонтактнойИнформации.ВидИсточника	= ВидИсточника;
	СоответствиеВидаКонтактнойИнформации.ВидПриемника	= ВидПриемника;
	
КонецПроцедуры

// Копирует контактную информацию между объектами различных видов при интерактивном выборе элемента в форме
//
// Параметры:
//	Форма	- <Форма> - форма приемника, на которой размещена контактная информация
//	ИсточникКонтактнойИнформации					- <СправочникСсылка.*> источник контактной информации
//	ТаблицаСоответствияВидовКонтактнойИнформации	- <ТаблицаЗначений> таблица, описывающая соответствие
//		между видами контактной информации источника и приемника
//
Процедура СкопироватьКонтактнуюИнформацию(Форма, ИсточникКонтактнойИнформации, ТаблицаСоответствияВидовКонтактнойИнформации) Экспорт

	Если НЕ ЗначениеЗаполнено(ИсточникКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ФормаПодготовлена(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ВидыИсточника	= ТаблицаСоответствияВидовКонтактнойИнформации.ВыгрузитьКолонку("ВидИсточника");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ВидыИсточника);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	КонтактнаяИнформация.Вид КАК ВидИсточника,
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &ИсточникКонтактнойИнформации
		|	И КонтактнаяИнформация.Вид В(&ВидыИсточника)";
	
	ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, ".Контрагенты.", "." + ИсточникКонтактнойИнформации.Метаданные().Имя + ".");
		
	Запрос	= Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("ИсточникКонтактнойИнформации",	ИсточникКонтактнойИнформации);
	Запрос.УстановитьПараметр("ВидыИсточника",					ВидыИсточника);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка	= Результат.Выбрать();

	ТаблицаСоответствияВидовКонтактнойИнформации.Индексы.Добавить("ВидИсточника");
	
	ИмяОписания	= ИмяОписанияДополнительныхРеквизитов();
	
	ОтборОписания	= Новый Структура("Тип, Вид");
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаСоответствия	= ТаблицаСоответствияВидовКонтактнойИнформации.Найти(Выборка.ВидИсточника, "ВидИсточника");
		Если СтрокаСоответствия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборОписания.Тип	= Выборка.Тип;
		ОтборОписания.Вид	= СтрокаСоответствия.ВидПриемника;
		
		НайденныеСтрокиОписания	=  Форма[ИмяОписания].НайтиСтроки(ОтборОписания);
		Для каждого СтрокаОписания Из НайденныеСтрокиОписания Цикл
			
			Форма[СтрокаОписания.ИмяРеквизита]	= Выборка.Представление;
			СтрокаОписания.ЗначенияПолей		= ПреобразоватьСтрокуВСписокПолей(Выборка.ЗначенияПолей);
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Проверить по типу контактной информации, доступно ли редактирование в диалоге
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПустуюТаблицуРазмещенияКонтактнойИнформации() Экспорт
	
	ТаблицаРазмещения	= Новый ТаблицаЗначений;
	ТаблицаРазмещения.Колонки.Добавить("Вид",			Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	ТаблицаРазмещения.Колонки.Добавить("ИмяРеквизита",	Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаРазмещения;
	
КонецФункции

Процедура ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещения, ВидКонтактнойИнформации, ИмяРеквизита) Экспорт
	
	ОписаниеРазмещения	= ТаблицаРазмещения.Добавить();
	ОписаниеРазмещения.Вид			= ВидКонтактнойИнформации;
	ОписаниеРазмещения.ИмяРеквизита	= ИмяРеквизита;
	
КонецПроцедуры

Функция ФормаПодготовлена(Форма)

	ИмяОписания = ИмяОписанияДополнительныхРеквизитов();
	
	Результат	= Ложь;
	
	РеквизитыФормы	= Форма.ПолучитьРеквизиты();
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если РеквизитФормы.Имя = ИмяОписания Тогда
			Результат	= Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

Функция ИмяОписанияДополнительныхРеквизитов()

	Возврат "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";

КонецФункции 

// Возвращает список значений. Преобразует строку полей в список значений.
//
// Параметры:
//	СтрокаПолей - Строка - строка полей.
//
// Возвращаемое значение - Список значений - список значений полей.
//
Функция ПреобразоватьСтрокуВСписокПолей(СтрокаПолей) Экспорт
	
	Результат = Новый СписокЗначений;
	ПоследнийЭлемент = Неопределено;
	
	Для Итерация = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		ПолученнаяСтрока = СтрПолучитьСтроку(СтрокаПолей, Итерация);
		Если Лев(ПолученнаяСтрока, 1) = Символы.Таб Тогда
			Если ПоследнийЭлемент <> Неопределено Тогда
				ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(ПолученнаяСтрока, 2);
			КонецЕсли;
		Иначе
			ПозицияСимвола = Найти(ПолученнаяСтрока, "=");
			Если ПозицияСимвола <> 0 Тогда
				ПоследнийЭлемент = Результат.Добавить(Сред(ПолученнаяСтрока, ПозицияСимвола + 1), Лев(ПолученнаяСтрока, ПозицияСимвола - 1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку списка полей.
//
// Параметры:
//	СоответствиеПолей - Соответствие - соттветствие полей.
//	
// Возвращаемое значение - Строка - преобразованное соответствие в строку.
//
Функция ПреобразоватьСписокПолейВСтроку(СоответствиеПолей) Экспорт
	
	Результат = "";
	Для Каждого Элемент Из СоответствиеПолей Цикл
		
		Значение = Элемент.Значение;
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + 
			Элемент.Представление + "=" + СтрЗаменить(Значение, Символы.ПС, Символы.ПС + Символы.Таб);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имя табличной части документа по виду контактной информации
//
// Параметры:
//    ВидКИ      - вид контактной информации
//    ИмяОбъекта - полное имя объекта метаданного
//
// Возвращаемое значение:
//    Строка - имя табличной части или пустая строка, если табличной части нет.
//
Функция ИмяТабличнойЧастиПоВидуКИ(ВидКИ, ИмяОбъекта) Экспорт
	
	ГруппаВидаКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидКИ, "Родитель");
	ИмяВидаКИ = ОбщегоНазначения.ИмяПредопределенного(ГруппаВидаКИ);
	Поз = Найти(ИмяВидаКИ, ИмяОбъекта);
	
	Возврат Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
	
КонецФункции

Процедура ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки = 0)
	
	ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, ВидИнформации);
	
	Если Не УправлениеКонтактнойИнформациейСлужебный.XDTOКонтактнаяИнформацияЗаполнена(ОбъектКИ) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Представление = ОбъектКИ.Представление;
	НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектКИ);
	НоваяСтрока.Вид           = ВидИнформации;
	НоваяСтрока.Тип           = ТипИнформации;
	
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		НоваяСтрока.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
	КонецЕсли;
	
	// Заполнение дополнительных реквизитов ТЧ
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(НоваяСтрока, ОбъектКИ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовокСлева(Форма, Знач ПоложениеЗаголовкаКИ = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПоложениеЗаголовкаКИ) Тогда
		
		СохраненноеПоложениеЗаголовка = Форма.КонтактнаяИнформацияПоложениеЗаголовка;
		Если ЗначениеЗаполнено(СохраненноеПоложениеЗаголовка) Тогда
			ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы[СохраненноеПоложениеЗаголовка];
		Иначе
			ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Верх;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат (ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево);
	
КонецФункции

Функция Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, Наименование, ЭтоНовыйВидКИ = Ложь, ЕстьКомментарий = Ложь)
	
	ИмяЗаголовка = "Заголовок" + ИмяРеквизита;
	Элемент = Форма.Элементы.Добавить(ИмяЗаголовка, Тип("ДекорацияФормы"), ГруппаЗаголовков);
	Элемент.Заголовок = ?(ЭтоНовыйВидКИ, Наименование + ":", "");
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Элемент.Высота = 5;
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	Иначе
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	КонецЕсли;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяЗаголовка, 2);
	
	Если ЕстьКомментарий Тогда
		
		ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
		Заглушка = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаголовков);
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ПолеВвода(Форма, Вид, Тип, ИмяРеквизита, Подсказка, ЭтоНовыйВидКИ = Ложь, ОбязательноеЗаполнение = Ложь)
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.Подсказка = Подсказка;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.ПоложениеЗаголовка = ?(ЗаголовокСлева Или Не ЭтоНовыйВидКИ, ПоложениеЗаголовкаЭлементаФормы.Нет, ПоложениеЗаголовкаЭлементаФормы.Верх);
	Элемент.УстановитьДействие("Очистка", "Подключаемый_КонтактнаяИнформацияОчистка");
	
	ДобавитьОписаниеЭлемента(Форма, ИмяРеквизита, 2);
	
	// Устанавливаем свойства поля ввода
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Элемент.Высота = 5;
		Элемент.МногострочныйРежим = Истина;
		Элемент.РастягиватьПоВертикали = Ложь;
	Иначе
		
		// Ввод комментария через контекстное меню
		ИмяКоманды = "КонтекстноеМеню" + ИмяРеквизита;
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Команда.Подсказка = НСтр("ru = 'Ввести комментарий'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.Заголовок = НСтр("ru = 'Ввести комментарий'");
		Кнопка.ИмяКоманды = ИмяКоманды;
		Команда.ИзменяетСохраняемыеДанные = Истина;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
	КонецЕсли;
	
	Если ОбязательноеЗаполнение И ЭтоНовыйВидКИ Тогда
		Элемент.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// Редактирование в диалоге
	Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип) Тогда
		
		Элемент.КнопкаВыбора = Истина;
		
		Если Вид.РедактированиеТолькоВДиалоге Тогда
			Элемент.РедактированиеТекста = Ложь;
			Элемент.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
		КонецЕсли;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
		
	КонецЕсли;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
	
	Возврат Элемент;
	
КонецФункции

Функция Действие(Форма, Тип, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий = Ложь)
	
	Если (Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница
		Или Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		Или (Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И КоличествоАдресов > 1) Тогда
		
		// Есть действие
		ИмяКоманды = "Команда" + ИмяРеквизита;
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		Команда.Отображение = ОтображениеКнопки.Картинка;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		
		Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаДействий);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
		Элемент.ИмяКоманды = ИмяКоманды;
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			Элемент.Заголовок = НСтр("ru = 'Заполнить'");
			Команда.Подсказка = НСтр("ru = 'Заполнить адрес'");
			Команда.Картинка = БиблиотекаКартинок.ПереместитьВлево;
			Команда.ИзменяетСохраняемыеДанные = Истина;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			
			Элемент.Заголовок = НСтр("ru = 'Перейти'");
			Команда.Подсказка = НСтр("ru = 'Перейти по ссылке'");
			Команда.Картинка = БиблиотекаКартинок.КонтактнаяИнформацияПерейтиПоСсылке;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			
			Элемент.Заголовок = НСтр("ru = 'Написать письмо'");
			Команда.Подсказка = НСтр("ru = 'Написать письмо'");
			Команда.Картинка = БиблиотекаКартинок.ОтправитьЭлектронноеПисьмо;
			
		КонецЕсли;
		
		Если ЕстьКомментарий Тогда
			
			ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
			ЗаглушкаДействия = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
			ЗаглушкаДействия.Высота = 1;
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
			
		КонецЕсли;
		
	Иначе
		
		//Действия нет, ставим заглушку
		ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
		Элемент = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
		Если ЕстьКомментарий Тогда
			Элемент.Высота = 2;
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			Элемент.Высота = 5;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция Комментарий(Форма, Комментарий, ИмяКомментария, ГруппаДляРазмещения)
	
	Элемент = Форма.Элементы.Добавить(ИмяКомментария, Тип("ДекорацияФормы"), ГруппаДляРазмещения);
	Элемент.Заголовок = Комментарий;
	Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.РастягиватьПоВертикали = Ложь;
	Элемент.Высота = 1;
	Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяКомментария, 2);
	
	Возврат Элемент;
	
КонецФункции

Функция Группа(ИмяГруппы, Форма, Родитель, Группировка, ПорядокУдаления)
	
	НоваяГруппа = Форма.Элементы.Найти(ИмяГруппы);
	
	Если НоваяГруппа = Неопределено Тогда
		НоваяГруппа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
		НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.Группировка = Группировка;
		ДобавитьОписаниеЭлемента(Форма, ИмяГруппы, ПорядокУдаления);
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

Процедура ДобавитьОписаниеЭлемента(Форма, ИмяЭлемента, Приоритет, ЭтоКоманда = Ложь, ЭтоРеквизитТабличнойЧасти = Ложь)
	
	НоваяСтрока = Форма.ДобавленныеЭлементыКонтактнойИнформации.Добавить();
	НоваяСтрока.ИмяЭлемента = ИмяЭлемента;
	НоваяСтрока.Приоритет = Приоритет;
	НоваяСтрока.ЭтоКоманда = ЭтоКоманда;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = ЭтоРеквизитТабличнойЧасти;
	
КонецПроцедуры

Процедура ДобавитьРеквизитВОписание(Форма, Элемент, СтрокаКИ, ЭтоНовыйВидКИ, ЭтоРеквизитТабличнойЧасти = Ложь, ЭлементДобавлен = Истина)
	
	НоваяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита  = СтрокаКИ.ИмяРеквизита;
	НоваяСтрока.Вид           = СтрокаКИ.Вид;
	НоваяСтрока.Тип           = СтрокаКИ.Тип;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = ЭтоРеквизитТабличнойЧасти;
	НоваяСтрока.ЭлементДобавлен = ЭлементДобавлен;
	
	Если ПустаяСтрока(СтрокаКИ.ЗначенияПолей) ТОгда
		НоваяСтрока.ЗначенияПолей = "";
	Иначе
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаКИ.ЗначенияПолей);
	КонецЕсли;
	
	НоваяСтрока.Представление = СтрокаКИ.Представление;
	НоваяСтрока.Комментарий   = СтрокаКИ.Комментарий;
	
	Если Не ЭтоРеквизитТабличнойЧасти Тогда
		
		Представление = СтрокаКИ.Представление;
		Если ПустаяСтрока(Представление) Тогда
			Если Элемент.Вид = ВидПоляФормы.ПолеНадписи И Элемент.Гиперссылка Тогда
				Представление = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки();
			КонецЕсли;
		КонецЕсли;
		
		Форма[СтрокаКИ.ИмяРеквизита] = Представление;
		
	КонецЕсли;
	
	Если ЭтоНовыйВидКИ И СтрокаКИ.Вид.РазрешитьВводНесколькихЗначений И Не ЭтоРеквизитТабличнойЧасти
		И ЭлементДобавлен Тогда
		
		Форма.СписокДобавляемыхЭлементовКонтактнойИнформации.Добавить(СтрокаКИ.Вид, СтрокаКИ.Вид.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьXMLПредставлениеАдреса(ЗначенияПолей, ВидКИ, Представление = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗначенияПолей) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресXML = "";
	ДопустимыеТипы = "Индекс, Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";
	
	Если ТипЗнч(ЗначенияПолей) = Тип("Структура") Тогда
		Для Каждого ТекСв Из ЗначенияПолей Цикл
			Если ТекСв.Ключ = "КодРегион" Тогда
				АдресXML = АдресXML + "КодРегиона" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли ТекСв.Ключ = "Населенный пункт" Тогда
				АдресXML = АдресXML + "НаселенныйПункт" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли ТекСв.Ключ = "Кварт" Тогда
				АдресXML = АдресXML + "Квартира" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Ключ) >0 ТОгда
				АдресXML = АдресXML + ТекСв.Ключ + "=" + ТекСв.Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ТекСв Из ЗначенияПолей Цикл
			Если ТекСв.Тип = "Почтовый индекс" Тогда
				АдресXML = АдресXML + "Индекс" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
				АдресXML = АдресXML + "НаселенныйПункт" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) >0 ТОгда
				АдресXML = АдресXML + ТекСв.Тип + "=" + ТекСв.Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(АдресXML, Представление , ВидКИ);
	
	Возврат АдресXML;
	
КонецФункции

