////////////////////////////////////////////////////////////////////////////////
// Проверка контрагентов: запуск проверок, сохранение настроек
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Запускается при редактировании реквизитов внутри карточки контрагента
Процедура ПроверитьКонтрагентаПриИзменении(ПараметрыЗапуска) Экспорт  
	
	Попытка
	
		Параметры = Новый Массив;
		Параметры.Добавить(ПараметрыЗапуска);
		
		ФоновыеЗадания.Выполнить("ПроверкаКонтрагентов.ПроверитьКонтрагентаФоновоеЗадание", 
			Параметры, ПараметрыЗапуска.ИНН + " " + ПараметрыЗапуска.КПП, НСтр("ru = 'Проверка контрагента '"));
	
	Исключение
		
		// Исключение возникнет в случае запуска фонового задания с таким же ключем
		// Спецальной обработки не требуется
			
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Проверка контрагента в фоновом задании'"),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;
	
КонецПроцедуры

// Очистка кэша
Функция ОчиститьСохраненныеРезультатыПроверкиКонтрагентов() Экспорт 
	
	НачатьТранзакцию();
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СостоянияКонтрагентов.Контрагент,
			|	ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка) КАК Состояние,
			|	СостоянияКонтрагентов.ИНН,
			|	СостоянияКонтрагентов.КПП,
			|	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные
			|ИЗ
			|	РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов";

		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	 	НаборЗаписей = РегистрыСведений.СостоянияКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ДанныеКонтрагентов);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Проверка контрагентов.Очистка предыдущих результатов проверок'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

Процедура СохранитьРезультатыПроверкиКонтрагентовВДокументеВРегистр(СохраняемыйРезультат) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		Для каждого СохраняемыйРезультатПоДокументу Из СохраняемыйРезультат Цикл
		
			ДокументСсылка 		= СохраняемыйРезультатПоДокументу.Ключ;
			ЭтоДокументСОшибкой = СохраняемыйРезультатПоДокументу.Значение;
		
			// Блокируем
			СтруктураКлюча = Новый Структура("Документ", ДокументСсылка);
			Ключ = РегистрыСведений.ДокументыСОшибкамиПроверкиКонтрагентов.СоздатьКлючЗаписи(СтруктураКлюча);
			ЗаблокироватьДанныеДляРедактирования(Ключ);
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов");
			ЭлементБлокировки.УстановитьЗначение("Документ", ДокументСсылка);
			Блокировка.Заблокировать();
			
			// Записываем данные в регистр
			НаборЗаписей = РегистрыСведений.ДокументыСОшибкамиПроверкиКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
			НаборЗаписей.Очистить();
			
			Если ЭтоДокументСОшибкой Тогда
				// Записываем документ в регистр
				Запись = НаборЗаписей.Добавить();
				Запись.Документ = ДокументСсылка;
			Иначе
				// Очищаем регистр
			КонецЕсли;
			
			НаборЗаписей.Записать(Истина);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Проверка контрагентов.Запись результатов проверки контрагентов в документе в регистр'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

#Область ОпределениеСостоянияКонтрагента

// Существование определяется на основе записи в регистре сведений
Функция КонтрагентСуществует(КонтрагентСсылка, ИНН, КПП) Экспорт
	
	КонтрагентСуществует = Истина;
	
	// Определяем, включен ли сервис 
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	Если ИспользованиеПроверкиВозможно Тогда
		
		// Получаем состояние контрагента из регистра сведений
		Состояние = ТекущееСостояниеКонтрагента(КонтрагентСсылка, ИНН, КПП);
		
		// По состоянию определяем, существует ли контрагент или нет
		КонтрагентСуществует = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеДействующегоКонтрагента(Состояние);

	Иначе
		КонтрагентСуществует = Истина;
	КонецЕсли;
	
	Возврат КонтрагентСуществует;
	
КонецФункции

// Получает состояние контрагента из регистра сведений
Функция ТекущееСостояниеКонтрагента(КонтрагентСсылка, ИНН, КПП, АдресХранилища = Неопределено) Экспорт
	
	Состояние = Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка();
	
	// 1. Пытаемся получить состояние контрагента из хранилища 
	Если ЗначениеЗаполнено(АдресХранилища) И ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		
		ДанныеКонтрагента = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если ДанныеКонтрагента <> Неопределено Тогда
			Если ДанныеКонтрагента.Количество() > 0 Тогда
				Состояние = ДанныеКонтрагента[0].Состояние;
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
		
	// 2. Если в хранилище нет результата, то пытаемся получить состояние из регистра
	Если НЕ ЗначениеЗаполнено(Состояние) И ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СостоянияКонтрагентов.Состояние
		               |ИЗ
		               |	РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
		               |ГДЕ
		               |	СостоянияКонтрагентов.Контрагент = &Контрагент
		               |	И СостоянияКонтрагентов.ИНН = &ИНН
		               |	И СостоянияКонтрагентов.КПП = &КПП";

		Запрос.УстановитьПараметр("ИНН",		ИНН);
		Запрос.УстановитьПараметр("КПП", 		КПП);
		Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		// Определяем состояние из регистра
		Пока РезультатЗапроса.Следующий() Цикл
			Состояние = РезультатЗапроса.Состояние;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Состояние;
		
КонецФункции

Функция ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента) Экспорт
	
	ФоновоеЗаданиеСуществует = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗаданияПроверкиКонтрагента) <> Неопределено;
	Если ФоновоеЗаданиеСуществует Тогда 
		Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗаданияПроверкиКонтрагента); 
	Иначе
		Возврат Истина; 
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область НастройкиПроверки

Процедура ЗапомнитьЧтоБольшеНеНужноПоказыватьПредложениеИспользоватьСервис() Экспорт
	
	ХранилищеОбщихНастроек.Сохранить("ПроверкаКонтрагентов_БольшеНеПоказыватьПредложениеИспользоватьСервис", , Истина);
	
КонецПроцедуры

// Определяет, нужно ли показывать предложение на включение проверки с учетом следующего:
// 1. Что есть право на использование или настройку проверки
// 2. Что проверка еще не включена
// 3. Что пользователь не нажал кнопку "БольшеНеПоказывать"
// 4. Что с момента последнего отображения предложения уже прошло определенное время
Функция НужноПоказатьПредложениеВключитьПроверкаКонтрагентов() Экспорт
	
	НужноПоказатьПредложение =
		// В модели сервисов предложение не показываем
		НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
		// Проверяем наличие прав
		И (ПроверкаКонтрагентов.ЕстьПравоНаИспользованиеПроверки() 
		ИЛИ ПроверкаКонтрагентов.ЕстьПравоНаРедактированиеНастроек()) 
		// Определяем, включен ли сервис
		И НЕ ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена()
		// Проверяем, не нажал ли пользователь кнопку "Больше не показывать" в предложении на включение сервиса
		И НЕ ПроверкаКонтрагентов.БольшеНеПоказыватьПредложениеПодключиться()
		// Проверяем, давно ли в последний раз показывалось предложение на включение сервиса
		И ПоследнееОтображениеПредложенияНаВключениеСервисаБылоДавно();
	
	Возврат НужноПоказатьПредложение;

КонецФункции

// Проверяет, что проверка включена и есть необходимые права
Функция ИспользованиеПроверкиВозможно() Экспорт
	
	Возврат ПроверкаКонтрагентов.ЕстьПравоНаИспользованиеПроверки()
		И ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена();
	
КонецФункции

#КонецОбласти

#Область Тексты

Функция ПредставлениеРезультатаПроверкиКонтрагента(Знач Контрагент, ИНН, КПП, АдресХранилища, Знач ИсходныйТекст = "") Экспорт
	
	Результат = ИсходныйТекст;
	
	ИспользованиеПроверкиВозможно = ИспользованиеПроверкиВозможно(); 
	Если ИспользованиеПроверкиВозможно Тогда
	
		СостояниеКонтрагента = ТекущееСостояниеКонтрагента(Контрагент, ИНН, КПП, АдресХранилища);
		
		Если СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.ПрекратилДеятельность
			ИЛИ СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.ОтсутствуетВРеестре 
			ИЛИ СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.КППНеСоотвествуетИНН
			ИЛИ СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.Действует Тогда
			
			// Определяем цвет надписи
			Если СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.ПрекратилДеятельность Тогда
				ЦветТекста = ЦветаСтиля.ЦветКонтрагентаПрекратившегоДеятельность;
			ИначеЕсли СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.ОтсутствуетВРеестре 
				ИЛИ СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.КППНеСоотвествуетИНН Тогда
				ЦветТекста = ЦветаСтиля.ЦветКонтрагентаОтсутствущегоВРеестре;
			ИначеЕсли СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.Действует Тогда
				ЦветТекста = ЦветаСтиля.ЦветДействующегоКонтрагента;
			КонецЕсли;
			
			// Формируем строку
			МассивПодстрок = Новый Массив;
			Если ЗначениеЗаполнено(ИсходныйТекст) Тогда
				МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(ИсходныйТекст,,ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой));
				МассивПодстрок.Добавить("   ");
			КонецЕсли;
			
			ЭтоФизЛицо = СтрДлина(ИНН) = 12 И СтрДлина(КПП) = 0;
			ПредставлениеСостояния = ПредставлениеСостояния(ЭтоФизЛицо, СостояниеКонтрагента);
			
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеСостояния,,ЦветТекста,, "ПодробнееОПроверкеКонтрагентов"));
			
			Результат = Новый ФорматированнаяСтрока(МассивПодстрок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоследнееОтображениеПредложенияНаВключениеСервисаБылоДавно()
	
	ЧетыреЧаса = 60*60*4;
	ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса = ХранилищеОбщихНастроек.Загрузить("ПроверкаКонтрагентов_ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса");
	
	// Предложение включить сервис не показывалось вообще,
	// либо с момента последнего отображения предупреждения уже прошло 4 часа
	ПредложениеПоказывалосьДавно = ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса = Неопределено ИЛИ 
		ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса + ЧетыреЧаса < ТекущаяДатаСеанса();
	
	Возврат ПредложениеПоказывалосьДавно;
	
КонецФункции

Функция ПредставлениеСостояния(ЭтоФизЛицо, СостояниеКонтрагента)
	
	Если СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.ПрекратилДеятельность И ЭтоФизЛицо Тогда
		
		Результат = НСтр("ru = 'Не действует'");
		
	Иначе
		Результат = Строка(СостояниеКонтрагента);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

