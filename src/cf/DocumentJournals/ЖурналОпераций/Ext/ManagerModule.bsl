#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список документов, которые регистрируются в журнале.
// Из списка исключаются документы отключенные функциональными опциями.
//
// Возвращаемое значение:
// Массив объектов метаданных
//
Функция СоставДокументов() Экспорт
	
	ПроверяемыеФункциональныеОпции = Новый Массив;
	ПроверяемыеФункциональныеОпции.Добавить("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	ПроверяемыеФункциональныеОпции.Добавить("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров");
	ПроверяемыеФункциональныеОпции.Добавить("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов");
	ПроверяемыеФункциональныеОпции.Добавить("ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров");
	ПроверяемыеФункциональныеОпции.Добавить("ВедетсяОтгрузкаБезПереходаПраваСобственности");
	ПроверяемыеФункциональныеОпции.Добавить("ВедетсяПроизводственнаяДеятельность");
	ПроверяемыеФункциональныеОпции.Добавить("ВедетсяРозничнаяТорговля");
	ПроверяемыеФункциональныеОпции.Добавить("ВедетсяУчетДенежныхДокументов");
	ПроверяемыеФункциональныеОпции.Добавить("ВедетсяУчетИмпортныхТоваров");
	ПроверяемыеФункциональныеОпции.Добавить("ВедетсяУчетНМА");
	ПроверяемыеФункциональныеОпции.Добавить("ВедетсяУчетОсновныхСредств");
	ПроверяемыеФункциональныеОпции.Добавить("ВедетсяУчетСпецодеждыСпецоснастки");
	ПроверяемыеФункциональныеОпции.Добавить("ВестиУчетПоПодразделениям");
	ПроверяемыеФункциональныеОпции.Добавить("ИспользоватьКомплектациюНоменклатуры");
	ПроверяемыеФункциональныеОпции.Добавить("ИспользоватьНачислениеЗарплаты");
	ПроверяемыеФункциональныеОпции.Добавить("ИспользоватьНесколькоСкладовБухгалтерскийУчет");
	ПроверяемыеФункциональныеОпции.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
	ПроверяемыеФункциональныеОпции.Добавить("ИспользоватьПакетноеВыставлениеАктов");
	ПроверяемыеФункциональныеОпции.Добавить("ИспользуетсяНДФЛИП");
	ПроверяемыеФункциональныеОпции.Добавить("ИспользуетсяОСНО");
	ПроверяемыеФункциональныеОпции.Добавить("ИспользуетсяУСН");
	ПроверяемыеФункциональныеОпции.Добавить("ИспользуетсяУСНПатент");
	ПроверяемыеФункциональныеОпции.Добавить("УправлениеЗачетомАвансовПогашениемЗадолженности");
	ПроверяемыеФункциональныеОпции.Добавить("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ПроверяемыеФункциональныеОпции.Добавить("УчетЗарплатыИКадровСредствамиБухгалтерии");
	
	ФункциональныеОпцииДокументов = Новый Соответствие;
	
	Для Каждого ИмяФункциональнойОпции Из ПроверяемыеФункциональныеОпции Цикл
		
		МетаданныеФункциональнойОпции = Метаданные.ФункциональныеОпции[ИмяФункциональнойОпции];
		
		Для Каждого ЭлементСостава Из МетаданныеФункциональнойОпции.Состав Цикл
			Если ТипЗнч(ЭлементСостава.Объект) = Тип("ОбъектМетаданных") И Метаданные.Документы.Содержит(ЭлементСостава.Объект) Тогда
				ЗначениеОпции = ФункциональныеОпцииДокументов.Получить(ЭлементСостава.Объект);
				ФункциональныеОпцииДокументов.Вставить(ЭлементСостава.Объект,
					?(ЗначениеОпции <> Неопределено, ЗначениеОпции, Ложь) Или ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Передача товаров
	ФункциональныеОпцииДокументов.Вставить(Метаданные.Документы.ПередачаТоваров,
		ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		Или ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность"));
	
	СписокДокументов = Новый Массив;
	
	МетаданныеЖурнала = Метаданные.ЖурналыДокументов.ЖурналОпераций;
	
	Для Каждого РегистрируемыйДокумент Из МетаданныеЖурнала.РегистрируемыеДокументы Цикл
		
		ДокументВключен = ФункциональныеОпцииДокументов.Получить(РегистрируемыйДокумент);
		
		Если ДокументВключен = Неопределено Или ДокументВключен Тогда
			СписокДокументов.Добавить(РегистрируемыйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Соответствие;
	
	ПолеЗапросаНомер =
	"	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.СчетФактураВыданный)
	|			ТОГДА ВЫРАЗИТЬ(Таб.Ссылка КАК Документ.СчетФактураВыданный).ПредставлениеНомера
	|		КОГДА ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.СчетФактураПолученный)
	|			ТОГДА ВЫРАЗИТЬ(Таб.Ссылка КАК Документ.СчетФактураПолученный).ПредставлениеНомера
	|		ИНАЧЕ Таб.Номер
	|	КОНЕЦ";
	
	ПолеЗапросаДатаВх =
	"	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.ОтчетКомиссионераОПродажах)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.ПоступлениеДенежныхДокументов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.ПоступлениеДопРасходов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.ПоступлениеНаРасчетныйСчет)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.ПоступлениеНМА)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.ПоступлениеТоваровУслуг)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.СчетНаОплатуПоставщика)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.СчетФактураПолученный)
	|			ТОГДА Таб.ДатаВходящегоДокумента
	|		ИНАЧЕ """"
	|	КОНЕЦ";
	
	
	Результат.Вставить("Номер,",                 ПолеЗапросаНомер);
	Результат.Вставить("ДатаВходящегоДокумента", ПолеЗапросаДатаВх);
	Результат.Вставить("НомерВходящегоДокумента",
		СтрЗаменить(ПолеЗапросаДатаВх, "ДатаВходящегоДокумента", "НомерВходящегоДокумента"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли