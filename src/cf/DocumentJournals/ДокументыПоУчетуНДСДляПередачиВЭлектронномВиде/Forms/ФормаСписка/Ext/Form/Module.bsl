&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьРежимВыбора(Параметры.РежимВыбора);
	
	ЗаполнитьСпискиВыбора();
	
	ОтборОрганизация = ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	
	Если ОтборОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
		ОтборОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли; 
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ПериодСоставления", ОтборПериодСоставления, ЗначениеЗаполнено(ОтборПериодСоставления));
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "НалоговыйПериод", ОтборНалоговыйПериод, ЗначениеЗаполнено(ОтборНалоговыйПериод));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОтборОрганизация = ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список, ,Параметр);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодСоставленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	
	ВыбранноеЗначение	= НачалоКвартала(ВыбранноеЗначение);
	
	ГодаВыбранногоЗначения		= Год(ВыбранноеЗначение);
	КварталВыбранногоЗначения	= Цел(Месяц(ВыбранноеЗначение)/3) + 1;
	
	ОтборПериодСоставления			= ВыбранноеЗначение;
	ПредставлениеПериодаСоставления	= ПредставлениеКвартала(ГодаВыбранногоЗначения, КварталВыбранногоЗначения);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ПериодСоставления", ОтборПериодСоставления, ЗначениеЗаполнено(ОтборПериодСоставления));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодСоставленияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	
	ОтборПериодСоставления			= '00010101';
	ПредставлениеПериодаСоставления	= "";
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ПериодСоставления", ОтборПериодСоставления, ЗначениеЗаполнено(ОтборПериодСоставления));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНалоговыйПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	
	ВыбранноеЗначение	= НачалоКвартала(ВыбранноеЗначение);
	
	ГодаВыбранногоЗначения		= Год(ВыбранноеЗначение);
	КварталВыбранногоЗначения	= Цел(Месяц(ВыбранноеЗначение)/3) + 1;
	
	ОтборНалоговыйПериод			= ВыбранноеЗначение;
	ПредставлениеНалоговогоПериода	= ПредставлениеКвартала(ГодаВыбранногоЗначения, КварталВыбранногоЗначения);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "НалоговыйПериод", ОтборНалоговыйПериод, ЗначениеЗаполнено(ОтборНалоговыйПериод));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНалоговыйПериодОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	
	ОтборНалоговыйПериод			= '00010101';
	ПредставлениеНалоговогоПериода	= "";
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "НалоговыйПериод", ОтборНалоговыйПериод, ЗначениеЗаполнено(ОтборНалоговыйПериод));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВсеДокументы(Команда)
	Перем Отказ;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Организация",		ОтборОрганизация);
	СтруктураПараметров.Вставить("НалоговыйПериод",	ОтборПериодСоставления);
	СтруктураПараметров.Вставить("ФормироватьКнигуПокупок",				Истина);
	СтруктураПараметров.Вставить("ФормироватьКнигуПродаж",				Истина);
	СтруктураПараметров.Вставить("ФормироватьЖурналУчетаСчетовФактур",	Истина);
	СтруктураПараметров.Вставить("ФормироватьДопЛистыКнигиПокупок",		Истина);
	СтруктураПараметров.Вставить("ФормироватьДопЛистыКнигиПродаж",		Истина);
	
	ТекстВопроса	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сформировать документы за %1?'"),
		ПредставлениеПериодаСоставления);
		
	ОповещениеОтвет = Новый ОписаниеОповещения("ВсеДокументыЗавершение", ЭтотОбъект, СтруктураПараметров);
		
	ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПокупок(Команда)
	Перем Отказ;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Организация",		ОтборОрганизация);
	СтруктураПараметров.Вставить("НалоговыйПериод",	ОтборПериодСоставления);
	СтруктураПараметров.Вставить("ФормироватьКнигуПокупок",	Истина);
	
	ТекстВопроса	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сформировать Книгу покупок за %1?'"),
		ПредставлениеПериодаСоставления);
		
	ОповещениеОтвет = Новый ОписаниеОповещения("КнигаПокупокЗавершение", ЭтотОбъект, СтруктураПараметров);
		
	ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродаж(Команда)
	Перем Отказ;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Организация",		ОтборОрганизация);
	СтруктураПараметров.Вставить("НалоговыйПериод",	ОтборПериодСоставления);
	СтруктураПараметров.Вставить("ФормироватьКнигуПродаж",	Истина);
	
	ТекстВопроса	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сформировать Книгу продаж за %1?'"),
		ПредставлениеПериодаСоставления);
		
	ОповещениеОтвет = Новый ОписаниеОповещения("КнигаПродажЗавершение", ЭтотОбъект, СтруктураПараметров);
		
	ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаСчетовФактур(Команда)
	Перем Отказ;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Организация",		ОтборОрганизация);
	СтруктураПараметров.Вставить("НалоговыйПериод",	ОтборПериодСоставления);
	СтруктураПараметров.Вставить("ФормироватьЖурналУчетаСчетовФактур",	Истина);
	
	ТекстВопроса	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сформировать Журнал учета полученных и выставленных счетов-фактур за %1?'"),
		ПредставлениеПериодаСоставления);
		
	ОповещениеОтвет = Новый ОписаниеОповещения("ЖурналУчетаСчетовФактурЗавершение", ЭтотОбъект, СтруктураПараметров);
		
	ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ДопЛистКнигиПокупок(Команда)
	Перем Отказ;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Организация",		ОтборОрганизация);
	СтруктураПараметров.Вставить("НалоговыйПериод",	ОтборПериодСоставления);
	СтруктураПараметров.Вставить("ФормироватьДопЛистыКнигиПокупок",	Истина);
	
	ТекстВопроса	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сформировать доп. листы Книги покупок за %1?'"),
		ПредставлениеПериодаСоставления);
	
	ОповещениеОтвет = Новый ОписаниеОповещения("ДопЛистКнигиПокупокЗавершение", ЭтотОбъект, СтруктураПараметров);
		
	ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ДопЛистКнигиПродаж(Команда)
	Перем Отказ;
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Организация",		ОтборОрганизация);
	СтруктураПараметров.Вставить("НалоговыйПериод",	ОтборПериодСоставления);
	СтруктураПараметров.Вставить("ФормироватьДопЛистыКнигиПродаж",	Истина);
	
	ТекстВопроса	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сформировать доп. листы Книги продаж за %1?'"),
		ПредставлениеПериодаСоставления);
	
	ОповещениеОтвет = Новый ОписаниеОповещения("ДопЛистКнигиПродажЗавершение", ЭтотОбъект, СтруктураПараметров);
		
	ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьРежимВыбора(РежимВыбора)
	
	Элементы.Список.РежимВыбора = РежимВыбора;    
	Элементы.Выбрать.КнопкаПоУмолчанию = РежимВыбора;
	Элементы.Выбрать.Видимость= РежимВыбора;    
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	ТекущийПериод	= НачалоКвартала(ТекущаяДатаСеанса());
	
	ГодаНачала1137		= 2012;
	КварталНачала1137	= 2;
	
	Элементы.ОтборПериодСоставления.СписокВыбора.Очистить();
	Элементы.ОтборНалоговыйПериод.СписокВыбора.Очистить();
	
	Для Квартал = КварталНачала1137 По 4 Цикл
		Элементы.ОтборПериодСоставления.СписокВыбора.Добавить(ЗначениеДатыКвартала(ГодаНачала1137, Квартал), ПредставлениеКвартала(ГодаНачала1137, Квартал));
		Элементы.ОтборНалоговыйПериод.СписокВыбора.Добавить(ЗначениеДатыКвартала(ГодаНачала1137, Квартал), ПредставлениеКвартала(ГодаНачала1137, Квартал));
	КонецЦикла;
	
	Для Год = ГодаНачала1137 + 1 По Год(ТекущийПериод) Цикл
		Для Квартал = 1 По 4 Цикл
			Элементы.ОтборПериодСоставления.СписокВыбора.Добавить(ЗначениеДатыКвартала(Год, Квартал), ПредставлениеКвартала(Год, Квартал));
			Элементы.ОтборНалоговыйПериод.СписокВыбора.Добавить(ЗначениеДатыКвартала(Год, Квартал), ПредставлениеКвартала(Год, Квартал));
		КонецЦикла;
	КонецЦикла;
	
	ТекущийПериодСоставления	= Элементы.ОтборПериодСоставления.СписокВыбора.НайтиПоЗначению(ТекущийПериод);
	Если НЕ ТекущийПериодСоставления = Неопределено Тогда
		ОтборПериодСоставления			= ТекущийПериодСоставления.Значение;
		ПредставлениеПериодаСоставления	= ТекущийПериодСоставления.Представление;
	КонецЕсли;
	
	ОтборНалоговыйПериод			= '00010101';
	ПредставлениеНалоговогоПериода	= "";
	
КонецПроцедуры

&НаСервере
Функция ЗначениеДатыКвартала(Год, Квартал)

	Возврат Дата(Год, МесяцКвартала(Квартал), 1);

КонецФункции

&НаСервере
Функция ПредставлениеКвартала(Год, Квартал)

	Возврат Формат(ЗначениеДатыКвартала(Год, Квартал), "ДФ=""к 'квартал' гггг 'г.'""");

КонецФункции

&НаСервере
Функция МесяцКвартала(Квартал)

	Если Квартал = 4 Тогда
		Возврат 10;
	ИначеЕсли Квартал = 3 Тогда
		Возврат 7;
	ИначеЕсли Квартал = 2 Тогда
		Возврат 4;
	Иначе
		Возврат 1;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура СформироватьДокументы(СтруктураПараметров)
	
	ИБФайловая	= СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат	= СформироватьДокументыНаСервере(СтруктураПараметров, ИБФайловая);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ПодключатьОбработчикОжидания = НЕ ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
		Если ПодключатьОбработчикОжидания Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		КонецЕсли;
	Иначе
		Если Результат.Свойство("СозданныеДокументы") Тогда
			ОбработатьВыполнениеОперации(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДокументыНаСервере(СтруктураПараметров, ИБФайловая)
		
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Документы.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.СформироватьДокументыОтчетности(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Формирование документов по учету НДС для передачи в электронном виде'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Документы.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.СформироватьДокументыОтчетности",
			СтруктураПараметров, 
			НаименованиеЗадания);
		АдресХранилища       = Результат.АдресХранилища;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РезультатОперации	= ОбработатьВыполнениеОперацииНаСервере();
		Результат.Вставить("СозданныеДокументы",		РезультатОперации.СозданныеДокументы);
		Результат.Вставить("ПерезаполненныеДокументы",	РезультатОперации.ПерезаполненныеДокументы);
		Результат.Вставить("УдаленныеДокументы",		РезультатОперации.УдаленныеДокументы);
		Результат.Вставить("Ошибки",					РезультатОперации.Ошибки);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			РезультатОперации	= ОбработатьВыполнениеОперацииНаСервере();
			ОбработатьВыполнениеОперации(РезультатОперации);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыполнениеОперацииНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыполнениеОперации(Результат)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Документ Из Результат.УдаленныеДокументы Цикл
	
		ТекстОповещения	= НСтр("ru = 'Документ помечен на удаление'");
		ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Документ), Строка(Документ));
	
	КонецЦикла;
	
	Для каждого Документ Из Результат.ПерезаполненныеДокументы Цикл
	
		ТекстОповещения	= НСтр("ru = 'Перезаполнен документ'");
		ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Документ), Строка(Документ));
	
	КонецЦикла;
	
	Для каждого Документ Из Результат.СозданныеДокументы Цикл
	
		ТекстОповещения	= НСтр("ru = 'Сформирован документ'");
		ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Документ), Строка(Документ));
	
	КонецЦикла;
	
	Если Результат.СозданныеДокументы.Количество() + Результат.ПерезаполненныеДокументы.Количество() > 1 Тогда
		ТекстОповещения	= НСтр("ru = 'Документы успешно сформированы'");
		ПоказатьОповещениеПользователя(ТекстОповещения);
	КонецЕсли;
	
	Для каждого ТекстОшибки Из Результат.Ошибки Цикл
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ВсеДокументыЗавершение(Результат, СтруктураПараметров) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьДокументы(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура КнигаПокупокЗавершение(Результат, СтруктураПараметров) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьДокументы(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнигаПродажЗавершение(Результат, СтруктураПараметров) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьДокументы(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналУчетаСчетовФактурЗавершение(Результат, СтруктураПараметров) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьДокументы(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопЛистКнигиПокупокЗавершение(Результат, СтруктураПараметров) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьДокументы(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопЛистКнигиПродажЗавершение(Результат, СтруктураПараметров) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьДокументы(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры  
	