#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция УсловияПоВозрастаниюСложности() Экспорт
	
	ЗначенияПеречисления = Перечисления.УсловияПримененияТребованийЗаконодательства;
	
	ПорядокУсловий = Новый Массив; 
	ПорядокУсловий.Добавить(ЗначенияПеречисления.ФизическиеЛица);
	ПорядокУсловий.Добавить(ЗначенияПеречисления.ЮридическиеЛица);
	ПорядокУсловий.Добавить(ЗначенияПеречисления.ОбщаяСистемаНалогообложения);
	ПорядокУсловий.Добавить(ЗначенияПеречисления.УпрощеннаяСистемаНалогообложения);
	ПорядокУсловий.Добавить(ЗначенияПеречисления.ПлательщикиНДС);
	ПорядокУсловий.Добавить(ЗначенияПеречисления.ПлательщикиЕНВД);
	
	// Все остальные считаем сложными
	
	Возврат ПорядокУсловий;
	
КонецФункции

Функция ПроверитьУсловия(Знач УсловияДляПроверки, Период, Периодичность, Организация, ВыполненныеУсловия = Неопределено) Экспорт
	
	ВыполненныеУсловия = Новый Массив;
	
	Если УсловияДляПроверки.Количество() = 0 Тогда
		Возврат Неопределено; // Все условия выполнены
	КонецЕсли;
	
	Для Каждого Условие Из УсловияДляПроверки Цикл
		
		Если УсловиеВыполняется(Условие, Период, Периодичность, Организация) Тогда
			ВыполненныеУсловия.Добавить(Условие);
		Иначе
			Возврат Условие;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено; // Все условия выполнены
	
КонецФункции

Функция УсловиеВыполняется(Условие, Период, Периодичность, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияПеречисления = Перечисления.УсловияПримененияТребованийЗаконодательства;
	
	// ЮридическиеЛица, ФизическиеЛица
	Если Условие = ЗначенияПеречисления.ФизическиеЛица Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ИначеЕсли Условие = ЗначенияПеречисления.ЮридическиеЛица Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	// ЕстьСотрудники
	Если Условие = ЗначенияПеречисления.ЕстьСотрудники Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Возврат Истина;
		Иначе
			Возврат УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
		КонецЕсли;
	КонецЕсли;
	
	// СистемаНалогообложения
	Если Условие = ЗначенияПеречисления.ОбщаяСистемаНалогообложения Тогда
		Возврат УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Общая
		Или УчетнаяПолитика.СистемаНалогообложения(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период)) = Перечисления.СистемыНалогообложения.Общая;
	ИначеЕсли Условие = ЗначенияПеречисления.УпрощеннаяСистемаНалогообложения Тогда
		Возврат УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная
		Или УчетнаяПолитика.СистемаНалогообложения(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период)) = Перечисления.СистемыНалогообложения.Упрощенная;
	КонецЕсли;
	
	// Отдельные виды налогов
	Если Условие = ЗначенияПеречисления.ПлательщикиЕНВД Тогда
		Возврат УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) 
		Или УчетнаяПолитика.ПлательщикЕНВД(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	ИначеЕсли Условие = ЗначенияПеречисления.ПлательщикиНДС Тогда
		Возврат УчетнаяПолитика.ПлательщикНДС(Организация, Период)
		Или УчетнаяПолитика.ПлательщикНДС(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	КонецЕсли;
	
	// Виды имущества
	Если Условие = ЗначенияПеречисления.ЕстьИмущество Тогда
		Возврат ЕстьИмущество(Период, Периодичность, Организация);
	ИначеЕсли Условие = ЗначенияПеречисления.ЕстьТранспортныеСредства Тогда
		Возврат ЕстьТранспортныеСредства(Период, Периодичность, Организация);
	ИначеЕсли Условие = ЗначенияПеречисления.ЕстьЗемельныеУчастки Тогда
		Возврат ЕстьЗемельныеУчастки(Период, Периодичность, Организация);
	КонецЕсли;
	
	// Акцизы
	Если Условие = ЗначенияПеречисления.АкцизыОбщаяФорма Тогда
		Возврат ЕстьАкцизыКромеТабака(Организация);
	ИначеЕсли Условие = ЗначенияПеречисления.АкцизыОбщийСрок Тогда
		Возврат ЕстьАкцизыОбщийСрок(Организация);
	ИначеЕсли Условие = ЗначенияПеречисления.АкцизыФормаТабак Тогда
		Возврат ЕстьАкцизыТабак(Организация);
	ИначеЕсли Условие = ЗначенияПеречисления.АкцизыЛьготныйСрок Тогда
		Возврат ЕстьАкцизыЛьготныйСрок(Организация);
	ИначеЕсли Условие = ЗначенияПеречисления.АвансыПоАкцизам Тогда
		Возврат ЕстьАвансыПоАкцизам(Организация);
	КонецЕсли;
	
	// Фиксированные страховые взносы
	Если Условие = ЗначенияПеречисления.ФиксированныеСтраховыеВзносы_Квартал Тогда
		ПериодичностьУплатыФиксированныхСтраховыхВзносов = 
			УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период);
		Возврат (ПериодичностьУплатыФиксированныхСтраховыхВзносов = Перечисления.Периодичность.Квартал);
	ИначеЕсли Условие = ЗначенияПеречисления.ФиксированныеСтраховыеВзносы_Год Тогда
		ПериодичностьУплатыФиксированныхСтраховыхВзносов = 
			УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период);
		Возврат (ПериодичностьУплатыФиксированныхСтраховыхВзносов = Перечисления.Периодичность.Год);
	КонецЕсли;
	
	// Представление отчетов в электронном виде
	Если Условие = ОтчетностьПФРвЭлектронномВиде Тогда
		Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация, 
			Перечисления.ТипыКонтролирующихОрганов.ПФР);
	ИначеЕсли Условие = ОтчетностьПФРнаБумажномНосителе Тогда
		Возврат Не ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация, 
			Перечисления.ТипыКонтролирующихОрганов.ПФР);
	ИначеЕсли Условие = ОтчетностьФССвЭлектронномВиде Тогда
		Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация, 
			Перечисления.ТипыКонтролирующихОрганов.ФСС);
	ИначеЕсли Условие = ОтчетностьФССнаБумажномНосителе Тогда
		Возврат Не ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация, 
			Перечисления.ТипыКонтролирующихОрганов.ФСС);
	КонецЕсли;
	
	// Остальные условия не умеем определять
	Возврат Ложь;
	
КонецФункции

Функция НепериодическиеУсловия() Экспорт
	
	Условия = Новый Соответствие;
	
	ЗначенияПеречисления = Перечисления.УсловияПримененияТребованийЗаконодательства;
	
	Условия.Вставить(ЗначенияПеречисления.АкцизыОбщаяФорма,   Истина);
	Условия.Вставить(ЗначенияПеречисления.АкцизыФормаТабак,   Истина);
	Условия.Вставить(ЗначенияПеречисления.АкцизыОбщийСрок,    Истина);
	Условия.Вставить(ЗначенияПеречисления.АкцизыЛьготныйСрок, Истина);
	Условия.Вставить(ЗначенияПеречисления.АвансыПоАкцизам,    Истина);
	Условия.Вставить(ЗначенияПеречисления.ЮридическиеЛица,    Истина);
	Условия.Вставить(ЗначенияПеречисления.ФизическиеЛица,     Истина);
	
	Возврат Условия;
	
КонецФункции

Функция ЕстьИмущество(Период, Периодичность, Организация)
	
	// Налог на имущество заведомо не платят те, у кого не было ОС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СобытияОСОрганизаций.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|ГДЕ
	|	СобытияОСОрганизаций.Организация = &Организация
	|	И СобытияОСОрганизаций.Период <= &КонецПериода";
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// По старым правилам налог платили практически все, у кого есть хоть какие-то ОС
	Если Период < '2013-01-01' Тогда
		Возврат Истина;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НедвижимоеИмущество", Перечисления.ГруппыОС.НедвижимоеИмущество());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство
	|ПОМЕСТИТЬ Недвижимость
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.ГруппаОС В(&НедвижимоеИмущество)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Недвижимость.ОсновноеСредство
	|ИЗ
	|	Недвижимость КАК Недвижимость";
	ЕстьНедвижимость = Не Запрос.Выполнить().Пустой();
	
	Если ЕстьНедвижимость Тогда
		// Дешевле всего проверить, были ли движения по ОС за период.
		// Если были, то надо платить налог.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("НачалоПериода", ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("КонецПериода",  ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СобытияОСОрганизаций.ОсновноеСредство
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
		|ГДЕ
		|	СобытияОСОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И СобытияОСОрганизаций.Организация = &Организация
		|	И СобытияОСОрганизаций.ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				Недвижимость.ОсновноеСредство
		|			ИЗ
		|				Недвижимость)";
		Если Не Запрос.Выполнить().Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		
		// Также недорого проверить, есть ли объекты недвижимости на начало периода.
		// Если есть, то надо платить налог.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Период",      ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаОсновныхСредств
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства))
		|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ))
		|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеМЦ))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХозрасчетныйОстатки.Счет
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаОсновныхСредств.Счет
		|				ИЗ
		|					СчетаОсновныхСредств),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						Недвижимость.ОсновноеСредство
		|					ИЗ
		|						Недвижимость)) КАК ХозрасчетныйОстатки";
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если недвижимости нет (совсем нет или нет в анализируемом периоде), 
	// то придется проверить, а нет ли движимого имущества, принятого на учет до 2013 года.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	И ОсновныеСредства.Период < ДАТАВРЕМЯ(2013, 1, 1)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьИмуществоЕСГС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам
	|ГДЕ
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ВидИмущества = ЗНАЧЕНИЕ(Перечисление.ВидыИмущества.ВходитВСоставЕСГС)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьТранспортныеСредства(Период = Неопределено, Периодичность = Неопределено, Организация = Неопределено) Экспорт
	
	Если Организация = Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияТранспортныхСредств.ОсновноеСредство
		|ИЗ
		|	РегистрСведений.РегистрацияТранспортныхСредств КАК РегистрацияТранспортныхСредств";
		
		Возврат Не Запрос.Выполнить().Пустой();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период",      ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияТранспортныхСредств.Организация
		|ИЗ
		|	РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(&Период, Организация = &Организация) КАК РегистрацияТранспортныхСредств";
		Возврат Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
КонецФункции
		
Функция ЕстьЗемельныеУчастки(Период, Периодичность, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацияЗемельныхУчастков.Организация
	|ИЗ
	|	РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&Период, Организация = &Организация) КАК РегистрацияЗемельныхУчастков";
	Возврат Не Запрос.Выполнить().Пустой();
	
	
КонецФункции

Функция ЕстьЗемельныеУчасткиПоКатегорямПодчинения(КатегорияПодчинения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтрКБК", "__________" + КатегорияПодчинения + "____110");
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацияЗемельныхУчастков.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
	|ГДЕ
	|	РегистрацияЗемельныхУчастков.КБК ПОДОБНО &СтрКБК
	|	И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАкцизыКромеТабака(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И ПорядокУплатыАкцизов.ВидТовара <> ЗНАЧЕНИЕ(Перечисление.ВидыПодакцизныхТоваров.Табак)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАкцизыТабак(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И ПорядокУплатыАкцизов.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыПодакцизныхТоваров.Табак)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАкцизыОбщийСрок(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И НЕ ПорядокУплатыАкцизов.ЛьготныйСрокУплаты";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАкцизыЛьготныйСрок(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И ПорядокУплатыАкцизов.ЛьготныйСрокУплаты";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАвансыПоАкцизам(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И ПорядокУплатыАкцизов.АвансыПриЗакупкеСырья";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецЕсли
