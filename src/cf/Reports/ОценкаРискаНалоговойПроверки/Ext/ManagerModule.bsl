#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	РезультатПроверкиКритериев = Новый ТабличныйДокумент;
	РезультатПроверкиКритериевПечатнаяФорма = Новый ТабличныйДокумент;
	РезультатыПроверки = Новый Структура;
	СведенияПредельныхЗначений = ПодготовитьСведенияПредельныхЗначений(ПараметрыОтчета);
	ДанныеУчетнойПолитики = НовыйДанныеУчетнойПолитики();
	ПодготовитьДанныеУчетнойПолитики(ДанныеУчетнойПолитики, ПараметрыОтчета);
	
	НалоговаяНагрузка(ПараметрыОтчета, ДанныеУчетнойПолитики, СведенияПредельныхЗначений, РезультатПроверкиКритериев,
		РезультатПроверкиКритериевПечатнаяФорма, РезультатыПроверки);
	УбыткиВОтчетности(ПараметрыОтчета, ДанныеУчетнойПолитики, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПечатнаяФорма, РезультатыПроверки);
	ЗначительныеВычетыПоНДС(ПараметрыОтчета, ДанныеУчетнойПолитики, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПечатнаяФорма, РезультатыПроверки);
	ТемпыРостаРасходов(ПараметрыОтчета, ДанныеУчетнойПолитики, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПечатнаяФорма, РезультатыПроверки);
	СреднемесячныйУровеньЗарплаты(ПараметрыОтчета, ДанныеУчетнойПолитики, СведенияПредельныхЗначений, 
		РезультатПроверкиКритериев, РезультатПроверкиКритериевПечатнаяФорма, РезультатыПроверки);
	ПриближениеКПредельнымЗначениямСпецРежима(ПараметрыОтчета, ДанныеУчетнойПолитики, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПечатнаяФорма, РезультатыПроверки);
	ЗначительныеПрофессиональныеВычеты(ПараметрыОтчета, ДанныеУчетнойПолитики, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПечатнаяФорма, РезультатыПроверки);
	ЗаключениеДоговоровБезДеловойЦели(РезультатПроверкиКритериев, РезультатПроверкиКритериевПечатнаяФорма);
	НеПредоставлениеПоясненийВФНС(РезультатПроверкиКритериев, РезультатПроверкиКритериевПечатнаяФорма);
	НеоднократнаяСменаМестУчета(ПараметрыОтчета, РезультатПроверкиКритериев, РезультатПроверкиКритериевПечатнаяФорма);
	УровеньРентабельности(ПараметрыОтчета, ДанныеУчетнойПолитики, СведенияПредельныхЗначений, РезультатПроверкиКритериев,
		РезультатПроверкиКритериевПечатнаяФорма, РезультатыПроверки);
	ДеятельностьСВысокимНалоговымРиском(РезультатПроверкиКритериев, РезультатПроверкиКритериевПечатнаяФорма);
	
	РезультатВыполнения = Новый Структура;
	ЗаполнитьМакетОтчетаЗаголовокОтчета(ПараметрыОтчета, РезультатВыполнения, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПечатнаяФорма, РезультатыПроверки);
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурИФункцийПолученияСведенийПредельныхЗначений

Функция ПодготовитьСведенияПредельныхЗначений(ПараметрыОтчета)
	
	СведенияПредельныхЗначений = Новый Структура;
	ГодПроверки = Формат(Год(ПараметрыОтчета.НачалоПериода), "ЧГ=");
	Организация = ПараметрыОтчета.Организация;
	КодОКВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОКВЭД");
	
	МакетПредельныхЗначений = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет(
		"ПредельныеЗначенияРентабельностиИНалоговойНагрузки");
	
	Если РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(КодОКВЭД) и ЗначениеЗаполнено(КодОКВЭД) Тогда
		СведенияПредельныхЗначений.Вставить("ЕстьОКВЭД", Истина);
	Иначе
		Возврат СведенияПредельныхЗначений;
	КонецЕсли;
	ОбластьКлассификаторов = МакетПредельныхЗначений.Область("Классификатор");
	ОбластьСтрокиКодаОКВЭД = МакетПредельныхЗначений.НайтиТекст(Лев(КодОКВЭД, 2), , ОбластьКлассификаторов, Ложь, Истина);
	НомерСтрокиКодаОКВЭД = ОбластьСтрокиКодаОКВЭД.Верх;
	
	ОбластьНалоговойНагрузки = МакетПредельныхЗначений.Область("НалоговаяНагрузка");
	ОбластьРентабельностиПродаж = МакетПредельныхЗначений.Область("РентабельностьПродаж");
	ОбластьРентабельностиАктивов = МакетПредельныхЗначений.Область("РентабельностьАктивов");
	
	ОбластьКолонкиНалоговойНагрузки = МакетПредельныхЗначений.НайтиТекст(ГодПроверки, , ОбластьНалоговойНагрузки, Ложь, 
		Истина);
	ОбластьКолонкиРентабельностиПродаж = МакетПредельныхЗначений.НайтиТекст(ГодПроверки, , ОбластьРентабельностиПродаж, Ложь, 
		Истина);
	ОбластьКолонкиРентабельностиАктивов = МакетПредельныхЗначений.НайтиТекст(ГодПроверки, , ОбластьРентабельностиАктивов, Ложь, 
		Истина);
		
	НомерКолонкиНалоговойНагрузки = ПолучитьНомерКолонкиПредельногоЗначения(ОбластьКолонкиНалоговойНагрузки, 
		ОбластьНалоговойНагрузки, ГодПроверки);
	
	Если НомерКолонкиНалоговойНагрузки = Неопределено Тогда
		Возврат СведенияПредельныхЗначений;
	КонецЕсли;
	
	НомерКолонкиРентабельностиПродаж = ПолучитьНомерКолонкиПредельногоЗначения(ОбластьКолонкиРентабельностиПродаж, 
		ОбластьРентабельностиПродаж, ГодПроверки);
	НомерКолонкиРентабельностиАктивов = ПолучитьНомерКолонкиПредельногоЗначения(ОбластьКолонкиРентабельностиАктивов, 
		ОбластьРентабельностиАктивов, ГодПроверки);	
	
	ПредельноеЗначениеНалоговойНагрузки = Число(МакетПредельныхЗначений.Область(НомерСтрокиКодаОКВЭД, 
		НомерКолонкиНалоговойНагрузки).Текст);	
	ПредельноеЗначениеРентабельностиПродаж = Число(МакетПредельныхЗначений.Область(НомерСтрокиКодаОКВЭД, 
		НомерКолонкиРентабельностиПродаж).Текст);
	ПредельноеЗначениеРентабельностиАктивов = Число(МакетПредельныхЗначений.Область(НомерСтрокиКодаОКВЭД, 
		НомерКолонкиРентабельностиАктивов).Текст);
	
	СведенияПредельныхЗначений.Вставить("ПредельноеЗначениеНалоговойНагрузки", ПредельноеЗначениеНалоговойНагрузки);
	СведенияПредельныхЗначений.Вставить("ПредельноеЗначениеРентабельностиПродаж", ПредельноеЗначениеРентабельностиПродаж);
	СведенияПредельныхЗначений.Вставить("ПредельноеЗначениеРентабельностиАктивов", ПредельноеЗначениеРентабельностиАктивов);
	
	Возврат СведенияПредельныхЗначений;
	
КонецФункции

Функция ПолучитьНомерКолонкиПредельногоЗначения(ОбластьКолонкиПредельногоЗначения, ОбластьПредельногоЗначения, 
		ГодПроверки)
	
	НомерКолонкиПредельногоЗначения = Неопределено;
	
	Если ОбластьКолонкиПредельногоЗначения = Неопределено Тогда
		ПервыйГодПредельногоЗначения = ОбластьПредельногоЗначения.Текст;
		Если Число(ПервыйГодПредельногоЗначения) > Число(ГодПроверки) Тогда
			Возврат НомерКолонкиПредельногоЗначения;
		Иначе
			НомерКолонкиПредельногоЗначения = ОбластьПредельногоЗначения.Право;
		КонецЕсли;
	Иначе
		НомерКолонкиПредельногоЗначения = ОбластьКолонкиПредельногоЗначения.Лево;
	КонецЕсли;
	
	Возврат НомерКолонкиПредельногоЗначения;
	
КонецФункции

#КонецОбласти

#Область ПроцедурИФункцииПолученияДанныхУчетнойПолитики

Функция НовыйДанныеУчетнойПолитики()
	
	ДанныеУчетнойПолитики = Новый ТаблицаЗначений;
	ДанныеУчетнойПолитики.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты()));
	ДанныеУчетнойПолитики.Колонки.Добавить("СистемаНалогообложения", ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	ДанныеУчетнойПолитики.Колонки.Добавить("ПрименяетсяОсобыйПорядокНалогообложения", Новый ОписаниеТипов("Булево"));
	ДанныеУчетнойПолитики.Колонки.Добавить("ПлательщикНалогаНаПрибыль", Новый ОписаниеТипов("Булево"));
	ДанныеУчетнойПолитики.Колонки.Добавить("ПлательщикНДС", Новый ОписаниеТипов("Булево"));
	ДанныеУчетнойПолитики.Колонки.Добавить("ПлательщикЕНВД", Новый ОписаниеТипов("Булево"));
	ДанныеУчетнойПолитики.Колонки.Добавить("ПрименяетсяУСН", Новый ОписаниеТипов("Булево"));
	ДанныеУчетнойПолитики.Колонки.Добавить("ПрименяетсяУСНДоходы", Новый ОписаниеТипов("Булево"));
	ДанныеУчетнойПолитики.Колонки.Добавить("ПрименяетсяУСНДоходыМинусРасходы", Новый ОписаниеТипов("Булево"));
	ДанныеУчетнойПолитики.Колонки.Добавить("ПлательщикНДФЛ", Новый ОписаниеТипов("Булево"));
	ДанныеУчетнойПолитики.Колонки.Добавить("ПоддержкаПБУ18", Новый ОписаниеТипов("Булево"));
	
	Возврат ДанныеУчетнойПолитики;
	
КонецФункции

Процедура ПодготовитьДанныеУчетнойПолитики(ДанныеУчетнойПолитики, ПараметрыОтчета)
	
	Организация = ПараметрыОтчета.Организация;
	Период = КонецГода(ПараметрыОтчета.КонецПериода);
	ДанныеРегистраУчетнаяПолитика = ПолучитьДанныеРегистраУчетнаяПолитика(Организация, Период);
	
	Если ДанныеРегистраУчетнаяПолитика.Пустой() Тогда
		Возврат;
	Иначе
		ТаблицаЗначенийРегистраУчетнаяПолитика = ДанныеРегистраУчетнаяПолитика.Выгрузить();
	КонецЕсли;
	
	ПериодПервогоГодаУчетнойПолитики = НачалоГода(Дата(Год(Период) - 2, 1, 1));
	КоличествоЗначенийРегистра = ТаблицаЗначенийРегистраУчетнаяПолитика.Количество();
	
	Для ИндексТаблицыЗначений = 0 По КоличествоЗначенийРегистра - 1 Цикл
		
		ТекущаяЗаписьТаблицы = ТаблицаЗначенийРегистраУчетнаяПолитика[ИндексТаблицыЗначений];
		
		Если ИндексТаблицыЗначений = (КоличествоЗначенийРегистра - 1) Тогда
			КонецПериодаТекущейЗаписи = Период;
		Иначе
			СледующаяЗаписьТаблицы = ТаблицаЗначенийРегистраУчетнаяПолитика[ИндексТаблицыЗначений + 1];
			НачалоПериодаСледующейЗаписи = СледующаяЗаписьТаблицы.Период;
			Если НачалоПериодаСледующейЗаписи = НачалоГода(НачалоПериодаСледующейЗаписи) Тогда
				КонецПериодаТекущейЗаписи = КонецГода(Дата(Год(НачалоПериодаСледующейЗаписи) - 1, 1, 1));
			Иначе
				КонецПериодаТекущейЗаписи = КонецМесяца(Дата(Год(НачалоПериодаСледующейЗаписи), 
					Месяц(НачалоПериодаСледующейЗаписи) - 1, 1));
			КонецЕсли;
		КонецЕсли;
		
		Если КонецПериодаТекущейЗаписи < ПериодПервогоГодаУчетнойПолитики Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоЗаписейДанныхУчетнойПолитики = ДанныеУчетнойПолитики.Количество();
		
		Если КоличествоЗаписейДанныхУчетнойПолитики = 0 Тогда
			
			Если Год(ТекущаяЗаписьТаблицы.Период) < Год(ПериодПервогоГодаУчетнойПолитики) Тогда
				ТекущаяЗаписьТаблицы.Период = НачалоГода(ПериодПервогоГодаУчетнойПолитики);
			КонецЕсли;
			
			КоличествоЛетДействияУчетнойПолитики = Год(КонецПериодаТекущейЗаписи) - Год(ТекущаяЗаписьТаблицы.Период);
			ЗаполнитьДанныеУчетнойПолитики(ДанныеУчетнойПолитики, ТекущаяЗаписьТаблицы, КоличествоЛетДействияУчетнойПолитики);
			Продолжить;
			
		КонецЕсли;
		
		КоличествоЛетДействияУчетнойПолитики = Год(КонецПериодаТекущейЗаписи) - Год(ТекущаяЗаписьТаблицы.Период);
		
		Если (ТекущаяЗаписьТаблицы.Период <> НачалоГода(ТекущаяЗаписьТаблицы.Период))
			И (КоличествоЛетДействияУчетнойПолитики = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяЗаписьТаблицы.Период <> НачалоГода(ТекущаяЗаписьТаблицы.Период) Тогда
			ТекущаяЗаписьТаблицы.Период = НачалоГода(Дата(Год(ТекущаяЗаписьТаблицы.Период) + 1, 1, 1));
			КоличествоЛетДействияУчетнойПолитики = КоличествоЛетДействияУчетнойПолитики - 1;
		КонецЕсли;
		ЗаполнитьДанныеУчетнойПолитики(ДанныеУчетнойПолитики, ТекущаяЗаписьТаблицы, КоличествоЛетДействияУчетнойПолитики);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеРегистраУчетнаяПолитика(Организация, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.СистемаНалогообложения,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяОсобыйПорядокНалогообложения,
	|	УчетнаяПолитикаОрганизаций.ПлательщикНалогаНаПрибыль,
	|	УчетнаяПолитикаОрганизаций.ПлательщикНДС,
	|	УчетнаяПолитикаОрганизаций.ПлательщикЕНВД,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходы,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходыМинусРасходы,
	|	УчетнаяПолитикаОрганизаций.ПлательщикНДФЛ,
	|	УчетнаяПолитикаОрганизаций.ПоддержкаПБУ18
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Организация = &Организация
	|	И УчетнаяПолитикаОрганизаций.Период < &КонецПериода";
	
	ДанныеРегистраУчетнаяПолитика = Запрос.Выполнить();
	
	Возврат ДанныеРегистраУчетнаяПолитика;
	
КонецФункции

Процедура ЗаполнитьДанныеУчетнойПолитики(ДанныеУчетнойПолитики, ТекущаяЗапись, КоличествоЛетДействияУчетнойПолитики)
	
	Для НомерГода = 0 По КоличествоЛетДействияУчетнойПолитики Цикл
		НоваяЗапись = ДанныеУчетнойПолитики.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущаяЗапись);
		НоваяЗапись.Период = НачалоГода(Дата(Год(ТекущаяЗапись.Период) + НомерГода, 1, 1));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцдерыИФункцииПолученияРезультатаНалоговойНагрузки

Процедура НалоговаяНагрузка(ПараметрыОтчета, ДанныеУчетнойПолитики, СведенияПредельныхЗначений, 
		РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, РезультатыПроверки)
	
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ПараметрыОтчета.НачалоПериода);
	КонецПериода = КонецМесяца(ПараметрыОтчета.КонецПериода);
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	Подробнее = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/nalprov#content:26721:1:1");
	ЭтоЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	ПлательщикНДС = Ложь;
	ЭтоОСН = Ложь;
	ЭтоЕНВД = Ложь;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	НаименованиеВременнойТаблицы = "";
	
	#Область ПроверкаНетДанныхНеПроверяется
	ДанныеЗаполненияМакета = Новый Структура();
	ДанныеЗаполненияМакета.Вставить("НомерКритерия", "1.");
	ДанныеЗаполненияМакета.Вставить("ОбластьТекстаНаименованияКритерия", "НалоговаяНагрузка");
	ДанныеЗаполненияМакета.Вставить("ОснованиеПроверки", "ОснованиеПроверки_НалоговаяНагрузка");
	ДанныеЗаполненияМакета.Вставить("Подробнее_1", Подробнее);
	
	ЭтоИПОсобыйПорядокНО = ПроверитьВидЮридическогоЛицаНаПрименениеЕНВД(ДанныеУчетнойПолитики, Организация, 
		ДанныеЗаполненияМакета, РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ);
	
	Если ЭтоИПОсобыйПорядокНО Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаРегистрации > КонецПериода Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетДеятельности");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	Если Год(ДатаРегистрации) = Год(НачалоПериода) Тогда
		НачалоПериода = НачалоКвартала(ДатаРегистрации);
	КонецЕсли;
	
	КоличествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество() - 1;
	
	Если КоличествоЗаписейУчетнойПолитики < 0 Тогда
		ДанныеЗаполненияМакета.Вставить("УчетнаяПолитика", "УчетнаяПолитика");
		ДанныеЗаполненияМакета.Вставить("Период", Формат(Год(КонецПериода), "ЧГ="));
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетУчетнойПолитики");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ТекущаяУчетнаяПолитика = ДанныеУчетнойПолитики[КоличествоЗаписейУчетнойПолитики];
	
	Если НЕ СведенияПредельныхЗначений.Свойство("ЕстьОКВЭД") Тогда
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НеПроверяетсяНалоговаяНагрузкаНетОКВЭД");
		ДанныеЗаполненияМакета.Вставить("КодОКВЭД", "КодОКВЭД");
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ПериодыОтчета = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	Выручка = ПолучитьВыручку(Организация, ПериодыОтчета);
	
	Если Выручка = 0 Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетВыручки");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПоказателиОтчетов = РегламентированнаяОтчетность.ПоказателиОценкиРискаВыезднойНалоговойПроверки(
		Организация, НачалоГода(НачалоПериода), КонецПериода);
	ОтчетыНетДанных = НовыйОтчетыНетДанных();
	
	Если ТекущаяУчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая 
		И ЭтоЮридическоеЛицо Тогда
		
		Если ТекущаяУчетнаяПолитика.ПлательщикЕНВД Тогда
			ЭтоОСН = НЕ ВыручкаТолькоЕНВД(Организация, ПериодыОтчета);
		Иначе
			ЭтоОСН = Истина;
		КонецЕсли;
		
		Если НЕ ЭтоОСН Тогда
			ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаЕНВД");
			ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
				ДанныеЗаполненияМакета);
			Возврат;
		КонецЕсли;
		
		НаименованиеПоказателя = Новый Массив;
		НаименованиеПоказателя.Добавить("СуммаНалогаНаПрибыль");
		
		НаименованиеВременнойТаблицы = "ДанныеРегламентированногоОтчетаПрибыль";
		ДанныеРегламентированногоОтчетаПрибыль = НовыйДанныеРегламентированногоОтчета();
		ИсточникОтчета = "РегламентированныйОтчетПрибыль";
		
		ПолучитьРегламентированныеОтчетыНарастающимПериодом(ПериодыОтчета, ИсточникОтчета, ПоказателиОтчетов, 
			НаименованиеПоказателя, ДанныеРегламентированногоОтчетаПрибыль, ОтчетыНетДанных);
		ЗаполнитьДанныеВременныхТаблиц(НаименованиеВременнойТаблицы, ДанныеРегламентированногоОтчетаПрибыль, ТекстЗапроса, 
			Запрос);
			
	ИначеЕсли ТекущаяУчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			
		ДанныеРегламентированногоОтчетаПрибыль = НовыйДанныеРегламентированногоОтчета();
		НаименованиеВременнойТаблицы = "РегламентированныйОтчетПрибыль";
		ЗаполнитьДанныеВременныхТаблиц(НаименованиеВременнойТаблицы, ДанныеРегламентированногоОтчетаПрибыль, ТекстЗапроса, 
			Запрос);
			
	ИначеЕсли ТекущаяУчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			
		НаименованиеПоказателя = Новый Массив;
		НаименованиеПоказателя.Добавить("СуммаНалогаУСН");
		
		НаименованиеВременнойТаблицы = "ДанныеРегламентированногоОтчетаУСН";
		ДанныеРегламентированногоОтчетаУСН = НовыйДанныеРегламентированногоОтчета();
		ИсточникОтчета = "РегламентированныйОтчетУСН";
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("НачалоПериода", НачалоПериода);
		СтруктураПараметров.Вставить("КонецПериода", КонецПериода);
		СтруктураПараметров.Вставить("Организация", Организация);
		
		ПолучитьНалоговуюНагрузкуУСН(СтруктураПараметров, ИсточникОтчета, ПоказателиОтчетов, 
			НаименованиеПоказателя, ДанныеРегламентированногоОтчетаУСН, ОтчетыНетДанных);
		ЗаполнитьДанныеВременныхТаблиц(НаименованиеВременнойТаблицы, ДанныеРегламентированногоОтчетаУСН, ТекстЗапроса, 
			Запрос);
			
	КонецЕсли;
	
	Если ТекущаяУчетнаяПолитика.ПлательщикНДС Тогда
		
		НаименованиеПоказателя = Новый Массив;
		НаименованиеПоказателя.Добавить("СуммаНалогаНДС");
		
		ПлательщикНДС = Истина;
		НаименованиеВременнойТаблицы = "ДанныеРегламентированногоОтчетаНДС";
		ДанныеРегламентированногоОтчетаНДС = НовыйДанныеРегламентированногоОтчета();
		ИсточникОтчета = "РегламентированныйОтчетНДС";
		
		ПолучитьРегламентированныеОтчетыОбычнымПериодом(ПериодыОтчета, ИсточникОтчета, ПоказателиОтчетов, 
			НаименованиеПоказателя, ДанныеРегламентированногоОтчетаНДС, ОтчетыНетДанных);
		ЗаполнитьДанныеВременныхТаблиц(НаименованиеВременнойТаблицы, ДанныеРегламентированногоОтчетаНДС, ТекстЗапроса, 
			Запрос);
		
	КонецЕсли;
	
	Если ТекущаяУчетнаяПолитика.ПлательщикЕНВД Тогда
		ЭтоЕНВД = Истина;
	КонецЕсли;
	
	Если ОтчетыНетДанных.Количество() <> 0 Тогда
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НетДанныхСформироватьОтчеты");
		ДанныеЗаполненияМакета.Вставить("ОтчетыНетДанных", ОтчетыНетДанных);
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ИсточникиДополнительныхОтчетов = НовыйИсточникиДополнительныхОтчетов(ЭтоОСН, ЭтоЕНВД, ПлательщикНДС);
	НаименованияПоказателей = ПолучитьНаименованияПоказателейНалоговаяНагрузка(ИсточникиДополнительныхОтчетов, 
		КонецПериода);
	
	ДанныеДополнительныхРегламентированныхОтчетов = ПолучитьДанныеДополнительныхРегламентированныхОтчетов(
		ИсточникиДополнительныхОтчетов, ПериодыОтчета, НаименованияПоказателей, ПоказателиОтчетов);
	
	НаименованиеВременнойТаблицы = "ДанныеДополнительныхРегламентированныхОтчетов";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//", СформироватьТекстЗапроса(НаименованиеВременнойТаблицы));
	
	ТекстЗапросаНДФЛ =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	"""" КАК РегламентированныйОтчет,
	|	""НДФЛ"" КАК ИсточникОтчета,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) КАК ДатаОтчета,
	|	"""" КАК КодНалоговогоОргана,
	|	"""" КАК Показатель,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК ЗначениеПоказателя
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр(НаименованиеВременнойТаблицы, ДанныеДополнительныхРегламентированныхОтчетов);
	
	КоличествоСимволов = СтрДлина(ТекстЗапроса) - 15;
	ТекстЗапроса = Сред(ТекстЗапроса, 1, КоличествоСимволов);
	Запрос.Текст = ТекстЗапроса + ТекстЗапросаНДФЛ;
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеРегламентированныхОтчетовКритерия = РезультатЗапроса.Выгрузить();
	
	Если ДанныеРегламентированныхОтчетовКритерия.Количество() > 0 Тогда
		ДанныеЗаполненияМакета.Вставить("ЕстьРасшифровкаПоказателей", Истина);
		СуммаНачисленныхНалогов = ДанныеРегламентированныхОтчетовКритерия.Итог("ЗначениеПоказателя");
		ЗаполнитьВидПериода(ДанныеРегламентированныхОтчетовКритерия);
		ДанныеРегламентированныхОтчетовКритерия.Сортировать("ПериодОтчета, ДатаОтчета");
		ДанныеРасшифровкиКритерия = НовыйРасшифровкаНалоговаяНагрузка();
		ЗаполнитьРасшифровкуКритерияНалоговаяНагрузка(ДанныеРегламентированныхОтчетовКритерия, ДанныеРасшифровкиКритерия, 
			ПериодыОтчета);
	Иначе
		СуммаНачисленныхНалогов = 0;
	КонецЕсли;
	
	НалоговаяНагрузка = Окр(100*(СуммаНачисленныхНалогов/Выручка), 1, 1);
	СредняяНалоговаяНагрузка = СведенияПредельныхЗначений.ПредельноеЗначениеНалоговойНагрузки;
	
	Если НалоговаяНагрузка < СредняяНалоговаяНагрузка Тогда
		РезультатыПроверки.Вставить("Критерий1","ЕстьОснование");
		ДанныеЗаполненияМакета.Вставить("ЕстьОснование", Истина);
		ЗнакСравнения = "<";
	Иначе
		РезультатыПроверки.Вставить("Критерий1","НетОснования");
		Если НалоговаяНагрузка = СредняяНалоговаяНагрузка Тогда
			ЗнакСравнения = "=";
		Иначе
			ЗнакСравнения = ">";
		КонецЕсли;
	КонецЕсли;
	
	ПриложениеПриказа = Новый Структура;
	ПриложениеПриказа.Вставить("ПриложениеПриказа", "http://its.1c.ru/db/garant#content:70552964:1");
	ДанныеЗаполненияМакета.Вставить("РасчетПоказателей", "Калькулятор_НалоговаяНагрузка");
	
	ДанныеЗаполненияМакетаРасчетПоказателей = Новый Структура;
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СуммаНачисленныхНалогов", СуммаНачисленныхНалогов);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("Выручка", Выручка);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("НалоговаяНагрузка", НалоговаяНагрузка);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ЗнакСравнения", ЗнакСравнения);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СредняяНалоговаяНагрузка", СредняяНалоговаяНагрузка);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СравнениеПоказателей", "РезультатСравненияНалоговаяНагрузка");
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасшифровкаСредняяНалоговаяНагрузка", ПриложениеПриказа);
	
	ЗаполнитьМакетОтчетаЕстьРезультат(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, 
		ДанныеЗаполненияМакетаРасчетПоказателей);
	
	Если ДанныеРегламентированныхОтчетовКритерия.Количество() > 0 Тогда
		ЗаполнитьМакетОтчетаРасшифровкойНалоговаяНагрузка(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеРасшифровкиКритерия, СуммаНачисленныхНалогов);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВидЮридическогоЛицаНаПрименениеЕНВД(ДанныеУчетнойПолитики, Организация, ДанныеЗаполненияМакета, 
		РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ)
	
	КоличествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество() - 1;
	
	Если КоличествоЗаписейУчетнойПолитики < 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяУчетнаяПолитика = ДанныеУчетнойПолитики[КоличествоЗаписейУчетнойПолитики];
	ЭтоЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	Если ЭтоЮридическоеЛицо Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СистемаНалогообложенияНалогоплательщика = ТекущаяУчетнаяПолитика.СистемаНалогообложения;
	
	Если (СистемаНалогообложенияНалогоплательщика = Перечисления.СистемыНалогообложения.ОсобыйПорядок) Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаИПОсобыйПорядок");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьВыручку(Организация, ПериодыОтчета)
	
	СчетДт = Новый Массив;
	СчетДт.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	СчетДт.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	СчетДт.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	
	СчетКт = ПланыСчетов.Хозрасчетный.Выручка;
	КонецПериода = Новый Граница(ПериодыОтчета.КонецПериода, ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетДт", СчетДт);
	Запрос.УстановитьПараметр("СчетКт", СчетКт);
	Запрос.УстановитьПараметр("ДатаНачалаПериода", ПериодыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКонецПериода", КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК ОКК_90_01,
	|	0 КАК ОДК_90
	|ПОМЕСТИТЬ ТаблицаОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачалаПериода, &ДатаКонецПериода, , Счет В ИЕРАРХИИ (&СчетКт), , 
	|		Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачалаПериода, &ДатаКонецПериода, , Счет В (&СчетДт), , 
	|		Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаОбороты.ОКК_90_01 - ТаблицаОбороты.ОДК_90) КАК СуммаВыручки
	|ИЗ
	|	ТаблицаОбороты КАК ТаблицаОбороты";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СуммаВыручки = Выборка.СуммаВыручки;
	Иначе
		СуммаВыручки = 0;
	КонецЕсли;
	
	Возврат СуммаВыручки;
	
КонецФункции

Функция НовыйОтчетыНетДанных()
	
	ОтчетыНетДанных = Новый ТаблицаЗначений;
	ОтчетыНетДанных.Колонки.Добавить("ПредставлениеОтчета", 
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ОтчетыНетДанных.Колонки.Добавить("НетОтчета", Новый ОписаниеТипов("Структура"));
	
	Возврат ОтчетыНетДанных;
	
КонецФункции

Функция НовыйДанныеРегламентированногоОтчета()
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	ТипСтрока4 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4));
	ТипДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты);
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ДанныерегламентированногоОтчета = Новый ТаблицаЗначений;
	ДанныерегламентированногоОтчета.Колонки.Добавить("Показатель", ТипСтрока);
	ДанныерегламентированногоОтчета.Колонки.Добавить("ИсточникОтчета", ТипСтрока);
	ДанныерегламентированногоОтчета.Колонки.Добавить("РегламентированныйОтчет", ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	ДанныерегламентированногоОтчета.Колонки.Добавить("ДатаОтчета", ТипДата);
	ДанныерегламентированногоОтчета.Колонки.Добавить("КодНалоговогоОргана", ТипСтрока4);
	ДанныерегламентированногоОтчета.Колонки.Добавить("ЗначениеПоказателя", ТипЧисло);
	
	Возврат ДанныерегламентированногоОтчета;
	
КонецФункции

Процедура ПолучитьРегламентированныеОтчетыНарастающимПериодом(ПериодыОтчета, ИсточникОтчета, ПоказателиОтчетов, 
		НаименованиеПоказателя, ДанныеРегламентированногоОтчета, ОтчетыНетДанных);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("НаименованиеПоказателя", НаименованиеПоказателя);
	Запрос.УстановитьПараметр("ИсточникДанных", ПоказателиОтчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	&ИсточникДанных КАК ИсточникДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.ИсточникОтчета = &ИсточникОтчета
	|	И ИсточникДанных.Показатель В(&НаименованиеПоказателя)
	|	И КОНЕЦПЕРИОДА(ИсточникДанных.ДатаОтчета, ДЕНЬ) = &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсточникОтчета,
	|	ДатаОтчета";
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеРегламентированногоОтчета = РезультатЗапроса.Выгрузить();
	
	ЗаполнитьОтчетыНетДанных(ОтчетыНетДанных, РезультатЗапроса, ПериодыОтчета, ИсточникОтчета);
	
КонецПроцедуры

Процедура ПолучитьНалоговуюНагрузкуУСН(СтруктураПараметров, ИсточникОтчета, ПоказателиОтчетов, 
		НаименованиеПоказателя, ДанныеРегламентированногоОтчета, ОтчетыНетДанных);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", СтруктураПараметров.КонецПериода);
	Запрос.УстановитьПараметр("НаименованиеПоказателя", НаименованиеПоказателя);
	Запрос.УстановитьПараметр("ИсточникДанных", ПоказателиОтчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	&ИсточникДанных КАК ИсточникДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.ИсточникОтчета = &ИсточникОтчета
	|	И ИсточникДанных.Показатель В(&НаименованиеПоказателя)
	|	И КОНЕЦПЕРИОДА(ИсточникДанных.ДатаОтчета, ДЕНЬ) = &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсточникОтчета,
	|	ДатаОтчета";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		// Получаем данные о налоговой нагрузке при УСН оперативно

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	ЗНАЧЕНИЕ(Документ.ДокументРасчетовСКонтрагентом.ПустаяСсылка) КАК Регистратор,
		|	&Организация КАК Организация,
		|	&НачалоГода КАК НачалоГода,
		|	&КонДата КАК КонДата,
		|	ИСТИНА КАК ЭтоНачалоГода,
		|	ЛОЖЬ КАК ЭтоКонецГода,
		|	&СтавкаНалогаУСН КАК СтавкаНалогаУСН,
		|	&ПрименяетсяУСН КАК ПрименяетсяУСН,
		|	&ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
		|	&ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы";
		
		Запрос.УстановитьПараметр("Период", СтруктураПараметров.КонецПериода);
		Запрос.УстановитьПараметр("Регистратор", Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("НачалоГода", СтруктураПараметров.НачалоПериода);
		Запрос.УстановитьПараметр("КонДата", СтруктураПараметров.КонецПериода);
		Запрос.УстановитьПараметр("СтавкаНалогаУСН", 
			УчетнаяПолитика.СтавкаНалогаУСН(СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода));
		Запрос.УстановитьПараметр("ПрименяетсяУСН", 
			УчетнаяПолитика.ПрименяетсяУСН(СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода));
		Запрос.УстановитьПараметр("ПрименяетсяУСНДоходы", 
			УчетнаяПолитика.ПрименяетсяУСНДоходы(СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода));
		Запрос.УстановитьПараметр("ПрименяетсяУСНДоходыМинусРасходы", 
			УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода));
			
		ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
		
		СтруктураТаблиц = УчетУСН.ПодготовитьТаблицыНачисленияНалогаУСН(ТаблицаРеквизитов);
		СправкаРасчетУСН = СтруктураТаблиц.ТаблицаСправкиРасчета;
		
		Если СправкаРасчетУСН <> Неопределено
			И СправкаРасчетУСН.Количество() <> 0 Тогда
			НалогУСН = СправкаРасчетУСН[0].НалогИсчисленныйВсего;
		Иначе
			НалогУСН = 0;
		КонецЕсли; 
			
		ИсточникДанных = ДанныеРегламентированногоОтчета.Добавить();
		ИсточникДанных.ЗначениеПоказателя = НалогУСН;
		ИсточникДанных.ИсточникОтчета = "РегламентированныйОтчетУСН";
		
		ИсточникДанных = ДанныеРегламентированногоОтчета.Добавить();
		ИсточникДанных.ЗначениеПоказателя = 0;
		ИсточникДанных.ИсточникОтчета = "РегламентированныйОтчетУСН";
	Иначе
		ДанныеРегламентированногоОтчета = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьРегламентированныеОтчетыОбычнымПериодом(ПериодыОтчета, ИсточникОтчета, ПоказателиОтчетов, 
		НаименованиеПоказателя, ДанныеРегламентированногоОтчета, ОтчетыНетДанных);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("НаименованиеПоказателя", НаименованиеПоказателя);
	Запрос.УстановитьПараметр("ИсточникДанных", ПоказателиОтчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	&ИсточникДанных КАК ИсточникДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.ИсточникОтчета = &ИсточникОтчета
	|	И ИсточникДанных.Показатель В(&НаименованиеПоказателя)
	|	И ИсточникДанных.ДатаОтчета МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеРегламентированногоОтчета = РезультатЗапроса.Выгрузить();
	
	ЗаполнитьОтчетыНетДанных(ОтчетыНетДанных, РезультатЗапроса, ПериодыОтчета, ИсточникОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетыНетДанных(ОтчетыНетДанных, РезультатЗапроса, ПериодыОтчета, ИсточникОтчета)
	
	ГодовойОтчет = Новый СписокЗначений;
	ГодовойОтчет.Добавить("РегламентированныйОтчетПрибыль");
	ГодовойОтчет.Добавить("РегламентированныйОтчетУСН");
	ГодовойОтчет.Добавить("РегламентированныйОтчет3НДФЛ");
	ГодовойОтчет.Добавить("РегламентированныйОтчет4ФСС");
	
	НаименованиеОтчета = ПолучитьНаименованиеОтчета(ИсточникОтчета);
	ДатаОкончания = ПериодыОтчета.КонецПериода;
	ДатаНачала = ПериодыОтчета.НачалоПериода;
	ФорматСтроки = "ФП=Ложь";
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Если ТипЗнч(ГодовойОтчет.НайтиПоЗначению(ИсточникОтчета)) <> Тип("Неопределено") Тогда
			ДатаНачала = НачалоГода(ДатаОкончания);
			ФорматСтроки = "ФП=Истина";
			НоваяСтрокаНетДанных = ОтчетыНетДанных.Добавить();
			Если ИсточникОтчета = "РегламентированныйОтчет3НДФЛ" Тогда
				НоваяСтрокаНетДанных.ПредставлениеОтчета = НаименованиеОтчета + ПредставлениеПериода(ДатаНачала, 
					КонецГода(ДатаНачала), ФорматСтроки);
			Иначе
				НоваяСтрокаНетДанных.ПредставлениеОтчета = НаименованиеОтчета + ПредставлениеПериода(ДатаНачала, 
					ДатаОкончания, ФорматСтроки);
			КонецЕсли;
			НоваяСтрокаНетДанных.НетОтчета = Новый Структура("ИсточникОтчета, НачалоПериода, КонецПериода", 
				ИсточникОтчета, ДатаНачала, ДатаОкончания);
			Возврат;
		КонецЕсли;
		
		ПервыйКвартал = (Месяц(ПериодыОтчета.НачалоПериода) + 2)/3;
		КоличествоКварталов = Месяц(ДатаОкончания)/3;
		
		Для НомерКвартала = ПервыйКвартал По КоличествоКварталов Цикл
			ДатаОкончания = КонецКвартала(Дата(Год(ДатаОкончания), НомерКвартала + 2*НомерКвартала, 1));
			ДатаНачала = НачалоКвартала(ДатаОкончания);
			
			НоваяСтрокаНетДанных = ОтчетыНетДанных.Добавить();
			НоваяСтрокаНетДанных.ПредставлениеОтчета = НаименованиеОтчета + ПредставлениеПериода(ДатаНачала, 
				ДатаОкончания, ФорматСтроки);
			НоваяСтрокаНетДанных.НетОтчета = Новый Структура("ИсточникОтчета, НачалоПериода, КонецПериода", 
				ИсточникОтчета, ДатаНачала, ДатаОкончания);
		КонецЦикла;
		
	Иначе
		
		Если ТипЗнч(ГодовойОтчет.НайтиПоЗначению(ИсточникОтчета)) <> Тип("Неопределено") Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеРегламентированногоОтчета = РезультатЗапроса.Выгрузить();
		Выборка = РезультатЗапроса.Выбрать();
		МассивКварталов = ПолучитьМассивКварталов(ПериодыОтчета);
		ДатыОтчетов = Новый Массив;
		КолонкаДатаОтчета = ДанныеРегламентированногоОтчета.ВыгрузитьКолонку("ДатаОтчета");
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(ДатыОтчетов, КолонкаДатаОтчета);
		
		Если ДатыОтчетов.Количество() <> МассивКварталов.Количество() Тогда
			
			Пока Выборка.Следующий() Цикл
				НомерМесяца = Месяц(Выборка.ДатаОтчета);
				Если МассивКварталов.Найти(НомерМесяца) <> Неопределено Тогда
					Индекс = МассивКварталов.Найти(НомерМесяца);
					МассивКварталов.Удалить(Индекс);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого ОтсутствующийКвартал Из МассивКварталов Цикл
				ДатаОкончания = КонецКвартала(Дата(Год(ДатаОкончания), ОтсутствующийКвартал, 1));
				ДатаНачала = НачалоКвартала(ДатаОкончания);
				
				НоваяСтрокаНетДанных = ОтчетыНетДанных.Добавить();
				НоваяСтрокаНетДанных.ПредставлениеОтчета = НаименованиеОтчета + ПредставлениеПериода(ДатаНачала, 
					ДатаОкончания, ФорматСтроки);
				НоваяСтрокаНетДанных.НетОтчета = Новый Структура("ИсточникОтчета, НачалоПериода, КонецПериода", 
					ИсточникОтчета, ДатаНачала, ДатаОкончания);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНаименованиеОтчета(ИсточникОтчета)
	
	Если ИсточникОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
		НаименованиеОтчета = "бухгалтерскую отчетность за ";
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетПрибыль" Тогда
		НаименованиеОтчета = "декларацию по налогу на прибыль организаций за ";
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетНДС" Тогда
		НаименованиеОтчета = "декларацию по НДС за ";
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетУСН" Тогда
		НаименованиеОтчета = "декларацию по УСН за ";
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход" Тогда
		НаименованиеОтчета = "декларацию по ЕНВД за ";
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчет3НДФЛ" Тогда
		НаименованиеОтчета = "декларацию 3-НДФЛ за ";
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчет4ФСС" Тогда
		НаименованиеОтчета = "расчет 4-ФСС за ";
	КонецЕсли;
	
	Возврат НаименованиеОтчета;
	
КонецФункции

Функция ПолучитьМассивКварталов(ПериодыОтчета)
	
	МассивКварталов = Новый Массив;
	ПервыйКвартал = (Месяц(ПериодыОтчета.НачалоПериода) + 2)/3;
	КоличествоКварталов = Месяц(ПериодыОтчета.КонецПериода)/3;
	
	Для НомерКвартала = ПервыйКвартал По КоличествоКварталов Цикл
		МассивКварталов.Добавить(НомерКвартала + 2*НомерКвартала);
	КонецЦикла;
	
	Возврат МассивКварталов;
	
КонецФункции

Процедура ЗаполнитьДанныеВременныхТаблиц(НаименованиеВременнойТаблицы, ДанныеРегламентированногоОтчета, ТекстЗапроса, 
		Запрос)
	
	Если НаименованиеВременнойТаблицы = "ДанныеРегламентированногоОтчетаПрибыль" 
		ИЛИ НаименованиеВременнойТаблицы = "ДанныеРегламентированногоОтчетаУСН" 
		ИЛИ ТекстЗапроса = "" Тогда
		ТекстЗапроса = СформироватьТекстЗапроса(НаименованиеВременнойТаблицы);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//", СформироватьТекстЗапроса(НаименованиеВременнойТаблицы));
	КонецЕсли;
	Запрос.УстановитьПараметр(НаименованиеВременнойТаблицы, ДанныеРегламентированногоОтчета);
	
КонецПроцедуры

Функция СформироватьТекстЗапроса(НаименованиеВременнойТаблицы)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ " + НаименованиеВременнойТаблицы + "
	|ИЗ
	|	&" + НаименованиеВременнойТаблицы + " КАК " + НаименованиеВременнойТаблицы + "
	|;
	|//
	|ВЫБРАТЬ *
	|ИЗ
	|	" + НаименованиеВременнойТаблицы + " КАК " + НаименованиеВременнойТаблицы + "
	|
	|ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция НовыйИсточникиДополнительныхОтчетов(ЭтоОСН, ЭтоЕНВД, ПлательщикНДС)
	
	ИсточникиОтчетов = Новый Массив;
	ИсточникиОтчетов.Добавить("РегламентированныйОтчетИмущество");
	ИсточникиОтчетов.Добавить("РегламентированныйОтчетЗемельныйНалог");
	ИсточникиОтчетов.Добавить("РегламентированныйОтчетНДПИ");
	ИсточникиОтчетов.Добавить("РегламентированныйОтчетНедра");
	ИсточникиОтчетов.Добавить("РегламентированныйОтчетНалогНаИгорныйБизнес");
	ИсточникиОтчетов.Добавить("РегламентированныйОтчетЖивотныйМир");
	ИсточникиОтчетов.Добавить("РегламентированныйОтчетВодныеБиоресурсы");
	ИсточникиОтчетов.Добавить("РегламентированныйОтчетКосвенныеНалогиТамСоюз");
	ИсточникиОтчетов.Добавить("РегламентированныйОтчетТранспортныйНалог");
	ИсточникиОтчетов.Добавить("РегламентированныйОтчетРасчетПоОплатеЗаВоду");
	
	Если ЭтоЕНВД Тогда
		ИсточникиОтчетов.Добавить("РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход");
	КонецЕсли;
	
	Если ЭтоОСН Тогда
		ИсточникиОтчетов.Добавить("РегламентированныйОтчетАкцизыПриложение1");
		ИсточникиОтчетов.Добавить("РегламентированныйОтчетАкцизыПриложение5");
		ИсточникиОтчетов.Добавить("РегламентированныйОтчетАкцизыПриложение7");
		ИсточникиОтчетов.Добавить("РегламентированныйОтчетАкцизыТабак");
	КонецЕсли;
	
	Если НЕ ПлательщикНДС Тогда
		ИсточникиОтчетов.Добавить("РегламентированныйОтчетНДС");
	КонецЕсли;
	
	Возврат ИсточникиОтчетов;
	
КонецФункции

Функция ПолучитьНаименованияПоказателейНалоговаяНагрузка(ИсточникиОтчетов, КонецПериода)
	
	НаименованияПоказателей = Новый Массив;
	
	Для каждого Источник Из ИсточникиОтчетов Цикл
		Если (Источник = "РегламентированныйОтчетИмущество") 
			И (КонецПериода = КонецГода(КонецПериода)) Тогда
			НаименованияПоказателей.Добавить("СуммаНалогаНаИмущество");
		ИначеЕсли (Источник = "РегламентированныйОтчетЗемельныйНалог") 
			И (КонецПериода = КонецГода(КонецПериода)) Тогда
			НаименованияПоказателей.Добавить("СуммаНалогаНаЗемлю");
		ИначеЕсли Источник = "РегламентированныйОтчетНДПИ" Тогда
			НаименованияПоказателей.Добавить("СуммаНДПИ");
		ИначеЕсли Источник = "РегламентированныйОтчетНедра" Тогда
			НаименованияПоказателей.Добавить("СуммаНедра");
		ИначеЕсли Источник = "РегламентированныйОтчетНалогНаИгорныйБизнес" Тогда
			НаименованияПоказателей.Добавить("СуммаНалогаНаИгорныйБизнес");
		ИначеЕсли Источник = "РегламентированныйОтчетЖивотныйМир" Тогда
			НаименованияПоказателей.Добавить("СуммаСбораЖивотныйМир");
		ИначеЕсли Источник = "РегламентированныйОтчетВодныеБиоресурсы" Тогда
			НаименованияПоказателей.Добавить("СуммаСбораВодныеБиоресурсы");
		ИначеЕсли (Источник = "РегламентированныйОтчетТранспортныйНалог") 
			И (КонецПериода = КонецГода(КонецПериода)) Тогда
			НаименованияПоказателей.Добавить("СуммаТранспортногоНалога");
		ИначеЕсли Источник = "РегламентированныйОтчетРасчетПоОплатеЗаВоду" Тогда
			НаименованияПоказателей.Добавить("СуммаОплатыЗаВоду");
		ИначеЕсли Источник = "РегламентированныйОтчетНДС" Тогда
			НаименованияПоказателей.Добавить("СуммаНалогаНДС");
		ИначеЕсли Источник = "РегламентированныйОтчетКосвенныеНалогиТамСоюз" Тогда
			НаименованияПоказателей.Добавить("СуммаКосвенныхНалоговТаможенныйСоюз");
		ИначеЕсли Источник = "РегламентированныйОтчетАкцизыПриложение1" Тогда
			НаименованияПоказателей.Добавить("СуммаАкцизовЗаИсключениемТабачныхИзделий");
		ИначеЕсли Источник = "РегламентированныйОтчетАкцизыПриложение5" Тогда
			НаименованияПоказателей.Добавить("СуммаАкцизовНаНефтепродукты");
		ИначеЕсли Источник = "РегламентированныйОтчетАкцизыПриложение7" Тогда
			НаименованияПоказателей.Добавить("СуммаАкцизовНаМинеральноеСырье");
		ИначеЕсли Источник = "РегламентированныйОтчетАкцизыТабак" Тогда
			НаименованияПоказателей.Добавить("СуммаАкцизовНаТабачныеИзделия");
		ИначеЕсли Источник = "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход" Тогда
			НаименованияПоказателей.Добавить("СуммаНалогаЕНВД");
		КонецЕсли;
	КонецЦикла;
	
	Возврат НаименованияПоказателей;
	
КонецФункции

Функция ПолучитьДанныеДополнительныхРегламентированныхОтчетов(ИсточникиДополнительныхОтчетов, ПериодыОтчета, 
		НаименованияПоказателей, ПоказателиОтчетов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникиДополнительныхОтчетов);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("НаименованиеПоказателя", НаименованияПоказателей);
	Запрос.УстановитьПараметр("ИсточникДанных", ПоказателиОтчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	&ИсточникДанных КАК ИсточникДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.ИсточникОтчета В(&ИсточникОтчета)
	|	И ИсточникДанных.Показатель В(&НаименованиеПоказателя)
	|	И ИсточникДанных.ДатаОтчета МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсточникОтчета,
	|	ДатаОтчета";
	
	РезультатЗапроса = Запрос.Выполнить();
	ДополнительныеРегламентированныеОтчеты = РезультатЗапроса.Выгрузить();
	
	Возврат ДополнительныеРегламентированныеОтчеты;
	
КонецФункции

Процедура ЗаполнитьВидПериода(ДанныеРегламентированныхОтчетовКритерия)
	
	ИсточникиОтчетов = Новый Массив;
	ДанныеРегламентированныхОтчетовКритерия.Колонки.Добавить("ПериодОтчета", Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(15, 2)));
	КолонкаИсточникОтчета = ДанныеРегламентированныхОтчетовКритерия.ВыгрузитьКолонку("ИсточникОтчета");
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(ИсточникиОтчетов, КолонкаИсточникОтчета);
	
	Для Каждого Источник Из ИсточникиОтчетов Цикл
		УсловиеПоиска = Новый Структура("ИсточникОтчета", Источник);
		СтрокиИсточника = ДанныеРегламентированныхОтчетовКритерия.НайтиСтроки(УсловиеПоиска);
		
		Для Каждого Строка Из СтрокиИсточника Цикл
			Строка.ПериодОтчета = ПолучитьНомерПериода(Источник);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНомерПериода(ИсточникОтчета)
	
	НомерПериода = 1;
	
	Если ИсточникОтчета = "РегламентированныйОтчетИмущество" Тогда
		НомерПериода = 1;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетЗемельныйНалог" Тогда
		НомерПериода = 1;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетНДПИ" Тогда
		НомерПериода = 12;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетНедра" Тогда
		НомерПериода = 4;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетНалогНаИгорныйБизнес" Тогда
		НомерПериода = 12;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетЖивотныйМир" Тогда
		НомерПериода = 12;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетВодныеБиоресурсы" Тогда
		НомерПериода = 12;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетКосвенныеНалогиТамСоюз" Тогда
		НомерПериода = 12;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетТранспортныйНалог" Тогда
		НомерПериода = 1;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетРасчетПоОплатеЗаВоду" Тогда
		НомерПериода = 4;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетПрибыль" Тогда
		НомерПериода = 1;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетУСН" Тогда
		НомерПериода = 1;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетНДС" Тогда
		НомерПериода = 4;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетАкцизыПриложение1" Тогда
		НомерПериода = 12;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетАкцизыПриложение5" Тогда
		НомерПериода = 12;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетАкцизыПриложение7" Тогда
		НомерПериода = 12;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетАкцизыТабак" Тогда
		НомерПериода = 12;
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход" Тогда
		НомерПериода = 4;
	ИначеЕсли ИсточникОтчета = "НДФЛ" Тогда
		НомерПериода = 12;
	КонецЕсли;
	
	Возврат НомерПериода;
	
КонецФункции

Функция НовыйРасшифровкаНалоговаяНагрузка()
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	ТипСтруктура = Новый ОписаниеТипов("Структура");
	ТипЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
	
	РасшифровкаКритерия = Новый ТаблицаЗначений;
	РасшифровкаКритерия.Колонки.Добавить("ИсточникОтчета", ТипСтрока);
	РасшифровкаКритерия.Колонки.Добавить("ПериодОтчета", ТипЧисло);
	РасшифровкаКритерия.Колонки.Добавить("ПараметрыРасшифровки", ТипСтруктура);
	РасшифровкаКритерия.Колонки.Добавить("ЗначениеПоказателя", ТипЧисло);
	
	Возврат РасшифровкаКритерия;
	
КонецФункции

Процедура ЗаполнитьРасшифровкуКритерияНалоговаяНагрузка(ДанныеРегламентированныхОтчетовКритерия, ДанныеРасшифровкиКритерия, 
		ПериодыОтчета)
	
	ИсточникиОтчетов = Новый Массив;
	КолонкаИсточникОтчета = ДанныеРегламентированныхОтчетовКритерия.ВыгрузитьКолонку("ИсточникОтчета");
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(ИсточникиОтчетов, КолонкаИсточникОтчета);
	НачалоПериода = ПериодыОтчета.НачалоПериода;
	КонецПериода = ПериодыОтчета.КонецПериода;
	
	Для Каждого Источник Из ИсточникиОтчетов Цикл
		УсловиеПоиска = Новый Структура("ИсточникОтчета", Источник);
		СтрокиИсточника = ДанныеРегламентированныхОтчетовКритерия.НайтиСтроки(УсловиеПоиска);
		НомерПериода = СтрокиИсточника[0].ПериодОтчета;
		ПараметрыРасшифровки = Новый Структура;
		
		НоваяСтрокаРасшифровки = ДанныеРасшифровкиКритерия.Добавить();
		НоваяСтрокаРасшифровки.ИсточникОтчета = Источник;
		НоваяСтрокаРасшифровки.ПериодОтчета = НомерПериода;
		
		Если НомерПериода = 1 Тогда
			
			СуммаНачисленногоНалога = 0;
			КоличествоОтчетовПериода = 0;
			
			Если КонецПериода = КонецГода(КонецПериода) Тогда
				ПараметрыРасшифровки.Вставить("Представление_1", "Год");
			Иначе
				ПредставлениеГода = Строка(Формат(Год(КонецПериода), "ЧГ=")) + " г.";
				ПараметрыРасшифровки.Вставить("Представление_1", СтрЗаменить(ПредставлениеПериода(НачалоГода(НачалоПериода), 
					КонецПериода, "ФП=Истина"), " " + ПредставлениеГода, ""));
			КонецЕсли;
				
			Для Каждого Строка Из СтрокиИсточника Цикл
				СуммаНачисленногоНалога = СуммаНачисленногоНалога + Строка.ЗначениеПоказателя;
				КоличествоОтчетовПериода = КоличествоОтчетовПериода + 1;
			КонецЦикла;
			
			Если КоличествоОтчетовПериода = 1 Тогда
				ПараметрыРасшифровки.Вставить("РасшифровкаПериод", Строка.РегламентированныйОтчет);
			КонецЕсли;
			
			ПараметрыРасшифровки.Вставить("Период", СуммаНачисленногоНалога);
			НоваяСтрокаРасшифровки.ПараметрыРасшифровки = ПараметрыРасшифровки;
			НоваяСтрокаРасшифровки.ЗначениеПоказателя = СуммаНачисленногоНалога;
			Продолжить;
			
		КонецЕсли;
		
		Если НомерПериода = 4 Тогда
			НаименованиеПериода = "Квартал_";
			НаименованиеРасшифровки = "РасшифровкаКвартал_";
			ЭтоКвартал = Истина;
			ЗаполнитьРасшифровкуНалоговаяНагрузкаПоПериодуКварталМесяц(СтрокиИсточника, НаименованиеПериода, 
				НаименованиеРасшифровки, НоваяСтрокаРасшифровки, ПараметрыРасшифровки, ЭтоКвартал);
			Продолжить;
		КонецЕсли;
		
		Если НомерПериода = 12 Тогда
			НаименованиеПериода = "Месяц_";
			НаименованиеРасшифровки = "РасшифровкаМесяц_";
			ЗаполнитьРасшифровкуНалоговаяНагрузкаПоПериодуКварталМесяц(СтрокиИсточника, НаименованиеПериода, 
				НаименованиеРасшифровки, НоваяСтрокаРасшифровки, ПараметрыРасшифровки);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуНалоговаяНагрузкаПоПериодуКварталМесяц(СтрокиИсточника, НаименованиеПериода, 
		НаименованиеРасшифровки, НоваяСтрокаРасшифровки, ПараметрыРасшифровки, ЭтоКвартал = Ложь)
	
	СуммаНалогаЗаПериод = 0;
	СуммаНачисленногоНалога = 0;
	КоличествоОтчетовПериода = 0;
	КоличествоЭлементов = СтрокиИсточника.Количество() - 1;
	
	Для НомерЭлемента = 0 По КоличествоЭлементов Цикл
		
		ТекущийЭлемент = СтрокиИсточника[НомерЭлемента];
		КоличествоОтчетовПериода = КоличествоОтчетовПериода + 1;
		СуммаНалогаЗаПериод = СуммаНалогаЗаПериод + ТекущийЭлемент.ЗначениеПоказателя;
		СуммаНачисленногоНалога = СуммаНачисленногоНалога + ТекущийЭлемент.ЗначениеПоказателя;
		
		Если НЕ ЭтоКвартал Тогда
			ТекущийПериод = Месяц(ТекущийЭлемент.ДатаОтчета);
		Иначе
			ТекущийПериод = Месяц(ТекущийЭлемент.ДатаОтчета)/3;
		КонецЕсли;
		
		Если НомерЭлемента = КоличествоЭлементов Тогда
			Если КоличествоОтчетовПериода = 1 Тогда
				ПараметрыРасшифровки.Вставить(НаименованиеПериода + ТекущийПериод, ТекущийЭлемент.ЗначениеПоказателя);
				ПараметрыРасшифровки.Вставить(НаименованиеРасшифровки + ТекущийПериод, ТекущийЭлемент.РегламентированныйОтчет);
			Иначе
				ПараметрыРасшифровки.Вставить(НаименованиеПериода + ТекущийПериод, СуммаНалогаЗаПериод);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СледующийЭлемент = СтрокиИсточника[НомерЭлемента + 1];
		Если НЕ ЭтоКвартал Тогда
			СледующийПериод = Месяц(СледующийЭлемент.ДатаОтчета);
		Иначе
			СледующийПериод = Месяц(СледующийЭлемент.ДатаОтчета)/3;
		КонецЕсли;
		
		Если ТекущийПериод <> СледующийПериод Тогда
			Если КоличествоОтчетовПериода = 1 Тогда
				ПараметрыРасшифровки.Вставить(НаименованиеПериода + ТекущийПериод, ТекущийЭлемент.ЗначениеПоказателя);
				ПараметрыРасшифровки.Вставить(НаименованиеРасшифровки + ТекущийПериод, ТекущийЭлемент.РегламентированныйОтчет);
			Иначе
				ПараметрыРасшифровки.Вставить(НаименованиеПериода + ТекущийПериод, СуммаНалогаЗаПериод);
			КонецЕсли;
			СуммаНалогаЗаПериод = 0;
			КоличествоОтчетовПериода = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	НоваяСтрокаРасшифровки.ПараметрыРасшифровки = ПараметрыРасшифровки;
	НоваяСтрокаРасшифровки.ЗначениеПоказателя = СуммаНачисленногоНалога;
	
КонецПроцедуры

Процедура ЗаполнитьМакетОтчетаРасшифровкойНалоговаяНагрузка(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		ДанныеРасшифровкиКритерия, СуммаНачисленныхНалогов)
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	ОбластьСуммыначисленныхНалогов = МакетОтчета.ПолучитьОбласть("НалоговаяНагрузка_СуммаНачисленныхНалогов");
	ОбластьСуммыначисленныхНалоговПФ = МакетОтчетаПФ.ПолучитьОбласть("НалоговаяНагрузка_СуммаНачисленныхНалогов");
	ОбластьОтступ_3 = МакетОтчета.ПолучитьОбласть("Отступ_3");
	ЦветТекстаГиперссылки = Новый Цвет(83, 106, 194);
	
	ОбластьСуммыначисленныхНалогов.Параметры.СуммаНачисленныхНалогов = СуммаНачисленныхНалогов;
	ОбластьСуммыначисленныхНалоговПФ.Параметры.СуммаНачисленныхНалогов = СуммаНачисленныхНалогов;
	
	РезультатПроверкиКритериев.Вывести(ОбластьСуммыначисленныхНалогов, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьСуммыначисленныхНалоговПФ, 2);
	
	Для Каждого СтрокаРасшифровки Из ДанныеРасшифровкиКритерия Цикл
		
		ОбластьСуммаНалога = МакетОтчета.ПолучитьОбласть(СтрокаРасшифровки.ИсточникОтчета);
		ОбластьСуммаНалога.Параметры.СуммаНалога = СтрокаРасшифровки.ЗначениеПоказателя;
		
		ОбластьСуммаНалогаПФ = МакетОтчетаПФ.ПолучитьОбласть(СтрокаРасшифровки.ИсточникОтчета);
		ОбластьСуммаНалогаПФ.Параметры.СуммаНалога = СтрокаРасшифровки.ЗначениеПоказателя;
		
		РезультатПроверкиКритериев.Вывести(ОбластьСуммаНалога, 2);
		РезультатПроверкиКритериевПФ.Вывести(ОбластьСуммаНалогаПФ, 2);
		
		Если СтрокаРасшифровки.ПериодОтчета = 1 Тогда
			
			ОбластьРасшифровкиНалога = МакетОтчета.ПолучитьОбласть("ПериодГод_1");
			ОбластьРасшифровкиНалога.Параметры.Заполнить(СтрокаРасшифровки.ПараметрыРасшифровки);
			
			ОбластьРасшифровкиНалогаПФ = МакетОтчетаПФ.ПолучитьОбласть("ПериодГод_1");
			ОбластьРасшифровкиНалогаПФ.Параметры.Заполнить(СтрокаРасшифровки.ПараметрыРасшифровки);
			
			Если НЕ СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("Период") Тогда
				ОбластьРасшифровкиНалога.Параметры.Период = "-";
				ОбластьРасшифровкиНалогаПФ.Параметры.Период = "-";
			КонецЕсли;
			
			Если СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("РасшифровкаПериод") Тогда
				ОбластьРасшифровкиЯчейки = ОбластьРасшифровкиНалога.Область("Период");
				ОбластьРасшифровкиЯчейки.Гиперссылка = Истина;
				ОбластьРасшифровкиЯчейки.ЦветТекста = ЦветТекстаГиперссылки;
			КонецЕсли;
			
			РезультатПроверкиКритериев.Вывести(ОбластьРасшифровкиНалога, 2);
			РезультатПроверкиКритериев.Вывести(ОбластьОтступ_3, 2);
			
			РезультатПроверкиКритериевПФ.Вывести(ОбластьРасшифровкиНалогаПФ, 2);
			РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_3, 2);
			
		ИначеЕсли СтрокаРасшифровки.ПериодОтчета = 4 Тогда
			
			ОбластьРасшифровкиНалога = МакетОтчета.ПолучитьОбласть("ПериодКвартал_1");
			ОбластьРасшифровкиНалога.Параметры.Заполнить(СтрокаРасшифровки.ПараметрыРасшифровки);
			
			ОбластьРасшифровкиНалогаПФ = МакетОтчетаПФ.ПолучитьОбласть("ПериодКвартал_1");
			ОбластьРасшифровкиНалогаПФ.Параметры.Заполнить(СтрокаРасшифровки.ПараметрыРасшифровки);
			
			ПустоеЗначение = Новый Структура;
			
			Для НомерКвартала = 1 По 4 Цикл
				Если НЕ СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("Квартал_" + НомерКвартала) Тогда
					ПустоеЗначение.Вставить("Квартал_" + НомерКвартала, "-");
				КонецЕсли;
				
				Если СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("РасшифровкаКвартал_" + НомерКвартала) Тогда
					ОбластьРасшифровкиЯчейки = ОбластьРасшифровкиНалога.Область("Квартал_" + НомерКвартала);
					ОбластьРасшифровкиЯчейки.Гиперссылка = Истина;
					ОбластьРасшифровкиЯчейки.ЦветТекста = ЦветТекстаГиперссылки;
				КонецЕсли;
			КонецЦикла;
			
			ОбластьРасшифровкиНалога.Параметры.Заполнить(ПустоеЗначение);
			РезультатПроверкиКритериев.Вывести(ОбластьРасшифровкиНалога, 2);
			РезультатПроверкиКритериев.Вывести(ОбластьОтступ_3, 2);
			
			ОбластьРасшифровкиНалогаПФ.Параметры.Заполнить(ПустоеЗначение);
			РезультатПроверкиКритериевПФ.Вывести(ОбластьРасшифровкиНалогаПФ, 2);
			РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_3, 2);
			
		ИначеЕсли СтрокаРасшифровки.ПериодОтчета = 12 Тогда
			
			ОбластьРасшифровкиНалога = МакетОтчета.ПолучитьОбласть("ПериодМесяц");
			ОбластьРасшифровкиНалога.Параметры.Заполнить(СтрокаРасшифровки.ПараметрыРасшифровки);
			
			ОбластьРасшифровкиНалогаПФ = МакетОтчетаПФ.ПолучитьОбласть("ПериодМесяц");
			ОбластьРасшифровкиНалогаПФ.Параметры.Заполнить(СтрокаРасшифровки.ПараметрыРасшифровки);
			
			ПустоеЗначение = Новый Структура;
			
			Для НомерМесяца = 1 По 12 Цикл
				Если НЕ СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("Месяц_" + НомерМесяца) Тогда
					ПустоеЗначение.Вставить("Месяц_" + НомерМесяца, "-");
				КонецЕсли;
				
				Если СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("РасшифровкаМесяц_" + НомерМесяца) Тогда
					ОбластьРасшифровкиЯчейки = ОбластьРасшифровкиНалога.Область("Месяц_" + НомерМесяца);
					Если СтрокаРасшифровки.ИсточникОтчета <> "НДФЛ" Тогда
						ОбластьРасшифровкиЯчейки.Гиперссылка = Истина;
						ОбластьРасшифровкиЯчейки.ЦветТекста = ЦветТекстаГиперссылки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ОбластьРасшифровкиНалога.Параметры.Заполнить(ПустоеЗначение);
			РезультатПроверкиКритериев.Вывести(ОбластьРасшифровкиНалога, 2);
			РезультатПроверкиКритериев.Вывести(ОбластьОтступ_3, 2);
			
			ОбластьРасшифровкиНалогаПФ.Параметры.Заполнить(ПустоеЗначение);
			РезультатПроверкиКритериевПФ.Вывести(ОбластьРасшифровкиНалогаПФ, 2);
			РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_3, 2);
			
		КонецЕсли;
		
	КонецЦикла;
		
	РезультатПроверкиКритериев.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПолученияРезультатаУбыткиВОтчетности

Процедура УбыткиВОтчетности(ПараметрыОтчета, ДанныеУчетнойПолитики, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПФ, РезультатыПроверки)
	
	ДанныеБухгалтерскойПрибылиДоНалогообложения = Новый Структура;
	
	Организация = ПараметрыОтчета.Организация;
	НачалоПериодаПервогоГода = НачалоГода(Дата(Год(ПараметрыОтчета.НачалоПериода) - 2, 1, 1));
	КонецПериода = КонецМесяца(ПараметрыОтчета.КонецПериода);
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	ЭтоЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	Подробнее = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/nalprov#content:26721:1:7");
	
	#Область ПроверкаНетДанныхНеПроверяется
	ДанныеЗаполненияМакета = Новый Структура();
	ДанныеЗаполненияМакета.Вставить("НомерКритерия", "2.");
	ДанныеЗаполненияМакета.Вставить("ОбластьТекстаНаименованияКритерия", "УбыткиВОтчетности");
	ДанныеЗаполненияМакета.Вставить("ОснованиеПроверки", "ОснованиеПроверки_УбыткиВОтчетности");
	ДанныеЗаполненияМакета.Вставить("Подробнее_2", Подробнее);
	
	Если НЕ ЭтоЮридическоеЛицо Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяУбыткиВОтчетностиИП");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	Если ((Год(КонецПериода) - Год(ДатаРегистрации) = 1) 
		И (КонецПериода < КонецГода(КонецПериода))) ИЛИ (Год(КонецПериода) - Год(ДатаРегистрации) < 1) Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяУбыткиВОтчетностиНетДеятельности");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	КоличествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество() - 1;
	
	Если КоличествоЗаписейУчетнойПолитики < 1 Тогда
		Если (Год(КонецПериода) - Год(ДатаРегистрации)) < 2 Тогда
			ПериодДляЗаполненияУчетнойПолитики = Формат(Год(КонецПериода) - 1, "ЧГ=");
		КонецЕсли;
		ПериодДляЗаполненияУчетнойПолитики = Формат(Год(КонецПериода) - 2, "ЧГ=");
		ДанныеЗаполненияМакета.Вставить("УчетнаяПолитика", "УчетнаяПолитика");
		ДанныеЗаполненияМакета.Вставить("Период", ПериодДляЗаполненияУчетнойПолитики);
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетУчетнойПолитики");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если Год(КонецПериода) - Год(ДатаРегистрации) < 2 Тогда
		НачалоПериодаПервогоГода = НачалоГода(Дата(Год(КонецПериода) - 1, 1, 1));
	КонецЕсли;
	
	ПоказателиОтчетов = РегламентированнаяОтчетность.ПоказателиОценкиРискаВыезднойНалоговойПроверки(
		Организация, НачалоПериодаПервогоГода, КонецПериода);
	ДанныеРегламентированныхОтчетов = НовыйДанныеРегламентированногоОтчетаУбыткиВОтчетности();
	КоличествоПредельныхЗначенийПоГодам = 0;
	
	ИсточникОтчета = "РегламентированныйОтчетБухОтчетность";
	ЕстьРегБухОтчетностьЗаПоследнийПериод = ЕстьРегОтчетностьЗаПериод(КонецПериода, ИсточникОтчета, ПоказателиОтчетов);
	
	Для НомерСтрокиУчетнойПолитики = 0 По КоличествоЗаписейУчетнойПолитики Цикл
		
		ТекущаяСтрокаУчетнойПолитики = ДанныеУчетнойПолитики[НомерСтрокиУчетнойПолитики];
		КоличествоПредельныхЗначенийПоСтроке = 0;
		
		Если ТекущаяСтрокаУчетнойПолитики.Период < НачалоПериодаПервогоГода Тогда
			Продолжить;
		КонецЕсли;
		
		ИсточникиОтчетов = Новый Массив;
		НаименованиеПоказателя = Новый Массив;
		ПериодыОтчета = Новый Структура;
		ПериодыОтчета.Вставить("НачалоПериода", ТекущаяСтрокаУчетнойПолитики.Период);
		Период = Строка(Формат(Год(ТекущаяСтрокаУчетнойПолитики.Период), "ЧГ=")) + " г.";
		СистемаНалогообложения = "";
		
		Если НомерСтрокиУчетнойПолитики = КоличествоЗаписейУчетнойПолитики Тогда
			
			Если ЕстьРегБухОтчетностьЗаПоследнийПериод  Тогда
				
				ИсточникиОтчетов.Добавить("РегламентированныйОтчетБухОтчетность");
				НаименованиеПоказателя.Добавить("СуммаПрибылиБУ");
				ПериодыОтчета.Вставить("КонецПериода", КонецПериода);
				
			Иначе
				
				НоваяСтрокаДанныеРегламентированногоОтчета = ДанныеРегламентированныхОтчетов.Добавить();
				
				Период = ПредставлениеПериода(ТекущаяСтрокаУчетнойПолитики.Период, КонецПериода, "ФП=Истина");
				ЗаполнитьДанныеБухгалтерскойПрибылиДоНалогообложения(Организация, НачалоГода(КонецПериода), КонецПериода, 
					ДанныеБухгалтерскойПрибылиДоНалогообложения);
				
				ПериодыОтчета.Вставить("КонецПериода", КонецПериода);
				
				НоваяСтрокаДанныеРегламентированногоОтчета.Период = Период;
				НоваяСтрокаДанныеРегламентированногоОтчета.ИсточникОтчета = "РегламентированныйОтчетБухОтчетность";
				НоваяСтрокаДанныеРегламентированногоОтчета.ЗначениеПоказателя = 
					ДанныеБухгалтерскойПрибылиДоНалогообложения.ПрибыльДоНалогообложения;
				
				Если ДанныеБухгалтерскойПрибылиДоНалогообложения.ПрибыльДоНалогообложения < 0 Тогда
					НоваяСтрокаДанныеРегламентированногоОтчета.ПредельноеЗначение = Истина;
					КоличествоПредельныхЗначенийПоСтроке = КоличествоПредельныхЗначенийПоСтроке + 1;
				Иначе
					НоваяСтрокаДанныеРегламентированногоОтчета.ПредельноеЗначение = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ИсточникиОтчетов.Добавить("РегламентированныйОтчетБухОтчетность");
			НаименованиеПоказателя.Добавить("СуммаПрибылиБУ");
			ПериодыОтчета.Вставить("КонецПериода", КонецГода(ТекущаяСтрокаУчетнойПолитики.Период));
		КонецЕсли;
		
		Если ТекущаяСтрокаУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			ЭтоОСН = Истина;
			ЭтоЕНВД = Ложь;
			Если ТекущаяСтрокаУчетнойПолитики.ПлательщикЕНВД Тогда
				ЭтоОСН = НЕ ВыручкаТолькоЕНВД(Организация, ПериодыОтчета);
				ЭтоЕНВД = Истина;
			КонецЕсли;
			Если ЭтоОСН Тогда
				ИсточникиОтчетов.Добавить("РегламентированныйОтчетПрибыль");
				НаименованиеПоказателя.Добавить("СуммаПрибылиОСНО");
				Если НЕ ЭтоЕНВД Тогда
					СистемаНалогообложения = "Общая";
				Иначе
					СистемаНалогообложения = "Общая + ЕНВД";
				КонецЕсли;
			ИначеЕсли НЕ ЭтоОСН И ЭтоЕНВД Тогда
				СистемаНалогообложения = "ЕНВД";
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрокаУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			
			Если НЕ ТекущаяСтрокаУчетнойПолитики.ПлательщикЕНВД Тогда
				СистемаНалогообложения = "Упрощенная";
			Иначе
				СистемаНалогообложения = "Упрощенная + ЕНВД";
			КонецЕсли;
			
			ИсточникОтчета = "РегламентированныйОтчетУСН";
			КонецПериодаУчетнойПолитики = ?(КонецГода(ТекущаяСтрокаУчетнойПолитики.Период) < КонецПериода,
				КонецГода(ТекущаяСтрокаУчетнойПолитики.Период),
				КонецПериода);
			ЕстьРегОтчетностьУСНЗаПериод = ЕстьРегОтчетностьЗаПериод(КонецПериодаУчетнойПолитики,
				ИсточникОтчета, ПоказателиОтчетов);
			
			Если НомерСтрокиУчетнойПолитики <> КоличествоЗаписейУчетнойПолитики И ЕстьРегОтчетностьУСНЗаПериод Тогда
				ИсточникиОтчетов.Добавить(ИсточникОтчета);
				НаименованиеПоказателя.Добавить("СуммаПрибылиУСН");
				
			ИначеЕсли КонецПериода = КонецГода(КонецПериода) И ЕстьРегОтчетностьУСНЗаПериод Тогда
				ИсточникиОтчетов.Добавить(ИсточникОтчета);
				НаименованиеПоказателя.Добавить("СуммаПрибылиУСН");
				
			Иначе
				// читаем данные усн оперативно
				Параметры = Новый Структура();
				Параметры.Вставить("НачалоПериода", ТекущаяСтрокаУчетнойПолитики.Период);
				Параметры.Вставить("КонецПериода" , КонецПериодаУчетнойПолитики);
				Параметры.Вставить("Организация"  , Организация);
				ДанныеУСН = ДанныеРасчетаУСН(Параметры);
				Если ДанныеУСН <> Неопределено Тогда
					НалоговаяБаза = ДанныеУСН[0].НалоговаяБаза;
					
					НаименованиеОтчета = ПолучитьНаименованиеОтчета(ИсточникОтчета);
					ПредставлениеОтчета = НаименованиеОтчета + ПредставлениеПериода(НачалоГода(ПериодыОтчета.КонецПериода),
						ПериодыОтчета.КонецПериода, "ФП=Истина");
						
					РасшифровкаЗначения = Новый Структура("ИсточникОтчета, НачалоПериода, КонецПериода, Вопрос", ИсточникОтчета,
						НачалоГода(ПериодыОтчета.КонецПериода), ПериодыОтчета.КонецПериода, Истина);
					РасшифровкаЗначения.Вставить("ПредставлениеОтчета", ПредставлениеОтчета);
					
					ИсточникДанных = ДанныеРегламентированныхОтчетов.Добавить();
					ИсточникДанных.Период                 = ПредставлениеПериода(ТекущаяСтрокаУчетнойПолитики.Период, КонецПериодаУчетнойПолитики, "ФП=Истина");
					ИсточникДанных.СистемаНалогообложения = СистемаНалогообложения;
					ИсточникДанных.ЗначениеПоказателя     = ?(НалоговаяБаза = 0, НСтр("ru='Нет данных'"), НалоговаяБаза);
					ИсточникДанных.РасшифровкаЗначения    = ?(НалоговаяБаза = 0, РасшифровкаЗначения, "");
					ИсточникДанных.ИсточникОтчета         = ИсточникОтчета;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НомерСтрокиУчетнойПолитики = КоличествоЗаписейУчетнойПолитики И НЕ ЕстьРегБухОтчетностьЗаПоследнийПериод Тогда
			НоваяСтрокаДанныеРегламентированногоОтчета.СистемаНалогообложения = СистемаНалогообложения;
		КонецЕсли;
		
		ДанныеЗаполненияУбытков = Новый Структура("Период, СистемаНалогообложения", Период, СистемаНалогообложения);
		ЗаполнитьУбыткиРегламентированныхОтчетов(ПериодыОтчета, ИсточникиОтчетов, ПоказателиОтчетов, 
			НаименованиеПоказателя, ДанныеРегламентированныхОтчетов, ДанныеЗаполненияУбытков, 
			КоличествоПредельныхЗначенийПоСтроке);
		
		Если КоличествоПредельныхЗначенийПоСтроке > 0 Тогда
			КоличествоПредельныхЗначенийПоГодам = КоличествоПредельныхЗначенийПоГодам + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПредельныхЗначенийПоГодам > 1 Тогда
		ДанныеЗаполненияМакета.Вставить("ЕстьОснование", Истина);
		РезультатыПроверки.Вставить("Критерий2","ЕстьОснование");
	Иначе
		РезультатыПроверки.Вставить("Критерий2","НетОснования");
		
	КонецЕсли;
	
	ДанныеРасшифровкиКритерия = НовыйРасшифровкаУбыткиВОтчетности();
	ЗаполнитьРасшифровкуУбыткиВОтчетности(ДанныеРегламентированныхОтчетов, ДанныеРасшифровкиКритерия);
	ДанныеЗаполненияМакета.Вставить("РасчетПоказателей", "Калькулятор_УбыткиВОтчетности");
	
	ЗаполнитьМакетОтчетаРасшифровкойУбыткиВОтчетности(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		ДанныеЗаполненияМакета, ДанныеРасшифровкиКритерия);
	
КонецПроцедуры

Функция НовыйДанныеРегламентированногоОтчетаУбыткиВОтчетности()
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	ТипСтруктура = Новый ОписаниеТипов("Структура");
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ДанныерегламентированногоОтчета = Новый ТаблицаЗначений;
	ДанныерегламентированногоОтчета.Колонки.Добавить("Период", ТипСтрока);
	ДанныерегламентированногоОтчета.Колонки.Добавить("СистемаНалогообложения", ТипСтрока);
	ДанныерегламентированногоОтчета.Колонки.Добавить("ИсточникОтчета", ТипСтрока);
	ДанныерегламентированногоОтчета.Колонки.Добавить("ЗначениеПоказателя");
	ДанныерегламентированногоОтчета.Колонки.Добавить("ПредельноеЗначение");
	ДанныерегламентированногоОтчета.Колонки.Добавить("РасшифровкаЗначения", ТипСтруктура);
	Возврат ДанныерегламентированногоОтчета;
	
КонецФункции

Процедура ЗаполнитьДанныеБухгалтерскойПрибылиДоНалогообложения(Организация, НачалоПериода, КонецПериода, 
		ДанныеБухгалтерскойПрибылиДоНалогообложения)
	
	СчетКт_2110 = ПланыСчетов.Хозрасчетный.Выручка;
	
	СчетДт_2110 = Новый Массив;
	СчетДт_2110.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	СчетДт_2110.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	СчетДт_2110.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	
	СчетДт_2120 = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
	СчетДт_2210 = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу;
	СчетДт_2220 = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы;
	
	Субконто_2410 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	Аналитика_2410 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	
	Счет_09 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	Счет_68_02 = ПланыСчетов.Хозрасчетный.НДС;
	Счет_68_04_1 = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	Счет_68_04_2 = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	Счет_77 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;
	
	СчетДк_91_01 = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Субконто_91_01 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	
	Счет_91_02 = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	
	Счет_99_01 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль;
	Субконто_99_01 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки;
	Аналитика_99_01 = Новый Массив;
	Аналитика_99_01.Добавить(Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
	Аналитика_99_01.Добавить(Перечисления.ПрибылиИУбытки.НалоговыеСанкции);
	
	Счет_99_01_1 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
	Счет_99_02_4 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО;
	Счет_99_09 = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
	
	// Суммируемые реквизиты счета 91.01 по строкам 2310 2320 2340
	ЗначениеРеквизита_2310_2320_2340 = Новый Массив;
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.УчастиеВДругихОрганизациях);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделок);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделокОР);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	
	// Вычитаемые реквизитов счета 91.02 по строкам 2310 2320 2340
	ЗначениеРеквизитаКВычету_2310_2320_2340 = Новый Массив;
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	
	// Суммируемые реквизиты счета 91.01 по строкам 2330 2350
	ЗначениеРеквизита_2330_2350 = Новый Массив;
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.УчастиеВДругихОрганизациях);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделок);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделокОР);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	
	// Вычитаемые реквизиты счета 91.02 по строкам 2330 2350
	ЗначениеРеквизитаКВычету_2330_2350 = Новый Массив;
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы);
	
	ОкончаниеяПериода = Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачалаПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКонецПериода", ОкончаниеяПериода);
	Запрос.УстановитьПараметр("СчетКт_2110", СчетКт_2110);
	Запрос.УстановитьПараметр("СчетДт_2110", СчетДт_2110);
	Запрос.УстановитьПараметр("СчетДт_2120", СчетДт_2120);
	Запрос.УстановитьПараметр("СчетДт_2210", СчетДт_2210);
	Запрос.УстановитьПараметр("СчетДт_2220", СчетДт_2220);
	Запрос.УстановитьПараметр("Субконто_2410", Субконто_2410);
	Запрос.УстановитьПараметр("Аналитика_2410", Аналитика_2410);
	Запрос.УстановитьПараметр("Счет_09", Счет_09);
	Запрос.УстановитьПараметр("Счет_68_02", Счет_68_02);
	Запрос.УстановитьПараметр("Счет_68_04_1", Счет_68_04_1);
	Запрос.УстановитьПараметр("Счет_68_04_2", Счет_68_04_2);
	Запрос.УстановитьПараметр("Счет_77", Счет_77);
	Запрос.УстановитьПараметр("СчетДк_91_01", СчетДк_91_01);
	Запрос.УстановитьПараметр("Субконто_91_01", Субконто_91_01);
	Запрос.УстановитьПараметр("Счет_91_02", Счет_91_02);
	Запрос.УстановитьПараметр("Счет_99_01", Счет_99_01);
	Запрос.УстановитьПараметр("Субконто_99_01", Субконто_99_01);
	Запрос.УстановитьПараметр("Аналитика_99_01", Аналитика_99_01);
	Запрос.УстановитьПараметр("Счет_99_01_1", Счет_99_01_1);
	Запрос.УстановитьПараметр("Счет_99_02_4", Счет_99_02_4);
	Запрос.УстановитьПараметр("Счет_99_09", Счет_99_09);
	Запрос.УстановитьПараметр("ЗначениеРеквизита_2310_2320_2340", ЗначениеРеквизита_2310_2320_2340);
	Запрос.УстановитьПараметр("ЗначениеРеквизитаКВычету_2310_2320_2340", ЗначениеРеквизитаКВычету_2310_2320_2340);
	Запрос.УстановитьПараметр("ЗначениеРеквизита_2330_2350", ЗначениеРеквизита_2330_2350);
	Запрос.УстановитьПараметр("ЗначениеРеквизитаКВычету_2330_2350", ЗначениеРеквизитаКВычету_2330_2350);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачалаПериода, &ДатаКонецПериода, , Счет В ИЕРАРХИИ (&СчетКт_2110), , 
	|		Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет В (&СчетДт_2110)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетДт_2120)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетДт_2210)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетДт_2220),
	|			,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет = &СчетДк_91_01,
	|			&Субконто_91_01,
	|			Организация = &Организация
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ЗначениеРеквизита_2310_2320_2340),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет = &Счет_91_02,
	|			&Субконто_91_01,
	|			Организация = &Организация
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ЗначениеРеквизитаКВычету_2310_2320_2340),
	|			КорСчет = &Счет_68_02,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет = &Счет_91_02,
	|			&Субконто_91_01,
	|			Организация = &Организация
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ЗначениеРеквизита_2330_2350),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет = &Счет_91_02,
	|			&Субконто_91_01,
	|			Организация = &Организация
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ЗначениеРеквизитаКВычету_2330_2350),
	|			КорСчет = &Счет_68_02,
	|			) КАК ХозрасчетныйОбороты";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОКК_Строка_2200 = РезультатЗапроса[0].Выгрузить().Итог("Сумма");
	ОДК_Строка_2200_ = РезультатЗапроса[1].Выгрузить().Итог("Сумма");
	ПрибыльОтПродаж = ОКК_Строка_2200 - ОДК_Строка_2200_;
	
	Сумма_2310_2320_2340 = РезультатЗапроса[2].Выгрузить().Итог("Сумма");
	Вычеты_2340 = РезультатЗапроса[3].Выгрузить().Итог("Сумма");
	Строка_2310_2320_2340 = Сумма_2310_2320_2340 - Вычеты_2340;
	
	Сумма_2330_2350 = РезультатЗапроса[4].Выгрузить().Итог("Сумма");
	Вычеты_2350 = РезультатЗапроса[5].Выгрузить().Итог("Сумма");
	Строка_2330_2350 = Сумма_2330_2350 - Вычеты_2350;
	
	ПрибыльДоНалогообложения = ПрибыльОтПродаж + Строка_2310_2320_2340 - Строка_2330_2350;
	ДанныеБухгалтерскойПрибылиДоНалогообложения.Вставить("ПрибыльДоНалогообложения", ПрибыльДоНалогообложения);
	
КонецПроцедуры

Процедура ЗаполнитьУбыткиРегламентированныхОтчетов(ПериодыОтчета, ИсточникОтчета, ПоказателиОтчетов, 
		НаименованиеПоказателя, ДанныеРегламентированныхОтчетов, ДанныеЗаполненияУбытков, 
		КоличествоПредельныхЗначенийПоСтроке)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("НаименованиеПоказателя", НаименованиеПоказателя);
	Запрос.УстановитьПараметр("ИсточникДанных", ПоказателиОтчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	&ИсточникДанных КАК ИсточникДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.ИсточникОтчета В (&ИсточникОтчета)
	|	И ИсточникДанных.Показатель В(&НаименованиеПоказателя)
	|	И КОНЕЦПЕРИОДА(ИсточникДанных.ДатаОтчета, ДЕНЬ) = &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсточникОтчета,
	|	ДатаОтчета";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыгрузкаРезультатаЗапроса = РезультатЗапроса.Выгрузить();
	
	Для Каждого Источник Из ИсточникОтчета Цикл
		
		УсловиеОтбора = Новый Структура("ИсточникОтчета", Источник);
		СтрокиИсточника = ВыгрузкаРезультатаЗапроса.НайтиСтроки(УсловиеОтбора);
		КоличетсвоСтрокИсточника = СтрокиИсточника.Количество();
		НоваяСтрока = ДанныеРегламентированныхОтчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполненияУбытков);
		НоваяСтрока.ИсточникОтчета = Источник;
		
		Если КоличетсвоСтрокИсточника = 0 Тогда
			НаименованиеОтчета = ПолучитьНаименованиеОтчета(Источник);
			ПредставлениеОтчета = НаименованиеОтчета + ПредставлениеПериода(НачалоГода(ПериодыОтчета.КонецПериода), 
				ПериодыОтчета.КонецПериода, "ФП=Истина");
				
			РасшифровкаЗначения = Новый Структура("ИсточникОтчета, НачалоПериода, КонецПериода, Вопрос", Источник, 
				НачалоГода(ПериодыОтчета.КонецПериода), ПериодыОтчета.КонецПериода, Истина);
			РасшифровкаЗначения.Вставить("ПредставлениеОтчета", ПредставлениеОтчета);
			
			НоваяСтрока.ЗначениеПоказателя = "Нет данных";
			НоваяСтрока.РасшифровкаЗначения = РасшифровкаЗначения;
			Продолжить;
		КонецЕсли;
		
		Если КоличетсвоСтрокИсточника = 1 Тогда
			НоваяСтрока.ЗначениеПоказателя = 
				СтрокиИсточника[0].ЗначениеПоказателя;
			НоваяСтрока.РасшифровкаЗначения.Вставить("РегламентированныйОтчет", СтрокиИсточника[0].РегламентированныйОтчет);
			Если СтрокиИсточника[0].ЗначениеПоказателя < 0 Тогда
				НоваяСтрока.ПредельноеЗначение = Истина;
				КоличествоПредельныхЗначенийПоСтроке = КоличествоПредельныхЗначенийПоСтроке + 1;
			Иначе
				НоваяСтрока.ПредельноеЗначение = Ложь;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Строка Из СтрокиИсточника Цикл
			ЗначениеПоказателя = ЗначениеПоказателя + Строка.ЗначениеПоказателя;
		КонецЦикла;
		
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		Если ЗначениеПоказателя < 0 Тогда
			НоваяСтрока.ПредельноеЗначение = Истина;
			КоличествоПредельныхЗначенийПоСтроке = КоличествоПредельныхЗначенийПоСтроке + 1;
		Иначе
			НоваяСтрока.ПредельноеЗначение = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйРасшифровкаУбыткиВОтчетности()
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	ТипСтруктура = Новый ОписаниеТипов("Структура");
	
	ДанныеРегламентированногоОтчета = Новый ТаблицаЗначений;
	ДанныеРегламентированногоОтчета.Колонки.Добавить("Период", ТипСтрока);
	ДанныеРегламентированногоОтчета.Колонки.Добавить("СистемаНалогообложения", ТипСтрока);
	ДанныеРегламентированногоОтчета.Колонки.Добавить("ПараметрыРасшифровки", ТипСтруктура);
	Возврат ДанныеРегламентированногоОтчета;
	
КонецФункции

Процедура ЗаполнитьРасшифровкуУбыткиВОтчетности(ДанныеРегламентированныхОтчетов, ДанныеРасшифровкиКритерия)
	
	КоличествоСтрокДанных = ДанныеРегламентированныхОтчетов.Количество() - 1;
	Период = ДанныеРегламентированныхОтчетов[0].Период;
	НоваяСтрокаРасшифровки = ДанныеРасшифровкиКритерия.Добавить();
	ПараметрыРасшифровки = Новый Структура();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаРасшифровки, ДанныеРегламентированныхОтчетов[0]);
	
	Для НомерСтрокиДанных = 0 По КоличествоСтрокДанных Цикл
		
		ТекущаяСтрока = ДанныеРегламентированныхОтчетов[НомерСтрокиДанных];
		Если Период <> ТекущаяСтрока.Период Тогда
			Период = ТекущаяСтрока.Период;
			НоваяСтрокаРасшифровки.ПараметрыРасшифровки = ПараметрыРасшифровки;
			НоваяСтрокаРасшифровки = ДанныеРасшифровкиКритерия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасшифровки, ТекущаяСтрока);
			ПараметрыРасшифровки = Новый Структура();
		КонецЕсли;
		
		Если ТекущаяСтрока.ИсточникОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
			Если ТекущаяСтрока.РасшифровкаЗначения.Свойство("ПредставлениеОтчета") Тогда
				ПараметрыРасшифровки.Вставить("РасшифровкаБухгалтерскаяОтчетность", ТекущаяСтрока.РасшифровкаЗначения);
			ИначеЕсли ТекущаяСтрока.РасшифровкаЗначения.Свойство("РегламентированныйОтчет") Тогда
				ПараметрыРасшифровки.Вставить("РасшифровкаБухгалтерскаяОтчетность", 
					ТекущаяСтрока.РасшифровкаЗначения.РегламентированныйОтчет);
				ПараметрыРасшифровки.Вставить("ПредельноеЗначениеБухгалтерскойОтчетности", ТекущаяСтрока.ПредельноеЗначение);
			ИначеЕсли ТекущаяСтрока.РасшифровкаЗначения.Количество() = 0 Тогда
				ПараметрыРасшифровки.Вставить("ПредельноеЗначениеБухгалтерскойОтчетности", ТекущаяСтрока.ПредельноеЗначение);
			КонецЕсли;
			ПараметрыРасшифровки.Вставить("БухгалтерскаяОтчетность", ТекущаяСтрока.ЗначениеПоказателя);
		КонецЕсли;
		
		Если ТекущаяСтрока.СистемаНалогообложения = "ЕНВД" Тогда
			ПараметрыРасшифровки.Вставить("НалоговаяОтчетность", "-");
			Если НомерСтрокиДанных = КоличествоСтрокДанных Тогда
				НоваяСтрокаРасшифровки.ПараметрыРасшифровки = ПараметрыРасшифровки;
			КонецЕсли;
			Продолжить;
		ИначеЕсли ТекущаяСтрока.СистемаНалогообложения = "Упрощенная" 
			И СтрДлина(ТекущаяСтрока.Период) > 7 Тогда
			ПараметрыРасшифровки.Вставить("НалоговаяОтчетность", "-");
			НоваяСтрокаРасшифровки.ПараметрыРасшифровки = ПараметрыРасшифровки;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТекущаяСтрока.ИсточникОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
			Если ТекущаяСтрока.РасшифровкаЗначения.Свойство("ПредставлениеОтчета") Тогда
				ПараметрыРасшифровки.Вставить("РасшифровкаНалоговаяОтчетность", ТекущаяСтрока.РасшифровкаЗначения);
			ИначеЕсли ТекущаяСтрока.РасшифровкаЗначения.Свойство("РегламентированныйОтчет") Тогда
				ПараметрыРасшифровки.Вставить("РасшифровкаНалоговаяОтчетность", 
					ТекущаяСтрока.РасшифровкаЗначения.РегламентированныйОтчет);
				ПараметрыРасшифровки.Вставить("ПредельноеЗначениеНалоговойОтчетности", ТекущаяСтрока.ПредельноеЗначение);
			КонецЕсли;
			ПараметрыРасшифровки.Вставить("НалоговаяОтчетность", ТекущаяСтрока.ЗначениеПоказателя);
		КонецЕсли;
		
		Если НомерСтрокиДанных = КоличествоСтрокДанных Тогда
			НоваяСтрокаРасшифровки.ПараметрыРасшифровки = ПараметрыРасшифровки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМакетОтчетаРасшифровкойУбыткиВОтчетности(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		ДанныеЗаполненияМакета, ДанныеРасшифровкиКритерия)
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	МакетОписаниеРезультатПроверки = 
		Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ОписаниеРезультатовПроверки");
	
	ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("ЗаголовокРезультатаКритерия");
	ОбластьКартинки = ОбластьЗаголовок.Область("КартинкаРезультата");
	
	ОбластьОснованиеПроверки = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.ОснованиеПроверки);
	ОбластьРасчетПоказателей = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателей);
	
	ОбластьЗаголовокПФ = МакетОтчетаПФ.ПолучитьОбласть("ЗаголовокРезультатаКритерия");
	ОбластьКартинкиПФ = ОбластьЗаголовокПФ.Область("КартинкаРезультата");
	
	ОбластьОснованиеПроверкиПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.ОснованиеПроверки);
	ОбластьРасчетПоказателейПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателей);
	
	ОбластьОтступ_3 = МакетОтчета.ПолучитьОбласть("Отступ_3");
	ОбластьОтступ_5 = МакетОтчета.ПолучитьОбласть("Отступ_5");
	
	ЦветФонаНетОснований = Новый Цвет(240, 255, 240);
	ЦветФонаЕстьОснования = Новый Цвет(255, 240, 245);
	ЦветТекстаГиперссылки = Новый Цвет(83, 106, 194);
	
	ОбластьТекстНаименованиеКритерия = 
		МакетОписаниеРезультатПроверки.Область(ДанныеЗаполненияМакета.ОбластьТекстаНаименованияКритерия).Имя;
	
	Если ДанныеЗаполненияМакета.Свойство("ЕстьОснование") Тогда
		
		ОбластьКартинки.Картинка = БиблиотекаКартинок.ЕстьРискПроверки;
		ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", 
			МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|ЕстьОснования").Текст);
		
		ОбластьКартинкиПФ.Картинка = БиблиотекаКартинок.ЕстьРискПроверки;
		ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", 
			МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|ЕстьОснования").Текст);
	Иначе
		ОбластьКартинки.Картинка = БиблиотекаКартинок.НетРискаПроверки;
		ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", 
			МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|НетОснований").Текст);
		
		ОбластьКартинкиПФ.Картинка = БиблиотекаКартинок.НетРискаПроверки;
		ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", 
			МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|НетОснований").Текст);
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьОснованиеПроверки.Параметры.Заполнить(ДанныеЗаполненияМакета);
	
	ОбластьЗаголовокПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьОснованиеПроверкиПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5);
	РезультатПроверкиКритериев.Вывести(ОбластьЗаголовок);
	РезультатПроверкиКритериев.НачатьГруппуСтрок(, Ложь);
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_3);
	
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьЗаголовокПФ);
	РезультатПроверкиКритериевПФ.НачатьГруппуСтрок(, Ложь);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_3);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОснованиеПроверки, 2);
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериев.Вывести(ОбластьРасчетПоказателей, 2);
	
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОснованиеПроверкиПФ, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьРасчетПоказателейПФ, 2);
	
	Для Каждого СтрокаРасшифровки Из ДанныеРасшифровкиКритерия Цикл
		
		ОбластьСтрокиТаблицы = МакетОтчета.ПолучитьОбласть("Таблица_УбыткиВОтчетности");
		ОбластьСтрокиТаблицыПФ = МакетОтчетаПФ.ПолучитьОбласть("Таблица_УбыткиВОтчетности");
		
		ОбластьСтрокиТаблицы.Параметры.Заполнить(СтрокаРасшифровки);
		ОбластьСтрокиТаблицыПФ.Параметры.Заполнить(СтрокаРасшифровки);
		ОбластьСтрокиТаблицы.Параметры.Заполнить(СтрокаРасшифровки.ПараметрыРасшифровки);
		ОбластьСтрокиТаблицыПФ.Параметры.Заполнить(СтрокаРасшифровки.ПараметрыРасшифровки);
		
		Если СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("РасшифровкаБухгалтерскаяОтчетность") Тогда
			ОбластьРасшифровкиЯчейки = ОбластьСтрокиТаблицы.Область("БухгалтерскаяОтчетность");
			ОбластьРасшифровкиЯчейки.Гиперссылка = Истина;
			ОбластьРасшифровкиЯчейки.ЦветТекста = ЦветТекстаГиперссылки;
		КонецЕсли;
		
		Если СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("ПредельноеЗначениеБухгалтерскойОтчетности") Тогда
			ОбластьРасшифровкиЯчейки = ОбластьСтрокиТаблицы.Область("БухгалтерскаяОтчетность");
			Если СтрокаРасшифровки.ПараметрыРасшифровки.ПредельноеЗначениеБухгалтерскойОтчетности Тогда
				ОбластьРасшифровкиЯчейки.ЦветФона = ЦветФонаЕстьОснования;
			Иначе
				ОбластьРасшифровкиЯчейки.ЦветФона = ЦветФонаНетОснований;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("РасшифровкаНалоговаяОтчетность") Тогда
			ОбластьРасшифровкиЯчейки = ОбластьСтрокиТаблицы.Область("НалоговаяОтчетность");
			ОбластьРасшифровкиЯчейки.Гиперссылка = Истина;
			ОбластьРасшифровкиЯчейки.ЦветТекста = ЦветТекстаГиперссылки;
		КонецЕсли;
		
		Если СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("ПредельноеЗначениеНалоговойОтчетности") Тогда
			Если СтрокаРасшифровки.ПараметрыРасшифровки.ПредельноеЗначениеНалоговойОтчетности Тогда
				ОбластьРасшифровкиЯчейки.ЦветФона = ЦветФонаЕстьОснования;
			Иначе
				ОбластьРасшифровкиЯчейки.ЦветФона = ЦветФонаНетОснований;
			КонецЕсли;
		КонецЕсли;
		
		РезультатПроверкиКритериев.Вывести(ОбластьСтрокиТаблицы, 2);
		РезультатПроверкиКритериевПФ.Вывести(ОбластьСтрокиТаблицыПФ, 2);
		
	КонецЦикла;
	
	РезультатПроверкиКритериев.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Функция ЕстьРегОтчетностьЗаПериод(КонецПериода, ИсточникОтчета, ПоказателиОтчетов)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИсточникОтчета", ИсточникОтчета);
	Отбор.Вставить("ДатаОкончания" , НачалоДня(КонецПериода));
	
	СтрокиРегОтчетности = ПоказателиОтчетов.НайтиСтроки(Отбор);
	
	Если СтрокиРегОтчетности.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


#КонецОбласти

#Область ПроцедурыИФункцииПолученияРезультатаЗначительныеВычетыПоНДС

Процедура ЗначительныеВычетыПоНДС(ПараметрыОтчета, ДанныеУчетнойПолитики, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПФ, РезультатыПроверки)
	
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ПараметрыОтчета.НачалоПериода);
	КонецПериода = КонецМесяца(ПараметрыОтчета.КонецПериода);
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	Подробнее = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/nalprov#content:26721:1:8");
	
	НаименованиеВременнойТаблицы = "";
	
	#Область ПроверкаНетДанныхНеПроверяется
	ДанныеЗаполненияМакета = Новый Структура();
	ДанныеЗаполненияМакета.Вставить("НомерКритерия", "3.");
	ДанныеЗаполненияМакета.Вставить("ОбластьТекстаНаименованияКритерия", "НалоговыеВычеты");
	ДанныеЗаполненияМакета.Вставить("ОснованиеПроверки", "ОснованиеПроверки_ЗначительныеВычетыПоНДС");
	ДанныеЗаполненияМакета.Вставить("Подробнее_3", Подробнее);
	
	ЭтоПлательщикНДС = ПроверитьПрименениеНДС(ДанныеУчетнойПолитики, Организация, 
		ДанныеЗаполненияМакета, РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ);
	
	Если НЕ ЭтоПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаРегистрации > КонецПериода Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетДеятельности");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	Если Год(ДатаРегистрации) = Год(НачалоПериода) Тогда
		НачалоПериода = НачалоКвартала(ДатаРегистрации);
	КонецЕсли;
	
	КолисествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество() - 1;
	
	Если КолисествоЗаписейУчетнойПолитики < 0 Тогда
		ДанныеЗаполненияМакета.Вставить("УчетнаяПолитика", "УчетнаяПолитика");
		ДанныеЗаполненияМакета.Вставить("Период", Формат(Год(КонецПериода), "ЧГ="));
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетУчетнойПолитики");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ТекущаяУчетнаяПолитика = ДанныеУчетнойПолитики[КолисествоЗаписейУчетнойПолитики];
	ПериодыОтчета = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	
	#КонецОбласти
	
	ПоказателиОтчетов = РегламентированнаяОтчетность.ПоказателиОценкиРискаВыезднойНалоговойПроверки(
		Организация, НачалоГода(НачалоПериода), КонецПериода);
	
	ОтчетыНетДанных = НовыйОтчетыНетДанных();
	ДанныеРегламентированногоОтчетаНДС = НовыйДанныеРегламентированногоОтчета();
	ИсточникОтчета = "РегламентированныйОтчетНДС";
	НаименованиеПоказателя = Новый Массив;
	НаименованиеПоказателя.Добавить("СуммаНачисленногоНДС");
	НаименованиеПоказателя.Добавить("СуммаВычетовПоНДС");
	
	ПолучитьРегламентированныеОтчетыОбычнымПериодом(ПериодыОтчета, ИсточникОтчета, ПоказателиОтчетов, 
		НаименованиеПоказателя, ДанныеРегламентированногоОтчетаНДС, ОтчетыНетДанных);
	
	Если ОтчетыНетДанных.Количество() > 0 Тогда
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НетДанныхСформироватьОтчеты");
		ДанныеЗаполненияМакета.Вставить("ОтчетыНетДанных", ОтчетыНетДанных);
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ОтборНачисленнойСуммыНалога = Новый Структура("Показатель", "СуммаНачисленногоНДС");
	СтрокиНачисленнойСуммыНалога = ДанныеРегламентированногоОтчетаНДС.НайтиСтроки(ОтборНачисленнойСуммыНалога);
	
	Если СтрокиНачисленнойСуммыНалога.Количество() = 0 Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяЗначительныеВычетыНетНачисленногоНДС");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	СуммаНачисленногоНДС = 0;
	НДСНачислен = ПолучитьСуммуНачисленногоНДС(СтрокиНачисленнойСуммыНалога, СуммаНачисленногоНДС);
	
	Если НЕ НДСНачислен Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяЗначительныеВычетыНетНачисленногоНДС");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ДанныеРасшифровкиКритерия = НовыйРасшифровкаЗначителныеВычетыПоНДС();
	ДанныеРегламентированногоОтчетаНДС.Сортировать("ДатаОтчета");
	ЗаполнитьРасшифровкуКритерияЗначительныеВычетыПоНДС(ДанныеРегламентированногоОтчетаНДС, ДанныеРасшифровкиКритерия, 
		ПериодыОтчета);
	
	СуммаВычетовНДС = ДанныеРасшифровкиКритерия.Итог("ЗначениеПоказателя") - СуммаНачисленногоНДС;
	ДоляВычетовНДС = Окр(100*(СуммаВычетовНДС/СуммаНачисленногоНДС), 1, 1);
	ПредельноеЗначениеВычетовНДС = 89;
	
	Если ДоляВычетовНДС < ПредельноеЗначениеВычетовНДС Тогда
		ЗнакСравнения = "<";
		РезультатыПроверки.Вставить("Критерий3","НетОснования");
	Иначе
		Если ДоляВычетовНДС = ПредельноеЗначениеВычетовНДС Тогда
			ЗнакСравнения = "=";
			РезультатыПроверки.Вставить("Критерий3","НетОснования");
		Иначе
			ЗнакСравнения = ">";
			ДанныеЗаполненияМакета.Вставить("ЕстьОснование", Истина);
			РезультатыПроверки.Вставить("Критерий3","ЕстьОснование"); 			
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполненияМакета.Вставить("РасчетПоказателей", "Калькулятор_ЗначительныеВычетыПоНДС");
	ДанныеЗаполненияМакета.Вставить("ЕстьРасшифровкаПоказателей", Истина);
	
	ДанныеЗаполненияМакетаРасчетПоказателей = Новый Структура;
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СуммаНачисленногоНДС", СуммаНачисленногоНДС);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СуммаВычетовНДС", СуммаВычетовНДС);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ДоляВычетовНДС", ДоляВычетовНДС);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ЗнакСравнения", ЗнакСравнения);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ПредельноеЗначениеВычетовНДС", ПредельноеЗначениеВычетовНДС);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СравнениеПоказателей", "РезультатСравненияЗначительныеВычетыПоНДС");
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("Подробнее_3", Подробнее);
	
	ЗаполнитьМакетОтчетаЕстьРезультат(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, 
		ДанныеЗаполненияМакетаРасчетПоказателей);
	ЗаполнитьМакетОтчетаРасшифровкойЗначительныеВычетыПоНДС(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		ДанныеРасшифровкиКритерия);
	
КонецПроцедуры

Функция ПроверитьПрименениеНДС(ДанныеУчетнойПолитики, Организация, ДанныеЗаполненияМакета, 
		РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ)
	
	КоличествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество() - 1;
	
	Если КоличествоЗаписейУчетнойПолитики < 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекущаяУчетнаяПолитика = ДанныеУчетнойПолитики[КоличествоЗаписейУчетнойПолитики];
	
	Если НЕ ТекущаяУчетнаяПолитика.ПлательщикНДС Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяЗначительныеВычетыПоНДСНеПлательщик");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСуммуНачисленногоНДС(СтрокиНачисленнойСуммыНалога, СуммаНачисленногоНДС)
	
	Для Каждого СтрокаСуммы Из СтрокиНачисленнойСуммыНалога Цикл
		СуммаНачисленногоНДС = СуммаНачисленногоНДС + СтрокаСуммы.ЗначениеПоказателя;
	КонецЦикла;
	
	Если СуммаНачисленногоНДС = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НовыйРасшифровкаЗначителныеВычетыПоНДС()
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	ТипСтруктура = Новый ОписаниеТипов("Структура");
	ТипЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
	
	РасшифровкаКритерия = Новый ТаблицаЗначений;
	РасшифровкаКритерия.Колонки.Добавить("Показатель", ТипСтрока);
	РасшифровкаКритерия.Колонки.Добавить("ПараметрыРасшифровки", ТипСтруктура);
	РасшифровкаКритерия.Колонки.Добавить("ЗначениеПоказателя", ТипЧисло);
	
	Возврат РасшифровкаКритерия;
	
КонецФункции

Процедура ЗаполнитьРасшифровкуКритерияЗначительныеВычетыПоНДС(ДанныеРегламентированногоОтчетаНДС, 
		ДанныеРасшифровкиКритерия, ПериодыОтчета)
	
	НаименованияПоказателей = Новый Массив;
	КолонкаПоказатель = ДанныеРегламентированногоОтчетаНДС.ВыгрузитьКолонку("Показатель");
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(НаименованияПоказателей, КолонкаПоказатель);
	НачалоПериода = ПериодыОтчета.НачалоПериода;
	КонецПериода = ПериодыОтчета.КонецПериода;
	
	Для Каждого Показатель Из НаименованияПоказателей Цикл
		УсловиеПоиска = Новый Структура("Показатель", Показатель);
		СтрокиПоказателя = ДанныеРегламентированногоОтчетаНДС.НайтиСтроки(УсловиеПоиска);
		ПараметрыРасшифровки = Новый Структура;
		
		НоваяСтрокаРасшифровки = ДанныеРасшифровкиКритерия.Добавить();
		НоваяСтрокаРасшифровки.Показатель = Показатель;
		
		НаименованиеПериода = "Квартал_";
		НаименованиеРасшифровки = "РасшифровкаКвартал_";
		ЭтоКвартал = Истина;
		ЗаполнитьРасшифровкуНалоговаяНагрузкаПоПериодуКварталМесяц(СтрокиПоказателя, НаименованиеПериода, 
			НаименованиеРасшифровки, НоваяСтрокаРасшифровки, ПараметрыРасшифровки, ЭтоКвартал);
		Продолжить;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМакетОтчетаРасшифровкойЗначительныеВычетыПоНДС(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		ДанныеРасшифровкиКритерия)
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	ОбластьОтступ_3 = МакетОтчета.ПолучитьОбласть("Отступ_3");
	ЦветТекстаГиперссылки = Новый Цвет(83, 106, 194);
	
	Для Каждого СтрокаРасшифровки Из ДанныеРасшифровкиКритерия Цикл
		
		Если СтрокаРасшифровки.Показатель = "СуммаНачисленногоНДС" Тогда
			ОбластьНачисления = МакетОтчета.ПолучитьОбласть("Таблица_ЗначительныеВычетыПоНДС");
			ОбластьНачисления.Параметры.СуммаНачисленногоНДС = СтрокаРасшифровки.ЗначениеПоказателя;
			
			ОбластьНачисленияПФ = МакетОтчетаПФ.ПолучитьОбласть("Таблица_ЗначительныеВычетыПоНДС");
			ОбластьНачисленияПФ.Параметры.СуммаНачисленногоНДС = СтрокаРасшифровки.ЗначениеПоказателя;
			
			РезультатПроверкиКритериев.Вывести(ОбластьНачисления, 2);
			РезультатПроверкиКритериевПФ.Вывести(ОбластьНачисленияПФ, 2);
		КонецЕсли;
		
		ОбластьРасшифровкиНалога = МакетОтчета.ПолучитьОбласть("ПериодКвартал_1");
		ОбластьРасшифровкиНалога.Параметры.Заполнить(СтрокаРасшифровки.ПараметрыРасшифровки);
		
		ОбластьРасшифровкиНалогаПФ = МакетОтчетаПФ.ПолучитьОбласть("ПериодКвартал_1");
		ОбластьРасшифровкиНалогаПФ.Параметры.Заполнить(СтрокаРасшифровки.ПараметрыРасшифровки);
		
		ПустоеЗначение = Новый Структура;
		
		Для НомерКвартала = 1 По 4 Цикл
			Если НЕ СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("Квартал_" + НомерКвартала) Тогда
				ПустоеЗначение.Вставить("Квартал_" + НомерКвартала, "-");
			КонецЕсли;
			
			Если СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("РасшифровкаКвартал_" + НомерКвартала) Тогда
				ОбластьРасшифровкиЯчейки = ОбластьРасшифровкиНалога.Область("Квартал_" + НомерКвартала);
				ОбластьРасшифровкиЯчейки.Гиперссылка = Истина;
				ОбластьРасшифровкиЯчейки.ЦветТекста = ЦветТекстаГиперссылки;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьРасшифровкиНалога.Параметры.Заполнить(ПустоеЗначение);
		РезультатПроверкиКритериев.Вывести(ОбластьРасшифровкиНалога, 2);
		РезультатПроверкиКритериев.Вывести(ОбластьОтступ_3, 2);
		
		ОбластьРасшифровкиНалогаПФ.Параметры.Заполнить(ПустоеЗначение);
		РезультатПроверкиКритериевПФ.Вывести(ОбластьРасшифровкиНалогаПФ, 2);
		РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_3, 2);
		
	КонецЦикла;
	
	РезультатПроверкиКритериев.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыиФункцииРезультатаТемпыРостаРасходов

Процедура ТемпыРостаРасходов(ПараметрыОтчета, ДанныеУчетнойПолитики, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПФ, РезультатыПроверки)
	
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(Дата(Год(ПараметрыОтчета.НачалоПериода) - 1, 1, 1));
	КонецПериода = КонецМесяца(ПараметрыОтчета.КонецПериода);
	ЭтоЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	СистемаНалогообложенияПроверена = Ложь;
	ТекущаяУчетнаяПолитика = Неопределено;
	Подробнее = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/nalprov#content:26721:1:9");
	
	#Область ПроверкаНетДанныхНеПроверяется
	ДанныеЗаполненияМакета = Новый Структура();
	ДанныеЗаполненияМакета.Вставить("НомерКритерия", "4.");
	ДанныеЗаполненияМакета.Вставить("ОбластьТекстаНаименованияКритерия", "ТемпыРасходов");
	ДанныеЗаполненияМакета.Вставить("ОснованиеПроверки", "ОснованиеПроверки_ТемпыРостаРасходов");
	ДанныеЗаполненияМакета.Вставить("Подробнее_4", Подробнее);
	
	Если НЕ ЭтоЮридическоеЛицо Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяУбыткиВОтчетностиИП");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	СистемаНалогообложенияОбщая = ПроверитьСистемуНалогообложенияКритерияТемпыРостаРасходов(ДанныеУчетнойПолитики, 
		ПараметрыОтчета, ДанныеЗаполненияМакета, РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		СистемаНалогообложенияПроверена);
	
	Если НЕ СистемаНалогообложенияОбщая Тогда
		Возврат
	КонецЕсли;
	
	ПредыдущийГод = Формат(Год(КонецПериода) - 1, "ЧГ=");
	
	Если ((Год(КонецПериода) - Год(ДатаРегистрации) = 1) 
		И (Месяц(НачалоКвартала(ДатаРегистрации)) > Месяц(НачалоКвартала(КонецПериода)))) 
		ИЛИ (Год(КонецПериода) - Год(ДатаРегистрации) < 1) Тогда
		ДанныеЗаполненияМакета.Вставить("ПредыдущийПериод", Строка(ПредыдущийГод) + НСтр("ru=' г.'") );
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяТемпыРостаРасходовНетДеятельности");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	КоличествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество() - 1;
	
	Если КоличествоЗаписейУчетнойПолитики < 1 Тогда
		ДанныеЗаполненияМакета.Вставить("УчетнаяПолитика", "УчетнаяПолитика");
		ДанныеЗаполненияМакета.Вставить("Период", Формат(Год(КонецПериода) - 1, "ЧГ="));
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетУчетнойПолитики");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	СистемаНалогообложенияОбщая = ПроверитьСистемуНалогообложенияКритерияТемпыРостаРасходов(ДанныеУчетнойПолитики, 
		ПараметрыОтчета, ДанныеЗаполненияМакета, РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		СистемаНалогообложенияПроверена);
	
	Если НЕ СистемаНалогообложенияОбщая Тогда
		Возврат
	КонецЕсли;
	#КонецОбласти
	
	ПоказателиОтчетов = РегламентированнаяОтчетность.ПоказателиОценкиРискаВыезднойНалоговойПроверки(
		Организация, НачалоГода(НачалоПериода), КонецПериода);
	ДанныеРегламентированныхОтчетов = НовыйДанныеРегламентированногоОтчета();
	ДанныеРегламентированногоОтчетаПрибыль = НовыйДанныеРегламентированногоОтчета();
	ОтчетыНетДанных = НовыйОтчетыНетДанных();
	
	ИсточникОтчета = "РегламентированныйОтчетПрибыль";
	НаименованиеПоказателя = Новый Массив;
	НаименованиеПоказателя.Добавить("СуммаРасходовПоРеализации");
	НаименованиеПоказателя.Добавить("СуммаДоходовОтРеализации");
	МесяцКонцаПериода = Месяц(КонецПериода);
	ДанныеЗаполненияМакетаРасчетПоказателей = Новый Структура;
	ОбластиГиперссылок = Новый Массив;
	КодыНалоговыхОрганов = Новый Массив;
	
	Для НомерГода = 0 По 1 Цикл
		ОдинКодНалоговогоОргана = Ложь;
		ПериодыОтчета = Новый Структура;
		ПериодыОтчета.Вставить("НачалоПериода", НачалоГода(Дата(Год(НачалоПериода) + НомерГода, 1, 1)));
		ПериодыОтчета.Вставить("КонецПериода", КонецКвартала(Дата(Год(НачалоПериода) + НомерГода, МесяцКонцаПериода, 1)));
		
		ПолучитьРегламентированныеОтчетыНарастающимПериодом(ПериодыОтчета, ИсточникОтчета, ПоказателиОтчетов, 
			НаименованиеПоказателя, ДанныеРегламентированногоОтчетаПрибыль, ОтчетыНетДанных);
		
		КолонкаКодНалоговогоОргана = ДанныеРегламентированногоОтчетаПрибыль.ВыгрузитьКолонку("КодНалоговогоОргана");
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(КодыНалоговыхОрганов, КолонкаКодНалоговогоОргана);
		
		Если КодыНалоговыхОрганов.Количество() = 1 Тогда
			ОдинКодНалоговогоОргана = Истина;
		КонецЕсли;
		
		НомерСтроки = 0;
		Для Каждого СтрокаОтчетаПрибыль Из ДанныеРегламентированногоОтчетаПрибыль Цикл
			НомерСтроки = НомерСтроки + 1;
			НоваяСтрокаДанныхОтчетов = ДанныеРегламентированныхОтчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДанныхОтчетов, СтрокаОтчетаПрибыль);
			Если ОдинКодНалоговогоОргана Тогда
				Если НомерГода = 0 И НомерСтроки = 1 Тогда
					ОбластиГиперссылок.Добавить("РасходыНалоговойОтчетностиПредшествующегоПериода");
					ОбластиГиперссылок.Добавить("ДоходыНалоговойОтчетностиПредшествующегоПериода");
					ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасшифровкаРасходыНалоговойОтчетностиПредшествующегоПериода", 
						СтрокаОтчетаПрибыль.РегламентированныйОтчет);
					ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасшифровкаДоходыНалоговойОтчетностиПредшествующегоПериода", 
						СтрокаОтчетаПрибыль.РегламентированныйОтчет);
				ИначеЕсли НомерГода = 1 И НомерСтроки = 1 Тогда
					ОбластиГиперссылок.Добавить("РасходыНалоговойОтчетностиТекущегоПериода");
					ОбластиГиперссылок.Добавить("ДоходыНалоговойОтчетностиТекущегоПериода");
					ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасшифровкаРасходыНалоговойОтчетностиТекущегоПериода", 
						СтрокаОтчетаПрибыль.РегламентированныйОтчет);
					ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасшифровкаДоходыНалоговойОтчетностиТекущегоПериода", 
						СтрокаОтчетаПрибыль.РегламентированныйОтчет);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеРегламентированногоОтчетаПрибыль.Очистить();
		КодыНалоговыхОрганов.Очистить();
	КонецЦикла;
	
	Если ОбластиГиперссылок.Количество() > 0 Тогда
		ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ОбластиГиперссылок", ОбластиГиперссылок);
	КонецЕсли;
	
	Если ОтчетыНетДанных.Количество() <> 0 Тогда
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НетДанныхСформироватьОтчеты");
		ДанныеЗаполненияМакета.Вставить("ОтчетыНетДанных", ОтчетыНетДанных);
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ЕстьНулевыеЗначения = ПроверитьНаличиеНулевыхЗначенийПоказателейКритерияТемповРостаРасходов(
		ДанныеРегламентированныхОтчетов, НачалоПериода);
	
	Если ЕстьНулевыеЗначения Тогда
		ДанныеЗаполненияМакета.Вставить("ПредыдущийПериод", Строка(ПредыдущийГод) + НСтр("ru=' г.'") );
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяТемпыРостаРасходовНетДоходовРасходовВПрошломГоду");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ДанныеРегламентированныхОтчетов.Сортировать("ДатаОтчета");
	КодыНалоговыхОрганов = Новый Массив;
	КолонкаКодНалоговогоОргана = ДанныеРегламентированныхОтчетов.ВыгрузитьКолонку("КодНалоговогоОргана");
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(КодыНалоговыхОрганов, КолонкаКодНалоговогоОргана);
	
	СсылкиОтчетов = Новый Массив;
	КолонкаРегламентированныйОтчет = ДанныеРегламентированныхОтчетов.ВыгрузитьКолонку("РегламентированныйОтчет");
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СсылкиОтчетов, КолонкаРегламентированныйОтчет);
	РасходыНалоговойОтчетностиПредшествующегоПериода = 0;
	ДоходыНалоговойОтчетностиПредшествующегоПериода = 0;
	РасходыНалоговойОтчетностиТекущегоПериода = 0;
	ДоходыНалоговойОтчетностиТекущегоПериода = 0;
	
	Для Каждого СтрокаДанныхОтчета Из ДанныеРегламентированныхОтчетов Цикл
		Если Год(НачалоПериода) = Год(СтрокаДанныхОтчета.ДатаОтчета) Тогда
			Если СтрокаДанныхОтчета.Показатель = "СуммаРасходовПоРеализации" ТОгда
				РасходыНалоговойОтчетностиПредшествующегоПериода = РасходыНалоговойОтчетностиПредшествующегоПериода +
					СтрокаДанныхОтчета.ЗначениеПоказателя;
			Иначе
				ДоходыНалоговойОтчетностиПредшествующегоПериода = ДоходыНалоговойОтчетностиПредшествующегоПериода + 
					СтрокаДанныхОтчета.ЗначениеПоказателя;
			КонецЕсли;
		Иначе
			Если СтрокаДанныхОтчета.Показатель = "СуммаРасходовПоРеализации" ТОгда
				РасходыНалоговойОтчетностиТекущегоПериода = РасходыНалоговойОтчетностиТекущегоПериода + 
					СтрокаДанныхОтчета.ЗначениеПоказателя;
			Иначе
				ДоходыНалоговойОтчетностиТекущегоПериода = ДоходыНалоговойОтчетностиТекущегоПериода + 
					СтрокаДанныхОтчета.ЗначениеПоказателя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТемпРостаРасходовНалоговойОтчетности = Окр(100 * (РасходыНалоговойОтчетностиТекущегоПериода/
		РасходыНалоговойОтчетностиПредшествующегоПериода) - 100, 1, 1);
	ТемпРостаДоходовНалоговойОтчетности = Окр(100 * (ДоходыНалоговойОтчетностиТекущегоПериода/
		ДоходыНалоговойОтчетностиПредшествующегоПериода) - 100, 1, 1);
	ПроверитьДанныеБухУчета = Ложь;
	
	Если ТемпРостаРасходовНалоговойОтчетности > ТемпРостаДоходовНалоговойОтчетности Тогда
		ЗнакСравнения = ">";
		ДанныеЗаполненияМакета.Вставить("ЕстьОснование", Истина);
		ПроверитьДанныеБухУчета = Истина;
		РезультатыПроверки.Вставить("Критерий4","ЕстьОснование");		
	Иначе
		РезультатыПроверки.Вставить("Критерий4","НетОснования");
		Если ТемпРостаРасходовНалоговойОтчетности = ТемпРостаДоходовНалоговойОтчетности Тогда
			ЗнакСравнения = "=";
		Иначе
			ЗнакСравнения = "<";
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПериод = ПредставлениеПериода(НачалоГода(КонецПериода), КонецПериода, "ФП=Истина");
	ПредшествующийПериод = ПредставлениеПериода(НачалоПериода, КонецКвартала(Дата(Год(НачалоПериода), 
		МесяцКонцаПериода, 1)), "ФП=Истина");
	ДанныеЗаполненияМакета.Вставить("РасчетПоказателей", "Калькулятор_ТемпыРасходовОсновная");
	
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ТекущийПериод", ТекущийПериод);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ПредшествующийПериод", ПредшествующийПериод);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасходыНалоговойОтчетностиПредшествующегоПериода", 
		РасходыНалоговойОтчетностиПредшествующегоПериода);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ДоходыНалоговойОтчетностиПредшествующегоПериода", 
		ДоходыНалоговойОтчетностиПредшествующегоПериода);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасходыНалоговойОтчетностиТекущегоПериода", 
		РасходыНалоговойОтчетностиТекущегоПериода);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ДоходыНалоговойОтчетностиТекущегоПериода", 
		ДоходыНалоговойОтчетностиТекущегоПериода);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ТемпРостаРасходовНалоговойОтчетности", 
		ТемпРостаРасходовНалоговойОтчетности);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ТемпРостаДоходовНалоговойОтчетности", 
		ТемпРостаДоходовНалоговойОтчетности);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СравнениеПоказателей", 
		"РезультатСравненияТемпыРостаРасходовОсновной");
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ЗнакСравнения", ЗнакСравнения);
	
	Если НЕ ПроверитьДанныеБухУчета Тогда
		ЗаполнитьМакетОтчетаЕстьРезультат(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, 
			ДанныеЗаполненияМакетаРасчетПоказателей);
		Возврат;
	КонецЕсли;
	
	ДанныеБухУчета = ПолучитьДанныеТемповРостаБухгалтерскогоУчета(Организация, НачалоПериода, КонецПериода);
	ДоходыБухгалтерскойОтчетностиПредшествующегоПериода = ДанныеБухУчета[0].Выгрузить().Итог("Сумма") - 
		ДанныеБухУчета[2].Выгрузить().Итог("Сумма");
	ДоходыБухгалтерскойОтчетностиТекущегоПериода = ДанныеБухУчета[1].Выгрузить().Итог("Сумма") - 
		ДанныеБухУчета[3].Выгрузить().Итог("Сумма");
	РасходыБухгалтерскойОтчетностиПредшествующегоПериода = ДанныеБухУчета[4].Выгрузить().Итог("Сумма");
	РасходыБухгалтерскойОтчетностиТекущегоПериода = ДанныеБухУчета[5].Выгрузить().Итог("Сумма");
	
	Если РасходыБухгалтерскойОтчетностиПредшествующегоПериода = 0
		ИЛИ ДоходыБухгалтерскойОтчетностиПредшествующегоПериода = 0 Тогда
		ЗаполнитьМакетОтчетаЕстьРезультат(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, 
			ДанныеЗаполненияМакетаРасчетПоказателей);
		Возврат;
	КонецЕсли;
	
	ТемпРостаРасходовБухгалтерскойОтчетности = Окр(100 * (РасходыБухгалтерскойОтчетностиТекущегоПериода/
		РасходыБухгалтерскойОтчетностиПредшествующегоПериода) - 100, 1, 1);
	ТемпРостаДоходовБухгалтерскойОтчетности = Окр(100 * (ДоходыБухгалтерскойОтчетностиТекущегоПериода/
		ДоходыБухгалтерскойОтчетностиПредшествующегоПериода) - 100, 1, 1);
	
	Если ТемпРостаРасходовБухгалтерскойОтчетности <= ТемпРостаДоходовБухгалтерскойОтчетности Тогда
		ЗаполнитьМакетОтчетаЕстьРезультат(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, 
			ДанныеЗаполненияМакетаРасчетПоказателей);
		Возврат;
	КонецЕсли;
	
	КоэффициентРостаПоНалоговойОтчетности = Окр(ТемпРостаРасходовНалоговойОтчетности/
		ТемпРостаДоходовНалоговойОтчетности, 1, 1);
	КоэффициентРостаПоБухгалтерскойОтчетности = Окр(ТемпРостаРасходовБухгалтерскойОтчетности/
		ТемпРостаДоходовБухгалтерскойОтчетности, 1, 1);
	
	Если КоэффициентРостаПоНалоговойОтчетности <= КоэффициентРостаПоБухгалтерскойОтчетности Тогда
		ЗаполнитьМакетОтчетаЕстьРезультат(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, 
			ДанныеЗаполненияМакетаРасчетПоказателей);
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполненияМакета.Вставить("ЕстьРасшифровкаПоказателей", Истина);
	
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасчетПоказателей", "Калькулятор_ТемпыРасходовДополнительная");
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СравнениеПоказателейДополнительный", 
		"РезультатСравненияТемпыРостаРасходовДополнительный");
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ДоходыБухгалтерскойОтчетностиТекущегоПериода", 
		ДоходыБухгалтерскойОтчетностиТекущегоПериода);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ДоходыБухгалтерскойОтчетностиПредшествующегоПериода", 
		ДоходыБухгалтерскойОтчетностиПредшествующегоПериода);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасходыБухгалтерскойОтчетностиПредшествующегоПериода", 
		РасходыБухгалтерскойОтчетностиПредшествующегоПериода);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасходыБухгалтерскойОтчетностиТекущегоПериода", 
		РасходыБухгалтерскойОтчетностиТекущегоПериода);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("КоэффициентРостаПоНалоговойОтчетности", 
		КоэффициентРостаПоНалоговойОтчетности);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("КоэффициентРостаПоБухгалтерскойОтчетности", 
		КоэффициентРостаПоБухгалтерскойОтчетности);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ТемпРостаРасходовБухгалтерскойОтчетности", 
		ТемпРостаРасходовБухгалтерскойОтчетности);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ТемпРостаДоходовБухгалтерскойОтчетности", 
		ТемпРостаДоходовБухгалтерскойОтчетности);
	
	ЗаполнитьМакетОтчетаЕстьРезультат(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, 
		ДанныеЗаполненияМакетаРасчетПоказателей);
	ЗаполнитьМакетОтчетаРасшифровкойТемпыРостаРасходов(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		ДанныеЗаполненияМакетаРасчетПоказателей);
	
КонецПроцедуры

Функция ПроверитьСистемуНалогообложенияКритерияТемпыРостаРасходов(ДанныеУчетнойПолитики, ПараметрыОтчета,
		ДанныеЗаполненияМакета, РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, СистемаНалогообложенияПроверена)
	
	Организация = ПараметрыОтчета.Организация;
	ПериодыОтчета = Новый Структура("НачалоПериода, КонецПериода", ПараметрыОтчета.НачалоПериода, 
		ПараметрыОтчета.КонецПериода);
	КоличествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество() - 1;
	
	Если НЕ СистемаНалогообложенияПроверена Тогда
		СистемаНалогообложенияПроверена = Истина;
		НомерЗаписи = КоличествоЗаписейУчетнойПолитики;
	Иначе
		НомерЗаписи = КоличествоЗаписейУчетнойПолитики - 1;
	КонецЕсли;
	
	Если КоличествоЗаписейУчетнойПолитики > 0 Тогда
		
		ТекущаяУчетнаяПолитика = ДанныеУчетнойПолитики[НомерЗаписи];
		ПредыдущийГод = Формат(Год(ПараметрыОтчета.КонецПериода) - 1, "ЧГ=");
		
		ЭтоОСН = Ложь;
		Если ТекущаяУчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			ЭтоОСН = Истина;
			Если ТекущаяУчетнаяПолитика.ПлательщикЕНВД Тогда
				ЭтоОСН = НЕ ВыручкаТолькоЕНВД(Организация, ПериодыОтчета);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЭтоОСН Тогда
			Если НомерЗаписи = КоличествоЗаписейУчетнойПолитики Тогда
				ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяТемпыРостаРасходовНеОСН");
				ДанныеЗаполненияМакета.Вставить("ПредыдущийПериод", Строка(ПредыдущийГод) + НСтр("ru=' г.'") );
			Иначе
				ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяТемпыРостаРасходовНеОСНПрошлогоГода");
				ДанныеЗаполненияМакета.Вставить("ПредыдущийПериод", Строка(ПредыдущийГод) + НСтр("ru=' г.'") );
			КонецЕсли;
			ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
				ДанныеЗаполненияМакета);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьНаличиеНулевыхЗначенийПоказателейКритерияТемповРостаРасходов(ДанныеРегламентированныхОтчетов, 
		НачалоПериода)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГодПериода", Год(НачалоПериода));
	Запрос.УстановитьПараметр("ДанныеРегламентированныхОтчетов", ДанныеРегламентированныхОтчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеРегламентированныхОтчетов.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ДанныеРегламентированныхОтчетов.ИсточникОтчета КАК ИсточникОтчета,
	|	ДанныеРегламентированныхОтчетов.ДатаОтчета КАК ДатаОтчета,
	|	ДанныеРегламентированныхОтчетов.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ДанныеРегламентированныхОтчетов.Показатель КАК Показатель,
	|	ДанныеРегламентированныхОтчетов.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ДанныеРегламентированныхОтчетов
	|ИЗ
	|	&ДанныеРегламентированныхОтчетов КАК ДанныеРегламентированныхОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегламентированныхОтчетов.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ДанныеРегламентированныхОтчетов.ИсточникОтчета КАК ИсточникОтчета,
	|	ДанныеРегламентированныхОтчетов.ДатаОтчета КАК ДатаОтчета,
	|	ДанныеРегламентированныхОтчетов.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ДанныеРегламентированныхОтчетов.Показатель КАК Показатель,
	|	ЕСТЬNULL(ДанныеРегламентированныхОтчетов.ЗначениеПоказателя, 0) КАК ЗначениеСуммы
	|ИЗ
	|	ДанныеРегламентированныхОтчетов КАК ДанныеРегламентированныхОтчетов
	|ГДЕ
	|	ГОД(ДанныеРегламентированныхОтчетов.ДатаОтчета) = &ГодПериода
	|	И ДанныеРегламентированныхОтчетов.ЗначениеПоказателя = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеТемповРостаБухгалтерскогоУчета(Организация, НачалоПериода, КонецПериода)
	
	МесяцКонцаПериода = Месяц(КонецПериода);
	НачалоТекущегоПериода = НачалоГода(КонецПериода);
	КонецТекущегоПериода = КонецПериода;
	НачалоПредшествующегоПериода = НачалоПериода;
	КонецПредшествующегоПериода = КонецКвартала(Дата(Год(НачалоПериода), МесяцКонцаПериода, 1));
	
	СчетКт_2110 = ПланыСчетов.Хозрасчетный.Выручка;
	
	СчетДт_2110 = Новый Массив;
	СчетДт_2110.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	СчетДт_2110.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	СчетДт_2110.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	
	СчетДт_2120 = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
	СчетДт_2210 = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу;
	СчетДт_2220 = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоТекущегоПериода", НачалоТекущегоПериода);
	Запрос.УстановитьПараметр("КонецТекущегоПериода", КонецТекущегоПериода);
	Запрос.УстановитьПараметр("НачалоПредшествующегоПериода", НачалоПредшествующегоПериода);
	Запрос.УстановитьПараметр("КонецПредшествующегоПериода", КонецПредшествующегоПериода);
	Запрос.УстановитьПараметр("СчетКт_2110", СчетКт_2110);
	Запрос.УстановитьПараметр("СчетДт_2110", СчетДт_2110);
	Запрос.УстановитьПараметр("СчетДт_2120", СчетДт_2120);
	Запрос.УстановитьПараметр("СчетДт_2210", СчетДт_2210);
	Запрос.УстановитьПараметр("СчетДт_2220", СчетДт_2220);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПредшествующегоПериода, &КонецПредшествующегоПериода, , 
	|		Счет В ИЕРАРХИИ (&СчетКт_2110), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоТекущегоПериода, &КонецТекущегоПериода, , 
	|		Счет В ИЕРАРХИИ (&СчетКт_2110), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПредшествующегоПериода,
	|			&КонецПредшествующегоПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СчетДт_2110),
	|			,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоТекущегоПериода,
	|			&КонецТекущегоПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СчетДт_2110),
	|			,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПредшествующегоПериода,
	|			&КонецПредшествующегоПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СчетДт_2120)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетДт_2210)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетДт_2220),
	|			,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоТекущегоПериода,
	|			&КонецТекущегоПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СчетДт_2120)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетДт_2210)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетДт_2220),
	|			,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ЗаполнитьМакетОтчетаРасшифровкойТемпыРостаРасходов(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		ДанныеЗаполненияМакетаРасчетПоказателей)
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	
	ОбластьРасчетПоказателей = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакетаРасчетПоказателей.РасчетПоказателей);
	ОбластьСравнениеПоказателей = ОбластьРасчетПоказателей.Область(
		ДанныеЗаполненияМакетаРасчетПоказателей.СравнениеПоказателейДополнительный);
	
	ОбластьРасчетПоказателейПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакетаРасчетПоказателей.РасчетПоказателей);
	
	ОбластьОтступ_3 = МакетОтчета.ПолучитьОбласть("Отступ_3");
	ОбластьОтступ_5 = МакетОтчета.ПолучитьОбласть("Отступ_5");
	
	ЦветФонаНетОснований = Новый Цвет(240, 255, 240);
	ЦветФонаЕстьОснования = Новый Цвет(255, 240, 245);
	
	ОбластьСравнениеПоказателей.ЦветФона = ЦветФонаЕстьОснования;
	
	ОбластьРасчетПоказателей.Параметры.Заполнить(ДанныеЗаполненияМакетаРасчетПоказателей);
	ОбластьРасчетПоказателейПФ.Параметры.Заполнить(ДанныеЗаполненияМакетаРасчетПоказателей);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5, 2);
	
	РезультатПроверкиКритериев.Вывести(ОбластьРасчетПоказателей, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьРасчетПоказателейПФ, 2);
	
	РезультатПроверкиКритериев.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРезультатаСреднемесячныйУровеньЗарплаты

Процедура СреднемесячныйУровеньЗарплаты(ПараметрыОтчета, ДанныеУчетнойПолитики, СведенияПредельныхЗначений, 
		РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, РезультатыПроверки)
	
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ПараметрыОтчета.НачалоПериода);
	КонецПериода = КонецМесяца(ПараметрыОтчета.КонецПериода);
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	Подробнее = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/nalprov#content:26721:1:3");
	
	#Область ПроверкаНетДанныхНеПроверяется
	ДанныеЗаполненияМакета = Новый Структура();
	ДанныеЗаполненияМакета.Вставить("НомерКритерия", "5.");
	ДанныеЗаполненияМакета.Вставить("ОбластьТекстаНаименованияКритерия", "СреднемесячнаяЗарплата");
	ДанныеЗаполненияМакета.Вставить("ОснованиеПроверки", "ОснованиеПроверки_СреднемесячныйУровеньЗарплаты");
	ДанныеЗаполненияМакета.Вставить("Подробнее_5", Подробнее);
	
	Если ДатаРегистрации > КонецПериода Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетДеятельности");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	Если Год(ДатаРегистрации) = Год(НачалоПериода) Тогда
		НачалоПериода = НачалоКвартала(ДатаРегистрации);
	КонецЕсли;
	
	КоличествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество() - 1;
	
	Если КоличествоЗаписейУчетнойПолитики < 0 Тогда
		ДанныеЗаполненияМакета.Вставить("УчетнаяПолитика", "УчетнаяПолитика");
		ДанныеЗаполненияМакета.Вставить("Период", Формат(Год(КонецПериода), "ЧГ="));
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетУчетнойПолитики");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ТекущаяУчетнаяПолитика = ДанныеУчетнойПолитики[КоличествоЗаписейУчетнойПолитики];
	
	Если НЕ СведенияПредельныхЗначений.Свойство("ЕстьОКВЭД") Тогда
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НеПроверяетсяНалоговаяНагрузкаНетОКВЭД");
		ДанныеЗаполненияМакета.Вставить("КодОКВЭД", "КодОКВЭД");
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	Адрес = ПолучитьАдресВВидеСоответствия(Организация);
	
	Если Адрес.Получить("Заполнен") = Ложь Тогда
		
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НеПроверяетсяСреднемесячныйУровеньЗарплатыНетАдреса");
		ДанныеЗаполненияМакета.Вставить("Адрес", "Адрес");
		
		ЭтоЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
		Если ЭтоЮридическоеЛицо Тогда
			ДанныеЗаполненияМакета.Вставить("ЮридическийАдрес", "заполнить юридический адрес.");
		Иначе
			ДанныеЗаполненияМакета.Вставить("ЮридическийАдрес", "заполнить адрес по прописке.");
		КонецЕсли;
			
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
		
	ИначеЕсли Адрес.Получить("КодРегиона") = "" Тогда
		
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НеПроверяетсяСреднемесячныйУровеньЗарплатыНетАдреса");
		ДанныеЗаполненияМакета.Вставить("Адрес", "Адрес");
		
		ЭтоЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
		ДанныеЗаполненияМакета.Вставить("ЮридическийАдрес", "выбрать регион из КЛАДР (ФИАС).");
			
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
		
	КонецЕсли;
	
	КодРегиона = Адрес["КодРегиона"];
	МакетСреднемесячнойЗарплаты = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПредельныеЗначенияЗарплаты2013");
	ГодПровреки = Формат(Число(Год(НачалоПериода)), "ЧГ=");
	ОбластьГода = МакетСреднемесячнойЗарплаты.Область("Год");
	
	ОбластьКолонкиГода = МакетСреднемесячнойЗарплаты.НайтиТекст(Строка(ГодПровреки), , ОбластьГода, Ложь);
	Если НЕ ЗначениеЗаполнено(ОбластьКолонкиГода) И Число(ГодПровреки) < 2013 Тогда
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НеПроверяетсяСреднемесячныйУровеньЗарплатыНетЗарплаты");
		ДанныеЗаполненияМакета.Вставить("Период", ГодПровреки);
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;

	ОбластьРегион = МакетСреднемесячнойЗарплаты.Области.Найти("Регион_" + КодРегиона);
	Если ОбластьРегион <> Неопределено Тогда
		НомерКолонкиРегиона = ОбластьРегион.Право;
	Иначе
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НеПроверяетсяСреднемесячныйУровеньЗарплатыНетЗарплаты");
		ДанныеЗаполненияМакета.Вставить("Период", ГодПровреки);
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПредельноеЗначениеСреднейЗарплаты = ПолучитьПредельноеЗначениеСреднейЗарплаты(Организация, МакетСреднемесячнойЗарплаты, 
		НомерКолонкиРегиона);
	
	Если ПредельноеЗначениеСреднейЗарплаты < 0 Тогда
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НеПроверяетсяСреднемесячныйУровеньЗарплатыНетЗарплаты");
		ДанныеЗаполненияМакета.Вставить("Период", ГодПровреки);
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ПериодыОтчета = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ПоказателиОтчетов = РегламентированнаяОтчетность.ПоказателиОценкиРискаВыезднойНалоговойПроверки(
		Организация, НачалоГода(НачалоПериода), КонецПериода);
	ОтчетыНетДанных = НовыйОтчетыНетДанных();
	
	НаименованиеПоказателя = Новый Массив;
	НаименованиеПоказателя.Добавить("СреднесписочнаяЧисленность");
	НаименованиеПоказателя.Добавить("СуммаВыплатФизическимЛицам");
	
	ДанныеРегламентированногоОтчета = НовыйДанныеРегламентированногоОтчета();
	ИсточникОтчета = "РегламентированныйОтчет4ФСС";
	
	ПолучитьРегламентированныеОтчетыНарастающимПериодом(ПериодыОтчета, ИсточникОтчета, ПоказателиОтчетов, 
		НаименованиеПоказателя, ДанныеРегламентированногоОтчета, ОтчетыНетДанных);
	
	Если ОтчетыНетДанных.Количество() <> 0 Тогда
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НетДанныхСформироватьОтчеты");
		ДанныеЗаполненияМакета.Вставить("ОтчетыНетДанных", ОтчетыНетДанных);
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеРегламентированногоОтчета Цикл
		Если СтрокаДанных.Показатель = "СреднесписочнаяЧисленность" Тогда
			СреднесписочнаяЧисленность = СтрокаДанных.ЗначениеПоказателя;
			РасшифровкаСреднесписочнаяЧисленность = СтрокаДанных.РегламентированныйОтчет;
		Иначе
			СуммаНачисленныхВыплат = СтрокаДанных.ЗначениеПоказателя;
			РасшифровкаСуммаНачисленныхВыплат = СтрокаДанных.РегламентированныйОтчет;
		КонецЕсли;
	КонецЦикла;
	
	Если СреднесписочнаяЧисленность = 0 Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяСреднемесячныйУровеньЗарплатыНетСотрудников");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	КоличествоМесяцев = Месяц(КонецПериода);
	СредняяЗарплата = Окр(СуммаНачисленныхВыплат/КоличествоМесяцев/СреднесписочнаяЧисленность, 1, 1);
	
	Если СредняяЗарплата < ПредельноеЗначениеСреднейЗарплаты Тогда
		ЗнакСравнения = "<";
		ДанныеЗаполненияМакета.Вставить("ЕстьОснование", Истина);
		РезультатыПроверки.Вставить("Критерий5", "ЕстьОснование");
	Иначе
		РезультатыПроверки.Вставить("Критерий5", "НетОснования");
		Если СредняяЗарплата = ПредельноеЗначениеСреднейЗарплаты Тогда
			ЗнакСравнения = "=";
		Иначе
			ЗнакСравнения = ">";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполненияМакета.Вставить("РасчетПоказателей", "Калькулятор_СреднемесячныйУровеньЗарплаты");
	
	ДанныеЗаполненияМакетаРасчетПоказателей = Новый Структура;
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("КоличествоМесяцев", КоличествоМесяцев);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СредняяЗарплата", СредняяЗарплата);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ПредельноеЗначениеСреднейЗарплаты", 
		ПредельноеЗначениеСреднейЗарплаты);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СреднесписочнаяЧисленность", СреднесписочнаяЧисленность);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СуммаНачисленныхВыплат", СуммаНачисленныхВыплат);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СравнениеПоказателей", 
		"РезультатСравненияСреднемесячныйУровеньЗарплаты");
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасшифровкаСреднесписочнаяЧисленность", 
		РасшифровкаСреднесписочнаяЧисленность);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасшифровкаСуммаНачисленныхВыплат", 
		РасшифровкаСуммаНачисленныхВыплат);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ЗнакСравнения", ЗнакСравнения);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("Подробнее_5", Подробнее);
	
	ЗаполнитьМакетОтчетаЕстьРезультат(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, 
		ДанныеЗаполненияМакетаРасчетПоказателей);
	
КонецПроцедуры

Функция ПолучитьАдресВВидеСоответствия(Организация)
	
	ЭтоЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	Если ЭтоЮридическоеЛицо Тогда
		ОрганизацияСоответствия = Организация;
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	Иначе
		ОрганизацияСоответствия = Организация.ИндивидуальныйПредприниматель;
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	КонецЕсли;
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(ВидКонтактнойИнформации);
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ОрганизацияСоответствия);
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, , ВидыКИ);
	ЗначениеКонтактнойИнформации = "";
	
	АдресЗаполнен = Ложь;
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		ЗначениеКонтактнойИнформации = КонтактнаяИнформация[0].ЗначенияПолей;
		АдресЗаполнен = Истина;
	КонецЕсли;
	
	Адрес = Новый Соответствие;
	Адрес.Вставить("КодРегиона");
	РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(ЗначениеКонтактнойИнформации, Адрес);
	Адрес.Вставить("Заполнен", АдресЗаполнен);
	
	Возврат Адрес;
	
КонецФункции

Функция ПолучитьПредельноеЗначениеСреднейЗарплаты(Организация, МакетСреднемесячнойЗарплаты, НомерКолонкиРегиона)
	
	КодОКВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОКВЭД");
	Группа_1 = Лев(КодОКВЭД, 2);
	Группа_2 = "";
	Группа_3 = "";
	ЕстьГруппа_3 = Истина;
	
	Если СтрДлина(КодОКВЭД) > 4 Тогда
		Группа_2 = Сред(КодОКВЭД, 4, 2);
	ИначеЕсли СтрДлина(КодОКВЭД) = 4 Тогда
		Группа_2 = Сред(КодОКВЭД, 4);
	КонецЕсли;
	
	Если СтрДлина(КодОКВЭД) > 7 Тогда
		Группа_3 = Сред(КодОКВЭД, 7, 2);
	ИначеЕсли СтрДлина(КодОКВЭД) = 7 Тогда
		Группа_3 = Сред(КодОКВЭД, 7);
	КонецЕсли;
	
	ПредельноеЗначениеСреднейЗарплаты=0;
	
	ОбластьПервойЧастиОКВЭД = МакетСреднемесячнойЗарплаты.Область("ПерваяЧастьОКВЭД");
	ОбластьВторойЧастиОКВЭД = МакетСреднемесячнойЗарплаты.Область("ВтораяЧастьОКВЭД");
	ОбластьВторойЧастиОКВЭД = МакетСреднемесячнойЗарплаты.Область("ТретьяЧастьОКВЭД");
	РезультатПоиска = МакетСреднемесячнойЗарплаты.НайтиТекст(Группа_1+" - общий", , ОбластьПервойЧастиОКВЭД,, Истина, Истина , Истина);
	Если не РезультатПоиска = Неопределено Тогда
		ЗначениеСреднейЗарплаты=СокрЛП(МакетСреднемесячнойЗарплаты.Область(РезультатПоиска.Верх, НомерКолонкиРегиона, 
			РезультатПоиска.Верх, НомерКолонкиРегиона).Текст);	
	КонецЕсли;
	РезультатПоиска = МакетСреднемесячнойЗарплаты.НайтиТекст(Группа_1, , ОбластьПервойЧастиОКВЭД,, Истина, Ложь, Истина);
	Если не РезультатПоиска = Неопределено Тогда
		ВтораяЧастьОКВЭД = СокрЛП(МакетСреднемесячнойЗарплаты.Область(РезультатПоиска.Верх, 2, 
		РезультатПоиска.Верх, 2).Текст);	
		Если не ЗначениеЗаполнено(ВтораяЧастьОКВЭД) Тогда
			ЗначениеСреднейЗарплатыТочноеСоответствие = СокрЛП(МакетСреднемесячнойЗарплаты.Область(РезультатПоиска.Верх, НомерКолонкиРегиона, 
			РезультатПоиска.Верх, НомерКолонкиРегиона).Текст);	
			Если ЗначениеЗаполнено(ЗначениеСреднейЗарплатыТочноеСоответствие) тогда
				ЗначениеСреднейЗарплаты=ЗначениеСреднейЗарплатыТочноеСоответствие;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Группа_2) Тогда
		РезультатПоискаВперед=МакетСреднемесячнойЗарплаты.НайтиТекст(Группа_1, , ОбластьПервойЧастиОКВЭД,, Истина, Истина, Истина);
		ОкончаниеОбласти = РезультатПоиска.Верх;
		сч = РезультатПоискаВперед.Верх;
	
		СредняяЗарплата1СимволСоответствиеВторойЧастиОКВЭД  = 0;
		СредняяЗарплатаТочноеСоответствиеВторойЧастиОКВЭД   = 0;
		СредняяЗарплата1СимволСоответствиеТретьейЧастиОКВЭД = 0;
		СредняяЗарплатаТочноеСоответствиеТретьейЧастиОКВЭД  = 0;
	
		Пока сч<=ОкончаниеОбласти цикл
			ВтораяЧастьОКВЭД = СокрЛП(МакетСреднемесячнойЗарплаты.Область(сч, 2, сч, 2).Текст);	
			ТретьяЧастьОКВЭД = СокрЛП(МакетСреднемесячнойЗарплаты.Область(сч, 3, сч, 3).Текст);
		
			Если не ЗначениеЗаполнено(Группа_3) Тогда			
				Если Группа_2 = ВтораяЧастьОКВЭД и Не ЗначениеЗаполнено(ТретьяЧастьОКВЭД) Тогда    
					СредняяЗарплатаТочноеСоответствиеВторойЧастиОКВЭД=СокрЛП(МакетСреднемесячнойЗарплаты.Область(сч, НомерКолонкиРегиона, сч, НомерКолонкиРегиона).Текст);
			 	ИначеЕсли Лев(Группа_2,1) = ВтораяЧастьОКВЭД и не ЗначениеЗаполнено(Группа_3) Тогда
					 СредняяЗарплата1СимволСоответствиеВторойЧастиОКВЭД=СокрЛП(МакетСреднемесячнойЗарплаты.Область(сч, НомерКолонкиРегиона, сч, НомерКолонкиРегиона).Текст);
				КонецЕсли;				
			Иначе				
				Если Группа_2 = ВтораяЧастьОКВЭД и Группа_3 = ТретьяЧастьОКВЭД Тогда
					СредняяЗарплатаТочноеСоответствиеТретьейЧастиОКВЭД=СокрЛП(МакетСреднемесячнойЗарплаты.Область(сч, НомерКолонкиРегиона, сч, НомерКолонкиРегиона).Текст);
				ИначеЕсли Группа_2 = ВтораяЧастьОКВЭД и Лев(Группа_3,1) = ТретьяЧастьОКВЭД Тогда 
					СредняяЗарплата1СимволСоответствиеТретьейЧастиОКВЭД=СокрЛП(МакетСреднемесячнойЗарплаты.Область(сч, НомерКолонкиРегиона, сч, НомерКолонкиРегиона).Текст);
				ИначеЕсли Группа_2 = ВтораяЧастьОКВЭД и не ЗначениеЗаполнено(ТретьяЧастьОКВЭД) Тогда	
					СредняяЗарплатаТочноеСоответствиеВторойЧастиОКВЭД=СокрЛП(МакетСреднемесячнойЗарплаты.Область(сч, НомерКолонкиРегиона, сч, НомерКолонкиРегиона).Текст);
				ИначеЕсли Лев(Группа_2,1) = ВтораяЧастьОКВЭД и не ЗначениеЗаполнено(ТретьяЧастьОКВЭД) Тогда	
					СредняяЗарплата1СимволСоответствиеВторойЧастиОКВЭД=СокрЛП(МакетСреднемесячнойЗарплаты.Область(сч, НомерКолонкиРегиона, сч, НомерКолонкиРегиона).Текст);
				КонецЕсли;
			КонецЕсли;
		 сч=сч+1;
		КонецЦикла;
		Если ЗначениеЗаполнено(СредняяЗарплатаТочноеСоответствиеТретьейЧастиОКВЭД) Тогда
			ЗначениеСреднейЗарплаты=СредняяЗарплатаТочноеСоответствиеТретьейЧастиОКВЭД;	
		ИначеЕсли ЗначениеЗаполнено(СредняяЗарплата1СимволСоответствиеТретьейЧастиОКВЭД) Тогда
			ЗначениеСреднейЗарплаты=СредняяЗарплата1СимволСоответствиеТретьейЧастиОКВЭД;
		ИначеЕсли ЗначениеЗаполнено(СредняяЗарплатаТочноеСоответствиеВторойЧастиОКВЭД) Тогда
			ЗначениеСреднейЗарплаты=СредняяЗарплатаТочноеСоответствиеВторойЧастиОКВЭД;
		ИначеЕсли ЗначениеЗаполнено(СредняяЗарплата1СимволСоответствиеВторойЧастиОКВЭД) Тогда	
			ЗначениеСреднейЗарплаты=СредняяЗарплата1СимволСоответствиеВторойЧастиОКВЭД;
		КонецЕсли;		
	КонецЕсли;
	ПредельноеЗначениеСреднейЗарплаты = ?(ЗначениеЗаполнено(ЗначениеСреднейЗарплаты), Число(ЗначениеСреднейЗарплаты), 0);
	
	Если не ЗначениеЗаполнено(ПредельноеЗначениеСреднейЗарплаты) Тогда
		ПредельноеЗначениеСреднейЗарплаты=-1;
	КонецЕсли;	
	Возврат ПредельноеЗначениеСреднейЗарплаты;	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРезультатаПриближениеКПредельнымЗначениямСпецРежима

Процедура ПриближениеКПредельнымЗначениямСпецРежима(ПараметрыОтчета, ДанныеУчетнойПолитики, РезультатПроверкиКритериев,
		РезультатПроверкиКритериевПФ, РезультатыПроверки)
	
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(Дата(Год(ПараметрыОтчета.НачалоПериода) - 2, 1, 1));
	КонецПериода = КонецМесяца(ПараметрыОтчета.КонецПериода);
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	Подробнее = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/nalprov#content:26721:1:6");
	СпециальныеРежимы = Новый Структура;
	ЭтоЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	#Область ПроверкаНетДанныхНеПроверяется
	
	ДанныеЗаполненияМакета = Новый Структура();
	ДанныеЗаполненияМакета.Вставить("НомерКритерия", "6.");
	ДанныеЗаполненияМакета.Вставить("ОбластьТекстаНаименованияКритерия", "ПриближениеКПередельнымЗначениямПоСпецРежиму");
	ДанныеЗаполненияМакета.Вставить("ОснованиеПроверки", "ОснованиеПроверки_ПриближениеКПредельнымЗначениямСпецРежима");
	ДанныеЗаполненияМакета.Вставить("Подробнее_6", Подробнее);
	
	СпецРежимПроверяется = ПроверитьПримененияСпецРежима(ДанныеУчетнойПолитики, ДанныеЗаполненияМакета, 
		РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, СпециальныеРежимы, КонецПериода);
	
	Если НЕ СпецРежимПроверяется Тогда
		Возврат;
	КонецЕсли;
	
	Если КонецПериода < ДатаРегистрации Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетДеятельности");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ГодРегистрации = Год(ДатаРегистрации);
	
	Если ГодРегистрации <= Год(КонецПериода) 
		И ГодРегистрации >= Год(НачалоПериода) Тогда
		
		НачалоПериода = НачалоГода(ДатаРегистрации);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ПериодыОтчета = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ПоказателиОтчетов = РегламентированнаяОтчетность.ПоказателиОценкиРискаВыезднойНалоговойПроверки(
		Организация, НачалоГода(НачалоПериода), КонецПериода);
	ДанныеСреднеСписочнойЧисленности = НовыйДанныеСреднеСписоченойЧисленности();
	ДанныеДолиУчастияДругихОрганизация = НовыйДанныеГодовыхПоказателей();
	ДанныеОстаточнойСтоимостиОСИНМА = НовыйДанныеГодовыхПоказателей();
	ДанныеПолученныхДоходов = НовыйДанныеПолученныхДоходов();
	КоличествоПредельныхЗначенийПоГодам = 0;
	
	КоличествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество();

	Для НомерСтрокиУчетнойПолитики = 0 По КоличествоЗаписейУчетнойПолитики - 1 Цикл
		
		ТекущаяСтрокаУчетнойПолитики = ДанныеУчетнойПолитики[НомерСтрокиУчетнойПолитики];
		КоличествоПредельныхЗначенийПоСреднеСписочнойЧисленности = 0;
		КоличествоПредельныхЗначенийПоДолиУчастия = 0;
		КоличествоПредельныхЗначенийПоОСИНМА = 0;
		КоличествоПредельныхЗначенийПолученныхДоходов = 0;
		
		Если ТекущаяСтрокаУчетнойПолитики.Период < НачалоПериода Тогда
			Дата = КонецГода(ТекущаяСтрокаУчетнойПолитики.Период);
			ЗаполнитьДанныеГодовыхПоказателей(ДанныеДолиУчастияДругихОрганизация, Дата);
			ЗаполнитьДанныеГодовыхПоказателей(ДанныеОстаточнойСтоимостиОСИНМА, Дата);
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрокаУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			
			ПериодыОтчета = Новый Структура;
			Если Год(ТекущаяСтрокаУчетнойПолитики.Период) = Год(НачалоПериода) Тогда
				ПериодыОтчета.Вставить("НачалоПериода", НачалоПериода);
			Иначе
				ПериодыОтчета.Вставить("НачалоПериода", ТекущаяСтрокаУчетнойПолитики.Период);
			КонецЕсли;
			
			Если НомерСтрокиУчетнойПолитики = КоличествоЗаписейУчетнойПолитики - 1 Тогда
				ПериодыОтчета.Вставить("КонецПериода", КонецПериода);
			Иначе
				ПериодыОтчета.Вставить("КонецПериода", КонецГода(ТекущаяСтрокаУчетнойПолитики.Период));
			КонецЕсли;
			
			ИсточникОтчета = "РегламентированныйОтчет4ФСС";
			НаименованиеПоказателя = Новый Массив;
			НаименованиеПоказателя.Добавить("СреднесписочнаяЧисленность");
			
			ПолучитьДанныеСреднесписочнойЧисленности(
				ПериодыОтчета, ИсточникОтчета, ПоказателиОтчетов, 
				НаименованиеПоказателя, ДанныеСреднеСписочнойЧисленности,
				КоличествоПредельныхЗначенийПоСреднеСписочнойЧисленности, ДанныеЗаполненияМакета);
				
			Если ЭтоЮридическоеЛицо Тогда
			
				ПолучитьДанныеДолиУчастияДругихОрганизация(
					Организация, ДанныеДолиУчастияДругихОрганизация, ПериодыОтчета,
					КоличествоПредельныхЗначенийПоДолиУчастия);
			
				ПолучитьДанныеОстаточнойСтоимостиОСИНМА(
					Организация, ДанныеОстаточнойСтоимостиОСИНМА, ПериодыОтчета,
					КоличествоПредельныхЗначенийПоОСИНМА);
						
			КонецЕсли;
			
			ПолучитьДанныеДоходыУСН(
				ПериодыОтчета, Организация, ДанныеПолученныхДоходов, ПоказателиОтчетов, 
				КоличествоПредельныхЗначенийПолученныхДоходов, ДанныеЗаполненияМакета);
			
		ИначеЕсли СпециальныеРежимы.Свойство("ПрименяетсяУСН") Тогда
			Если НомерСтрокиУчетнойПолитики = КоличествоЗаписейУчетнойПолитики - 1 Тогда
				Дата = КонецПериода;
			Иначе
				Дата = КонецГода(ТекущаяСтрокаУчетнойПолитики.Период);
			КонецЕсли;
			
			ЗаполнитьДанныеГодовыхПоказателей(ДанныеДолиУчастияДругихОрганизация, Дата);
			ЗаполнитьДанныеГодовыхПоказателей(ДанныеОстаточнойСтоимостиОСИНМА, Дата);
		КонецЕсли;
		
		Если КоличествоПредельныхЗначенийПоСреднеСписочнойЧисленности > 0 
			ИЛИ КоличествоПредельныхЗначенийПоДолиУчастия > 0
			ИЛИ КоличествоПредельныхЗначенийПоОСИНМА > 0
			ИЛИ КоличествоПредельныхЗначенийПолученныхДоходов > 0 Тогда
			КоличествоПредельныхЗначенийПоГодам = КоличествоПредельныхЗначенийПоГодам + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СпециальныеРежимы.Свойство("ПрименяетсяУСН") Тогда
		
		ДанныеЗаполненияМакета.Вставить("ЗаголовокСпецРежимУСН", "ПриближениеКПредельнымЗначениямСпецРежимаУСН");
		
		РасшифровкаДолиУчастияДругихОрганизаций = ЗаполнитьРасшифровкуГодовыхПоказателей(ДанныеДолиУчастияДругихОрганизация);
		РасшифровкаОстаточнойСтоимсотиОСИНМА = ЗаполнитьРасшифровкуГодовыхПоказателей(ДанныеОстаточнойСтоимостиОСИНМА);
		
		РасшифровкаСреднеСписочнойЧисленности = НовыйРасшифровкаСреднеСписоченойЧисленности();
		ЗаполнитьРасшифровкуСреднесписочнойЧисленности(ДанныеСреднеСписочнойЧисленности, 
				РасшифровкаСреднеСписочнойЧисленности);
		
		Если КоличествоПредельныхЗначенийПоГодам > 1 Тогда
			ДанныеЗаполненияМакета.Вставить("ЕстьОснование", Истина);
			РезультатыПроверки.Вставить("Критерий6", "ЕстьОснование");
		Иначе
			РезультатыПроверки.Вставить("Критерий6", "НетОснования");
		КонецЕсли;
		
		ЗаполнитьМакетОтчетаРасшифровкамиПриближенийШапка(РезультатПроверкиКритериев,
			РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета);
		
		ДанныеЗаполненияМакета.Вставить("РасчетПоказателей");
		
		Если ЭтоЮридическоеЛицо Тогда
		
			ДанныеЗаполненияМакета.РасчетПоказателей = "Таблица_ПриближениеПоДолиУчастияДругихОрганизаций";
			ЗаполнитьМакетОтчетаРасшифровкамиПриближенийПоДолиУчастия(РезультатПроверкиКритериев, 
				РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, РасшифровкаДолиУчастияДругихОрганизаций);
				
			ДанныеЗаполненияМакета.РасчетПоказателей = "Таблица_ПриближениеПоОстаточнойСтоимостиОСИНМА";
			ЗаполнитьМакетОтчетаРасшифровкамиПриближенийПоОстаточнойСтоимости(РезультатПроверкиКритериев, 
				РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, РасшифровкаОстаточнойСтоимсотиОСИНМА);
				
		КонецЕсли;
		
		ДанныеЗаполненияМакета.РасчетПоказателей = "Таблица_ПриближениеПоСреднесписочнойЧисленностиСотрудников";
		ЗаполнитьМакетОтчетаРасшифровкамиПриближенийПоСреднесписочнойЧисленности(РезультатПроверкиКритериев, 
			РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, РасшифровкаСреднеСписочнойЧисленности);
				
		Если СпециальныеРежимы.Свойство("ПрименяетсяЕНВД") Тогда
			ДанныеЗаполненияМакета.Вставить("ПрименяетсяЕНВД", "Таблица_ПриближениеПоЕНВД");
		КонецЕсли;
		
		ДанныеЗаполненияМакета.РасчетПоказателей = "Таблица_ПриближениеПоДоходамУСН";
		ЗаполнитьМакетОтчетаРасшифровкамиПриближенийПоПолученнымДоходам(РезультатПроверкиКритериев, 
			РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, ДанныеПолученныхДоходов);
		
	ИначеЕсли СпециальныеРежимы.Свойство("ПрименяетсяЕНВД") Тогда
		ДанныеЗаполненияМакета.Вставить("НетДанных", "Таблица_ПриближениеПоЕНВД");
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
				ДанныеЗаполненияМакета);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПримененияСпецРежима(ДанныеУчетнойПолитики, ДанныеЗаполненияМакета, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПФ, СпециальныеРежимы, КонецПериода)
	
	КоличествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество();
	
	Если КоличествоЗаписейУчетнойПолитики = 0 Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетУчетнойПолитики");
		ДанныеЗаполненияМакета.Вставить("УчетнаяПолитика", "УчетнаяПолитика");
		ДанныеЗаполненияМакета.Вставить("Период", Формат(Год(КонецПериода), "ЧГ="));
	КонецЕсли;
	
	Для НомерСтрокиУчетнойПолитики = 0 По КоличествоЗаписейУчетнойПолитики - 1 Цикл
		
		СистемаНалогообложенияПрименяется = Ложь;
		ТекущаяСтрокаУчетнойПолитики = ДанныеУчетнойПолитики[НомерСтрокиУчетнойПолитики];
		
		Если ТекущаяСтрокаУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная 
			ИЛИ ТекущаяСтрокаУчетнойПолитики.ПлательщикЕНВД Тогда
			
			СистемаНалогообложенияПрименяется = Истина;
			Если НЕ СпециальныеРежимы.Свойство("ПрименяетсяЕНВД") Тогда
				Если ТекущаяСтрокаУчетнойПолитики.ПлательщикЕНВД Тогда
					СпециальныеРежимы.Вставить("ПрименяетсяЕНВД");
				КонецЕсли;
			КонецЕсли;
			Если НЕ СпециальныеРежимы.Свойство("ПрименяетсяУСН") Тогда
				Если ТекущаяСтрокаУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
					СпециальныеРежимы.Вставить("ПрименяетсяУСН");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НомерСтрокиУчетнойПолитики = КоличествоЗаписейУчетнойПолитики - 1 
			И НЕ СистемаНалогообложенияПрименяется Тогда
			
			Если ТекущаяСтрокаУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок
				И НЕ ТекущаяСтрокаУчетнойПолитики.ПлательщикЕНВД Тогда // ПСН
				
				Если ДанныеЗаполненияМакета.Свойство("НеПроверяется") Тогда
					ДанныеЗаполненияМакета.НеПроверяется = 
					"НеПроверяетсяПриближениеКПредельнымЗначениямСпецРежимаПСН"
				Иначе
					ДанныеЗаполненияМакета.Вставить("НеПроверяется", 
					"НеПроверяетсяПриближениеКПредельнымЗначениямСпецРежимаПСН");
				КонецЕсли;
				
			Иначе
			
				Если ДанныеЗаполненияМакета.Свойство("НеПроверяется") Тогда
					ДанныеЗаполненияМакета.НеПроверяется = 
					"НеПроверяетсяПриближениеКПредельнымЗначениямСпецРежимаПроверяемыйПериод"
				Иначе
					ДанныеЗаполненияМакета.Вставить("НеПроверяется", 
					"НеПроверяетсяПриближениеКПредельнымЗначениямСпецРежимаПроверяемыйПериод");
				КонецЕсли;
				
			КонецЕсли;
				
		ИначеЕсли НЕ СистемаНалогообложенияПрименяется Тогда
			
			ПредыдущийГод = Формат(Год(КонецПериода) - 1, "ЧГ=");
			ДанныеЗаполненияМакета.Вставить("ПредыдущийПериод", Строка(ПредыдущийГод) + НСтр("ru=' г.'") );
			
			Если ДанныеЗаполненияМакета.Свойство("НеПроверяется") Тогда
				ДанныеЗаполненияМакета.НеПроверяется = 
				"НеПроверяетсяПриближениеКПредельнымЗначениямСпецРежимаПрошлыеПериоды"
			Иначе
				ДанныеЗаполненияМакета.Вставить("НеПроверяется", 
				"НеПроверяетсяПриближениеКПредельнымЗначениямСпецРежимаПрошлыеПериоды");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеЗаполненияМакета.Свойство("НеПроверяется") Тогда
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
				ДанныеЗаполненияМакета);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НовыйДанныеСреднеСписоченойЧисленности()
	
	ТипДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты());
	ТипСтруктура = Новый ОписаниеТипов("Структура");
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ДанныеСреднесписочнойЧисленности = Новый ТаблицаЗначений;
	ДанныеСреднесписочнойЧисленности.Колонки.Добавить("Дата", ТипДата);
	ДанныеСреднесписочнойЧисленности.Колонки.Добавить("ЗначениеПоказателя");
	ДанныеСреднесписочнойЧисленности.Колонки.Добавить("РасшифровкаЗначения");
	ДанныеСреднесписочнойЧисленности.Колонки.Добавить("ПредельноеЗначение", ТипБулево);
	
	Возврат ДанныеСреднесписочнойЧисленности;
	
КонецФункции

Функция НовыйДанныеГодовыхПоказателей()
	
	ТипДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты());
	
	ДанныеДолиУчастияДругихОрганизация = Новый ТаблицаЗначений;
	ДанныеДолиУчастияДругихОрганизация.Колонки.Добавить("Дата", ТипДата);
	ДанныеДолиУчастияДругихОрганизация.Колонки.Добавить("ЗначениеПоказателя");
	ДанныеДолиУчастияДругихОрганизация.Колонки.Добавить("ПредельноеЗначение");
	
	Возврат ДанныеДолиУчастияДругихОрганизация;
	
КонецФункции

Функция НовыйДанныеПолученныхДоходов()
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	ТипСтруктура = Новый ОписаниеТипов("Структура");
	
	ДанныеПолученныхДоходов = Новый ТаблицаЗначений;
	ДанныеПолученныхДоходов.Колонки.Добавить("Период", ТипСтрока);
	ДанныеПолученныхДоходов.Колонки.Добавить("ПериодГод", ТипСтрока);
	ДанныеПолученныхДоходов.Колонки.Добавить("ЗнакСравнения", ТипСтрока);
	ДанныеПолученныхДоходов.Колонки.Добавить("РасшифровкаЗначения", ТипСтруктура);
	ДанныеПолученныхДоходов.Колонки.Добавить("ПредельноеЗначение");
	
	Возврат ДанныеПолученныхДоходов;
	
КонецФункции

Процедура ПолучитьДанныеСреднесписочнойЧисленности(ПериодыОтчета, ИсточникОтчета, ПоказателиОтчетов,
		НаименованиеПоказателя, ДанныеСреднеСписочнойЧисленности, КоличествоПредельныхЗначенийПоСтроке,
		ДанныеЗаполненияМакета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("НаименованиеПоказателя", НаименованиеПоказателя);
	Запрос.УстановитьПараметр("ИсточникДанных", ПоказателиОтчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	&ИсточникДанных КАК ИсточникДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.ИсточникОтчета = &ИсточникОтчета
	|	И ИсточникДанных.Показатель В(&НаименованиеПоказателя)
	|	И ИсточникДанных.ДатаОтчета МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультата = РезультатЗапроса.Выбрать();
	
	НомерПервогоКвартала = Месяц(КонецКвартала(ПериодыОтчета.НачалоПериода))/3;
	НомерПоследнегоКвартала = Месяц(ПериодыОтчета.КонецПериода)/3;
	
	МассивКварталов = Новый Массив;
	Для НомерКвартала = НомерПервогоКвартала По НомерПоследнегоКвартала Цикл
		МассивКварталов.Добавить(НомерКвартала);
	КонецЦикла;
	
	Пока ВыборкаРезультата.Следующий() Цикл
		ПредельноеЗначение = Ложь;
		КварталОтчета = Месяц(ВыборкаРезультата.ДатаОтчета)/3;
		
		Если МассивКварталов.Найти(КварталОтчета) <> Неопределено Тогда
			ИндексКвартала = МассивКварталов.Найти(КварталОтчета);
			МассивКварталов.Удалить(ИндексКвартала);
		КонецЕсли;
		
		Если ВыборкаРезультата.ЗначениеПоказателя > 95 Тогда
			КоличествоПредельныхЗначенийПоСтроке = КоличествоПредельныхЗначенийПоСтроке + 1;
			ПредельноеЗначение = Истина;
		КонецЕсли;
		
		НоваяСтрокаДанныхЧисленности = ДанныеСреднеСписочнойЧисленности.Добавить();
		НоваяСтрокаДанныхЧисленности.Дата = КонецКвартала(ВыборкаРезультата.ДатаОтчета);
		НоваяСтрокаДанныхЧисленности.ЗначениеПоказателя = ВыборкаРезультата.ЗначениеПоказателя;
		НоваяСтрокаДанныхЧисленности.РасшифровкаЗначения = ВыборкаРезультата.РегламентированныйОтчет;
		НоваяСтрокаДанныхЧисленности.ПредельноеЗначение = ПредельноеЗначение;
	КонецЦикла;
	
	Если КоличествоПредельныхЗначенийПоСтроке > 1 Тогда
		КоличествоПредельныхЗначенийПоСтроке = 1;
	Иначе
		КоличествоПредельныхЗначенийПоСтроке = 0;
	КонецЕсли;
	
	Если МассивКварталов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Квартал Из МассивКварталов Цикл
		
		НаименованиеОтчета = ПолучитьНаименованиеОтчета(ИсточникОтчета);
		КонецПериода = КонецКвартала(Дата(Год(ПериодыОтчета.НачалоПериода), 3*Квартал, 1));
		ПредставлениеОтчета = НаименованиеОтчета + ПредставлениеПериода(НачалоГода(ПериодыОтчета.КонецПериода), 
			КонецПериода, "ФП=Истина");
		
		РасшифровкаЗначения = Новый Структура("ИсточникОтчета, НачалоПериода, КонецПериода, Вопрос", ИсточникОтчета, 
			НачалоКвартала(КонецПериода), КонецПериода, Истина);
		РасшифровкаЗначения.Вставить("ПредставлениеОтчета", ПредставлениеОтчета);
		
		НоваяСтрокаДанныхЧисленности = ДанныеСреднеСписочнойЧисленности.Добавить();
		НоваяСтрокаДанныхЧисленности.Дата = КонецПериода;
		НоваяСтрокаДанныхЧисленности.ЗначениеПоказателя = "Нет данных";
		НоваяСтрокаДанныхЧисленности.РасшифровкаЗначения = РасшифровкаЗначения;
		НоваяСтрокаДанныхЧисленности.ПредельноеЗначение = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеДолиУчастияДругихОрганизация(Организация ,ДанныеДолиУчастияДругихОрганизация, ПериодыОтчета,
		КоличествоПредельныхЗначенийПоДолиУчастия)
	
	ДатаОкончания = Новый Граница(ПериодыОтчета.КонецПериода, ВидГраницы.Включая);
	Счет_80 = ПланыСчетов.Хозрасчетный.УставныйКапитал;
	Субконто_80 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	Аналитика_80 = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Счет_80", Счет_80);
	Запрос.УстановитьПараметр("Субконто_80", Субконто_80);
	Запрос.УстановитьПараметр("Аналитика_80", Аналитика_80);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В ИЕРАРХИИ (&Счет_80),
	|			&Субконто_80,
	|			Организация = &Организация
	|				И Субконто1.ЮридическоеФизическоеЛицо = &Аналитика_80) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В ИЕРАРХИИ (&Счет_80), &Субконто_80, 
	|		Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	РезультаЗапроса = Запрос.ВыполнитьПакет();
	
	ПредельноеЗначение = Неопределено;
	ОбщаяДоляУчастияКонтрагентов = РезультаЗапроса[1].Выгрузить().Итог("Сумма");
	Если ОбщаяДоляУчастияКонтрагентов = 0 Тогда
		ДоляУчастия = "Нет данных";
	Иначе
		ДоляУчастия = 100 * (РезультаЗапроса[0].Выгрузить().Итог("Сумма")/ОбщаяДоляУчастияКонтрагентов);
	Если ДоляУчастия > 23.75 Тогда
		ПредельноеЗначение = Истина;
		КоличествоПредельныхЗначенийПоДолиУчастия = КоличествоПредельныхЗначенийПоДолиУчастия + 1;
	Иначе
		ПредельноеЗначение = Ложь;
	КонецЕсли;
		ДоляУчастия = Строка(Окр(ДоляУчастия, 1, 2)) + " %";
	КонецЕсли;
	
	НоваяСтрокаДолиУчастия = ДанныеДолиУчастияДругихОрганизация.Добавить();
	НоваяСтрокаДолиУчастия.Дата = ПериодыОтчета.КонецПериода;
	НоваяСтрокаДолиУчастия.ЗначениеПоказателя = ДоляУчастия;
	Если ПредельноеЗначение <> Неопределено Тогда
		НоваяСтрокаДолиУчастия.ПредельноеЗначение = ПредельноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеОстаточнойСтоимостиОСИНМА(Организация, ДанныеОстаточнойСтоимостиОСИНМА, ПериодыОтчета,
		КоличествоПредельныхЗначенийПоОСИНМА)
	
	ДатаОкончания = Новый Граница(ПериодыОтчета.КонецПериода, ВидГраницы.Включая);
	
	СчетаАмортизации = Новый Массив;
	СчетаАмортизации.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	СчетаАмортизации.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов); 
	
	Субконто0С = Новый Массив;
	Субконто0С.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("СчетОС", ПланыСчетов.Хозрасчетный.ОСвОрганизации);
	Запрос.УстановитьПараметр("СчетНМА", ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации);
	Запрос.УстановитьПараметр("СчетаАмортизации", СчетаАмортизации);
	Запрос.УстановитьПараметр("Субконто0С", Субконто0С);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка
	|ПОМЕСТИТЬ НеАмортизируемыеОС
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаОС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В (&СчетОС),
	|			&Субконто0С,
	|			Организация = &Организация
	|				И НЕ Субконто1 В
	|						(ВЫБРАТЬ
	|							НеАмортизируемыеОС.Ссылка
	|						ИЗ
	|							НеАмортизируемыеОС КАК НеАмортизируемыеОС)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаНМА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В (&СчетНМА), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаАмортизации
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В (&СчетаАмортизации), , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПредельноеЗначение = Неопределено;
	
	ОстаточнаяСтоимость = РезультатЗапроса[1].Выгрузить().Итог("СуммаОС")+ РезультатЗапроса[2].Выгрузить().Итог("СуммаНМА") - РезультатЗапроса[3].Выгрузить().Итог("СуммаАмортизации");
	
	Если ОстаточнаяСтоимость > 95000000 Тогда
		ПредельноеЗначение = Истина;
		КоличествоПредельныхЗначенийПоОСИНМА = КоличествоПредельныхЗначенийПоОСИНМА + 1;
	Иначе
		ПредельноеЗначение = Ложь;
	КонецЕсли;
	
	НоваяСтрокаОстаточнойСтоимости = ДанныеОстаточнойСтоимостиОСИНМА.Добавить();
	НоваяСтрокаОстаточнойСтоимости.Дата = ПериодыОтчета.КонецПериода;
	НоваяСтрокаОстаточнойСтоимости.ЗначениеПоказателя = ОстаточнаяСтоимость;
	Если ПредельноеЗначение <> Неопределено Тогда
		НоваяСтрокаОстаточнойСтоимости.ПредельноеЗначение = ПредельноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеДоходыУСН(ПериодыОтчета, Организация, ДанныеПолученныхДоходов, 
		ПоказателиОтчетов, КоличествоПредельныхЗначенийПолученныхДоходов, ДанныеЗаполненияМакета)
		
	ИсточникОтчета = "РегламентированныйОтчетУСН";
	НаименованиеПоказателя = Новый Массив;
	НаименованиеПоказателя.Добавить("СуммаДоходовУСН");
		
	Если Год(ПериодыОтчета.КонецПериода) <= 2013 Тогда
		ПредельноеЗначениеПолученныхДоходов = 57000000;
	ИначеЕсли Год(ПериодыОтчета.КонецПериода) = 2014 Тогда
		ПредельноеЗначениеПолученныхДоходов = 60819000;
	Иначе 
		ПредельноеЗначениеПолученныхДоходов = 65379000;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("НаименованиеПоказателя", НаименованиеПоказателя);
	Запрос.УстановитьПараметр("ИсточникДанных", ПоказателиОтчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	&ИсточникДанных КАК ИсточникДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникДанных.РегламентированныйОтчет КАК РегламентированныйОтчет,
	|	ИсточникДанных.ИсточникОтчета КАК ИсточникОтчета,
	|	ИсточникДанных.ДатаОтчета КАК ДатаОтчета,
	|	ИсточникДанных.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ИсточникДанных.Показатель КАК Показатель,
	|	ИсточникДанных.ЗначениеПоказателя КАК СуммаДоходаУСН
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.ИсточникОтчета = &ИсточникОтчета
	|	И ИсточникДанных.Показатель В(&НаименованиеПоказателя)
	|	И КОНЕЦПЕРИОДА(ИсточникДанных.ДатаОтчета, ДЕНЬ) = &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсточникОтчета,
	|	ДатаОтчета";
	
	РезультатЗапроса = Запрос.Выполнить();
	ДоступнаРасшифровка = Истина;
		
	Если РезультатЗапроса.Пустой() Тогда
		
		// Определяем доходы УСН оперативно
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", ПериодыОтчета.НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",  ПериодыОтчета.КонецПериода);
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот, 0) + ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходЕНВДОборот, 0) КАК СуммаДоходаУСН
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ДоступнаРасшифровка = Ложь;
		
	КонецЕсли;
	
	ВыборкаРезультата = РезультатЗапроса.Выгрузить();
	
	Если ВыборкаРезультата.Количество() = 0 Тогда
		СуммаПолученныхДоходов = 0;
	Иначе
		СуммаПолученныхДоходов = ВыборкаРезультата[0].СуммаДоходаУСН;
	КонецЕсли;
	
	Если СуммаПолученныхДоходов > ПредельноеЗначениеПолученныхДоходов Тогда
		ПредельноеЗначение = Истина;
		ЗнакСравнения = ">";
		КоличествоПредельныхЗначенийПолученныхДоходов = КоличествоПредельныхЗначенийПолученныхДоходов + 1;
	Иначе
		Если СуммаПолученныхДоходов = ПредельноеЗначениеПолученныхДоходов Тогда
			ЗнакСравнения = "=";
		Иначе
			ЗнакСравнения = "<";
		КонецЕсли;
		ПредельноеЗначение = Ложь;
	КонецЕсли;
	
	РасшифровкаЗначения = Новый Структура;
	РасшифровкаЗначения.Вставить("СуммаПолученныхДоходов", СуммаПолученныхДоходов);
	РасшифровкаЗначения.Вставить("ПредельныйРазмерДоходов", ПредельноеЗначениеПолученныхДоходов);
	
	Если ДоступнаРасшифровка Тогда
		РасшифровкаЗначения.Вставить("РасшифровкаСуммаПолученныхДоходов", ВыборкаРезультата[0].РегламентированныйОтчет);
	КонецЕсли;
	
	НоваяСтрокаДанныхПоДоходам = ДанныеПолученныхДоходов.Добавить();
	
	Если ПериодыОтчета.КонецПериода < КонецГода(ПериодыОтчета.КонецПериода) Тогда
		НоваяСтрокаДанныхПоДоходам.Период = ПредставлениеПериода(НачалоГода(ПериодыОтчета.КонецПериода), 
			ПериодыОтчета.КонецПериода, "ФП=Истина");	
	Иначе
		НоваяСтрокаДанныхПоДоходам.Период = Формат(Год(ПериодыОтчета.КонецПериода), "ЧГ=") + " г.";
	КонецЕсли;
	
	НоваяСтрокаДанныхПоДоходам.ПериодГод = Формат(Год(ПериодыОтчета.КонецПериода), "ЧГ=") + " г.";
	
	НоваяСтрокаДанныхПоДоходам.ЗнакСравнения = ЗнакСравнения;
	НоваяСтрокаДанныхПоДоходам.РасшифровкаЗначения = РасшифровкаЗначения;
	НоваяСтрокаДанныхПоДоходам.ПредельноеЗначение = ПредельноеЗначение;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеГодовыхПоказателей(ДанныеГодовыхПоказателей, Дата)
	
	НоваяСтрокаДанныхГодовогоПоказателя = ДанныеГодовыхПоказателей.Добавить();
	НоваяСтрокаДанныхГодовогоПоказателя.Дата = Дата;
	НоваяСтрокаДанныхГодовогоПоказателя.ЗначениеПоказателя = "-";
	
КонецПроцедуры

Функция ЗаполнитьРасшифровкуГодовыхПоказателей(ДанныеПоказателей)
	
	НомерСтроки = 0;
	ПараметрыРасшифровки = Новый Структура;
	
	Для Каждого СтрокаДанных Из ДанныеПоказателей Цикл
		НомерСтроки = НомерСтроки + 1;
		Если СтрокаДанных.Дата = КонецГода(СтрокаДанных.Дата) Тогда
			ПредставлениеПериода = Строка(Формат(Год(СтрокаДанных.Дата), "ЧГ=")) + " г.";
		Иначе
			ПредставлениеПериода = ПредставлениеПериода(НачалоГода(СтрокаДанных.Дата), СтрокаДанных.Дата, "ФП=Истина");
		КонецЕсли;
		
		ПараметрыРасшифровки.Вставить("Представление_" + НомерСтроки, ПредставлениеПериода);
		ПараметрыРасшифровки.Вставить("Год_" + НомерСтроки, СтрокаДанных.ЗначениеПоказателя);
		ПараметрыРасшифровки.Вставить("ПредельноеЗначение_" + НомерСтроки, СтрокаДанных.ПредельноеЗначение);
	КонецЦикла;
	
	Возврат ПараметрыРасшифровки;
	
КонецФункции

Функция НовыйРасшифровкаСреднеСписоченойЧисленности()
	
	ТипСтруктура = Новый ОписаниеТипов("Структура");
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
	
	РасшифровкаСреднеСписочнойЧисленности = Новый ТаблицаЗначений;
	РасшифровкаСреднеСписочнойЧисленности.Колонки.Добавить("Год", ТипСтрока);
	РасшифровкаСреднеСписочнойЧисленности.Колонки.Добавить("ПараметрыРасшифровки", ТипСтруктура);
	
	Возврат РасшифровкаСреднеСписочнойЧисленности;
	
КонецФункции

Процедура ЗаполнитьРасшифровкуСреднесписочнойЧисленности(ДанныеСреднеСписочнойЧисленности, 
			РасшифровкаСреднеСписочнойЧисленности)
	
	Период = ДанныеСреднеСписочнойЧисленности[0].Дата;
	НоваяСтрокаРасшифровки = РасшифровкаСреднеСписочнойЧисленности.Добавить();
	КоличествоСтрокДанных = ДанныеСреднеСписочнойЧисленности.Количество() - 1;
	ПараметрыРасшифровки = Новый Структура();
	
	Для НомерСтрокиДанных = 0 По КоличествоСтрокДанных Цикл
		
		ТекущаяСтрока = ДанныеСреднеСписочнойЧисленности[НомерСтрокиДанных];
		Если Год(Период) <> Год(ТекущаяСтрока.Дата) Тогда
			НоваяСтрокаРасшифровки.Год = Формат(Год(Период), "ЧГ=");
			НоваяСтрокаРасшифровки.ПараметрыРасшифровки = ПараметрыРасшифровки;
			
			Период = ТекущаяСтрока.Дата;
			НоваяСтрокаРасшифровки = РасшифровкаСреднеСписочнойЧисленности.Добавить();
			НоваяСтрокаРасшифровки.Год = Формат(Год(Период), "ЧГ=");
			ПараметрыРасшифровки = Новый Структура();
		КонецЕсли;
		
		ТекущийПериод = Месяц(ТекущаяСтрока.Дата)/3;
		ПараметрыРасшифровки.Вставить("Квартал_" + ТекущийПериод, ТекущаяСтрока.ЗначениеПоказателя);
		ПараметрыРасшифровки.Вставить("РасшифровкаКвартал_" + ТекущийПериод, ТекущаяСтрока.РасшифровкаЗначения);
		Если НЕ (ТипЗнч(ТекущаяСтрока.РасшифровкаЗначения) = Тип("Структура")) Тогда
			ПараметрыРасшифровки.Вставить("ПредельноеЗначение_" + ТекущийПериод, ТекущаяСтрока.ПредельноеЗначение);
		КонецЕсли;
		
		Если НомерСтрокиДанных = КоличествоСтрокДанных Тогда
			НоваяСтрокаРасшифровки.Год = Формат(Год(Период), "ЧГ=");
			НоваяСтрокаРасшифровки.ПараметрыРасшифровки = ПараметрыРасшифровки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМакетОтчетаРасшифровкамиПриближенийШапка(РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета)
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	МакетОписаниеРезультатПроверки = 
		Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ОписаниеРезультатовПроверки");
	
	ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("ЗаголовокРезультатаКритерия");
	ОбластьКартинки = ОбластьЗаголовок.Область("КартинкаРезультата");
	
	ОбластьОснованиеПроверки = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.ОснованиеПроверки);
	
	ОбластьЗаголовокПФ = МакетОтчетаПФ.ПолучитьОбласть("ЗаголовокРезультатаКритерия");
	ОбластьКартинкиПФ = ОбластьЗаголовокПФ.Область("КартинкаРезультата");
	
	ОбластьОснованиеПроверкиПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.ОснованиеПроверки);
	
	ОбластьОтступ_3 = МакетОтчета.ПолучитьОбласть("Отступ_3");
	ОбластьОтступ_5 = МакетОтчета.ПолучитьОбласть("Отступ_5");
	
	ОбластьТекстНаименованиеКритерия = 
		МакетОписаниеРезультатПроверки.Область(ДанныеЗаполненияМакета.ОбластьТекстаНаименованияКритерия).Имя;
	
	Если ДанныеЗаполненияМакета.Свойство("НетДанных") Тогда
		
		ОбластьКартинки.Картинка = БиблиотекаКартинок.НетДанныхДляПроверки;
		ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", 
			МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|НетДанных").Текст);
		
		ОбластьКартинкиПФ.Картинка = БиблиотекаКартинок.НетДанныхДляПроверки;
		ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", 
			МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|НетДанных").Текст);
		
	ИначеЕсли ДанныеЗаполненияМакета.Свойство("ЕстьОснование") Тогда
	
		ОбластьКартинки.Картинка = БиблиотекаКартинок.ЕстьРискПроверки;
		ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", 
			МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|ЕстьОснования").Текст);
		
		ОбластьКартинкиПФ.Картинка = БиблиотекаКартинок.ЕстьРискПроверки;
		ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", 
			МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|ЕстьОснования").Текст);
			
	Иначе
		
		ОбластьКартинки.Картинка = БиблиотекаКартинок.НетРискаПроверки;
		ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", 
			МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|НетОснований").Текст);
		
		ОбластьКартинкиПФ.Картинка = БиблиотекаКартинок.НетРискаПроверки;
		ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", 
			МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|НетОснований").Текст);
			
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьОснованиеПроверки.Параметры.Заполнить(ДанныеЗаполненияМакета);
	
	ОбластьЗаголовокПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьОснованиеПроверкиПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5);
	РезультатПроверкиКритериев.Вывести(ОбластьЗаголовок);
	РезультатПроверкиКритериев.НачатьГруппуСтрок(, Ложь);
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_3);
	
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьЗаголовокПФ);
	РезультатПроверкиКритериевПФ.НачатьГруппуСтрок(, Ложь);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_3);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОснованиеПроверки, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОснованиеПроверкиПФ, 2);

	ОбластьЗаголовокУСН = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.ЗаголовокСпецРежимУСН);
	ОбластьЗаголовокУСНПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.ЗаголовокСпецРежимУСН);
	
	РезультатПроверкиКритериев.Вывести(ОбластьЗаголовокУСН);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьЗаголовокУСНПФ);
	
КонецПроцедуры

Процедура ЗаполнитьМакетОтчетаРасшифровкамиПриближенийПоДолиУчастия(РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, ДанныеРасшифровкиКритерия)
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	
	ОбластьРасчетПоказателей = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателей);
	ОбластьРасчетПоказателейПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателей);
	
	ОбластьОтступ_5 = МакетОтчета.ПолучитьОбласть("Отступ_5");
	
	ЦветФонаНетОснований = Новый Цвет(240, 255, 240);
	ЦветФонаЕстьОснования = Новый Цвет(255, 240, 245);
		
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериев.Вывести(ОбластьРасчетПоказателей, 2);
	
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьРасчетПоказателейПФ, 2);
	
	ОбластьСтрокиТаблицы = МакетОтчета.ПолучитьОбласть("ПериодГод_2");
	ОбластьСтрокиТаблицыПФ = МакетОтчетаПФ.ПолучитьОбласть("ПериодГод_2");
	
	ОбластьСтрокиТаблицы.Параметры.Заполнить(ДанныеРасшифровкиКритерия);
	ОбластьСтрокиТаблицыПФ.Параметры.Заполнить(ДанныеРасшифровкиКритерия);
	
	Для НомерГода = 1 По 3 Цикл
		Если ДанныеРасшифровкиКритерия.Свойство("Год_" + НомерГода) Тогда
			ОбластьРасшифровкиЯчейки = ОбластьСтрокиТаблицы.Область("Год_" + НомерГода);
			
			ПредельноеЗначение = Неопределено;
			Если ДанныеРасшифровкиКритерия.Свойство("ПредельноеЗначение_" + НомерГода, 
				ПредельноеЗначение) Тогда
				Если ПредельноеЗначение <> Неопределено Тогда
					Если ПредельноеЗначение Тогда
						ОбластьРасшифровкиЯчейки.ЦветФона = ЦветФонаЕстьОснования;
					Иначе
						ОбластьРасшифровкиЯчейки.ЦветФона = ЦветФонаНетОснований;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериев.Вывести(ОбластьСтрокиТаблицы, 2);
	
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьСтрокиТаблицыПФ, 2);
		
КонецПроцедуры

Процедура ЗаполнитьМакетОтчетаРасшифровкамиПриближенийПоОстаточнойСтоимости(РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, ДанныеРасшифровкиКритерия)
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	
	ОбластьРасчетПоказателей = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателей);
	ОбластьРасчетПоказателейПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателей);
	
	ОбластьОтступ_3 = МакетОтчета.ПолучитьОбласть("Отступ_3");
	ОбластьОтступ_5 = МакетОтчета.ПолучитьОбласть("Отступ_5");
	ОбластьОтступ_9 = МакетОтчета.ПолучитьОбласть("Отступ_9");
	
	ЦветФонаНетОснований = Новый Цвет(240, 255, 240);
	ЦветФонаЕстьОснования = Новый Цвет(255, 240, 245);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_9, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_9, 2);
	
	РезультатПроверкиКритериев.Вывести(ОбластьРасчетПоказателей, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьРасчетПоказателейПФ, 2);
	
	ОбластьСтрокиТаблицы = МакетОтчета.ПолучитьОбласть("ПериодГод_2");
	ОбластьСтрокиТаблицыПФ = МакетОтчетаПФ.ПолучитьОбласть("ПериодГод_2");
	
	Если ДанныеРасшифровкиКритерия.Количество() > 0 Тогда
	
		ОбластьСтрокиТаблицы.Параметры.Заполнить(ДанныеРасшифровкиКритерия);
		ОбластьСтрокиТаблицыПФ.Параметры.Заполнить(ДанныеРасшифровкиКритерия);
		
		Для НомерГода = 1 По 3 Цикл
			Если ДанныеРасшифровкиКритерия.Свойство("Год_" + НомерГода) Тогда
				ОбластьРасшифровкиЯчейки = ОбластьСтрокиТаблицы.Область("Год_" + НомерГода);
				
				ПредельноеЗначение = Неопределено;
				Если ДанныеРасшифровкиКритерия.Свойство("ПредельноеЗначение_" + НомерГода, 
					ПредельноеЗначение) Тогда
					Если ПредельноеЗначение <> Неопределено Тогда
						Если ПредельноеЗначение Тогда
							ОбластьРасшифровкиЯчейки.ЦветФона = ЦветФонаЕстьОснования;
						Иначе
							ОбластьРасшифровкиЯчейки.ЦветФона = ЦветФонаНетОснований;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериев.Вывести(ОбластьСтрокиТаблицы, 2);
	
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьСтрокиТаблицыПФ, 2);
	
КонецПроцедуры

Процедура ЗаполнитьМакетОтчетаРасшифровкамиПриближенийПоСреднесписочнойЧисленности(РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, ДанныеРасшифровкиКритерия)
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	
	ОбластьРасчетПоказателей = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателей);
	ОбластьРасчетПоказателейПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателей);
	
	ОбластьОтступ_3 = МакетОтчета.ПолучитьОбласть("Отступ_3");
	ОбластьОтступ_5 = МакетОтчета.ПолучитьОбласть("Отступ_5");
	ОбластьОтступ_9 = МакетОтчета.ПолучитьОбласть("Отступ_9");
	
	ЦветФонаНетОснований = Новый Цвет(240, 255, 240);
	ЦветФонаЕстьОснования = Новый Цвет(255, 240, 245);
	ЦветТекстаГиперссылки = Новый Цвет(83, 106, 194);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_9, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_9, 2);
	
	РезультатПроверкиКритериев.Вывести(ОбластьРасчетПоказателей, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьРасчетПоказателейПФ, 2);
	
	Для Каждого СтрокаРасшифровки Из ДанныеРасшифровкиКритерия Цикл
		
		ОбластьСтрокиТаблицы = МакетОтчета.ПолучитьОбласть("ПериодКвартал_2");
		ОбластьСтрокиТаблицыПФ = МакетОтчетаПФ.ПолучитьОбласть("ПериодКвартал_2");
		
		ОбластьСтрокиТаблицы.Параметры.Заполнить(СтрокаРасшифровки);
		ОбластьСтрокиТаблицыПФ.Параметры.Заполнить(СтрокаРасшифровки);
		ОбластьСтрокиТаблицы.Параметры.Заполнить(СтрокаРасшифровки.ПараметрыРасшифровки);
		ОбластьСтрокиТаблицыПФ.Параметры.Заполнить(СтрокаРасшифровки.ПараметрыРасшифровки);
		
		ПустоеЗначение = Новый Структура;
		
		Для НомерКвартала = 1 По 4 Цикл
			Если НЕ СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("Квартал_" + НомерКвартала) Тогда
				ПустоеЗначение.Вставить("Квартал_" + НомерКвартала, "-");
			КонецЕсли;
			
			Если СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("РасшифровкаКвартал_" + НомерКвартала) Тогда
				ОбластьРасшифровкиЯчейки = ОбластьСтрокиТаблицы.Область("ФСС_" + НомерКвартала);
				ОбластьРасшифровкиЯчейки.Гиперссылка = Истина;
				ОбластьРасшифровкиЯчейки.ЦветТекста = ЦветТекстаГиперссылки;
				
				ПредельноеЗначение = Неопределено;
				Если СтрокаРасшифровки.ПараметрыРасшифровки.Свойство("ПредельноеЗначение_" + НомерКвартала,
					ПредельноеЗначение) Тогда
					Если ПредельноеЗначение Тогда
						ОбластьРасшифровкиЯчейки.ЦветФона = ЦветФонаЕстьОснования;
					Иначе
						ОбластьРасшифровкиЯчейки.ЦветФона = ЦветФонаНетОснований;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьСтрокиТаблицы.Параметры.Заполнить(ПустоеЗначение);
		РезультатПроверкиКритериев.Вывести(ОбластьСтрокиТаблицы, 2);
		РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5, 2);
		
		ОбластьСтрокиТаблицыПФ.Параметры.Заполнить(ПустоеЗначение);
		РезультатПроверкиКритериевПФ.Вывести(ОбластьСтрокиТаблицыПФ, 2);
		РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5, 2);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМакетОтчетаРасшифровкамиПриближенийПоПолученнымДоходам(РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, ДанныеРасшифровкиКритерия)
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	
	ОбластьРасчетПоказателей = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателей);
	ОбластьРасчетПоказателейПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателей);
	
	ОбластьОтступ_3 = МакетОтчета.ПолучитьОбласть("Отступ_3");
	ОбластьОтступ_5 = МакетОтчета.ПолучитьОбласть("Отступ_5");
	ОбластьОтступ_9 = МакетОтчета.ПолучитьОбласть("Отступ_9");
	
	ЦветФонаНетОснований = Новый Цвет(240, 255, 240);
	ЦветФонаЕстьОснования = Новый Цвет(255, 240, 245);
	ЦветТекстаГиперссылки = Новый Цвет(83, 106, 194);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_9, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_9, 2);
	
	РезультатПроверкиКритериев.Вывести(ОбластьРасчетПоказателей, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьРасчетПоказателейПФ, 2);
	
	Для Каждого СтрокаРасшифровки Из ДанныеРасшифровкиКритерия Цикл
		
		Если СтрокаРасшифровки.ПредельноеЗначение <> Неопределено Тогда
			ОбластьСтрокиТаблицы = МакетОтчета.ПолучитьОбласть("Калькулятор_ПриближениеКПредельнымЗначениямПоДоходамУСН");
			ОбластьСтрокиТаблицыПФ = МакетОтчетаПФ.ПолучитьОбласть("Калькулятор_ПриближениеКПредельнымЗначениямПоДоходамУСН");
			ОбластьРасшифровкиЯчейки = ОбластьСтрокиТаблицы.Область("СуммаПолученныхДоходовЕсть");
		Иначе
			ОбластьСтрокиТаблицы = МакетОтчета.ПолучитьОбласть(
				"Калькулятор_ПриближениеКПредельнымЗначениямПоДоходамУСННетДанных");
			ОбластьСтрокиТаблицыПФ = МакетОтчетаПФ.ПолучитьОбласть(
				"Калькулятор_ПриближениеКПредельнымЗначениямПоДоходамУСННетДанных");
			ОбластьРасшифровкиЯчейки = ОбластьСтрокиТаблицы.Область("СуммаПолученныхДоходовОтсутствует");
		КонецЕсли;
		
		ОбластьСтрокиТаблицы.Параметры.Заполнить(СтрокаРасшифровки);
		ОбластьСтрокиТаблицыПФ.Параметры.Заполнить(СтрокаРасшифровки);
		ОбластьСтрокиТаблицы.Параметры.Заполнить(СтрокаРасшифровки.РасшифровкаЗначения);
		ОбластьСтрокиТаблицыПФ.Параметры.Заполнить(СтрокаРасшифровки.РасшифровкаЗначения);
		
		Если СтрокаРасшифровки.РасшифровкаЗначения.Свойство("РасшифровкаСуммаПолученныхДоходов") Тогда
			ОбластьРасшифровкиЯчейки.Гиперссылка = Истина;
			ОбластьРасшифровкиЯчейки.ЦветТекста = ЦветТекстаГиперссылки;
		КонецЕсли;
		
		Если СтрокаРасшифровки.ПредельноеЗначение <> Неопределено Тогда
			ОбластьСравнениеПоказателей = ОбластьСтрокиТаблицы.Область("РезультатСравненияПриближениеКПредельнымЗначениям");
			Если СтрокаРасшифровки.ПредельноеЗначение Тогда
				ОбластьСравнениеПоказателей.ЦветФона = ЦветФонаЕстьОснования;
			Иначе
				ОбластьСравнениеПоказателей.ЦветФона = ЦветФонаНетОснований;
			КонецЕсли;
		КонецЕсли;
		
		РезультатПроверкиКритериев.Вывести(ОбластьСтрокиТаблицы, 2);
		РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5, 2);
		
		РезультатПроверкиКритериевПФ.Вывести(ОбластьСтрокиТаблицыПФ, 2);
		РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5, 2);
		
	КонецЦикла;
	
	Если ДанныеЗаполненияМакета.Свойство("ПрименяетсяЕНВД") Тогда
		
		ОбластьРасчетПоказателейЕНВД = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.ПрименяетсяЕНВД);
		ОбластьРасчетПоказателейЕНВДПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.ПрименяетсяЕНВД);
		
		РезультатПроверкиКритериев.Вывести(ОбластьРасчетПоказателейЕНВД, 2);
		РезультатПроверкиКритериевПФ.Вывести(ОбластьРасчетПоказателейЕНВДПФ, 2);
		
		РезультатПроверкиКритериев.ЗакончитьГруппуСтрок();
		
	Иначе
		РезультатПроверкиКритериев.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРезультатаЗначительныеПрофессиональныеВычеты

Процедура ЗначительныеПрофессиональныеВычеты(ПараметрыОтчета, ДанныеУчетнойПолитики, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПФ, РезультатыПроверки)
	
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ПараметрыОтчета.НачалоПериода);
	КонецПериода = КонецМесяца(ПараметрыОтчета.КонецПериода);
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	Подробнее = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/nalprov#content:26721:1:10");
	
	#Область ПроверкаНетДанныхНеПроверяется
	ДанныеЗаполненияМакета = Новый Структура();
	ДанныеЗаполненияМакета.Вставить("НомерКритерия", "7.");
	ДанныеЗаполненияМакета.Вставить("ОбластьТекстаНаименованияКритерия", "ПрофессиональныеВычетыИП");
	ДанныеЗаполненияМакета.Вставить("ОснованиеПроверки", "ОснованиеПроверки_ЗначительныеПрофессиональныеВычеты");
	ДанныеЗаполненияМакета.Вставить("Подробнее_7", Подробнее);
	
	ЭтоЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	Если ЭтоЮридическоеЛицо Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяЗначительныеПрофессиональныеВычетыНеИП");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ЭтоПлательщикНДФЛ = ПроверитьПрименениеНДФЛ(ДанныеУчетнойПолитики, ДанныеЗаполненияМакета, РезультатПроверкиКритериев,
		РезультатПроверкиКритериевПФ);
	
	Если ЭтоПлательщикНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаРегистрации > КонецПериода Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетДеятельности");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	КоличествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество() - 1;
	
	Если КоличествоЗаписейУчетнойПолитики < 0 Тогда
		ДанныеЗаполненияМакета.Вставить("УчетнаяПолитика", "УчетнаяПолитика");
		ДанныеЗаполненияМакета.Вставить("Период", Формат(Год(КонецПериода), "ЧГ="));
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетУчетнойПолитики");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	#КонецОбласти
	
	ПериодыОтчета = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ПоказателиОтчетов = РегламентированнаяОтчетность.ПоказателиОценкиРискаВыезднойНалоговойПроверки(
		Организация, НачалоГода(НачалоПериода), КонецПериода);
	ОтчетыНетДанных = НовыйОтчетыНетДанных();
	
	НаименованиеПоказателя = Новый Массив;
	НаименованиеПоказателя.Добавить("СуммаДоходовИП");
	НаименованиеПоказателя.Добавить("СуммаПрофессиональныхВычетовПоНДФЛ");
	
	ДанныеРегламентированногоОтчета = НовыйДанныеРегламентированногоОтчета();
	ИсточникОтчета = "РегламентированныйОтчет3НДФЛ";
	
	ПолучитьРегламентированныеОтчетыНарастающимПериодом(ПериодыОтчета, ИсточникОтчета, ПоказателиОтчетов, 
		НаименованиеПоказателя, ДанныеРегламентированногоОтчета, ОтчетыНетДанных);
	
	Если ОтчетыНетДанных.Количество() <> 0 Тогда
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НетДанныхСформироватьОтчеты");
		ДанныеЗаполненияМакета.Вставить("ОтчетыНетДанных", ОтчетыНетДанных);
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	СуммаПрофессиональныхВычетов = 0;
	СуммаДохода = 0;
	
	Для Каждого СтрокаДанныеОтчета Из ДанныеРегламентированногоОтчета Цикл
		Если СтрокаДанныеОтчета.Показатель = "СуммаДоходовИП" Тогда
			СуммаДохода = СуммаДохода + СтрокаДанныеОтчета.ЗначениеПоказателя;
		Иначе
			СуммаПрофессиональныхВычетов = СуммаПрофессиональныхВычетов + СтрокаДанныеОтчета.ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаДохода = 0 Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяЗначительныеВычетыНетДоходов");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	ДоляПрофессиональныхВычетов = Окр(100*(СуммаПрофессиональныхВычетов/СуммаДохода), 1, 1);
	ПредельноеЗначениеПрофессиональныхВычетов = 83;
	
	Если ДоляПрофессиональныхВычетов < ПредельноеЗначениеПрофессиональныхВычетов Тогда
		ЗнакСравнения = "<";
		РезультатыПроверки.Вставить("Критерий7","НетОснования");
	Иначе
		Если ДоляПрофессиональныхВычетов = ПредельноеЗначениеПрофессиональныхВычетов Тогда
			ЗнакСравнения = "=";
			РезультатыПроверки.Вставить("Критерий7","НетОснования");
		Иначе
			ЗнакСравнения = ">";
			ДанныеЗаполненияМакета.Вставить("ЕстьОснование", Истина);
			РезультатыПроверки.Вставить("Критерий7","ЕстьОснование");
			
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполненияМакета.Вставить("РасчетПоказателей", "Калькулятор_ЗначительныеПрофессиональныеВычеты");
	
	ДанныеЗаполненияМакетаРасчетПоказателей = Новый Структура;
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СуммаДохода", СуммаДохода);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СуммаПрофессиональныхВычетов", СуммаПрофессиональныхВычетов);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ДоляПрофессиональныхВычетов", ДоляПрофессиональныхВычетов);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ЗнакСравнения", ЗнакСравнения);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ПредельноеЗначениеПрофессиональныхВычетов", 
		ПредельноеЗначениеПрофессиональныхВычетов);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СравнениеПоказателей", 
		"РезультатСравненияЗначительныеПрофессиональныеВычеты");
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("Подробнее_7", Подробнее);
	
	КодыНалоговыхОрганов = Новый Массив;
	КолонкаКодНалоговогоОргана = ДанныеРегламентированногоОтчета.ВыгрузитьКолонку("КодНалоговогоОргана");
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(КодыНалоговыхОрганов, КолонкаКодНалоговогоОргана);
	ОбластиГиперссылок = Новый Массив;
	
	Если КодыНалоговыхОрганов.Количество() = 1 Тогда
		ОбластиГиперссылок.Добавить("СуммаДохода");
		ОбластиГиперссылок.Добавить("СуммаПрофессиональныхВычетов");
		ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасшифровкаСуммаДохода", 
			ДанныеРегламентированногоОтчета[0].РегламентированныйОтчет);
		ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РасшифровкаСуммаПрофессиональныхВычетов", 
			ДанныеРегламентированногоОтчета[0].РегламентированныйОтчет);
	КонецЕсли;
	
	Если ОбластиГиперссылок.Количество() > 0 Тогда
		ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ОбластиГиперссылок", ОбластиГиперссылок);
	КонецЕсли;
	
	ЗаполнитьМакетОтчетаЕстьРезультат(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, 
		ДанныеЗаполненияМакетаРасчетПоказателей);
	
КонецПроцедуры

Функция ПроверитьПрименениеНДФЛ(ДанныеУчетнойПолитики, ДанныеЗаполненияМакета, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПФ)
	
	КоличествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество() - 1;
	
	Если КоличествоЗаписейУчетнойПолитики < 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяУчетнаяПолитика = ДанныеУчетнойПолитики[КоличествоЗаписейУчетнойПолитики];
	
	Если НЕ ТекущаяУчетнаяПолитика.ПлательщикНДФЛ Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяЗначительныеПрофессиональныеВычетыНеНДФЛ");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПрофедурыИФункцииКритерияРезультатаЗаключениеДоговоровБезДеловойЦели

Процедура ЗаключениеДоговоровБезДеловойЦели(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ)
	
	Подробнее = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/nalprov#content:26721:1:4");
	ПостановлениеПленумаВАСРФ = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/garant#content:12049957:1");
	
	ДанныеЗаполненияМакета = Новый Структура();
	ДанныеЗаполненияМакета.Вставить("НомерКритерия", "8.");
	ДанныеЗаполненияМакета.Вставить("ОбластьТекстаНаименованияКритерия", "ЗаключениеДоговоров");
	ДанныеЗаполненияМакета.Вставить("ОснованиеПроверки", "ОснованиеПроверки_ЗаключениеДоговоровБезДеловойЦели");
	ДанныеЗаполненияМакета.Вставить("ПостановлениеПленумаВАСРФ", ПостановлениеПленумаВАСРФ);
	ДанныеЗаполненияМакета.Вставить("Подробнее_8", Подробнее);
	ДанныеЗаполненияМакета.Вставить("НетДанных", "НетДанных_ЗаключениеДоговоровБезДеловойЦели");
	
	ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
		ДанныеЗаполненияМакета);
	
КонецПроцедуры

#КонецОбласти

#Область ПрофедурыИФункцииКритерияРезультатаНеПредоставлениеПоясненийВФНС

Процедура НеПредоставлениеПоясненийВФНС(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ)
	
	Подробнее = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/nalprov#content:26721:1:11");
	
	ДанныеЗаполненияМакета = Новый Структура();
	ДанныеЗаполненияМакета.Вставить("НомерКритерия", "9.");
	ДанныеЗаполненияМакета.Вставить("ОбластьТекстаНаименованияКритерия", "СдачаПоясненийВФНС");
	ДанныеЗаполненияМакета.Вставить("ОснованиеПроверки", "ОснованиеПроверки_НеПредоставлениеПоясненийВФНС");
	ДанныеЗаполненияМакета.Вставить("Подробнее_9", Подробнее);
	ДанныеЗаполненияМакета.Вставить("НетДанных", "НетДанных_НеПредоставлениеПоясненийВФНС");
	
	ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
		ДанныеЗаполненияМакета);
	
КонецПроцедуры

#КонецОбласти

#Область ПрофедурыИФункцииКритерияРезультатаНеоднократнаяСменаМестУчета

Процедура НеоднократнаяСменаМестУчета(ПараметрыОтчета, РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ)
	
	Организация = ПараметрыОтчета.Организация;
	Подробнее = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/nalprov#content:26721:1:5");
	
	ДанныеЗаполненияМакета = Новый Структура();
	ДанныеЗаполненияМакета.Вставить("НомерКритерия", "10.");
	ДанныеЗаполненияМакета.Вставить("ОбластьТекстаНаименованияКритерия", "СменаМестУчета");
	ДанныеЗаполненияМакета.Вставить("ОснованиеПроверки", "ОснованиеПроверки_НеоднократнаяСменаМестУчета");
	ДанныеЗаполненияМакета.Вставить("Подробнее_10", Подробнее);
	
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	Если НЕ ЭтоЮрЛицо Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяУбыткиВОтчетностиИП");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
	Иначе
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НетДанных_НеоднократнаяСменаМестУчета");
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРезультатаУровеньРентабельности

Процедура УровеньРентабельности(ПараметрыОтчета, ДанныеУчетнойПолитики, СведенияПредельныхЗначений, 
		РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, РезультатыПроверки)
	
	Организация = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ПараметрыОтчета.НачалоПериода);
	КонецПериода = КонецМесяца(ПараметрыОтчета.КонецПериода);
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	ЭтоЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	Подробнее = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/nalprov#content:26721:1:2");
	
	#Область ПроверкаНетДанныхНеПроверяется
	ДанныеЗаполненияМакета = Новый Структура();
	ДанныеЗаполненияМакета.Вставить("НомерКритерия", "11.");
	ДанныеЗаполненияМакета.Вставить("ОбластьТекстаНаименованияКритерия", "УровеньРентабельности");
	ДанныеЗаполненияМакета.Вставить("ОснованиеПроверки", "ОснованиеПроверки_УровеньРентабельности");
	ДанныеЗаполненияМакета.Вставить("Подробнее_11", Подробнее);
	
	Если НЕ ЭтоЮридическоеЛицо Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяУбыткиВОтчетностиИП");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	КоличествоЗаписейУчетнойПолитики = ДанныеУчетнойПолитики.Количество() - 1;
	
	Если КоличествоЗаписейУчетнойПолитики > 0 Тогда
		ТекущаяУчетнаяПолитика = ДанныеУчетнойПолитики[КоличествоЗаписейУчетнойПолитики];
		Если ТекущаяУчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			Если ТекущаяУчетнаяПолитика.ПлательщикЕНВД Тогда
				ПериодыОтчета = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
				ЭтоОСН = НЕ ВыручкаТолькоЕНВД(Организация, ПериодыОтчета);
			Иначе
				ЭтоОСН = Истина;
			КонецЕсли;
			Если НЕ ЭтоОСН Тогда
				ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаЕНВД");
				ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
					ДанныеЗаполненияМакета);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДатаРегистрации > КонецПериода Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетДеятельности");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	Если Год(ДатаРегистрации) = Год(НачалоПериода) Тогда
		НачалоПериода = НачалоКвартала(ДатаРегистрации);
	КонецЕсли;
	
	Если КоличествоЗаписейУчетнойПолитики < 0 Тогда
		ДанныеЗаполненияМакета.Вставить("УчетнаяПолитика", "УчетнаяПолитика");
		ДанныеЗаполненияМакета.Вставить("Период", Формат(Год(КонецПериода), "ЧГ="));
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяНалоговаяНагрузкаНетУчетнойПолитики");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	Если НЕ СведенияПредельныхЗначений.Свойство("ЕстьОКВЭД") Тогда
		ДанныеЗаполненияМакета.Вставить("НетДанных", "НеПроверяетсяНалоговаяНагрузкаНетОКВЭД");
		ДанныеЗаполненияМакета.Вставить("КодОКВЭД", "КодОКВЭД");
		ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПериодыОтчета = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	СебестоимостьПроданныхТоваров = 0;
	ЧистаяПрибыль = 0;
	ПрибыльПродаж = 0;
	
	ТекущаяУчетнаяПолитика = ДанныеУчетнойПолитики[КоличествоЗаписейУчетнойПолитики];
	ПолучитьДанныеОтчетаОФинансовыхРезультатах(Организация, ПериодыОтчета, ЧистаяПрибыль, ПрибыльПродаж,
		СебестоимостьПроданныхТоваров, ТекущаяУчетнаяПолитика);
	СтоимостьАктивов = ПолучитьСтоимостьАктивов(Организация, ПериодыОтчета);
	
	Если СтоимостьАктивов = 0 ИЛИ СебестоимостьПроданныхТоваров = 0 Тогда
		ДанныеЗаполненияМакета.Вставить("НеПроверяется", "НеПроверяетсяУровеньРентабельностиНетПродажИАктивов");
		ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
			ДанныеЗаполненияМакета);
		Возврат;
	КонецЕсли;
	
	РентабельностьАктивов = Окр(100 * ЧистаяПрибыль/СтоимостьАктивов, 1, 1);
	РентабельностьПродаж = Окр(100 * ПрибыльПродаж/СебестоимостьПроданныхТоваров, 1, 1);
	ПредельноеЗначениеРентабельностиАктивов = Окр(0.9 * СведенияПредельныхЗначений.ПредельноеЗначениеРентабельностиАктивов,1,1);
	ПредельноеЗначениеРентабельностиПродаж = Окр(0.9 * СведенияПредельныхЗначений.ПредельноеЗначениеРентабельностиПродаж,1,1);
	
	Если РентабельностьАктивов < ПредельноеЗначениеРентабельностиАктивов Тогда
		ЗнакСравненияРентабельностиАктивов = "<";
		ДанныеЗаполненияМакета.Вставить("ЕстьОснование", Истина);
	Иначе
		ДанныеЗаполненияМакета.Вставить("АктивыНеОснование", Истина);
		Если РентабельностьАктивов = ПредельноеЗначениеРентабельностиАктивов Тогда
			ЗнакСравненияРентабельностиАктивов = "=";
		Иначе
			ЗнакСравненияРентабельностиАктивов = ">";
		КонецЕсли;
	КонецЕсли;
	
	Если РентабельностьПродаж < ПредельноеЗначениеРентабельностиПродаж Тогда
		ЗнакСравненияРентабельностиПродаж = "<";
		Если НЕ ДанныеЗаполненияМакета.Свойство("ЕстьОснование") Тогда
			ДанныеЗаполненияМакета.Вставить("ЕстьОснование", Истина);
		КонецЕсли;
	Иначе
		ДанныеЗаполненияМакета.Вставить("ПродажиНеОснование", Истина);
		Если РентабельностьПродаж = ПредельноеЗначениеРентабельностиПродаж Тогда
			ЗнакСравненияРентабельностиПродаж = "=";
		Иначе
			ЗнакСравненияРентабельностиПродаж = ">";
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполненияМакета.Свойство("ЕстьОснование") Тогда
		РезультатыПроверки.Вставить("Критерий11","ЕстьОснование");
	Иначе
		РезультатыПроверки.Вставить("Критерий11","НетОснования");
	КонецЕсли;
	
	ДанныеЗаполненияМакета.Вставить("РасчетПоказателей", "Калькулятор_УровеньРентабельностиОсновной");
	ДанныеЗаполненияМакета.Вставить("РасчетПоказателейДополнительный", "Калькулятор_УровеньРентабельностиДополнительный");
	ДанныеЗаполненияМакета.Вставить("ЕстьРасшифровкаПоказателей", Истина);
	
	ПриложениеПриказа = Новый Структура("ПриложениеПриказа", "http://its.1c.ru/db/garant#content:70552968:1");
	
	ДанныеЗаполненияМакетаРасчетПоказателей = Новый Структура;
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РентабельностьАктивов", РентабельностьАктивов);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ЧистаяПрибыль", ЧистаяПрибыль);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СтоимостьАктивов", СтоимостьАктивов);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ПредельноеЗначениеРентабельностиАктивов", 
		ПредельноеЗначениеРентабельностиАктивов);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ЗнакСравненияРентабельностиАктивов", 
		ЗнакСравненияРентабельностиАктивов);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СравнениеПоказателей", "РезультатСравненияРентабельностиАктивов");
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("РентабельностьПродаж", РентабельностьПродаж);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ПрибыльПродаж", ПрибыльПродаж);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СебестоимостьПроданныхТоваров", СебестоимостьПроданныхТоваров);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ПредельноеЗначениеРентабельностиПродаж", 
		ПредельноеЗначениеРентабельностиПродаж);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("ЗнакСравненияРентабельностиПродаж", 
		ЗнакСравненияРентабельностиПродаж);
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("СравнениеПоказателейПродаж", 
		"РезультатСравненияРентабельностиПродаж");
	ДанныеЗаполненияМакетаРасчетПоказателей.Вставить("Подробнее_11", ПриложениеПриказа);
	
	ЗаполнитьМакетОтчетаЕстьРезультат(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, ДанныеЗаполненияМакета, 
		ДанныеЗаполненияМакетаРасчетПоказателей);
	ЗаполнитьМакетОтчетаРасшифровкойУровеньРентабельности(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		ДанныеЗаполненияМакета, ДанныеЗаполненияМакетаРасчетПоказателей);
	
КонецПроцедуры

Процедура ПолучитьДанныеОтчетаОФинансовыхРезультатах(Организация, ПериодыОтчета, ЧистаяПрибыль, ПрибыльПродаж,
		СебестоимостьПроданныхТоваров, ТекущаяУчетнаяПолитика)
	
	НачалоПериода = ПериодыОтчета.НачалоПериода;
	КонецПериода= Новый Граница(КонецДня(ПериодыОтчета.КонецПериода), ВидГраницы.Включая);
	
	СчетКт_2110 = ПланыСчетов.Хозрасчетный.Выручка;
	
	СчетДт_2110 = Новый Массив;
	СчетДт_2110.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	СчетДт_2110.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	СчетДт_2110.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	
	СчетДт_2120 = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
	СчетДт_2210 = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу;
	СчетДт_2220 = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы;
	
	Субконто_2410 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	Аналитика_2410 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	
	Счет_09 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	Счет_68_02 = ПланыСчетов.Хозрасчетный.НДС;
	Счет_68_04_1 = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	Счет_68_04_2 = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	Счет_77 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;
	
	СчетДк_91_01 = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Субконто_91_01 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	
	Счет_91_02 = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	
	Счет_99_01 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиБезНалогаНаПрибыль;
	Субконто_99_01 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки;
	Аналитика_99_01 = Новый Массив;
	Аналитика_99_01.Добавить(Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
	Аналитика_99_01.Добавить(Перечисления.ПрибылиИУбытки.НалоговыеСанкции);
	
	Счет_99_01_1 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
	Счет_99_02_4 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО;
	Счет_99_09 = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
	
	// Суммируемые реквизиты счета 91.01 по строкаи 2310 2320 2340
	ЗначениеРеквизита_2310_2320_2340 = Новый Массив;
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.УчастиеВДругихОрганизациях);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделок);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделокОР);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	ЗначениеРеквизита_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	ЗначениеРеквизита_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
		
	// Вычитаемые реквизиты счета 91.01 по строкаи 2310 2320 2340
	ЗначениеРеквизитаКВычету_2310_2320_2340 = Новый Массив;
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ЗначениеРеквизитаКВычету_2310_2320_2340.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
		
	// Суммируемые реквизиты счета 91.01 по строкаи 2330 2350
	ЗначениеРеквизита_2330_2350 = Новый Массив;
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.УчастиеВДругихОрганизациях);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделок);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделокОР);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	ЗначениеРеквизита_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы);
	ЗначениеРеквизита_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
		
	// Вычитываемые реквизиты счета 91.01 по строкаи 2330 2350	
	ЗначениеРеквизитаКВычету_2330_2350 = Новый Массив;
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(
		Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	ЗначениеРеквизитаКВычету_2330_2350.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачалаПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("СчетКт_2110", СчетКт_2110);
	Запрос.УстановитьПараметр("СчетДт_2110", СчетДт_2110);
	Запрос.УстановитьПараметр("СчетДт_2120", СчетДт_2120);
	Запрос.УстановитьПараметр("СчетДт_2210", СчетДт_2210);
	Запрос.УстановитьПараметр("СчетДт_2220", СчетДт_2220);
	Запрос.УстановитьПараметр("Субконто_2410", Субконто_2410);
	Запрос.УстановитьПараметр("Аналитика_2410", Аналитика_2410);
	Запрос.УстановитьПараметр("Счет_09", Счет_09);
	Запрос.УстановитьПараметр("Счет_68_02", Счет_68_02);
	Запрос.УстановитьПараметр("Счет_68_04_1", Счет_68_04_1);
	Запрос.УстановитьПараметр("Счет_68_04_2", Счет_68_04_2);
	Запрос.УстановитьПараметр("Счет_77", Счет_77);
	Запрос.УстановитьПараметр("СчетДк_91_01", СчетДк_91_01);
	Запрос.УстановитьПараметр("Субконто_91_01", Субконто_91_01);
	Запрос.УстановитьПараметр("Счет_91_02", Счет_91_02);
	Запрос.УстановитьПараметр("Счет_99_01", Счет_99_01);
	Запрос.УстановитьПараметр("Субконто_99_01", Субконто_99_01);
	Запрос.УстановитьПараметр("Аналитика_99_01", Аналитика_99_01);
	Запрос.УстановитьПараметр("Счет_99_01_1", Счет_99_01_1);
	Запрос.УстановитьПараметр("Счет_99_02_4", Счет_99_02_4);
	Запрос.УстановитьПараметр("Счет_99_09", Счет_99_09);
	Запрос.УстановитьПараметр("ЗначениеРеквизита_2310_2320_2340", ЗначениеРеквизита_2310_2320_2340);
	Запрос.УстановитьПараметр("ЗначениеРеквизитаКВычету_2310_2320_2340", ЗначениеРеквизитаКВычету_2310_2320_2340);
	Запрос.УстановитьПараметр("ЗначениеРеквизита_2330_2350", ЗначениеРеквизита_2330_2350);
	Запрос.УстановитьПараметр("ЗначениеРеквизитаКВычету_2330_2350", ЗначениеРеквизитаКВычету_2330_2350);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачалаПериода, &ДатаКонецПериода, , Счет В ИЕРАРХИИ (&СчетКт_2110), , 
	|		Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет В (&СчетДт_2110)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетДт_2120)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетДт_2210)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетДт_2220),
	|			,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет = &СчетДк_91_01,
	|			&Субконто_91_01,
	|			Организация = &Организация
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ЗначениеРеквизита_2310_2320_2340),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет = &Счет_91_02,
	|			&Субконто_91_01,
	|			Организация = &Организация
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ЗначениеРеквизитаКВычету_2310_2320_2340),
	|			КорСчет = &Счет_68_02,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет = &Счет_91_02,
	|			&Субконто_91_01,
	|			Организация = &Организация
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ЗначениеРеквизита_2330_2350),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет = &Счет_91_02,
	|			&Субконто_91_01,
	|			Организация = &Организация
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ЗначениеРеквизитаКВычету_2330_2350),
	|			КорСчет = &Счет_68_02,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачалаПериода, &ДатаКонецПериода, , Счет = &Счет_68_04_2, , 
	|		Организация = &Организация, КорСчет = &Счет_68_04_1, ) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет = &Счет_68_04_1,
	|			&Субконто_2410,
	|			Организация = &Организация
	|				И Субконто1 = &Аналитика_2410,
	|			КорСчет = &Счет_99_01_1,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачалаПериода, &ДатаКонецПериода, , Счет = &Счет_68_04_2, , 
	|		Организация = &Организация, КорСчет = &Счет_77, ) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачалаПериода, &ДатаКонецПериода, , Счет = &Счет_09, , 
	|		Организация = &Организация, КорСчет = &Счет_68_04_2, ) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет_99_01),
	|			&Субконто_99_01,
	|			Организация = &Организация
	|				И Субконто1 В (&Аналитика_99_01),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачалаПериода, &ДатаКонецПериода, , Счет = &Счет_99_09, , 
	|		Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет = &Счет_99_02_4
	|				ИЛИ Счет В ИЕРАРХИИ (&Счет_99_01),
	|			,
	|			Организация = &Организация,
	|			КорСчет = &Счет_77,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет = &Счет_99_02_4
	|				ИЛИ Счет В ИЕРАРХИИ (&Счет_99_01),
	|			,
	|			Организация = &Организация,
	|			КорСчет = &Счет_09,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаКонецПериода,
	|			,
	|			Счет В ИЕРАРХИИ (&СчетДт_2120)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетДт_2210)
	|				ИЛИ Счет В ИЕРАРХИИ (&СчетДт_2220),
	|			,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ОКК_Строка_2200 = Результат[0].Выгрузить().Итог("Сумма");
	ОДК_Строка_2200_ = Результат[1].Выгрузить().Итог("Сумма");
	ПрибыльПродаж = ОКК_Строка_2200 - ОДК_Строка_2200_;
	
	Сумма_2310_2320_2340 = Результат[2].Выгрузить().Итог("Сумма");
	Вычеты_2340 = Результат[3].Выгрузить().Итог("Сумма");
	Строка_2310_2320_2340 = Сумма_2310_2320_2340 - Вычеты_2340;
	
	Сумма_2330_2350 = Результат[4].Выгрузить().Итог("Сумма");
	Вычеты_2350 = Результат[5].Выгрузить().Итог("Сумма");
	Строка_2330_2350 = Сумма_2330_2350 - Вычеты_2350;
	
	Строка_2410_ПБУ = Результат[6].Выгрузить().Итог("Сумма");
	Строка_2410_НеПБУ = Результат[7].Выгрузить().Итог("Сумма");
	
	Строка_2430_ПБУ = Результат[8].Выгрузить().Итог("Сумма");
	
	Строка_2450_ПБУ = Результат[9].Выгрузить().Итог("Сумма");
	
	ОДК_99_01 = Результат[10].Выгрузить().Итог("Сумма");
	Оборот_99_09 = Результат[11].Выгрузить().Итог("Сумма");
	Строка_2460_Кор_77 = Результат[12].Выгрузить().Итог("Сумма");
	Строка_2460_Кор_09 = Результат[13].Выгрузить().Итог("Сумма");
	Строка_2460 = ОДК_99_01 - Строка_2410_НеПБУ + Оборот_99_09 + Строка_2460_Кор_09 - Строка_2460_Кор_77;
	
	Если ТекущаяУчетнаяПолитика.ПоддержкаПБУ18 Тогда
		ЧистаяПрибыль = ПрибыльПродаж + Строка_2310_2320_2340 - Строка_2330_2350 - Строка_2410_ПБУ - Строка_2430_ПБУ + 
			Строка_2450_ПБУ - Строка_2460;
	Иначе
		ЧистаяПрибыль = ПрибыльПродаж + Строка_2310_2320_2340 - Строка_2330_2350 - Строка_2410_НеПБУ - Строка_2430_ПБУ + 
			Строка_2450_ПБУ - Строка_2460;
	КонецЕсли;
	
	СебестоимостьПроданныхТоваров = Результат[14].Выгрузить().Итог("Сумма");
	
КонецПроцедуры

Функция ПолучитьСтоимостьАктивов(Организация, ПериодыОтчета)
	
	КонецПериода= Новый Граница(КонецДня(ПериодыОтчета.КонецПериода), ВидГраницы.Включая);
	
	СКД1_1 = Новый Массив;
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ЖивотныеНаВыращиванииИОткорме);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМЦ);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ОтклонениеВСтоимостиМЦ);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ВыполненныеЭтапыПоНезавершеннымРаботам);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.ФинансовыеВложения);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоПрочимОперациям);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВкладамВУставныйКапитал);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов);
	СКД1_1.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	
	СКД1_2 = Новый Массив;
	СКД1_2.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеОС);
	СКД1_2.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеМЦ);
	СКД1_2.Добавить(ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации);
	СКД1_2.Добавить(ПланыСчетов.Хозрасчетный.НДСУплачиваемыйПриИмпортеИзТаможенногоСоюза);
	СКД1_2.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
	СКД1_2.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал);
	СКД1_2.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);
	СКД1_2.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПрочимОперациям);
	СКД1_2.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов);
	
	СКД2_1 = Новый Массив;
	СКД2_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	СКД2_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
	СКД2_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПрочимОперациям);
	
	СКД3_1 = Новый Массив;
	СКД3_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
	СКД3_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал);
	СКД3_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);
	
	СКД4_1 = Новый Массив;
	СКД4_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
	СКД4_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	
	СКД4_2 = Новый Массив;
	СКД4_2.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСБюджетом);
	СКД4_2.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы);
	СКД4_2.Добавить(ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	СКД4_2.Добавить(ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению);
	СКД4_2.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);
	СКД4_2.Добавить(ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате);
	
	СКД5_1 = Новый Массив;
	СКД5_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	
	СКД5_2 = Новый Массив;
	СКД5_2.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
	СКД5_2.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным);
	СКД5_2.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет);
	СКД5_2.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	СКД5_2.Добавить(ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке);
	
	СКД6_1 = Новый Массив;
	СКД6_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСБюджетом);
	СКД6_1.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы);
	
	СКК1_1 = Новый Массив;
	СКК1_1.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	СКК1_1.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	СКК1_1.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиМЦ);
	СКК1_1.Добавить(ПланыСчетов.Хозрасчетный.ОтклонениеВСтоимостиМЦ);
	СКК1_1.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);
	СКК1_1.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодОбесценениеФинансовыхВложений);
	СКК1_1.Добавить(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	СКК1_1.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным);
	
	СКК2_1 = Новый Массив;
	СКК2_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
	СКК2_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал);
	СКК2_1.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);
	
	ЗапросНаСчета = Новый Запрос;
	ЗапросНаСчета.УстановитьПараметр("СКД1_1", СКД1_1);
	ЗапросНаСчета.УстановитьПараметр("СКД1_2", СКД1_2);
	ЗапросНаСчета.УстановитьПараметр("СКД2_1", СКД2_1);
	ЗапросНаСчета.УстановитьПараметр("СКД3_1", СКД3_1);
	ЗапросНаСчета.УстановитьПараметр("СКД4_1", СКД4_1);
	ЗапросНаСчета.УстановитьПараметр("СКД4_2", СКД4_2);
	ЗапросНаСчета.УстановитьПараметр("СКД5_1", СКД5_1);
	ЗапросНаСчета.УстановитьПараметр("СКД5_2", СКД5_2);
	ЗапросНаСчета.УстановитьПараметр("СКД6_1", СКД6_1);
	ЗапросНаСчета.УстановитьПараметр("СКК1_1", СКК1_1);
	ЗапросНаСчета.УстановитьПараметр("СКК2_1", СКК2_1);
	
	ЗапросНаСчета.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СКД1_1)
	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СКД1_2)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СКД2_1)
	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СКД3_1)
	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СКД4_1)
	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СКД4_2)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СКД5_1)
	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СКД5_2)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СКД6_1)
	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СКК1_1)
	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СКК2_1)
	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код";
	
	РезультатЗапросаНаСчета = ЗапросНаСчета.ВыполнитьПакет();
	СКД1 = РезультатЗапросаНаСчета[0].Выгрузить().ВыгрузитьКолонку("Счет");
	
	СКД2 = РезультатЗапросаНаСчета[1].Выгрузить().ВыгрузитьКолонку("Счет");
	СКД2_Субконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	
	СКД3 = РезультатЗапросаНаСчета[2].Выгрузить().ВыгрузитьКолонку("Счет");
	СКД3_Субконто = Новый Массив;
	СКД3_Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СКД3_Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СКД4 = РезультатЗапросаНаСчета[3].Выгрузить().ВыгрузитьКолонку("Счет");
	СКД4_Субконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	
	СКД5 = РезультатЗапросаНаСчета[4].Выгрузить().ВыгрузитьКолонку("Счет");
	СКД5_Субконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	
	СКД6 = РезультатЗапросаНаСчета[5].Выгрузить().ВыгрузитьКолонку("Счет");
	СКД6_Субконто = Новый Массив;
	СКД6_Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	СКД6_Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	СКК1 = РезультатЗапросаНаСчета[6].Выгрузить().ВыгрузитьКолонку("Счет");
	СКК2 = РезультатЗапросаНаСчета[7].Выгрузить().ВыгрузитьКолонку("Счет");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецПериода);
	Запрос.УстановитьПараметр("СКД1", СКД1);
	Запрос.УстановитьПараметр("СКД2", СКД2);
	Запрос.УстановитьПараметр("СКД3", СКД3);
	Запрос.УстановитьПараметр("СКД4", СКД4);
	Запрос.УстановитьПараметр("СКД5", СКД5);
	Запрос.УстановитьПараметр("СКД6", СКД6);
	Запрос.УстановитьПараметр("СКК1", СКК1);
	Запрос.УстановитьПараметр("СКК2", СКК2);
	Запрос.УстановитьПараметр("СКД2_Субконто", СКД2_Субконто);
	Запрос.УстановитьПараметр("СКД3_Субконто", СКД3_Субконто);
	Запрос.УстановитьПараметр("СКД4_Субконто", СКД4_Субконто);
	Запрос.УстановитьПараметр("СКД5_Субконто", СКД5_Субконто);
	Запрос.УстановитьПараметр("СКД6_Субконто", СКД6_Субконто);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В (&СКД1), , 
	|		Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В (&СКК1), , 
	|		Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В (&СКД2), &СКД2_Субконто, 
	|		Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В (&СКД3), &СКД3_Субконто, 
	|		Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В (&СКД4), &СКД4_Субконто, 
	|		Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В (&СКД5), &СКД5_Субконто, 
	|		Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В (&СКД6), &СКД6_Субконто, 
	|		Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В (&СКК2), &СКД3_Субконто, 
	|		Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт < 0";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Сумма_1 = Результат[0].Выгрузить().Итог("Сумма");
	Сумма_2 = Результат[1].Выгрузить().Итог("Сумма");
	Сумма_3 = Результат[2].Выгрузить().Итог("Сумма");
	Сумма_4 = Результат[3].Выгрузить().Итог("Сумма");
	Сумма_5 = Результат[4].Выгрузить().Итог("Сумма");
	Сумма_6 = Результат[5].Выгрузить().Итог("Сумма");
	Сумма_7 = Результат[6].Выгрузить().Итог("Сумма");
	Сумма_8 = Результат[7].Выгрузить().Итог("Сумма");
	СтоимостьАктивов = Сумма_1 - Сумма_2 + Сумма_3 + Сумма_4 + Сумма_5 + Сумма_6 + Сумма_7 - Сумма_8;
	
	Возврат СтоимостьАктивов;
	
КонецФункции

Процедура ЗаполнитьМакетОтчетаРасшифровкойУровеньРентабельности(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		ДанныеЗаполненияМакета, ДанныеЗаполненияМакетаРасчетПоказателей)
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	
	ОбластьРасчетПоказателей = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателейДополнительный);
	ОбластьРасчетПоказателейПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателейДополнительный);
	ОбластьСравнениеПоказателей = ОбластьРасчетПоказателей.Область(
		ДанныеЗаполненияМакетаРасчетПоказателей.СравнениеПоказателейПродаж);
	
	ЦветФонаНетОснований = Новый Цвет(240, 255, 240);
	ЦветФонаЕстьОснования = Новый Цвет(255, 240, 245);
	
	Если ДанныеЗаполненияМакета.Свойство("ПродажиНеОснование") Тогда
		ОбластьСравнениеПоказателей.ЦветФона = ЦветФонаНетОснований;
	Иначе
		ОбластьСравнениеПоказателей.ЦветФона = ЦветФонаЕстьОснования;
	КонецЕсли;
	
	ОбластьРасчетПоказателей.Параметры.Заполнить(ДанныеЗаполненияМакетаРасчетПоказателей);
	ОбластьРасчетПоказателейПФ.Параметры.Заполнить(ДанныеЗаполненияМакетаРасчетПоказателей);
	
	РезультатПроверкиКритериев.Вывести(ОбластьРасчетПоказателей, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьРасчетПоказателейПФ, 2);
	
	РезультатПроверкиКритериев.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

#КонецОбласти

#Область ПрофедурыИФункцииКритерияРезультатаДеятельностьСВысокимНалоговымРиском

Процедура ДеятельностьСВысокимНалоговымРиском(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ)
	
	Подробнее = Новый Структура("СсылкаНаКритерий", "http://its.1c.ru/db/nalprov#content:26721:1:12");
	
	ДанныеЗаполненияМакета = Новый Структура();
	ДанныеЗаполненияМакета.Вставить("НомерКритерия", "12.");
	ДанныеЗаполненияМакета.Вставить("ОбластьТекстаНаименованияКритерия", "ДеятельностьСВысокимНалоговымРиском");
	ДанныеЗаполненияМакета.Вставить("ОснованиеПроверки", "ОснованиеПроверки_ДеятельностьСВысокимНалоговымРиском");
	ДанныеЗаполненияМакета.Вставить("Подробнее_12", Подробнее);
	ДанныеЗаполненияМакета.Вставить("НетДанных", "НетДанных_ДеятельностьСВысокимНалоговымРиском");
	
	ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ,
		ДанныеЗаполненияМакета);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияМакетаРезультатаПроверкиКритериев

Процедура ЗаполнитьМакетОтчетаНеПроверяется(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		ДанныеЗаполненияМакета)
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	
	МакетОписаниеРезультатПроверки = 
		Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ОписаниеРезультатовПроверки");
	
	ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("ЗаголовокРезультатаКритерия");
	ОбластьНаименованиякритерия = ОбластьЗаголовок.Область("НаименованиеКритерия");
	ОбластьНаименованиякритерия.ЦветТекста = ЦветаСтиля.НеЗаполненноеСубконто;
	ОбластьОснованиеПроверки = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.ОснованиеПроверки);
	ОбластьНеПроверяется = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.НеПроверяется);
	
	ОбластьЗаголовокПФ = МакетОтчетаПФ.ПолучитьОбласть("ЗаголовокРезультатаКритерия");
	ОбластьНаименованиякритерияПФ = ОбластьЗаголовокПФ.Область("НаименованиеКритерия");
	ОбластьНаименованиякритерияПФ.ЦветТекста = ЦветаСтиля.НеЗаполненноеСубконто;
	ОбластьОснованиеПроверкиПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.ОснованиеПроверки);
	ОбластьНеПроверяетсяПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.НеПроверяется);
	
	ОбластьОтступ_3 = МакетОтчета.ПолучитьОбласть("Отступ_3");
	ОбластьОтступ_5 = МакетОтчета.ПолучитьОбласть("Отступ_5");
	
	ОбластьТекстНаименованиеКритерия = 
		МакетОписаниеРезультатПроверки.Область(ДанныеЗаполненияМакета.ОбластьТекстаНаименованияКритерия).Имя;
	ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", 
		МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|НеПроверяется").Текст);
	
	ОбластьЗаголовок.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьОснованиеПроверки.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьНеПроверяется.Параметры.Заполнить(ДанныеЗаполненияМакета);
	
	ОбластьЗаголовокПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьОснованиеПроверкиПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьНеПроверяетсяПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5);
	РезультатПроверкиКритериев.Вывести(ОбластьЗаголовок);
	РезультатПроверкиКритериев.НачатьГруппуСтрок(, Ложь);
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_3);
	
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьЗаголовокПФ);
	РезультатПроверкиКритериевПФ.НачатьГруппуСтрок(, Ложь);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_3);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОснованиеПроверки, 2);
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериев.Вывести(ОбластьНеПроверяется, 2);
	
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОснованиеПроверкиПФ, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьНеПроверяетсяПФ, 2);
	
	РезультатПроверкиКритериев.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ЗаполнитьМакетОтчетаНетДанных(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		ДанныеЗаполненияМакета)
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	
	МакетОписаниеРезультатПроверки = 
		Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ОписаниеРезультатовПроверки");
	
	ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("ЗаголовокРезультатаКритерия");
	ОбластьКартинки = ОбластьЗаголовок.Область("КартинкаРезультата");
	ОбластьКартинки.Картинка = БиблиотекаКартинок.НетДанныхДляПроверки;
	ОбластьОснованиеПроверки = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.ОснованиеПроверки);
	ОбластьНетДанных = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.НетДанных);
	
	ОбластьЗаголовокПФ = МакетОтчетаПФ.ПолучитьОбласть("ЗаголовокРезультатаКритерия");
	ОбластьКартинкиПФ = ОбластьЗаголовокПФ.Область("КартинкаРезультата");
	ОбластьКартинкиПФ.Картинка = БиблиотекаКартинок.НетДанныхДляПроверки;
	ОбластьОснованиеПроверкиПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.ОснованиеПроверки);
	ОбластьНетДанныхПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.НетДанных);
	
	ОбластьОтступ_3 = МакетОтчета.ПолучитьОбласть("Отступ_3");
	ОбластьОтступ_5 = МакетОтчета.ПолучитьОбласть("Отступ_5");
	
	ОбластьТекстНаименованиеКритерия = 
		МакетОписаниеРезультатПроверки.Область(ДанныеЗаполненияМакета.ОбластьТекстаНаименованияКритерия).Имя;
	ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", 
		МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|НетДанных").Текст);
	
	ОбластьЗаголовок.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьОснованиеПроверки.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьНетДанных.Параметры.Заполнить(ДанныеЗаполненияМакета);
	
	ОбластьЗаголовокПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьОснованиеПроверкиПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьНетДанныхПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5);
	РезультатПроверкиКритериев.Вывести(ОбластьЗаголовок);
	РезультатПроверкиКритериев.НачатьГруппуСтрок(, Ложь);
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_3);
	
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьЗаголовокПФ);
	РезультатПроверкиКритериевПФ.НачатьГруппуСтрок(, Ложь);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_3);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОснованиеПроверки, 2);
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериев.Вывести(ОбластьНетДанных, 2);
	
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОснованиеПроверкиПФ, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьНетДанныхПФ, 2);
	
	Если ДанныеЗаполненияМакета.Свойство("ОтчетыНетДанных") Тогда
		ОтчетыНетДанных = ДанныеЗаполненияМакета.ОтчетыНетДанных;
		Для Каждого Отчет Из ОтчетыНетДанных Цикл
			РезультатПроверкиКритериев.Вывести(ОбластьОтступ_3, 2);
			ОбластьНетОтчета = МакетОтчета.ПолучитьОбласть("НетДанныхНетОтчетов");
			ОбластьНетОтчета.Параметры.Заполнить(Отчет);
			РезультатПроверкиКритериев.Вывести(ОбластьНетОтчета, 2);
			
			РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_3, 2);
			ОбластьНетОтчетаПФ = МакетОтчетаПФ.ПолучитьОбласть("НетДанныхНетОтчетов");
			ОбластьНетОтчетаПФ.Параметры.Заполнить(Отчет);
			РезультатПроверкиКритериевПФ.Вывести(ОбластьНетОтчетаПФ, 2);
		КонецЦикла;
		РезультатПроверкиКритериев.ЗакончитьГруппуСтрок();
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиКритериев.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ЗаполнитьМакетОтчетаЕстьРезультат(РезультатПроверкиКритериев, РезультатПроверкиКритериевПФ, 
		ДанныеЗаполненияМакета, ДанныеЗаполненияМакетаРасчетПоказателей);
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	МакетОписаниеРезультатПроверки = 
		Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ОписаниеРезультатовПроверки");
	
	ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("ЗаголовокРезультатаКритерия");
	ОбластьКартинки = ОбластьЗаголовок.Область("КартинкаРезультата");
	
	ОбластьОснованиеПроверки = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.ОснованиеПроверки);
	ОбластьРасчетПоказателей = МакетОтчета.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателей);
	ОбластьСравнениеПоказателей = ОбластьРасчетПоказателей.Область(
		ДанныеЗаполненияМакетаРасчетПоказателей.СравнениеПоказателей);
	
	ОбластьЗаголовокПФ = МакетОтчетаПФ.ПолучитьОбласть("ЗаголовокРезультатаКритерия");
	ОбластьКартинкиПФ = ОбластьЗаголовокПФ.Область("КартинкаРезультата");
	
	ОбластьОснованиеПроверкиПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.ОснованиеПроверки);
	ОбластьРасчетПоказателейПФ = МакетОтчетаПФ.ПолучитьОбласть(ДанныеЗаполненияМакета.РасчетПоказателей);
	
	ОбластьОтступ_3 = МакетОтчета.ПолучитьОбласть("Отступ_3");
	ОбластьОтступ_5 = МакетОтчета.ПолучитьОбласть("Отступ_5");
	
	ЦветФонаНетОснований = Новый Цвет(240, 255, 240);
	ЦветФонаЕстьОснования = Новый Цвет(255, 240, 245);
	
	ОбластьТекстНаименованиеКритерия = 
		МакетОписаниеРезультатПроверки.Область(ДанныеЗаполненияМакета.ОбластьТекстаНаименованияКритерия).Имя;
	
	Если ДанныеЗаполненияМакета.Свойство("ЕстьОснование") Тогда
		ОбластьКартинки.Картинка = БиблиотекаКартинок.ЕстьРискПроверки;
		Если ДанныеЗаполненияМакета.Свойство("Калькулятор_ТемпыРасходовДополнительная") Тогда
			НаименованиеКритерия = 
				МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|ЕстьОснования").Текст +
				Символы.ПС + "есть несоответствие темпов роста расходов над доходами в налоговой " + 
					Символы.ПС + "и бухгалтерской отчетности";
		Иначе
			НаименованиеКритерия = 
				МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|ЕстьОснования").Текст;
		КонецЕсли;
		ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", НаименованиеКритерия);
		Если ДанныеЗаполненияМакета.НомерКритерия = "11." Тогда
			Если ДанныеЗаполненияМакета.Свойство("АктивыНеОснование") Тогда
				ОбластьСравнениеПоказателей.ЦветФона = ЦветФонаНетОснований;
			Иначе
				ОбластьСравнениеПоказателей.ЦветФона = ЦветФонаЕстьОснования;
			КонецЕсли;
		Иначе
			ОбластьСравнениеПоказателей.ЦветФона = ЦветФонаЕстьОснования;
		КонецЕсли;
		
		ОбластьКартинкиПФ.Картинка = БиблиотекаКартинок.ЕстьРискПроверки;
	Иначе
		
		ОбластьКартинки.Картинка = БиблиотекаКартинок.НетРискаПроверки;
		НаименованиеКритерия = 
			МакетОписаниеРезультатПроверки.Область(ОбластьТекстНаименованиеКритерия + "|НетОснований").Текст;
		ДанныеЗаполненияМакета.Вставить("НаименованиеКритерия", НаименованиеКритерия);
		Если ДанныеЗаполненияМакета.НомерКритерия = "11." Тогда
			Если ДанныеЗаполненияМакета.Свойство("АктивыНеОснование") Тогда
				ОбластьСравнениеПоказателей.ЦветФона = ЦветФонаНетОснований;
			Иначе
				ОбластьСравнениеПоказателей.ЦветФона = ЦветФонаЕстьОснования;
			КонецЕсли;
		Иначе
			ОбластьСравнениеПоказателей.ЦветФона = ЦветФонаНетОснований;
		КонецЕсли;
		ОбластьКартинкиПФ.Картинка = БиблиотекаКартинок.НетРискаПроверки;
		
	КонецЕсли;
	
	Если ДанныеЗаполненияМакетаРасчетПоказателей.Свойство("ОбластиГиперссылок") Тогда
		ЦветТекстаГиперссылки = Новый Цвет(83, 106, 194);
		ОбластиГиперссылок = ДанныеЗаполненияМакетаРасчетПоказателей.ОбластиГиперссылок;
		Для Каждого ОбластьГиперссылки Из ОбластиГиперссылок Цикл
			НоваяОбласть = ОбластьРасчетПоказателей.Область(ОбластьГиперссылки);
			НоваяОбласть.Гиперссылка = Истина;
			НоваяОбласть.ЦветТекста = ЦветТекстаГиперссылки;
		КонецЦикла;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьОснованиеПроверки.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьРасчетПоказателей.Параметры.Заполнить(ДанныеЗаполненияМакетаРасчетПоказателей);
	
	ОбластьЗаголовокПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьОснованиеПроверкиПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	ОбластьРасчетПоказателейПФ.Параметры.Заполнить(ДанныеЗаполненияМакетаРасчетПоказателей);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5);
	РезультатПроверкиКритериев.Вывести(ОбластьЗаголовок);
	РезультатПроверкиКритериев.НачатьГруппуСтрок(, Ложь);
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_3);
	
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьЗаголовокПФ);
	РезультатПроверкиКритериевПФ.НачатьГруппуСтрок(, Ложь);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_3);
	
	РезультатПроверкиКритериев.Вывести(ОбластьОснованиеПроверки, 2);
	РезультатПроверкиКритериев.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериев.Вывести(ОбластьРасчетПоказателей, 2);
	
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОснованиеПроверкиПФ, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьОтступ_5, 2);
	РезультатПроверкиКритериевПФ.Вывести(ОбластьРасчетПоказателейПФ, 2);
	
	Если ДанныеЗаполненияМакета.Свойство("ЕстьРасшифровкаПоказателей") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиКритериев.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ЗаполнитьМакетОтчетаЗаголовокОтчета(ПараметрыОтчета, РезультатВыполнения, РезультатПроверкиКритериев, 
		РезультатПроверкиКритериевПФ, РезультатыПроверки)
	
	Результат = Новый ТабличныйДокумент;
	РезультатДляПечати = Новый ТабличныйДокумент;
	
	МакетОтчета = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("МакетОтчета");
	МакетОтчетаПФ = Отчеты.ОценкаРискаНалоговойПроверки.ПолучитьМакет("ПечатнаяФорма");
	
	НачалоПериода = НачалоГода(ПараметрыОтчета.НачалоПериода);
	КонецПериода = КонецДня(ПараметрыОтчета.КонецПериода);
	
	Организация = ПараметрыОтчета.Организация;
	ЭтоЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	Период = ПредставлениеПериода(НачалоПериода, КонецПериода, "ФП=Истина");
	НаименованиеОрганизации = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "НаименованиеПолное"));
	
	ИНН = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН"));
	
	Если ЭтоЮридическоеЛицо Тогда
		ЮридическийАдрес =СокрЛП(УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, 
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации));
		КПП = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП"));
		СтрокаПодстановки = НСтр("ru='ИНН/КПП: %1/%2'");
		ИННКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки, ИНН, КПП);
	Иначе
		ЮридическийАдрес =СокрЛП(УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Организация.ИндивидуальныйПредприниматель, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица));
		СтрокаПодстановки = НСтр("ru='ИНН: %1'");
		ИННКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки, ИНН);
	КонецЕсли;
	
	ДатаРегистрации = Формат(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации"), "ДЛФ=Д");
	КодОКВЭД = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОКВЭД"));
	НаименованиеОКВЭД = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "НаименованиеОКВЭД"));
	
	ДанныеЗаполненияМакета = Новый Структура;
	ДанныеЗаполненияМакета.Вставить("Период", Период);
	ДанныеЗаполненияМакета.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
	ДанныеЗаполненияМакета.Вставить("ИННКПП", ИННКПП);
	ДанныеЗаполненияМакета.Вставить("Адрес", ЮридическийАдрес);
	ДанныеЗаполненияМакета.Вставить("ДатаНачалаДеятельности", ДатаРегистрации);
	ДанныеЗаполненияМакета.Вставить("ОКВЭДКод", КодОКВЭД);
	ДанныеЗаполненияМакета.Вставить("ОКВЭДНаименование", НаименованиеОКВЭД);
		
	ОбластьЗаголовокОтчетаПФ = МакетОтчетаПФ.ПолучитьОбласть("ЗаголовокОтчетаОсновнаяИнформация");
	ОбластьОтступа_5 = МакетОтчета.ПолучитьОбласть("Отступ_5");
	ОбластьОтступа_3 = МакетОтчета.ПолучитьОбласть("Отступ_3");
	ОбластьЗаголовокОтчетаПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
	
	РезультатДляПечати.Вывести(ОбластьЗаголовокОтчетаПФ);
	
	Если ЮридическийАдрес <> "" Тогда
		ОбластьЗаголовокОтчетаАдресПФ = МакетОтчетаПФ.ПолучитьОбласть("ЗаголовокОтчетаАдрес");
		ОбластьЗаголовокОтчетаАдресПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
		РезультатДляПечати.Вывести(ОбластьЗаголовокОтчетаАдресПФ);
	КонецЕсли;
	
	РезультатДляПечати.Вывести(ОбластьОтступа_5);
	
	Если ДатаРегистрации <> "" Тогда
		ОбластьЗаголовокОтчетаДатаРегистрацииПФ = МакетОтчетаПФ.ПолучитьОбласть("ЗаголовокОтчетаНачалоДеятельности");
		ОбластьЗаголовокОтчетаДатаРегистрацииПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
		РезультатДляПечати.Вывести(ОбластьЗаголовокОтчетаДатаРегистрацииПФ);
	КонецЕсли;
	
	КоличествоВыполненныхКритериев=0;
	КоличествоНеВыполненныхКритериев=0;
	Если РезультатыПроверки.Количество()=0 Тогда
				
	Иначе
		ПреобразоватьРезультатРасчетаКритерия(РезультатыПроверки, "Критерий1",КоличествоВыполненныхКритериев,КоличествоНеВыполненныхКритериев);
		ПреобразоватьРезультатРасчетаКритерия(РезультатыПроверки, "Критерий2",КоличествоВыполненныхКритериев,КоличествоНеВыполненныхКритериев);
		ПреобразоватьРезультатРасчетаКритерия(РезультатыПроверки, "Критерий3",КоличествоВыполненныхКритериев,КоличествоНеВыполненныхКритериев);
		ПреобразоватьРезультатРасчетаКритерия(РезультатыПроверки, "Критерий4",КоличествоВыполненныхКритериев,КоличествоНеВыполненныхКритериев);
		ПреобразоватьРезультатРасчетаКритерия(РезультатыПроверки, "Критерий5",КоличествоВыполненныхКритериев,КоличествоНеВыполненныхКритериев);
		ПреобразоватьРезультатРасчетаКритерия(РезультатыПроверки, "Критерий6",КоличествоВыполненныхКритериев,КоличествоНеВыполненныхКритериев);
		ПреобразоватьРезультатРасчетаКритерия(РезультатыПроверки, "Критерий7",КоличествоВыполненныхКритериев,КоличествоНеВыполненныхКритериев);
		ПреобразоватьРезультатРасчетаКритерия(РезультатыПроверки, "Критерий11",КоличествоВыполненныхКритериев,КоличествоНеВыполненныхКритериев);
	КонецЕсли;

	ОбластьЗаголовокОтчетаРезультатПроверкиЕстьОснования = МакетОтчета.ПолучитьОбласть("ЗаголовокОтчетаРезультатПроверкиЕстьОснования");
	ОбластьЗаголовокОтчетаРезультатПроверкиЕстьОснованияПФ = МакетОтчетаПФ.ПолучитьОбласть("ЗаголовокОтчетаРезультатПроверкиЕстьОснования");
	
	ОбластьЗаголовокОтчетаРезультатПроверкиНетОснований = МакетОтчета.ПолучитьОбласть("ЗаголовокОтчетаРезультатПроверкиНетОснований");
	ОбластьЗаголовокОтчетаРезультатПроверкиНетОснованийПФ = МакетОтчетаПФ.ПолучитьОбласть("ЗаголовокОтчетаРезультатПроверкиНетОснований");
	
	Если КоличествоВыполненныхКритериев=0 Тогда
		Если КоличествоНеВыполненныхКритериев>0 Тогда
			ДанныеЗаполненияМакета.Вставить("КоличествоКритериевНетОснований", КоличествоНевыполненныхКритериев);
			ОбластьЗаголовокОтчетаРезультатПроверкиНетОснований.Параметры.Заполнить(ДанныеЗаполненияМакета);
			ОбластьЗаголовокОтчетаРезультатПроверкиНетОснованийПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
			Результат.Вывести(ОбластьОтступа_3);
			Результат.Вывести(ОбластьЗаголовокОтчетаРезультатПроверкиНетОснований);
			РезультатДляПечати.Вывести(ОбластьЗаголовокОтчетаРезультатПроверкиНетОснованийПФ);			
		КонецЕсли;		
	Иначе
		Результат.Вывести(ОбластьОтступа_3);
		ДанныеЗаполненияМакета.Вставить("КоличествоКритериевЕстьОснования", КоличествоВыполненныхКритериев);
		ОбластьЗаголовокОтчетаРезультатПроверкиЕстьОснования.Параметры.Заполнить(ДанныеЗаполненияМакета);
		ОбластьЗаголовокОтчетаРезультатПроверкиЕстьОснованияПФ.Параметры.Заполнить(ДанныеЗаполненияМакета);
		Результат.Вывести(ОбластьЗаголовокОтчетаРезультатПроверкиЕстьОснования);
		РезультатДляПечати.Вывести(ОбластьЗаголовокОтчетаРезультатПроверкиЕстьОснованияПФ);				
	КонецЕсли;	

	Результат.Вывести(РезультатПроверкиКритериев);
	РезультатДляПечати.Вывести(РезультатПроверкиКритериевПФ);
	
	РезультатВыполнения.Вставить("Результат", Результат);
	РезультатВыполнения.Вставить("РезультатДляПечати", РезультатДляПечати);
	
КонецПроцедуры

Процедура ПреобразоватьРезультатРасчетаКритерия(РезультатыПроверки, Ключ, КоличествоВыполненныхКритериев, КоличествоНеВыполненныхКритериев)
	
	ЗначениеКритерия="";
	Если РезультатыПроверки.Свойство(Ключ,ЗначениеКритерия) Тогда
		Если ЗначениеКритерия="ЕстьОснование" Тогда
			КоличествоВыполненныхКритериев=КоличествоВыполненныхКритериев+1;	
		ИначеЕсли ЗначениеКритерия="НетОснования" Тогда	
			КоличествоНеВыполненныхКритериев=КоличествоНеВыполненныхКритериев+1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

Функция ВыручкаТолькоЕНВД(Организация, ПериодыОтчета)
	
	СчетаВыручкиЕНВД = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВыручкиЕНВД();
	СчетаВыручкиНеЕНВД = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВыручкиНеЕНВД();
	
	КонецПериода = Новый Граница(ПериодыОтчета.КонецПериода, ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачалаПериода", ПериодыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("СчетаНеЕНВД", СчетаВыручкиНеЕНВД);
	Запрос.УстановитьПараметр("СчетаЕНВД", СчетаВыручкиЕНВД);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК СуммаВыручкиНеЕНВД,
	|	0 КАК СуммаВыручкиЕНВД
	|ПОМЕСТИТЬ ТаблицаОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачалаПериода, &ДатаКонецПериода, , Счет В (&СчетаНеЕНВД), , 
	|		Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачалаПериода, &ДатаКонецПериода, , Счет В (&СчетаЕНВД), , 
	|		Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сумма(ТаблицаОбороты.СуммаВыручкиНеЕНВД) КАК СуммаВыручкиНеЕНВД,
	|	Сумма(ТаблицаОбороты.СуммаВыручкиЕНВД) КАК СуммаВыручкиЕНВД
	|ИЗ
	|	ТаблицаОбороты КАК ТаблицаОбороты";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если (Выборка.СуммаВыручкиНеЕНВД = 0)
			И (Выборка.СуммаВыручкиЕНВД > 0) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДанныеРасчетаУСН(Параметры)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Документ.ДокументРасчетовСКонтрагентом.ПустаяСсылка) КАК Регистратор,
	|	&Организация КАК Организация,
	|	&НачалоГода КАК НачалоГода,
	|	&КонДата КАК КонДата,
	|	ИСТИНА КАК ЭтоНачалоГода,
	|	ЛОЖЬ КАК ЭтоКонецГода,
	|	&СтавкаНалогаУСН КАК СтавкаНалогаУСН,
	|	&ПрименяетсяУСН КАК ПрименяетсяУСН,
	|	&ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
	|	&ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы";
	
	Запрос.УстановитьПараметр("Период"     , Параметры.КонецПериода);
	Запрос.УстановитьПараметр("Регистратор", Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("НачалоГода" , Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("КонДата"    , Параметры.КонецПериода);
	Запрос.УстановитьПараметр("СтавкаНалогаУСН", 
		УчетнаяПолитика.СтавкаНалогаУСН(Параметры.Организация, Параметры.КонецПериода));
	Запрос.УстановитьПараметр("ПрименяетсяУСН", 
		УчетнаяПолитика.ПрименяетсяУСН(Параметры.Организация, Параметры.КонецПериода));
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходы", 
		УчетнаяПолитика.ПрименяетсяУСНДоходы(Параметры.Организация, Параметры.КонецПериода));
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходыМинусРасходы", 
		УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Параметры.Организация, Параметры.КонецПериода));
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
	СтруктураТаблиц = УчетУСН.ПодготовитьТаблицыНачисленияНалогаУСН(ТаблицаРеквизитов);
	СправкаРасчетУСН = СтруктураТаблиц.ТаблицаСправкиРасчета;
	
	Если СправкаРасчетУСН <> Неопределено
		И СправкаРасчетУСН.Количество() <> 0 Тогда
		Результат = СправкаРасчетУСН;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли