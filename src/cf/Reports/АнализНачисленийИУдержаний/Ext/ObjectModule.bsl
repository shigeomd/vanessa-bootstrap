#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ИнициализироватьОтчет();
	
	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
	Если КлючВарианта = "Т51" Тогда
		
		Попытка
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФормаТ51";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ДокументРезультат.АвтоМасштаб = Истина;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			
			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			
			// Нужно проверить включена ли группировка по подразделениям.
			ЕстьГруппировкаПоПодразделению = Ложь;
			ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
			ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
			
			Если Не ЕстьГруппировкаПоПодразделению Тогда
				Для каждого ЭлементСортировки Из НастройкиОтчета.Порядок.Элементы Цикл
					Если ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных("Подразделение.РеквизитДопУпорядочивания") Тогда
						ЭлементСортировки.Использование = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ИзменитьГруппировкиВариантаТ49Т51(НастройкиОтчета.Структура, ЕстьГруппировкаПоПодразделению);
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДанныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.ПФ_MXL_Т51");
			
			Макеты = Новый Структура("ШапкаДокумента,Шапка,Строка,ПустаяСтрока,Подвал,ИтогоПоСтранице,ИтогоПоВедомости");
			
			Макеты.ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
			Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
			Макеты.Строка = Макет.ПолучитьОбласть("Строка");
			Макеты.ПустаяСтрока = Макет.ПолучитьОбласть("Строка");
			Макеты.Подвал = Макет.ПолучитьОбласть("Подвал");
			Макеты.ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			Макеты.ИтогоПоВедомости = Макет.ПолучитьОбласть("ИтогоПоВедомости");
			
			Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
				Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
					ВывестиОрганизациюТ51(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей);
				КонецЦикла;
			КонецЦикла;
			
			СтандартнаяОбработка = Ложь;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru = 'В настройку отчета Т-51 внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	ИначеЕсли КлючВарианта = "Т49" Тогда
		
		Попытка
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФормаТ49";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ДокументРезультат.АвтоМасштаб = Истина;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			
			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			
			// Нужно проверить включена ли группировка по подразделениям.
			ЕстьГруппировкаПоПодразделению = Ложь;
			ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
			ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
			
			Если Не ЕстьГруппировкаПоПодразделению Тогда
				Для каждого ЭлементСортировки Из НастройкиОтчета.Порядок.Элементы Цикл
					Если ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных("Подразделение.РеквизитДопУпорядочивания") Тогда
						ЭлементСортировки.Использование = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ИзменитьГруппировкиВариантаТ49Т51(НастройкиОтчета.Структура, ЕстьГруппировкаПоПодразделению);
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
			ДополнительныеНачисления = УчетНачисленнойЗарплаты.ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49();
			УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисления, НастройкиОтчета);
			ДополнительныеУдержания = УчетНачисленнойЗарплаты.ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49();
			УчетНачисленнойЗарплаты.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеУдержания, НастройкиОтчета, "Удержания");
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДанныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			ПорядокДопНачислений = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачислений(ДополнительныеНачисления, ДанныеОтчета, СоответствиеПользовательскихПолей, 8, 6);
			ПорядокДопУдержаний = УчетНачисленнойЗарплаты.ПорядокДополнительныхУдержаний(ДополнительныеУдержания, ДанныеОтчета, СоответствиеПользовательскихПолей, 15, 4);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.ПФ_MXL_Т49");
			
			Макеты = Новый Структура("ШапкаДокумента,Шапка,Строка,ПустаяСтрока,Подвал,ИтогоПоСтранице,ИтогоПоВедомости");
			
			Макеты.ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
			Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
			Макеты.Строка = Макет.ПолучитьОбласть("Строка");
			Макеты.ПустаяСтрока = Макет.ПолучитьОбласть("Строка");
			Макеты.Подвал = Макет.ПолучитьОбласть("Подвал");
			Макеты.ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			Макеты.ИтогоПоВедомости = Макет.ПолучитьОбласть("ИтогоПоВедомости");
			
			Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
				Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
					ВывестиОрганизациюТ49(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
				КонецЦикла;
			КонецЦикла;
			
			СтандартнаяОбработка = Ложь;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru = 'В настройку отчета Т-49 внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	ИначеЕсли КлючВарианта = "РасчетныйЛисток" ИЛИ КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования" Тогда
		
		Попытка
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетныйЛисток";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			ДокументРезультат.АвтоМасштаб = Истина;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			
			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			
			Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Период") Тогда
				НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Период", КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Период);
			КонецЕсли; 
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
			
			// Нужно проверить включена ли группировка по подразделениям.
			ЕстьГруппировкаПоПодразделению = Ложь;
			ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
			ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
			
			Если ЕстьГруппировкаПоПодразделению Тогда
				
			КонецЕсли; 
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДанныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.ПФ_MXL_РасчетныйЛисток");
			
			Макеты = Новый Структура("Шапка1,АвансовыеПлатежи,Шапка2,Подработка,НачисленоУдержано,ПрочиеВыплачено,Льготы,СтрокаДвижений,Итог12,Итог34,Итог56,Сальдо,Группировка,СтатьяФинансирования,ИтогСтатьяФинансирования,Итог12ВНатуральнойФорме");
			
			Макеты.Шапка1 = Макет.ПолучитьОбласть("Шапка1");
			Макеты.АвансовыеПлатежи = Макет.ПолучитьОбласть("АвансовыеПлатежи");
			Макеты.Шапка2 = Макет.ПолучитьОбласть("Шапка2");
			Макеты.Подработка = Макет.ПолучитьОбласть("Подработка");
			Макеты.НачисленоУдержано = Макет.ПолучитьОбласть("НачисленоУдержано");
			Макеты.ПрочиеВыплачено = Макет.ПолучитьОбласть("ПрочиеВыплачено");
			Макеты.Льготы = Макет.ПолучитьОбласть("Льготы");
			Макеты.СтрокаДвижений = Макет.ПолучитьОбласть("СтрокаДвижений");
			Макеты.Итог12 = Макет.ПолучитьОбласть("Итог12");
			Макеты.Итог12ВНатуральнойФорме = Макет.ПолучитьОбласть("Итог12ВНатуральнойФорме");
			Макеты.Итог34 = Макет.ПолучитьОбласть("Итог34");
			Макеты.Итог56 = Макет.ПолучитьОбласть("Итог56");
			Макеты.Сальдо = Макет.ПолучитьОбласть("Сальдо");
			Макеты.Группировка = Макет.ПолучитьОбласть("Группировка");
			Макеты.СтатьяФинансирования = Макет.ПолучитьОбласть("СтатьяФинансирования");
			Макеты.ИтогСтатьяФинансирования = Макет.ПолучитьОбласть("ИтогСтатьяФинансирования");
			
			ГруппироватьПоИсточникамФинансирования = (КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования");
			
			ЕстьГруппировкаПоОрганизации = МожноГруппировать(НастройкиОтчета.Порядок, "Организация");
			
			Если ЕстьГруппировкаПоПодразделению И НЕ МожноГруппировать(НастройкиОтчета.Порядок, "ПодразделениеГоловногоСотрудникаНаКонецПериода.РеквизитДопУпорядочиванияИерархического") Тогда
				ЕстьГруппировкаПоПодразделению = Ложь;
			КонецЕсли; 
			
			Организация = Неопределено;
			Подразделение = Неопределено;
			Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
				
				ДанныеПоНДФЛ  = ДанныеПоНДФЛ(СтрокаМесяца.Строки, СтрокаМесяца.МесяцНачисления);
				
				Для Каждого СтрокаГоловногоСотрудника Из СтрокаМесяца.Строки Цикл
					
					Если ЕстьГруппировкаПоОрганизации И Организация <> СтрокаГоловногоСотрудника.Организация Тогда
						
						Макеты.Группировка.Параметры.НазваниеПараметра = НСтр("ru='Организация'");
						Макеты.Группировка.Параметры.Значение = СтрокаГоловногоСотрудника.Организация;
	
						ДокументРезультат.Вывести(Макеты.Группировка);
						Организация = СтрокаГоловногоСотрудника.Организация;
						
					КонецЕсли; 
					
					Если ЕстьГруппировкаПоПодразделению И Подразделение <> СтрокаГоловногоСотрудника.ПодразделениеГоловногоСотрудникаНаКонецПериода Тогда
						
						Макеты.Группировка.Параметры.НазваниеПараметра = НСтр("ru='Подразделение'");
						Макеты.Группировка.Параметры.Значение = СтрокаГоловногоСотрудника.ПодразделениеГоловногоСотрудникаНаКонецПериода;
	
						ДокументРезультат.Вывести(Макеты.Группировка);
						Подразделение = СтрокаГоловногоСотрудника.ПодразделениеГоловногоСотрудникаНаКонецПериода;
						
					КонецЕсли; 
					
					ВывестиСотрудникаРасчетныйЛисток(СтрокаГоловногоСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ДанныеПоНДФЛ, ГруппироватьПоИсточникамФинансирования);
					
				КонецЦикла;
					
			КонецЦикла;
			
			СтандартнаяОбработка = Ложь;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru = 'В настройку отчета ""Расчетный листок"" внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	ИначеЕсли КлючВарианта = "РегламентированнаяФормаСправкаПоДСВ" Тогда
		
		Попытка
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РегламентированнаяФормаСправкаПоДСВ";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			
			ОбщиеНастройкиМакета = Новый Структура("ДатаАктуальности,ПервыйНомер,Ответственный,ДолжностьОтветственного", ТекущаяДатаСеанса(), 0);
			
			ПроверитьЗначенияПараметров(НастройкиОтчета, ОбщиеНастройкиМакета);
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДанныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			СписокФизическихЛиц = ДанныеОтчета.Строки.ВыгрузитьКолонку("ФизическоеЛицо");
			КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизическихЛиц,
				"Фамилия,Имя,Отчество,ИНН,ДокументКодМВД,ДокументНомер,ДокументСерия,АдресПоПрописке", ОбщиеНастройкиМакета.ДатаАктуальности);
				
			ТаблицаРегистраций = Новый ТаблицаЗначений;
			ТаблицаРегистраций.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
			ТаблицаРегистраций.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.Организации"));
			
			Для каждого СтрокаФизическоеЛицо Из ДанныеОтчета.Строки Цикл
				
				КадровыеДанныеФизическогоЛица = КадровыеДанныеФизическогоЛица(КадровыеДанные, СтрокаФизическоеЛицо.ФизическоеЛицо);
				Для каждого СтрокаГода Из СтрокаФизическоеЛицо.Строки Цикл
					Для каждого СтрокаДанных Из СтрокаГода.Строки Цикл
						
						НоваяСтрокаТаблицыРегистраций = ТаблицаРегистраций.Добавить(); 
						НоваяСтрокаТаблицыРегистраций.Период = Дата(СтрокаДанных.Год, 12, 31, 23, 59, 59);
						НоваяСтрокаТаблицыРегистраций.СтруктурнаяЕдиница = СтрокаДанных.Организация;
						
					КонецЦикла;
				КонецЦикла;
				
			КонецЦикла;
			
			СведенияОРегистрациях = РеквизитыРегистрацийВНалоговомОрганеСтруктурныхЕдиниц(ТаблицаРегистраций);
				
			Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.ПФ_MXL_ФормаКНД1151087");			
			Для каждого СтрокаФизическоеЛицо Из ДанныеОтчета.Строки Цикл
				
				КадровыеДанныеФизическогоЛица = КадровыеДанныеФизическогоЛица(КадровыеДанные, СтрокаФизическоеЛицо.ФизическоеЛицо);
				Для каждого СтрокаГода Из СтрокаФизическоеЛицо.Строки Цикл
					Для каждого СтрокаДанных Из СтрокаГода.Строки Цикл
						
						СведенияОРегистрации = Неопределено;
						
						СведенияПоОрганизации = СведенияОРегистрациях.Получить(СтрокаДанных.Организация);
						Если СведенияПоОрганизации <> Неопределено Тогда
							СведенияОРегистрации = СведенияПоОрганизации.Получить(Дата(СтрокаДанных.Год, 12, 31, 23, 59, 59));
						КонецЕсли; 
						
						Если СведенияОРегистрации = Неопределено Тогда
							СведенияОРегистрации = Новый Структура("Код,КПП", "", "");
						КонецЕсли; 
						
						ВывестиКарточкуПоДСВ(ДокументРезультат, СтрокаДанных, Макет, КадровыеДанныеФизическогоЛица, СведенияОРегистрации, ОбщиеНастройкиМакета);
						
					КонецЦикла;
				КонецЦикла;
				
			КонецЦикла;
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.ПолеСлева				= 5;
			ДокументРезультат.ПолеСправа			= 10;
			ДокументРезультат.ПолеСнизу				= 0;
			ДокументРезультат.ПолеСверху			= 2;
			ДокументРезультат.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РегламентированнаяФормаСправкаПоДСВ";
			ДокументРезультат.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
			СтандартнаяОбработка = Ложь;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru = 'В настройку отчета ""Регламентированная форма справка по ДСВ"" внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	Иначе
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		Если ЗарплатаКадрыОтчеты.УстановитьОтборВариантаОтчета(КлючВарианта, НастройкиОтчета) Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
		КонецЕсли;
		
		УчетНачисленнойЗарплаты.ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(
			ЭтотОбъект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, КлючВарианта);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет() Экспорт
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	УчетНачисленнойЗарплаты.ДополнитьАнализНачисленийИУдержаний(ЭтотОбъект);
	
КонецПроцедуры

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	ИнициализироватьОтчет();
	ЗначениеВДанныеФормы(ЭтотОбъект, Форма.Отчет);
	
	Настройки.СоответствиеПериодичностиПараметров.Вставить(Новый ПараметрКомпоновкиДанных("Период"), Перечисления.ДоступныеПериодыОтчета.Месяц);
	
КонецПроцедуры

// Функция возвращает значение Истина, если в группировках элементов структуры присутствует поле "Период регистрации".
//
Функция НайтиМесяцНачисления(Структура) Экспорт
	
	ЕстьПоле = Ложь;
	
	Если ТипЗнч(Структура) <> Тип("ГруппировкаКомпоновкиДанных")
       И ТипЗнч(Структура) <> Тип("ГруппировкаТаблицыКомпоновкиДанных")
	   И ТипЗнч(Структура) <> Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеМесяцНачисления = Новый ПолеКомпоновкиДанных("МесяцНачисления");
	
	Для каждого ПолеГруппировки Из Структура.ПоляГруппировки.Элементы Цикл
		
		Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеМесяцНачисления Тогда
			
			ЕстьПоле = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПоле И Структура.Структура.Количество() <> 0 Тогда
		
		ЕстьПоле = НайтиМесяцНачисления(Структура.Структура[0]);
		
	КонецЕсли;
	
	Возврат ЕстьПоле;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету Т-51.

Процедура ВывестиОрганизациюТ51(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ЕстьОплатаВНатуральнойФорме = (СтрокаОрганизации[СоответствиеПользовательскихПолей["НачисленоВНатуральнойФорме"]] <> 0);
		
	Если ЕстьГруппировкаПоПодразделению Тогда
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			ВывестиПодразделениеТ51(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ЕстьОплатаВНатуральнойФорме);
		КонецЦикла;
	Иначе
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		КВыплатеПоВедомости = 0;
		
		Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаОрганизации);
		Макеты.ШапкаДокумента.Параметры.ДатаД = Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
		Макеты.Шапка.Параметры.Заполнить(СтрокаОрганизации);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода) Тогда
			Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода.ПолноеНаименование();
		КонецЕсли; 
		ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		Если ЕстьОплатаВНатуральнойФорме Тогда
			Макеты.Шапка.Параметры.ГруппаНачислений2 = НСтр("ru='Оплата в натуральной форме'");
		КонецЕсли;
		ДокументРезультат.Вывести(Макеты.Шапка);
		НомерСтроки = 0;
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ51();
		Для Каждого СтрокаСотрудника Из СтрокаОрганизации.Строки Цикл
			ВывестиСотрудникаТ51(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, КВыплатеПоВедомости, ЕстьОплатаВНатуральнойФорме);
		КонецЦикла;
		ДополнитьСтраницуТ51(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги);
		Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаОрганизации);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		Макеты.Подвал.Параметры.Заполнить(СтрокаОрганизации);
		Макеты.Подвал.Параметры.ПараметрыДанныхОтветственный = ИОФамилияФизическогоЛица(Макеты.Подвал.Параметры.ПараметрыДанныхОтветственный);
		
		Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
	
		Если ЕстьОплатаВНатуральнойФорме Тогда
			Макеты.ИтогоПоВедомости.Параметры.НачисленоСдельно =
				СтрокаОрганизации[СоответствиеПользовательскихПолей["НачисленоВНатуральнойФорме"]];
			Макеты.ИтогоПоВедомости.Параметры.ПрочиеДоходы =
				СтрокаОрганизации[СоответствиеПользовательскихПолей["ПрочиеДоходы"]] + СтрокаОрганизации[СоответствиеПользовательскихПолей["НачисленоСдельно"]];
		КонецЕсли;
	
		ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
		ДокументРезультат.Вывести(Макеты.Подвал);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодразделениеТ51(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ЕстьОплатаВНатуральнойФорме)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	КВыплатеПоВедомости = 0;
	
	Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаПодразделения);
	Макеты.ШапкаДокумента.Параметры.ДатаД = Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
	Макеты.Шапка.Параметры.Заполнить(СтрокаПодразделения);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода) Тогда
		Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода.ПолноеНаименование();
	КонецЕсли; 
	ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	ДокументРезультат.Вывести(Макеты.Шапка);
	НомерСтроки = 0;
	ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ51();
	Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
		ВывестиСотрудникаТ51(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, КВыплатеПоВедомости, ЕстьОплатаВНатуральнойФорме);
	КонецЦикла;
	ДополнитьСтраницуТ51(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги);
	Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаПодразделения);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	Макеты.Подвал.Параметры.Заполнить(СтрокаПодразделения);
	Макеты.Подвал.Параметры.ПараметрыДанныхОтветственный = ИОФамилияФизическогоЛица(Макеты.Подвал.Параметры.ПараметрыДанныхОтветственный);
	
	Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
	
	Если ЕстьОплатаВНатуральнойФорме Тогда
		Макеты.ИтогоПоВедомости.Параметры.НачисленоСдельно =
			СтрокаПодразделения[СоответствиеПользовательскихПолей["НачисленоВНатуральнойФорме"]];
		Макеты.ИтогоПоВедомости.Параметры.ПрочиеДоходы =
			СтрокаПодразделения[СоответствиеПользовательскихПолей["ПрочиеДоходы"]] + СтрокаПодразделения[СоответствиеПользовательскихПолей["НачисленоСдельно"]];
	КонецЕсли;
			
	ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
	ДокументРезультат.Вывести(Макеты.Подвал);
	
КонецПроцедуры

Процедура ВывестиСотрудникаТ51(НомерСтроки, СтрокаГоловногоСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, КВыплатеПоВедомости, ЕстьОплатаВНатуральнойФорме)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	НомерСтроки = НомерСтроки + 1;
	
	МакетСотрудника = Новый ТабличныйДокумент;
	ПромежуточныеИтогиПоГоловномуСотруднику = ПромежуточныеИтогиПоСтраницеТ51();
	НесколькоРабочихМест = СтрокаГоловногоСотрудника.Строки.Количество() > 1;
	
	Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		Макеты.Строка.Параметры.Заполнить(СтрокаСотрудника);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Строка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		
		Если НЕ НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
			Макеты.Строка.Параметры.СотрудникФизическоеЛицоФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(СтрокаСотрудника.СотрудникФизическоеЛицоФИО);
		КонецЕсли;
		
		ОтработаноРабочихДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихДней")];
		ОтработаноРабочихЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихЧасов")];
		ОтработаноПразднВыходныхДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноПразднВыходныхДней")];
		ОтработаноПразднВыходныхЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноПразднВыходныхЧасов")];
		
		Если ЗначениеЗаполнено(ОтработаноРабочихДней) И ОтработаноРабочихДней > 0 Тогда 
			Макеты.Строка.Параметры.ОтработаноРабочихДней = "" + ОтработаноРабочихДней + " (" + ОтработаноРабочихЧасов + ")";
		Иначе
			Макеты.Строка.Параметры.ОтработаноРабочихДней = "";
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ОтработаноПразднВыходныхДней) И ОтработаноПразднВыходныхДней > 0 Тогда 
			Макеты.Строка.Параметры.ОтработаноПразднВыходныхДней = "" + ОтработаноПразднВыходныхДней + " (" + ОтработаноПразднВыходныхЧасов + ")";
		Иначе
			Макеты.Строка.Параметры.ОтработаноПразднВыходныхДней = "";
		КонецЕсли;
				
		Макеты.Строка.Параметры.НомерПП = НомерСтроки;
		Если Макеты.Строка.Параметры.КВыплате < 0 Тогда
			Макеты.Строка.Параметры.КВыплате = 0;
		КонецЕсли;
		
		Если ЕстьОплатаВНатуральнойФорме Тогда
			Макеты.Строка.Параметры.НачисленоСдельно =
				СтрокаСотрудника[СоответствиеПользовательскихПолей["НачисленоВНатуральнойФорме"]];
			Макеты.Строка.Параметры.ПрочиеДоходы =
				СтрокаСотрудника[СоответствиеПользовательскихПолей["ПрочиеДоходы"]] + СтрокаСотрудника[СоответствиеПользовательскихПолей["НачисленоСдельно"]];
		КонецЕсли;
		
		ДобавитьВПромежуточныйИтог(ПромежуточныеИтогиПоГоловномуСотруднику, Макеты.Строка.Параметры);
		КВыплатеПоВедомости = КВыплатеПоВедомости + Макеты.Строка.Параметры.КВыплате;
		
		Если НесколькоРабочихМест Тогда
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
				Макеты.Строка, СтрокаГоловногоСотрудника, СоответствиеПользовательскихПолей, "ДолгЗаОрганизацией,ДолгЗаСотрудником,ВсегоНачислено,НДФЛ,ПрочиеУдержания,ВсегоУдержано,КВыплате");
				
		КонецЕсли;
			
		Если СтрокаСотрудника.Сотрудник <> СтрокаСотрудника.ГоловнойСотрудник Тогда
			Макеты.Строка.Параметры.ДолжностьНаКонецПериодаНаименованиеКраткое = СтрокаСотрудника.СотрудникУточнениеНаименования;
		КонецЕсли; 
		
		МакетСотрудника.Вывести(Макеты.Строка);

	КонецЦикла;
	
	Если МакетСотрудника.ВысотаТаблицы > 1 Тогда
		
		// Номер по порядку
		МакетСотрудника.Область(1, 1, МакетСотрудника.ВысотаТаблицы, 1).Объединить();
		// Табельный номер
		МакетСотрудника.Область(1, 2, МакетСотрудника.ВысотаТаблицы, 2).Объединить();
		// ФИО
		МакетСотрудника.Область(1, 3, МакетСотрудника.ВысотаТаблицы, 3).Объединить();
		// Всего начислено
		МакетСотрудника.Область(1, 17, МакетСотрудника.ВысотаТаблицы, 17).Объединить();
		// НДФЛ
		МакетСотрудника.Область(1, 18, МакетСотрудника.ВысотаТаблицы, 19).Объединить();
		// Прочие удержания
		МакетСотрудника.Область(1, 20, МакетСотрудника.ВысотаТаблицы, 20).Объединить();
		// Всего удержано
		МакетСотрудника.Область(1, 21, МакетСотрудника.ВысотаТаблицы, 22).Объединить();
		// Задолженность за организацией.
		МакетСотрудника.Область(1, 23, МакетСотрудника.ВысотаТаблицы, 23).Объединить();
		// Задолженность за работников.
		МакетСотрудника.Область(1, 24, МакетСотрудника.ВысотаТаблицы, 24).Объединить();
		// К выплате
		МакетСотрудника.Область(1, 25, МакетСотрудника.ВысотаТаблицы, 25).Объединить();
		
	КонецЕсли; 
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(МакетСотрудника);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Тогда
		
		ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
		ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		ДокументРезультат.Вывести(Макеты.Шапка);
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ51();
		
	КонецЕсли;
	
	ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ПромежуточныеИтогиПоГоловномуСотруднику);
	
	ДокументРезультат.Вывести(МакетСотрудника);
	
КонецПроцедуры

Процедура ДополнитьСтраницуТ51(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги)
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(Макеты.ПустаяСтрока);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Цикл
		ДокументРезультат.Вывести(Макеты.ПустаяСтрока);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
	ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
	
КонецПроцедуры

Функция ПромежуточныеИтогиПоСтраницеТ51()
	
	ПромежуточныеИтоги = Новый Структура;
	
	ПромежуточныеИтоги.Вставить("НачисленоПовременно", 0);
	ПромежуточныеИтоги.Вставить("НачисленоСдельно", 0);
	ПромежуточныеИтоги.Вставить("ПрочиеДоходы", 0);
	ПромежуточныеИтоги.Вставить("ДругиеДоходы", 0);
	ПромежуточныеИтоги.Вставить("ВсегоНачислено", 0);
	ПромежуточныеИтоги.Вставить("НДФЛ", 0);
	ПромежуточныеИтоги.Вставить("ПрочиеУдержания", 0);
	ПромежуточныеИтоги.Вставить("ВсегоУдержано", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаОрганизацией", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаСотрудником", 0);
	ПромежуточныеИтоги.Вставить("КВыплате", 0);
	
	Возврат ПромежуточныеИтоги;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету Т-49.

Процедура ВывестиОрганизациюТ49(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если ЕстьГруппировкаПоПодразделению Тогда
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			ВывестиПодразделениеТ49(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
		КонецЦикла;
	Иначе
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		КВыплатеПоВедомости = 0;
		
		Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаОрганизации);
		Макеты.ШапкаДокумента.Параметры.ДатаД = Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
		Макеты.Шапка.Параметры.Заполнить(СтрокаОрганизации);
		
		Документ = Неопределено;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Документ", Документ);
		Если Документ <> Неопределено Тогда
			
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Документ,
				"Номер, Дата, Руководитель, ДолжностьРуководителя, ГлавныйБухгалтер, Кассир, ДолжностьКассира, Бухгалтер");
			
		Иначе
			ДанныеДокумента = Новый Структура("Организация,Руководитель,ДолжностьРуководителя,ГлавныйБухгалтер,Кассир,ДолжностьКассира", СтрокаОрганизации.Организация);
			ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ДанныеДокумента, КонецМесяца(СтрокаОрганизации.МесяцНачисления));
			ДанныеДокумента.Удалить("Организация");
			ДанныеДокумента.Вставить("Номер", "");
			ДанныеДокумента.Вставить("Дата", "");
			ДанныеДокумента.Вставить("Бухгалтер", Справочники.ФизическиеЛица.ПустаяСсылка());
			
		КонецЕсли;
		
		СписокОтветственных = Новый Массив;
		Если ЗначениеЗаполнено(ДанныеДокумента.Руководитель) Тогда
			СписокОтветственных.Добавить(ДанныеДокумента.Руководитель);
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДанныеДокумента.ГлавныйБухгалтер) Тогда
			СписокОтветственных.Добавить(ДанныеДокумента.ГлавныйБухгалтер);
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДанныеДокумента.Кассир) Тогда
			СписокОтветственных.Добавить(ДанныеДокумента.Кассир);
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДанныеДокумента.Бухгалтер) Тогда
			СписокОтветственных.Добавить(ДанныеДокумента.Бухгалтер);
		КонецЕсли; 
		
		РасшифровкиПодписей = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокОтветственных,"ИОФамилия", КонецМесяца(СтрокаОрганизации.МесяцНачисления));
		
		Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
			Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
		КонецЦикла;
		Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
			Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
		КонецЦикла;
		
		Макеты.ШапкаДокумента.Параметры.НомерД = ДанныеДокумента.Номер;
		Макеты.ШапкаДокумента.Параметры.ДатаД = ДанныеДокумента.Дата;
		
		Макеты.ШапкаДокумента.Параметры.ДолжностьРуководителя = ДанныеДокумента.ДолжностьРуководителя;
		ДанныеРуководителя = РасшифровкиПодписей.Найти(ДанныеДокумента.Руководитель, "ФизическоеЛицо");
		Если ДанныеРуководителя <> Неопределено Тогда
			Макеты.ШапкаДокумента.Параметры.РуководительРасшифровкаПодписи = ДанныеРуководителя.ИОФамилия;
		КонецЕсли; 
		
		ДанныеГлавногоБухгалтера = РасшифровкиПодписей.Найти(ДанныеДокумента.ГлавныйБухгалтер, "ФизическоеЛицо");
		Если ДанныеГлавногоБухгалтера <> Неопределено Тогда
			Макеты.ШапкаДокумента.Параметры.ГлавныйБухгалтерРасшифровкаПодписи = ДанныеГлавногоБухгалтера.ИОФамилия;
		КонецЕсли; 
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		
		ДанныеВедомости = Неопределено;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеВедомости", ДанныеВедомости);
		Если ДанныеВедомости = Неопределено Тогда
			КВыплате = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("КВыплате")];
		Иначе
			КВыплате = ДанныеВедомости.Итог("КВыплате");
			СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("КВыплате")] = КВыплате;
		КонецЕсли;
		Если КВыплате > 0 Тогда
			ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
			Макеты.ШапкаДокумента.Параметры.СуммаВсегоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(КВыплате, ВалютаУчета);
			Макеты.ШапкаДокумента.Параметры.СуммаДокРублей = Цел(КВыплате);
			Макеты.ШапкаДокумента.Параметры.СуммаДокКопеек = (КВыплате - Цел(КВыплате)) * 100;
		КонецЕсли;
		ПодразделениеВШапке = Неопределено;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ПодразделениеВШапке", ПодразделениеВШапке);
		Если ПодразделениеВШапке <> Неопределено Тогда
			Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = ПодразделениеВШапке;
		КонецЕсли;
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода) Тогда
			Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода.ПолноеНаименование();
		КонецЕсли;
		
		ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		ДокументРезультат.Вывести(Макеты.Шапка);
		
		НомерСтроки = 0;
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
		
		Для Каждого СтрокаСотрудника Из СтрокаОрганизации.Строки Цикл
			ВывестиСотрудникаТ49(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости, КВыплатеПоВедомости, ПорядокДопНачислений, ПорядокДопУдержаний);
		КонецЦикла;
		ДополнитьСтраницуТ49(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги);
		Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаОрганизации);
		Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
			СуммаЯчейки = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
			Если СтрокаТаблицы.Имя = "ПрочиеНачисления" Тогда
				Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
					СуммаЯчейки = СуммаЯчейки + СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
				КонецЦикла;
			КонецЕсли;
			Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
		КонецЦикла;
		Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
			СуммаЯчейки = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
			Если СтрокаТаблицы.Имя = "ПрочиеУдержания" Тогда
				Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
					СуммаЯчейки = СуммаЯчейки + СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
				КонецЦикла;
			КонецЕсли;
			Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
		КонецЦикла;
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		Макеты.Подвал.Параметры.Заполнить(СтрокаОрганизации);
		Если Документ <> Неопределено Тогда
			
			Макеты.Подвал.Параметры.ДолжностьКассира = ДанныеДокумента.ДолжностьКассира;
			ДанныеКассира = РасшифровкиПодписей.Найти(ДанныеДокумента.Кассир, "ФизическоеЛицо");
			Если ДанныеКассира <> Неопределено Тогда
				Макеты.Подвал.Параметры.ФИОКассира = ДанныеКассира.ИОФамилия;
			КонецЕсли; 
			
			ДанныеБухгалтера = РасшифровкиПодписей.Найти(ДанныеДокумента.Бухгалтер, "ФизическоеЛицо");
			Если ДанныеБухгалтера <> Неопределено Тогда
				Макеты.Подвал.Параметры.ФИОБухгалтера = ДанныеБухгалтера.ИОФамилия;
			КонецЕсли; 
			
		КонецЕсли;
		
		Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
		ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
		ДокументРезультат.Вывести(Макеты.Подвал);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодразделениеТ49(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	КВыплатеПоВедомости = 0;
	
	Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаПодразделения);
	Макеты.ШапкаДокумента.Параметры.ДатаД = Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
	Макеты.Шапка.Параметры.Заполнить(СтрокаПодразделения);
	Документ = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Документ", Документ);
	Если Документ <> Неопределено Тогда
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Документ,
			"Номер, Дата, Руководитель, ДолжностьРуководителя, ГлавныйБухгалтер, Кассир, ДолжностьКассира, Бухгалтер");
		
	Иначе
		ДанныеДокумента = Новый Структура("Организация,Руководитель,ДолжностьРуководителя,ГлавныйБухгалтер,Кассир,ДолжностьКассира", СтрокаПодразделения.Организация);
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ДанныеДокумента, КонецМесяца(СтрокаПодразделения.МесяцНачисления));
		ДанныеДокумента.Удалить("Организация");
		ДанныеДокумента.Вставить("Номер", "");
		ДанныеДокумента.Вставить("Дата", "");
		ДанныеДокумента.Вставить("Бухгалтер", Справочники.ФизическиеЛица.ПустаяСсылка());
		
	КонецЕсли;

	СписокОтветственных = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеДокумента.Руководитель) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Руководитель);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.ГлавныйБухгалтер) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.ГлавныйБухгалтер);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Кассир) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Кассир);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Бухгалтер) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Бухгалтер);
	КонецЕсли; 
	
	РасшифровкиПодписей = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокОтветственных,"ИОФамилия", КонецМесяца(СтрокаПодразделения.МесяцНачисления));
	
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
	КонецЦикла;
	
	Макеты.ШапкаДокумента.Параметры.НомерД = ДанныеДокумента.Номер;
	Макеты.ШапкаДокумента.Параметры.ДатаД = ДанныеДокумента.Дата;
	
	Макеты.ШапкаДокумента.Параметры.ДолжностьРуководителя = ДанныеДокумента.ДолжностьРуководителя;
	ДанныеРуководителя = РасшифровкиПодписей.Найти(ДанныеДокумента.Руководитель, "ФизическоеЛицо");
	Если ДанныеРуководителя <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.РуководительРасшифровкаПодписи = ДанныеРуководителя.ИОФамилия;
	КонецЕсли; 
	
	ДанныеГлавногоБухгалтера = РасшифровкиПодписей.Найти(ДанныеДокумента.ГлавныйБухгалтер, "ФизическоеЛицо");
	Если ДанныеГлавногоБухгалтера <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.ГлавныйБухгалтерРасшифровкаПодписи = ДанныеГлавногоБухгалтера.ИОФамилия;
	КонецЕсли; 
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода) Тогда
		Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода.ПолноеНаименование();
	КонецЕсли; 
	ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	ДокументРезультат.Вывести(Макеты.Шапка);
	НомерСтроки = 0;
	ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
	
	ДанныеВедомости = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеВедомости", ДанныеВедомости);
	Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
		ВывестиСотрудникаТ49(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости, КВыплатеПоВедомости, ПорядокДопНачислений, ПорядокДопУдержаний);
	КонецЦикла;
	ДополнитьСтраницуТ49(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги);
	Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаПодразделения);
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		СуммаЯчейки = СтрокаПодразделения[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
		Если СтрокаТаблицы.Имя = "ПрочиеНачисления" Тогда
			Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
				СуммаЯчейки = СуммаЯчейки + СтрокаПодразделения[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
			КонецЦикла;
		КонецЕсли;
		Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		СуммаЯчейки = СтрокаПодразделения[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
		Если СтрокаТаблицы.Имя = "ПрочиеУдержания" Тогда
			Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
				СуммаЯчейки = СуммаЯчейки + СтрокаПодразделения[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
			КонецЦикла;
		КонецЕсли;
		Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
	КонецЦикла;
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	Макеты.Подвал.Параметры.Заполнить(СтрокаПодразделения);
	Если Документ <> Неопределено Тогда
		
		Макеты.Подвал.Параметры.ДолжностьКассира = ДанныеДокумента.ДолжностьКассира;
		ДанныеКассира = РасшифровкиПодписей.Найти(ДанныеДокумента.Кассир, "ФизическоеЛицо");
		Если ДанныеКассира <> Неопределено Тогда
			Макеты.Подвал.Параметры.ФИОКассира = ДанныеКассира.ИОФамилия;
		КонецЕсли; 
		
		ДанныеБухгалтера = РасшифровкиПодписей.Найти(ДанныеДокумента.Бухгалтер, "ФизическоеЛицо");
		Если ДанныеБухгалтера <> Неопределено Тогда
			Макеты.Подвал.Параметры.ФИОБухгалтера = ДанныеБухгалтера.ИОФамилия;
		КонецЕсли; 
			
	КонецЕсли;
	
	Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
	
	ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
	ДокументРезультат.Вывести(Макеты.Подвал);
	
КонецПроцедуры

Процедура ВывестиСотрудникаТ49(НомерСтроки, СтрокаГоловногоСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости, КВыплатеПоВедомости, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	НомерСтроки = НомерСтроки + 1;
	
	МакетСотрудника = Новый ТабличныйДокумент;
	ПромежуточныеИтогиПоГоловномуСотруднику = ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
	НесколькоРабочихМест = СтрокаГоловногоСотрудника.Строки.Количество() > 1;
	
	Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		Если ДанныеВедомости <> Неопределено Тогда
			СтрокаДанныхВедомости = ДанныеВедомости.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
			Если СтрокаДанныхВедомости <> Неопределено Тогда
				СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("КВыплате")] = СтрокаДанныхВедомости.КВыплате;
			КонецЕсли;
		КонецЕсли;
		
		Макеты.Строка.Параметры.Заполнить(СтрокаСотрудника);
		
		Если НЕ НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
			Макеты.Строка.Параметры.СотрудникФизическоеЛицоФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(СтрокаСотрудника.СотрудникФизическоеЛицоФИО);
		КонецЕсли;
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Строка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
			СуммаЯчейки = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
			Если СтрокаТаблицы.Имя = "ПрочиеНачисления" Тогда
				Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
					СуммаЯчейки = СуммаЯчейки + СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
				КонецЦикла;
			КонецЕсли;
			Макеты.Строка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
			СуммаЯчейки = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
			Если СтрокаТаблицы.Имя = "ПрочиеУдержания" Тогда
				Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
					СуммаЯчейки = СуммаЯчейки + СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
				КонецЦикла;
			КонецЕсли;
			Макеты.Строка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
		КонецЦикла;
		
		ОтработаноРабочихДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихДней")];
		ОтработаноРабочихЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихЧасов")];
		ОтработаноПраздничныхДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноПраздничныхДней")];
		ОтработаноПраздничныхЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноПраздничныхЧасов")];
		ОтработаноВыходныхДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноВыходныхДней")];
		ОтработаноВыходныхЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноВыходныхЧасов")];
		
		Если ЗначениеЗаполнено(ОтработаноРабочихДней) И ОтработаноРабочихДней > 0 Тогда 
			Макеты.Строка.Параметры.ОтработаноРабочихДней = "" + ОтработаноРабочихДней + " (" + ОтработаноРабочихЧасов + ")";
		Иначе
			Макеты.Строка.Параметры.ОтработаноРабочихДней = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтработаноПраздничныхДней) И ОтработаноПраздничныхДней > 0 Тогда 
			Макеты.Строка.Параметры.ОтработаноПраздничныхДней = "" + ОтработаноПраздничныхДней + " (" + ОтработаноПраздничныхЧасов + ")";
		Иначе
			Макеты.Строка.Параметры.ОтработаноПраздничныхДней = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтработаноВыходныхДней) И ОтработаноВыходныхДней > 0 Тогда 
			Макеты.Строка.Параметры.ОтработаноВыходныхДней = "" + ОтработаноВыходныхДней + " (" + ОтработаноВыходныхЧасов + ")";
		Иначе
			Макеты.Строка.Параметры.ОтработаноВыходныхДней = "";
		КонецЕсли;
		
		Макеты.Строка.Параметры.НомерПП = НомерСтроки;
		
		Если Макеты.Строка.Параметры.КВыплате < 0 Тогда
			Макеты.Строка.Параметры.КВыплате = 0;
		КонецЕсли;
		
		ДобавитьВПромежуточныйИтог(ПромежуточныеИтогиПоГоловномуСотруднику, Макеты.Строка.Параметры);
		КВыплатеПоВедомости = КВыплатеПоВедомости + Макеты.Строка.Параметры.КВыплате;
		
		Если НесколькоРабочихМест Тогда
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
				Макеты.Строка, СтрокаГоловногоСотрудника, СоответствиеПользовательскихПолей,
				"ВсегоНачислено,ДолгЗаОрганизацией,ДолгЗаСотрудником,КВыплате");
				
				Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
					
				СуммаЯчейки = СтрокаГоловногоСотрудника[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
				Если СтрокаТаблицы.Имя = "ПрочиеУдержания" Тогда
					Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
						СуммаЯчейки = СуммаЯчейки + СтрокаГоловногоСотрудника[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
					КонецЦикла;
				КонецЕсли;
				
				Макеты.Строка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
				
			КонецЦикла;
			
		КонецЕсли; 
			
		Если  СтрокаСотрудника.Сотрудник <> СтрокаСотрудника.ГоловнойСотрудник Тогда
			Макеты.Строка.Параметры.ДолжностьНаКонецПериодаНаименованиеКраткое = СтрокаСотрудника.СотрудникУточнениеНаименования;
		КонецЕсли; 
		
		МакетСотрудника.Вывести(Макеты.Строка);
		
	КонецЦикла;
	
	Если МакетСотрудника.ВысотаТаблицы > 1 Тогда
		
		// Номер по порядку
		МакетСотрудника.Область(1, 1, МакетСотрудника.ВысотаТаблицы, 1).Объединить();
		// Табельный номер
		МакетСотрудника.Область(1, 2, МакетСотрудника.ВысотаТаблицы, 2).Объединить();
		// Всего начислено
		МакетСотрудника.Область(1, 19, МакетСотрудника.ВысотаТаблицы, 19).Объединить();
		// Удержания
		МакетСотрудника.Область(1, 20, МакетСотрудника.ВысотаТаблицы, 20).Объединить();
		МакетСотрудника.Область(1, 21, МакетСотрудника.ВысотаТаблицы, 21).Объединить();
		МакетСотрудника.Область(1, 22, МакетСотрудника.ВысотаТаблицы, 22).Объединить();
		МакетСотрудника.Область(1, 23, МакетСотрудника.ВысотаТаблицы, 23).Объединить();
		// Задолженность за организацией.
		МакетСотрудника.Область(1, 24, МакетСотрудника.ВысотаТаблицы, 24).Объединить();
		// Задолженность за работником.
		МакетСотрудника.Область(1, 25, МакетСотрудника.ВысотаТаблицы, 26).Объединить();
		// К выплате
		МакетСотрудника.Область(1, 27, МакетСотрудника.ВысотаТаблицы, 28).Объединить();
		// ФИО
		МакетСотрудника.Область(1, 29, МакетСотрудника.ВысотаТаблицы, 29).Объединить();
		// Подпись
		МакетСотрудника.Область(1, 30, МакетСотрудника.ВысотаТаблицы, 30).Объединить();
		
	КонецЕсли; 
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(МакетСотрудника);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Тогда
		
		ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
		ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		ДокументРезультат.Вывести(Макеты.Шапка);
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
		
	КонецЕсли;
		
	ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ПромежуточныеИтогиПоГоловномуСотруднику);
	
	ДокументРезультат.Вывести(МакетСотрудника);
	
КонецПроцедуры

Процедура ДополнитьСтраницуТ49(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги)
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(Макеты.ПустаяСтрока);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Цикл
		ДокументРезультат.Вывести(Макеты.ПустаяСтрока);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
	ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
	
КонецПроцедуры

Функция ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	ПромежуточныеИтоги = Новый Структура;
	
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		ПромежуточныеИтоги.Вставить("Колонка" + СтрокаТаблицы.НомерКолонки, 0);
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		ПромежуточныеИтоги.Вставить("Колонка" + СтрокаТаблицы.НомерКолонки, 0);
	КонецЦикла;
	ПромежуточныеИтоги.Вставить("ВсегоНачислено", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаОрганизацией", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаСотрудником", 0);
	ПромежуточныеИтоги.Вставить("КВыплате", 0);
	
	Возврат ПромежуточныеИтоги;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету РасчетныйЛисток.

Функция ДанныеПоНДФЛ(СтрокиСотрудников, МесяцНачисления)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудники", СтрокиСотрудников.ВыгрузитьКолонку("ГоловнойСотрудник"));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(МесяцНачисления));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(МесяцНачисления));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&НачалоПериода КАК МесяцНачисления,
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНачисления,
		|	ГоловнаяОрганизация,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.Период КАК МесяцНачисления,
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	СУММА(ВЫБОР
		|			КОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные)
		|				ТОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВычетНаФизлицо,
		|	СУММА(ВЫБОР
		|			КОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей)
		|				ТОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВычетНаДетей,
		|	СУММА(ВЫБОР
		|			КОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Имущественные)
		|				ТОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВычетИмущественный,
		|	СУММА(ВЫБОР
		|			КОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
		|				ТОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВычетСоциальный
		|ПОМЕСТИТЬ ВТВычетыПредварительно
		|{ВЫБРАТЬ
		|	МесяцНачисления,
		|	ФизическоеЛицо.*,
		|	ГоловнаяОрганизация.*,
		|	ВычетНаФизлицо,
		|	ВычетНаДетей,
		|	ВычетИмущественный,
		|	ВычетСоциальный}
		|ИЗ
		|	РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Обороты(&НачалоПериода, &КонецПериода, Месяц, ) КАК ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.Период = Сотрудники.МесяцНачисления
		|			И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
		|			И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
		|{ГДЕ
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.Период КАК МесяцНачисления,
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ФизическоеЛицо.*,
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ГоловнаяОрганизация.*}
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ФизическоеЛицо,
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ГоловнаяОрганизация,
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИмущественныеВычетыНДФЛОбороты.Период,
		|	ИмущественныеВычетыНДФЛОбороты.ФизическоеЛицо,
		|	ИмущественныеВычетыНДФЛОбороты.ГоловнаяОрганизация,
		|	СУММА(ВЫБОР
		|			КОГДА ИмущественныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные)
		|				ТОГДА ИмущественныеВычетыНДФЛОбороты.СуммаРасход
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА ИмущественныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей)
		|				ТОГДА ИмущественныеВычетыНДФЛОбороты.СуммаРасход
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА ИмущественныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Имущественные)
		|				ТОГДА ИмущественныеВычетыНДФЛОбороты.СуммаРасход
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА ИмущественныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
		|				ТОГДА ИмущественныеВычетыНДФЛОбороты.СуммаРасход
		|			ИНАЧЕ 0
		|		КОНЕЦ)
		|ИЗ
		|	РегистрНакопления.ИмущественныеВычетыНДФЛ.Обороты(&НачалоПериода, &КонецПериода, Месяц, ) КАК ИмущественныеВычетыНДФЛОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО ИмущественныеВычетыНДФЛОбороты.Период = Сотрудники.МесяцНачисления
		|			И ИмущественныеВычетыНДФЛОбороты.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
		|			И ИмущественныеВычетыНДФЛОбороты.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
		|{ГДЕ
		|	ИмущественныеВычетыНДФЛОбороты.Период КАК МесяцНачисления,
		|	ИмущественныеВычетыНДФЛОбороты.ФизическоеЛицо.*,
		|	ИмущественныеВычетыНДФЛОбороты.ГоловнаяОрганизация.*}
		|
		|СГРУППИРОВАТЬ ПО
		|	ИмущественныеВычетыНДФЛОбороты.ФизическоеЛицо,
		|	ИмущественныеВычетыНДФЛОбороты.ГоловнаяОрганизация,
		|	ИмущественныеВычетыНДФЛОбороты.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВычетыПредварительно.МесяцНачисления,
		|	ВычетыПредварительно.ФизическоеЛицо,
		|	ВычетыПредварительно.ГоловнаяОрганизация,
		|	СУММА(ВычетыПредварительно.ВычетНаФизлицо) КАК ВычетНаФизлицо,
		|	СУММА(ВычетыПредварительно.ВычетНаДетей) КАК ВычетНаДетей,
		|	СУММА(ВычетыПредварительно.ВычетИмущественный) КАК ВычетИмущественный,
		|	СУММА(ВычетыПредварительно.ВычетСоциальный) КАК ВычетСоциальный
		|ПОМЕСТИТЬ ВТВычеты
		|ИЗ
		|	ВТВычетыПредварительно КАК ВычетыПредварительно
		|
		|СГРУППИРОВАТЬ ПО
		|	ВычетыПредварительно.МесяцНачисления,
		|	ВычетыПредварительно.ФизическоеЛицо,
		|	ВычетыПредварительно.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОДоходахНДФЛОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СведенияОДоходахНДФЛОбороты.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	СУММА(СведенияОДоходахНДФЛОбороты.СуммаДоходаОборот) КАК ОблагаемыйДоход,
		|	&НачалоПериода КАК МесяцНачисления
		|ПОМЕСТИТЬ ВТОблагаемыйДоход
		|{ВЫБРАТЬ
		|	ФизическоеЛицо.*,
		|	ГоловнаяОрганизация.*,
		|	ОблагаемыйДоход,
		|	МесяцНачисления}
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ.Обороты(&НачалоГода, &КонецПериода, , ) КАК СведенияОДоходахНДФЛОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО СведенияОДоходахНДФЛОбороты.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
		|			И СведенияОДоходахНДФЛОбороты.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
		|{ГДЕ
		|	СведенияОДоходахНДФЛОбороты.ФизическоеЛицо.*,
		|	СведенияОДоходахНДФЛОбороты.ГоловнаяОрганизация.*,
		|	СведенияОДоходахНДФЛОбороты.Период КАК МесяцНачисления}
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходахНДФЛОбороты.ГоловнаяОрганизация,
		|	СведенияОДоходахНДФЛОбороты.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияУдержанияПоСотрудникам.Период КАК МесяцНачисления,
		|	НачисленияУдержанияПоСотрудникам.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету)
		|			ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|		ИНАЧЕ -НачисленияУдержанияПоСотрудникам.Сумма
		|	КОНЕЦ КАК ДвижениеПоНДФЛ
		|ПОМЕСТИТЬ ВТДвиженияПоОстаткамНДФЛ
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО НачисленияУдержанияПоСотрудникам.Период = Сотрудники.МесяцНачисления
		|			И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
		|			И НачисленияУдержанияПоСотрудникам.Организация.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Период <= &КонецПериода
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНачисления,
		|	ГоловнаяОрганизация,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.МесяцНачисления КАК МесяцНачисления,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ЕСТЬNULL(ДвиженияПоОстаткамНДФЛПредыдущихПериодов.ДвижениеПоНДФЛ, 0)) КАК СуммаДолгНаНачалоПериодаНДФЛ
		|ПОМЕСТИТЬ ВТОстаткиЗадолженностиПоНДФЛ
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияПоОстаткамНДФЛ КАК ДвиженияПоОстаткамНДФЛПредыдущихПериодов
		|		ПО Сотрудники.МесяцНачисления > ДвиженияПоОстаткамНДФЛПредыдущихПериодов.МесяцНачисления
		|			И Сотрудники.ГоловнаяОрганизация = ДвиженияПоОстаткамНДФЛПредыдущихПериодов.ГоловнаяОрганизация
		|			И Сотрудники.ФизическоеЛицо = ДвиженияПоОстаткамНДФЛПредыдущихПериодов.ФизическоеЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.МесяцНачисления,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНачисления,
		|	ГоловнаяОрганизация,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.МесяцНачисления КАК МесяцНачисления,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ЕСТЬNULL(ДвиженияПоОстаткамНДФЛ.ДвижениеПоНДФЛ, 0)) КАК ДвиженияТекущегоМесяца
		|ПОМЕСТИТЬ ВТДвиженияЗадолженностиПоНДФЛ
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияПоОстаткамНДФЛ КАК ДвиженияПоОстаткамНДФЛ
		|		ПО Сотрудники.МесяцНачисления = ДвиженияПоОстаткамНДФЛ.МесяцНачисления
		|			И Сотрудники.ФизическоеЛицо = ДвиженияПоОстаткамНДФЛ.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = ДвиженияПоОстаткамНДФЛ.ГоловнаяОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.МесяцНачисления,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНачисления,
		|	ГоловнаяОрганизация,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗадолженностиПоНДФЛ.МесяцНачисления КАК МесяцНачисления,
		|	ДвиженияЗадолженностиПоНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДвиженияЗадолженностиПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ОстаткиЗадолженностиПоНДФЛ.СуммаДолгНаНачалоПериодаНДФЛ, 0) КАК СуммаДолгНаНачалоПериодаНДФЛ,
		|	ЕСТЬNULL(ОстаткиЗадолженностиПоНДФЛ.СуммаДолгНаНачалоПериодаНДФЛ, 0) + ДвиженияЗадолженностиПоНДФЛ.ДвиженияТекущегоМесяца КАК СуммаДолгНаКонецПериодаНДФЛ
		|ПОМЕСТИТЬ ВТОстаткиНДФЛКЗачету
		|ИЗ
		|	ВТДвиженияЗадолженностиПоНДФЛ КАК ДвиженияЗадолженностиПоНДФЛ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиЗадолженностиПоНДФЛ КАК ОстаткиЗадолженностиПоНДФЛ
		|		ПО ДвиженияЗадолженностиПоНДФЛ.МесяцНачисления = ОстаткиЗадолженностиПоНДФЛ.МесяцНачисления
		|			И ДвиженияЗадолженностиПоНДФЛ.ГоловнаяОрганизация = ОстаткиЗадолженностиПоНДФЛ.ГоловнаяОрганизация
		|			И ДвиженияЗадолженностиПоНДФЛ.ФизическоеЛицо = ОстаткиЗадолженностиПоНДФЛ.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНачисления,
		|	ГоловнаяОрганизация,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(АвансовыеПлатежиИностранцевПоНДФЛ.Период, МЕСЯЦ) КАК МесяцНачисления,
		|	АвансовыеПлатежиИностранцевПоНДФЛ.ГоловнаяОрганизация,
		|	АвансовыеПлатежиИностранцевПоНДФЛ.ФизическоеЛицо,
		|	СУММА(АвансовыеПлатежиИностранцевПоНДФЛ.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТАвансовыеПлатежи
		|ИЗ
		|	РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ КАК АвансовыеПлатежиИностранцевПоНДФЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО (НАЧАЛОПЕРИОДА(АвансовыеПлатежиИностранцевПоНДФЛ.Период, МЕСЯЦ) = Сотрудники.МесяцНачисления)
		|			И АвансовыеПлатежиИностранцевПоНДФЛ.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
		|			И АвансовыеПлатежиИностранцевПоНДФЛ.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
		|ГДЕ
		|	АвансовыеПлатежиИностранцевПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И АвансовыеПлатежиИностранцевПоНДФЛ.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	АвансовыеПлатежиИностранцевПоНДФЛ.ГоловнаяОрганизация,
		|	АвансовыеПлатежиИностранцевПоНДФЛ.ФизическоеЛицо,
		|	АвансовыеПлатежиИностранцевПоНДФЛ.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.МесяцНачисления,
		|	Сотрудники.Сотрудник,
		|	Вычеты.ВычетНаФизлицо,
		|	Вычеты.ВычетНаДетей,
		|	Вычеты.ВычетИмущественный,
		|	Вычеты.ВычетСоциальный,
		|	ОблагаемыйДоходПомесячно.ОблагаемыйДоход,
		|	ОстаткиНДФЛКЗачету.СуммаДолгНаНачалоПериодаНДФЛ,
		|	ОстаткиНДФЛКЗачету.СуммаДолгНаКонецПериодаНДФЛ,
		|	АвансовыеПлатежи.Сумма КАК АвансовыеПлатежи
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиНДФЛКЗачету КАК ОстаткиНДФЛКЗачету
		|		ПО Сотрудники.МесяцНачисления = ОстаткиНДФЛКЗачету.МесяцНачисления
		|			И Сотрудники.ФизическоеЛицо = ОстаткиНДФЛКЗачету.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = ОстаткиНДФЛКЗачету.ГоловнаяОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты КАК Вычеты
		|		ПО Сотрудники.МесяцНачисления = Вычеты.МесяцНачисления
		|			И Сотрудники.ФизическоеЛицо = Вычеты.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = Вычеты.ГоловнаяОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОблагаемыйДоход КАК ОблагаемыйДоходПомесячно
		|		ПО Сотрудники.МесяцНачисления = ОблагаемыйДоходПомесячно.МесяцНачисления
		|			И Сотрудники.ФизическоеЛицо = ОблагаемыйДоходПомесячно.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = ОблагаемыйДоходПомесячно.ГоловнаяОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАвансовыеПлатежи КАК АвансовыеПлатежи
		|		ПО Сотрудники.МесяцНачисления = АвансовыеПлатежи.МесяцНачисления
		|			И Сотрудники.ФизическоеЛицо = АвансовыеПлатежи.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = АвансовыеПлатежи.ГоловнаяОрганизация";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВывестиСотрудникаРасчетныйЛисток(СтрокаГоловногоСотрудника, ДокументРезультатПромежуточный, Макеты, СоответствиеПользовательскихПолей, ДанныеПоНДФЛ, ГруппироватьПоИсточникамФинансирования)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Если ГруппироватьПоИсточникамФинансирования Тогда
		СтрокаШапки = СтрокаГоловногоСотрудника.Строки[0].Строки[0];
	Иначе
		СтрокаШапки = СтрокаГоловногоСотрудника.Строки[0];
	КонецЕсли;
	
	Макеты.Шапка1.Параметры.Заполнить(СтрокаШапки);
	Макеты.Шапка1.Параметры.ПериодПредставление = Формат(СтрокаШапки.МесяцНачисления, "ДФ='ММММ гггг'");
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка1, СтрокаШапки, СоответствиеПользовательскихПолей);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка1, СтрокаГоловногоСотрудника, СоответствиеПользовательскихПолей, "КВыплате");

	Если НЕ ЗначениеЗаполнено(Макеты.Шапка1.Параметры.КВыплате) ИЛИ Макеты.Шапка1.Параметры.КВыплате < 0 Тогда
		Макеты.Шапка1.Параметры.КВыплате = 0;
	КонецЕсли;
	
	СтрокаДанныхПоНДФЛ = ДанныеПоНДФЛ.Найти(СтрокаШапки.Сотрудник, "Сотрудник");
	Если СтрокаДанныхПоНДФЛ <> Неопределено Тогда
		Макеты.Шапка1.Параметры.Заполнить(СтрокаДанныхПоНДФЛ);
	КонецЕсли; 
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.Шапка1.Параметры.ПодразделениеГоловногоСотрудникаНаКонецПериода) Тогда
		Макеты.Шапка1.Параметры.ПодразделениеГоловногоСотрудникаНаКонецПериода = Макеты.Шапка1.Параметры.ПодразделениеГоловногоСотрудникаНаКонецПериода.ПолноеНаименование();
	КонецЕсли; 
	
	ДокументРезультат.Вывести(Макеты.Шапка1);
	
	Если СтрокаДанныхПоНДФЛ <> Неопределено
		И ЗначениеЗаполнено(СтрокаДанныхПоНДФЛ.АвансовыеПлатежи) Тогда
		
		Макеты.АвансовыеПлатежи.Параметры.АвансовыеПлатежи = СтрокаДанныхПоНДФЛ.АвансовыеПлатежи;
		ДокументРезультат.Вывести(Макеты.АвансовыеПлатежи);
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макеты.Шапка2);
	
	Если ГруппироватьПоИсточникамФинансирования Тогда
		ИтогиПоГруппам = ВывестиГруппировкиПоСтатьямФинансирования(ДокументРезультат, СтрокаГоловногоСотрудника,  Макеты, СоответствиеПользовательскихПолей);
	Иначе
		ИтогиПоГруппам = ВывестиТелоРасчетногоЛистка(ДокументРезультат, СтрокаГоловногоСотрудника, Макеты, СоответствиеПользовательскихПолей);
	КонецЕсли;
	
	Если СтрокаДанныхПоНДФЛ <> Неопределено Тогда
		Макеты.Сальдо.Параметры.Заполнить(СтрокаДанныхПоНДФЛ);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаКонецМесяца) И ИтогиПоГруппам.СуммаДолгаНаКонецМесяца >= 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца'");
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = ИтогиПоГруппам.СуммаДолгаНаКонецМесяца;
	ИначеЕсли ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаКонецМесяца) И ИтогиПоГруппам.СуммаДолгаНаКонецМесяца < 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за работником на конец месяца'");
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = -ИтогиПоГруппам.СуммаДолгаНаКонецМесяца;
	Иначе
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца'");
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца) И ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца >= 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца'");
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца;
	ИначеЕсли ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца) И ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца < 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за работником на начало месяца'");
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = -ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца;
	Иначе
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца'");
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = "";
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макеты.Сальдо);
	
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультатПромежуточный, ДокументРезультат) Тогда
		ДокументРезультатПромежуточный.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ДокументРезультатПромежуточный.Вывести(ДокументРезультат);
	
КонецПроцедуры

Функция ВывестиГруппировкиПоСтатьямФинансирования(ДокументРезультат, СтрокаСотрудника,  Макеты, СоответствиеПользовательскихПолей)
	
	ИтогиПоГруппам = Новый Структура("СуммаДолгаНаНачалоМесяца,СуммаДолгаНаКонецМесяца", 0, 0);
	
	Для каждого СтрокаСтатьи Из СтрокаСотрудника.Строки Цикл
		
		Макеты.СтатьяФинансирования.Параметры.Заполнить(СтрокаСтатьи);
		ДокументРезультат.Вывести(Макеты.СтатьяФинансирования);
		
		ИтогиПоСтатье = ВывестиТелоРасчетногоЛистка(ДокументРезультат, СтрокаСтатьи, Макеты, СоответствиеПользовательскихПолей);
		
		ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца + ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
		ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = ИтогиПоГруппам.СуммаДолгаНаКонецМесяца + ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
		
		Если ЗначениеЗаполнено(ИтогиПоСтатье.СуммаДолгаНаКонецМесяца) И ИтогиПоСтатье.СуммаДолгаНаКонецМесяца >= 0 Тогда
			Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца'");
			Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаКонецПериода = ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
		ИначеЕсли ЗначениеЗаполнено(ИтогиПоСтатье.СуммаДолгаНаКонецМесяца) И ИтогиПоСтатье.СуммаДолгаНаКонецМесяца < 0 Тогда
			Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за работником на конец месяца'");
			Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаКонецПериода = -ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
		Иначе
			Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца'");
			Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаКонецПериода = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца) И ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца >= 0 Тогда
			Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца'");
			Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаНачалоПериода = ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
		ИначеЕсли ЗначениеЗаполнено(ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца) И ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца < 0 Тогда
			Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за работником на начало месяца'");
			Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаНачалоПериода = -ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
		Иначе
			Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца'");
			Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаНачалоПериода = "";
		КонецЕсли;
		
		ДокументРезультат.Вывести(Макеты.ИтогСтатьяФинансирования);
		
	КонецЦикла;
	
	Макеты.СтатьяФинансирования.Параметры.СтатьяФинансирования =
		НСтр("ru='Итого по всем статьям финансирования'");
	ДокументРезультат.Вывести(Макеты.СтатьяФинансирования);
		
	Возврат ИтогиПоГруппам;
	
КонецФункции

Функция ВывестиТелоРасчетногоЛистка(ДокументРезультат, СтрокаГоловногоСотрудника, Макеты, СоответствиеПользовательскихПолей)
	
	ИтогиПоГруппам = Новый Структура("СуммаДолгаНаНачалоМесяца,СуммаДолгаНаКонецМесяца", 0, 0);
	
	СуммаНачисленоВНатуральнойФорме = 0;
	СуммаНачисления = 0;
	СуммаУдержания = 0;
	
	КоллекцияРабочихМест = Новый Массив;
	СтрокиУдержаний = Новый Соответствие;
	ИмяПоляСуммаУдержано = СоответствиеПользовательскихПолей.Получить("СуммаУдержано");
	
	Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		ЭлементКоллекции = Новый Структура("СтрокаСотрудника,СтрокиНачислений,СтрокиУдержаний", СтрокаСотрудника, Новый Массив, Новый Массив);
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено, "Группа");
		Если СтрокаГруппы <> Неопределено Тогда
			ЭлементКоллекции.СтрокиНачислений = СтрокаГруппы.Строки;
		КонецЕсли;
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано, "Группа");
		Если СтрокаГруппы <> Неопределено Тогда
			
			Для каждого СтрокаУдержаний Из СтрокаГруппы.Строки Цикл
				
				СтрокаКоллекции = СтрокиУдержаний.Получить(СтрокаУдержаний.ВидРасчета);
				Если СтрокаКоллекции = Неопределено Тогда
					СтрокаКоллекции = СтрокаУдержаний;
				Иначе
					СтрокаКоллекции[ИмяПоляСуммаУдержано] = СтрокаКоллекции[ИмяПоляСуммаУдержано] + СтрокаУдержаний[ИмяПоляСуммаУдержано];
				КонецЕсли;
				СтрокиУдержаний.Вставить(СтрокаКоллекции.ВидРасчета, СтрокаКоллекции);
				
			КонецЦикла;
			
		КонецЕсли;
		
		КоллекцияРабочихМест.Добавить(ЭлементКоллекции);
		
	КонецЦикла;
	
	Если СтрокиУдержаний.Количество() > 0 Тогда
		КоллекцияРабочихМест[0].СтрокиУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиУдержаний, "Значение");
	КонецЕсли; 
	
	ШапкаВыводилась = Ложь;
	Для каждого РабочееМесто Из КоллекцияРабочихМест Цикл
		
		СтрокаСотрудника = РабочееМесто.СтрокаСотрудника;
		СтрокиНачислений = РабочееМесто.СтрокиНачислений;
		СтрокиУдержаний = РабочееМесто.СтрокиУдержаний;
		
		Если СтрокиНачислений.Количество() > 0 ИЛИ СтрокиУдержаний.Количество() > 0 Тогда
			
			Если НЕ ШапкаВыводилась Тогда
				ДокументРезультат.Вывести(Макеты.НачисленоУдержано);
				ШапкаВыводилась = Истина;
			КонецЕсли; 
			
			Если СтрокаСотрудника.Сотрудник <> СтрокаСотрудника.ГоловнойСотрудник Тогда
				ЗаполнитьЗначенияСвойств(Макеты.Подработка.Параметры, СтрокаСотрудника);
				ДокументРезультат.Вывести(Макеты.Подработка);
			КонецЕсли; 
		
			НомерСтроки = 0;
			Пока НомерСтроки < СтрокиНачислений.Количество() ИЛИ НомерСтроки < СтрокиУдержаний.Количество() Цикл
				
				Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() -1 Цикл
					Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
				КонецЦикла;
				
				Если НомерСтроки < СтрокиНачислений.Количество() Тогда
					
					СтрокаНачислений = СтрокиНачислений[НомерСтроки];
					
					Макеты.СтрокаДвижений.Параметры.ПериодДействияНачислений = СтрокаНачислений.ПериодДействия;
					
					УчетВремениВЧасах = СтрокаНачислений[СоответствиеПользовательскихПолей.Получить("УчетВремениВЧасах")];
					
					Если УчетВремениВЧасах И СтрокаНачислений.ОплаченоЧасов > 0 Тогда
						ОплаченныеДниЧасы = Формат(СтрокаНачислений.ОплаченоЧасов, "ЧДЦ=2; ЧН=") + НСтр("ru=' чс.'");
					ИначеЕсли НЕ УчетВремениВЧасах И СтрокаНачислений.ОплаченоДней > 0 Тогда
						ОплаченныеДниЧасы = Формат(СтрокаНачислений.ОплаченоДней, "ЧДЦ=2; ЧН=") + НСтр("ru=' дн.'");
					Иначе
						ОплаченныеДниЧасы = 0;
					КонецЕсли;
					
					Макеты.СтрокаДвижений.Параметры.ОплаченныеДниЧасы = ОплаченныеДниЧасы;
					ЗаполнитьЗначенияСвойств(Макеты.СтрокаДвижений.Параметры, СтрокаНачислений, "ОтработаноДней,ОтработаноЧасов");
					
					ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаНачислений,
						СоответствиеПользовательскихПолей,
						"Начисление,СуммаНачислено");
					
				КонецЕсли;
				
				Если НомерСтроки < СтрокиУдержаний.Количество() Тогда
					
					СтрокаУдержаний = СтрокиУдержаний[НомерСтроки];
					
					Макеты.СтрокаДвижений.Параметры.ПериодДействияУдержаний = СтрокаУдержаний.ПериодДействия;
					ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаУдержаний,
						СоответствиеПользовательскихПолей,
						"Удержание,СуммаУдержано");
						
					СуммаУдержания = СуммаУдержания + СтрокаУдержаний[СоответствиеПользовательскихПолей.Получить("СуммаУдержано")];
							
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				
				ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
				
			КонецЦикла;
			
			Если ТипЗнч(СтрокиНачислений) <> Тип("Массив") Тогда
				СуммаНачисления = СуммаНачисления + СтрокиНачислений.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
				СуммаНачисленоВНатуральнойФорме = СуммаНачисленоВНатуральнойФорме + СтрокиНачислений.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачисленоВНатуральнойФорме"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если СуммаНачисления <> 0 ИЛИ СуммаУдержания <> 0 Тогда
		Макеты.Итог12.Параметры.СуммаНачисления = СуммаНачисления;
		Макеты.Итог12.Параметры.СуммаУдержания = СуммаУдержания;
		ДокументРезультат.Вывести(Макеты.Итог12);
	КонецЕсли;
	
	Если СуммаНачисленоВНатуральнойФорме <> 0 Тогда
		Макеты.Итог12ВНатуральнойФорме.Параметры.СуммаНачисления = СуммаНачисленоВНатуральнойФорме;
		ДокументРезультат.Вывести(Макеты.Итог12ВНатуральнойФорме);
	КонецЕсли;
	
	СуммаДолгаНаНачалоМесяца = 0;
	СуммаДолгаНаКонецМесяца = 0;
	
	СуммаНачисления = 0;
	СуммаВыплат = 0;
	
	ШапкаВыводилась = Ложь;
	Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно, "Группа");
		Если СтрокаГруппы = Неопределено Тогда
			СтрокиСправочно = Новый Массив;
		Иначе
			СтрокиСправочно = СтрокаГруппы.Строки;
		КонецЕсли;
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено, "Группа");
		Если СтрокаГруппы = Неопределено Тогда
			СтрокиВыплачено = Новый Массив;
		Иначе
			СтрокиВыплачено = СтрокаГруппы.Строки;
		КонецЕсли;
		
		Если СтрокиСправочно.Количество() > 0 ИЛИ СтрокиВыплачено.Количество() > 0 Тогда
			
			Если НЕ ШапкаВыводилась Тогда
				ДокументРезультат.Вывести(Макеты.ПрочиеВыплачено);
				ШапкаВыводилась = Истина;
			КонецЕсли; 
			
			Если СтрокаСотрудника.Сотрудник <> СтрокаСотрудника.ГоловнойСотрудник Тогда
				ЗаполнитьЗначенияСвойств(Макеты.Подработка.Параметры, СтрокаСотрудника);
				ДокументРезультат.Вывести(Макеты.Подработка);
			КонецЕсли; 
		
			НомерСтроки = 0;
			Пока НомерСтроки < СтрокиСправочно.Количество() ИЛИ НомерСтроки < СтрокиВыплачено.Количество() Цикл
				
				Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() -1 Цикл
					Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
				КонецЦикла;
				
				Если НомерСтроки < СтрокиСправочно.Количество() Тогда
					
					СтрокаСправочно = СтрокиСправочно[НомерСтроки];
					
					Макеты.СтрокаДвижений.Параметры.Заполнить(СтрокаСправочно);
					ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаСправочно,
						СоответствиеПользовательскихПолей,
						"Начисление,СуммаНачислено");
					
				КонецЕсли;
				
				Если НомерСтроки < СтрокиВыплачено.Количество() Тогда
					
					СтрокаВыплачено = СтрокиВыплачено[НомерСтроки];
					
					Макеты.СтрокаДвижений.Параметры.Заполнить(СтрокаВыплачено);
					ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаВыплачено,
						СоответствиеПользовательскихПолей,
						"Удержание,СуммаУдержано");
					
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				
				ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
				
			КонецЦикла;
			
			Если ТипЗнч(СтрокиСправочно) <> Тип("Массив") Тогда
				СуммаНачисления = СуммаНачисления + СтрокиСправочно.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
			КонецЕсли;
			
			Если ТипЗнч(СтрокиВыплачено) <> Тип("Массив") Тогда
				СуммаВыплат	 = СуммаВыплат + СтрокиВыплачено.Итог(СоответствиеПользовательскихПолей.Получить("СуммаУдержано"));
			КонецЕсли;
			
		КонецЕсли; 
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо, "Группа");
		Если СтрокаГруппы <> Неопределено Тогда
			СуммаДолгаНаНачалоМесяца = СуммаДолгаНаНачалоМесяца + СтрокаГруппы.Сумма;
		КонецЕсли;
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо, "Группа");
		Если СтрокаГруппы <> Неопределено Тогда
			СуммаДолгаНаКонецМесяца = СуммаДолгаНаКонецМесяца + СтрокаГруппы.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СуммаНачисления <> 0 ИЛИ СуммаВыплат <> 0 Тогда
		Макеты.Итог34.Параметры.СуммаНачисления = СуммаНачисления;
		Макеты.Итог34.Параметры.СуммаВыплат	 = СуммаВыплат;
		ДокументРезультат.Вывести(Макеты.Итог34);
	КонецЕсли;
	
	ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = СуммаДолгаНаНачалоМесяца;
	ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = СуммаДолгаНаКонецМесяца;
	
	СуммаНачисления = 0;
	ШапкаВыводилась = Ложь;
	
	Для Каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы, "Группа");
		Если СтрокаГруппы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиЛьгот = СтрокаГруппы.Строки;
		Для Каждого СтрокаЛьгот Из СтрокиЛьгот Цикл 
			
			Если Не ШапкаВыводилась Тогда
				ДокументРезультат.Вывести(Макеты.Льготы);
				ШапкаВыводилась = Истина;
			КонецЕсли; 
			
			Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() - 1 Цикл
				Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
			КонецЦикла;
			
			Макеты.СтрокаДвижений.Параметры.ПериодДействияНачислений = СтрокаЛьгот.ПериодДействия;
			
			УчетВремениВЧасах = СтрокаЛьгот[СоответствиеПользовательскихПолей.Получить("УчетВремениВЧасах")];
			
			Если УчетВремениВЧасах И СтрокаЛьгот.ОплаченоЧасов > 0 Тогда
				ОплаченныеДниЧасы = Формат(СтрокаЛьгот.ОплаченоЧасов, "ЧДЦ=2; ЧН=") + НСтр("ru=' чс.'");
			ИначеЕсли НЕ УчетВремениВЧасах И СтрокаЛьгот.ОплаченоДней > 0 Тогда
				ОплаченныеДниЧасы = Формат(СтрокаЛьгот.ОплаченоДней, "ЧДЦ=2; ЧН=") + НСтр("ru=' дн.'");
			Иначе
				ОплаченныеДниЧасы = 0;
			КонецЕсли;
			
			Макеты.СтрокаДвижений.Параметры.ОплаченныеДниЧасы = ОплаченныеДниЧасы;
			ЗаполнитьЗначенияСвойств(Макеты.СтрокаДвижений.Параметры, СтрокаЛьгот, "ОтработаноДней,ОтработаноЧасов");
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
				Макеты.СтрокаДвижений,
				СтрокаЛьгот,
				СоответствиеПользовательскихПолей,
				"Начисление,СуммаНачислено");
				
			ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
			
		КонецЦикла;
		
		Если ТипЗнч(СтрокиЛьгот) <> Тип("Массив") Тогда
			СуммаНачисления = СуммаНачисления + СтрокиЛьгот.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
		КонецЕсли;
			
	КонецЦикла;
	
	Если СуммаНачисления <> 0 Тогда
		Макеты.Итог56.Параметры.СуммаНачисления = СуммаНачисления;
		ДокументРезультат.Вывести(Макеты.Итог56);
	КонецЕсли;
	
	Возврат ИтогиПоГруппам;
	
КонецФункции

Функция МожноГруппировать(Порядок, ИмяПоляГруппировки)
	
	ГруппировкаВозможна = Ложь;

	Для каждого ЭлементПорядка Из Порядок.Элементы Цикл
		
		Если ЭлементПорядка.Использование Тогда
			
			Если ТипЗнч(ЭлементПорядка) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("МесяцНачисления") Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляГруппировки) Тогда
				
				ГруппировкаВозможна = Истина;
				Прервать;
				
			ИначеЕсли ЭлементПорядка.Поле <> Новый ПолеКомпоновкиДанных("Организация") Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГруппировкаВозможна;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету ПФ_MXL_ФормаКНД1151087.

Процедура ВывестиКарточкуПоДСВ(ДокументРезультат, ДанныеФизЛиц, Макет, КадровыеДанные, СведенияОРегистрации, ОбщиеНастройкиМакета)
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	Раздел = Макет.ПолучитьОбласть("Раздел");
	
	ЗарплатаКадры.ВывестиДанныеПобуквенно(ДанныеФизЛиц.ОрганизацияИНН, Раздел, "Организация_ИНН_", 12);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(СведенияОРегистрации.КПП, Раздел, "Организация_КПП_", 9);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(СведенияОРегистрации.Код, Раздел, "ИФНС_", 4);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(СтрЗаменить(Формат(ОбщиеНастройкиМакета.ДатаАктуальности, "ДЛФ=D"),".",""), Раздел, "Дата", 8);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(Формат(ДанныеФизЛиц.Год, "ЧГ=0"), Раздел, "Год", 4);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(Формат(ОбщиеНастройкиМакета.ПервыйНомер, "ЧГ=0"), Раздел,                   "Номер", 8);
	
	ЗарплатаКадры.ВывестиДанныеПобуквенно(ДанныеФизЛиц.ОрганизацияНаименованиеСокращенное, Раздел, "Организация_Наименование_", 160);
	
	Раздел.Параметры.ФИООтветственного = ОбщиеНастройкиМакета.Ответственный;
	Раздел.Параметры.ДолжностьОтветственного = ОбщиеНастройкиМакета.ДолжностьОтветственного;
	
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.Фамилия, Раздел,				"ФизЛицо_Фамилия_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.Имя, Раздел,					"ФизЛицо_Имя_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.Отчество, Раздел,				"ФизЛицо_Отчество_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.ИНН, Раздел,					"ФизЛицо_ИНН_", 12);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.ДокументКодМВД, Раздел,		"ФизЛицо_КодДокументаУдЛичн_", 2);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.ДокументСерияНомер, Раздел, 	"ФизЛицо_СерияНомерДокументаУдЛичн_", 25);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресИндекс, Раздел,			"ФизЛицо_АдресИндекс_", 6);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресКодРегиона, Раздел,		"ФизЛицо_АдресРегион_", 2);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресРайон, Раздел,			"ФизЛицо_АдресРайон_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресГород, Раздел,			"ФизЛицо_АдресГород_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресНаселенныйПункт, Раздел,	"ФизЛицо_АдресНаселенныйПункт_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресУлица, Раздел,			"ФизЛицо_АдресУлица_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресДом, Раздел,				"ФизЛицо_АдресДом_", 8);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресКорпус, Раздел,			"ФизЛицо_АдресКорпус_", 8);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресКвартира, Раздел,			"ФизЛицо_АдресКвартира_", 8);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(Прав("           " + Формат(ДанныеФизЛиц.Сумма,"ЧЦ=11; ЧС=-2; ЧГ=0"),11), Раздел, "СуммаВзносовРубли_", 11);
	
	ДокументРезультат.Вывести(Раздел); 
	
	Если ОбщиеНастройкиМакета.ПервыйНомер <> 0 Тогда
		ОбщиеНастройкиМакета.ПервыйНомер = ОбщиеНастройкиМакета.ПервыйНомер + 1;
	КонецЕсли; 
	
КонецПроцедуры

Функция КадровыеДанныеФизическогоЛица(КадровыеДанные, ФизическоеЛицо)
	
	КадровыеДанныеФизическогоЛица = КадровыеДанные.Найти(ФизическоеЛицо, "ФизическоеЛицо");
	
	ДанныеФизическогоЛица = Новый Структура;
	
	ДанныеФизическогоЛица.Вставить("Фамилия", "");
	ДанныеФизическогоЛица.Вставить("Имя", "");
	ДанныеФизическогоЛица.Вставить("Отчество", "");
	ДанныеФизическогоЛица.Вставить("ИНН", "");
	ДанныеФизическогоЛица.Вставить("ДокументКодМВД", "");
	ДанныеФизическогоЛица.Вставить("ДокументСерияНомер", "");
	ДанныеФизическогоЛица.Вставить("АдресИндекс", "");
	ДанныеФизическогоЛица.Вставить("АдресКодРегиона", "");
	ДанныеФизическогоЛица.Вставить("АдресРайон", "");
	ДанныеФизическогоЛица.Вставить("АдресГород", "");
	ДанныеФизическогоЛица.Вставить("АдресНаселенныйПункт", "");
	ДанныеФизическогоЛица.Вставить("АдресУлица", "");
	ДанныеФизическогоЛица.Вставить("АдресДом", "");
	ДанныеФизическогоЛица.Вставить("АдресКорпус", "");
	ДанныеФизическогоЛица.Вставить("АдресКвартира", "");
		
	Если КадровыеДанныеФизическогоЛица <> Неопределено Тогда
		
		ДанныеФизическогоЛица.Вставить("Фамилия", КадровыеДанныеФизическогоЛица.Фамилия);
		ДанныеФизическогоЛица.Вставить("Имя", КадровыеДанныеФизическогоЛица.Имя);
		ДанныеФизическогоЛица.Вставить("Отчество", КадровыеДанныеФизическогоЛица.Отчество);
		ДанныеФизическогоЛица.Вставить("ИНН", КадровыеДанныеФизическогоЛица.ИНН);
		ДанныеФизическогоЛица.Вставить("ДокументКодМВД", КадровыеДанныеФизическогоЛица.ДокументКодМВД);
		
		ДокументСерияНомер = "";
		Если ЗначениеЗаполнено(КадровыеДанныеФизическогоЛица.ДокументСерия) Тогда
			ДокументСерияНомер = КадровыеДанныеФизическогоЛица.ДокументСерия;
		КонецЕсли; 
		Если ЗначениеЗаполнено(КадровыеДанныеФизическогоЛица.ДокументНомер) Тогда
			ДокументСерияНомер = ?(ПустаяСтрока(ДокументСерияНомер), "", ДокументСерияНомер + " ")
				+ КадровыеДанныеФизическогоЛица.ДокументНомер;
		КонецЕсли; 
		ДанныеФизическогоЛица.Вставить("ДокументСерияНомер", ДокументСерияНомер);
		
		Если ЗначениеЗаполнено(КадровыеДанныеФизическогоЛица.АдресПоПрописке) Тогда
			
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(КадровыеДанныеФизическогоЛица.АдресПоПрописке);
			
			ДанныеФизическогоЛица.Вставить("АдресИндекс", СтруктураАдреса.Индекс);
			
			Если ЗначениеЗаполнено(СтруктураАдреса.Регион) Тогда
				ДанныеФизическогоЛица.Вставить("АдресКодРегиона", АдресныйКлассификатор.КодРегионаПоНаименованию(СтруктураАдреса.Регион));
			КонецЕсли; 
			
			ДанныеФизическогоЛица.Вставить("АдресРайон", СтруктураАдреса.Район);
			
			Если НЕ ЗначениеЗаполнено(СтруктураАдреса.Город) Тогда
				
				Если ДанныеФизическогоЛица.АдресКодРегиона = 77
					ИЛИ ДанныеФизическогоЛица.АдресКодРегиона = 78 Тогда
					ДанныеФизическогоЛица.Вставить("АдресГород", СтруктураАдреса.Регион);
				КонецЕсли; 
				
			Иначе
				ДанныеФизическогоЛица.Вставить("АдресГород", СтруктураАдреса.Город);
			КонецЕсли; 
			
			ДанныеФизическогоЛица.Вставить("АдресНаселенныйПункт", СтруктураАдреса.НаселенныйПункт);
			ДанныеФизическогоЛица.Вставить("АдресУлица", СтруктураАдреса.Улица);
			ДанныеФизическогоЛица.Вставить("АдресДом", СтруктураАдреса.Дом);
			ДанныеФизическогоЛица.Вставить("АдресКорпус", СтруктураАдреса.Корпус);
			ДанныеФизическогоЛица.Вставить("АдресКвартира", СтруктураАдреса.Квартира);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ДанныеФизическогоЛица;
	
КонецФункции

Процедура ПроверитьЗначенияПараметров(НастройкиОтчета, ОбщиеНастройки)
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПервыйНомер"));
	Если НЕ ЗначениеПараметра.Использование Тогда
		ЗначениеПараметра.Значение = 0;
	КонецЕсли; 
	ЗначениеПараметра.Использование = Истина;
	ОбщиеНастройки.Вставить("ПервыйНомер", ЗначениеПараметра.Значение);
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Ответственный"));
	Если НЕ ЗначениеПараметра.Использование Тогда
		ЗначениеПараметра.Значение = Неопределено;
	КонецЕсли; 
	ЗначениеПараметра.Использование = Истина;
	
	Ответственный = ИОФамилияФизическогоЛица(ЗначениеПараметра.Значение);
	ОбщиеНастройки.Вставить("Ответственный", Ответственный);
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьОтветственного"));
	Если НЕ ЗначениеПараметра.Использование Тогда
		ЗначениеПараметра.Значение = Неопределено;
	КонецЕсли; 
	ЗначениеПараметра.Использование = Истина;
	ОбщиеНастройки.Вставить("ДолжностьОтветственного", ЗначениеПараметра.Значение);
	
КонецПроцедуры

Функция РеквизитыРегистрацийВНалоговомОрганеСтруктурныхЕдиниц(СтруктурныеЕдиницы)
	
	РеквизитыРегистраций = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтруктурныеЕдиницы.Период,
		|	СтруктурныеЕдиницы.СтруктурнаяЕдиница
		|ПОМЕСТИТЬ ВТСтруктурныеЕдиницы
		|ИЗ
		|	&СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
		
	Запрос.Выполнить();
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ИсторияРегистрацийВНалоговомОргане",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСтруктурныеЕдиницы",
			"СтруктурнаяЕдиница"));
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИсторияРегистрацийВНалоговомОргане.Период КАК Период,
		|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	РегистрацииВНалоговомОргане.Код,
		|	РегистрацииВНалоговомОргане.КПП
		|ИЗ
		|	ВТИсторияРегистрацийВНалоговомОрганеСрезПоследних КАК ИсторияРегистрацийВНалоговомОргане
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка
		|ИТОГИ ПО
		|	СтруктурнаяЕдиница";
		
	ВыборкаПоСтруктурнымЕдиницам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтруктурнымЕдиницам.Следующий() Цикл
		
		КоллекцияПериодов = Новый Соответствие;
		ВыборкаПоПериодам = ВыборкаПоСтруктурнымЕдиницам.Выбрать();
		Пока ВыборкаПоПериодам.Следующий() Цикл
			
			СтруктураДанныхРегистрации = Новый Структура("Код,КПП");
			ЗаполнитьЗначенияСвойств(СтруктураДанныхРегистрации, ВыборкаПоПериодам);
			
			КоллекцияПериодов.Вставить(ВыборкаПоПериодам.Период, СтруктураДанныхРегистрации);
			
		КонецЦикла; 
		
		РеквизитыРегистраций.Вставить(ВыборкаПоСтруктурнымЕдиницам.СтруктурнаяЕдиница, КоллекцияПериодов);
		
	КонецЦикла; 
	
	Возврат РеквизитыРегистраций;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и Функции.

Функция ИОФамилияФизическогоЛица(ФизическоеЛицо)
	
	ИОФамилия = "";
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическоеЛицо, "ИОФамилия");
		Если КадровыеДанные.Количество() > 0 Тогда
			ИОФамилия = КадровыеДанные[0].ИОФамилия;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИОФамилия;
	
КонецФункции

Процедура ИзменитьГруппировкиВариантаТ49Т51(Структура, ЕстьГруппировкаПоПодразделению)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		
		Если ЭлементСтруктуры.Имя = "Подразделение" Тогда
			Если ЕстьГруппировкаПоПодразделению Тогда
				ЭлементСтруктуры.Использование = Истина;
			Иначе
				ЭлементСтруктуры.Использование = Ложь;
			КонецЕсли;
		ИначеЕсли ЭлементСтруктуры.Имя = "Сотрудник" Тогда
			Если ЕстьГруппировкаПоПодразделению Тогда
				ЭлементСтруктуры.Использование = Ложь;
			Иначе
				ЭлементСтруктуры.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИзменитьГруппировкиВариантаТ49Т51(ЭлементСтруктуры.Структура, ЕстьГруппировкаПоПодразделению);
		
	КонецЦикла;
	
КонецПроцедуры

// Дополнение строк промежуточного итога.
//
Процедура ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ДанныеСтроки) Экспорт
	
	Для каждого ПромежуточныйИтог Из ПромежуточныеИтоги Цикл
		ПромежуточныеИтоги.Вставить(ПромежуточныйИтог.Ключ, ПромежуточныйИтог.Значение + ДанныеСтроки[ПромежуточныйИтог.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#КонецЕсли