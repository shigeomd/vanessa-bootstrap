#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "АнализЗарплатыПоИсточникамФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Начисления, удержания и выплаты по сотрудникам, сгруппированные помесячно и
		|выведенные в разрезе источников финансирования. Аналог отчета ""Анализ
		|зарплаты по сотрудникам (помесячно)"", но с точностью до источников финансирования'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "АнализЗарплатыПоПодразделениямИСотрудникамЗаПериод");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Начисления, удержания и выплаты по сотрудникам, выведенные сводно за весь 
		|период отчета. Сальдо выводится на начало и на конец заданного периода'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "АнализЗарплатыПоПодразделениямИСотрудникам");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Начисления, удержания и выплаты по сотрудникам, сгруппированные помесячно. 
		|Сальдо выводится на начало и на конец каждого месяца, включенного в период формирования отчета'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ВедомостиСРазбивкойПоИсточникамФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'По каждой статье финансирования выводится отдельная ведомость'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "КраткийСводНачисленийИУдержаний");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Свод начислений и удержаний, попавших в расчетные ведомости
		|и расчетные листки'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "КраткийСводПоИсточникамФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Свод начислений и удержаний, попавших в расчетные ведомости
		|и расчетные листки с разбиением по источникам финансирования'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ПолныйСводНачисленийУдержанийИВыплат");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Свод начислений (с количеством оплаченных дней и часов), удержаний, выплат, 
		|а также начальное и конечное сальдо взаиморасчетов с сотрудниками'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "СводПоИсточникамФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Свод начислений (с количеством оплаченных дней и часов), удержаний, выплат, 
		|а также начальное и конечное сальдо взаиморасчетов с сотрудниками с разбивкой по источникам финансирования'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РасчетныйЛисток");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Расчетные листки могут выводиться с разбивкой по подразделениям'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Расчетные листки, разбитые по источникам финансирования'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "УдержанияИзЗарплаты");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Удержания по видам и общий процент удержаний по отношению к начислениям.
		|Цветом выделены сотрудники с размером удержаний более 20%'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "УдержанияВРазрезеИсточниковФинансирования");
	НастройкиВарианта.Описание =
		НСтр("ru = 'Удержания по видам и общий процент удержаний по отношению к начислениям в разрезе источников финансирования.
		|Цветом выделены сотрудники с размером удержаний более 20%'");
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетныйЛистокПодробнее") Тогда
		
		ПечатаемыйДокумент = Неопределено;
		Если МассивОбъектов.Количество() > 1 Тогда
			ПечатаемыйДокумент = МассивОбъектов[1];
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РасчетныйЛистокПодробнее",
			"РасчетныйЛисток",
			ПечатаемыйДокумент);
						
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьТ49(Документ) Экспорт
	
	ОтчетОбъект = Отчеты.АнализНачисленийИУдержаний.Создать();
	
	ВариантОтчета = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти("Т49");
	Если ВариантОтчета= Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	НастройкиОтчета = ВариантОтчета.Настройки;
	
	Период = Документ.ПериодРегистрации;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Период", Новый СтандартныйПериод(НачалоМесяца(Период), КонецМесяца(Период)));
	СтруктураПараметров.Вставить("НачалоПериода",				НачалоМесяца(Период));
	СтруктураПараметров.Вставить("КонецПериода",				КонецМесяца(Период));
	
	Для каждого ПараметрЗаполнения Из СтруктураПараметров Цикл
		
		ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ПараметрЗаполнения.Ключ);
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра.Значение = ПараметрЗаполнения.Значение;
			ЗначениеПараметра.Использование = Истина;
		Иначе
			НовыйПараметр = НастройкиОтчета.ПараметрыДанных.Элементы.Добавить();
			НовыйПараметр.Параметр = ПараметрКомпоновкиДанных;
			НовыйПараметр.Значение = ПараметрЗаполнения.Значение;
			НовыйПараметр.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеВедомости = Документы[Документ.Метаданные().Имя].ДанныеВедомостиДляПечати(Документ);
	СписокСотрудников = ДанныеВедомости.ВыгрузитьКолонку("Сотрудник");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиОтчета.Отбор, "Сотрудник.ГоловнойСотрудник", СписокСотрудников, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	
	Если ЗначениеЗаполнено(Документ.Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиОтчета.Отбор, "Подразделение", Документ.Подразделение, ВидСравненияКомпоновкиДанных.ВИерархии, , Истина);
	КонецЕсли;
	
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Документ", Документ);
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ДанныеВедомости", ДанныеВедомости);
	Если ЗначениеЗаполнено(Документ.Подразделение) Тогда
		ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПодразделениеВШапке", Документ.Подразделение);
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ОтчетОбъект.СкомпоноватьРезультат(ДокументРезультат);
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#КонецЕсли