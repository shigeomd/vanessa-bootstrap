&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений; 
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2015Кв1";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ                  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоДНБ                = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 11));
	СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧислоДНБ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 11, ДопустимыйЗнак.Неотрицательный));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал = Перечисления.Периодичность.Квартал;
	СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3     = "П0001300040";
	СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б     = "П0002800010";
	СтруктураРеквизитовФормы.ИдМСЧ_Лист03А       = "П0003300005";
	СтруктураРеквизитовФормы.ИдМСЧ_Лист03Б       = "П0003400005";
	СтруктураРеквизитовФормы.ИдМСЧ_Лист07        = "П0007000010";
	СтруктураРеквизитовФормы.ИдМСЧ_Приложение1   = "П0000100010";
	СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1 = "П0000200040";
	СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2 = "П0000200051";
	
	// Количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда).
	КолИсхСтрокИдМСЧ_Раздел1_3     = 1; //(21)
	КолИсхСтрокИдМСЧ_Лист02_6б     = 1; //( 9)
	КолИсхСтрокИдМСЧ_Лист03А       = 1; //( 9)
	КолИсхСтрокИдМСЧ_Лист03Б       = 1; //( 9)
	КолИсхСтрокИдМСЧ_Лист07        = 1; //( 9)
	КолИсхСтрокИдМСЧ_Приложение1   = 1; //(22)
	КолИсхСтрокИдМСЧ_Приложение2_1 = 1; //(22)
	КолИсхСтрокИдМСЧ_Приложение2_2 = 1; //(22)
	
	КолКолонокИдМСЧ_Раздел1_3     = 3;  //(2 - но здесь макс. номер показателя раздела)
	КолКолонокИдМСЧ_Лист02_6б     = 10; //
	КолКолонокИдМСЧ_Лист03А       = 20; //
	КолКолонокИдМСЧ_Лист03Б       = 20; //
	КолКолонокИдМСЧ_Лист07        = 7;
	КолКолонокИдМСЧ_Приложение1   = 4;
	КолКолонокИдМСЧ_Приложение2_1 = 12; //
	КолКолонокИдМСЧ_Приложение2_2 = 2;  //
	
	СтруктураДанныхТитульный   = Новый Структура;
	СтруктураДанныхЛист02_6б   = Новый Структура;
	СтруктураДанныхЛист06      = Новый Структура;
	СтруктураДанныхЛист07      = Новый Структура;
	СтруктураДанныхПриложение1 = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3,     СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б,     СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист03А,       СтруктураРеквизитовФормы.ИдМСЧ_Лист03А);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист03Б,       СтруктураРеквизитовФормы.ИдМСЧ_Лист03Б);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист07,        СтруктураРеквизитовФормы.ИдМСЧ_Лист07);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение1,   СтруктураРеквизитовФормы.ИдМСЧ_Приложение1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1, СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2, СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2);
	
	// Структура содержит данные дополнительных страниц.
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1_1",   "ТаблицаСтраницыРаздел1_1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1_2",   "ТаблицаСтраницыРаздел1_2");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1_3",   "ТаблицаСтраницыРаздел1_3"); //многостраничный и многострочный
	мСтруктураМногостраничныхРазделов.Вставить("Лист02",      "ТаблицаСтраницыЛист02");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_1",    "ТаблицаСтраницыЛист02_1");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_2",    "ТаблицаСтраницыЛист02_2");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_3",    "ТаблицаСтраницыЛист02_3");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_4",    "ТаблицаСтраницыЛист02_4");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_5",    "ТаблицаСтраницыЛист02_5");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_6",    "ТаблицаСтраницыЛист02_6");
	мСтруктураМногостраничныхРазделов.Вставить("Лист02_6а",   "ТаблицаСтраницыЛист02_6а");
	мСтруктураМногостраничныхРазделов.Вставить("Лист03А",     "ТаблицаСтраницыЛист03А");
	мСтруктураМногостраничныхРазделов.Вставить("Лист03Б",     "ТаблицаСтраницыЛист03Б");
	мСтруктураМногостраничныхРазделов.Вставить("Лист04",      "ТаблицаСтраницыЛист04");
	мСтруктураМногостраничныхРазделов.Вставить("Лист05",      "ТаблицаСтраницыЛист05");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение2", "ТаблицаСтраницыПриложение2"); //многостраничный и многострочный

	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3,     КолИсхСтрокИдМСЧ_Раздел1_3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б,     КолИсхСтрокИдМСЧ_Лист02_6б);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист03А,       КолИсхСтрокИдМСЧ_Лист03А);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист03Б,       КолИсхСтрокИдМСЧ_Лист03Б);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист07,        КолИсхСтрокИдМСЧ_Лист07);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение1,   КолИсхСтрокИдМСЧ_Приложение1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1, КолИсхСтрокИдМСЧ_Приложение2_1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2, КолИсхСтрокИдМСЧ_Приложение2_2);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3,     КолКолонокИдМСЧ_Раздел1_3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б,     КолКолонокИдМСЧ_Лист02_6б);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист03А,       КолКолонокИдМСЧ_Лист03А);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист03Б,       КолКолонокИдМСЧ_Лист03Б);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист07,        КолКолонокИдМСЧ_Лист07);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение1,   КолКолонокИдМСЧ_Приложение1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1, КолКолонокИдМСЧ_Приложение2_1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2, КолКолонокИдМСЧ_Приложение2_2);
				
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2015";;
	
	СтруктураРеквизитовФормы.мКодОтчета = "1151006";
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.06", Истина);
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, Найти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.НаимОрг = Неопределено;
	Рез = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "НаимЮЛПол").Свойство("НаимЮЛПол", СтруктураРеквизитовФормы.НаимОрг);
	СтруктураРеквизитовФормы.НаимОрг = ?(Рез, СтруктураРеквизитовФормы.НаимОрг, "");
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	РегламентированнаяОтчетностьПереопределяемый.ПриСозданииФормыРеглОтчета(
		СтруктураРеквизитовФормы.ИмяОтчета, СтруктураРеквизитовФормы.ИмяФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел1_3");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист02_6б");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист03А");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист03Б");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист07");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Приложение1");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Приложение2_1");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Приложение2_2");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НаимОрг");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПоМесту");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("ВГруппуОПВходитОрганизацияДоступность", Ложь);
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоДНБ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповНеотрицательноеЧислоДНБ");
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьКвартал");
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьМесяц");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ОКТМОДляРазделов");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ИмяОтчета", Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7));
	СтруктураРеквизитовФормы.Вставить("ИмяФормы", Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_4.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_5.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_6.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_6а.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист03А.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист03Б.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист04.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист05.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыПриложение2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Приложение №6б к Листу 02.
	// Для вычисления значения в строке 070 многострочной части.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000280007003", "П000280002003;П000280002103;П000280003003;П000280003103;П000280004003;П000280005003;П000280006003");
	
	// Лист 03А.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310002003", "П000310002103;П000310002203;П000310002303;П000310002403");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310001003", "П000310002103;П000310002203;П000310002303;П000310002403;П000310003003;П000310004003;П000310005003;П000310006003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000310009003", "П000310002103;П000310002203;П000310002303;П000310002403;П000310003003;П000310004003;П000310005003;П000310006003;П000310007003;П000310008103;П000310000103;П000310000100");
	
	// Лист 03Б.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000320003003", "П000320000200;П000320001003;П000320002003");
	
	// Лист 04.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400004003", "П000400000200;П000400001003;П000400002003;П000400003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000400008003", "П000400000200;П000400001003;П000400002003;П000400003003;П000400005003;П000400006003;П000400007003");
	
	// Лист 05.
	Если Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) < 2015 Тогда
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500004003", "П000500001003;П000500002003;П000500003003;П000500003103");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500006003", "П000500001003;П000500002003;П000500003003;П000500003103;П000500005003");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500009003", "П000500001003;П000500002003;П000500003003;П000500003103;П000500007003;П000500008003");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500010003", "П000500001003;П000500002003;П000500003003;П000500003103;П000500005003;П000500008003");
	Иначе
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500004003", "П000500001003;П000500002003");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500006003", "П000500001003;П000500002003;П000500005003");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500010003", "П000500001003;П000500002003;П000500005003;П000500008003");
	КонецЕсли;
	
	// Лист 06.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600001003", "П000600002003;П000600003003;П000600004003;П000600005003;П000600006003;П000600007003;П000600008003;П000600009003;П000600010003;П000600011003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600019003", "П000600020003;П000600021003;П000600022003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600024003", "П000600025003;П000600026003;П000600027003;П000600028003;П000600029003;П000600030003;П000600031003;П000600032003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600033003", "П000600002003;П000600003003;П000600014003;П000600020003;П000600025003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600035003", "П000600004003;П000600005003;П000600015003;П000600021003;П000600026003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600037003", "П000600006003;П000600016003;П000600027003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600038003", "П000600007003;П000600017003;П000600028003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600039003", "П000600011003;П000600018003;П000600022003;П000600032003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600041003", "П000600002003;П000600003003;П000600014003;П000600020003;П000600025003;П000600034003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600044003", "П000600042003;П000600043003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600045003", "П000600004003;П000600005003;П000600015003;П000600021003;П000600026003;П000600036003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600048003", "П000600046003;П000600047003;П000600047103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600049003", "П000600011003;П000600018003;П000600022003;П000600032003;П000600040003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600052003", "П000600050003;П000600051003");
	Если Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) < 2015 Тогда
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600053003", "П000600002003;П000600003003;П000600014003;П000600020003;П000600025003;П000600034003;П000600043003;П000600004003;П000600005003;П000600015003;П000600021003;П000600026003;П000600036003;П000600047003;П000600011003;П000600018003;П000600022003;П000600032003;П000600040003;П000600051003");
	Иначе
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600053003", "П000600002003;П000600003003;П000600014003;П000600020003;П000600025003;П000600002003;П000600003003;П000600014003;П000600020003;П000600025003;П000600034003;П000600004003;П000600005003;П000600015003;П000600021003;П000600026003;П000600036003;П000600047003;П000600011003;П000600018003;П000600022003;П000600032003;П000600040003;П000600051003");
	КонецЕсли;
	
	// Лист 07.
	// Для вычисления значения в строке многострочной части по колонке 7.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000700001007", "П000700001003;П000700001004;П000700001006");
	// Для вычисления "Итого" по колонкам 3, 4, 6, 7 многострочной части.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000700002003", "П000700001003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000700002004", "П000700001004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000700002006", "П000700001006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000700002007", "П000700001003;П000700001004;П000700001006");
	
	// Приложение 2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020002003", "П000020004101");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020002103", "П000020004301;П000020004302;П000020004303;П000020004304;П000020004305;П000020005201");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020002203", "П000020004301;П000020004302;П000020004303;П000020004304;П000020004305;П000020005201;П000020004101");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020003303", "П000020003003;П000020003103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020003403", "П000020003003;П000020003103");
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	УстановитьМаскиВПоляхВвода(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ЗаполнитьСоответствиеОКАТОСубъектамРФ();
	
	ТабличныйДокумент.Области.НомерКорректировки.Значение = 0;
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		
		ПолучитьСтавкиНалога(ЭтаФорма, "Титульный");
		
		УстановитьКодПоМестуПоУмолчанию();
		
		ПроставитьПрПл_1();
		
		ЗаполнитьКБКРаздел1(Истина);
		ЗаполнитьКБКРаздел2(Истина);
		
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
		КонецЕсли;
		
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			ГодВИсходномПериоде    = Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
			ГодВНазначаемомПериоде = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Если (ГодВИсходномПериоде = 2014 И ГодВНазначаемомПериоде > 2014)
			 ИЛИ (ГодВИсходномПериоде > 2014 И ГодВНазначаемомПериоде = 2014) Тогда
				ТаблицаСтраницыЛист05.Очистить();
				ТаблицаВариантыЗаполненияЛист05.Очистить();
				ЗаполнитьНачальныеНастройки(Истина);
				Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					ВариантыЗаполненияПоказателей = ТаблицаВариантыЗаполненияЛист05[0].ТаблицаВариантовЗаполнения;
					Для каждого СтрокаТЗ Из ВариантыЗаполненияПоказателей Цикл
						СтрокаТЗ.ВариантЗаполнения = ?(СтрокаТЗ.ВариантЗаполнения = 4, 0, СтрокаТЗ.ВариантЗаполнения);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьПустыеСтруктурыДанных();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			ЗаполнитьПериодОтчета();
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьРежимЗаполненияПоказателей();
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьСведенияОбОрганизации();
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
	КонецЕсли;
	
	ОбновитьДоступностьЭлементовНаСервере("Титульный");

	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗначениеТаймера = ЗначениеТаймера();
		ЗаполнитьАвтоНаСервере();
		ЗаписатьЗамер(ЗначениеТаймера);
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		Если (ГодВИсходномПериоде = 2014 И ГодВНазначаемомПериоде > 2014)
			ИЛИ (ГодВИсходномПериоде > 2014 И ГодВНазначаемомПериоде = 2014) Тогда
			
			Если ГодВИсходномПериоде = 2014 И ГодВНазначаемомПериоде > 2014 Тогда
				ОчиститьНезаполняемыеПоказателиПриСозданииОтчетаКопированием("Лист02_3");
			КонецЕсли;
			
			РасчетНаСервере();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНезаполняемыеПоказателиПриСозданииОтчетаКопированием(ИмяРаздела)
	
	Если ИмяРаздела = "Лист02_3" Тогда
		
		// Строки 110, 130, 160, 170 Приложения 3 к листу 02 недоступны за периоды, начиная с 2015 г.
		Для каждого Страница Из ТаблицаСтраницыЛист02_3 Цикл
			ДанныеСтраницы = Страница.Данные[0].значение;
			ДанныеСтраницы.П000230011003 = 0;
			ДанныеСтраницы.П000230013003 = 0;
			ДанныеСтраницы.П000230016003 = 0;
			ДанныеСтраницы.П000230017003 = 0;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодПоМестуПоУмолчанию()
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "КППЮЛ");
	
	КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
	
	СтруктураРеквизитовФормы.мПоМесту = "214";
	
	Если ЗначениеЗаполнено(КПП) Тогда
		КодПричиныПостановкиНаУчет = Сред(КПП, 5, 2);
		Если КодПричиныПостановкиНаУчет = "4U" Тогда
			СтруктураРеквизитовФормы.мПоМесту = "218";
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма, ПараметрыОтчета);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимЗаполненияПоказателей(ИмяТекущейСтраницы = "") Экспорт
	
	СдачаПоКварталам = (СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал);
	СдачаПоМесяцам = (СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц);
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	// Лист 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
		ИЛИ ИмяТекущейСтраницы = "Лист02" Тогда
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П000200001003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П000200002003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П000200003003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П000200004003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П000200005003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П000200001003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П000200002003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П000200003003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П000200004003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П000200005003");
		КонецЕсли;
		
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П000200011003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П000200011003");
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 1 к листу 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
		ИЛИ ИмяТекущейСтраницы = "Лист02_1" Тогда
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000210001103");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000210001203");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000210001303");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000210001403");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000210002003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000210010003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000210010103");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000210010203");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000210010303");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000210010403");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000210010503");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П000210010003");
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 2 к листу 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
		ИЛИ ИмяТекущейСтраницы = "Лист02_2" Тогда
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220001003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220002003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220003003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220004003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220004103");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220004203");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220005203");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220005903");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220006003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220007003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220009003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220010003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220013103");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220013203");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220013303");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220013403");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220013503");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220020003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220020103");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220020403");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220020503");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220030003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220030103");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000220030203");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 3, "П000220030003");
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 3 к листу 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
		ИЛИ ИмяТекущейСтраницы = "Лист02_3" Тогда
		
		Если НЕ флКвартальноеЗаполнение Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230003003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230004003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230005003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230006003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230007003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230008003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230010003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230011003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230012003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230013003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230014003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230017003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230018003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230019003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000230020003");
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 4 к листу 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
	    ИЛИ ИмяТекущейСтраницы = "Лист02_4" Тогда
		
		Если НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 5, "П000240016003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 5, "П000240016103");
		КонецЕсли;
		
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240002003");
			
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240004001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240005001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240006001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240007001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240008001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240009001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240010001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240011001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240012001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240013001");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240004003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240005003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240006003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240007003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240008003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240009003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240010003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240011003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240012003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240013003");
			
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240014003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240015003");
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000240015103");
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 6 к листу 02.
	Если НЕ ЗначениеЗаполнено(ИмяТекущейСтраницы)
		ИЛИ ИмяТекущейСтраницы = "Лист02_6" Тогда
		
		Если СдачаПоМесяцам И НомерМесяца = 11 Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 5, "П000260012003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000260012003");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки(ЗаполнитьТолькоДляЛиста05 = Ложь)
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		
		Если ТекОбласть.Имя = "Лист05_2014" И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2015-01-01' Тогда
			ИмяСтраницы = "Лист05";
		ИначеЕсли ТекОбласть.Имя = "Лист05_2014" И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2015-01-01' Тогда
			Продолжить;
		ИначеЕсли ТекОбласть.Имя = "Лист05" И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2015-01-01' Тогда
			ИмяСтраницы = "Лист05";
		ИначеЕсли ТекОбласть.Имя = "Лист05" И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета <= '2015-01-01' Тогда
			Продолжить;
		Иначе
			Если ЗаполнитьТолькоДляЛиста05 Тогда
				Продолжить;
			Иначе
				ИмяСтраницы = ТекОбласть.Имя;
			КонецЕсли;
		КонецЕсли;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если КодПоказателя = "П000200032003"
			 ИЛИ КодПоказателя = "П000200033003"
			 ИЛИ КодПоказателя = "П000200034003"
			 ИЛИ КодПоказателя = "П000260000601" Тогда
			
				чВариантЗаполнения = 5;
			
			КонецЕсли;

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1_1";
	СтрокаУровня1.Представление      = "Раздел 1.1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1_2";
	СтрокаУровня1.Представление      = "Раздел 1.2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1_3";
	СтрокаУровня1.Представление      = "Раздел 1.3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02";
	СтрокаУровня1.Представление      = "Лист 02";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_1";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_2";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_3";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_4";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 4";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_5";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 5";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_6";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 6";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_6а";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 6а";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист02_6б";
	СтрокаУровня1.Представление      = "Лист 02. Прил. 6б";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист03А";
	СтрокаУровня1.Представление      = "Лист 03. Раздел А";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист03Б";
	СтрокаУровня1.Представление      = "Лист 03. Раздел Б";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист04";
	СтрокаУровня1.Представление      = "Лист 04";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист05";
	СтрокаУровня1.Представление      = "Лист 05";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист06";
	СтрокаУровня1.Представление      = "Лист 06";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист07";
	СтрокаУровня1.Представление      = "Лист 07";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение1";
	СтрокаУровня1.Представление      = "Приложение 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение2";
	СтрокаУровня1.Представление      = "Приложение 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 4;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 3;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_6а";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист02_6б";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 21;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист03А";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Лист03А;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 31;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист03Б";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 2;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Лист03Б;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 31;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист04";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 6;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист05";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 5;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист06";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Лист07";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Лист07;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Приложение1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1;
	НовСтр.Область = "МногострочнаяЧасть1";
	НовСтр.ВысотаСтроки = 12;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2;
	НовСтр.Область = "МногострочнаяЧасть2";
	НовСтр.ВысотаСтроки = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2015Кв1");
	
	КПП = СокрЛП(ТабличныйДокумент.Области["КПП1"].Значение);
	Если ЗначениеЗаполнено(КПП) Тогда
		Символы56КПП = Сред(КПП, 5, 2);
	Иначе
		Символы56КПП = "";
	КонецЕсли;
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("БазоваяДоходность",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					
					Если Область.Имя = "МестаПредставления" Тогда
						// Фильтрация состава списка для выбора кодов "по месту", в зависимости от КПП:
						// если код места = 213 то 5, 6 символы КПП = 50;
						// если код места = 218 то 5, 6 символы КПП = 01 или 50 или 4U;
						// для всех остальных кодов места 5, 6 символы КПП не равны 4U.
						Если ЗначениеЗаполнено(Символы56КПП) Тогда
							Если КодПоказателя = "213" Тогда
								Если НЕ (Символы56КПП = "50") Тогда
									Продолжить;
								КонецЕсли;
							ИначеЕсли КодПоказателя = "218" Тогда
								Если НЕ (Символы56КПП = "50" ИЛИ Символы56КПП = "01" ИЛИ Символы56КПП = "4U") Тогда
									Продолжить;
								КонецЕсли;
							ИначеЕсли ЗначениеЗаполнено(КодПоказателя) Тогда
								Если Символы56КПП = "4U" Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.БазоваяДоходность = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
					
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	// Титульный лист.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, , "Выбор кода периода", КоллекцияСписковВыбора["Периоды"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, , "Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыОрг", 1, , "Выбор кода формы организации", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	// Подраздел 1.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110003003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК_ФедеральныйБюджет"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110006003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК_БюджетСубъектаРФ"]);
	
	// Подраздел 1.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120011003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК_ФедеральныйБюджет"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120021003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК_БюджетСубъектаРФ"]);
	
	// Подраздел 1.3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130001003", 1, , "Выбор вида платежа", КоллекцияСписковВыбора["ВидыПлатежа"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000130003003", 20, , "Выбор КБК", КоллекцияСписковВыбора["КБК_Раздел1_3"]);
	
	// Лист 02.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщика_Лист02"]);
	
	// Лист 02. Приложение 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщика_Лист02"]);
	
	// Лист 02. Приложение 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщика_Лист02"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220013503", 1, , "Выбор кода метода начисления амортизации", КоллекцияСписковВыбора["КодыНачисленияАмортизации_Лист02_2"]);
	
	// Лист 02. Приложение 3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000230000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщика_Лист02"]);
	
	// Лист 02. Приложение 4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщика_Лист02_4"]);
	
	// Лист 02. Приложение 5.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000250000100", 1, , "Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНалогоплательщика_Лист02_5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000250001000", 1, , "Выбор вида составления расчета", КоллекцияСписковВыбора["ПризнакиРасчета_Лист02_5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000250002002", 1, , "Выбор вида возложения обязанности", КоллекцияСписковВыбора["ВидыВозложенияОбязанности"]);
	
	// Лист 02. Приложение 6а.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000270000501", 1, , "Выбор вида составления расчета", КоллекцияСписковВыбора["ПризнакиРасчета_Лист02_6а"]);
	
	// Лист 03. Раздел А.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310000100", 1, , "Выбор категории налогового агента", КоллекцияСписковВыбора["КатегорииНалоговогоАгента_Лист03А"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310000300", 1, , "Выбор вида дивидендов", КоллекцияСписковВыбора["ВидыДивидендов_Лист03А"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310000400", 2, , "Выбор кода периода", КоллекцияСписковВыбора["Периоды_Лист03А"]);
	
	// Лист 03. Раздел Б.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000320000200", 1, , "Выбор вида дохода", КоллекцияСписковВыбора["ВидыДохода_Лист03Б"]);
	
	// Лист 04.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400000200", 1, , "Выбор вида дохода", КоллекцияСписковВыбора["ВидыДохода_Лист04"]);
	
	// Лист 05.
	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета < '2015-01-01' Тогда
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500000200", 1, , "Выбор вида операции", КоллекцияСписковВыбора["ВидыОперации_Лист05_2014"]);
	Иначе
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500000200", 1, , "Выбор вида операции", КоллекцияСписковВыбора["ВидыОперации_Лист05"]);
	КонецЕсли;
	
	// Лист 07.
	Если СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета < '2015-01-01' Тогда
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700001001", 3, , "Выбор кода вида поступлений", КоллекцияСписковВыбора["КодыВидаПоступлений_Лист07_2014"]);
	Иначе
		РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700001001", 3, , "Выбор кода вида поступлений", КоллекцияСписковВыбора["КодыВидаПоступлений_Лист07"]);
	КонецЕсли;
	
	// Приложение 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001001", 3, , "Выбор кода вида доходов", КоллекцияСписковВыбора["КодыВидаДоходов_Приложение1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001003", 3, , "Выбор кода вида расходов", КоллекцияСписковВыбора["КодыВидаРасходов_Приложение1"]);
	
	// Приложение 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000401", 1, , "Выбор кода статуса налогоплательщика", КоллекцияСписковВыбора["КодыСтатусовНалогоплательщика_Приложение2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000404", 2, , "Выбор кода вида доходов", КоллекцияСписковВыбора["КодыВидовДокумента_Приложение2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020004001", 4, , "Выбор кода дохода", КоллекцияСписковВыбора["КодыДоходов_Приложение2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020004201", 3, , "Выбор кода вычета", КоллекцияСписковВыбора["КодыВычетов_Приложение2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020004202", 3, , "Выбор кода вычета", КоллекцияСписковВыбора["КодыВычетов_Приложение2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020004203", 3, , "Выбор кода вычета", КоллекцияСписковВыбора["КодыВычетов_Приложение2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020004204", 3, , "Выбор кода вычета", КоллекцияСписковВыбора["КодыВычетов_Приложение2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020004205", 3, , "Выбор кода вычета", КоллекцияСписковВыбора["КодыВычетов_Приложение2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020005101", 3, , "Выбор кода стандартного вычета", КоллекцияСписковВыбора["КодыСтандартныхВычетов_Приложение2"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0
		ИЛИ Найти(Область.Имя, "П0000200040") > 0
		ИЛИ Найти(Область.Имя, "П0000200042") > 0
		ИЛИ Найти(Область.Имя, "П0000200051") > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(КодПоказателя, 10) = "П000020004" Тогда
		
		КодПоказателя = "П0000200040";
			
	КонецЕсли;
		
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		
		Область.Значение = РезультатВыбора[КолонкаПоиска];
		
		Если КодПоказателя = "П000020005101" Тогда
			ТабличныйДокумент.Области["П000020005201_" + Сред(Область.Имя, 15)].Значение = РезультатВыбора["БазоваяДоходность"];
		КонецЕсли;
				
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМаскиВПоляхВвода(ИмяТекРаздела)
	
	// титульный
	Если ИмяТекРаздела = "Титульный" Тогда
		ТабличныйДокумент.Области["Прил"].Маска = "999";
		ТабличныйДокумент.Области["КодИМНС"].Маска = "9999";
		
	// Раздел 1.1.
	ИначеЕсли ИмяТекРаздела = "Раздел1_1" Тогда
		ТабличныйДокумент.Области.П000110001003.Маска = "99999999999";
		ТабличныйДокумент.Области.П000110003003.Маска = "99999999999999999999";
		ТабличныйДокумент.Области.П000110006003.Маска = "99999999999999999999";
		
	// Раздел 1.2.
	ИначеЕсли ИмяТекРаздела = "Раздел1_2" Тогда
		ТабличныйДокумент.Области.П000120000103.Маска = "99";
		ТабличныйДокумент.Области.П000120001003.Маска = "99999999999";
		ТабличныйДокумент.Области.П000120011003.Маска = "99999999999999999999";
		ТабличныйДокумент.Области.П000120021003.Маска = "99999999999999999999";
		
	// Раздел 1.3.
	ИначеЕсли ИмяТекРаздела = "Раздел1_3" Тогда
		ТабличныйДокумент.Области.П000130001003.Маска = "9";
		ТабличныйДокумент.Области.П000130002003.Маска = "99999999999";
		ТабличныйДокумент.Области.П000130003003.Маска = "99999999999999999999";

	//Лист 02.
	ИначеЕсли ИмяТекРаздела = "Лист02" Тогда
		ТабличныйДокумент.Области.П000200000100.Маска = "9";
		
	// Приложение 1 к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_1" Тогда
		ТабличныйДокумент.Области.П000210000100.Маска = "9";
		
	// Приложение 2 к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_2" Тогда
		ТабличныйДокумент.Области.П000220000100.Маска = "9";
		ТабличныйДокумент.Области.П000220013503.Маска = "9";
		
	// Приложение 3 к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_3" Тогда
		ТабличныйДокумент.Области.П000230000100.Маска = "9";
		
	// Приложение 4 к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_4" Тогда
		ТабличныйДокумент.Области.П000240000100.Маска = "9";
		ТабличныйДокумент.Области.П000240004001.Маска = "9999";
		ТабличныйДокумент.Области.П000240005001.Маска = "9999";
		ТабличныйДокумент.Области.П000240006001.Маска = "9999";
		ТабличныйДокумент.Области.П000240007001.Маска = "9999";
		ТабличныйДокумент.Области.П000240008001.Маска = "9999";
		ТабличныйДокумент.Области.П000240009001.Маска = "9999";
		ТабличныйДокумент.Области.П000240010001.Маска = "9999";
		ТабличныйДокумент.Области.П000240011001.Маска = "9999";
		ТабличныйДокумент.Области.П000240012001.Маска = "9999";
		ТабличныйДокумент.Области.П000240013001.Маска = "9999";
		
	// Приложение 5 к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_5" Тогда
		ТабличныйДокумент.Области.П000250000100.Маска = "9";
		ТабличныйДокумент.Области.П000250001000.Маска = "9";
		ТабличныйДокумент.Области.П000250002001.Маска = "999999999";
		ТабличныйДокумент.Области.П000250002002.Маска = "9";
		
	// Приложение 6 к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_6" Тогда
				
		ТабличныйДокумент.Области.П000260000101.Маска = "9999999999";
		ТабличныйДокумент.Области.П000260000201.Маска = "999999999";
		ТабличныйДокумент.Области.П000260000301.Маска = "99999999999";
		
	// Приложение 6а к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_6а" Тогда
		
		ТабличныйДокумент.Области.П000270000101.Маска = "9999999999";
		ТабличныйДокумент.Области.П000270000201.Маска = "999999999";
		ТабличныйДокумент.Области.П000270000301.Маска = "99999999999";
		ТабличныйДокумент.Области.П000270000501.Маска = "9";
		
	// Приложение 6б к Листу 02.
	ИначеЕсли ИмяТекРаздела = "Лист02_6б" Тогда
		
		Для Сч = 1 По ЭтаФорма.П0002800010.Количество() Цикл
			ТабличныйДокумент.Области["П000280001003_" + Сч].Маска = "9999999999";
		КонецЦикла;
		
	// Лист 03А.
	ИначеЕсли ИмяТекРаздела = "Лист03А" Тогда
		ТабличныйДокумент.Области.П000310000200.Маска = "9999999999";
		ТабличныйДокумент.Области.П000310000300.Маска = "9";
		ТабличныйДокумент.Области.П000310000400.Маска = "99";
		ТабличныйДокумент.Области.П000310000500.Маска = "9999";
		
		Для Сч = 1 По ЭтаФорма.П0003300005.Количество() Цикл
			ТабличныйДокумент.Области["П000330000503_" + Сч].Маска = "9999999999";
			ТабличныйДокумент.Области["П000330000504_" + Сч].Маска = "999999999";
			//ТабличныйДокумент.Области["П000330000505_" + Сч].Маска = "";
		КонецЦикла;
		
	// Лист 03Б.
	ИначеЕсли ИмяТекРаздела = "Лист03Б" Тогда
		ТабличныйДокумент.Области.П000320000200.Маска = "9";
		
		Для Сч = 1 По ЭтаФорма.П0003400005.Количество() Цикл
			ТабличныйДокумент.Области["П000340000503_" + Сч].Маска = "9999999999";
			ТабличныйДокумент.Области["П000340000504_" + Сч].Маска = "999999999";
			//ТабличныйДокумент.Области["П000330000505_" + Сч].Маска = "";
		КонецЦикла;
		
	// Лист 04.
	ИначеЕсли ИмяТекРаздела = "Лист04" Тогда
		ТабличныйДокумент.Области.П000400000200.Маска = "9";
		
	// Лист 05.
	ИначеЕсли ИмяТекРаздела = "Лист05" Тогда
		ТабличныйДокумент.Области.П000500000200.Маска = "9";
		
	// Лист 07.
	ИначеЕсли ИмяТекРаздела = "Лист07" Тогда
		Для Сч = 1 По ЭтаФорма.П0007000010.Количество() Цикл
			ТабличныйДокумент.Области["П000700001001_" + Сч].Маска = "999";
		КонецЦикла;
		
	// Приложение1.
	ИначеЕсли ИмяТекРаздела = "Приложение1" Тогда
		Для Сч = 1 По ЭтаФорма.П0000100010.Количество() Цикл
			ТабличныйДокумент.Области["П000010001001_" + Сч].Маска = "999";
			ТабличныйДокумент.Области["П000010001003_" + Сч].Маска = "999";
		КонецЦикла;
		
	// Приложение2.
	ИначеЕсли ИмяТекРаздела = "Приложение2" Тогда
		ТабличныйДокумент.Области.П000020000101.Маска = "9999999999";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеОКАТОСубъектамРФ()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2015Кв1");
	
	ОбластьДанных = МакетСоставаПоказателей.Области.ОКАТОПоСубъектам;
	
	ВерхОбласти = ОбластьДанных.Верх;
	НизОбласти = ОбластьДанных.Низ;
	
	Для НомСтр = ВерхОбласти По НизОбласти Цикл
		
		КодСубъекта = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
		НазваниеСубъекта = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
		МаскаОКАТО = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
		
		Если НЕ ПустаяСтрока(КодСубъекта) И НЕ ПустаяСтрока(МаскаОКАТО) Тогда
			НоваяСтрока = СоответствиеОКАТОСубъектамРФ.Добавить();
			НоваяСтрока.КодСубъекта = КодСубъекта;
			НоваяСтрока.НазваниеСубъекта = НазваниеСубъекта;
			НоваяСтрока.МаскаОКАТО = МаскаОКАТО;
			
			НоваяСтрока.ДлинаМаски = СтрДлина(НоваяСтрока.МаскаОКАТО);
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеОКАТОСубъектамРФ.Сортировать("ДлинаМаски Убыв, МаскаОКАТО");
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокРаздела = Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = ?(ЗаголовокРаздела И Элемент.ТекущиеДанные.РазделМногостраничный, Ложь, Истина);
	
	Элементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
	Элементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
	
	ВГруппуОПВходитОрганизацияДоступность = Ложь;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета =
			?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		Элементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
		   И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			Элементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Истина;
			Элементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
		Иначе
			Элементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость = Ложь;
			Элементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.РазделМногострочный
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1_3"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Лист02_6б"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Лист03А"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Лист03Б"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Лист07"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение2" Тогда
	 
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость  = Истина;
		
	Иначе
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость  = Ложь;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	ПриСменеСтраницы(ЭтаФорма, ИмяТекРаздела);
	
	ОбновитьДоступностьЭлементовНаСервере(ИмяТекРаздела);
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Лист03А"
			И СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Лист03Б"
			И СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Приложение2" Тогда
			РасчетНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел1_1"
	 ИЛИ НаимРаздела = "Раздел1_2"
	 ИЛИ НаимРаздела = "Лист02"
	 ИЛИ НаимРаздела = "Лист02_1"
	 ИЛИ НаимРаздела = "Лист02_2"
	 ИЛИ НаимРаздела = "Лист02_3"
	 ИЛИ НаимРаздела = "Лист02_4"
	 ИЛИ НаимРаздела = "Лист02_5"
	 ИЛИ НаимРаздела = "Лист02_6"
	 ИЛИ НаимРаздела = "Лист02_6а"
	 ИЛИ НаимРаздела = "Лист04"
	 ИЛИ НаимРаздела = "Лист05" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[НаимРаздела];
		
		АктивныеСтраницы = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивныеСтраницы[0];
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			Если НаимРаздела = "Лист02_5"
			 ИЛИ НаимРаздела = "Лист02_6а" Тогда
				ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницуНаСервере(НаимРаздела, ВГруппуОПВходитОрганизация, Истина);
			КонецЕсли;
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел1_3"
		  ИЛИ НаимРаздела = "Лист03А"
	      ИЛИ НаимРаздела = "Лист03Б" Тогда
		  
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
			
			Для каждого СтрТаблица Из СтрТаблицыСтраниц Цикл
				СтрТаблица.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//	
	ИначеЕсли НаимРаздела = "Приложение2" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
						
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ЗагТекущейСтраницыПанели = СтрТаблицаСтраницы.Представление;
			
			Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) 
			 ИЛИ (СтрТаблицаСтраницы.Представление = "Новая страница") Тогда
									
				НаименованиеДопСтраницы = ТабличныйДокумент.Области.П000020000101.Значение;
								
				// Определяем представление (название) дополнительной страницы 
				Если Не ПустаяСтрока(НаименованиеДопСтраницы) Тогда
					ЗагТекущейСтраницыПанели = НаименованиеДопСтраницы;
				Иначе
					ЗагТекущейСтраницыПанели = "Новая страница";
				КонецЕсли;
				
				СтрТаблицаСтраницы.Представление = ЗагТекущейСтраницыПанели;
			КонецЕсли;
			                                    			
			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
			
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
						
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;	
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Лист02_6б" ИЛИ НаимРаздела = "Лист07" ИЛИ НаимРаздела = "Приложение1" Тогда
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);
		
	// Обычные разделы.
	//
	Иначе
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	ТабличныйДокумент.Очистить();
	Если ИмяТекРаздела = "Лист05" Тогда
		ИмяВыводимогоРаздела = "Лист05" + ?(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2015-01-01', "_2014", "");
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
			Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяВыводимогоРаздела));
	Иначе
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(
			Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	КонецЕсли;
	
	//программная установка типа (обход интерактивного запрета на точность больше 9)
	УстановитьТипЗначений(ИмяТекРаздела);
	
	ВГруппуОПВходитОрганизация = Ложь;

	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел1_1"
	 ИЛИ ИмяТекРаздела = "Раздел1_2"
	 ИЛИ ИмяТекРаздела = "Лист02"
	 ИЛИ ИмяТекРаздела = "Лист02_1"
	 ИЛИ ИмяТекРаздела = "Лист02_2"
	 ИЛИ ИмяТекРаздела = "Лист02_3"
	 ИЛИ ИмяТекРаздела = "Лист02_4"
	 ИЛИ ИмяТекРаздела = "Лист02_5"
	 ИЛИ ИмяТекРаздела = "Лист02_6"
	 ИЛИ ИмяТекРаздела = "Лист02_6а"
	 ИЛИ ИмяТекРаздела = "Лист04"
	 ИЛИ ИмяТекРаздела = "Лист05" Тогда
	 
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
			
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел1_3"
		ИЛИ ИмяТекРаздела = "Лист03А"
		ИЛИ ИмяТекРаздела = "Лист03Б"
		ИЛИ ИмяТекРаздела = "Приложение2" Тогда
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Или ЗаголовокРаздела Тогда
				Для Каждого Область Из ТабличныйДокумент.Области Цикл
					Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			   И (НовДанныеДопСтрокРаздела.Количество() > 0)
			   И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			Иначе
				НовДанныеДопСтрокРаздела = Неопределено;
			КонецЕсли;
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
		Иначе
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Лист02_6б"
		ИЛИ ИмяТекРаздела = "Лист07"
		ИЛИ ИмяТекРаздела = "Приложение1" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		СтруктураГруппы = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	// Обычные разделы.
	//
	Иначе
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьМаскиВПоляхВвода(ИмяТекРаздела);
	
	Если ИмяТекРаздела = "Титульный" Тогда
		ОбновитьДоступностьЭлементовНаСервере(ИмяТекРаздела);
	Иначе
		ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначений(ИмяТекРаздела)
	
	ОписаниеТиповЧислоДНБ                = СтруктураРеквизитовФормы.мОписаниеТиповЧислоДНБ;
	ОписаниеТиповНеотрицательноеЧислоДНБ = СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧислоДНБ;
	
	Если ИмяТекРаздела = "Лист02_5" Тогда
		ТабличныйДокумент.Области.П000250004003.ТипЗначения = ОписаниеТиповНеотрицательноеЧислоДНБ;
	ИначеЕсли ИмяТекРаздела = "Лист02_6" Тогда
		ТабличныйДокумент.Области.П000260004003.ТипЗначения = ОписаниеТиповЧислоДНБ;
	ИначеЕсли ИмяТекРаздела = "Лист02_6а" Тогда
		ТабличныйДокумент.Области.П000270003403.ТипЗначения = ОписаниеТиповЧислоДНБ;
		ТабличныйДокумент.Области.П000270004003.ТипЗначения = ОписаниеТиповНеотрицательноеЧислоДНБ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьЭлементовНаСервере(ИмяТекРаздела)
	
	Перем ЦветФона, ЦветФона4;
	
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	мСтруктураЦветовРаскраски.Свойство("_4", ЦветФона4);
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		флЕстьОбособ = (СтруктураРеквизитовФормы.мПоМесту = "220" ИЛИ СтруктураРеквизитовФормы.мПоМесту = "223");
		
		Если флЕстьОбособ Тогда
			ТабличныйДокумент.Области.НаимОрг.Защита = Ложь;
			мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
		Иначе
			ТабличныйДокумент.Области.НаимОрг.Значение = СтруктураРеквизитовФормы.НаимОрг;
			ТабличныйДокумент.Области.НаимОрг.Защита = Истина;
			мСтруктураЦветовРаскраски.Свойство("_5", ЦветФона);
		КонецЕсли;
		
		ТабличныйДокумент.Области.НаимОрг.ЦветФона = ЦветФона;
		
		УстановитьДоступностьИННКППРеорганизованнойОрганизации(ЭтаФорма);
		
	ИначеЕсли ИмяТекРаздела = "Лист02_3" Тогда
		
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2015 Тогда
			
			мСтруктураЦветовРаскраски.Свойство("_5", ЦветФона);
			мСтруктураЦветовРаскраски.Свойство("_5", ЦветФона4);
			
			ТабличныйДокумент.Области.П000230011003.Защита = Истина;
			ТабличныйДокумент.Области.П000230013003.Защита = Истина;
			ТабличныйДокумент.Области.П000230016003.Защита = Истина;
			ТабличныйДокумент.Области.П000230017003.Защита = Истина;
			
		КонецЕсли;
		
		ТабличныйДокумент.Области.П000230011003.ЦветФона = ЦветФона;
		ТабличныйДокумент.Области.П000230013003.ЦветФона = ЦветФона;
		ТабличныйДокумент.Области.П000230016003.ЦветФона = ЦветФона4;
		ТабличныйДокумент.Области.П000230017003.ЦветФона = ЦветФона;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьЭлементовНаКлиенте()
	
	Перем ЦветФона;
	
	мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	
	флЕстьОбособ = (СтруктураРеквизитовФормы.мПоМесту = "220" ИЛИ СтруктураРеквизитовФормы.мПоМесту = "223");
	
	Если флЕстьОбособ Тогда
		ТабличныйДокумент.Области.НаимОрг.Защита = Ложь;
		мСтруктураЦветовРаскраски.Свойство("_0", ЦветФона);
	Иначе
		ТабличныйДокумент.Области.НаимОрг.Значение = СтруктураРеквизитовФормы.НаимОрг;
		ТабличныйДокумент.Области.НаимОрг.Защита = Истина;
		мСтруктураЦветовРаскраски.Свойство("_5", ЦветФона);
	КонецЕсли;
	
	ТабличныйДокумент.Области.НаимОрг.ЦветФона = ЦветФона;
	
	УстановитьДоступностьИННКППРеорганизованнойОрганизации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьИННКППРеорганизованнойОрганизации(Форма)
	
	// ИНН/КПП реорганизованной организации (обособленного подразделения).
	ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области.КодФормыОрг;
	ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.ИНН_Реорг;
	ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.КПП_Реорг;
	Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
	 ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
		ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
		ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
	Иначе
		РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
		РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "" Тогда
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			Если ИмяПоказателя = "П000280007003" Тогда
				// Случай нестандартной многострочной части в Приложении №6б к Листу 02.
				КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, "П000280001003");
			ИначеЕсли СтрЧислоВхождений(ИмяПоказателя, "П000020004") > 0 Тогда
				КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, "П000020004001");
			ИначеЕсли СтрЧислоВхождений(ИмяПоказателя, "П000020005") > 0 Тогда
				КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, "П000020005101");		
			Иначе
				КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			КонецЕсли;

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					Если ИмяПоказателя = "П000280007003" Тогда
						// Случай нестандартной многострочной части в Приложении №6б к Листу 02.
						ИмяГруппы = "П0002800010";
					ИначеЕсли СтрЧислоВхождений(ИмяПоказателя, "П000020004") > 0 Тогда	
						ИмяГруппы = "П0000200040";
					ИначеЕсли СтрЧислоВхождений(ИмяПоказателя, "П000020005") > 0 Тогда	
						ИмяГруппы = "П0000200051";		
					Иначе
						ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					КонецЕсли;
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					// Декларация по НДС. В многострочном блоке встречаются строки, которые не должны быть закрашены в стандартный зеленый цвет.
					
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриСменеСтраницы(Форма, ИмяТекущейСтраницы) Экспорт
	
	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницы);
	
	ИзменитьВариантыЗаполненияПоказателей(Форма, ИмяТекущейСтраницы);
	
	Если ИмяТекущейСтраницы = "Приложение2" Тогда
		Форма.ТабличныйДокумент.Области.П000020000701.Значение = Форма.ТабличныйДокумент.Области.П000020000101.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантыЗаполненияПоказателей(Форма, ИмяТекущейСтраницы)
	
	Перем ТекущаяОбласть;
	
	ТекущаяОбласть = Форма.ТабличныйДокумент;
	
	НомерМесяца = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	СтрПоМесту = Форма.СтруктураДанныхТитульный.ПоМесту;
	
	ПоОбособленномуПодразделению = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223");
	ПоКонсолидированнойГруппе = (СтрПоМесту = "218");

	КодПериодаСдачиОтчетности = Форма.СтруктураДанныхТитульный.Период;
	
	СдачаПоКварталам = (Форма.СтруктураРеквизитовФормы.мПериодичность = Форма.СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал);
	СдачаПоМесяцам = (Форма.СтруктураРеквизитовФормы.мПериодичность = Форма.СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц);
	
	Форма.УстановитьРежимЗаполненияПоказателей(ИмяТекущейСтраницы);
	
	Если ИмяТекущейСтраницы = "Раздел1_2" Тогда
		
		ЕстьАвансы = (СдачаПоКварталам И АвансовыеПлатежиРазличаются(Форма, "1,3,4"))
			ИЛИ (СдачаПоМесяцам И ЕстьАвансовыеПлатежи(Форма, "1,3,4"))
			ИЛИ (ПоОбособленномуПодразделению И ЕстьАвансовыеПлатежиОП(Форма, "1,3,4"))
			ИЛИ (ПоКонсолидированнойГруппе И ЕстьАвансовыеПлатежиКГ(Форма, "1,3,4"));
		
		Если (НомерМесяца = 9 И СдачаПоКварталам И ЕстьАвансы)
		 ИЛИ (НомерМесяца = 11 И СдачаПоМесяцам И ЕстьАвансы) Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000120000103");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000120000103");
			ТекущаяОбласть.Области.П000120000103.Значение = "";
		КонецЕсли;
	
	ИначеЕсли ИмяТекущейСтраницы = "Лист02" Тогда
		
		Если НомерМесяца <> 3 И НомерМесяца <> 12 Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200011003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200011003");
		КонецЕсли;
		
		Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250000100"));
		
		ПризнакНалогоплательщика = СокрЛП(ТекущаяОбласть.Области.П000200000100.Значение);
		
		// Строка 230.
		Если ПризнакНалогоплательщика = "4" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200023003");
			ТекущаяОбласть.Области.П000200023003.Значение = "";
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200023003");
		КонецЕсли;
		
		// Строка 260.
		Если ПризнакНалогоплательщика = "4" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200026003");
			ТекущаяОбласть.Области.П000200026003.Значение = "";
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200026003");
		КонецЕсли;
		
		// Строки 290-310 и 320-340.
		Если ПоКонсолидированнойГруппе Тогда
			Если КодПериодаСдачиОтчетности = "15" Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200030003");
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200033003");
				
				Если ПризнакНалогоплательщика = "4" Тогда
					ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200031003");
					ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200034003");
					ТекущаяОбласть.Области.П000200031003.Значение = "";
					ТекущаяОбласть.Области.П000200034003.Значение = "";
				Иначе
					ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200031003");
					ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200034003");
				КонецЕсли;
				
			ИначеЕсли КодПериодаСдачиОтчетности = "67" Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200030003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200031003");
				
				ТекущаяОбласть.Области.П000200029003.Значение = "";
				ТекущаяОбласть.Области.П000200030003.Значение = "";
				ТекущаяОбласть.Области.П000200031003.Значение = "";
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200033003");
				
				Если ПризнакНалогоплательщика = "4" Тогда
					ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200034003");
					ТекущаяОбласть.Области.П000200034003.Значение = "";
				Иначе
					ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200034003");
				КонецЕсли;
				
			ИначеЕсли КодПериодаСдачиОтчетности = "13" ИЛИ КодПериодаСдачиОтчетности = "14" Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200030003");
				
				Если ПризнакНалогоплательщика = "4" Тогда
					ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200031003");
					ТекущаяОбласть.Области.П000200031003.Значение = "";
				Иначе
					ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200031003");
				КонецЕсли;
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200033003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200034003");
				
				ТекущаяОбласть.Области.П000200032003.Значение = "";
				ТекущаяОбласть.Области.П000200033003.Значение = "";
				ТекущаяОбласть.Области.П000200034003.Значение = "";

			Иначе
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200030003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200031003");
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200033003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200034003");
				
				ТекущаяОбласть.Области.П000200030003.Значение = "";
				ТекущаяОбласть.Области.П000200031003.Значение = "";
				
				ТекущаяОбласть.Области.П000200032003.Значение = "";
				ТекущаяОбласть.Области.П000200033003.Значение = "";
				ТекущаяОбласть.Области.П000200034003.Значение = "";
				
			КонецЕсли;
		Иначе
			// Для строки 340 вариант заполнения авторасчет при условии:
			// сдача отчетности за 9 или 11 месяцев, и есть заполненное приложение 5 к листу 02 для головной организации.
			ВариантЗаполнения340 = ?((НомерМесяца = 9 ИЛИ НомерМесяца = 11) И Есть_Прил5 И НЕ ПоОбособленномуПодразделению, 4, 0);
			
			АвторасчетДляГруппыОбособленныхПодразделений = (ЗначениеЗаполнено(СтрПоМесту) И Найти("220,223,218", СтрПоМесту) = 0)
			И (ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250000100, П000250001000", ПризнакНалогоплательщика, "4")));
			
			Строка310БылаНедоступна = ТекущаяОбласть.Области.П000200031003.Защита;
			
			Если ПризнакНалогоплательщика = "4" ИЛИ (СдачаПоМесяцам И НомерМесяца = 11) Тогда
				ВариантЗаполнения310 = 5; // недоступно для ввода
			ИначеЕсли АвторасчетДляГруппыОбособленныхПодразделений Тогда
				ВариантЗаполнения310 = 4;
			Иначе
				ВариантЗаполнения310 = ВариантЗаполнения340;
			КонецЕсли;
			
			Если ВариантЗаполнения310 = 5 Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200031003");
				ТекущаяОбласть.Области.П000200031003.Значение = "";
			Иначе
				ИзменитьВариантЗаполненияЯчейки(Форма, ВариантЗаполнения310, "П000200031003");
				Если Строка310БылаНедоступна И ВариантЗаполнения310 = 0 Тогда
					ТекущаяОбласть.Области.П000200031003.Очистить();
				КонецЕсли;
			КонецЕсли;
			
			Если КодПериодаСдачиОтчетности = "33" Тогда
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200030003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200033003");
				
				Если ПризнакНалогоплательщика = "4" Тогда
					ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200034003");
					ТекущаяОбласть.Области.П000200034003.Значение = "";
				Иначе
					ИзменитьВариантЗаполненияЯчейки(Форма, ВариантЗаполнения340, "П000200034003");
				КонецЕсли;
				
			ИначеЕсли КодПериодаСдачиОтчетности = "45" Тогда
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200030003");
				
				ТекущаяОбласть.Области.П000200029003.Значение = "";
				ТекущаяОбласть.Области.П000200030003.Значение = "";
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200033003");
				
				Если ПризнакНалогоплательщика = "4" Тогда
					ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200034003");
					ТекущаяОбласть.Области.П000200034003.Значение = "";
				Иначе
					ИзменитьВариантЗаполненияЯчейки(Форма, ВариантЗаполнения340, "П000200034003");
				КонецЕсли;
				
			Иначе
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200029003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200030003");
				
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200032003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200033003");
				ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200034003");
				
				ТекущаяОбласть.Области.П000200032003.Значение = 0;
				ТекущаяОбласть.Области.П000200033003.Значение = 0;
				ТекущаяОбласть.Области.П000200034003.Значение = 0;
			
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_5" Тогда
		
		ПризнакНалогоплательщика = СокрЛП(ТекущаяОбласть.Области.П000250000100.Значение);
		РасчетСоставлен = СокрЛП(ТекущаяОбласть.Области.П000250001000.Значение);
		
		// Строки 030, 040, 060.
		Если ПоОбособленномуПодразделению Тогда
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П000250003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П000250004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 3, "П000250006003");
			
		ИначеЕсли ПоКонсолидированнойГруппе Тогда
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000250003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000250004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000250006003");
			
		Иначе
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000250003003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000250004003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000250006003");
			
		КонецЕсли;
		
		// Строка 031.
		Строка031БылаНедоступна = ТекущаяОбласть.Области.П000250003103.Защита;
		УсловиеЗакрытыеОП = Новый Структура("П000250000100, П000250001000", ПризнакНалогоплательщика, "3");
		ЕстьЗакрытыеОП = ЗначениеЗаполнено(ПризнакНалогоплательщика) И ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", УсловиеЗакрытыеОП);
		Если (ЗначениеЗаполнено(ПризнакНалогоплательщика) И РасчетСоставлен = "3")
			ИЛИ (ЕстьЗакрытыеОП) Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000250003103");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000250003103");
			Если Строка031БылаНедоступна Тогда
				ТекущаяОбласть.Области.П000250003103.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		// Строка 050.
		Если РасчетСоставлен = "3" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000250005003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000250005003");
		КонецЕсли;
		
		// Строки 060, 070, 080, 090, 100, 110.
		Если ПризнакНалогоплательщика = "4" Тогда
			
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000250006003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000250007003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000250008003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000250009003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000250010003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000250011003");
			
			ТекущаяОбласть.Области.П000250006003.Значение = "";
			ТекущаяОбласть.Области.П000250007003.Значение = "";
			ТекущаяОбласть.Области.П000250008003.Значение = "";
			ТекущаяОбласть.Области.П000250009003.Значение = "";
			ТекущаяОбласть.Области.П000250010003.Значение = "";
			ТекущаяОбласть.Области.П000250011003.Значение = "";
			
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000250006003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000250007003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000250008003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000250009003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000250010003");
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000250011003");
		КонецЕсли;
		
		// Строка 120.
		Если НЕ (НомерМесяца = 11 ИЛИ (СдачаПоКварталам И НомерМесяца = 9)) Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000250012003");
			ТекущаяОбласть.Области.П000250012003.Значение = "";
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000250012003");
		КонецЕсли;
		
		// Строка 121.
		Если НЕ (НомерМесяца = 11 ИЛИ (СдачаПоКварталам И НомерМесяца = 9)) Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000250012103");
			ТекущаяОбласть.Области.П000250012103.Значение = "";
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000250012103");
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_6" Тогда
		
		// Строка 120.
		Если НЕ (НомерМесяца = 11 ИЛИ (СдачаПоКварталам И НомерМесяца = 9)) Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000260012003");
			ТекущаяОбласть.Области.П000260012003.Значение = "";
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000260012003");
		КонецЕсли;
		
		// Строка 121.
		Если НЕ (НомерМесяца = 11 ИЛИ (СдачаПоКварталам И НомерМесяца = 9)) Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000260012103");
			ТекущаяОбласть.Области.П000260012103.Значение = "";
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000260012103");
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницы = "Лист02_6а" Тогда
		
		РасчетСоставлен = ТекущаяОбласть.Области.П000270000501.Значение;
		
		Если РасчетСоставлен = "3" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000270005003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000270005003");
		КонецЕсли;
		
		УстановитьПримечаниеКПолюОКАТОЛиста02_6а(Форма);
		
		// Строка 031.
		Строка031БылаНедоступна = ТекущаяОбласть.Области.П000270003103.Защита;
		УсловиеЗакрытыеОП = Новый Структура("П000270000501", "3");
		ЕстьЗакрытыеОП = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_6а", УсловиеЗакрытыеОП);
		
		Если ПоКонсолидированнойГруппе Тогда
			Если (РасчетСоставлен = "3") ИЛИ (ЕстьЗакрытыеОП) Тогда
				ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000270003103");
			Иначе
				ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000270003103");
				Если Строка031БылаНедоступна Тогда
					ТекущаяОбласть.Области.П000270003103.Очистить();
				КонецЕсли;
			КонецЕсли;
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000270003103");
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницы = "Лист03А" Тогда
		
		КатегорияНалАгента = ТекущаяОбласть.Области.П000310000100.Значение;
		Если КатегорияНалАгента = "1" Тогда
			ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000310009003");
		Иначе
			ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000310009003");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АвансовыеПлатежиРазличаются(Форма, ПризнакиПлательщика)
	
	Перем ТаблицаРаздела;
	
	МассивПризнаковПлательщика = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПризнакиПлательщика, ",");
	Для Инд = 0 По МассивПризнаковПлательщика.ВГраница() Цикл
		МассивПризнаковПлательщика[Инд] = СокрЛП(МассивПризнаковПлательщика[Инд]);
	КонецЦикла;
	
	ИмяРаздела = "Лист02";
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			Если ТаблицаРаздела[Инд].АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				ПризнакПлательщика = СокрЛП(Форма.ТабличныйДокумент.Области.П000200000100.Значение);
				ЗначениеСтроки290 = Форма.ТабличныйДокумент.Области.П000200029003.Значение;
				ЗначениеСтроки320 = Форма.ТабличныйДокумент.Области.П000200032003.Значение;
			Иначе
				СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
				ПризнакПлательщика = СтраницаДанные.П000200000100;
				ЗначениеСтроки290 = СтраницаДанные.П000200029003;
				ЗначениеСтроки320 = СтраницаДанные.П000200032003;
			КонецЕсли;
			
			ЛистПодходитПоПризнакуПлательщика = (МассивПризнаковПлательщика.Найти(ПризнакПлательщика) <> Неопределено);
			Если НЕ ЛистПодходитПоПризнакуПлательщика Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначенияРазличаются = (ЗначениеСтроки290 <> ЗначениеСтроки320);
			
			Возврат ЗначенияРазличаются;
			
		КонецЦикла;
	КонецЕсли;
	
	ИмяРаздела = "Лист02_5";
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
			
			Если СтраницаДанные <> Неопределено Тогда
				ПризнакПлательщика = СтраницаДанные.П000250000100;
				ЛистПодходитПоПризнакуПлательщика = (МассивПризнаковПлательщика.Найти(ПризнакПлательщика) <> Неопределено);
				Если НЕ ЛистПодходитПоПризнакуПлательщика Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначениеСтроки120 = СтраницаДанные.П000250012003;
				ЗначениеСтроки121 = СтраницаДанные.П000250012103;
				
				ЗначенияРазличаются = (ЗначениеСтроки120 <> ЗначениеСтроки121);
				
				Возврат ЗначенияРазличаются;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ИмяРаздела = "Лист02_6";
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
			
			Если СтраницаДанные <> Неопределено Тогда
				
				ЗначениеСтроки120 = СтраницаДанные.П000260012003;
				ЗначениеСтроки121 = СтраницаДанные.П000260012103;
				
				ЗначенияРазличаются = (ЗначениеСтроки120 <> ЗначениеСтроки121);
				
				Возврат ЗначенияРазличаются;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьАвансовыеПлатежи(Форма, ПризнакиПлательщика)
	
	Перем ТаблицаРаздела;
	
	МассивПризнаковПлательщика = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПризнакиПлательщика, ",");
	Для Инд = 0 По МассивПризнаковПлательщика.ВГраница() Цикл
		МассивПризнаковПлательщика[Инд] = СокрЛП(МассивПризнаковПлательщика[Инд]);
	КонецЦикла;
	
	ИмяРаздела = "Лист02";
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02" И ТаблицаРаздела[Инд].АктивнаяСтраница Тогда
				ПризнакПлательщика = СокрЛП(Форма.ТабличныйДокумент.Области.П000200000100.Значение);
				ЗначениеСтроки290 = Форма.ТабличныйДокумент.Области.П000200029003.Значение;
				ЗначениеСтроки320 = Форма.ТабличныйДокумент.Области.П000200032003.Значение;
			Иначе
				СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
				ПризнакПлательщика = СтраницаДанные.П000200000100;
				ЗначениеСтроки290 = СтраницаДанные.П000200029003;
				ЗначениеСтроки320 = СтраницаДанные.П000200032003;
			КонецЕсли;
				
			ЛистПодходитПоПризнакуПлательщика = (МассивПризнаковПлательщика.Найти(ПризнакПлательщика) <> Неопределено);
			Если НЕ ЛистПодходитПоПризнакуПлательщика Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьАвансовыеПлатежи = ЗначениеЗаполнено(ЗначениеСтроки320);
			
			Если ЕстьАвансовыеПлатежи Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьАвансовыеПлатежиОП(Форма, ПризнакиПлательщика)
	
	Перем ТаблицаРаздела;
	
	МассивПризнаковПлательщика = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПризнакиПлательщика, ",");
	Для Инд = 0 По МассивПризнаковПлательщика.ВГраница() Цикл
		МассивПризнаковПлательщика[Инд] = СокрЛП(МассивПризнаковПлательщика[Инд]);
	КонецЦикла;
	
	ИмяРаздела = "Лист02_5";
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
			
			Если СтраницаДанные <> Неопределено Тогда
				ПризнакПлательщика = СтраницаДанные.П000250000100;
				ЛистПодходитПоПризнакуПлательщика = (МассивПризнаковПлательщика.Найти(ПризнакПлательщика) <> Неопределено);
				Если НЕ ЛистПодходитПоПризнакуПлательщика Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначениеСтроки121 = СтраницаДанные.П000250012103;
				ЕстьАвансовыеПлатежи = ЗначениеЗаполнено(ЗначениеСтроки121);
				
				Если ЕстьАвансовыеПлатежи Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьАвансовыеПлатежиКГ(Форма, ПризнакиПлательщика)
	
	Перем ТаблицаРаздела;
	
	МассивПризнаковПлательщика = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПризнакиПлательщика, ",");
	Для Инд = 0 По МассивПризнаковПлательщика.ВГраница() Цикл
		МассивПризнаковПлательщика[Инд] = СокрЛП(МассивПризнаковПлательщика[Инд]);
	КонецЦикла;
	
	ИмяРаздела = "Лист02_6";
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество()-1 Цикл
			СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
			
			Если СтраницаДанные <> Неопределено Тогда
				
				ЗначениеСтроки121 = СтраницаДанные.П000260012103;
				ЕстьАвансовыеПлатежи = ЗначениеЗаполнено(ЗначениеСтроки121);
				
				Если ЕстьАвансовыеПлатежи Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ИзменитьВариантЗаполненияЯчейкиНаСервере(НовыйВариант, Показатель = Неопределено)
	
	ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, НовыйВариант, Показатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантЗаполненияЯчейкиНаКлиенте(НовыйВариант, Показатель = Неопределено)
	
	ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, НовыйВариант, Показатель);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
	     
	Если НовыйВариант = 4 И Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		НовыйВариант = 0;
	КонецЕсли;
	
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
    		
	#Если НаКлиенте Тогда
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРазделЗаполненныйПоУсловиям(Форма, ИмяСтраницы, Условия)
	
	Результат = Ложь;
	
	МногостраничностьЕсть = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "МногостраничностьВРазделе");
	
	Если НЕ МногостраничностьЕсть Тогда
		ДанныеТаблПоле = Форма["СтруктураДанных" + ИмяСтраницы];
		Результат = ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия);
	Иначе
		ТаблицаРаздела = Неопределено;
		Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
		Если ТаблицаРаздела <> Неопределено Тогда
			ТаблицаРаздела =  Форма[ТаблицаРаздела];
			Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
				//проверка экземпляра	
				
				СтраницаДанные = ТаблицаРаздела[Инд].Данные[0].Значение;
				Если СтраницаДанные <> Неопределено Тогда
					Результат=ВыполняютсяУсловияЗаполнения(ТаблицаРаздела[Инд].Данные[0].Значение, Условия);
				КонецЕсли;
				
				//если хоть один экземпляр благополучно прошел проверку - заканчиваем проверку экземпляров успехом
				Если Результат Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполняютсяУсловияЗаполнения(СтруктураДанных, Условия)
	
	Результат = Ложь;
	Для каждого Условие Из Условия Цикл
		//проверка условия
		Показатель = Условие.Ключ;
		ТребЗначение = Условие.Значение;
		ЗначениеПоказателя = СтруктураДанных[Показатель];
		
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
			ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		
		Если ТребЗначение = Неопределено Тогда
			Результат = (ЗначениеПоказателя <> "");
		Иначе
			Результат = (ЗначениеПоказателя = ТребЗначение);
		КонецЕсли;
		//если хоть одно условие не выполнилось - заканчиваем проверку листа провалом
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ИзмененаДатаПодписи = Ложь)
	
	Если НЕ ИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКВЭД, ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
								
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		ТабличныйДокумент.Области["ИНН1"].Значение = ИНН;
		ТабличныйДокумент.Области["КПП1"].Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;

		ТабличныйДокумент.Области["КодИМНС"].Значение = КодНО;
		
		СтруктураРеквизитовФормы.ОКТМОДляРазделов = СведенияОбОрганизации.ОКТМО;
		ИзменитьОКТМОРазделов(ЭтаФорма, СтруктураРеквизитовФормы.ОКТМОДляРазделов);

		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		Если НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОКВЭД.Значение) Тогда
			
			ТабличныйДокумент.Области.ОКВЭД.Значение=СокрЛП(СведенияОбОрганизации.ОКВЭД);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
	СформироватьСпискиВыбора();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП = Неопределено) Экспорт
	
	ТипПодписанта = "1";
	флПредставительЮрЛицо = Истина;
	НаименованиеОрганизацииПредставителя = "";
	ФИОПредставителя = "";
	ПредставительСсылка = Неопределено;
	ДокументПредставителя = "";
	
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	РегистрацииВНалоговомОргане.Представитель,
	               |	РегистрацииВНалоговомОргане.УполномоченноеЛицоПредставителя,
	               |	РегистрацииВНалоговомОргане.ДокументПредставителя
	               |ИЗ
	               |	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	               |ГДЕ
	               |	РегистрацииВНалоговомОргане.Владелец = &Организация
				   |	И РегистрацииВНалоговомОргане.Код = &КодНО
				   |	И РегистрацииВНалоговомОргане.ПометкаУдаления = &ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);			   
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодНО", КодНО);
	
	Если КПП <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И РегистрацииВНалоговомОргане.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представитель) Тогда
		ТипПодписанта = "2";
		ПредставительСсылка = Выборка.Представитель;
		ДокументПредставителя = Выборка.ДокументПредставителя;
		
		Если НЕ РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Выборка.Представитель) Тогда
			флПредставительЮрЛицо = Истина;
			НаименованиеОрганизацииПредставителя = СокрЛП(ПредставительСсылка);
			ФИОПредставителя = СокрЛП(Выборка.УполномоченноеЛицоПредставителя);
		Иначе
			флПредставительЮрЛицо = Ложь;
			ФИОПредставителя = СокрЛП(ПредставительСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ТипПодписанта, флПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ФИОПредставителя, ПредставительСсылка, ДокументПредставителя", 
							 ТипПодписанта, флПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ФИОПредставителя, ПредставительСсылка, ДокументПредставителя);
							 
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
			
			Если ТекущаяОбласть.Имя = "П000250001000"
			 ИЛИ ТекущаяОбласть.Имя = "П000270000501" Тогда
				СтруктураДанныхПоля.Вставить("ВГруппуОПВходитОрганизация", Форма.ВГруппуОПВходитОрганизация);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт

	Перем СтруктураГруппы;
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		НСтрСтр = Формат(НСтр, "ЧГ=0");
		
		Если ИмяГруппы = "П0002800010"
		 ИЛИ ИмяГруппы = "П0003300005"
		 ИЛИ ИмяГруппы = "П0003400005"
		 ИЛИ Лев(ИмяГруппы, 10) = "П000020004"
		 ИЛИ Лев(ИмяГруппы, 10) = "П000020005" Тогда
			
			Для Каждого ТекОбласть Из ТекТабличноеПоле.Области Цикл
				   
				Если НЕ Лев(ТекОбласть.Имя, 6) = "П00028"
				   И НЕ Лев(ТекОбласть.Имя, 6) = "П00033"
				   И НЕ Лев(ТекОбласть.Имя, 6) = "П00034"
				   И НЕ Лев(ТекОбласть.Имя, 10) = "П000020004"
				   И НЕ Лев(ТекОбласть.Имя, 10) = "П000020005" Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если (Лев(ТекОбласть.Имя, 10) = "П000020004" И НЕ Лев(ИмяГруппы, 10) = "П000020004")
				 ИЛИ (Лев(ТекОбласть.Имя, 10) = "П000020005" И НЕ Лев(ИмяГруппы, 10) = "П000020005") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если Число(Сред(ТекОбласть.Имя, 15)) = НСтр Тогда
					
					Если ТекОбласть.СодержитЗначение Тогда
						ЗначениеЯчейки = ТекОбласть.Значение;
					Иначе
						ЗначениеЯчейки = ТекОбласть.Текст;
					КонецЕсли;
					
				ИначеЕсли Лев(ТекОбласть.Имя, 13) = "П000020004001"
					  ИЛИ Лев(ТекОбласть.Имя, 13) = "П000020005101" Тогда
					
					ЗначениеЯчейки = ?(СокрЛП(ЗначениеЯчейки) = "0", "", ЗначениеЯчейки);
					
				КонецЕсли;
				
				ТекСтрокаТаблицы[Лев(ТекОбласть.Имя, 13)] = ЗначениеЯчейки;
				
			КонецЦикла;
			
		Иначе
			
			Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
					
					ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	 

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт

	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);

КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
    	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	ПеременныеМодуля.Вставить("мНазваниеПредставителя", СтруктураРеквизитовФормы.мНазваниеПредставителя);
	ПеременныеМодуля.Вставить("мДокументПредставителя", СтруктураРеквизитовФормы.мДокументПредставителя);
	ПеременныеМодуля.Вставить("мФамилияПредставителя",  СтруктураРеквизитовФормы.мФамилияПредставителя);
	ПеременныеМодуля.Вставить("мИмяПредставителя",      СтруктураРеквизитовФормы.мИмяПредставителя);
	ПеременныеМодуля.Вставить("мОтчествоПредставителя", СтруктураРеквизитовФормы.мОтчествоПредставителя);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	СтруктураРеквизитовФормы.мНазваниеПредставителя = ПеременныеМодуля.мНазваниеПредставителя;
	СтруктураРеквизитовФормы.мДокументПредставителя = ПеременныеМодуля.мДокументПредставителя;
	СтруктураРеквизитовФормы.мФамилияПредставителя  = ПеременныеМодуля.мФамилияПредставителя;
	СтруктураРеквизитовФормы.мИмяПредставителя      = ПеременныеМодуля.мИмяПредставителя;
	СтруктураРеквизитовФормы.мОтчествоПредставителя = ПеременныеМодуля.мОтчествоПредставителя;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "НазваниеПредставителя" Тогда
		ПеременныеМодуля.мНазваниеПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ДокументПредставителя" Тогда
		ПеременныеМодуля.мДокументПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ФамилияПредставителя" Тогда
		ПеременныеМодуля.мФамилияПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ИмяПредставителя" Тогда
		ПеременныеМодуля.мИмяПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	ИначеЕсли ИмяПоказателя = "ОтчествоПредставителя" Тогда
		ПеременныеМодуля.мОтчествоПредставителя = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
		Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
		ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
		Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
			Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
				СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			мСтруктураВариантыЗаполнения.Очистить();
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПоиска = ТаблицаВариантыЗаполненияЛист02_1[0].ТаблицаВариантовЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", "П000210010003"));
	
	Если РезультатПоиска.Количество() > 0 Тогда
		ТаблицаВариантыЗаполненияЛист02_1[0].ТаблицаВариантовЗаполнения.Удалить(РезультатПоиска[0]);
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					Ном = 0;
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Если ЭлементСтруктуры.Ключ = "Раздел1_3"
							 ИЛИ ЭлементСтруктуры.Ключ = "Лист03А"
							 ИЛИ ЭлементСтруктуры.Ключ = "Лист03Б" Тогда
							 
								// Случай восстановления данных многострочной части
								// многостраничного раздела после перехода 2.0 -> 3.0.
								Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
									ТаблЗнач = ЭлСтруктуры.Значение;
									СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
									ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
									НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
								КонецЦикла;
								
							Иначе
								
								СтруктураДопСтрок = Новый Структура;
								Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
									ТаблЗнач = ЭлСтруктуры.Значение;
									СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
									ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
									СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
								КонецЦикла;
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
								
							КонецЕсли;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						Ном = Ном + 1;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
			
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ОКТМОДляРазделов", СтруктураРеквизитовФормы.ОКТМОДляРазделов) Тогда
		СтруктураРеквизитовФормы.ОКТМОДляРазделов = "";
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ).Имя = "ДатаПодписи" Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ДатаПодписи;
			Иначе
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мПоМесту = ТабличныйДокумент.Области.ПоМесту.Значение;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		УстановитьЗначениеВСтроке110Листа02();
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			Если Прав(СтруктураДанныхТитульный.ИНН1, 2) = "--" Тогда
				СтруктураДанныхТитульный.ИНН1 = Лев(СтруктураДанныхТитульный.ИНН1, Найти(СтруктураДанныхТитульный.ИНН1, "--") - 1);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки", "");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СтруктураДанныхТитульный.НомерКорректировки + СокрЛП(ПоказателиТаблПоле["НомерКорректировки" + Ном]);
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
			СтруктураДанныхТитульный.НомерКорректировки = СтрЗаменить(СтруктураДанныхТитульный.НомерКорректировки, "-", "");
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период" + Ном];
				СтруктураДанныхТитульный.Удалить("Период" + Ном);
			КонецЦикла;					
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;						
		ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			СтруктураДанныхТитульный.Вставить("ПоМесту");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту) + ПоказателиТаблПоле["ПоМесту" + Ном];
				СтруктураДанныхТитульный.Удалить("ПоМесту" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ТелОрганизации_1" Тогда
			СтруктураДанныхТитульный.Вставить("ТелОрганизации");
			Для Ном = 1 По 20 Цикл
				СтруктураДанныхТитульный.ТелОрганизации = СокрЛП(СтруктураДанныхТитульный.ТелОрганизации) + ПоказателиТаблПоле["ТелОрганизации_" + Ном];
				СтруктураДанныхТитульный.Удалить("ТелОрганизации_" + Ном);
			КонецЦикла;			
		ИначеЕсли ИмяПоказателя = "ИНН_Реорг_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН_Реорг");
			Для Ном = 1 По 10 Цикл
				СтруктураДанныхТитульный.ИНН_Реорг = СокрЛП(СтруктураДанныхТитульный.ИНН_Реорг) + ПоказателиТаблПоле["ИНН_Реорг_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН_Реорг_" + Ном);
			КонецЦикла;			
		ИначеЕсли ИмяПоказателя = "КПП_Реорг_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП_Реорг");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП_Реорг = СокрЛП(СтруктураДанныхТитульный.КПП_Реорг) + ПоказателиТаблПоле["КПП_Реорг_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП_Реорг_" + Ном);
			КонецЦикла;			
		ИначеЕсли ИмяПоказателя = "ОКВЭД_1" Тогда
			СтруктураДанныхТитульный.Вставить("ОКВЭД");
			Для Ном = 1 По 8 Цикл
				СтруктураДанныхТитульный.ОКВЭД = СокрЛП(СтруктураДанныхТитульный.ОКВЭД) + ПоказателиТаблПоле["ОКВЭД_" + Ном];
				СтруктураДанныхТитульный.Удалить("ОКВЭД_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;				
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция УстановитьЗначениеВСтроке110Листа02()
	
	НомерМесяцаОригинала = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	НомерМесяцаКопии     = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Если НЕ (НомерМесяцаОригинала = 3 ИЛИ НомерМесяцаОригинала = 12)
		И (НомерМесяцаКопии = 3 ИЛИ НомерМесяцаКопии = 12) Тогда
		РасчетНаСервере("Лист02");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		Если ТабличныйДокумент.Области.НомерКорректировки.Значение = "" Тогда
			ТабличныйДокумент.Области.НомерКорректировки.Значение = "000";
		КонецЕсли;
		Вариант = Число(ТабличныйДокумент.Области.НомерКорректировки.Значение);
	Иначе
		Вариант = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП1", ТабличныйДокумент.Области.КПП1.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП     = СтруктураДанныхТитульный.КПП1;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		ПодобныйОтчетСуществует = Истина;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт	
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	//Если перед сохранением изменяли значение показателя - нужен полный расчет
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		РасчетНаСервере();
	КонецЕсли; 
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки           = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив;
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					Ном = Ном + 1;
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					Если ЭлементСтруктуры.Ключ <> "Приложение2"
						И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
						И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
						
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
						
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
						Если ТипЗнч(ЭлСтруктуры) = Тип("ЭлементСпискаЗначений") Тогда
							Для Каждого ЭлементСтр Из ЭлСтруктуры.Значение Цикл
								СтруктураДанныхДопСтрок.Вставить(ЭлементСтр.Ключ, ДанныеФормыВЗначение(ЭлементСтр.Значение, Тип("ТаблицаЗначений")));
							КонецЦикла;
						Иначе
							СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры, Тип("ТаблицаЗначений")));
						КонецЕсли;
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
		КонецЦикла;
		
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		
		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("ОКТМОДляРазделов", СтруктураРеквизитовФормы.ОКТМОДляРазделов);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]].Количество() = 0 
			ИЛИ ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			Если ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]].Количество() = 0 Тогда
				
				НовСтр = ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]].Добавить();
				
				НовСтр.АктивнаяСтраница = Истина;
				
			КонецЕсли;
			
			ТабличныйДокумент.Очистить();
			Если Раздел.ИмяСтраницы = "Лист05" И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2015-01-01' Тогда
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Лист05_2014"));
			Иначе
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			КонецЕсли;
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	
	ИдГрупп.Вставить("ИдМСЧ_Раздел1_3",     СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3);
	ИдГрупп.Вставить("ИдМСЧ_Лист02_6б",     СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б);
	ИдГрупп.Вставить("ИдМСЧ_Лист03А",       СтруктураРеквизитовФормы.ИдМСЧ_Лист03А);
	ИдГрупп.Вставить("ИдМСЧ_Лист03Б",       СтруктураРеквизитовФормы.ИдМСЧ_Лист03Б);
	ИдГрупп.Вставить("ИдМСЧ_Лист07",        СтруктураРеквизитовФормы.ИдМСЧ_Лист07);
	ИдГрупп.Вставить("ИдМСЧ_Приложение1",   СтруктураРеквизитовФормы.ИдМСЧ_Приложение1);
	ИдГрупп.Вставить("ИдМСЧ_Приложение2_1", СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1);
	ИдГрупп.Вставить("ИдМСЧ_Приложение2_2", СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		Если ИмяГруппы = "П0002800010"
			ИЛИ ИмяГруппы = "П0003300005"
			ИЛИ ИмяГруппы = "П0003400005"
			ИЛИ Лев(ИмяГруппы, 10) = "П000020004"
			ИЛИ Лев(ИмяГруппы, 10) = "П000020005" Тогда
			
			Для Каждого ТекОбласть Из ТекТабличноеПоле.Области Цикл
				
				Если НЕ Лев(ТекОбласть.Имя, 6) = "П00028"
					И НЕ Лев(ТекОбласть.Имя, 6) = "П00033"
					И НЕ Лев(ТекОбласть.Имя, 6) = "П00034"
					И НЕ Лев(ТекОбласть.Имя, 10) = "П000020004"
					И НЕ Лев(ТекОбласть.Имя, 10) = "П000020005" Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если (Лев(ТекОбласть.Имя, 10) = "П000020004" И НЕ Лев(ИмяГруппы, 10) = "П000020004")
					ИЛИ (Лев(ТекОбласть.Имя, 10) = "П000020005" И НЕ Лев(ИмяГруппы, 10) = "П000020005") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если Число(Сред(ТекОбласть.Имя, 15)) = НомерСтрокиВФормеТаблицы Тогда
					
					Если ТекОбласть.СодержитЗначение Тогда
						ТекОбласть.Значение = СтрокаТаблицы[Лев(ТекОбласть.Имя, 13)];
					Иначе
						ТекОбласть.Текст = СтрокаТаблицы[Лев(ТекОбласть.Имя, 13)];
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе 
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
						ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					Иначе
						// устанавливаем порядковый номер строки
						ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	Если Лев(ИмяГруппы, 10) = "П000020004" Тогда
		
		НаимОбласти = "МногострочнаяЧасть1";
		
		ТекТабличноеПолеОбластиМногострочнаяЧасть = ТекТабличноеПоле.Области.МногострочнаяЧасть1;
		
	ИначеЕсли Лев(ИмяГруппы, 10) = "П000020005" Тогда
		
		НаимОбласти = "МногострочнаяЧасть2";
		
		ТекТабличноеПолеОбластиМногострочнаяЧасть = ТекТабличноеПоле.Области.МногострочнаяЧасть2;
		
	Иначе
		
		НаимОбласти = "МногострочнаяЧасть";
		
		ТекТабличноеПолеОбластиМногострочнаяЧасть = ТекТабличноеПоле.Области.МногострочнаяЧасть;
		
	КонецЕсли;
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть(НаимОбласти);
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если Найти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
		
	МногострочнаяЧастьВерх = ТекТабличноеПолеОбластиМногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПолеОбластиМногострочнаяЧасть.Низ;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
							
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, Найти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
	
	Если Лев(ИмяГруппы, 10) = "П000020004" Тогда
		
		ТекТабличноеПолеОбластиМногострочнаяЧасть = ТекТабличноеПоле.Области.МногострочнаяЧасть1;
		
	ИначеЕсли Лев(ИмяГруппы, 10) = "П000020005" Тогда
		
		ТекТабличноеПолеОбластиМногострочнаяЧасть = ТекТабличноеПоле.Области.МногострочнаяЧасть2;
		
	Иначе
		
		ТекТабличноеПолеОбластиМногострочнаяЧасть = ТекТабличноеПоле.Области.МногострочнаяЧасть;
		
	КонецЕсли;
	
	ТекТабличноеПоле.Область(ТекТабличноеПолеОбластиМногострочнаяЧасть.Верх, , ТекТабличноеПолеОбластиМногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = НаимОбласти;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	
	ИдГрупп.Вставить("ИдМСЧ_Раздел1_3",     СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3);
	ИдГрупп.Вставить("ИдМСЧ_Лист02_6б",     СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б);
	ИдГрупп.Вставить("ИдМСЧ_Лист03А",       СтруктураРеквизитовФормы.ИдМСЧ_Лист03А);
	ИдГрупп.Вставить("ИдМСЧ_Лист03Б",       СтруктураРеквизитовФормы.ИдМСЧ_Лист03Б);
	ИдГрупп.Вставить("ИдМСЧ_Лист07",        СтруктураРеквизитовФормы.ИдМСЧ_Лист07);
	ИдГрупп.Вставить("ИдМСЧ_Приложение1",   СтруктураРеквизитовФормы.ИдМСЧ_Приложение1);
	ИдГрупп.Вставить("ИдМСЧ_Приложение2_1", СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1);
	ИдГрупп.Вставить("ИдМСЧ_Приложение2_2", СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.ИдМСЧ_Раздел1_3 Тогда
		
		ТекТабличноеПоле = "Раздел1_3";
		
	ИначеЕсли ИдГруппы = ИдГрупп.ИдМСЧ_Лист02_6б Тогда
		
		ТекТабличноеПоле = "Лист02_6б";
		
	ИначеЕсли ИдГруппы = ИдГрупп.ИдМСЧ_Лист03А Тогда
		
		ТекТабличноеПоле = "Лист03А";
		
	ИначеЕсли ИдГруппы = ИдГрупп.ИдМСЧ_Лист03Б Тогда
		
		ТекТабличноеПоле = "Лист03Б";
		
	ИначеЕсли ИдГруппы = ИдГрупп.ИдМСЧ_Лист07 Тогда
		
		ТекТабличноеПоле = "Лист07";
		
	ИначеЕсли ИдГруппы = ИдГрупп.ИдМСЧ_Приложение1 Тогда
		
		ТекТабличноеПоле = "Приложение1";
		
	ИначеЕсли ИдГруппы = ИдГрупп.ИдМСЧ_Приложение2_1
		  ИЛИ ИдГруппы = ИдГрупп.ИдМСЧ_Приложение2_2 Тогда
		
		ТекТабличноеПоле = "Приложение2";
		
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("ИдМСЧ_Раздел1_3",     СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3);
	ИдГрупп.Вставить("ИдМСЧ_Лист02_6б",     СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б);
	ИдГрупп.Вставить("ИдМСЧ_Лист03А",       СтруктураРеквизитовФормы.ИдМСЧ_Лист03А);
	ИдГрупп.Вставить("ИдМСЧ_Лист03Б",       СтруктураРеквизитовФормы.ИдМСЧ_Лист03Б);
	ИдГрупп.Вставить("ИдМСЧ_Лист07",        СтруктураРеквизитовФормы.ИдМСЧ_Лист07);
	ИдГрупп.Вставить("ИдМСЧ_Приложение1",   СтруктураРеквизитовФормы.ИдМСЧ_Приложение1);
	ИдГрупп.Вставить("ИдМСЧ_Приложение2_1", СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1);
	ИдГрупп.Вставить("ИдМСЧ_Приложение2_2", СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("ИдМСЧ_Раздел1_3",     СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3);
	ИдГрупп.Вставить("ИдМСЧ_Лист02_6б",     СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б);
	ИдГрупп.Вставить("ИдМСЧ_Лист03А",       СтруктураРеквизитовФормы.ИдМСЧ_Лист03А);
	ИдГрупп.Вставить("ИдМСЧ_Лист03Б",       СтруктураРеквизитовФормы.ИдМСЧ_Лист03Б);
	ИдГрупп.Вставить("ИдМСЧ_Лист07",        СтруктураРеквизитовФормы.ИдМСЧ_Лист07);
	ИдГрупп.Вставить("ИдМСЧ_Приложение1",   СтруктураРеквизитовФормы.ИдМСЧ_Приложение1);
	ИдГрупп.Вставить("ИдМСЧ_Приложение2_1", СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1);
	ИдГрупп.Вставить("ИдМСЧ_Приложение2_2", СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1_3" Тогда
		ИмяГруппы = ИдГрупп.ИдМСЧ_Раздел1_3;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_6б" Тогда
		ИмяГруппы = ИдГрупп.ИдМСЧ_Лист02_6б;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03А" Тогда
		ИмяГруппы = ИдГрупп.ИдМСЧ_Лист03А;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03Б" Тогда
		ИмяГруппы = ИдГрупп.ИдМСЧ_Лист03Б;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист07" Тогда
		ИмяГруппы = ИдГрупп.ИдМСЧ_Лист07;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение1" Тогда
		ИмяГруппы = ИдГрупп.ИдМСЧ_Приложение1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение2_1" Тогда
		ИмяГруппы = ИдГрупп.ИдМСЧ_Приложение2_1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение2_2" Тогда
		ИмяГруппы = ИдГрупп.ИдМСЧ_Приложение2_2;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаВПоляхВводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя            = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность     = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме     = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя      = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя            = ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	Если НЕ ЗначениеЗаполнено(ПолеТабличногоДокументаТитульный.Области.Период.Значение) Тогда
		
		ЗаполнитьПериодОтчета();
		
	КонецЕсли; 
	  	
	// выводим год на титульный лист
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ПолеТабличногоДокументаТитульный.Области.ОтчетГод.Значение = ОтчетныйГод;
		
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодОтчета()
	
	СоответствиеНомераМесяцаКодуОтчетногоПериода = Новый Соответствие;
	
	ПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	
	ЭтоКонсолидированнаяГруппа = (ПоМесту = "218");
	
	Если ЭтоКонсолидированнаяГруппа Тогда
		Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3, "13");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6, "14");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9, "15");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12,"16");
		Иначе
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(1,  "57");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(2,  "58");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3,  "59");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(4,  "60");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(5,  "61");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6,  "62");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(7,  "63");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(8,  "64");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9,  "64");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(10, "66");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(11, "67");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12, "68");
		КонецЕсли;
	Иначе
		Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3, "21");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6, "31");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9, "33");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12,"34");
		Иначе
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(1, "35");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(2, "36");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(3, "37");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(4, "38");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(5, "39");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(6, "40");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(7, "41");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(8, "42");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(9, "43");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(10, "44");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(11, "45");
			СоответствиеНомераМесяцаКодуОтчетногоПериода.Вставить(12, "46");
		КонецЕсли;
	КонецЕсли;
	
	КодОтчетногоПериода = СоответствиеНомераМесяцаКодуОтчетногоПериода[Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)];
	ТабличныйДокумент.Области.Период.Значение = КодОтчетногоПериода;
		
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ТабличныйДокумент.Области.ОтчетГод.Значение = ОтчетныйГод;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	Если ВыбТабличноеПолеИмя = "Приложение2" Тогда
		
		ВыбТабличноеПоле = Форма.ТабличныйДокумент;
		
		МассивМногострочныхБлоков = Новый Массив;
		
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1);
		МассивМногострочныхБлоков.Добавить(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2);
		
		Форма.УдалитьОбластьИзТабличногоДокументаНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, МассивМногострочныхБлоков);
		
		Форма.ТабличныйДокумент = ВыбТабличноеПоле;
		
		Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
			
			ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
			
			Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяОбласть.Очистить();
			
		КонецЦикла;
		
		Для Инд = 0 По (МассивМногострочныхБлоков.Количество() - 1) Цикл
			
			ИмяГруппыДопСтрок = МассивМногострочныхБлоков.Получить(Инд);
			
			Если ИмяГруппыДопСтрок <> Неопределено Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппыДопСтрок);
				
				ИмяСтраницыПанели = ВыбТабличноеПолеИмя;
				
				Расчет(Форма, ИмяСтраницыПанели);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОбластьИзТабличногоДокументаНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, МассивМногострочныхБлоков) Экспорт
		
	Для Инд = 0 По (МассивМногострочныхБлоков.Количество() - 1) Цикл
		
		ИмяГруппыДопСтрок = МассивМногострочныхБлоков.Получить(Инд);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
		
		ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
		
		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
		
		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
		
		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			
			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
				
				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
				
				НомерГрафы = 1;
				
				ИмяПервойКолонки = ИмяГруппыДопСтрок + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;
				
				ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
				
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
				
				РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ВыбТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
				
				ЭтаФорма.ТабличныйДокумент = ВыбТабличноеПоле;
				
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
				
				НСтр = НСтр - 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	    	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);

КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)

	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьСтавкиНалога(Форма, ИмяТекущегоРаздела)

	Перем СтавкаФедеральная;
	Перем СтавкаСубъекта;

	Сведения = Новый СписокЗначений;

	Сведения.Добавить("", "СтавкаПрибФед");  // Ставка прибыль федеральный бюджет
	Сведения.Добавить("", "СтавкаПрибРесп");  // Ставка прибыль респ. бюджет

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Форма.СтруктураРеквизитовФормы.Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, Сведения);
	
	СтавкаФедеральная = 0;
	СтавкаСубъекта	  = 0;

	ОргСведения.Свойство("СтавкаПрибФед",  СтавкаФедеральная);
	ОргСведения.Свойство("СтавкаПрибРесп", СтавкаСубъекта);

	АктивныеСтраницы = Форма.ТаблицаСтраницыЛист02.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если АктивныеСтраницы.Количество() > 0 Тогда
		
		АктивнаяСтраница = АктивныеСтраницы[0];
		
	ИначеЕсли Форма.ТаблицаСтраницыЛист02.Количество() > 0 Тогда
		
		АктивнаяСтраница = Форма.ТаблицаСтраницыЛист02[0];
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтраницы = АктивнаяСтраница.Данные[0].Значение;
	
	ДанныеСтраницы.П000200015003 = СтавкаФедеральная;
	ДанныеСтраницы.П000200016003 = СтавкаСубъекта;
	Если ИмяТекущегоРаздела = "Лист02" Тогда
		Форма.ТабличныйДокумент.Области.П000200015003.Значение = СтавкаФедеральная;
		Форма.ТабличныйДокумент.Области.П000200016003.Значение = СтавкаСубъекта;
	КонецЕсли; 
	
	Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		ДанныеСтраницы.П000200014003 = СтавкаФедеральная + СтавкаСубъекта + ДанныеСтраницы.П000200017003;
		Если ИмяТекущегоРаздела = "Лист02" Тогда
			Форма.ТабличныйДокумент.Области.П000200014003.Значение
				= СтавкаФедеральная + СтавкаСубъекта + Форма.ТабличныйДокумент.Области.П000200017003.Значение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьСтавкиНалога_НП4(Форма, ИмяТекущегоРаздела)
	
	СтавкаФедеральная   = 20;
	СтавкаСубъекта      = 0;
	СтавкаСубъектаНК284 = 0;
	
	АктивныеСтраницы = Форма.ТаблицаСтраницыЛист02.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если АктивныеСтраницы.Количество() > 0 Тогда
		
		АктивнаяСтраница = АктивныеСтраницы[0];
		
	ИначеЕсли Форма.ТаблицаСтраницыЛист02.Количество() > 0 Тогда
		
		АктивнаяСтраница = Форма.ТаблицаСтраницыЛист02[0];
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтраницы = АктивнаяСтраница.Данные[0].Значение;
	
	ДанныеСтраницы.П000200015003 = СтавкаФедеральная;
	ДанныеСтраницы.П000200016003 = СтавкаСубъекта;
	ДанныеСтраницы.П000200017003 = СтавкаСубъектаНК284;
	
	Если ИмяТекущегоРаздела = "Лист02" Тогда
		Форма.ТабличныйДокумент.Области.П000200015003.Значение = СтавкаФедеральная;
		Форма.ТабличныйДокумент.Области.П000200016003.Значение = СтавкаСубъекта;
		Форма.ТабличныйДокумент.Области.П000200017003.Значение = СтавкаСубъектаНК284;
	КонецЕсли;
	
	Если НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		ДанныеСтраницы.П000200014003 = СтавкаФедеральная + СтавкаСубъекта + СтавкаСубъектаНК284;
		Если ИмяТекущегоРаздела = "Лист02" Тогда
			Форма.ТабличныйДокумент.Области.П000200014003.Значение
				= СтавкаФедеральная + СтавкаСубъекта + СтавкаСубъектаНК284;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные(Команда)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_1" Тогда
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
		СформироватьРаздел1_1НаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		Модифицированность = Истина;
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" Тогда
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
		СформироватьРаздел1_2НаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_1"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" Тогда
		
		Если ЭтаФорма["ТаблицаСтраницы" + СтруктураРеквизитовФормы.НаимТекущегоРаздела].Количество() > 0 Тогда
			
			Для Каждого Область Из ТабличныйДокумент.Области Цикл
				
				Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
					
					Если ЭтаФорма["ТаблицаСтраницы" + СтруктураРеквизитовФормы.НаимТекущегоРаздела].Количество() = 1 Тогда
						
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
						
					Иначе
						
						Если СтрЧислоВхождений(Область.Имя, "Значок") > 0 Тогда
							
							Область.Текст = "х";
							
						Иначе
							
							Область.Текст = "Удалить страницу";
							
						КонецЕсли;
						
						Область.Гиперссылка = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1_1НаСервере()
	
	СведенияЛистов = Новый Массив;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	Иначе
		ПоМесту = СтруктураДанныхТитульный.ПоМесту;
	КонецЕсли;
	ЭтоКонсолидированнаяГруппа = (ПоМесту = "218");
	КодПоМестуВерный = НЕ (ПоМесту = "229" ИЛИ ПоМесту = "231");
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ЗаполнятьРаздел1_1 = (ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П000200000100", "1"))
					  ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П000200000100", "3"))
					  ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П000200000100", "4")))
						И КодПоМестуВерный;
	
	МассивПризнаковПлательщика = Новый Массив;
	Если ЗаполнятьРаздел1_1 Тогда
		МассивПризнаковПлательщика.Добавить("1");
	КонецЕсли;
	
	Для Каждого ПризнакПлательщика Из МассивПризнаковПлательщика Цикл
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			Если МассивПризнаковПлательщика.Количество() > 1 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Внимание! Обнаружено более 1 заполненного Листа 02, сбор данных невозможен.'");
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
			ТаблицаСтраниц = ЭтаФорма[мСтруктураМногостраничныхРазделов["Лист02_6"]];
			Для Каждого Страница Из ТаблицаСтраниц Цикл
				Если Страница.АктивнаяСтраница И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02_6" Тогда
					ОКТМО = СокрЛП(ТабличныйДокумент.Области.П000260000301.Значение);
				Иначе
					ОКТМО = СокрЛП(Страница.Данные[0].Значение.П000260000301);
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ОКТМО) Тогда
					ТакоеОКТМОУжеВСведенияхЛистов = Ложь;
					Для каждого ЭлементМассива Из СведенияЛистов Цикл
						Если ЭлементМассива["П000110001003"] = ОКТМО Тогда
							ТакоеОКТМОУжеВСведенияхЛистов = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ ТакоеОКТМОУжеВСведенияхЛистов Тогда
						СведенияЛистов.Добавить(Новый Структура("П000110001003", ОКТМО));
					КонецЕсли;
					//СведенияЛистов.Добавить(Новый Структура("П000110001003", ОКТМО));
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьИСформироватьРаздел("Раздел1_1", СведенияЛистов);
	ИзменитьОКТМОРазделов(ЭтаФорма, СтруктураРеквизитовФормы.ОКТМОДляРазделов, "Раздел1_1");
	ЗаполнитьКБКРаздел1(Ложь);
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКБКРаздел1(НовыйОтчет)
	
	Перем ТаблицаСтраницРаздела;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел1_1", ТаблицаСтраницРаздела);
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого ЛистРаздела Из ТаблицаСтраницРаздела Цикл
		
		КБК_ФБ  = "18210101011011000110";
		КБК_СРФ = "18210101012021000110";
		
		Если ЛистРаздела.АктивнаяСтраница И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_1" Тогда
			ТабличныйДокумент.Области.П000110003003.Значение = КБК_ФБ;
			ТабличныйДокумент.Области.П000110006003.Значение = КБК_СРФ;
		Иначе
			ЛистРаздела.Данные[0].Значение.П000110003003 = КБК_ФБ;
			ЛистРаздела.Данные[0].Значение.П000110006003 = КБК_СРФ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1_2НаСервере()
	
	СведенияЛистов = Новый Массив;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	Иначе
		ПоМесту = СтруктураДанныхТитульный.ПоМесту;
	КонецЕсли;
	
	ЭтоКонсолидированнаяГруппа = (ПоМесту = "218");
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ЭтоОбособленноеПодразделение Тогда
		ЗаполнятьРаздел1_2 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П000250000100", "1"))
						 ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П000250000100", "3"));
	ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
		ЗаполнятьРаздел1_2 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П000200000100", "1"))
						 ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П000200000100", "3"))
						 ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П000200000100", "4"));
		ЗаполнятьПоПризнакуПлательщика2 = НЕ ЗаполнятьРаздел1_2 И ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02", Новый Структура("П000200000100", "2"));
	Иначе
		ЗаполнятьРаздел1_2 = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02",   Новый Структура("П000200000100", "1"))
						 ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02",   Новый Структура("П000200000100", "3"))
						 ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02",   Новый Структура("П000200000100", "4"))
						 ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П000250000100", "1"))
						 ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П000250000100", "3"))
						 ИЛИ ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура("П000250000100", "4"));
	КонецЕсли;
	
	ПризнакиИКварталы = Новый ТаблицаЗначений;
	ПризнакиИКварталы.Колонки.Добавить("ПризнакПлательщика");
	ПризнакиИКварталы.Колонки.Добавить("КодКвартала");
	
	Если ЗаполнятьРаздел1_2 Тогда
		Если НомерМесяца = 3 ИЛИ НомерМесяца = 6 Тогда
			НовоеСочетание = ПризнакиИКварталы.Добавить();
			НовоеСочетание.ПризнакПлательщика = "1";
			НовоеСочетание.КодКвартала = "";
		ИначеЕсли НомерМесяца = 9 И СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал  Тогда
			Если АвансовыеПлатежиРазличаются(ЭтаФорма, "1,3,4") Тогда
				НовоеСочетание = ПризнакиИКварталы.Добавить();
				НовоеСочетание.ПризнакПлательщика = "1";
				НовоеСочетание.КодКвартала = "21";
				
				НовоеСочетание = ПризнакиИКварталы.Добавить();
				НовоеСочетание.ПризнакПлательщика = "1";
				НовоеСочетание.КодКвартала = "24";
			Иначе
				НовоеСочетание = ПризнакиИКварталы.Добавить();
				НовоеСочетание.ПризнакПлательщика = "1";
				НовоеСочетание.КодКвартала = "";
			КонецЕсли;
		ИначеЕсли НомерМесяца = 11 И СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц Тогда
			Если ЭтоОбособленноеПодразделение Тогда
				Если ЕстьАвансовыеПлатежиОП(ЭтаФорма, "1,3,4") Тогда
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "1";
					НовоеСочетание.КодКвартала = "21";
				Иначе
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "1";
					НовоеСочетание.КодКвартала = "";
				КонецЕсли;
			ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
				Если ЕстьАвансовыеПлатежиКГ(ЭтаФорма, "1,3,4") Тогда
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "1";
					НовоеСочетание.КодКвартала = "21";
				Иначе
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "1";
					НовоеСочетание.КодКвартала = "";
				КонецЕсли;
			Иначе
				Если ЕстьАвансовыеПлатежи(ЭтаФорма, "1,3,4") Тогда
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "1";
					НовоеСочетание.КодКвартала = "21";
				Иначе
					НовоеСочетание = ПризнакиИКварталы.Добавить();
					НовоеСочетание.ПризнакПлательщика = "1";
					НовоеСочетание.КодКвартала = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МассивОКАТО = Новый Массив;
	Если ЭтоКонсолидированнаяГруппа Тогда
		Если ЗаполнятьРаздел1_2 И ЗаполнятьПоПризнакуПлательщика2 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Внимание! Обнаружено более 1 заполненного Листа 02, сбор данных невозможен.'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ТаблицаСтраниц = ЭтаФорма[мСтруктураМногостраничныхРазделов["Лист02_6"]];
		Для Каждого Страница Из ТаблицаСтраниц Цикл
			Если Страница.АктивнаяСтраница И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02_6" Тогда
				ОКАТО = СокрЛП(ТабличныйДокумент.Области.П000260000301.Значение);
			Иначе
				ОКАТО = СокрЛП(Страница.Данные[0].Значение.П000260000301);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ОКАТО) Тогда
				МассивОКАТО.Добавить(ОКАТО)
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивОКАТО.Добавить("")
	КонецЕсли;
	
	Для Каждого Сочетание Из ПризнакиИКварталы Цикл
		Для Каждого ОКАТО Из МассивОКАТО Цикл
			НаборПоказателей = Новый Структура;
			НаборПоказателей.Вставить("П000120000103", Сочетание.КодКвартала);
			НаборПоказателей.Вставить("П000120001003", ОКАТО);
			
			СведенияЛистов.Добавить(НаборПоказателей);
		КонецЦикла;
	КонецЦикла;
	
	ОчиститьИСформироватьРаздел("Раздел1_2", СведенияЛистов);
	ИзменитьОКТМОРазделов(ЭтаФорма, СтруктураРеквизитовФормы.ОКТМОДляРазделов, "Раздел1_2");
	ЗаполнитьКБКРаздел2(Ложь);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКБКРаздел2(НовыйОтчет)
	
	Перем ТаблицаСтраницРаздела;
	мСтруктураМногостраничныхРазделов.Свойство("Раздел1_2", ТаблицаСтраницРаздела);
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого ЛистРаздела Из ТаблицаСтраницРаздела Цикл
		
		КБК_ФБ  = "18210101011011000110";
		КБК_СРФ = "18210101012021000110";
		
		Если ЛистРаздела.АктивнаяСтраница И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" Тогда
			ТабличныйДокумент.Области.П000120011003.Значение = КБК_ФБ;
			ТабличныйДокумент.Области.П000120021003.Значение = КБК_СРФ;
		Иначе
			ЛистРаздела.Данные[0].Значение.П000120011003 = КБК_ФБ;
			ЛистРаздела.Данные[0].Значение.П000120021003 = КБК_СРФ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьИСформироватьРаздел(ИмяРаздела, СведенияЛистов)
	
	Перем ТаблицаСтраницРаздела;
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ТабДок = ТабличныйДокумент;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	// Очистка раздела.
	ОчиститьТабличноеПолеНаСервере(ИмяРаздела);
	
	ТаблицаТекущейСтраницы   = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Если ТаблицаТекущейСтраницы.Количество() > 1 Тогда
		ИндексСтраницы = 0;
		Пока Не (ИндексСтраницы > (ТаблицаТекущейСтраницы.Количество()-1)) Цикл
			СтрокаТаблицы = ТаблицаТекущейСтраницы[ИндексСтраницы];
			Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
				ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			ИндексСтраницы = ИндексСтраницы + 1;
		КонецЦикла;
	КонецЕсли;
	
	ЭтоПервыйЛист = Истина;
	Для Каждого НаборПоказателей Из СведенияЛистов Цикл
		Если НЕ ЭтоПервыйЛист Тогда
			ВставитьДополнительнуюСтраницуНаСервере(ИмяРаздела);
		КонецЕсли;
		
		Для Каждого Показатель Из НаборПоказателей Цикл
			ИмяОбластиПоказателя = Показатель.Ключ;
			ЗначениеПоказателя = Показатель.Значение;
			
			ТабДок.Области[ИмяОбластиПоказателя].Значение = ЗначениеПоказателя;
		КонецЦикла;
		
		Если ИмяРаздела = "Раздел1_2" Тогда
			ИзменитьВариантыЗаполненияПоказателей(ЭтаФорма, ИмяРаздела);
		КонецЕсли;
		
		СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяРаздела);
		
		ЭтоПервыйЛист = Ложь;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеСпец(ИмяТекущегоРаздела, ОбновитьСтавки = Истина) Экспорт
	
	Если ИмяТекущегоРаздела = "Лист02" И НЕ ОбновитьСтавки Тогда
		П000200015003 = ТабличныйДокумент.Области.П000200015003.Значение;
		П000200016003 = ТабличныйДокумент.Области.П000200016003.Значение;
	КонецЕсли;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		Если Область.ЦветФона = СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(ЭтаФорма, ИмяТекущегоРаздела);
	
	СохранитьДанныеРаздела(ИмяТекущегоРаздела, Истина, Ложь);
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ТабличныйДокумент.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяТекущегоРаздела = "Лист02" Тогда
		Если ОбновитьСтавки Тогда
			ПолучитьСтавкиНалога(ЭтаФорма, "Лист02");
		Иначе
			//восстановим старые значения
			ТабличныйДокумент.Области.П000200015003.Значение = П000200015003;
			ТабличныйДокумент.Области.П000200016003.Значение = П000200016003;
		КонецЕсли;
	КонецЕсли;
	
	//Обнуление по условию строки 230 на листе 02
	Если ИмяТекущегоРаздела = "Лист02_5" Тогда
		
		Если Не СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П000250005003");
		КонецЕсли;
		
		АктивныеСтраницыПрил5 = ЭтаФорма[мСтруктураМногостраничныхРазделов["Лист02_5"]].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивныеСтраницыПрил5.Количество() > 0 Тогда
			ДанныеПрил5Список = АктивныеСтраницыПрил5[0].Данные;
			ДанныеПрил5 = ДанныеПрил5Список[0].Значение;
			Если ДанныеПрил5 <> Неопределено Тогда
				ДанныеПрил5.П000250000100 = "";
				ДанныеПрил5Список[0].Пометка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяТекущегоРаздела = "Лист02_6а" Тогда
		
		Если Не СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П000270005003");
		КонецЕсли;
		
		УстановитьПримечаниеКПолюОКАТОЛиста02_6а(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьПрПл_1(ИмяРаздела = "")
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтрПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	Иначе
		СтрПоМесту = СтруктураДанныхТитульный.ПоМесту;
	КонецЕсли;
	
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223");
	
	ИменаПрПлРаздела = Новый Структура;
	Если флЕстьОбособ Тогда
		ИменаПрПлРаздела.Вставить("Лист02_5", "П000250000100");
	Иначе
		ИменаПрПлРаздела.Вставить("Лист02", "П000200000100");
		Если флКвартальноеЗаполнение Тогда
			ИменаПрПлРаздела.Вставить("Лист02_1", "П000210000100");
			ИменаПрПлРаздела.Вставить("Лист02_2", "П000220000100");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРаздела = "" Тогда
		Для каждого ИмяПрПл Из ИменаПрПлРаздела Цикл
			ПроставитьПрПл_1(ИмяПрПл.Ключ);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ТаблДок = ТабличныйДокумент;
	ТаблицаРаздела = ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяРаздела]];
	СтруктураДанныхРаздела = ТаблицаРаздела[0].Данные[0].Значение;
	ТаблицаРаздела[0].Данные[0].Пометка = Ложь;
	СтруктураДанныхРаздела[ИменаПрПлРаздела[ИмяРаздела]] = "1";
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		ТаблДок.Области[ИменаПрПлРаздела[ИмяРаздела]].Значение = "1";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, ИмяРаздела, ИмяПоказателя, УсловияСуммирования)
	
	СуммаПоказателя = 0;
	
	СтруктураРаздела = Неопределено;
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, СтруктураРаздела);
	
	Если СтруктураРаздела = Неопределено Тогда
		Возврат 0;
	Иначе
		СтруктураРаздела = Форма[СтруктураРаздела];
	КонецЕсли;
	
	Для Каждого СтраницаРаздела Из СтруктураРаздела Цикл
		
		Данные = СтраницаРаздела.Данные[0].Значение;
		
		ОдноИзНабораУсловийВыполняется = Ложь;
		Для Каждого Условие Из УсловияСуммирования Цикл
			
			УсловиеВыполняется = Истина;
			Для Каждого ЭлементУсловия Из Условие Цикл
				ИмяПоказателяУсловия = ЭлементУсловия.Ключ;
				
				ЗначениеУсловия = ЭлементУсловия.Значение;
				Если ТипЗнч(ЗначениеУсловия) = Тип("Строка") Тогда
					ЗначениеУсловия = СокрЛП(ЗначениеУсловия);
				КонецЕсли;
				
				ЗначениеПоказателяУсловия = Данные[ИмяПоказателяУсловия];
				
				// Проверка названия организации в приложении 5 к листу 02 производится в нижнем регистре.
				Если ИмяПоказателяУсловия = "П000250002003" Тогда
					ЗначениеПоказателяУсловия = НРег(ЗначениеПоказателяУсловия);
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеПоказателяУсловия) = Тип("Строка") Тогда
					ЗначениеПоказателяУсловия = СокрЛП(ЗначениеПоказателяУсловия);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеУсловия) Тогда
					Если ЗначениеПоказателяУсловия <> ЗначениеУсловия Тогда
						УсловиеВыполняется = Ложь;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(ЗначениеПоказателяУсловия) Тогда
						УсловиеВыполняется = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ОдноИзНабораУсловийВыполняется = ОдноИзНабораУсловийВыполняется ИЛИ УсловиеВыполняется;
		КонецЦикла;
		
		Если ОдноИзНабораУсловийВыполняется Тогда
			ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные[ИмяПоказателя]);
			СуммаПоказателя = СуммаПоказателя + ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаПоказателя;
	
КонецФункции

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "", АвторасчетПослеАвтозаполнения = Ложь) Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя, АвторасчетПослеАвтозаполнения);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "", АвторасчетПослеАвтозаполнения = Ложь) Экспорт 
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя, АвторасчетПослеАвтозаполнения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "", АвторасчетПослеАвтозаполнения = Ложь)
	
	
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел1_1" Тогда
		
		РасчетВСтруктуре(Форма, "Раздел1_1");
		
	ИначеЕсли ИмяРаздела = "Раздел1_2" Тогда
		
		РасчетВСтруктуре(Форма, "Раздел1_2");
		
	ИначеЕсли ИмяРаздела = "Раздел1_3" Тогда
		
		// Данный раздел не заполняется в автоматическом режиме.
		
	ИначеЕсли ИмяРаздела = "Лист02" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02", , АвторасчетПослеАвтозаполнения);
		
	ИначеЕсли ИмяРаздела = "Лист02_1" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_1");
		
	ИначеЕсли ИмяРаздела = "Лист02_2" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_2");
		
	ИначеЕсли ИмяРаздела = "Лист02_3" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_3");
		
	ИначеЕсли ИмяРаздела = "Лист02_4" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_4");
		
	ИначеЕсли ИмяРаздела = "Лист02_5" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_5");
		
	ИначеЕсли ИмяРаздела = "Лист02_6" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_6");
		
	ИначеЕсли ИмяРаздела = "Лист02_6а" Тогда
		
		РасчетВСтруктуре(Форма, "Лист02_6а");
		
	ИначеЕсли ИмяРаздела = "Лист02_6б" Тогда
		
		// Расчет в строке 070 многострочной части.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000280007003, Лев(ОбластьИмя, 13)) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02_6б" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				// Расчет в текущей строке многострочной части табличного документа.
				НомСтроки = Сред(ОбластьИмя, 15);
				
				Форма.ТабличныйДокумент.Области["П000280007003_" + НомСтроки].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					  Форма.ТабличныйДокумент.Области["П000280002003_" + НомСтроки].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					  Форма.ТабличныйДокумент.Области["П000280002103_" + НомСтроки].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					  Форма.ТабличныйДокумент.Области["П000280003003_" + НомСтроки].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					  Форма.ТабличныйДокумент.Области["П000280003103_" + НомСтроки].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					  Форма.ТабличныйДокумент.Области["П000280004003_" + НомСтроки].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					  Форма.ТабличныйДокумент.Области["П000280005003_" + НомСтроки].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					  Форма.ТабличныйДокумент.Области["П000280006003_" + НомСтроки].Значение);
				
			Иначе
				
				Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б, ТаблицаБлока);
				ТаблицаБлока = Форма[ТаблицаБлока];
				
				Для каждого Зап Из ТаблицаБлока Цикл
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02_6б" Тогда
						
						// Расчет во всех строках многострочной части табличного документа.
						НомСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
						
						Форма.ТабличныйДокумент.Области["П000280007003_" + НомСтроки].Значение
							= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
							  Форма.ТабличныйДокумент.Области["П000280002003_" + НомСтроки].Значение)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
							  Форма.ТабличныйДокумент.Области["П000280002103_" + НомСтроки].Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
							  Форма.ТабличныйДокумент.Области["П000280003003_" + НомСтроки].Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
							  Форма.ТабличныйДокумент.Области["П000280003103_" + НомСтроки].Значение)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
							  Форма.ТабличныйДокумент.Области["П000280004003_" + НомСтроки].Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
							  Форма.ТабличныйДокумент.Области["П000280005003_" + НомСтроки].Значение)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
							  Форма.ТабличныйДокумент.Области["П000280006003_" + НомСтроки].Значение);
						
					Иначе
						
						// Расчет во всех записях, хранящихся в реквизите формы.
						Зап.П000280007003
							= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000280002003)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000280002103)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000280003003)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000280003103)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000280004003)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000280005003)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000280006003);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист03А" Тогда
		
		// Стр. 20.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310002003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист03А" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000310002003.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310002103.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310002203.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310002303.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310002403.Значение), 0);
			Иначе
				Для каждого СтраницаЛист03А Из Форма.ТаблицаСтраницыЛист03А Цикл
					Если СтраницаЛист03А.Данные.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтраницаЛист03А.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					Данные = СтраницаЛист03А.Данные[0].Значение;
					Данные.П000310002003
						= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310002103)
						+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310002203)
						+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310002303)
						+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310002403), 0);
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист03А" И СтраницаЛист03А.АктивнаяСтраница Тогда
						Форма.ТабличныйДокумент.Области.П000310002003.Значение = Данные.П000310002003;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр. 10.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310001003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист03А" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000310001003.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310002003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310003003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310004003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310005003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310006003.Значение), 0);
			Иначе
				Для каждого СтраницаЛист03А Из Форма.ТаблицаСтраницыЛист03А Цикл
					Если СтраницаЛист03А.Данные.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтраницаЛист03А.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					Данные = СтраницаЛист03А.Данные[0].Значение;
					Данные.П000310001003
						= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310002003)
						+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310003003)
						+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310004003)
						+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310005003)
						+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310006003), 0);
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист03А" И СтраницаЛист03А.АктивнаяСтраница Тогда
						Форма.ТабличныйДокумент.Области.П000310001003.Значение = Данные.П000310001003;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр. 90.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000310009003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист03А" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Если Форма.ТабличныйДокумент.Области.П000310000100.Значение = "1" Тогда
					Если ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.П000310001003.Значение) Тогда
						Форма.ТабличныйДокумент.Области.П000310009003.Значение
							= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310001003.Значение)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310007003.Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310008103.Значение);
					ИначеЕсли ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.П000310000103.Значение) Тогда
						Форма.ТабличныйДокумент.Области.П000310009003.Значение
							= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310000103.Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000310008103.Значение);
					Иначе
						Форма.ТабличныйДокумент.Области.П000310009003.Значение = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Для каждого СтраницаЛист03А Из Форма.ТаблицаСтраницыЛист03А Цикл
					Если СтраницаЛист03А.Данные.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтраницаЛист03А.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					Данные = СтраницаЛист03А.Данные[0].Значение;
					Если Данные.П000310000100 = "1" Тогда
						Если ЗначениеЗаполнено(Данные.П000310001003) Тогда
							Данные.П000310009003
								= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310001003)
								+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310007003)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310008103);
						ИначеЕсли ЗначениеЗаполнено(Данные.П000310000103) Тогда
							Данные.П000310009003
								= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310000103)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000310008103);
						Иначе
							Данные.П000310009003 = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист03А" И СтраницаЛист03А.АктивнаяСтраница Тогда
						Форма.ТабличныйДокумент.Области.П000310009003.Значение = Данные.П000310009003;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист03Б" Тогда
		
		// Стр. 030.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000320003003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист03Б" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000320003003.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области.П000320001003.Значение)
					* Форма.ТабличныйДокумент.Области.П000320002003.Значение / 100), 0);
			Иначе
				Для каждого СтраницаЛист03Б Из Форма.ТаблицаСтраницыЛист03Б Цикл
					Если СтраницаЛист03Б.Данные.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтраницаЛист03Б.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					Данные = СтраницаЛист03Б.Данные[0].Значение;
					Данные.П000320003003
						= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000320001003)
						* Данные.П000320002003 / 100), 0);
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист03Б" И СтраницаЛист03Б.АктивнаяСтраница Тогда
						Форма.ТабличныйДокумент.Области.П000320003003.Значение = Данные.П000320003003;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист04" Тогда
		
		// Стр.040 = макс((стр.010 - стр.020) * стр.030 /100, 0).
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400004003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист04" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000400004003.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400001003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400002003.Значение))
					* Форма.ТабличныйДокумент.Области.П000400003003.Значение / 100), 0);
			Иначе
				Для каждого СтраницаЛист04 Из Форма.ТаблицаСтраницыЛист04 Цикл
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист04" И СтраницаЛист04.АктивнаяСтраница Тогда
						Форма.ТабличныйДокумент.Области.П000400004003.Значение
							= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
							(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400001003.Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400002003.Значение))
							* Форма.ТабличныйДокумент.Области.П000400003003.Значение / 100), 0);
						СтраницаЛист04.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
						Данные = СтраницаЛист04.Данные[0].Значение;
						Данные.П000400004003 = Форма.ТабличныйДокумент.Области.П000400004003.Значение;
					Иначе
						Если СтраницаЛист04.Данные.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						СтраницаЛист04.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
						Данные = СтраницаЛист04.Данные[0].Значение;
						Данные.П000400004003
							= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
							(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000400001003)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000400002003))
							* Данные.П000400003003/100), 0);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр.080 = макс((стр.040 - стр.050 - стр.060 - стр.070), 0).
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000400008003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист04" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000400008003.Значение
					= Макс(Форма.ТабличныйДокумент.Области.П000400004003.Значение
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400005003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400006003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400007003.Значение), 0);
			Иначе
				Для каждого СтраницаЛист04 Из Форма.ТаблицаСтраницыЛист04 Цикл
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист04" И СтраницаЛист04.АктивнаяСтраница Тогда
						Форма.ТабличныйДокумент.Области.П000400008003.Значение
							= Макс(Форма.ТабличныйДокумент.Области.П000400004003.Значение
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400005003.Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400006003.Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000400007003.Значение), 0);
						СтраницаЛист04.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
						Данные = СтраницаЛист04.Данные[0].Значение;
						Данные.П000400008003 = Форма.ТабличныйДокумент.Области.П000400008003.Значение;
					Иначе
						Если СтраницаЛист04.Данные.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						СтраницаЛист04.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
						Данные = СтраницаЛист04.Данные[0].Значение;
						Данные.П000400008003
							= Макс(Данные.П000400004003
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000400005003)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000400006003)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000400007003), 0);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист05" Тогда
		
		Если Год(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) < 2015 Тогда
			
			// Стр.040 = стр.010 + стр.020 - стр.030 + стр.031.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500004003, ОбластьИмя) > 0) Тогда
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И ЗначениеЗаполнено(ОбластьИмя) Тогда
					Форма.ТабличныйДокумент.Области.П000500004003.Значение
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500001003.Значение)
						+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500002003.Значение)
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500003003.Значение)
						+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500003103.Значение);
				Иначе
					Для каждого СтраницаЛист05 Из Форма.ТаблицаСтраницыЛист05 Цикл
						Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И СтраницаЛист05.АктивнаяСтраница Тогда
							Форма.ТабличныйДокумент.Области.П000500004003.Значение
								= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500001003.Значение)
								+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500002003.Значение)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500003003.Значение)
								+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500003103.Значение);
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500004003 = Форма.ТабличныйДокумент.Области.П000500004003.Значение;
						Иначе
							Если СтраницаЛист05.Данные.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500004003
								= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500001003)
								+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500002003)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500003003)
								+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500003103);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			// Стр.060 = стр.040 - стр.050.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500006003, ОбластьИмя) > 0) Тогда
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И ЗначениеЗаполнено(ОбластьИмя) Тогда
					Форма.ТабличныйДокумент.Области.П000500006003.Значение
						= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500004003.Значение)
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500005003.Значение), 0);
				Иначе
					Для каждого СтраницаЛист05 Из Форма.ТаблицаСтраницыЛист05 Цикл
						Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И СтраницаЛист05.АктивнаяСтраница Тогда
							Форма.ТабличныйДокумент.Области.П000500006003.Значение
								= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500004003.Значение)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500005003.Значение), 0);
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500006003 = Форма.ТабличныйДокумент.Области.П000500006003.Значение;
						Иначе
							Если СтраницаЛист05.Данные.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500006003
								= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500004003)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500005003), 0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			// Стр.090.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500009003, ОбластьИмя) > 0) Тогда
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И ЗначениеЗаполнено(ОбластьИмя) Тогда
					Если Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12 // представление - за год
						И Форма.ТабличныйДокумент.Области.П000500004003.Значение < 0 Тогда
						Форма.ТабличныйДокумент.Области.П000500009003.Значение
							= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500007003.Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500004003.Значение), 0);
					Иначе
						Форма.ТабличныйДокумент.Области.П000500009003.Значение
							= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500007003.Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500008003.Значение), 0);
					КонецЕсли;
				Иначе
					Для каждого СтраницаЛист05 Из Форма.ТаблицаСтраницыЛист05 Цикл
						Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И СтраницаЛист05.АктивнаяСтраница Тогда
							Если Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12 // представление - за год
								И Форма.ТабличныйДокумент.Области.П000500004003.Значение < 0 Тогда
								Форма.ТабличныйДокумент.Области.П000500009003.Значение
									= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500007003.Значение)
									- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500004003.Значение), 0);
							Иначе
								Форма.ТабличныйДокумент.Области.П000500009003.Значение
									= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500007003.Значение)
									- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500008003.Значение), 0);
							КонецЕсли;
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500009003 = Форма.ТабличныйДокумент.Области.П000500009003.Значение;
						Иначе
							Если СтраницаЛист05.Данные.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Если Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12 // представление - за год
								И Данные.П000500004003 < 0 Тогда
								Данные.П000500009003
									= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500007003)
									- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500004003), 0);
							Иначе
								Данные.П000500009003
									= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500007003)
									- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500008003), 0);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			// Стр.100 = стр.060 - стр.080.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500010003, ОбластьИмя) > 0) Тогда
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И ЗначениеЗаполнено(ОбластьИмя) Тогда
					Форма.ТабличныйДокумент.Области.П000500010003.Значение
						= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500006003.Значение)
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500008003.Значение), 0);
				Иначе
					Для каждого СтраницаЛист05 Из Форма.ТаблицаСтраницыЛист05 Цикл
						Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И СтраницаЛист05.АктивнаяСтраница Тогда
							Форма.ТабличныйДокумент.Области.П000500010003.Значение
								= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500006003.Значение)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500008003.Значение), 0);
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500010003 = Форма.ТабличныйДокумент.Области.П000500010003.Значение;
						Иначе
							Если СтраницаЛист05.Данные.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500010003
								= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500006003)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500008003), 0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // Год(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) >= 2015
			
			// Стр.040 = стр.010 - стр.020.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500004003, ОбластьИмя) > 0) Тогда
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И ЗначениеЗаполнено(ОбластьИмя) Тогда
					Форма.ТабличныйДокумент.Области.П000500004003.Значение
						= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500001003.Значение)
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500002003.Значение);
				Иначе
					Для каждого СтраницаЛист05 Из Форма.ТаблицаСтраницыЛист05 Цикл
						Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И СтраницаЛист05.АктивнаяСтраница Тогда
							Форма.ТабличныйДокумент.Области.П000500004003.Значение
								= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500001003.Значение)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500002003.Значение);
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500004003 = Форма.ТабличныйДокумент.Области.П000500004003.Значение;
						Иначе
							Если СтраницаЛист05.Данные.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500004003
								= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500001003)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500002003);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			// Стр.060 = стр.040 - стр.050.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500006003, ОбластьИмя) > 0) Тогда
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И ЗначениеЗаполнено(ОбластьИмя) Тогда
					Форма.ТабличныйДокумент.Области.П000500006003.Значение
						= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500004003.Значение)
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500005003.Значение), 0);
				Иначе
					Для каждого СтраницаЛист05 Из Форма.ТаблицаСтраницыЛист05 Цикл
						Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И СтраницаЛист05.АктивнаяСтраница Тогда
							Форма.ТабличныйДокумент.Области.П000500006003.Значение
								= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500004003.Значение)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500005003.Значение), 0);
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500006003 = Форма.ТабличныйДокумент.Области.П000500006003.Значение;
						Иначе
							Если СтраницаЛист05.Данные.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500006003
								= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500004003)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500005003), 0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			// Стр.100 = стр.060 - стр.080.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
				ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500010003, ОбластьИмя) > 0) Тогда
				
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И ЗначениеЗаполнено(ОбластьИмя) Тогда
					Форма.ТабличныйДокумент.Области.П000500010003.Значение
						= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500006003.Значение)
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500008003.Значение), 0);
				Иначе
					Для каждого СтраницаЛист05 Из Форма.ТаблицаСтраницыЛист05 Цикл
						Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист05" И СтраницаЛист05.АктивнаяСтраница Тогда
							Форма.ТабличныйДокумент.Области.П000500010003.Значение
								= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500006003.Значение)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000500008003.Значение), 0);
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500010003 = Форма.ТабличныйДокумент.Области.П000500010003.Значение;
						Иначе
							Если СтраницаЛист05.Данные.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							СтраницаЛист05.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
							Данные = СтраницаЛист05.Данные[0].Значение;
							Данные.П000500010003
								= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500006003)
								- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000500008003), 0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист06" Тогда
		
		// Стр.010 = стр.020 + стр.030 + стр.040 + стр.050 + стр.060 + стр.070 + стр.080 + стр.090 + стр.100 + стр.110.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600001003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600001003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600002003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600003003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600004003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600005003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600006003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600007003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600008003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600009003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600010003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600011003.Значение);
				Форма.СтруктураДанныхЛист06.Вставить("П000600001003", Форма.ТабличныйДокумент.Области.П000600001003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600001003
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600002003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600003003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600004003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600005003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600006003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600007003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600008003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600009003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600010003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600011003);
			КонецЕсли;
			
		КонецЕсли;
	
		// Стр.190 = стр.200 + стр.210 + стр.220.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600019003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600019003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600020003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600021003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600022003.Значение);
				Форма.СтруктураДанныхЛист06.Вставить("П000600019003", Форма.ТабличныйДокумент.Области.П000600019003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600019003
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600020003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600021003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600022003);
			КонецЕсли;
			
		КонецЕсли;
	
		// Стр.240 = стр.250 + стр.260 + стр.270 + стр.280 + стр.290 + стр.300 + стр.310 + стр.320.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600024003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600024003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600025003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600026003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600027003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600028003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600029003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600030003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600031003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600032003.Значение);
				Форма.СтруктураДанныхЛист06.Вставить("П000600024003", Форма.ТабличныйДокумент.Области.П000600024003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600024003
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600025003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600026003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600027003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600028003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600029003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600030003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600031003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600032003);
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр.330 = стр.020 + стр.030 - стр.140 - стр.200 - стр.250.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600033003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600033003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600002003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600003003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600014003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600020003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600025003.Значение);
				Форма.СтруктураДанныхЛист06.Вставить("П000600033003", Форма.ТабличныйДокумент.Области.П000600033003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600033003
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600002003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600003003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600014003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600020003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600025003);
			КонецЕсли;
			
		КонецЕсли;
	
		// Cтр.350 = стр.040 + стр.050 - стр.150 - стр.210 - стр.260.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600035003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600035003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600004003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600005003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600015003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600021003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600026003.Значение);
				Форма.СтруктураДанныхЛист06.Вставить("П000600035003", Форма.ТабличныйДокумент.Области.П000600035003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600035003
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600004003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600005003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600015003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600021003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600026003);
			КонецЕсли;
			
		КонецЕсли;
	
		// Стр.370 = стр.060 - стр.160 - стр.270.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600037003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600037003.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600006003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600016003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600027003.Значение), 0);
				Форма.СтруктураДанныхЛист06.Вставить("П000600037003", Форма.ТабличныйДокумент.Области.П000600037003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600037003
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600006003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600016003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600027003), 0);
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр.380 = стр.070 - стр.170 - стр.280.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600038003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600038003.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600007003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600017003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600028003.Значение), 0);
				Форма.СтруктураДанныхЛист06.Вставить("П000600038003", Форма.ТабличныйДокумент.Области.П000600038003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600038003
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600007003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600017003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600028003), 0);
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр.390 = стр.110 - стр.180 - стр.220 - стр.320.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600039003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600039003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600011003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600018003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600022003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600032003.Значение);
				Форма.СтруктураДанныхЛист06.Вставить("П000600039003", Форма.ТабличныйДокумент.Области.П000600039003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600039003
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600011003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600018003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600022003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600032003);
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр.410 = стр.330 - стр.340.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600041003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600041003.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600033003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600034003.Значение), 0);
				Форма.СтруктураДанныхЛист06.Вставить("П000600041003", Форма.ТабличныйДокумент.Области.П000600041003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600041003
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600033003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600034003), 0);
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр.440 = стр.420 - стр.430.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600044003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600044003.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600042003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600043003.Значение), 0);
				Форма.СтруктураДанныхЛист06.Вставить("П000600044003", Форма.ТабличныйДокумент.Области.П000600044003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600044003
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600042003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600043003), 0);
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр.450 = стр.350 - стр.360.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600045003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600045003.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600035003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600036003.Значение), 0);
				Форма.СтруктураДанныхЛист06.Вставить("П000600045003", Форма.ТабличныйДокумент.Области.П000600045003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600045003
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600035003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600036003), 0);
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр.480 = стр.460 - стр.470 - стр.471.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600048003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600048003.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600046003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600047003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600047103.Значение), 0);
				Форма.СтруктураДанныхЛист06.Вставить("П000600048003", Форма.ТабличныйДокумент.Области.П000600048003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600048003
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600046003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600047003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600047103), 0);
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр.490 = стр.390 - стр.400.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600049003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600049003.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600039003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600040003.Значение), 0);
				Форма.СтруктураДанныхЛист06.Вставить("П000600049003", Форма.ТабличныйДокумент.Области.П000600049003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600049003
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600039003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600040003), 0);
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр.520 = стр.500 - стр.510.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600052003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000600052003.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600050003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600051003.Значение), 0);
				Форма.СтруктураДанныхЛист06.Вставить("П000600052003", Форма.ТабличныйДокумент.Области.П000600052003.Значение);
			Иначе
				Форма.СтруктураДанныхЛист06.П000600052003
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600050003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600051003), 0);
			КонецЕсли;
			
		КонецЕсли;
		
		// До 01.01.2015:
		// Cтр.530 = стр 410 – стр 430 + стр 450 – стр 470 + стр 490 – стр 510, если хотя бы одна из строк 410, 450, 490 > 0.
		// С 01.01.2015:
		// Cтр.530 = стр 330 + стр 410 + стр 450 – стр 470 + стр 490 – стр 510, если стр 330 < 0.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600053003, ОбластьИмя) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист06" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Если Год(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) < 2015 Тогда
					
					Если Форма.ТабличныйДокумент.Области.П000600041003.Значение > 0
						ИЛИ Форма.ТабличныйДокумент.Области.П000600045003.Значение > 0
						ИЛИ Форма.ТабличныйДокумент.Области.П000600049003.Значение > 0 Тогда
						Форма.ТабличныйДокумент.Области.П000600053003.Значение
							= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600041003.Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600043003.Значение)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600045003.Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600047003.Значение)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600049003.Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600051003.Значение), 0);
					Иначе
						Форма.ТабличныйДокумент.Области.П000600053003.Значение = 0;
					КонецЕсли;
					
				Иначе
					
					Если Форма.ТабличныйДокумент.Области.П000600033003.Значение < 0 Тогда
						Форма.ТабличныйДокумент.Области.П000600053003.Значение
							= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600033003.Значение)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600041003.Значение)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600045003.Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600047003.Значение)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600049003.Значение)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000600051003.Значение), 0);
					Иначе
						Форма.ТабличныйДокумент.Области.П000600053003.Значение = 0;
					КонецЕсли;
					
				КонецЕсли;
				
				Форма.СтруктураДанныхЛист06.Вставить("П000600053003", Форма.ТабличныйДокумент.Области.П000600053003.Значение);
				
			Иначе
				
				Если Год(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) < 2015 Тогда
					
					Если Форма.СтруктураДанныхЛист06.П000600041003 > 0
						ИЛИ Форма.СтруктураДанныхЛист06.П000600045003 > 0
						ИЛИ Форма.СтруктураДанныхЛист06.П000600049003 > 0 Тогда
						Форма.СтруктураДанныхЛист06.П000600053003
							= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600041003)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600043003)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600045003)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600047003)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600049003)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600051003), 0);
					Иначе
						Форма.СтруктураДанныхЛист06.П000600053003 = 0;
					КонецЕсли;
					
				Иначе
					
					Если Форма.СтруктураДанныхЛист06.П000600033003 < 0 Тогда
						Форма.СтруктураДанныхЛист06.П000600053003
							= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600033003)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600041003)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600045003)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600047003)
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600049003)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600051003), 0);
					Иначе
						Форма.СтруктураДанныхЛист06.П000600053003 = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист07" Тогда
		
		// Расчет в графе 7 текущей строки многострочной части раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000700001007, Лев(ОбластьИмя, 13)) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист07" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				// Расчет в текущей строке многострочной части табличного документа.
				НомСтроки = Сред(ОбластьИмя, 15);
				Окр_П000700001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000700001003_" + НомСтроки].Значение);
				Окр_П000700001004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000700001004_" + НомСтроки].Значение);
				Окр_П000700001006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области["П000700001006_" + НомСтроки].Значение);
				
				Форма.ТабличныйДокумент.Области["П000700001007_" + НомСтроки].Значение
					= Окр_П000700001003 - Окр_П000700001004 - Окр_П000700001006;
				
			Иначе
				
				Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Лист07, ТаблицаБлока);
				ТаблицаБлока = Форма[ТаблицаБлока];
				
				Для каждого Зап Из ТаблицаБлока Цикл
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист07" Тогда
						
						// Расчет во всех строках многострочной части табличного документа.
						НомСтроки = Формат(ТаблицаБлока.Индекс(Зап) + 1, "ЧГ=0");
						Окр_П000700001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, Форма.ТабличныйДокумент.Области["П000700001003_" + НомСтроки].Значение);
						Окр_П000700001004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, Форма.ТабличныйДокумент.Области["П000700001004_" + НомСтроки].Значение);
						Окр_П000700001006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, Форма.ТабличныйДокумент.Области["П000700001006_" + НомСтроки].Значение);
						
						Форма.ТабличныйДокумент.Области["П000700001007_" + НомСтроки].Значение
							= Окр_П000700001003 - Окр_П000700001004 - Окр_П000700001006;
						
					Иначе
						
						// Расчет во всех записях, хранящихся в реквизите формы.
						Окр_П000700001003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000700001003);
						Окр_П000700001004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000700001004);
						Окр_П000700001006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Зап.П000700001006);
						
						Зап.П000700001007 = Окр_П000700001003 - Окр_П000700001004 - Окр_П000700001006;
					
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Расчет в графе 3 строки "Итого по отчету" раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000700002003, Лев(ОбластьИмя, 13)) > 0) Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Лист07, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка3 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист07" Тогда
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000700001003_" + Ном].Значение);
				Иначе
					Колонка3 = Колонка3 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТаблицаБлока[Ном - 1].П000700001003);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист07" Тогда
				Форма.ТабличныйДокумент.Области.П000700002003.Значение = Колонка3;
			Иначе
				Форма.СтруктураДанныхЛист07.Вставить("П000700002003", Колонка3);
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в графе 4 строки "Итого по отчету" раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000700002004, Лев(ОбластьИмя, 13)) > 0) Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Лист07, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка4 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист07" Тогда
					Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000700001004_" + Ном].Значение);
				Иначе
					Колонка4 = Колонка4 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТаблицаБлока[Ном - 1].П000700001004);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист07" Тогда
				Форма.ТабличныйДокумент.Области.П000700002004.Значение = Колонка4;
			Иначе
				Форма.СтруктураДанныхЛист07.Вставить("П000700002004", Колонка4);
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в графе 6 строки "Итого по отчету" раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000700002006, Лев(ОбластьИмя, 13)) > 0) Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Лист07, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка6 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист07" Тогда
					Колонка6 = Колонка6 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000700001006_" + Ном].Значение);
				Иначе
					Колонка6 = Колонка6 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТаблицаБлока[Ном - 1].П000700001006);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист07" Тогда
				Форма.ТабличныйДокумент.Области.П000700002006.Значение = Колонка6;
			Иначе
				Форма.СтруктураДанныхЛист07.Вставить("П000700002006", Колонка6);
			КонецЕсли;
		КонецЕсли;
		
		// Расчет в графе 7 строки "Итого по отчету" раздела 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000700002007, Лев(ОбластьИмя, 13)) > 0) Тогда
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Лист07, ТаблицаБлока);
			ТаблицаБлока = Форма[ТаблицаБлока];
			Колонка7 = 0;
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист07" Тогда
					Колонка7 = Колонка7 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, Форма.ТабличныйДокумент.Области["П000700001007_" + Ном].Значение);
				Иначе
					Колонка7 = Колонка7 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ТаблицаБлока[Ном - 1].П000700001007);
				КонецЕсли;
			КонецЦикла;
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист07" Тогда
				Форма.ТабличныйДокумент.Области.П000700002007.Значение = Колонка7;
			Иначе
				Форма.СтруктураДанныхЛист07.Вставить("П000700002007", Колонка7);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		// Стр. 020.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020002003, Лев(ОбластьИмя, 13)) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Сумма041 = 0;
				Инд = 1;
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Пока Форма.ТабличныйДокумент.Области.Найти("П000020004101" + Постфикс) <> Неопределено Цикл
					Сумма041 = Сумма041 + Форма.ТабличныйДокумент.Области["П000020004101" + Постфикс].Значение;
					Инд = Инд + 1;
					Постфикс = "_" + Формат(Инд, "ЧГ=0");
				КонецЦикла;
				Форма.ТабличныйДокумент.Области["П000020002003"].Значение = Сумма041;
			Иначе
				Для каждого СтраницаПриложение2 Из Форма.ТаблицаСтраницыПриложение2 Цикл
					Если СтраницаПриложение2.ДанныеДопСтрок.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Сумма041 = 0;
					
					ДанныеДопСтрок041ТекСтраницыПриложение2 = СтраницаПриложение2.ДанныеДопСтрок[0].Значение.П0000200040;
					Для каждого Строка041 Из ДанныеДопСтрок041ТекСтраницыПриложение2 Цикл
						Сумма041 = Сумма041 + Строка041.П000020004101;
					КонецЦикла;
					
					СтраницаПриложение2.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					ДанныеТекСтраницыПриложение2 = СтраницаПриложение2.Данные[0].Значение;
					ДанныеТекСтраницыПриложение2.Вставить("П000020002003", Сумма041);
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" И СтраницаПриложение2.АктивнаяСтраница Тогда
						Форма.ТабличныйДокумент.Области["П000020002003"].Значение = Сумма041;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр. 021.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020002103, Лев(ОбластьИмя, 13)) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Сумма043 = 0;
				Инд = 1;
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Пока Форма.ТабличныйДокумент.Области.Найти("П000020004301" + Постфикс) <> Неопределено Цикл
					Для Графа = 1 По 5 Цикл
						Сумма043 = Сумма043 + Форма.ТабличныйДокумент.Области["П00002000430" + Формат(Графа, "ЧГ=0") + Постфикс].Значение;
					КонецЦикла;
					Инд = Инд + 1;
					Постфикс = "_" + Формат(Инд, "ЧГ=0");
				КонецЦикла;
				Сумма052 = 0;
				Инд = 1;
				Постфикс = "_" + Формат(Инд, "ЧГ=0");
				Пока Форма.ТабличныйДокумент.Области.Найти("П000020005201" + Постфикс) <> Неопределено Цикл
					Сумма052 = Сумма052 + Форма.ТабличныйДокумент.Области["П000020005201" + Постфикс].Значение;
					Инд = Инд + 1;
					Постфикс = "_" + Формат(Инд, "ЧГ=0");
				КонецЦикла;
				Форма.ТабличныйДокумент.Области["П000020002103"].Значение = Сумма043 + Сумма052;
			Иначе
				Для каждого СтраницаПриложение2 Из Форма.ТаблицаСтраницыПриложение2 Цикл
					Если СтраницаПриложение2.ДанныеДопСтрок.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Сумма043 = 0;
					Сумма052 = 0;
					
					ДанныеДопСтрок043ТекСтраницыПриложение2 = СтраницаПриложение2.ДанныеДопСтрок[0].Значение.П0000200040;
					Для каждого Строка043 Из ДанныеДопСтрок043ТекСтраницыПриложение2 Цикл
						Для Графа = 1 По 5 Цикл
							Сумма043 = Сумма043 + Строка043["П00002000430" + Формат(Графа, "ЧГ=0")];
						КонецЦикла;
					КонецЦикла;
					ДанныеДопСтрок052ТекСтраницыПриложение2 = СтраницаПриложение2.ДанныеДопСтрок[0].Значение.П0000200051;
					Для каждого Строка052 Из ДанныеДопСтрок052ТекСтраницыПриложение2 Цикл
						Сумма052 = Сумма052 + Строка052.П000020005201;
					КонецЦикла;
					
					СтраницаПриложение2.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					ДанныеТекСтраницыПриложение2 = СтраницаПриложение2.Данные[0].Значение;
					ДанныеТекСтраницыПриложение2.Вставить("П000020002103", Сумма043 + Сумма052);
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" И СтраницаПриложение2.АктивнаяСтраница Тогда
						Форма.ТабличныйДокумент.Области["П000020002103"].Значение = Сумма043 + Сумма052;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр. 022.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020002203, Лев(ОбластьИмя, 13)) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000020002203.Значение
					= Форма.ТабличныйДокумент.Области.П000020002003.Значение
					- Форма.ТабличныйДокумент.Области.П000020002103.Значение;
			Иначе
				Для каждого СтраницаПриложение2 Из Форма.ТаблицаСтраницыПриложение2 Цикл
					Если СтраницаПриложение2.Данные.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтраницаПриложение2.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					ДанныеТекСтраницыПриложение2 = СтраницаПриложение2.Данные[0].Значение;
					ДанныеТекСтраницыПриложение2.П000020002203
						= ДанныеТекСтраницыПриложение2.П000020002003
						- ДанныеТекСтраницыПриложение2.П000020002103;
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" И СтраницаПриложение2.АктивнаяСтраница Тогда
						Форма.ТабличныйДокумент.Области.П000020002203.Значение
							= ДанныеТекСтраницыПриложение2.П000020002203;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр. 033.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020003303, Лев(ОбластьИмя, 13)) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000020003303.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000020003103.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000020003003.Значение), 0);
			Иначе
				Для каждого СтраницаПриложение2 Из Форма.ТаблицаСтраницыПриложение2 Цикл
					Если СтраницаПриложение2.Данные.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтраницаПриложение2.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					ДанныеТекСтраницыПриложение2 = СтраницаПриложение2.Данные[0].Значение;
					ДанныеТекСтраницыПриложение2.П000020003303
						= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ДанныеТекСтраницыПриложение2.П000020003103)
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ДанныеТекСтраницыПриложение2.П000020003003), 0);
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" И СтраницаПриложение2.АктивнаяСтраница Тогда
						Форма.ТабличныйДокумент.Области.П000020003303.Значение
							= ДанныеТекСтраницыПриложение2.П000020003303;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		// Стр. 034.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			ИЛИ (ЗначениеЗаполнено(ОбластьИмя) И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020003403, Лев(ОбластьИмя, 13)) > 0) Тогда
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" И ЗначениеЗаполнено(ОбластьИмя) Тогда
				Форма.ТабличныйДокумент.Области.П000020003403.Значение
					= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000020003003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.ТабличныйДокумент.Области.П000020003103.Значение), 0);
			Иначе
				Для каждого СтраницаПриложение2 Из Форма.ТаблицаСтраницыПриложение2 Цикл
					Если СтраницаПриложение2.Данные.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтраницаПриложение2.Данные[0].Пометка = Ложь; //для инициализации обмена с сервером
					ДанныеТекСтраницыПриложение2 = СтраницаПриложение2.Данные[0].Значение;
					ДанныеТекСтраницыПриложение2.П000020003403
						= Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ДанныеТекСтраницыПриложение2.П000020003003)
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ДанныеТекСтраницыПриложение2.П000020003103), 0);
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" И СтраницаПриложение2.АктивнаяСтраница Тогда
						Форма.ТабличныйДокумент.Области.П000020003403.Значение
							= ДанныеТекСтраницыПриложение2.П000020003403;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		// Расчет всех показатели на листах в порядке определяемым зависимостью
		// показателей друг от друга.
		
		Расчет(Форма, "Приложение2");
		Расчет(Форма, "Лист07");
		Расчет(Форма, "Лист06");
		Расчет(Форма, "Лист05");
		Расчет(Форма, "Лист04");
		Расчет(Форма, "Лист03Б");
		Расчет(Форма, "Лист03А");
		Расчет(Форма, "Лист02_6б");
		Расчет(Форма, "Лист02_6а");
		Расчет(Форма, "Лист02_6");
		Расчет(Форма, "Лист02_5");
		Расчет(Форма, "Лист02_4");
		Расчет(Форма, "Лист02_3");
		Расчет(Форма, "Лист02_2");
		Расчет(Форма, "Лист02_1");
		Расчет(Форма, "Лист02", , АвторасчетПослеАвтозаполнения);
		
		// Полученная в Листе 02 налоговая база используется для расчета Приложений №№ 4, 5, 6 и 6а к Листу 02
		// с последующим расчетом Листа 02.
		Расчет(Форма, "Лист02_4");
		Расчет(Форма, "Лист02_5");
		Расчет(Форма, "Лист02_6");
		Расчет(Форма, "Лист02_6а");
		Расчет(Форма, "Лист02", , АвторасчетПослеАвтозаполнения);
		
		Расчет(Форма, "Раздел1_2");
		Расчет(Форма, "Раздел1_1");
		
		Форма.СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Ложь; //Если Истина - рассчитываем при переходах, сохранении, печати.
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВСтруктуре(Форма, ИмяЛиста, ИмяПоказателя="", АвторасчетПослеАвтозаполнения = Ложь)
	
	// Расчет осуществляется по структуре многостраничных разделов декларации.
	ТаблицаРаздела = Форма.мСтруктураМногостраничныхРазделов[ИмяЛиста];
	ТаблицаРаздела = Форма[ТаблицаРаздела];
	
	//Значения показателей
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "ПоМесту");
		КодПериодаСдачиОтчетности = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "Период");
	Иначе
		ПоМесту = Форма.СтруктураДанныхТитульный.ПоМесту;
		КодПериодаСдачиОтчетности = Форма.СтруктураДанныхТитульный.Период;
	КонецЕсли; 
	
	//вспомогательные переменные
	флЕстьОбособ = ?(ПоМесту = "220" ИЛИ ПоМесту = "223", Истина, Ложь);
	ПоКонсолидированнойГруппе = (ПоМесту = "218");
	
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	ЭтоКонсолидированнаяГруппа = (ПоМесту = "218");

	НомерМесяца = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	флКвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	флНалоговыйПериод = (НомерМесяца = 12);
	
	ДекларацияПоГоловнойОрганизации = НЕ (ЭтоОбособленноеПодразделение ИЛИ ЭтоКонсолидированнаяГруппа);
	
	ЕстьЗаполненноеЛист02Приложение5
		= ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250000100"));
	
	ЕстьЛист02ПризнакПлательщика34
		  = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02", Новый Структура("П000200000100", "3"))
		ИЛИ ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02", Новый Структура("П000200000100", "4"));
	
	ЕстьЗаполненныйЛист02Приложение5ПоОП
		  = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250001000", "2"))
		ИЛИ ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250001000", "3"))
		ИЛИ ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250001000", "4"));
	
	ЕстьЗаполненныйЛист02_5_РС1
		= ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250001000", "1"));
	
	// Реквизиты организации.
	ИНН   = СокрЛП(Форма.СтруктураДанныхТитульный.ИНН1);
	КПП   = СокрЛП(Форма.СтруктураДанныхТитульный.КПП1);
	ОКТМО = СокрЛП(Форма.СтруктураРеквизитовФормы.ОКТМОДляРазделов);
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Данные = Страница.Данные[0].Значение;
		Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		Страница.Данные[0].Пометка = Ложь; // для инициализации обмена с сервером
		
		Если ИмяЛиста = "Раздел1_1" Тогда
			
			// Предварительное обнуление рассчитываемых величин для покрытия некорректных вариантов заполнения.
			Данные.П000110004003 = 0;
			Данные.П000110005003 = 0;
			Данные.П000110007003 = 0;
			Данные.П000110008003 = 0;
			
			ЭтоОКТМООтветственногоУчастника = Ложь;
			Если СокрЛП(Данные.П000110001003) = ОКТМО
				И ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_6",
					Новый Структура("П000260000101, П000260000201, П000260000301", ИНН, КПП, ОКТМО)) Тогда
				ЭтоОКТМООтветственногоУчастника = Истина;
			КонецЕсли;
			
			КодПоМестуВерный = НЕ (ПоМесту = "229" ИЛИ ПоМесту = "231");
			
			Если КодПоМестуВерный Тогда
				
				УсловиеСуммирования = Новый Массив;
				УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "1"));
				УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "3"));
				УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "4"));
				
				СуммаНалогаФедеральногоБюджета
					= СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200027003", УсловиеСуммирования)
					- СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200028003", УсловиеСуммирования);
				
				Если ДекларацияПоГоловнойОрганизации Тогда
					Если ЕстьЗаполненныйЛист02Приложение5ПоОП Тогда
						
						УсловиеСуммирования = Новый Массив;
						
						Если ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250000100, П000250001000", "1", "1")) Тогда
							Условие = Новый Структура;
							Условие.Вставить("П000250000100", "1");
							Условие.Вставить("П000250001000", "1");
							УсловиеСуммирования.Добавить(Условие);
						Иначе
							Условие = Новый Структура;
							Условие.Вставить("П000250000100", "1");
							Условие.Вставить("П000250001000", "4");
							Условие.Вставить("П000250002001", КПП);
							УсловиеСуммирования.Добавить(Условие);
						КонецЕсли;
						
						Если ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250000100, П000250001000", "3", "1")) Тогда
							Условие = Новый Структура;
							Условие.Вставить("П000250000100", "3");
							Условие.Вставить("П000250001000", "1");
							УсловиеСуммирования.Добавить(Условие);
						Иначе
							Условие = Новый Структура;
							Условие.Вставить("П000250000100", "3");
							Условие.Вставить("П000250001000", "4");
							Условие.Вставить("П000250002001", КПП);
							УсловиеСуммирования.Добавить(Условие);
						КонецЕсли;
						
						СуммаНалогаБюджетаСубъектаРФ
							= СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_5", "П000250010003", УсловиеСуммирования)
							- СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_5", "П000250011003", УсловиеСуммирования);
						
						ЗначениеСтроки040 = Макс(0, СуммаНалогаФедеральногоБюджета);
						ЗначениеСтроки050 = Макс(0, -1 * СуммаНалогаФедеральногоБюджета);
						ЗначениеСтроки070 = Макс(0, СуммаНалогаБюджетаСубъектаРФ);
						ЗначениеСтроки080 = Макс(0, -1 * СуммаНалогаБюджетаСубъектаРФ);
						
					Иначе
						УсловиеСуммирования = Новый Массив;
						УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "1"));
						УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "3"));
						СуммаНалогаБюджетаСубъектаРФ
							= СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200027103", УсловиеСуммирования)
							- СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200028103", УсловиеСуммирования);
						
						ЗначениеСтроки040 = Макс(0, СуммаНалогаФедеральногоБюджета);
						ЗначениеСтроки050 = Макс(0, -1 * СуммаНалогаФедеральногоБюджета);
						ЗначениеСтроки070 = Макс(0, СуммаНалогаБюджетаСубъектаРФ);
						ЗначениеСтроки080 = Макс(0, -1 * СуммаНалогаБюджетаСубъектаРФ);
						
					КонецЕсли;
					
				ИначеЕсли ЭтоОбособленноеПодразделение Тогда // ОП
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000250000100", "1"));
					УсловиеСуммирования.Добавить(Новый Структура("П000250000100", "3"));
					
					СуммаНалогаБюджетаСубъектаРФ
						= СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_5", "П000250010003", УсловиеСуммирования)
						- СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_5", "П000250011003", УсловиеСуммирования);
					
					ЗначениеСтроки040 = 0;
					ЗначениеСтроки050 = 0;
					ЗначениеСтроки070 = Макс(0, СуммаНалогаБюджетаСубъектаРФ);
					ЗначениеСтроки080 = Макс(0, -1 * СуммаНалогаБюджетаСубъектаРФ);
					
				ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
					
					Если НЕ ЭтоОКТМООтветственногоУчастника Тогда
						СуммаНалогаФедеральногоБюджета = 0;
					КонецЕсли;
					
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000260000301", СокрЛП(Данные.П000110001003)));
					
					СуммаНалогаБюджетаСубъектаРФ
						= СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_6", "П000260010003", УсловиеСуммирования)
						- СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_6", "П000260011003", УсловиеСуммирования);
					
					ЗначениеСтроки040 = Макс(0, СуммаНалогаФедеральногоБюджета);
					ЗначениеСтроки050 = Макс(0, -1 * СуммаНалогаФедеральногоБюджета);
					ЗначениеСтроки070 = Макс(0, СуммаНалогаБюджетаСубъектаРФ);
					ЗначениеСтроки080 = Макс(0, -1 * СуммаНалогаБюджетаСубъектаРФ);
					
				Иначе
					// Некорректно заполненный отчет.
					ЗначениеСтроки040 = 0;
					ЗначениеСтроки050 = 0;
					ЗначениеСтроки070 = 0;
					ЗначениеСтроки080 = 0;
				КонецЕсли;
				
				Данные.П000110004003 = ЗначениеСтроки040;
				Данные.П000110005003 = ЗначениеСтроки050;
				Данные.П000110007003 = ЗначениеСтроки070;
				Данные.П000110008003 = ЗначениеСтроки080;
				
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000110004003.Значение = Данные.П000110004003;
				Форма.ТабличныйДокумент.Области.П000110005003.Значение = Данные.П000110005003;
				Форма.ТабличныйДокумент.Области.П000110007003.Значение = Данные.П000110007003;
				Форма.ТабличныйДокумент.Области.П000110008003.Значение = Данные.П000110008003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Раздел1_2" Тогда
			
			// Предварительное обнуление рассчитываемых величин для покрытия некорректных вариантов заполнения.
			Данные.П000120012003 = 0;
			Данные.П000120013003 = 0;
			Данные.П000120014003 = 0;
			Данные.П000120022003 = 0;
			Данные.П000120023003 = 0;
			Данные.П000120024003 = 0;
			
			ЭтоОКТМООтветственногоУчастника = Ложь;
			Если СокрЛП(Данные.П000120001003) = ОКТМО
				И ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_6",
					Новый Структура("П000260000101, П000260000201, П000260000301", ИНН, КПП, ОКТМО)) Тогда
				ЭтоОКТМООтветственногоУчастника = Истина;
			КонецЕсли;
			
			КодКвартала = СокрЛП(Данные.П000120000103);
			
			ОП_3_6 = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3
				 ИЛИ Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 6;
			ОП_9   = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 9;
			ОП_11  = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 11;
			
			СуммыАПРавны = Ложь;
			
			Если ОП_11 Тогда
				// Определение заполненности сумм авансовых платежей в случае
				// декларации за 11 месяцев, для выбора варианта алгоритма расчета.
				Если ЭтоОбособленноеПодразделение Тогда
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000250000100", "1"));
					УсловиеСуммирования.Добавить(Новый Структура("П000250000100", "3"));
					
					СуммаАПЗаполнена
						= ЗначениеЗаполнено(СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_5", "П000250012103", УсловиеСуммирования));
					
				ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000260000301", ОКТМО));
					
					СуммаАПЗаполнена
						= ЗначениеЗаполнено(СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_6", "П000260012103", УсловиеСуммирования));
					
				Иначе
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "1"));
					УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "3"));
					УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "4"));
					
					СуммаАПЗаполнена
						= ЗначениеЗаполнено(СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200032003", УсловиеСуммирования) > 0)
					  ИЛИ (СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200033003", УсловиеСуммирования) > 0)
					  ИЛИ (СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200034003", УсловиеСуммирования) > 0);
					
				КонецЕсли;
			ИначеЕсли ОП_9 Тогда
				// Определение равенства сумм авансовых платежей в случае
				// декларации за 9 месяцев, для выбора варианта алгоритма расчета.
				Если ЭтоОбособленноеПодразделение Тогда
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000250000100", "1"));
					УсловиеСуммирования.Добавить(Новый Структура("П000250000100", "3"));
					
					СуммаСтр120Лист02_5 = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_5", "П000250012003", УсловиеСуммирования);
					СуммаСтр121Лист02_5 = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_5", "П000250012103", УсловиеСуммирования);
					
					СуммыАПРавны = (СуммаСтр120Лист02_5 = СуммаСтр121Лист02_5);
				ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000260000301", ОКТМО));
					
					СуммаСтр120Лист02_6 = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_6", "П000260012003", УсловиеСуммирования);
					СуммаСтр121Лист02_6 = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_6", "П000260012103", УсловиеСуммирования);
					
					СуммыАПРавны = (СуммаСтр120Лист02_6 = СуммаСтр121Лист02_6);
				Иначе
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "1"));
					УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "3"));
					УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "4"));
					
					СуммаСтр290Лист02 = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200029003", УсловиеСуммирования);
					СуммаСтр320Лист02 = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200032003", УсловиеСуммирования);
					
					СуммыАПРавны = (СуммаСтр290Лист02 = СуммаСтр320Лист02);
				КонецЕсли;
			КонецЕсли;
			
			// Выбор варианта алгоритма расчета.
			ВариантРасчета = 0;
			Если ОП_3_6 Тогда
				ВариантРасчета = 1;
			ИначеЕсли ОП_9 Тогда
				Если СуммыАПРавны Тогда
					ВариантРасчета = 1;
				Иначе
					Если КодКвартала = "24" Тогда
						ВариантРасчета = 1;
					ИначеЕсли КодКвартала = "21" Тогда
						ВариантРасчета = 2;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ОП_11 Тогда
				Если СуммаАПЗаполнена И КодКвартала = "21" Тогда
					ВариантРасчета = 2;
				КонецЕсли;
			КонецЕсли;
			
			Если ВариантРасчета = 1 Тогда
				Если ДекларацияПоГоловнойОрганизации Тогда
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "1"));
					УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "3"));
					УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "4"));
					РазделяемаяСуммаФедеральныйБюджет = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200030003", УсловиеСуммирования);
					ЗначениеСтроки120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
					ЗначениеСтроки130 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
					ЗначениеСтроки140 = РазделяемаяСуммаФедеральныйБюджет - ЗначениеСтроки120 - ЗначениеСтроки130;
					
					Если ЕстьЗаполненныйЛист02Приложение5ПоОП Тогда
						
						УсловиеСуммирования = Новый Массив;
						
						Если ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250000100, П000250001000", "1", "1")) Тогда
							Условие = Новый Структура;
							Условие.Вставить("П000250000100", "1");
							Условие.Вставить("П000250001000", "1");
							УсловиеСуммирования.Добавить(Условие);
						Иначе
							Условие = Новый Структура;
							Условие.Вставить("П000250000100", "1");
							Условие.Вставить("П000250001000", "4");
							Условие.Вставить("П000250002001", КПП);
							УсловиеСуммирования.Добавить(Условие);
						КонецЕсли;
						
						Если ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250000100, П000250001000", "3", "1")) Тогда
							Условие = Новый Структура;
							Условие.Вставить("П000250000100", "3");
							Условие.Вставить("П000250001000", "1");
							УсловиеСуммирования.Добавить(Условие);
						Иначе
							Условие = Новый Структура;
							Условие.Вставить("П000250000100", "3");
							Условие.Вставить("П000250001000", "4");
							Условие.Вставить("П000250002001", КПП);
							УсловиеСуммирования.Добавить(Условие);
						КонецЕсли;
						
						РазделяемаяСуммаБюджетСубъектаРФ = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_5", "П000250012003", УсловиеСуммирования);
						ЗначениеСтроки220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
						ЗначениеСтроки230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
						ЗначениеСтроки240 = РазделяемаяСуммаБюджетСубъектаРФ - ЗначениеСтроки220 - ЗначениеСтроки230;
						
					Иначе
						УсловиеСуммирования = Новый Массив;
						УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "1"));
						УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "3"));
						
						РазделяемаяСуммаБюджетСубъектаРФ = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200031003", УсловиеСуммирования);
						ЗначениеСтроки220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
						ЗначениеСтроки230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
						ЗначениеСтроки240 = РазделяемаяСуммаБюджетСубъектаРФ - ЗначениеСтроки220 - ЗначениеСтроки230;
						
					КонецЕсли;
					
				ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
					
					Если ЭтоОКТМООтветственногоУчастника Тогда
						УсловиеСуммирования = Новый Массив;
						УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "1"));
						УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "3"));
						УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "4"));
						РазделяемаяСуммаФедеральныйБюджет = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200030003", УсловиеСуммирования);
						ЗначениеСтроки120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
						ЗначениеСтроки130 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
						ЗначениеСтроки140 = РазделяемаяСуммаФедеральныйБюджет - ЗначениеСтроки120 - ЗначениеСтроки130;
					Иначе
						ЗначениеСтроки120 = 0;
						ЗначениеСтроки130 = 0;
						ЗначениеСтроки140 = 0;
					КонецЕсли;
					
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000260000301", СокрЛП(Данные.П000120001003)));
					
					РазделяемаяСуммаБюджетСубъектаРФ = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_6", "П000260012003", УсловиеСуммирования);
					ЗначениеСтроки220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
					ЗначениеСтроки230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
					ЗначениеСтроки240 = РазделяемаяСуммаБюджетСубъектаРФ - ЗначениеСтроки220 - ЗначениеСтроки230;
					
				ИначеЕсли ЭтоОбособленноеПодразделение Тогда
					ЗначениеСтроки120 = 0;
					ЗначениеСтроки130 = 0;
					ЗначениеСтроки140 = 0;
					
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000250000100", "1"));
					УсловиеСуммирования.Добавить(Новый Структура("П000250000100", "3"));
					
					РазделяемаяСуммаБюджетСубъектаРФ = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_5", "П000250012003", УсловиеСуммирования);
					ЗначениеСтроки220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
					ЗначениеСтроки230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
					ЗначениеСтроки240 = РазделяемаяСуммаБюджетСубъектаРФ - ЗначениеСтроки220 - ЗначениеСтроки230;
					
				Иначе
					//Некорректно заполненный отчет.
					ЗначениеСтроки120 = 0;
					ЗначениеСтроки130 = 0;
					ЗначениеСтроки140 = 0;
					
					ЗначениеСтроки220 = 0;
					ЗначениеСтроки230 = 0;
					ЗначениеСтроки240 = 0;
					
				КонецЕсли;
				
			ИначеЕсли ВариантРасчета = 2 Тогда
				Если ДекларацияПоГоловнойОрганизации Тогда
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "1"));
					УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "3"));
					УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "4"));
					РазделяемаяСуммаФедеральныйБюджет = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200033003", УсловиеСуммирования);
					ЗначениеСтроки120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
					ЗначениеСтроки130 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
					ЗначениеСтроки140 = РазделяемаяСуммаФедеральныйБюджет - ЗначениеСтроки120 - ЗначениеСтроки130;
					
					Если ЕстьЗаполненныйЛист02Приложение5ПоОП Тогда
						
						УсловиеСуммирования = Новый Массив;
						
						Если ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250000100, П000250001000", "1", "1")) Тогда
							Условие = Новый Структура;
							Условие.Вставить("П000250000100", "1");
							Условие.Вставить("П000250001000", "1");
							УсловиеСуммирования.Добавить(Условие);
						Иначе
							Условие = Новый Структура;
							Условие.Вставить("П000250000100", "1");
							Условие.Вставить("П000250001000", "4");
							Условие.Вставить("П000250002001", КПП);
							УсловиеСуммирования.Добавить(Условие);
						КонецЕсли;
						
						Если ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250000100, П000250001000", "3", "1")) Тогда
							Условие = Новый Структура;
							Условие.Вставить("П000250000100", "3");
							Условие.Вставить("П000250001000", "1");
							УсловиеСуммирования.Добавить(Условие);
						Иначе
							Условие = Новый Структура;
							Условие.Вставить("П000250000100", "3");
							Условие.Вставить("П000250001000", "4");
							Условие.Вставить("П000250002001", КПП);
							УсловиеСуммирования.Добавить(Условие);
						КонецЕсли;
						
						РазделяемаяСуммаБюджетСубъектаРФ = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_5", "П000250012103", УсловиеСуммирования);
						ЗначениеСтроки220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
						ЗначениеСтроки230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
						ЗначениеСтроки240 = РазделяемаяСуммаБюджетСубъектаРФ - ЗначениеСтроки220 - ЗначениеСтроки230;
						
					Иначе
						УсловиеСуммирования = Новый Массив;
						УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "1"));
						УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "3"));
						
						РазделяемаяСуммаБюджетСубъектаРФ = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200034003", УсловиеСуммирования);
						ЗначениеСтроки220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
						ЗначениеСтроки230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
						ЗначениеСтроки240 = РазделяемаяСуммаБюджетСубъектаРФ - ЗначениеСтроки220 - ЗначениеСтроки230;
						
					КонецЕсли;
					
				ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
					
					Если ЭтоОКТМООтветственногоУчастника Тогда
						УсловиеСуммирования = Новый Массив;
						УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "1"));
						УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "3"));
						УсловиеСуммирования.Добавить(Новый Структура("П000200000100", "4"));
						РазделяемаяСуммаФедеральныйБюджет = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02", "П000200033003", УсловиеСуммирования);
						ЗначениеСтроки120 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
						ЗначениеСтроки130 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаФедеральныйБюджет / 3);
						ЗначениеСтроки140 = РазделяемаяСуммаФедеральныйБюджет - ЗначениеСтроки120 - ЗначениеСтроки130;
					Иначе
						ЗначениеСтроки120 = 0;
						ЗначениеСтроки130 = 0;
						ЗначениеСтроки140 = 0;
					КонецЕсли;
					
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000260000301", СокрЛП(Данные.П000120001003)));
					
					РазделяемаяСуммаБюджетСубъектаРФ = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_6", "П000260012103", УсловиеСуммирования);
					ЗначениеСтроки220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
					ЗначениеСтроки230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
					ЗначениеСтроки240 = РазделяемаяСуммаБюджетСубъектаРФ - ЗначениеСтроки220 - ЗначениеСтроки230;
					
				ИначеЕсли ЭтоОбособленноеПодразделение Тогда
					ЗначениеСтроки120 = 0;
					ЗначениеСтроки130 = 0;
					ЗначениеСтроки140 = 0;
					
					УсловиеСуммирования = Новый Массив;
					УсловиеСуммирования.Добавить(Новый Структура("П000250000100", "1"));
					УсловиеСуммирования.Добавить(Новый Структура("П000250000100", "3"));
					
					РазделяемаяСуммаБюджетСубъектаРФ = СуммаСтрокРазделаСОкруглениемПоУсловию(Форма, "Лист02_5", "П000250012103", УсловиеСуммирования);
					ЗначениеСтроки220 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
					ЗначениеСтроки230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РазделяемаяСуммаБюджетСубъектаРФ / 3);
					ЗначениеСтроки240 = РазделяемаяСуммаБюджетСубъектаРФ - ЗначениеСтроки220 - ЗначениеСтроки230;
					
				Иначе
					//Некорректно заполненный отчет.
					ЗначениеСтроки120 = 0;
					ЗначениеСтроки130 = 0;
					ЗначениеСтроки140 = 0;
					
					ЗначениеСтроки220 = 0;
					ЗначениеСтроки230 = 0;
					ЗначениеСтроки240 = 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Данные.П000120012003 = ЗначениеСтроки120;
			Данные.П000120013003 = ЗначениеСтроки130;
			Данные.П000120014003 = ЗначениеСтроки140;
			Данные.П000120022003 = ЗначениеСтроки220;
			Данные.П000120023003 = ЗначениеСтроки230;
			Данные.П000120024003 = ЗначениеСтроки240;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000120012003.Значение = Данные.П000120012003;
				Форма.ТабличныйДокумент.Области.П000120013003.Значение = Данные.П000120013003;
				Форма.ТабличныйДокумент.Области.П000120014003.Значение = Данные.П000120014003;
				Форма.ТабличныйДокумент.Области.П000120022003.Значение = Данные.П000120022003;
				Форма.ТабличныйДокумент.Области.П000120023003.Значение = Данные.П000120023003;
				Форма.ТабличныйДокумент.Области.П000120024003.Значение = Данные.П000120024003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02" Тогда
			
			ПрПлЛист02 = Данные.П000200000100;
			
			// Флаги существования заполненных разделов.
			Есть_Прил5 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250000100"));
			
			Есть_Лист02_ПрПл1 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02", Новый Структура("П000200000100", "1"));
			Есть_Лист02_ПрПл3 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02", Новый Структура("П000200000100", "3"));
			
			услПрПлЛист02_1 = Новый Структура("П000210000100", ПрПлЛист02);
			услПрПлЛист02_2 = Новый Структура("П000220000100", ПрПлЛист02);
			услПрПлЛист02_3 = Новый Структура("П000230000100", ПрПлЛист02);
			услПрПлЛист02_4 = Новый Структура("П000240000100", ПрПлЛист02);
			услПрПлЛист02_5 = Новый Структура("П000250000100", ПрПлЛист02);
			
			// Строки 010 - 050.
			Если флКвартальноеЗаполнение ИЛИ АвторасчетПослеАвтозаполнения Тогда
				Если ПрПлЛист02 <> "" Тогда
					Данные.П000200001003
						= СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_1", "П000210004003", Истина, услПрПлЛист02_1);
					Данные.П000200002003
						= СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_1", "П000210010003", Истина, услПрПлЛист02_1);
					Данные.П000200003003
						= СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_2", "П000220013003", Истина, услПрПлЛист02_2);
					Данные.П000200004003
						= СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_2", "П000220020003", Истина, услПрПлЛист02_2)
						+ СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_2", "П000220030003", Истина, услПрПлЛист02_2);
					Данные.П000200005003
						= СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_3", "П000230036003", Истина, услПрПлЛист02_3);
				Иначе
					Данные.П000200001003 = 0;
					Данные.П000200002003 = 0;
					Данные.П000200003003 = 0;
					Данные.П000200004003 = 0;
					Данные.П000200005003 = 0;
				КонецЕсли;
			КонецЕсли;
			
			// Строка 060.
			Данные.П000200006003
				= Данные.П000200001003
				+ Данные.П000200002003
				- Данные.П000200003003
				- Данные.П000200004003
				+ Данные.П000200005003;
				
			// Строка 100.
			Если ПрПлЛист02 = "1"
				ИЛИ (ПрПлЛист02 = "3" И НЕ Есть_Лист02_ПрПл1)
				ИЛИ (ПрПлЛист02 = "2" И НЕ Есть_Лист02_ПрПл1 И НЕ Есть_Лист02_ПрПл3) Тогда
				
				Данные.П000200010003
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200006003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200007003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200008003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200009003)
					- ?(ПрПлЛист02 <> "", СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_2", "П000220040003", Истина, услПрПлЛист02_2), 0)
					+ СуммаПоказателяПоВсемСтраницам(Форма, "Лист05", "П000500010003", Истина)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Форма.СтруктураДанныхЛист06.П000600053003);
				
			ИначеЕсли ПрПлЛист02 = "4"
				ИЛИ (ПрПлЛист02 = "3" И Есть_Лист02_ПрПл1)
				ИЛИ (ПрПлЛист02 = "2" И (Есть_Лист02_ПрПл1 ИЛИ Есть_Лист02_ПрПл3)) Тогда
				
				Данные.П000200010003
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200006003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200007003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200008003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200009003)
					- ?(ПрПлЛист02 <> "", СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_2", "П000220040003", Истина, услПрПлЛист02_2), 0)
				
			Иначе
				
				Данные.П000200010003 = 0;
				
			КонецЕсли;
			
			// Строка 110.
			Если НомерМесяца = 3 ИЛИ НомерМесяца = 12 Тогда
				Если ПрПлЛист02 <> "" Тогда
					Данные.П000200011003
						= СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_4", "П000240015003", Истина, услПрПлЛист02_4);
				Иначе
					Данные.П000200011003 = 0;
				КонецЕсли;
			КонецЕсли;
			
			// Строка 120.
			Данные.П000200012003 = Макс(
				  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200010003)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200011003), 0);
			
			// Строка 140.
			Если ПрПлЛист02 = "2" Тогда
				Данные.П000200014003 = 0;
			Иначе
				Данные.П000200014003
					= Данные.П000200015003 + Макс(Данные.П000200016003, Данные.П000200017003);
			КонецЕсли;
			
			// Строка 190.
			Данные.П000200019003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, Данные.П000200012003) * Данные.П000200015003 / 100), 0);
			
			// Строка 200.
			Если ПоКонсолидированнойГруппе Тогда
				Данные.П000200020003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П000260007003", Истина);
			ИначеЕсли ПрПлЛист02 <> "" Тогда
				Если ПрПлЛист02 = "4" Тогда
					Данные.П000200020003 = 0;
				ИначеЕсли Есть_Прил5 Тогда
					Данные.П000200020003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П000250007003", Истина, услПрПлЛист02_5);
				Иначе
					Слагаемое1 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, (Данные.П000200012003 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200013003))
					* Данные.П000200016003/100);
					Слагаемое2 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200013003)* Данные.П000200017003/100);
					Данные.П000200020003 = Макс(Слагаемое1 + Слагаемое2, 0);
				КонецЕсли;
			Иначе
				Данные.П000200020003 = 0;
			КонецЕсли;
			
			// Строка 180.
			Данные.П000200018003 = Данные.П000200019003 + Данные.П000200020003;
			
			// Строка 210.
			Данные.П000200021003
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200022003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200023003);
			
			// Строка 240.
			Данные.П000200024003
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200025003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200026003);
			
			// Строка 270.
			Данные.П000200027003 = Макс(
				  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200019003)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200022003)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200025003), 0);
			
			// Строка 280.
			Данные.П000200028003 = Макс(
				  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200022003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200025003)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200019003), 0);
			
			// Строки 271 и 281.
			Если ПоКонсолидированнойГруппе Тогда
				Данные.П000200027103 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П000260010003", Истина);
				Данные.П000200028103 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П000260011003", Истина);
			Иначе
				Данные.П000200027103 = Макс(
					  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200020003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200023003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200026003), 0);
				Данные.П000200028103 = Макс(
					  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200023003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200026003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000200020003), 0);
			КонецЕсли;
			
			// Строки 310 и 340.
			Если ПоКонсолидированнойГруппе Тогда
				Если НомерМесяца = 9 Тогда
					Данные.П000200031003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П000260012003", Истина);
					Данные.П000200034003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П000260012103", Истина);
				ИначеЕсли НомерМесяца = 11 Тогда
					Данные.П000200034003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6", "П000260012103", Истина);
				КонецЕсли;
			ИначеЕсли ПрПлЛист02 = "4" Тогда
				// Не рассчитываются и заблокированы для ввода.
			Иначе
				АвторасчетДляГруппыОбособленныхПодразделений = (ЗначениеЗаполнено(ПоМесту) И Найти("220,223,218", ПоМесту) = 0)
				И (ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", Новый Структура("П000250000100, П000250001000", ПрПлЛист02, "4")));
				
				Рассчитывать310 = (НомерМесяца = 9 И Есть_Прил5 И НЕ ЭтоОбособленноеПодразделение)
				ИЛИ (АвторасчетДляГруппыОбособленныхПодразделений);
				
				Если Рассчитывать310 Тогда
					Данные.П000200031003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П000250012003", Истина, услПрПлЛист02_5);
				КонецЕсли;
				
				// При заполнении декларации для 9 и 11 месяца по головной организации при наличии заполненных приложений 5 к листу 02
				// строка 340 рассчитывается на основании сумм строк 121 приложения 5 к листу 02 по признаку плательщика.
				Рассчитывать340 = ((НомерМесяца = 9 ИЛИ НомерМесяца = 11) И Есть_Прил5 И НЕ флЕстьОбособ);
				Если Рассчитывать340 Тогда
					Данные.П000200034003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П000250012103", Истина, услПрПлЛист02_5);
				КонецЕсли;
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				
				Форма.ТабличныйДокумент.Области.П000200001003.Значение = Данные.П000200001003;
				Форма.ТабличныйДокумент.Области.П000200002003.Значение = Данные.П000200002003;
				Форма.ТабличныйДокумент.Области.П000200003003.Значение = Данные.П000200003003;
				Форма.ТабличныйДокумент.Области.П000200004003.Значение = Данные.П000200004003;
				Форма.ТабличныйДокумент.Области.П000200005003.Значение = Данные.П000200005003;
				Форма.ТабличныйДокумент.Области.П000200006003.Значение = Данные.П000200006003;
				
				Форма.ТабличныйДокумент.Области.П000200010003.Значение = Данные.П000200010003;
				Форма.ТабличныйДокумент.Области.П000200011003.Значение = Данные.П000200011003;
				Форма.ТабличныйДокумент.Области.П000200012003.Значение = Данные.П000200012003;
				Форма.ТабличныйДокумент.Области.П000200014003.Значение = Данные.П000200014003;
				
				Форма.ТабличныйДокумент.Области.П000200018003.Значение = Данные.П000200018003;
				Форма.ТабличныйДокумент.Области.П000200019003.Значение = Данные.П000200019003;
				Форма.ТабличныйДокумент.Области.П000200020003.Значение = Данные.П000200020003;
				Форма.ТабличныйДокумент.Области.П000200021003.Значение = Данные.П000200021003;
				Форма.ТабличныйДокумент.Области.П000200023003.Значение = Данные.П000200023003;
				Форма.ТабличныйДокумент.Области.П000200024003.Значение = Данные.П000200024003;
				
				Форма.ТабличныйДокумент.Области.П000200027003.Значение = Данные.П000200027003;
				Форма.ТабличныйДокумент.Области.П000200027103.Значение = Данные.П000200027103;
				Форма.ТабличныйДокумент.Области.П000200028003.Значение = Данные.П000200028003;
				Форма.ТабличныйДокумент.Области.П000200028103.Значение = Данные.П000200028103;
				
				Если ПрПлЛист02 = "4" Тогда
					Форма.ТабличныйДокумент.Области.П000200031003.Значение = 0;
					Форма.ТабличныйДокумент.Области.П000200034003.Значение = 0;
				Иначе
					Форма.ТабличныйДокумент.Области.П000200031003.Значение = Данные.П000200031003;
					Форма.ТабличныйДокумент.Области.П000200034003.Значение = Данные.П000200034003;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_1" Тогда
			
			ПрПлЛист02_1 = Данные.П000210000100;
			услПрПлЛист02_3 = Новый Структура("П000230000100", ПрПлЛист02_1);
			
			// Строка 010.
			Данные.П000210001003
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000210001103)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000210001203)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000210001303)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000210001403);
			
			// Строка 030.
			Если ПрПлЛист02_1 <> "" Тогда
				Данные.П000210003003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_3", "П000230034003", Истина, услПрПлЛист02_3);
			Иначе
				Данные.П000210003003 = 0;
			КонецЕсли;
			
			// Строка 040.
			Данные.П000210004003
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000210001003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000210002003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000210002303)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000210002703)
				+ Данные.П000210003003;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000210001003.Значение = Данные.П000210001003;
				Форма.ТабличныйДокумент.Области.П000210003003.Значение = Данные.П000210003003;
				Форма.ТабличныйДокумент.Области.П000210004003.Значение = Данные.П000210004003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_2" Тогда
			
			ПрПлЛист02_2 = Данные.П000220000100;
			услПрПлЛист02_3 = Новый Структура("П000230000100", ПрПлЛист02_2);
			
			// Строка 080.
			Если ПрПлЛист02_2 <> "" Тогда
				Данные.П000220008003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_3", "П000230035003", Истина, услПрПлЛист02_3);
			Иначе
				Данные.П000220008003 = 0;
			КонецЕсли;
			
			// Строка 130.
			Данные.П000220013003
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220001003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220002003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220004003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220005903)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220006003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220006103)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220007003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220007203)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220008003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220009003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220010003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220011003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000220012003);
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000220008003.Значение = Данные.П000220008003;
				Форма.ТабличныйДокумент.Области.П000220013003.Значение = Данные.П000220013003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_3" Тогда
			
			// Строка 150.
			Если Данные.П000230012003 > Данные.П000230010003 Тогда
				Данные.П000230015003 = Макс(
					  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230012003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230010003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230014003), 0);
			Иначе
				Данные.П000230015003 = 0;
			КонецЕсли;
			
			// Строка 160.
			Если Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета < '2015-01-01' Тогда
				Данные.П000230016003 = Макс(
					  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230013003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230011003), 0);
			Иначе
				Данные.П000230016003 = 0;
			КонецЕсли;
			
			// Строка 200.
			Данные.П000230020003 = Макс(
				  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230019003)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230018003), 0);
			
			// Строка 230.
			Данные.П000230023003 = Макс(
				  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230022003)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230021003), 0);
			
			// Строка 340.
			Данные.П000230034003
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230003003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230010003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230011003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230018003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230021003)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230021103)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230024003);
			
			// Строка 350.
			Данные.П000230035003
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230004003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230012003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230013003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230019003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230022003)
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230022103)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230025003);
			
			// Строка 360.
			Данные.П000230036003
				= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230006003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230015003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230016003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230020103)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230023003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000230026003);
				
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000230015003.Значение = Данные.П000230015003;
				Форма.ТабличныйДокумент.Области.П000230016003.Значение = Данные.П000230016003;
				Форма.ТабличныйДокумент.Области.П000230020003.Значение = Данные.П000230020003;
				Форма.ТабличныйДокумент.Области.П000230023003.Значение = Данные.П000230023003;
				Форма.ТабличныйДокумент.Области.П000230034003.Значение = Данные.П000230034003;
				Форма.ТабличныйДокумент.Области.П000230035003.Значение = Данные.П000230035003;
				Форма.ТабличныйДокумент.Области.П000230036003.Значение = Данные.П000230036003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_4" Тогда
			
			ПрПлЛист02_4 = Данные.П000240000100;
			услПрПлЛист02 = Новый Структура("П000200000100", ПрПлЛист02_4);
			
			Есть_Лист02_4_ПрПл1 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_4", Новый Структура("П000240000100", "1"));
			Есть_Лист02_4_ПрПл3 = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_4", Новый Структура("П000240000100", "3"));
			
			// Строка 010.
			Данные.П000240001003 = Макс(
				  РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240004003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240005003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240006003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240007003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240008003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240009003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240010003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240011003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240012003)
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240013003), 0);
			
			// Строка 140.
			Если ЗначениеЗаполнено(ПрПлЛист02_4) Тогда
				Если Найти("134", ПрПлЛист02_4) > 0 Тогда
					Данные.П000240014003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П000200010003", Истина, услПрПлЛист02);
				ИначеЕсли ПрПлЛист02_4 = "5" Тогда
					Данные.П000240014003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист05", "П000500006003", Истина);
				КонецЕсли;
			КонецЕсли;
			
			// Строка 160.
			Если флНалоговыйПериод И ЗначениеЗаполнено(ПрПлЛист02_4) Тогда
				Если (ПрПлЛист02_4 = "1")
					ИЛИ (ПрПлЛист02_4 = "3" И НЕ Есть_Лист02_4_ПрПл1)
					ИЛИ (ПрПлЛист02_4 = "4" И НЕ Есть_Лист02_4_ПрПл1 И НЕ Есть_Лист02_4_ПрПл3) Тогда
					Если Данные.П000240014003 < 0 Тогда
						Сумма060Лист02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П000200006003", Истина, услПрПлЛист02);
						Сумма100Лист05 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист05", "П000500010003", Истина);
						Сумма530Лист06 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
							Форма, Форма.СтруктураДанныхЛист06.П000600053003);
						Данные.П000240016003 = Макс(Данные.П000240001003
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240013603)
							- (Сумма060Лист02 + Макс(Сумма100Лист05, 0) + Макс(Сумма530Лист06, 0)), 0);
					ИначеЕсли Данные.П000240014003 > 0 Тогда
						Данные.П000240016003 = Макс(Данные.П000240001003
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240013603)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240015003), 0);
					Иначе
						Данные.П000240016003 = Макс(Данные.П000240001003
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240013603), 0);
					КонецЕсли;
				ИначеЕсли (ПрПлЛист02_4 = "3" И Есть_Лист02_4_ПрПл1)
					ИЛИ (ПрПлЛист02_4 = "4" И (Есть_Лист02_4_ПрПл1 ИЛИ Есть_Лист02_4_ПрПл3)) Тогда
					Сумма060Лист02 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П000200006003", Истина, услПрПлЛист02);
					Если Сумма060Лист02 < 0 Тогда
						Данные.П000240016003 = Макс(Данные.П000240001003
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240013603)
							- Сумма060Лист02, 0);
					ИначеЕсли Данные.П000240014003 > 0 Тогда
						Данные.П000240016003 = Макс(Данные.П000240001003
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240013603)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240015003), 0);
					Иначе
						Данные.П000240016003 = Макс(Данные.П000240001003
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240013603), 0);
					КонецЕсли;
				ИначеЕсли ПрПлЛист02_4 = "5" Тогда
					Если Данные.П000240014003 > 0 Тогда
						Данные.П000240016003 = Макс(Данные.П000240001003
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240013603)
							- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240015003), 0);
					ИначеЕсли Данные.П000240014003 < 0 Тогда
						Сумма060Лист05 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист05", "П000500006003", Истина);
						Данные.П000240016003 = Макс(Данные.П000240001003
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240013603)
							+ Сумма060Лист05, 0);
					Иначе
						Данные.П000240016003 = Макс(Данные.П000240001003
							+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240013603), 0);
					КонецЕсли;
				Иначе
					Данные.П000240016003 = 0;
				КонецЕсли;
			КонецЕсли;
			
			// Строка 161.
			Если флНалоговыйПериод Тогда
				Данные.П000240016103
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240013603)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000240015103);
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000240001003.Значение = Данные.П000240001003;
				Если ЗначениеЗаполнено(ПрПлЛист02_4) И Найти("1345", ПрПлЛист02_4) > 0 Тогда
					Форма.ТабличныйДокумент.Области.П000240014003.Значение = Данные.П000240014003;
				КонецЕсли;
				Форма.ТабличныйДокумент.Области.П000240016003.Значение = Данные.П000240016003;
				Форма.ТабличныйДокумент.Области.П000240016103.Значение = Данные.П000240016103;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_5" Тогда
			
			ПрПлЛист02_5 = Данные.П000250000100;
			
			РасчетСоставленЛист02_5 = Данные.П000250001000;
			
			услПрПлЛист02 = Новый Структура("П000200000100", ПрПлЛист02_5);
			услПрПлЛист02Прил5_И_Расчет_3 = Новый Структура ("П000250000100,П000250001000",ПрПлЛист02_5,"3");
			
			ЕстьПрил5_Расчет3_И_ПрПл = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_5", услПрПлЛист02Прил5_И_Расчет_3);
			
			Если НЕ флЕстьОбособ Тогда
				// Строка 030.
				Если ПрПлЛист02_5 <> "" Тогда
					Данные.П000250003003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П000200012003", Истина, услПрПлЛист02);
				Иначе
					Данные.П000250003003 = 0;
				КонецЕсли;
			КонецЕсли; 
			
			// Строка 031.
			Если ЗначениеЗаполнено(ПрПлЛист02_5) И ЕстьПрил5_Расчет3_И_ПрПл Тогда
				Данные.П000250003103 = Данные.П000250003003
				- СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_5", "П000250005003", Истина, услПрПлЛист02Прил5_И_Расчет_3);
			КонецЕсли;
			
			// Строка 050.
			Если РасчетСоставленЛист02_5 <> "3" Тогда
				Если ЕстьПрил5_Расчет3_И_ПрПл Тогда
					Данные.П000250005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000250003103) * Данные.П000250004003 / 100);
				Иначе
					ОкрСтр30Лист02_5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000250003003);
					ОкрСтр31Лист02_5 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000250003103);
					Множитель = ?(ОкрСтр31Лист02_5 <> 0, ОкрСтр31Лист02_5, ОкрСтр30Лист02_5);
					Данные.П000250005003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Множитель * Данные.П000250004003 / 100);
				КонецЕсли;
			КонецЕсли;
			
			// Строка 070.
			Данные.П000250007003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
				РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000250005003) * Данные.П000250006003 / 100), 0);
			
			// Строка 100.
			Данные.П000250010003 = Макс(Данные.П000250007003
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000250008003)
								 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000250009003), 0);
			
			// Строка 110.
			Данные.П000250011003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000250008003)
								 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000250009003)
								 - Данные.П000250007003, 0);
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000250003003.Значение = Данные.П000250003003;
				Если ЗначениеЗаполнено(ПрПлЛист02_5) И ЕстьПрил5_Расчет3_И_ПрПл Тогда
					Форма.ТабличныйДокумент.Области.П000250003103.Значение = Данные.П000250003103;
				КонецЕсли;
				Форма.ТабличныйДокумент.Области.П000250005003.Значение = Данные.П000250005003;
				Форма.ТабличныйДокумент.Области.П000250007003.Значение = Данные.П000250007003;
				Форма.ТабличныйДокумент.Области.П000250010003.Значение = Данные.П000250010003;
				Форма.ТабличныйДокумент.Области.П000250011003.Значение = Данные.П000250011003;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Лист02_6" Тогда
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				СубъектРФ = Форма.ТабличныйДокумент.Области.П000260000601.Значение;
			Иначе
				СубъектРФ = Данные.П000260000601;
			КонецЕсли;
			
			РассчитыватьПоказателиПриложения = (ПоМесту = "218" И НЕ ПустаяСтрока(СубъектРФ));
			
			// Строка 030.
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П000260003003 = СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П000200012003", Истина);
			Иначе
				Данные.П000260003003 = 0;
			КонецЕсли;
			
			// Строка 031.
			УсловиеСуммирования031 = Новый Структура;
			УсловиеСуммирования031.Вставить("П000270000501", "3"); // "Расчет составлен"
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П000260003103 = Данные.П000260003003
				                     - СуммаПоказателяЛиста02_6аПоСубъектуРФ(Форма, "П000270005003", Истина, УсловиеСуммирования031);
			Иначе
				Данные.П000260003103 = 0;
			КонецЕсли;
			
			УсловиеОКТМО = Новый Структура("П000270000301", СубъектРФ);
			
			// Строка 040 и 050.
			Если РассчитыватьПоказателиПриложения Тогда
				ЗначениеДляСтроки040 = СуммаПоказателяЛиста02_6аПоСубъектуРФ(Форма, "П000270004003", Ложь, УсловиеОКТМО);
				Данные.П000260004003 = Макс(0, ЗначениеДляСтроки040);
				
				ЗначениеДляСтроки050 = СуммаПоказателяЛиста02_6аПоСубъектуРФ(Форма, "П000270005003", Истина, УсловиеОКТМО);
				Данные.П000260005003 = ЗначениеДляСтроки050;

			Иначе
				Данные.П000260004003 = 0;
				Данные.П000260005003 = 0;
			КонецЕсли;
			
			// Строка 070.
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П000260007003 = СуммаПоказателяЛиста02_6аПоСубъектуРФ(Форма, "П000270007003", Истина, УсловиеОКТМО);
			Иначе
				Данные.П000260007003 = 0;
			КонецЕсли;
			
			// Строка 100.
			Строка070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000260007003);
			Строка080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000260008003);
			Строка090 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000260009003);
			
			СуммаНалога = Строка070 - Строка080 - Строка090;
			
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П000260010003 = Макс(0, СуммаНалога);
			Иначе
				Данные.П000260010003 = 0;
			КонецЕсли;
			
			// Строка 110.
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П000260011003 = -1 * Мин(0, СуммаНалога);
			Иначе
				Данные.П000260011003 = 0;
			КонецЕсли;
			
			// Количество листов Приложения 6а к Листу 02 с указанным кодом субъекта РФ.
			Данные.П000260000501 = ?(РассчитыватьПоказателиПриложения, КоличествоЛистов02_6а(Форма, СубъектРФ), 0);
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000260003003.Значение = Данные.П000260003003;
				Форма.ТабличныйДокумент.Области.П000260003103.Значение = Данные.П000260003103;
				Форма.ТабличныйДокумент.Области.П000260004003.Значение = Данные.П000260004003;
				Форма.ТабличныйДокумент.Области.П000260005003.Значение = Данные.П000260005003;
				Форма.ТабличныйДокумент.Области.П000260007003.Значение = Данные.П000260007003;
				Форма.ТабличныйДокумент.Области.П000260010003.Значение = Данные.П000260010003;
				Форма.ТабличныйДокумент.Области.П000260011003.Значение = Данные.П000260011003;
				Форма.ТабличныйДокумент.Области.П000260000501.Значение = Данные.П000260000501;
			КонецЕсли;
	
		ИначеЕсли ИмяЛиста = "Лист02_6а" Тогда
			
			РассчитыватьПоказателиПриложения = (ПоМесту = "218");
			УсловиеРасчетСоставлен3 = Новый Структура("П000270000501", "3");
			
			// Строка 030.
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П000270003003 = Макс(СуммаПоказателяПоВсемСтраницам(Форма, "Лист02", "П000200012003", Истина), 0);
			Иначе
				Данные.П000270003003 = 0;
			КонецЕсли;
			
			// Строка 031.
			ЕстьЗакрытыеОП = ЕстьРазделЗаполненныйПоУсловиям(Форма, "Лист02_6а", УсловиеРасчетСоставлен3);
			РасчетСоставлен = Данные.П000270000501;
						
			Если РассчитыватьПоказателиПриложения Тогда
				Если (РасчетСоставлен = "3") ИЛИ (ЕстьЗакрытыеОП) Тогда
					Данные.П000270003103 = Данные.П000270003003
						- СуммаПоказателяПоВсемСтраницам(Форма, "Лист02_6а", "П000270005003", Истина, УсловиеРасчетСоставлен3);
				КонецЕсли;
			Иначе
				Данные.П000270003103 = 0;
			КонецЕсли;
			
			// Строка 050.
			РасчетСоставлен = Данные.П000270000501;
			Если РасчетСоставлен <> "3" Тогда
				
				Строка030 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000270003003);
				Строка031 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000270003103);
				Строка040 = Данные.П000270004003;
				
				НалоговаяБаза = ?(ЗначениеЗаполнено(Строка031), Строка031, Строка030);
				
				Данные.П000270005003 = НалоговаяБаза * Строка040 / 100;
				
			КонецЕсли;
			
			// Строка 070.
			Строка050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000270005003);
			Строка051 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000270005103);
			Строка060 = Данные.П000270006003;
			Если РассчитыватьПоказателиПриложения Тогда
				Данные.П000270007003 = Макс(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					(Строка050 - Строка051) * 18 / 100 + Строка051 * Строка060 / 100), 0);
			Иначе
				Данные.П000270007003 = 0;
			КонецЕсли;
			
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				
				Форма.ТабличныйДокумент.Области.П000270003003.Значение = Данные.П000270003003;
				Форма.ТабличныйДокумент.Области.П000270003103.Значение = Данные.П000270003103;
				Форма.ТабличныйДокумент.Области.П000270005003.Значение = Данные.П000270005003;
				Форма.ТабличныйДокумент.Области.П000270007003.Значение = Данные.П000270007003;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; // конец перебора страниц многостраничного раздела
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СуммаПоказателяЛиста02_6аПоСубъектуРФ(Форма, Показатель, Округлять, Условия)
	
	ИмяСтраницы = "Лист02_6а";
	
	Результат = 0;
	
	ТаблицаРаздела = Неопределено;
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
	
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			ДанныеСтраницы = ТаблицаРаздела[Инд].Данные[0].Значение;
			
			УсловиеВыполняется = Истина;
			Для Каждого ЭлементУсловия Из Условия Цикл
				ПроверяемыйПоказатель = ЭлементУсловия.Ключ;
				ПроверяемоеЗначение   = ЭлементУсловия.Значение;
				
				ЗначениеПоказателя = ДанныеСтраницы[ПроверяемыйПоказатель];
				Если ПроверяемыйПоказатель = "П000270000301" Тогда
					ЗначениеПоказателя = КодСубъектаРФПоОКТМО(Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если ПроверяемоеЗначение <> Неопределено Тогда
					Если НЕ ПроверяемоеЗначение = ЗначениеПоказателя Тогда
						УсловиеВыполняется = Ложь;
						Прервать;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
						УсловиеВыполняется = Ложь;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если УсловиеВыполняется Тогда
				ЗначениеПоказателя = ДанныеСтраницы[Показатель];
				ЗначениеПоказателя = ?(Округлять, РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ЗначениеПоказателя), ЗначениеПоказателя);
				Результат = Результат + ЗначениеПоказателя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоЛистов02_6а(Форма, КодСубъектаРФ)
	
	Результат = 0;
	
	ТаблицаРаздела = Неопределено;
	Форма.мСтруктураМногостраничныхРазделов.Свойство("Лист02_6а", ТаблицаРаздела);
	
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			
			ДанныеСтраницы = ТаблицаРаздела[Инд].Данные[0].Значение;
			ОКАТО = ДанныеСтраницы["П000270000301"];
			
			Если КодСубъектаРФ = КодСубъектаРФПоОКТМО(Форма, ОКАТО) Тогда
				Результат = Результат + 1;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаПоказателяПоВсемСтраницам(Форма, ИмяСтраницы, Показатель, Округлять, Условия = Неопределено)
	
	Результат = 0;
	
	ТаблицаРаздела = Неопределено;
	
	Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаРаздела);
	Если ТаблицаРаздела <> Неопределено Тогда
		ТаблицаРаздела = Форма[ТаблицаРаздела];
		Для Инд = 0 По ТаблицаРаздела.Количество() - 1 Цикл
			ДанныеТаблПоле = ТаблицаРаздела[Инд].Данные[0].Значение;
			//проверка экземпляра	
			Если (Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(ДанныеТаблПоле, Условия) Тогда
				//нет условий или они все выполняются
				Результат = Результат + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ДанныеТаблПоле[Показатель]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02_5" Тогда
		Если ТабличныйДокумент.Области.П000250003103.Защита Тогда
			ТабличныйДокумент.Области.П000250003103.Значение = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтраницы(Команда)
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено
	   И ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Если ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийРаздел" + ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			Сообщение.Сообщить();
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = ЭтаФорма[ИмяТекТабличногоПоля];
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление               = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницы)
	
	УстановитьВариантыЗаполненияСпецификаРаздела(ЭтаФорма, ИмяТекущейСтраницы);
	
	Если ИмяТекущейСтраницы = "Лист02" Тогда
		ПолучитьСтавкиНалога(ЭтаФорма, ИмяТекущейСтраницы);
	КонецЕсли;
	
	Если ИмяТекущейСтраницы = "Лист02_4" Тогда
		ТабличныйДокумент.Области.П000240014003.Очистить();
		СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяТекущейСтраницы, "П000240014003", 0);
	КонецЕсли;
	
	Если ИмяТекущейСтраницы = "Лист02_5" Тогда
		ВГруппуОПВходитОрганизация = Ложь;
	КонецЕсли;
	
	Если ИмяТекущейСтраницы = "Лист02_6а" Тогда
		ВГруппуОПВходитОрганизация = Ложь;
	КонецЕсли;
	
	Если ИмяТекущейСтраницы = "Лист02_6" Тогда
		Если ЗначениеЗаполнено(ТабличныйДокумент.Области.П000260000301.Значение) Тогда
			ТабличныйДокумент.Области.П000260000601.Значение
				= КодСубъектаРФПоОКТМО(ЭтаФорма, ТабличныйДокумент.Области.П000260000301.Значение);
		Иначе
			ТабличныйДокумент.Области.П000260000601.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	РасчетНаСервере();
	
	Если ИмяТекущейСтраницы = "Лист03А" Тогда
		ТабличныйДокумент.Области.П000310009003.Значение = 0;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	Если ИмяТекущейСтраницыПанели = "Лист02_5" Тогда
		//изменение вариантов заполнения ячеек при изменении определенных показателей
		Если ТабличныйДокумент.Области.П000250001000.Значение="3" Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000250005003");
		Иначе
			Если НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П000250005003");
			КонецЕсли;
		КонецЕсли;
		
		Если ТабличныйДокумент.Области.П000250001000.Значение = "4" Тогда
			
			СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Истина;
			
			// прочитаем признак
			АктивныеСтраницы = ТаблицаСтраницыЛист02_5.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктивныеСтраницы.Количество() > 0 Тогда
				
				ДанныеАктивнойСтраницы = АктивныеСтраницы[0].Данные[0].Значение;
				
				Если ТипЗнч(ДанныеАктивнойСтраницы) <> Тип("Структура") Тогда
					РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_5", Ложь);
				КонецЕсли;
				
				Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
				Иначе
					ВГруппуОПВходитОрганизация = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
			ВГруппуОПВходитОрганизация = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист02_6а" Тогда
		
		//изменение вариантов заполнения ячеек при изменении определенных показателей
		Если ТабличныйДокумент.Области.П000270000501.Значение="3" Тогда
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000270005003");
		Иначе
			Если НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П000270005003");
			КонецЕсли;
		КонецЕсли;

		Если ТабличныйДокумент.Области.П000270000501.Значение = "4" Тогда
			
			СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Истина;
			
			// прочитаем признак
			АктивныеСтраницы = ТаблицаСтраницыЛист02_6а.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктивныеСтраницы.Количество() > 0 Тогда
				
				ДанныеАктивнойСтраницы = АктивныеСтраницы[0].Данные[0].Значение;
				
				Если ТипЗнч(ДанныеАктивнойСтраницы) <> Тип("Структура") Тогда
					РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, "Лист02_6а", Ложь);
				КонецЕсли;
				
				Если ДанныеАктивнойСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					ВГруппуОПВходитОрганизация = ДанныеАктивнойСтраницы.ВГруппуОПВходитОрганизация;
				Иначе
					ВГруппуОПВходитОрганизация = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
			ВГруппуОПВходитОрганизация = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Лист03А" Тогда
		
		КатегорияНалАгента = ТабличныйДокумент.Области.П000310000100.Значение;
		Если КатегорияНалАгента = "1" Тогда
			Если НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 4, "П000310009003");
			Иначе
				ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000310009003");
			КонецЕсли;
		Иначе
			ИзменитьВариантЗаполненияЯчейки(ЭтаФорма, 0, "П000310009003");
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьВариантыЗаполненияПоказателей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВариантыЗаполненияСпецификаРаздела(Форма, ИмяТекущейСтраницы)
	
	ИзменитьВариантыЗаполненияПоказателей(Форма, ИмяТекущейСтраницы)

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	НаимТекРазделаОтчета = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если НаимТекРазделаОтчета = "Приложение2" Тогда
		
		Если ТабличныйДокумент.ТекущаяОбласть.Имя = "ДобавитьСтрокуЗначок1"
		 ИЛИ ТабличныйДокумент.ТекущаяОбласть.Имя = "ДобавитьСтроку1"
		 ИЛИ Лев(ТабличныйДокумент.ТекущаяОбласть.Имя, 10) = "П000020004" Тогда
			
			НаимТекРазделаОтчета = "Приложение2_1";
			
		ИначеЕсли ТабличныйДокумент.ТекущаяОбласть.Имя = "ДобавитьСтрокуЗначок2"
			  ИЛИ ТабличныйДокумент.ТекущаяОбласть.Имя = "ДобавитьСтроку2"
			  ИЛИ Лев(ТабличныйДокумент.ТекущаяОбласть.Имя, 10) = "П000020005" Тогда
			
			НаимТекРазделаОтчета = "Приложение2_2";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьСтрокуНаСервере(НаимТекРазделаОтчета);	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
			
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	// определяем последнюю строку многострочной группы
	КолСтрок     = СтруктураГруппы.Количество();
	КолСтрокСтр  = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");

	Если ИмяГруппы = "П0002800010"
	 ИЛИ ИмяГруппы = "П0003300005"
	 ИЛИ ИмяГруппы = "П0003400005" Тогда
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "03_" + КолСтрокСтр;
	Иначе
		ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;
	КонецЕсли;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки  = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Если Лев(ИмяГруппы, 11) = "П0002800010"
	 ИЛИ Лев(ИмяГруппы, 11) = "П0003300005"
	 ИЛИ Лев(ИмяГруппы, 11) = "П0003400005"
	 ИЛИ Лев(ИмяГруппы, 10) = "П000020004"
	 ИЛИ Лев(ИмяГруппы, 10) = "П000020005" Тогда
		
		Для Каждого ТекОбласть Из ТекТабличноеПоле.Области Цикл
			
			Если НЕ Лев(ТекОбласть.Имя, 9) = "П00028000"
			   И НЕ Лев(ТекОбласть.Имя, 9) = "П00033000"
			   И НЕ Лев(ТекОбласть.Имя, 9) = "П00034000"
			   И НЕ Лев(ТекОбласть.Имя, 10) = "П000020004"
			   И НЕ Лев(ТекОбласть.Имя, 10) = "П000020005" Тогда
			   
				Продолжить;
				
			КонецЕсли;
				
			Если (Лев(ТекОбласть.Имя, 10) = "П000020004" И НЕ Лев(ИмяГруппы, 10) = "П000020004")
			 ИЛИ (Лев(ТекОбласть.Имя, 10) = "П000020005" И НЕ Лев(ИмяГруппы, 10) = "П000020005") Тогда
				
				Продолжить;
				
			КонецЕсли;
						
			ИмяКолонки = Лев(ТекОбласть.Имя, 13);
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 13) = "П000280001003"
			 ИЛИ Прав(ИмяКолонки, 13) = "П000330000503"
			 ИЛИ Прав(ИмяКолонки, 13) = "П000340000503"
			 ИЛИ Прав(ИмяКолонки, 13) = "П000020004001"
			 ИЛИ Прав(ИмяКолонки, 13) = "П000020005101" Тогда
				
				ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				
			КонецЕсли;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			Если Прав(ИмяКолонки, 13) = "П000280001003"
			 ИЛИ Прав(ИмяКолонки, 13) = "П000330000503"
			 ИЛИ Прав(ИмяКолонки, 13) = "П000340000503" Тогда
			 
				ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 3, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 3).Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
				
			ИначеЕсли Прав(ИмяКолонки, 13) = "П000020004001"
				  ИЛИ Прав(ИмяКолонки, 13) = "П000020005101" Тогда
				
				ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 2, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 2).Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
				
			КонецЕсли;
			
			Если ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки Тогда
				
				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядековый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;
					
					ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
		
	Иначе            
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			// переопределяем имена вставленной области
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
				ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
				
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
				ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
				
				Если Прав(ИмяКолонки, 2) = "01" Тогда
					ТекТабличноеПоле.Области["УдалитьСтроку" + ИмяОбластиЯчейки].Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				КонецЕсли;
				
				// определяем границы ячейки исходной области
				НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
				НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
				
				НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
				НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
				
				// Назначаем имя ячейки исходной области,
				// (т.к. в результате вставки новой области оно было очищено)
				ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
				ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
				
				Если Прав(ИмяКолонки, 2) = "01" Тогда
					ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки - 1, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки - 1).Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
				КонецЕсли;
				
				// очищаем значения ячеек вставленной области
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				Иначе
					// порядековый номер последней строки перед вставкой
					ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
					НовыйПорядковыйНомер = ИсходныйНомер + 1;
					
					ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	Если ИмяГруппы = "П0002800010"
	 ИЛИ ИмяГруппы = "П0003300005"
	 ИЛИ ИмяГруппы = "П0003400005" Тогда
		ИмяТекущейОбласти = ИмяГруппы + "03_" + КолСтрокСтр1;
	Иначе
		ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
	КонецЕсли;

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НаимТекРазделаОтчета = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если НаимТекРазделаОтчета = "Приложение2" Тогда
		
		Если Лев(ТабличныйДокумент.ТекущаяОбласть.Имя, 23) = "УдалитьСтрокуП000020004"
		 ИЛИ Лев(ТабличныйДокумент.ТекущаяОбласть.Имя, 10) = "П000020004" Тогда
			
			НаимТекРазделаОтчета = "Приложение2_1";
			
		ИначеЕсли Лев(ТабличныйДокумент.ТекущаяОбласть.Имя, 23) = "УдалитьСтрокуП000020005"
			  ИЛИ Лев(ТабличныйДокумент.ТекущаяОбласть.Имя, 10) = "П000020005" Тогда
			
			НаимТекРазделаОтчета = "Приложение2_2";
			
		КонецЕсли;
		
	КонецЕсли;
		
	УдалитьДополнительнуюСтрокуНаСервере(НаимТекРазделаОтчета);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ТекущаяСтраница = "Приложение2_1"
	 ИЛИ ТекущаяСтраница = "Приложение2_2" Тогда
	 
		ТекущаяСтраница = "Приложение2"; 
	 
 	КонецЕсли;
 	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		Если ИмяГруппы = "П0002800010"
		 ИЛИ ИмяГруппы = "П0003300005"
		 ИЛИ ИмяГруппы = "П0003400005" Тогда
			ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "03_" + НомУдаляемойСтроки;
		Иначе
			ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		КонецЕсли;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Если ИмяГруппы = "П0002800010"
				 ИЛИ ИмяГруппы = "П0003300005"
				 ИЛИ ИмяГруппы = "П0003400005"
				 ИЛИ Лев(ИмяГруппы, 10) = "П000020004"
	 			 ИЛИ Лев(ИмяГруппы, 10) = "П000020005" Тогда
					
					Для Каждого ТекОбласть Из ТекТабличноеПоле.Области Цикл
						
						Если НЕ Лев(ТекОбласть.Имя, 9) = "П00028000"
						   И НЕ Лев(ТекОбласть.Имя, 9) = "П00033000"
						   И НЕ Лев(ТекОбласть.Имя, 9) = "П00034000"
						   И НЕ Лев(ТекОбласть.Имя, 13) = "УдалитьСтроку" 
						   И НЕ Лев(ТекОбласть.Имя, 10) = "П000020004"
						   И НЕ Лев(ТекОбласть.Имя, 10) = "П000020005" Тогда
						   
							Продолжить;
							
						КонецЕсли;
						
						Если (Лев(ТекОбласть.Имя, 10) = "П000020004" И НЕ Лев(ИмяГруппы, 10) = "П000020004")
						 ИЛИ (Лев(ТекОбласть.Имя, 10) = "П000020005" И НЕ Лев(ИмяГруппы, 10) = "П000020005") Тогда
							
							Продолжить;
							
						КонецЕсли;
												
						КолонкаИмя = ТекОбласть.Имя;
						
						Если Лев(КолонкаИмя, 13) = "УдалитьСтроку" Тогда
							
							КолонкаИмя = Лев(ТекОбласть.Имя, 26);
							
							ИмяСдвинутойЯчейки      = КолонкаИмя + "_" + НСтр;
							НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
							
							Если ТекТабличноеПоле.Области.Найти(ИмяСдвинутойЯчейки) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
							ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
							
						Иначе
							
							КолонкаИмя = Лев(ТекОбласть.Имя, 13);
							
							ИмяСдвинутойЯчейки      = КолонкаИмя + "_" + НСтр;
							НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
							
							Если ТекТабличноеПоле.Области.Найти(ИмяСдвинутойЯчейки) = Неопределено Тогда
								Продолжить;
							КонецЕсли;
														
							ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
							ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
							
							Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
								
								// обновляем порядковый номер строки
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе	
					
					Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
						
						КолонкаИмя = "УдалитьСтроку" + ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
						
						Если НомерГрафы = 1 Тогда
							
							ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
							НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
							
							ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
							ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
							
						КонецЕсли;
						
						КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
						
						Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
							
							ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
							НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
							
							ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
							ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
							
							Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
								// обновляем порядковый номер строки
								СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки            = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	Если ТекущаяСтраница = "Приложение2" Тогда
		Расчет(Форма, ТекущаяСтраница, "П000020004101_1");
		Расчет(Форма, ТекущаяСтраница, "П000020004301_1");
		Расчет(Форма, ТекущаяСтраница, "П000020005201_1");
	Иначе
		Расчет(Форма, ТекущаяСтраница);
	КонецЕсли;
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());

	Если ИмяГруппы = "П0002800010"
	 ИЛИ ИмяГруппы = "П0003300005"
	 ИЛИ ИмяГруппы = "П0003400005" Тогда
		ИмяТекущейОбласти = ИмяГруппы + "03_" + НомТекущейСтроки;
	Иначе
		ИмяТекущейОбласти = ИмяГруппы + "01_" + НомТекущейСтроки;
	КонецЕсли;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТекТабличноеПоле.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьИННКППРеорганизованнойОрганизации(ЭтаФорма);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" Тогда
		ТабличныйДокумент.Области.П000020000701.Значение = ТабличныйДокумент.Области.П000020000101.Значение;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист03А" Тогда
		ИзменитьВариантыЗаполненияПоказателей(ЭтаФорма, "Лист03А");
		ТабличныйДокумент.Области.П000310009003.Значение = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхЛист02_6б.Очистить();
	СтруктураДанныхЛист06.Очистить();
	СтруктураДанныхЛист07.Очистить();
	СтруктураДанныхПриложение1.Очистить();
	
	Для каждого ЭлементСтруктурыТаблицаСтраницы Из мСтруктураМногостраничныхРазделов Цикл
		
		ЭтаФорма[ЭлементСтруктурыТаблицаСтраницы.Значение].Очистить();
		
	КонецЦикла;
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ПолучитьСтавкиНалога(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПроставитьПрПл_1();
	
	//для обособленных подразделений лист 02 не сдается, ставки нужно очистить
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтрПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
	Иначе
		СтрПоМесту = СтруктураДанныхТитульный.ПоМесту;
	КонецЕсли; 
	флЕстьОбособ = (СтрПоМесту = "220" ИЛИ СтрПоМесту = "223");
	Если флЕстьОбособ Тогда
		ДанныеСтраницы = ТаблицаСтраницыЛист02[0].Данные[0].Значение;
		ДанныеСтраницы.П000200015003 = 0;
		ДанныеСтраницы.П000200016003 = 0;
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02" Тогда
			ТабличныйДокумент.Области.П000200015003.Значение = 0;
			ТабличныйДокумент.Области.П000200016003.Значение = 0;
		КонецЕсли;
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СпециальныеОперацииПослеОчисткиЛистаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	ИмяОбластиМакетаСоставаПоказателейДляЛиста05 = ?(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2015-01-01', "Лист05_2014", "");
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, , , ИмяОбластиМакетаСоставаПоказателейДляЛиста05);
	
	ПолучитьСведенияОПоказателяхОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОтчетДляНалоговогоАгента()
	
	СтруктураДанныхЛист02_6б.Очистить();
	СтруктураДанныхЛист06.Очистить();
	СтруктураДанныхЛист07.Очистить();
	СтруктураДанныхПриложение1.Очистить();
	
	Для каждого ЭлементСтруктурыТаблицаСтраницы Из мСтруктураМногостраничныхРазделов Цикл
		
		Если Найти(ЭлементСтруктурыТаблицаСтраницы.Ключ, "Раздел1_3") > 0 ИЛИ Найти(ЭлементСтруктурыТаблицаСтраницы.Ключ, "Лист03") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма[ЭлементСтруктурыТаблицаСтраницы.Значение].Очистить();
		
	КонецЦикла;
	
	ИнициализацияМногостраничныхРазделовДляНалоговогоАгента();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		
		Если мнгРаздел.Ключ = "П0001300040" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
		
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлокамиДляНалоговогоАгента();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПолучитьСтавкиНалога(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	СпециальныеОперацииПослеОчисткиЛистаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлокамиДляНалоговогоАгента()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		Если ИмяГруппы = "П0001300040" Тогда
			Продолжить;
		КонецЕсли;
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделовДляНалоговогоАгента()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздел1_2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_4.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_5.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_6.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист02_6а.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист04.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыЛист05.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницы) Экспорт
	
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяСтраницы = "Приложение2" Тогда
						
		ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1);
		ОбновитьСтруктуруМногострочногоРазделаНаСервере(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;

		ПромТаблицаДопСтрокРаздела = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы1 = ЭтаФорма["Хранилище" + СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы1);
		СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1, ТаблицаДопСтрокГруппы1);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы2 = ЭтаФорма["Хранилище" + СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы2);
		СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2, ТаблицаДопСтрокГруппы2);
		
	КонецЕсли;
	
	Возврат СтруктураДанныхДопСтрокРаздела;
	
КонецФункции

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(Форма, НазванияМногостраничныхРазделовДляУдаления = "") Экспорт
	
	Если НЕ ПустаяСтрока(НазванияМногостраничныхРазделовДляУдаления) Тогда
		НазванияМнгостраничныхРазделов = Новый Структура(НазванияМногостраничныхРазделовДляУдаления);
	Иначе
		НазванияМнгостраничныхРазделов = Новый Структура;
	КонецЕсли;
	
	Для каждого СтрокаУровня1 из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;
		РазделАвтозаполняется = СтрокаУровня1.РазделЯвляетсяАвтозаполняемым;
		
		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;
		
		мРазделИмя = "ТабличныйДокумент";
		мРаздел    = Форма[мРазделИмя];
		Если НазванияМнгостраничныхРазделов.Свойство(НазваниеСтраницы) Тогда
			// Очистим текущий лист.
			#Если НаКлиенте Тогда
				Форма.ОчиститьТабличноеПолеНаКлиенте(НазваниеСтраницы);
			#Иначе
				Форма.ОчиститьТабличноеПолеНаСервере(НазваниеСтраницы);
			#КонецЕсли
			
			ТаблицаСтраницРаздела = Неопределено;
			Форма.мСтруктураМногостраничныхРазделов.Свойство(НазваниеСтраницы, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
			
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаСтраницРаздела[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					// удаляем дополнительную страницу
					ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
			
			// Варианты заполнения установим в один массив. Все варианты возьмем из Эталона.
			// Цвет ячеек перерисуется в показе статика многостраничного раздела, ниже.
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(Форма, НазваниеСтраницы, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			ПолучитьСведенияОПоказателяхОтчета();
			УдалятьсяВсеДопЭкземпляры = Истина;
			ОчиститьТабличноеПолеСпец(ИмяСтраницы);
		Иначе
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеСпец(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		ЭтаФорма.НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		
		ДатаПодписи = '00010101';
		
		ЗаполнитьСведенияОбОрганизации(Истина);
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
			УдалятьсяВсеДопЭкземпляры = Истина;
		Иначе
			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеСпец(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Лист02_4" Тогда
		ТабличныйДокумент.Области.П000240014003.Очистить();
		СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяСтраницы, "П000240014003", 0);
	ИначеЕсли ИмяСтраницы = "Лист02_5" Тогда
		СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;
	ИначеЕсли ИмяСтраницы = "Лист02_6а" Тогда
		СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;
	КонецЕсли;
	
	РасчетНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы) Экспорт

	Если ИмяСтраницы = "Лист02_5" Тогда
		СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;
	ИначеЕсли ИмяСтраницы = "Лист02_6а" Тогда
		СтруктураРеквизитовФормы.ВГруппуОПВходитОрганизацияДоступность = Ложь;
		ВГруппуОПВходитОрганизация = Ложь;
	КонецЕсли;

	РасчетНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		ФлажокОтклАвтоРасчетПриИзменении(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ФлажокОтклАвтоРасчетПриИзменении(Форма, ИмяТекущейСтраницы)

	ИзменитьВариантыЗаполненияПоказателей(Форма, ИмяТекущейСтраницы)

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	ПолучитьСведенияОПоказателяхОтчета();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()

	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	ФормаВыбора = ДополнительныеПараметры.ФормаВыбора;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		
		Если Область.Значение <> ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код Тогда
			Область.Значение = ФормаВыбора.ТекущийЭлемент.ТекущиеДанные.Код;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	ИмяЯчейки = Область.Имя;
	
	Если СтрЧислоВхождений(ИмяЯчейки, "ДобавитьСтраницу") > 0 Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяЯчейки, "УдалитьСтраницу") > 0 И Область.Гиперссылка Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяЯчейки, "ДобавитьСтроку") > 0 Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(ИмяЯчейки, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		УдалитьСтроку("");
	КонецЕсли;
	
	Если СтрЧислоВхождений(ИмяЯчейки, "СобратьДанные") > 0 Тогда
		СобратьДанные("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(ИмяЯчейки, 7) = "КодИМНС" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		Возврат;
	КонецЕсли;
	
	Если ИмяЯчейки = "П000120000103" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КварталИсчислАванс = Новый СписокЗначений;
		КварталИсчислАванс.Добавить("",   "Пустое значение");
		КварталИсчислАванс.Добавить("21", "21 - первый квартал");
		КварталИсчислАванс.Добавить("24", "24 - четвертый квартал");
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяЯчейки", ИмяЯчейки);
				
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВыборИзСпискаЗавершение", ЭтотОбъект, ДопПараметры);
		
		ПоказатьВыборИзСписка(ОписаниеОповещения, КварталИсчислАванс);
								
		Возврат;
		
	КонецЕсли;
	
	Если ИмяЯчейки = "П000020000403" Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму("Справочник.СтраныМира.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор кода страны";
		
		ДополнительныеПараметры = Новый Структура("Область, СтандартнаяОбработка, ФормаВыбора, Элемент", Область, СтандартнаяОбработка, ФормаВыбора, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраныЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
		Возврат;
		
	КонецЕсли;
		
	// Заполнение адреса в разделе 03 В (в листах 03 А, 03 Б) и в Приложении №2.
	Если Найти(ИмяЯчейки, "П00033000200") > 0
		ИЛИ Найти(ИмяЯчейки, "П00034000200") > 0
		ИЛИ Найти(ИмяЯчейки, "П00002000050") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		РоссийскийАдрес = Новый Соответствие;
		
		Если Найти(ИмяЯчейки, "П00002000050") > 0 Тогда
			
			РоссийскийАдрес.Вставить("Индекс",	        ТабличныйДокумент.Области.П000020000501.Значение);
			РоссийскийАдрес.Вставить("Регион",          ТабличныйДокумент.Области.П000020000502.Значение);
			РоссийскийАдрес.Вставить("КодРегиона",      ТабличныйДокумент.Области.П000020000502.Значение);
			РоссийскийАдрес.Вставить("Район",           ТабличныйДокумент.Области.П000020000503.Значение);
			РоссийскийАдрес.Вставить("Город",           ТабличныйДокумент.Области.П000020000504.Значение);
			РоссийскийАдрес.Вставить("НаселенныйПункт", ТабличныйДокумент.Области.П000020000505.Значение);
			РоссийскийАдрес.Вставить("Улица",           ТабличныйДокумент.Области.П000020000506.Значение);
			РоссийскийАдрес.Вставить("Дом",             ТабличныйДокумент.Области.П000020000507.Значение);
			РоссийскийАдрес.Вставить("Корпус",          ТабличныйДокумент.Области.П000020000508.Значение);
			РоссийскийАдрес.Вставить("Квартира",        ТабличныйДокумент.Области.П000020000509.Значение);
			
		Иначе
			
			Корень = Лев(ИмяЯчейки, 12);
			Постфикс = Сред(ИмяЯчейки, 15);
			
			РоссийскийАдрес.Вставить("Индекс",	        ТабличныйДокумент.Области[Корень + "1_" + Постфикс].Значение);
			РоссийскийАдрес.Вставить("Регион",          ТабличныйДокумент.Области[Корень + "2_" + Постфикс].Значение);
			РоссийскийАдрес.Вставить("КодРегиона",      ТабличныйДокумент.Области[Корень + "2_" + Постфикс].Значение);
			РоссийскийАдрес.Вставить("Район",           ТабличныйДокумент.Области[Корень + "3_" + Постфикс].Значение);
			РоссийскийАдрес.Вставить("Город",           ТабличныйДокумент.Области[Корень + "4_" + Постфикс].Значение);
			РоссийскийАдрес.Вставить("НаселенныйПункт", ТабличныйДокумент.Области[Корень + "5_" + Постфикс].Значение);
			РоссийскийАдрес.Вставить("Улица",           ТабличныйДокумент.Области[Корень + "6_" + Постфикс].Значение);
			РоссийскийАдрес.Вставить("Дом",             ТабличныйДокумент.Области[Корень + "7_" + Постфикс].Значение);
			РоссийскийАдрес.Вставить("Корпус",          ТабличныйДокумент.Области[Корень + "8_" + Постфикс].Значение);
			РоссийскийАдрес.Вставить("Квартира",        ТабличныйДокумент.Области[Корень + "9_" + Постфикс].Значение);
			
		КонецЕсли;
		
		Если Регионы.Количество() = 0 Тогда
			ЗаполнитьРегионыНаСервере();
		КонецЕсли;
		
		Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["Регион"])));
			
		Если Регион.Количество() > 0 Тогда
			
			РоссийскийАдрес["Регион"] = Регион[0].Наим;
			
		КонецЕсли;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
		ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
								 		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
																												  + РоссийскийАдрес["Регион"] + ","
																												  + РоссийскийАдрес["Район"] + ","
																												  + РоссийскийАдрес["Город"] + ","
																												  + РоссийскийАдрес["НаселенныйПункт"] + ","
																												  + РоссийскийАдрес["Улица"] + ","
																												  + РоссийскийАдрес["Дом"] + ","
																												  + РоссийскийАдрес["Корпус"] + ","
																												  + РоссийскийАдрес["Квартира"]);
								
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации);
					
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		
		ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
				
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяЯчейки);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
				
		ТребРезультат = 0;
		Если КодПоказателя = "Период" Тогда
			//код периода	
			
			НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			флКвартальноеЗаполнение = (СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал);
	
			Если СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал Тогда
				ТребРезультат = НомерМесяца / 3;
			Иначе
				ТребРезультат = НомерМесяца + 4;
			КонецЕсли;
			
		// Код квартала раздела 1.2.
		ИначеЕсли КодПоказателя = "П000120000103" Тогда
			НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			ЗаполнениеПоМесяцам = (СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц);
			
			Если НомерМесяца = 11 И ЗаполнениеПоМесяцам Тогда
				ТребРезультат = 11;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребРезультат <> 0 Тогда
			//из ТЗВыбора удаляются элементы, у которых результат отличается от нуля и ТребРезультат
			РазмерТЗ = ТЗВыбора.Количество();
			Для Сч = 1 По РазмерТЗ Цикл
				ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
				Рез = ?(ЭлементТЗ.БазоваяДоходность = "", 0, Число(ЭлементТЗ.БазоваяДоходность));
				Если Рез <> 0 И Рез <> ТребРезультат Тогда
					ТЗВыбора.Удалить(ЭлементТЗ);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		ТабличныйДокумент.Области[ДополнительныеПараметры.ИмяЯчейки].Значение = ВыбранныйЭлемент.Значение;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		Корень = "";
		ИскомаяОбласть = Неопределено;
		Для каждого ТекОбласть Из ТабличныйДокумент.Области Цикл
			Если Найти(ТекОбласть.Имя, "П000330002001_") > 0
				ИЛИ Найти(ТекОбласть.Имя, "П000340002001_") > 0
				ИЛИ Найти(ТекОбласть.Имя, "П00002000050") > 0 Тогда
				ИскомаяОбласть = ТекОбласть;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИскомаяОбласть <> Неопределено Тогда
			
			Если Найти(ИскомаяОбласть.Имя, "П00002000050") > 0 Тогда
				
				ТабличныйДокумент.Области.П000020000501.Значение = РоссийскийАдрес_["Индекс"];
				ТабличныйДокумент.Области.П000020000502.Значение = РоссийскийАдрес_["КодРегиона"];
				ТабличныйДокумент.Области.П000020000503.Значение = РоссийскийАдрес_["Район"];
				ТабличныйДокумент.Области.П000020000504.Значение = РоссийскийАдрес_["Город"];
				ТабличныйДокумент.Области.П000020000505.Значение = РоссийскийАдрес_["НаселенныйПункт"];
				ТабличныйДокумент.Области.П000020000506.Значение = РоссийскийАдрес_["Улица"];
				ТабличныйДокумент.Области.П000020000507.Значение = РоссийскийАдрес_["Дом"];
				ТабличныйДокумент.Области.П000020000508.Значение = РоссийскийАдрес_["Корпус"];
				ТабличныйДокумент.Области.П000020000509.Значение = РоссийскийАдрес_["Квартира"];
				
			Иначе
				
				Корень   = Лев(ИскомаяОбласть.Имя, 12);
				Постфикс = Сред(ТабличныйДокумент.ТекущаяОбласть.Имя, 15);
				
				ТабличныйДокумент.Области[Корень + "1_" + Постфикс].Значение = РоссийскийАдрес_["Индекс"];
				ТабличныйДокумент.Области[Корень + "2_" + Постфикс].Значение = РоссийскийАдрес_["КодРегиона"];
				ТабличныйДокумент.Области[Корень + "3_" + Постфикс].Значение = РоссийскийАдрес_["Район"];
				ТабличныйДокумент.Области[Корень + "4_" + Постфикс].Значение = РоссийскийАдрес_["Город"];
				ТабличныйДокумент.Области[Корень + "5_" + Постфикс].Значение = РоссийскийАдрес_["НаселенныйПункт"];
				ТабличныйДокумент.Области[Корень + "6_" + Постфикс].Значение = РоссийскийАдрес_["Улица"];
				ТабличныйДокумент.Области[Корень + "7_" + Постфикс].Значение = РоссийскийАдрес_["Дом"];
				ТабличныйДокумент.Области[Корень + "8_" + Постфикс].Значение = РоссийскийАдрес_["Корпус"];
				ТабличныйДокумент.Области[Корень + "9_" + Постфикс].Значение = РоссийскийАдрес_["Квартира"];
				
			КонецЕсли;
			
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
			
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.КодИМНС.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП1.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
						   
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
						   
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");

		Сообщение.Сообщить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");

		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["КодИМНС"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП1"].Значение = РезультатВыбора.КПП;
		
		ИзменитьОКТМОРазделовЗаполнитьСведенияОПодписантахСформироватьСписокКодовПоМесту(РезультатВыбора.Ссылка);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОКТМОРазделовЗаполнитьСведенияОПодписантахСформироватьСписокКодовПоМесту(Ссылка)
	
	ИзменитьОКТМОРазделов(ЭтаФорма, Ссылка.КодПоОКТМО);
	
	ЗаполнитьСведенияОПодписантах();
	
	СформироватьСпискиВыбора();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	//СформироватьСпискиВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
	
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	
	Если ПараметрВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрВводаПоля[0];
		Если СтрДлина(СокрЛП(Область.Значение)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(Область.Значение)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длина значения показателя должна быть равна %1!'"), ПараметрВводаПоля.Длина);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "НомерКорректировки" Тогда
		
		Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда
			Область.Значение = "0";
		КонецЕсли;
		
		ОтобразитьНомерКорректировки(ЭтаФорма, Область.Значение);
		
	ИначеЕсли ИмяПоказателя = "ДатаПодписи" Тогда
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		
		ДатаПодписиПриИзмененииНаСервере();
		ЗаполнитьДатуПодписи(ЭтаФорма);
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П000020000101" Тогда
		ТабличныйДокумент.Области.П000020000701.Значение = ЗначПоказателя;
		Возврат;
	КонецЕсли;
	
	//Изменение "по месту нахождения (учета) (код)" на Титульном листе
	Если Найти(ИмяПоказателя, "ПоМесту") > 0 Тогда
		БылРежимОбособленногоПодразделения = (СтруктураРеквизитовФормы.мПоМесту = "220" ИЛИ СтруктураРеквизитовФормы.мПоМесту = "223");
		БылРежимНалоговогоАгента = (СтруктураРеквизитовФормы.мПоМесту = "231");
		
		НовыйПоМесту = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "ПоМесту");
		УстановленРежимОбособленногоПодразделения = (НовыйПоМесту = "220" ИЛИ НовыйПоМесту = "223");
		УстановленРежимНалоговогоАгента = (НовыйПоМесту = "231");
		
		Если (УстановленРежимОбособленногоПодразделения И НЕ БылРежимОбособленногоПодразделения) Тогда
				ТекстВопроса = НСтр("ru='Внимание! Перед входом в режим заполнения для обособленных подразделений
					|будут очищены все разделы (листы) отчета.
					|Продолжить операцию?'");
					
			ДополнительныеПараметры = Новый Структура("ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область", ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВходЗаполнениеОбособленныхПодразделенийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

		ИначеЕсли (УстановленРежимНалоговогоАгента И НЕ БылРежимНалоговогоАгента) Тогда
				ТекстВопроса = НСтр("ru='Внимание! Перед входом в режим заполнения для налогового агента
					|будут очищены все разделы (листы) отчета, кроме раздела 1.3 и Листа 03.
					|Продолжить операцию?'");
					
			ДополнительныеПараметры = Новый Структура("ЗначПоказателя, ИмяПоказателя, Область", ЗначПоказателя, ИмяПоказателя, Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВходЗаполнениеНалоговыйАгентЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

		ИначеЕсли (БылРежимОбособленногоПодразделения И НЕ УстановленРежимОбособленногоПодразделения) Тогда
			ТекстВопроса = НСтр("ru='Внимание! Перед выходом из режима заполнения для обособленных подразделений
				|будут очищены все разделы (листы) отчета.
				|Продолжить операцию?'");
				
			ДополнительныеПараметры = Новый Структура("ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область", ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыходЗаполнениеОбособленныхПодразделенийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

		ИначеЕсли (БылРежимНалоговогоАгента И НЕ УстановленРежимНалоговогоАгента) Тогда
			ТекстВопроса = НСтр("ru='Внимание! Перед выходом из режима заполнения для налогового агента
				|будут очищены все разделы (листы) отчета.
				|Продолжить операцию?'");
				
			ДополнительныеПараметры = Новый Структура("ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область", ЗначПоказателя, ИмяПоказателя, НовыйПоМесту, Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыходЗаполнениеНалоговогоАгентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

		Иначе
			СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;	
			ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);

		КонецЕсли;
		
	Иначе
		ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма, ЗначениеКорректировки)
	
	Форма.СтруктураРеквизитовФормы.ВидДокумента = ?(Число(ЗначениеКорректировки) = 0, 0, 1);
	
	Форма.НомерКорректировки = Форма.СтруктураРеквизитовФормы.ВидДокумента * Число(ЗначениеКорректировки);
	
	Форма.ТабличныйДокумент.Области.НомерКорректировки.Значение = Форма.НомерКорректировки;
	
Конецпроцедуры

&НаКлиенте
Процедура ВопросВыходЗаполнениеНалоговогоАгентаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначПоказателя = ДополнительныеПараметры.ЗначПоказателя;
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	НовыйПоМесту = ДополнительныеПараметры.НовыйПоМесту;
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		//Пользователь отказался очистить отчет - возврат к старому значению.
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
		Возврат;
	Иначе 
		//Пользователь согласился очистить отчет
		СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;	
		ОчиститьНаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		ОбновитьДоступностьЭлементовНаКлиенте();
	КонецЕсли;
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыходЗаполнениеОбособленныхПодразделенийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначПоказателя = ДополнительныеПараметры.ЗначПоказателя;
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	НовыйПоМесту = ДополнительныеПараметры.НовыйПоМесту;
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		//Пользователь отказался очистить отчет - возврат к старому значению.
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
		Возврат;
	Иначе 
		//Пользователь согласился очистить отчет
		СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;	
		ОчиститьНаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		ОбновитьДоступностьЭлементовНаКлиенте();
	КонецЕсли;
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВходЗаполнениеНалоговыйАгентЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначПоказателя = ДополнительныеПараметры.ЗначПоказателя;
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		//Пользователь отказался очистить отчет - возврат к старому значению.
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
		Возврат;
	Иначе 
		//Пользователь согласился очистить отчет
		ОчиститьОтчетДляНалоговогоАгента();
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		ОбновитьДоступностьЭлементовНаКлиенте();
	КонецЕсли;
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВходЗаполнениеОбособленныхПодразделенийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначПоказателя = ДополнительныеПараметры.ЗначПоказателя;
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	НовыйПоМесту = ДополнительныеПараметры.НовыйПоМесту;
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		//Пользователь отказался очистить отчет - возврат к старому значению.
		ТабличныйДокумент.Области.ПоМесту.Значение = СтруктураРеквизитовФормы.мПоМесту;
		Возврат;
	Иначе 
		//Пользователь согласился очистить отчет
		СтруктураРеквизитовФормы.мПоМесту = НовыйПоМесту;	
		ОчиститьНаСервере();
		
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		ОбновитьДоступностьЭлементовНаКлиенте();
	КонецЕсли;
	ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
	Если ТипЗначенияОбласти = Тип("Число") Тогда
		ОбрабатываемаяОбласть.Значение = 0;
	ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
		ОбрабатываемаяОбласть.Значение = "";
	Иначе
		ОбрабатываемаяОбласть.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокументаФрагмент(ЗначПоказателя, ИмяПоказателя, Область)
	
	ПризнакПоМесту = СтруктураДанныхТитульный.ПоМесту;
	ЭтоСдачаЗаОбособленноеПодразделение = (ПризнакПоМесту = "220" ИЛИ ПризнакПоМесту = "223");
	ПоКонсолидированнойГруппе = (ПризнакПоМесту = "218");
	
	Если ИмяПоказателя = "КодФормыОрг" Тогда
		УстановитьДоступностьИННКППРеорганизованнойОрганизации(ЭтаФорма);
	КонецЕсли;
	
	Если ИмяПоказателя = "ОКВЭД" Тогда
		
		Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);
			Сообщение.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяПоказателя = "П000220013503" Тогда
		Если ЗначениеЗаполнено(Область.Значение) Тогда
			Если НЕ (Область.Значение = "1" ИЛИ Область.Значение = "2") Тогда
				Область.Очистить();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='Указан некорректный код метода начисления амортизации.%1Значение показателя строки 135 приложения 2 к листу 02 было очищено'"), Символы.ПС);
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000310000100" Тогда
		Если ЗначПоказателя = "1" И НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(4, "П000310009003");
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(4, "П000310009003");
			#КонецЕсли
		Иначе
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(0, "П000310009003");
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(0, "П000310009003");
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000320000200" Тогда
		ВидДоходаЛист03Б = СокрЛП(ТабличныйДокумент.Области.П000320000200.Значение);
		Если ВидДоходаЛист03Б = "1" Тогда
			СтавкаНалогаЛист03БСтр020 = 15;
		ИначеЕсли ВидДоходаЛист03Б = "2" Тогда
			СтавкаНалогаЛист03БСтр020 = 9;
		Иначе
			СтавкаНалогаЛист03БСтр020 = 0;
		КонецЕсли;
		ТабличныйДокумент.Области.П000320002003.Значение = СтавкаНалогаЛист03БСтр020;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000400000200" Тогда
		ВидДоходаЛист04 = СокрЛП(ТабличныйДокумент.Области.П000400000200.Значение);
		Если ВидДоходаЛист04 = "1" Тогда
			СтавкаНалогаЛист04Стр030 = 15;
		ИначеЕсли ВидДоходаЛист04 = "2" ИЛИ ВидДоходаЛист04 = "4" ИЛИ ВидДоходаЛист04 = "6" Тогда
			СтавкаНалогаЛист04Стр030 = 9;
		Иначе
			СтавкаНалогаЛист04Стр030 = 0;
		КонецЕсли;
		ТабличныйДокумент.Области.П000400003003.Значение = СтавкаНалогаЛист04Стр030;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000260000301" Тогда
		ТабличныйДокумент.Области.П000260000601.Значение = КодСубъектаРФПоОКТМО(ЭтаФорма, ТабличныйДокумент.Области.П000260000301.Значение);
	КонецЕсли;
	
	Если ИмяПоказателя = "П000270000301" Тогда
		УстановитьПримечаниеКПолюОКАТОЛиста02_6а(ЭтаФорма);
	КонецЕсли;
	
	// Изменение "Признак налогоплательщика на Листе 02.
	Если (ИмяПоказателя = "П000200000100") Тогда
		ПризнакНалогоплательщика = ТабличныйДокумент.Области.П000200000100.Значение;
		Если ПризнакНалогоплательщика = "4" Тогда
			ПолучитьСтавкиНалога_НП4(ЭтаФорма, "Лист02");
		Иначе
			ПолучитьСтавкиНалога(ЭтаФорма, "Лист02");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000250001000" Тогда
		Если ЗначПоказателя = "3" Тогда
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(0, "П000250005003");
				Если ЗначениеЗаполнено(ТабличныйДокумент.Области.П000250000100.Значение) Тогда
					ИзменитьВариантЗаполненияЯчейкиНаСервере(4, "П000250003103");
				КонецЕсли;
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(0, "П000250005003");
				Если ЗначениеЗаполнено(ТабличныйДокумент.Области.П000250000100.Значение) Тогда
					ИзменитьВариантЗаполненияЯчейкиНаКлиенте(4, "П000250003103");
				КонецЕсли;
			#КонецЕсли
		ИначеЕсли НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			// Cохранение значения в структуре, чтобы можно было
			// использовать функцию "ЕстьРазделЗаполненныйПоУсловиям".
			ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
			СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателя, Область.Значение);
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(4, "П000250005003");
				Если ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура(
					"П000250001000,П000250000100", "3", ТабличныйДокумент.Области.П000250000100.Значение)) Тогда
					ИзменитьВариантЗаполненияЯчейкиНаСервере(4, "П000250003103");
				Иначе
					ИзменитьВариантЗаполненияЯчейкиНаСервере(0, "П000250003103");
				КонецЕсли;
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(4, "П000250005003");
				Если ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_5", Новый Структура(
					"П000250001000,П000250000100", "3", ТабличныйДокумент.Области.П000250000100.Значение)) Тогда
					ИзменитьВариантЗаполненияЯчейкиНаКлиенте(4, "П000250003103");
				Иначе
					ИзменитьВариантЗаполненияЯчейкиНаКлиенте(0, "П000250003103");
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000270000501" Тогда
		Строка031БылаНедоступна = ТабличныйДокумент.Области.П000270003103.Защита;
		УсловиеЗакрытыеОП = Новый Структура("П000270000501", "3");
		// Cохранение значения в структуре, чтобы можно было
		// использовать функцию "ЕстьРазделЗаполненныйПоУсловиям".
		ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателя, Область.Значение);
		ЕстьЗакрытыеОП = ЕстьРазделЗаполненныйПоУсловиям(ЭтаФорма, "Лист02_6а", УсловиеЗакрытыеОП);
		Если ПоКонсолидированнойГруппе Тогда
			Если (ЗначПоказателя = "3") ИЛИ (ЕстьЗакрытыеОП) Тогда
				#Если ВебКлиент Тогда
					ИзменитьВариантЗаполненияЯчейкиНаСервере(4, "П000270003103");
				#Иначе
					ИзменитьВариантЗаполненияЯчейкиНаКлиенте(4, "П000270003103");
				#КонецЕсли
			Иначе
				#Если ВебКлиент Тогда
					ИзменитьВариантЗаполненияЯчейкиНаСервере(0, "П000270003103");
				#Иначе
					ИзменитьВариантЗаполненияЯчейкиНаКлиенте(0, "П000270003103");
				#КонецЕсли
				Если Строка031БылаНедоступна Тогда
					ТабличныйДокумент.Области.П000270003103.Очистить();
				КонецЕсли;
			КонецЕсли;
		Иначе
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(4, "П000270003103");
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(4, "П000270003103");
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000270000501" Тогда
		Если ЗначПоказателя = "3" Тогда
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(0, "П000270005003");
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(0, "П000270005003");
			#КонецЕсли
		ИначеЕсли НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			#Если ВебКлиент Тогда
				ИзменитьВариантЗаполненияЯчейкиНаСервере(4, "П000270005003");
			#Иначе
				ИзменитьВариантЗаполненияЯчейкиНаКлиенте(4, "П000270005003");
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	//Обнуление по условию строки 230 на листе 02
	Если ИмяПоказателя = "П000250000100" Тогда
		ТаблицаРаздела  =  мСтруктураМногостраничныхРазделов["Лист02"];
		ТаблицаРаздела = ЭтаФорма[ТаблицаРаздела];
		Если ЗначПоказателя = "" Тогда
			АктивныеСтраницы = ЭтаФорма[мСтруктураМногостраничныхРазделов["Лист02_5"]].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктивныеСтраницы.Количество() > 0 Тогда
				АктивныеСтраницы[0].Данные[0].Значение.П000250000100 = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваПоказателя = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если СвойстваПоказателя <> Неопределено И СвойстваПоказателя.ТаблицаЗначений <> Неопределено Тогда
		КодПоказателя = СвойстваПоказателя.Показатель;
		КопироватьДанныеФормы(СвойстваПоказателя.ТаблицаЗначений, ТЗВыбора);
		//Определение Результата проверки из таблицы выбора и если это - число > 0 - последующая обработка
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		Если ЭлТЗВыбора.Количество() > 0 Тогда
			ЭлТЗВыбора = ЭлТЗВыбора[0];
			Если РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(ЭлТЗВыбора.БазоваяДоходность) Тогда
				Рез = Число(ЭлТЗВыбора.БазоваяДоходность);
				Если Рез > 0 Тогда
					
					ТЗКритерии.Очистить();
					
					Если КодПоказателя = "П000110003003" Тогда //код КБК раздела 1.1	
						Если Рез = 1 Тогда
							
							//признак налогоплательщика раздела 1.1
							НовСтрока = ТЗКритерии.Добавить();
							НовСтрока.Область = ТабличныйДокумент.Области.П000110000100.Значение;
							НовСтрока.ТребЗнач = "1";
							
						ИначеЕсли Рез = 2 Тогда
							
							//признак налогоплательщика раздела 1.1
							НовСтрока = ТЗКритерии.Добавить();
							НовСтрока.Область = ТабличныйДокумент.Области.П000110000100.Значение;
							НовСтрока.ТребЗнач = "2";
							
						КонецЕсли;
					ИначеЕсли КодПоказателя = "П000120011003" Тогда //код КБК раздела 1.2
						Если Рез = 1 Тогда
							
							//признак налогоплательщика раздела 1.2
							НовСтрока = ТЗКритерии.Добавить();
							НовСтрока.Область = ТабличныйДокумент.Области.П000120000100.Значение;
							НовСтрока.ТребЗнач = "1";
							
						ИначеЕсли Рез = 2 Тогда
							
							//признак налогоплательщика раздела 1.2
							НовСтрока = ТЗКритерии.Добавить();
							НовСтрока.Область = ТабличныйДокумент.Области.П000120000100.Значение;
							НовСтрока.ТребЗнач = "2";
							
						КонецЕсли;
					КонецЕсли;
					
					Для каждого Критерий Из ТЗКритерии Цикл
						//Если текущее значение отличается от требуемого происходит присвоение
						Если Критерий.Область <> Критерий.ТребЗнач Тогда
							Критерий.Область = Критерий.ТребЗнач;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СвойстваПоказателя <> Неопределено Тогда
		КодКритерия = СвойстваПоказателя.Показатель;
		ЗначКритерия = Область.Значение;
		//введение таблицы значений предусматривает влияние критерия на несколько зависимых показателей
		ТЗЗависимЗнач.Очистить();
		
		Если КодКритерия = "П000110000100" Тогда //признак налогоплательщика раздела 1.1
			Если ЗначКритерия = "1" Тогда
				
				//код КБК раздела 1.1
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ИмяПоказателя = ТабличныйДокумент.Области.П000110003003.Имя;
				НовСтрока.ОбластьПоказателя = ТабличныйДокумент.Области.П000110003003.Значение;
				НовСтрока.ТребРез = 1;
				
			ИначеЕсли ЗначКритерия = "2" Тогда
				
				//код КБК раздела 1.1
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ИмяПоказателя = ТабличныйДокумент.Области.П000110003003.Имя;
				НовСтрока.ОбластьПоказателя = ТабличныйДокумент.Области.П000110003003.Значение;
				НовСтрока.ТребРез = 2;
				
			КонецЕсли;
		ИначеЕсли КодКритерия = "П000120000100" Тогда //признак налогоплательщика раздела 1.1
			Если ЗначКритерия = "1" Тогда
				
				//код КБК раздела 1.2
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ИмяПоказателя = ТабличныйДокумент.Области.П000120011003.Имя;
				НовСтрока.ОбластьПоказателя = ТабличныйДокумент.Области.П000120011003.Значение;
				НовСтрока.ТребРез = 1;
				
			ИначеЕсли ЗначКритерия = "2" Тогда
				
				//код КБК раздела 1.1
				НовСтрока = ТЗЗависимЗнач.Добавить();
				НовСтрока.ИмяПоказателя = ТабличныйДокумент.Области.П000120011003.Имя;
				НовСтрока.ОбластьПоказателя = ТабличныйДокумент.Области.П000120011003.Значение;
				НовСтрока.ТребРез = 2;
				
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ЗависимЗнач Из ТЗЗависимЗнач Цикл
			СвойстваЗависимогоПоказателя = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ЗависимЗнач.ИмяПоказателя);
			Если СвойстваЗависимогоПоказателя <> Неопределено И СвойстваЗависимогоПоказателя.ТаблицаЗначений <> Неопределено Тогда
				//поиск строки списка выбора, соответствующую текущему значению зависимого показателя
				СтрокиСписка=СвойстваЗависимогоПоказателя.ТаблицаЗначений.НайтиСтроки(Новый Структура("Код",СокрЛП(Строка(ЗависимЗнач.ОбластьПоказателя))));
				Если СтрокиСписка.Количество() > 0 Тогда
					СтрокаСписка = СтрокиСписка[0];
					Рез = ?(СтрокаСписка.БазоваяДоходность = "",0,Число(СтрокаСписка.БазоваяДоходность));
					Если РегламентированнаяОтчетностьКлиентСервер.ЯвляетсяЧислом(Рез) И Рез > 0 Тогда
						Если ЗависимЗнач.ТребРез <> Рез Тогда
							//очистка значения зависмого параметра - т.к. не соответствует измененному значению критерия
							ЗависимЗнач.ОбластьПоказателя = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	//расчет выполняется в структуре, обновляем каждое значение после ввода
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателя, Область.Значение);
	
	Если ИмяПоказателя = "П000200000100" 
		ИЛИ ИмяПоказателя = "П000250000100" Тогда  //будут автоматически сформированы разделы 1.1 и 1.2 и пересчитан весь отчет
		РасчетНаСервере();
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли; 
	
	Если ИмяРаздела    = "Титульный" 
		ИЛИ ИмяРаздела = "Раздел1_1" 
		ИЛИ ИмяРаздела = "Раздел1_2" 
		ИЛИ ИмяРаздела = "Лист02" 
		ИЛИ ИмяРаздела = "Лист02_1" 
		ИЛИ ИмяРаздела = "Лист02_2" 
		ИЛИ ИмяРаздела = "Лист02_3" 
		ИЛИ ИмяРаздела = "Лист02_4" 
		ИЛИ ИмяРаздела = "Лист02_5"
		ИЛИ ИмяРаздела = "Лист02_6"
		ИЛИ ИмяРаздела = "Лист02_6а"
		ИЛИ ИмяРаздела = "Лист02_6б"
		ИЛИ ИмяРаздела = "Лист03А"
		ИЛИ ИмяРаздела = "Лист03Б"
		ИЛИ ИмяРаздела = "Лист04"
		ИЛИ ИмяРаздела = "Лист05"
		ИЛИ ИмяРаздела = "Лист06"
		ИЛИ ИмяРаздела = "Лист07"
		ИЛИ ИмяРаздела = "Приложение2" Тогда
		
		Если ИмяРаздела = "Приложение2" И Найти(ИмяПоказателя, "П000020005101_") > 0 Тогда
			Постфикс = Сред(ИмяПоказателя, 15);
			РасчетНаКлиенте(ИмяРаздела, "П000020005201_" + Постфикс);
		КонецЕсли;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
		
		Если ИмяРаздела <> "Приложение2" Тогда
			СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере = Истина; //сделаем пересчет на сервере всех разделов
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2;
	ИначеЕсли Найти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, 13);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	МногостраничностьВРазделе = Истина;
	КолМногострочныхЧастей = 0;
	СохранятьМногострКакТЗ = Истина;
	ИмяГруппы = "";
	Если ИмяРаздела = "Титульный" Тогда
		МногостраничностьВРазделе = Ложь;
	ИначеЕсли ИмяРаздела = "Раздел1_3" Тогда
		КолМногострочныхЧастей = 1;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3;
	ИначеЕсли ИмяРаздела = "Лист02_6б" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Ложь;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б;
	ИначеЕсли ИмяРаздела = "Лист03А" Тогда
		КолМногострочныхЧастей = 1;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Лист03А;
	ИначеЕсли ИмяРаздела = "Лист03Б" Тогда
		КолМногострочныхЧастей = 1;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Лист03Б;
	ИначеЕсли ИмяРаздела = "Лист06" Тогда
		МногостраничностьВРазделе = Ложь;
	ИначеЕсли ИмяРаздела = "Лист07" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Ложь;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Лист07;
	ИначеЕсли ИмяРаздела = "Приложение1" Тогда
		КолМногострочныхЧастей = 1;
		МногостраничностьВРазделе = Ложь;
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.ИдМСЧ_Приложение1;
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		КолМногострочныхЧастей = 2;
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеРаздела = Неопределено;
	ДанныеМногострочногоРаздела = Неопределено;
	
	Если ИмяРаздела <> "" Тогда
		
		Если МногостраничностьВРазделе Тогда  //Для многостраничных разделов
			
			ИмяТаблицыСтраницы = Неопределено;
			Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяТаблицыСтраницы) Тогда
				
				ТаблицаСтраницы = Форма[ИмяТаблицыСтраницы];
				АктивныеСтраницы = ТаблицаСтраницы.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				
				Если АктивныеСтраницы.Количество() > 0 Тогда
					
					ДанныеРазделаСписок = АктивныеСтраницы[0].Данные;
					Если ДанныеРазделаСписок.Количество() > 0 Тогда
						
						ДанныеРаздела = ДанныеРазделаСписок[0].Значение;
						ДанныеРазделаСписок[0].Пометка = Ложь; //Регистрируем для передачи на сервер (при редактировании таблицы значения не передаются)
						
					КонецЕсли;
					
					Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
						
						ДанныеДопСтрокРазделаСписок = АктивныеСтраницы[0].ДанныеДопСтрок;
						Если ДанныеДопСтрокРазделаСписок.Количество() > 0 Тогда
							
							ДанныеДопСтрокРаздела = ДанныеДопСтрокРазделаСписок[0].Значение;
							ДанныеРазделаСписок[0].Пометка = Ложь;
							
							СтруктураГруппы = Неопределено;
							Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
							
							Если СохранятьМногострКакТЗ Тогда
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела;
							Иначе
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела[ИмяГруппы];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе  //Для обычных разделов
			
			ДанныеРаздела = Форма["СтруктураДанных" + ИмяРаздела];
			
			Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
				
				СтруктураГруппы = Неопределено;
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ДанныеМногострочногоРаздела = Неопределено Тогда
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		Иначе
			Если ИмяГруппы = Лев(ИмяПоказателя, 11) Тогда //Показатель входит в многострочную часть
				ИмяПок = Лев(ИмяПоказателя, 13);
				СтрИнд = Сред(ИмяПоказателя, 14);
				Если Лев(СтрИнд, 1)="_" Тогда
					СтрИнд = Сред(СтрИнд, 2);
				КонецЕсли;
				Инд = Число(СтрИнд);
				
				Если ИмяГруппы = "П0000200040"
 				 ИЛИ ИмяГруппы = "П0000200051" Тогда
				 
					ДанныеМногострочногоРаздела = ДанныеМногострочногоРаздела[ИмяГруппы]
				 
				КонецЕсли;
				
				Если (Инд > 0) И ДанныеМногострочногоРаздела.Количество() >= Инд Тогда
					ДанныеМногострочногоРаздела[Инд-1][ИмяПок] = ЗначениеПоказателя;
				КонецЕсли; 
			КонецЕсли;
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = "Декларация по налогу на прибыль за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

	ТребуетсяПредупредитьОбИзменениях = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ИзменитьПризнакВыводаПредупрежденияОбИзменениях(
		СтруктураРеквизитовФормы.ИмяОтчета, СтруктураРеквизитовФормы.ИмяФормы, ТребуетсяПредупредитьОбИзменениях, ЭтаФорма);
		
	Если ТребуетсяПредупредитьОбИзменениях Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПредупредитьОбИзменениях", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредупредитьОбИзменениях()
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПредупредитьОбИзменениях(
		СтруктураРеквизитовФормы.ИмяОтчета, СтруктураРеквизитовФормы.ИмяФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницуНаСервере(НаимРаздела, Признак, СниматьРанееУстановленныеПризнаки)

	ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(ЭтаФорма, НаимРаздела, Признак, СниматьРанееУстановленныеПризнаки);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьПризнакВхожденияОрганизацииВГруппуОПВАктивнуюСтраницу(Форма, НаимРаздела, Знач Признак, СниматьРанееУстановленныеПризнаки)
	
	Перем ДанныеСтраницы;
	
	Если НаимРаздела = "Лист02_5" Тогда
		
		АктивныеСтраницы = Форма.ТаблицаСтраницыЛист02_5.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		ДанныеСтраницы = Неопределено;
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			АктивнаяСтраница = АктивныеСтраницы[0];
			Если АктивнаяСтраница.Данные.Количество() > 0 Тогда
				ДанныеСтраницы = АктивнаяСтраница.Данные[0].Значение;
			КонецЕсли;
			Если ДанныеСтраницы = Неопределено Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли; 
		
		ДанныеСтраницы.Вставить("ВГруппуОПВходитОрганизация", Признак);
		
		Если СниматьРанееУстановленныеПризнаки Тогда
			// Если флаг был возведен и на других листах декларации, тогда снимем его.
			Для каждого Страница Из Форма.ТаблицаСтраницыЛист02_5 Цикл
				ДанныеСтраницы = ?(Страница.Данные.Количество() > 0, Страница.Данные[0].Значение, Неопределено);
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ДанныеСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					Если (ДанныеСтраницы.ВГруппуОПВходитОрганизация) И (НЕ Страница.АктивнаяСтраница) И (Признак) Тогда
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = НСтр("ru='Уже введен экземпляр приложения 5 к листу 02 с признаком вхождения организации в группу обособленных подразделений.'");
						Сообщение.Сообщить();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; // СниматьРанееУстановленныеПризнаки
		
	ИначеЕсли НаимРаздела = "Лист02_6а" Тогда
		
		АктивныеСтраницы = Форма.ТаблицаСтраницыЛист02_6а.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		ДанныеСтраницы = Неопределено;
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			АктивнаяСтраница = АктивныеСтраницы[0];
			Если АктивнаяСтраница.Данные.Количество() > 0 Тогда
				ДанныеСтраницы = АктивнаяСтраница.Данные[0].Значение;
			КонецЕсли;
			Если ДанныеСтраницы = Неопределено Тогда
				Возврат;
			КонецЕсли; 
		Иначе
			Возврат;
		КонецЕсли; 
		
		ДанныеСтраницы.Вставить("ВГруппуОПВходитОрганизация", Признак);
		
		Если СниматьРанееУстановленныеПризнаки Тогда
			// Если флаг был возведен и на других листах декларации, тогда снимем его.
			Для каждого Страница Из Форма.ТаблицаСтраницыЛист02_6а Цикл
				ДанныеСтраницы = ?(Страница.Данные.Количество() > 0, Страница.Данные[0].Значение, Неопределено);
				Если ДанныеСтраницы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ДанныеСтраницы.Свойство("ВГруппуОПВходитОрганизация") Тогда
					Если (ДанныеСтраницы.ВГруппуОПВходитОрганизация) И (НЕ Страница.АктивнаяСтраница) И (Признак) Тогда
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = НСтр("ru='Уже введен экземпляр приложения 6а к листу 02 с признаком вхождения организации в группу обособленных подразделений.'");
						Сообщение.Сообщить();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; // СниматьРанееУстановленныеПризнаки
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПримечаниеКПолюОКАТОЛиста02_6а(Форма)
	
	ОбластьОКТМО = Форма.ТабличныйДокумент.Области.П000270000301;
	ОКТМО = ОбластьОКТМО.Значение;
	
	Если НЕ ПустаяСтрока(ОКТМО) Тогда
		ОбластьОКТМО.Примечание.Текст = "Определен код субъекта РФ: " + КодСубъектаРФПоОКТМО(Форма, ОКТМО);
	Иначе
		ОбластьОКТМО.Примечание.Текст = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОКТМОРазделов(Форма, ОКТМО, ИмяРаздела = "")
	
	КодПоМесту = Форма.СтруктураДанныхТитульный.ПоМесту;
	ТаблицаСтраницРаздела = Неопределено;
	
	Если КодПоМесту = "218" ИЛИ КодПоМесту = "231" Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРаздела) ИЛИ ИмяРаздела = "Раздел1_1" Тогда
		Форма.мСтруктураМногостраничныхРазделов.Свойство("Раздел1_1", ТаблицаСтраницРаздела);
		ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
		Для Каждого ЛистРаздела1_1 Из ТаблицаСтраницРаздела Цикл

			ЛистРаздела1_1.Данные[0].Значение.П000110001003 = ?(ЗначениеЗаполнено(ЛистРаздела1_1.Данные[0].Значение.П000110001003), ЛистРаздела1_1.Данные[0].Значение.П000110001003, ОКТМО);
			ЛистРаздела1_1.Данные[0].Пометка = Ложь;
			
			Если ЛистРаздела1_1.АктивнаяСтраница И ИмяРаздела = "Раздел1_1" Тогда
				Форма.ТабличныйДокумент.Области.П000110001003.Значение = ?(ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.П000110001003.Значение), Форма.ТабличныйДокумент.Области.П000110001003.Значение, ОКТМО);
			КонецЕсли;

		КонецЦикла;
				
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРаздела) ИЛИ ИмяРаздела = "Раздел1_2" Тогда
		Форма.мСтруктураМногостраничныхРазделов.Свойство("Раздел1_2", ТаблицаСтраницРаздела);
		ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
		
		Для Каждого ЛистРаздела1_2 Из ТаблицаСтраницРаздела Цикл
			
			ЛистРаздела1_2.Данные[0].Значение.П000120001003 = ?(ЗначениеЗаполнено(ЛистРаздела1_2.Данные[0].Значение.П000120001003), ЛистРаздела1_2.Данные[0].Значение.П000120001003, ОКТМО);
			ЛистРаздела1_2.Данные[0].Пометка = Ложь;
			
			Если ЛистРаздела1_2.АктивнаяСтраница И ИмяРаздела = "Раздел1_2" Тогда
				Форма.ТабличныйДокумент.Области.П000120001003.Значение = ?(ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.П000120001003.Значение), Форма.ТабличныйДокумент.Области.П000120001003.Значение, ОКТМО);
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КодСубъектаРФПоОКТМО(Форма, ОКТМО)
	
	Результат = "99"; // По умолчанию - "Другие территории"
	
	Для Каждого СтрокаСоответствия Из Форма.СоответствиеОКАТОСубъектамРФ Цикл
		Если Лев(ОКТМО, СтрокаСоответствия.ДлинаМаски) = СтрокаСоответствия.МаскаОКАТО Тогда
			Результат = СтрокаСоответствия.КодСубъекта;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ИзвлечьСохраненныеПоказателиОтчета();
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если Найти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если Найти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	ИзвлечьСохраненныеПоказателиОтчета();
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ИзвлечьСохраненныеПоказателиОтчета()
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						СтруктураДопСтрок = Новый Структура;
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
							
							СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
							
						КонецЦикла;
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
	ДополнитьСохраненныеПоказателиОтчета();
	
КонецФункции

&НаСервере
Процедура ДополнитьСохраненныеПоказателиОтчета()
	
	Раздел1_1 = мДанныеОтчета.Раздел1_1;
	Для Каждого Страница Из Раздел1_1 Цикл
		Данные = Страница.Данные[0].Значение;
		Строка040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Данные.П000110004003);
		Строка050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Данные.П000110005003);
		Данные.Вставить("П100110004003", Строка040 - Строка050);
		
		Строка070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Данные.П000110007003);
		Строка080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Данные.П000110008003);
		Данные.Вставить("П100110007003", Строка070 - Строка080);
	КонецЦикла;
	
	Лист02_2 = мДанныеОтчета.Лист02_2;
	Для Каждого Страница Из Лист02_2 Цикл
		Данные = Страница.Данные[0].Значение;
		
		НомерСтроки = 0;
		Для Инд = 1 По 3 Цикл
			Год = Данные["П000220040" + Инд + "01"];
			Сумма = Данные["П000220040" + Инд + "03"];
			
			Если ЗначениеЗаполнено(Год) ИЛИ ЗначениеЗаполнено(Сумма) Тогда
				НомерСтроки = НомерСтроки + 1;
				Данные.Вставить("П100220040101_" + СтрокаЧГ0(НомерСтроки), Год);
				Данные.Вставить("П100220040103_" + СтрокаЧГ0(НомерСтроки), Сумма);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Лист02_4 = мДанныеОтчета.Лист02_4;
	Для Каждого Страница Из Лист02_4 Цикл
		Данные = Страница.Данные[0].Значение;
		
		НомерСтроки = 0;
		Для Инд = 4 По 13 Цикл
			Год = Данные["П0002400" + Формат(Инд * 10, "ЧЦ=3; ЧВН=") + "01"];
			Сумма = Данные["П0002400" + Формат(Инд * 10, "ЧЦ=3; ЧВН=") + "03"];
			
			Если ЗначениеЗаполнено(Год) ИЛИ ЗначениеЗаполнено(Сумма) Тогда
				НомерСтроки = НомерСтроки + 1;
				Данные.Вставить("П100240004001_" + СтрокаЧГ0(НомерСтроки), Год);
				Данные.Вставить("П100240004003_" + СтрокаЧГ0(НомерСтроки), Сумма);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Лист02_5 = мДанныеОтчета.Лист02_5;
	Для Каждого Страница Из Лист02_5 Цикл
		Данные = Страница.Данные[0].Значение;
		Строка100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Данные.П000250010003);
		Строка110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Данные.П000250011003);
		Данные.Вставить("П100250010003", Строка100 - Строка110);
	КонецЦикла;
	
	Лист02_6 = мДанныеОтчета.Лист02_6;
	Для Каждого Страница Из Лист02_6 Цикл
		Данные = Страница.Данные[0].Значение;
		Строка100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Данные.П000260010003);
		Строка110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Данные.П000260011003);
		Данные.Вставить("П100260010003", Строка100 - Строка110);
	КонецЦикла;
	
	Лист03А = мДанныеОтчета.Лист03А;
	Для Каждого Страница Из Лист03А Цикл
		Данные = Страница.Данные[0].Значение;
		Данные.Вставить("П100310000500", Формат(Данные["П000310000500"], "ЧГ="));
		
		НомерСтроки = 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		ЗначениеПоказателя = Неопределено;
		
		Пока Данные.Свойство("П000330000505" + Постфикс, ЗначениеПоказателя) Цикл
			
			Данные.Вставить("П100330000501" + Постфикс, ?(ЗначениеЗаполнено(ЗначениеПоказателя), "А", ""));
			
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
			
		КонецЦикла;
	КонецЦикла;
	
	Лист03Б = мДанныеОтчета.Лист03Б;
	Для Каждого Страница Из Лист03Б Цикл
		Данные = Страница.Данные[0].Значение;
		НомерСтроки = 1;
		Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
		ЗначениеПоказателя = Неопределено;
		
		Пока Данные.Свойство("П000340000505" + Постфикс, ЗначениеПоказателя) Цикл
			
			Данные.Вставить("П100340000501" + Постфикс, ?(ЗначениеЗаполнено(ЗначениеПоказателя), "Б", ""));
			
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Функция ПараметрыВыгрузкиОтчета()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	
	ПараметрыВыгрузки.Вставить("КодНО",   СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("НомКорр", Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("ОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("Тлф",   СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",  СокрЛП(Титульный.КПП1));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыОрг));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИНН_Реорг));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КПП_Реорг));
	
	ПараметрыВыгрузки.Вставить("ПрПодп", СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетностьКлиентСервер.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПодпНаимОрг", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", СокрЛП(Титульный.ДокУпПред));
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_PRIB");
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки506");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ВыгрузкаВозможна(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел1_1(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел1_2(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел1_3(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_1(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_2(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_3(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_4(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_5(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_6(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_6а(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_6б(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист03А(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист03Б(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист04(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист05(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист07(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки)
	
	КодыПериодовСтр = "21,31,33,34,13,14,15,16,35,36,37,38,39,40,41,42,43,44,45,46,57,58,59,60,61,62,63,64,65,66,67,68,50";
	РазрешенныеКодыПериодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПериодовСтр);
	
	ВозможныеКодыПоМесту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("213,214,215,216,218,220,223,225,226,228,229,231,234,235,236,237");
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан КПП организации", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	Иначе
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
			Если ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код места, по которому представляется документ", "Титульный", "ПоМесту");
				СтатусПроверки = Ложь;
			Иначе
				Символы56КПП = Сред(ПараметрыВыгрузки.КППОрг, 5, 2);
				Если ПараметрыВыгрузки.ПоМесту = "213" Тогда
					Если НЕ (Символы56КПП = "50") Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Если код места представления декларации равен 213, 5-й и 6-й символы КПП организации должны быть равны ""50""", "Титульный", "КПП1");
						СтатусПроверки = Ложь;
					КонецЕсли;
				ИначеЕсли ПараметрыВыгрузки.ПоМесту = "218" Тогда
					Если НЕ (Символы56КПП = "50" ИЛИ Символы56КПП = "01" ИЛИ Символы56КПП = "4U") Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Если код места представления декларации равен 218, 5-й и 6-й символы КПП организации должны быть равны ""50"", ""01"" или ""4U""", "Титульный", "КПП1");
						СтатусПроверки = Ложь;
					КонецЕсли;
				Иначе
					Если Символы56КПП = "4U" Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Если код места представления декларации равен " + ПараметрыВыгрузки.ПоМесту + ", 5-й и 6-й символы КПП организации не должны быть равны ""4U""", "Титульный", "КПП1");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.Период) Тогда
		ТекстОписанияОшибки = "На титульном листе не задан код налогового периода";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли РазрешенныеКодыПериодов.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		ТекстОписанияОшибки = "На титульном листе неверно задан код налогового периода";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, ТекстОписанияОшибки, "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указано полное наименование организации (обособленного подразделения)", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодНО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код налогового органа", "Титульный", "КодИМНС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задан код места, по которому представляется документ", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе не задано значение кода вида деятельности по ОКВЭД", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задана фамилия подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано имя подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано наименование документа, удостоверяющего полномочия представителя", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код формы реорганизации", "Титульный", "КодФормыОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			
			ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
			Если ДлинаИННРеорг <> 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ИННРеорг) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации", "Титульный", "ИНН_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации", "Титульный", "КПП_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел1_1(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	РазделНеВыгружается = (Найти("231,229,235", ПараметрыВыгрузки.ПоМесту) > 0);
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Раздел1_1");
	
	РазделПуст = Истина;
	
	Раздел1_1 = мДанныеОтчета.Раздел1_1;
	Для Каждого СтраницаРаздела Из Раздел1_1 Цикл
		НомерСтраницы = Раздел1_1.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			Если РазделНеВыгружается Тогда
				Продолжить;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеСтраницы.П000110001003);
			Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,"На странице " + НомерСтраницы + " раздела 1.1 не указан код по ОКТМО", "Раздел1_1", "П000110001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код по ОКТМО некорректной длины", "Раздел1_1", "П000110001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000110004003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000110005003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110003003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 не указан код бюджетной классификации", "Раздел1_1", "П000110003003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110003003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код бюджетной классификации некорректной длины", "Раздел1_1", "П000110003003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000110004003) И ЗначениеЗаполнено(ДанныеСтраницы.П000110005003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 заданы одновременно сумма налога к доплате и сумма налога к уменьшению (в Федеральный бюджет)", "Раздел1_1", "П000110004003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000110007003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000110008003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110006003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 не указан код бюджетной классификации", "Раздел1_1", "П000110006003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110006003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 задан код бюджетной классификации некорректной длины", "Раздел1_1", "П000110006003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000110007003) И ЗначениеЗаполнено(ДанныеСтраницы.П000110008003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.1 заданы одновременно сумма налога к доплате и сумма налога к уменьшению (в бюджет субъекта Российской Федерации)", "Раздел1_1", "П000110007003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РазделПуст Тогда
		Если НЕ РазделНеВыгружается Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел 1.1", "Раздел1_1", "П000110001003");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если РазделНеВыгружается Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "При заданных параметрах декларации раздел 1.1 не должен заполняться", "Раздел1_1", "П000110001003");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел1_2(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	РазделНеВыгружается = (Найти("231,229", ПараметрыВыгрузки.ПоМесту) > 0 ИЛИ Найти("34,46,50,68", ПараметрыВыгрузки.Период) > 0);
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Раздел1_2");
	
	РазделПуст = Истина;
	
	Раздел1_2 = мДанныеОтчета.Раздел1_2;
	Для Каждого СтраницаРаздела Из Раздел1_2 Цикл
		НомерСтраницы = Раздел1_2.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если РазделНеВыгружается Тогда
				Продолжить;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеСтраницы.П000120001003);
			Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,"На странице " + НомерСтраницы + " раздела 1.2 не указан код по ОКТМО", "Раздел1_2", "П000120001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 задан код по ОКТМО некорректной длины", "Раздел1_2", "П000120001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000120012003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120013003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120014003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120011003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 не указан код бюджетной классификации", "Раздел1_2", "П000120011003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120011003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 задан код бюджетной классификации некорректной длины", "Раздел1_2", "П000120011003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000120022003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120023003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120024003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120021003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 не указан код бюджетной классификации", "Раздел1_2", "П000120021003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120021003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.2 задан код бюджетной классификации некорректной длины", "Раздел1_2", "П000120021003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120012003) И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120013003) И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120014003) Тогда
			ДанныеСтраницы.П000120011003 = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120022003) И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120023003) И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120024003) Тогда
			ДанныеСтраницы.П000120021003 = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120011003) И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120021003) Тогда
			ДанныеСтраницы.П000120001003 = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ РазделПуст И РазделНеВыгружается Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "При заданных параметрах декларации раздел 1.2 не должен заполняться", "Раздел1_2", "П000110001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Раздел1_3(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "231");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Раздел1_3");
	
	РазделПуст = Истина;
	
	Раздел1_3 = мДанныеОтчета.Раздел1_3;
	Для Каждого СтраницаРаздела Из Раздел1_3 Цикл
		НомерСтраницы = Раздел1_3.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130001003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не указан код вида платежа", "Раздел1_3", "П000130001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеСтраницы.П000130002003);
			Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не указан код по ОКТМО", "Раздел1_3", "П000130002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 указан код по ОКТМО некорректной длины", "Раздел1_3", "П000130002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130003003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не указан код бюджетной классификации", "Раздел1_3", "П000130003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000130003003)) <> 20 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 указан код бюджетной классификации некорректной длины", "Раздел1_3", "П000130003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			СуществуетХотяБыОднаЗаполненнаяСтрока = Ложь;
			НомСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000130004001_" + Формат(НомСтроки, "ЧГ=")) Цикл
				СтрП000130004001 = ДанныеСтраницы["П000130004001_" + Формат(НомСтроки, "ЧГ=")];
				СтрП000130004003 = ДанныеСтраницы["П000130004003_" + Формат(НомСтроки, "ЧГ=")];
				Если ЗначениеЗаполнено(СтрП000130004001) ИЛИ ЗначениеЗаполнено(СтрП000130004003) Тогда
					СуществуетХотяБыОднаЗаполненнаяСтрока = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрП000130004003) И НЕ ЗначениеЗаполнено(СтрП000130004001) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 в строке " + Формат(НомСтроки, "ЧГ=") + " не указан срок уплаты", "Раздел1_3", "П000130004001_" + Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомСтроки = НомСтроки + 1;
			КонецЦикла;
			Если НЕ СуществуетХотяБыОднаЗаполненнаяСтрока Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела 1.3 не заполнена ни одна строка 040", "Раздел1_3", "П000130004001_1", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РазделПуст И РазделВыгружается Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел 1.3", "Раздел1_3", "П000130001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист02(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)

	РазделНеВыгружается = (Найти("220,231", ПараметрыВыгрузки.ПоМесту) > 0);
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист02");
	
	РазделПуст = Истина;
	
	Лист02 = мДанныеОтчета.Лист02;
	Для Каждого СтраницаРаздела Из Лист02 Цикл
		НомерСтраницы = Лист02.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если РазделНеВыгружается Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000200000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" не указан признак налогоплательщика", "Лист02", "П000200000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка180 = ДанныеСтраницы.П000200018003;
			Строка240 = ДанныеСтраницы.П000200024003;
			Если Строка240 > Строка180 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" значение в строке 240 превышает значение в строке 180", "Лист02", "П000200024003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка190 = ДанныеСтраницы.П000200019003;
			Строка250 = ДанныеСтраницы.П000200025003;
			Если Строка250 > Строка190 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" значение в строке 250 превышает значение в строке 190", "Лист02", "П000200025003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка200 = ДанныеСтраницы.П000200020003;
			Строка260 = ДанныеСтраницы.П000200026003;
			Если Строка260 > Строка200 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 02"" значение в строке 260 превышает значение в строке 200", "Лист02", "П000200026003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ РазделПуст Тогда
		Если РазделНеВыгружается Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Заполнение раздела ""Лист 02"" в декларации с кодом по месту нахождения (учета) 220 или 231 не предусмотрено", "Лист02", "П000200000100");
			СтатусПроверки = Ложь;
		Иначе
			Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02", "П000200000100") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Лист 02""", "Лист02", "П000200000100");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист02_1(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	РазделВыгружается = (ЗначениеЗаполнено(ПараметрыВыгрузки.Период) И Найти("21,31,33,34,13,14,15,16,59,62,65,68", ПараметрыВыгрузки.Период) > 0);
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист02_1");
	
	РазделПуст = Истина;
	
	Лист02_1 = мДанныеОтчета.Лист02_1;
	
	Для Каждого СтраницаРаздела Из Лист02_1 Цикл
		НомерСтраницы = Лист02_1.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			РазделПуст = Ложь;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000210000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 1 к листу 02"" не указан признак налогоплательщика", "Лист02_1", "П000210000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_1", "П000210000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 1 к листу 02""", "Лист02_1", "П000210000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист02_2(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	РазделВыгружается = (ЗначениеЗаполнено(ПараметрыВыгрузки.Период) И Найти("21,31,33,34,13,14,15,16,59,62,65,68", ПараметрыВыгрузки.Период) > 0);
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист02_2");
	
	РазделПуст = Истина;
	
	Лист02_2 = мДанныеОтчета.Лист02_2;
	
	Для Каждого СтраницаРаздела Из Лист02_2 Цикл
		НомерСтраницы = Лист02_2.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			РазделПуст = Ложь;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000220000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" не указан признак налогоплательщика", "Лист02_2", "П000220000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				Если ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы.П000220013503)) И Найти("1,2", ДанныеСтраницы.П000220013503) = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" указан некорректный код метода начисления амортизации", "Лист02_2", "П000220013503", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_2", "П000220000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 2 к листу 02""", "Лист02_2", "П000220000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист02_3(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист02_3");
	
	Лист02_3 = мДанныеОтчета.Лист02_3;
	
	Для Каждого СтраницаРаздела Из Лист02_3 Цикл
		НомерСтраницы = Лист02_3.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000230000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 3 к листу 02"" не указан признак налогоплательщика", "Лист02_3", "П000230000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка210 = ДанныеСтраницы.П000230021003;
			Строка211 = ДанныеСтраницы.П000230021103;
			Если Строка211 > Строка210 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 3 к листу 02"" значение в строке 211 превышает значение в строке 210", "Лист02_3", "П000230021103", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка220 = ДанныеСтраницы.П000230022003;
			Строка221 = ДанныеСтраницы.П000230022103;
			Если Строка221 > Строка220 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 3 к листу 02"" значение в строке 221 превышает значение в строке 220", "Лист02_3", "П000230022103", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			ДанныеСтраницы.П000230000100 = "";
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_3", "П000230000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 3 к листу 02""", "Лист02_3", "П000230000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист02_4(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист02_4");
	
	Лист02_4 = мДанныеОтчета.Лист02_4;
	
	СоответствиеИменЯчеек = Новый Соответствие;
	СоответствиеИменЯчеек.Вставить("П000240004001", "П000240004003");
	СоответствиеИменЯчеек.Вставить("П000240005001", "П000240005003");
	СоответствиеИменЯчеек.Вставить("П000240006001", "П000240006003");
	СоответствиеИменЯчеек.Вставить("П000240007001", "П000240007003");
	СоответствиеИменЯчеек.Вставить("П000240008001", "П000240008003");
	СоответствиеИменЯчеек.Вставить("П000240009001", "П000240009003");
	СоответствиеИменЯчеек.Вставить("П000240010001", "П000240010003");
	СоответствиеИменЯчеек.Вставить("П000240011001", "П000240011003");
	СоответствиеИменЯчеек.Вставить("П000240012001", "П000240012003");
	СоответствиеИменЯчеек.Вставить("П000240013001", "П000240013003");
	
	Лист02_4 = мДанныеОтчета.Лист02_4;
	Для Каждого СтраницаРаздела Из Лист02_4 Цикл
		НомерСтраницы = Лист02_4.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Лист02_4", ДеревоВыгрузки) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000240000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" не указан признак налогоплательщика", "Лист02_4", "П000240000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Для Каждого Эл Из СоответствиеИменЯчеек Цикл
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Значение]) И НЕ ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" в строке " + Сред(Эл.Ключ, 9, 3) + " не задан год", "Лист02_4", Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ]) И СтрДлина(СокрЛП(ДанныеСтраницы[Эл.Ключ])) <> 4 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" в строке " + Сред(Эл.Ключ, 9, 3) + " задано значение года некорректной длины", "Лист02_4", Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела("Лист02_4", "П000240000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 4 к листу 02""", "Лист02_4", "П000240000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист02_5(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "220");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист02_5");
	
	РазделПуст = Истина;
	
	Лист02_5 = мДанныеОтчета.Лист02_5;
	
	Для Каждого СтраницаРаздела Из Лист02_5 Цикл
		НомерСтраницы = Лист02_5.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан признак налогоплательщика", "Лист02_5", "П000250000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250001000) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан признак ""Расчет составлен""", "Лист02_5", "П000250001000", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250002001) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан КПП обособленного подразделения", "Лист02_5", "П000250002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000250002001)) <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" указан КПП обособленного подразделения некорректной длины", "Лист02_5", "П000250002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250002003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указано наименование обособленного подразделения", "Лист02_5", "П000250002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250002002) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" не указан признак возложения на обособленное подразделение обязанности по уплате налога", "Лист02_5", "П000250002002", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000250010003) И ЗначениеЗаполнено(ДанныеСтраницы.П000250011003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 5 к листу 02"" заданы одновременно сумма налога к доплате и сумма налога к уменьшению", "Лист02_5", "П000250010003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			ДанныеСтраницы.П000250000100 = "";
		КонецЕсли;
	КонецЦикла;
	
	Если РазделПуст И РазделВыгружается Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел ""Приложение 5 к листу 02""", "Лист02_5", "П000250000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист02_6(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	ЭтоКонсолидированнаяГруппа = (ПараметрыВыгрузки.ПоМесту = "218");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист02_6");
	
	Лист02_6 = мДанныеОтчета.Лист02_6;
	
	ЕстьЗаполненныеЛисты = Ложь;
	НомерПервойЗаполненнойСтраницы = 0;
	
	ДанныеРаздела = мДанныеОтчета.Лист02_6;
	Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
		НомерСтраницы = ДанныеРаздела.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ЕстьЗаполненныеЛисты = Истина;
			НомерПервойЗаполненнойСтраницы = ?(НомерПервойЗаполненнойСтраницы = 0, НомерСтраницы, НомерПервойЗаполненнойСтраницы);
			Если ЭтоКонсолидированнаяГруппа Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000260000101) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" не указан ИНН участника (обособленного подразделения)", "Лист02_6", "П000260000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000260000201) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" не указан КПП участника (обособленного подразделения)", "Лист02_6", "П000260000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000260000201)) <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" указан КПП участника (обособленного подразделения) некорректной длины", "Лист02_6", "П000260000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ОКТМО = СокрЛП(ДанныеСтраницы.П000260000301);
				Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" не указан ОКТМО участника (обособленного подразделения)", "Лист02_6", "П000260000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" указан ОКТМО участника (обособленного подразделения) некорректной длины", "Лист02_6", "П000260000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000260000401) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" не указано наименование участника (обособленного подразделения)", "Лист02_6", "П000260000401", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000260000601) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" не указан код субъекта РФ", "Лист02_6", "П000260000601", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000260000601)) <> 2 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" указан код субъекта РФ некорректной длины", "Лист02_6", "П000260000601", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000260010003) И ЗначениеЗаполнено(ДанныеСтраницы.П000260011003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6 к листу 02"" заданы одновременно сумма налога к доплате и сумма налога к уменьшению", "Лист02_6", "П000260010003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			// Очистить код региона на пустой странице, если заполнен
			ДанныеСтраницы.П000260000601 = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаполненныеЛисты И НЕ ЭтоКонсолидированнаяГруппа Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Листы приложения 6 к листу 02 заполняются только при коде ""по месту нахождения (учета)"" на титульном листе равном 218", "Лист02_6", "П000260000101", НомерПервойЗаполненнойСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист02_6а(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист02_6а");
	
	ЭтоКонсолидированнаяГруппа = (ПараметрыВыгрузки.ПоМесту = "218");
	
	ЕстьЗаполненныеЛисты = Ложь;
	НомерПервойЗаполненнойСтраницы = 0;
	
	Лист02_6а = мДанныеОтчета.Лист02_6а;
	
	КоличествоЛистовСПризнакомНалогоплательщика1 = 0;
	НомерПервогоЛистаСПризнакомНалогоплательщика1 = 0;
	
	Для Каждого СтраницаРаздела Из Лист02_6а Цикл
		НомерСтраницы = Лист02_6а.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			ЕстьЗаполненныеЛисты = Истина;
			НомерПервойЗаполненнойСтраницы = ?(НомерПервойЗаполненнойСтраницы = 0, НомерСтраницы, НомерПервойЗаполненнойСтраницы);
			Если ЭтоКонсолидированнаяГруппа Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000270000101) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" не указан ИНН участника (обособленного подразделения)", "Лист02_6а", "П000270000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000270000201) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" не указан КПП участника (обособленного подразделения)", "Лист02_6а", "П000270000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000270000201)) <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" указан КПП участника (обособленного подразделения) некорректной длины", "Лист02_6а", "П000270000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ОКТМО = СокрЛП(ДанныеСтраницы.П000270000301);
				Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" не указан ОКАТО участника (обособленного подразделения)", "Лист02_6а", "П000270000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" указан ОКАТО участника (обособленного подразделения) некорректной длины", "Лист02_6а", "П000270000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000270000401) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" не указано наименование участника (обособленного подразделения)", "Лист02_6а", "П000270000401", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000270000501) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" не указан признак ""Расчет составлен""", "Лист02_6а", "П000270000501", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли Найти("1,2,3,4", ДанныеСтраницы["П000270000501"]) = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Приложение 6а к листу 02"" указано некорректное значение признака ""Расчет составлен""", "Лист02_6а", "П000270000501", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				РасчетСоставлен = ДанныеСтраницы.П000270000501;
				Если РасчетСоставлен = "1" Тогда
					КоличествоЛистовСПризнакомНалогоплательщика1 = КоличествоЛистовСПризнакомНалогоплательщика1 + 1;
					НомерПервогоЛистаСПризнакомНалогоплательщика1 = ?(НомерПервогоЛистаСПризнакомНалогоплательщика1 = 0, НомерСтраницы, НомерПервогоЛистаСПризнакомНалогоплательщика1);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаполненныеЛисты И НЕ ЭтоКонсолидированнаяГруппа Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Листы раздела ""Приложение 6а к Листу 02"" заполняются только при коде ""по месту нахождения (учета)"" на титульном листе равном 218", "Лист02_6а", "П000270000101", НомерПервойЗаполненнойСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если КоличествоЛистовСПризнакомНалогоплательщика1 > 1 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Лист раздела ""Приложение 6а к Листу 02"" с признаком ""Расчет составлен"" 1 может быть заполнент только в единственном экземпляре!", "Лист02_6а", "П000270000101", НомерПервогоЛистаСПризнакомНалогоплательщика1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист02_6б(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	ЭтоКонсолидированнаяГруппа = (ПараметрыВыгрузки.ПоМесту = "218");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист02_6б");
	
	ДанныеРаздела = мДанныеОтчета.Лист02_6б;
	
	Если НЕ СтраницаПуста(ДанныеРаздела, ПоказателиРаздела) Тогда
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			НомерСтроки = 1;
			Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
			
			Пока ДанныеРаздела.Свойство("П000280001003" + Постфикс) Цикл
				
				БлокЗаполнен = ЗначениеЗаполнено(ДанныеРаздела["П000280002003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280002103" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280003003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280003103" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280004003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280005003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280006003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280006103" + Постфикс]);
				
				Если БлокЗаполнен Тогда
					ИмяОбластиИНН = "П000280001003" + Постфикс;
					Если НЕ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбластиИНН]) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В строке " + СтрокаЧГ0(НомерСтроки) + " раздела ""Приложение 6б к листу 02"" не указан ИНН участника консолидированной группы налогоплательщиков", "Лист02_6б", ИмяОбластиИНН);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
				
			КонецЦикла;
			
		Иначе
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Раздел ""Приложение 6б к Листу 02"" заполняются только при коде ""по месту нахождения (учета)"" на титульном листе равном 218", "Лист02_6б", "П000280001003_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист03А(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "231");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист03А");
	
	РазделПуст = Истина;
	
	Лист03А = мДанныеОтчета.Лист03А;
	
	Для Каждого СтраницаРаздела Из Лист03А Цикл
		НомерСтраницы = Лист03А.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не указана категория налогового агента", "Лист03А", "П000310000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ДанныеСтраницы.П000310000100 <> "1" И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не указан ИНН организации - эмитента ценных бумаг", "Лист03А", "П000310000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000300) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не указан вид дивидендов", "Лист03А", "П000310000300", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000400) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не задан налоговый (отчетный) период", "Лист03А", "П000310000400", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000500) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" не указан отчетный год", "Лист03А", "П000310000500", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(Формат(ДанныеСтраницы.П000310000500, "ЧГ=")) <> 4 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел А)"" задан отчетный год некорректной длины", "Лист03А", "П000310000500", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РазделПуст И РазделВыгружается Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Должен быть заполнен раздел ""Лист 03 (раздел А)"" при коде ""по месту нахождения (учета)"" на титульном листе равном 231", "Лист03А", "П000310000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист03Б(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "231");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист03Б");
	
	РазделПуст = Истина;
	
	Лист03Б = мДанныеОтчета.Лист03Б;
	
	Для Каждого СтраницаРаздела Из Лист03Б Цикл
		НомерСтраницы = Лист03Б.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			РазделПуст = Ложь;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000320000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 03 (раздел Б)"" не указан вид дохода", "Лист03Б", "П000320000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист04(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист04");
	
	Лист04 = мДанныеОтчета.Лист04;
	
	Для Каждого СтраницаРаздела Из Лист04 Цикл
		НомерСтраницы = Лист04.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРаздела) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000400000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 04"" не указан вид дохода", "Лист04", "П000400000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист05(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист05");
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2015-01-01' Тогда
		ИмяРодительскогоУзла = "НалБазОпОсобС";
	Иначе
		ИмяРодительскогоУзла = "НалБазОпОсобН";
	КонецЕсли;
	
	ПоказателиРазделаДляУзла = Новый Массив;
	
	Для каждого ПоказательРаздела Из ПоказателиРаздела Цикл
		Если ПоказательРаздела.Родитель <> Неопределено И ПоказательРаздела.Родитель.Код = ИмяРодительскогоУзла Тогда
			ПоказателиРазделаДляУзла.Добавить(ПоказательРаздела);
		КонецЕсли;
	КонецЦикла;
	
	Лист05 = мДанныеОтчета.Лист05;
	
	Для Каждого СтраницаРаздела Из Лист05 Цикл
		НомерСтраницы = Лист05.Индекс(СтраницаРаздела) + 1;
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, ПоказателиРазделаДляУзла) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000500000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерСтраницы + " раздела ""Лист 05"" не указан вид операции", "Лист05", "П000500000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнение_Лист07(ПараметрыВыгрузки, ДеревоВыгрузки, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "229");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, "Лист07");
	
	ДанныеРаздела = мДанныеОтчета.Лист07;
	
	КодВидаПоступления = Неопределено;
	СуществуетХотяБыОднаЗаполненнаяСтрока = Ложь;
	
	Если НЕ СтраницаПуста(ДанныеРаздела, ПоказателиРаздела) Тогда
		Если РазделВыгружается Тогда
			
			НомерСтроки = 1;
			Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
			
			Пока ДанныеРаздела.Свойство("П000700001001" + Постфикс, КодВидаПоступления) Цикл
				
				БлокЗаполнен = ЗначениеЗаполнено(ДанныеРаздела["П000700001002" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001004" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001005" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001006" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001007" + Постфикс]);
						
				Если БлокЗаполнен Тогда
					СуществуетХотяБыОднаЗаполненнаяСтрока = Истина;
					Если НЕ ЗначениеЗаполнено(КодВидаПоступления) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Лист 07"" в строке " + Формат(НомерСтроки, "ЧГ=") + " не указан код вида поступлений", "Лист07", "П000700001001" + Постфикс);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(СокрЛП(КодВидаПоступления)) <> 3 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Лист 07"" в строке " + Формат(НомерСтроки, "ЧГ=") + " указан код вида поступлений некорректной длины", "Лист07", "П000700001001" + Постфикс);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				Постфикс = "_" + СтрокаЧГ0(НомерСтроки);
				
			КонецЦикла;
			
			Если НЕ СуществуетХотяБыОднаЗаполненнаяСтрока Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Лист 07"" не заполнена ни одна строка", "Лист07", "П000700001001_1");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(Раздел, КодПокзателя)
	
	ДанныеРаздела = мДанныеОтчета[Раздел];
	ЗначенияПоказателя = Новый Массив;
	Для Каждого Стр Из ДанныеРаздела Цикл
		ЗначениеПоказателя = Стр.Данные[0].Значение[КодПокзателя];
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Если ЗначенияПоказателя.Найти(ЗначениеПоказателя) <> Неопределено Тогда
				Возврат Истина;
			Иначе
				ЗначенияПоказателя.Добавить(ЗначениеПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

&НаСервере
Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

&НаСервере
Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	// Лист 02, ставки налогов.
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200014003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200015003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200016003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200017003");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000250006003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000320002003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000400003003");
	
	// Приложение №6 к Листу 02, код региона
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000260000601");
	
	// Раздел 1.2.
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120000103");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120001003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120011003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120021003");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000210000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000230000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000240000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000250000100");
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Родитель <> Неопределено И Пок.Родитель.Многострочность
		 ИЛИ (Лев(Пок.Ключ, 9) = "П00033000" ИЛИ Лев(Пок.Ключ, 9) = "П00034000") Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") И НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ЗначениеПоказателя = "";
		ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип ("Число") Тогда
			ЗначениеПоказателя = XMLСтрока(ЗначениеПоказателя);
		Иначе
			ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателя), Лев(СокрЛП(ЗначениеПоказателя), МаксШирина), ЗначениеПоказателя);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	КоличествоВставленныхУзлов = 0;
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если КоличествоВставленныхУзлов > 0 Тогда
			КоличествоВставленныхУзлов = КоличествоВставленныхУзлов - 1;
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ДанныеРаздела = мДанныеОтчета[Стр.Раздел];
				Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
					УзелСтраницы = НовыйУзелИзПрототипа(Стр);
					УзелСтраницы.Многостраничность = Ложь;
					ВиртуальныеДанные = Новый Структура(Стр.Раздел, СтраницаРаздела.Данные[0].Значение);
					ЗаполнитьДаннымиУзел(ВиртуальныеДанные, УзелСтраницы);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			ИначеЕсли Стр.Многострочность Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						ДанныеРаздела = ПараметрыВыгрузки[Стр.Раздел];
					ИначеЕсли мДанныеОтчета.Свойство("ПолеТабличногоДокумента" + Стр.Раздел) Тогда
						ДанныеРаздела = мДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел];
					Иначе
						ДанныеРаздела = ПараметрыВыгрузки;
					КонецЕсли;
				Иначе
					ДанныеРаздела = ПараметрыВыгрузки;
				КонецЕсли;
				ИмяКонтрольногоПоказателя = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Стр);
				
				НомерСтроки = 1;
				Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
				УдалятьПрототипУзла = Ложь;
				
				Пока ДанныеРаздела.Свойство(ИмяКонтрольногоПоказателя + Постфикс) Цикл
					УдалятьПрототипУзла = Истина;
					УзелСтроки = НовыйУзелИзПрототипа(Стр);
					УзелСтроки.Многострочность = Ложь;
					ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(УзелСтроки, Постфикс);
					ЗаполнитьДаннымиУзел(ДанныеРаздела, УзелСтроки);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
					
					НомерСтроки = НомерСтроки + 1;
					Постфикс = "_" + Формат(НомерСтроки, "ЧГ=0");
				КонецЦикла;
				
				Если УдалятьПрототипУзла Тогда
					РегламентированнаяОтчетность.УдалитьУзел(Стр);
					КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				КонецЕсли;
				
			Иначе
				Если Стр.Код = "Прибыль" Тогда
					ЗаполнитьСодержательнуюЧасть(ПараметрыВыгрузки, Стр);
				Иначе
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) И НЕ ПустаяСтрока(Стр.Ключ) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						// Данные представлены в виде раздела в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Раздел][Стр.Ключ];
						ВывестиПоказательВXML(Стр, ЗначениеЭлемента);
					ИначеЕсли ПараметрыВыгрузки.Свойство(Стр.Ключ) Тогда
						// Данные заданы в виде значения в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Ключ];
						ВывестиПоказательВXML(Стр, ЗначениеЭлемента);
					ИначеЕсли мДанныеОтчета.Свойство("ПолеТабличногоДокумента" + Стр.Раздел)
					        И мДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел].Свойство(Стр.Ключ) Тогда
						// Данные находятся в сохраненных данных отчета.
						ЗначениеЭлемента = мДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел][Стр.Ключ];
						ВывестиПоказательВXML(Стр, ЗначениеЭлемента);
					Иначе
						// Данные не обнаружены
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(Узел, Постфикс)
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(СтрокаУзла, Постфикс);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				СтрокаУзла.Ключ = СокрЛП(СтрокаУзла.Ключ) + Постфикс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Узел)
	
	Результат = Неопределено;
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Результат = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(СтрокаУзла);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				Результат = СокрЛП(СтрокаУзла.Ключ);
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(ПараметрыВыгрузки, УзелРодитель)
	
	Узел_НалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалПУ");
	
	Раздел1_1 = мДанныеОтчета.Раздел1_1;
	ПрототипУзла_НалПУАв = ПолучитьПодчиненныйЭлемент(Узел_НалПУ, "НалПУАв");
	Для Каждого СтраницаРаздела Из Раздел1_1 Цикл
		ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		Узел_НалПУАв = НовыйУзелИзПрототипа(ПрототипУзла_НалПУАв);
		ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_НалПУАв);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалПУАв);
	
	Раздел1_2 = мДанныеОтчета.Раздел1_2;
	ПрототипУзла_НалПУМес = ПолучитьПодчиненныйЭлемент(Узел_НалПУ, "НалПУМес");
	Для Каждого СтраницаРаздела Из Раздел1_2 Цикл
		ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		Узел_НалПУМес = НовыйУзелИзПрототипа(ПрототипУзла_НалПУМес);
		ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_НалПУМес);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалПУМес);
	
	Узел_НалПУПроц = ПолучитьПодчиненныйЭлемент(Узел_НалПУ, "НалПУПроц");
	
	Раздел1_3 = мДанныеОтчета.Раздел1_3;
	ПрототипУзла_НалПУПроц = ПолучитьПодчиненныйЭлемент(Узел_НалПУ, "НалПУПроц");
	Для Каждого СтраницаРаздела Из Раздел1_3 Цикл
		ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		Узел_НалПУПроц = НовыйУзелИзПрототипа(ПрототипУзла_НалПУПроц);
		ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_НалПУПроц);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалПУПроц);
	
	ЗаполнитьСведенияВыгрузки_Лист02(ПараметрыВыгрузки, УзелРодитель);
	
	ЗаполнитьСведенияВыгрузки_Лист03(УзелРодитель);
	
	Лист04 = мДанныеОтчета.Лист04;
	ПрототипУзла_НалДохСтав = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалДохСтав");
	Для Каждого СтраницаРаздела Из Лист04 Цикл
		ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		Узел_НалДохСтав = НовыйУзелИзПрототипа(ПрототипУзла_НалДохСтав);
		ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_НалДохСтав);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалДохСтав);
	
	ЗаполнитьСведенияВыгрузки_Лист05(УзелРодитель);
	
	// Лист 06.
	ДанныеРаздела = мДанныеОтчета.Лист06;
	Узел_ДохРасНалБазаНПФ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ДохРасНалБазаНПФ");
	ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_ДохРасНалБазаНПФ);
	
	// Лист 07.
	ДанныеРаздела = мДанныеОтчета.Лист07;
	Узел_ЦелИспИмущ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ЦелИспИмущ");
	ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_ЦелИспИмущ);
	
	// Приложение 1.
	ДанныеРаздела = мДанныеОтчета.Приложение1;
	Узел_ДохНеУч_РасхУч = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ДохНеУч_РасхУч");
	ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_ДохНеУч_РасхУч);
	
	ЗаполнитьСведенияВыгрузки_Приложение2(УзелРодитель);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияВыгрузки_Лист02(ПараметрыВыгрузки, УзелРодитель)
	
	КодПоМесту = мДанныеОтчета.Титульный.ПоМесту;
	ПредставлениеЗаОП = (КодПоМесту = "220" ИЛИ КодПоМесту = "223");
	
	Если ПредставлениеЗаОП Тогда
		// Приложение 5 к листу 02 выгружается самостоятельно.
		Узел_РасчНал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНал");
		РегламентированнаяОтчетность.УдалитьУзел(Узел_РасчНал);
		
		Лист02_5 = мДанныеОтчета.Лист02_5;
		ПрототипУзла_РаспрНалСубРФ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РаспрНалСубРФ");
		Для Каждого СтраницаРаздела Из Лист02_5 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			Узел_РаспрНалСубРФ = НовыйУзелИзПрототипа(ПрототипУзла_РаспрНалСубРФ);
			ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_РаспрНалСубРФ);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_РаспрНалСубРФ);
		
	Иначе
		Узел_РаспрНалСубРФ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РаспрНалСубРФ");
		РегламентированнаяОтчетность.УдалитьУзел(Узел_РаспрНалСубРФ);
		
		УзлыЛиста02 = Новый Соответствие;
		
		Лист02 = мДанныеОтчета.Лист02;
		ПрототипУзла_РасчНал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНал");
		Для Каждого СтраницаРаздела Из Лист02 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			Узел_РасчНал = НовыйУзелИзПрототипа(ПрототипУзла_РасчНал);
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000200000100);
			УзелИПрототипы = Новый Структура;
			УзелИПрототипы.Вставить("РасчНал", Узел_РасчНал);
			УзелИПрототипы.Вставить("ДохРеалВнеРеал",  ПолучитьПодчиненныйЭлемент(Узел_РасчНал, "ДохРеалВнеРеал"));
			УзелИПрототипы.Вставить("РасхРеалВнеРеал", ПолучитьПодчиненныйЭлемент(Узел_РасчНал, "РасхРеалВнеРеал"));
			УзелИПрототипы.Вставить("РасчРасхОпер",    ПолучитьПодчиненныйЭлемент(Узел_РасчНал, "РасчРасхОпер"));
			УзелИПрототипы.Вставить("УбытУменНБ",      ПолучитьПодчиненныйЭлемент(Узел_РасчНал, "УбытУменНБ"));
			УзелИПрототипы.Вставить("РаспрНалСубРФ",   ПолучитьПодчиненныйЭлемент(Узел_РасчНал, "РаспрНалСубРФ"));
			УзелИПрототипы.Вставить("РасчНалГруп",     ПолучитьПодчиненныйЭлемент(Узел_РасчНал, "РасчНалГруп"));
			УзлыЛиста02.Вставить(ТипНалогоплательщика, УзелИПрототипы);
			
			ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_РасчНал);
			
			// Приложение 6б к Листу 02.
			// Заполняется автоматическии по всем листам 02, поэтому надо удалить лишние.
			Если УзлыЛиста02.Количество() > 1 Тогда
				Узел_ДохРасхУчГрупНБ = ПолучитьПодчиненныйЭлемент(Узел_РасчНал, "ДохРасхУчГрупНБ");
				РегламентированнаяОтчетность.УдалитьУзел(Узел_ДохРасхУчГрупНБ);
			КонецЕсли;
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_РасчНал);
		
		Лист02_1 = мДанныеОтчета.Лист02_1;
		Для Каждого СтраницаРаздела Из Лист02_1 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000210000100);
			УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_ДохРеалВнеРеал = НовыйУзелИзПрототипа(УзелИПрототипы.ДохРеалВнеРеал);
			ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_ДохРеалВнеРеал);
		КонецЦикла;
		
		Лист02_2 = мДанныеОтчета.Лист02_2;
		Для Каждого СтраницаРаздела Из Лист02_2 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000220000100);
			УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_РасхРеалВнеРеал = НовыйУзелИзПрототипа(УзелИПрототипы.РасхРеалВнеРеал);
			ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_РасхРеалВнеРеал);
		КонецЦикла;
		
		Лист02_3 = мДанныеОтчета.Лист02_3;
		Для Каждого СтраницаРаздела Из Лист02_3 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000230000100);
			УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_РасчРасхОпер = НовыйУзелИзПрототипа(УзелИПрототипы.РасчРасхОпер);
			ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_РасчРасхОпер);
		КонецЦикла;
		
		Лист02_4 = мДанныеОтчета.Лист02_4;
		Для Каждого СтраницаРаздела Из Лист02_4 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000240000100);
			Если ТипНалогоплательщика = "5" И УзлыЛиста02.Количество() > 0 Тогда
				Продолжить;
				//УзелИПрототипы = ПервыйЭлементСоответствия(УзлыЛиста02);
			Иначе
				УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			КонецЕсли;
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_УбытУменНБ = НовыйУзелИзПрототипа(УзелИПрототипы.УбытУменНБ);
			ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_УбытУменНБ);
		КонецЦикла;
		
		Лист02_5 = мДанныеОтчета.Лист02_5;
		Для Каждого СтраницаРаздела Из Лист02_5 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000250000100);
			УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_РаспрНалСубРФ = НовыйУзелИзПрототипа(УзелИПрототипы.РаспрНалСубРФ);
			ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_РаспрНалСубРФ);
		КонецЦикла;
		
		УзлыЛиста02_6 = Новый Соответствие;
		Лист02_6 = мДанныеОтчета.Лист02_6;
		Для Каждого СтраницаРаздела из Лист02_6 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			
			КодСубъектаРФ = СокрЛП(ДанныеРаздела.П000260000601);
			
			УзелИПрототипы = ПервыйЭлементСоответствия(УзлыЛиста02);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_РасчНалГруп = НовыйУзелИзПрототипа(УзелИПрототипы.РасчНалГруп);
			УзелИПрототипыЛиста02_6 = Новый Структура;
			УзелИПрототипыЛиста02_6.Вставить("РасчНалГруп", Узел_РасчНалГруп);
			УзелИПрототипыЛиста02_6.Вставить("РасчНалУчГруп", ПолучитьПодчиненныйЭлемент(Узел_РасчНалГруп, "РасчНалУчГруп"));
			УзлыЛиста02_6.Вставить(КодСубъектаРФ, УзелИПрототипыЛиста02_6);
			
			ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_РасчНалГруп);
		КонецЦикла;
		
		Лист02_6а = мДанныеОтчета.Лист02_6а;
		Для Каждого СтраницаРаздела из Лист02_6а Цикл
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			
			ОКТМО = СокрЛП(ДанныеРаздела.П000270000301);
			КодСубъектаРФ = КодСубъектаРФПоОКТМО(ЭтаФорма, ОКТМО);
			
			УзелИПрототипыЛиста02_6 = УзлыЛиста02_6[КодСубъектаРФ];
			Если УзелИПрототипыЛиста02_6 = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйУзел_РасчНалУчГруп = НовыйУзелИзПрототипа(УзелИПрототипыЛиста02_6.РасчНалУчГруп);
			
			ЗаполнитьДаннымиУзел(ДанныеРаздела, НовыйУзел_РасчНалУчГруп);
			
		КонецЦикла;
		
		ДанныеРаздела = мДанныеОтчета.Лист02_6б;
			
		Если УзлыЛиста02.Количество() > 0 Тогда
			
			УзелИПрототипы = ПервыйЭлементСоответствия(УзлыЛиста02);
			Узел_ДохРасхУчГрупНБ = ПолучитьПодчиненныйЭлемент(УзелИПрототипы.РасчНал, "ДохРасхУчГрупНБ");
			
			Если Узел_ДохРасхУчГрупНБ <> Неопределено Тогда
				ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_ДохРасхУчГрупНБ);
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияВыгрузки_Лист03(УзелРодитель)
	
	Узел_НалУдНА = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалУдНА");
	
	Лист03А = мДанныеОтчета.Лист03А;
	ПрототипУзла_НалДохДив = ПолучитьПодчиненныйЭлемент(Узел_НалУдНА, "НалДохДив");
	Для Каждого СтраницаРаздела Из Лист03А Цикл
		ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		Узел_НалДохДив = НовыйУзелИзПрототипа(ПрототипУзла_НалДохДив);
		ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_НалДохДив);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалДохДив);
	
	Лист03Б = мДанныеОтчета.Лист03Б;
	ПрототипУзла_НалДохЦБ = ПолучитьПодчиненныйЭлемент(Узел_НалУдНА, "НалДохЦБ");
	Для Каждого СтраницаРаздела Из Лист03Б Цикл
		ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		Узел_НалДохЦБ = НовыйУзелИзПрототипа(ПрототипУзла_НалДохЦБ);
		ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_НалДохЦБ);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалДохЦБ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияВыгрузки_Лист05(УзелРодитель)
	
	Лист05 = мДанныеОтчета.Лист05;
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2015-01-01' Тогда
		ПрототипУзла_НалБазОпОсобС = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалБазОпОсобС");
		Для Каждого СтраницаРаздела Из Лист05 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			Узел_НалБазОпОсобС = НовыйУзелИзПрототипа(ПрототипУзла_НалБазОпОсобС);
			ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_НалБазОпОсобС);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалБазОпОсобС);
	Иначе
		ПрототипУзла_НалБазОпОсобН = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалБазОпОсобН");
		Для Каждого СтраницаРаздела Из Лист05 Цикл
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			Узел_НалБазОпОсобН = НовыйУзелИзПрототипа(ПрототипУзла_НалБазОпОсобН);
			ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_НалБазОпОсобН);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалБазОпОсобН);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияВыгрузки_Приложение2(УзелРодитель)
	
	Приложение2 = мДанныеОтчета.Приложение2;
	ПрототипУзла_СведДохФЛ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СведДохФЛ");
	Для Каждого СтраницаРаздела Из Приложение2 Цикл
		ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		Узел_СведДохФЛ = НовыйУзелИзПрототипа(ПрототипУзла_СведДохФЛ);
		ЗаполнитьДаннымиУзел(ДанныеРаздела, Узел_СведДохФЛ);
		
		// Сведения о доходах и вычетах.
		ДоходыИВычеты = Новый ДеревоЗначений;
		ДоходыИВычеты.Колонки.Добавить("Код");
		ДоходыИВычеты.Колонки.Добавить("Сумма");
		
		ДанныеДопСтрок = СтраницаРаздела.ДанныеДопСтрок;
		Для каждого ЭлСтруктуры Из ДанныеДопСтрок[0].Значение["П0000200040"] Цикл
			КодДохода = СокрЛП(ЭлСтруктуры["П000020004001"]);
			СуммаДохода = ЭлСтруктуры["П000020004101"];
			
			Если ЗначениеЗаполнено(КодДохода) Тогда
				СтрокаДохода = ДоходыИВычеты.Строки.Найти(КодДохода, "Код");
				Если СтрокаДохода = Неопределено Тогда
					СтрокаДохода = ДоходыИВычеты.Строки.Добавить();
					СтрокаДохода.Код = КодДохода;
					СтрокаДохода.Сумма = СуммаДохода;
				КонецЕсли;
				
				Для Инд = 1 По 5 Цикл
					КодВычета = СокрЛП(ЭлСтруктуры["П00002000420" + Инд]);
					СуммаВычета = ЭлСтруктуры["П00002000430" + Инд];
					
					Если ЗначениеЗаполнено(КодВычета) Тогда
						СтрокаВычета = СтрокаДохода.Строки.Добавить();
						СтрокаВычета.Код = КодВычета;
						СтрокаВычета.Сумма = СуммаВычета;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Узел_СпрДохФЛ = ПолучитьПодчиненныйЭлемент(Узел_СведДохФЛ, "СпрДохФЛ");
		
		ПрототипУзла_СумДох = ПолучитьПодчиненныйЭлемент(Узел_СпрДохФЛ, "СумДох");
		Для Каждого СтрокаДохода Из ДоходыИВычеты.Строки Цикл
			Узел_СумДох = НовыйУзелИзПрототипа(ПрототипУзла_СумДох);
			ЗадатьЗначениеЭлемента(Узел_СумДох, "КодДоход", СтрокаДохода.Код);
			ЗадатьЗначениеЭлемента(Узел_СумДох, "СумДоход", СтрокаДохода.Сумма);
			
			ПрототипУзла_СумВыч = ПолучитьПодчиненныйЭлемент(Узел_СумДох, "СумВыч");
			Для Каждого СтрокаВычета Из СтрокаДохода.Строки Цикл
				Узел_СумВыч = НовыйУзелИзПрототипа(ПрототипУзла_СумВыч);
				ЗадатьЗначениеЭлемента(Узел_СумВыч, "КодВычет", СтрокаВычета.Код);
				ЗадатьЗначениеЭлемента(Узел_СумВыч, "СумВычет", СтрокаВычета.Сумма);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СумВыч);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СумДох);
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведДохФЛ);
	
КонецПроцедуры

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Функция ПервыйЭлементСоответствия(ПросматриваемоеСоответствие)
	
	Результат = Неопределено;
	
	Для Каждого ЭлементСоответствия Из ПросматриваемоеСоответствие Цикл
		Результат = ЭлементСоответствия.Значение;
		Прервать;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНулямиНезаполненныеАтрибуты(Узел, Знач Исключения = Неопределено)
	
	Если Исключения = Неопределено Тогда
		Исключения = Новый Структура;
	КонецЕсли;
	
	Если (Узел.Тип = "А" ИЛИ Узел.Тип = "A") И НЕ ЗначениеЗаполнено(Узел.Значение) Тогда
		ЗначениеАтрибута = Неопределено;
		Узел.Значение = ?(Исключения.Свойство(Узел.Код, ЗначениеАтрибута), ЗначениеАтрибута, "0");
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		ЗаполнитьНулямиНезаполненныеАтрибуты(Стр, Исключения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПустойУзелРаздела(УзелРодитель, СтруктураПустогоРаздела, ТолькоПервыйУровень = Ложь, ИндексУзла = Неопределено, УзелРаздела = Неопределено)
	
	Если ТолькоПервыйУровень Тогда
		
		Если УзелРаздела = Неопределено Тогда
			Если ИндексУзла = Неопределено Тогда
				УзелРаздела = УзелРодитель.Строки.Добавить();
			Иначе
				УзелРаздела = УзелРодитель.Строки.Вставить(ИндексУзла);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(УзелРаздела, СтруктураПустогоРаздела);
		КонецЕсли;
		
		Для Каждого Стр Из СтруктураПустогоРаздела.Строки Цикл
			Если (Стр.Тип = "А" ИЛИ Стр.Тип = "A") И УзелРаздела.Строки.Найти(Стр.Код, "Код") = Неопределено Тогда
				
				// ищем первое вхождение сложного элемента и вставляем на его место новый атрибут
				СложныйЭлемент = УзелРаздела.Строки.Найти("С", "Тип");
				Если СложныйЭлемент = Неопределено Тогда
					НовСтр = УзелРаздела.Строки.Добавить();
				Иначе
					НовСтр = УзелРаздела.Строки.Вставить(УзелРаздела.Строки.Индекс(СложныйЭлемент));
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если УзелРаздела = Неопределено Тогда
			Если ИндексУзла = Неопределено Тогда
				УзелРаздела = УзелРодитель.Строки.Добавить();
			Иначе
				УзелРаздела = УзелРодитель.Строки.Вставить(ИндексУзла);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(УзелРаздела, СтруктураПустогоРаздела);
		
		Для Каждого Стр Из СтруктураПустогоРаздела.Строки Цикл
			ЗагрузитьПустойУзелРаздела(УзелРаздела, Стр, ТолькоПервыйУровень);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УзелРаздела;
	
КонецФункции

&НаСервере
Функция СохранитьСтруктураУзла(Знач Узел, КодУзла = Неопределено, СтруктураУзла = Неопределено)
	
	ЭтоПервыйЗаход = (СтруктураУзла = Неопределено);
	
	Если ЭтоПервыйЗаход Тогда
		
		СтруктураУзла = Новый ДеревоЗначений;
		Для Каждого Колонка Из Узел.Колонки Цикл
			СтруктураУзла.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
		
		Узел = Узел.Строки.Найти(КодУзла, "Код", Истина);
		Если Узел = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	НовСтр = СтруктураУзла.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, Узел);
	
	Для Каждого Стр Из Узел.Строки Цикл
		СохранитьСтруктураУзла(Стр, , НовСтр);
	КонецЦикла;
	
	Если ЭтоПервыйЗаход Тогда
		Возврат СтруктураУзла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
		
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразуСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьСразуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	Если СтруктураРеквизитовФормы.НужноРассчитатьОтчетНаСервере Тогда
		РасчетНаСервере();
	КонецЕсли;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_3" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" Тогда
		СохрТЗМногострочнойГруппы1 = ЭтаФорма[СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1].Выгрузить();
		СохрТЗМногострочнойГруппы2 = ЭтаФорма[СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	ВыводитьНаПечатьЛист03А = Истина;
					
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если НЕ СтрокаУровня1.ВыводНаПечать Тогда
			
			Если СтрокаУровня1.ИмяСтраницы = "Лист03А" Тогда
				
				ВыводитьНаПечатьЛист03А = Ложь;
				
			ИначеЕсли СтрокаУровня1.ИмяСтраницы = "Лист03Б"
				    И ВыводитьНаПечатьЛист03А Тогда
					
				ВывестиНаПечатьЛист03В("Лист03А", ВидПечати, ОбщиеРеквизитыРазделов);
				
			КонецЕсли;
			
			Продолжить;
			
	   	КонецЕсли;
				
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
					
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
			Если СтрокаУровня1.ИмяСтраницы = "Лист03Б" Тогда
			 
			    Если ВыводитьНаПечатьЛист03А Тогда
			 
					ВывестиНаПечатьЛист03В("Лист03А", ВидПечати, ОбщиеРеквизитыРазделов);
					
				КонецЕсли;
				
				ВывестиНаПечатьЛист03В("Лист03Б", ВидПечати, ОбщиеРеквизитыРазделов);
												
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_3" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.ИдМСЧ_Раздел1_3].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение2" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1].Загрузить(СохрТЗМногострочнойГруппы1);
		ЭтаФорма[СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2].Загрузить(СохрТЗМногострочнойГруппы2);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист03В(ИмяСтраницы, ВидПечати, ОбщиеРеквизитыРазделов)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтрПоля;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Лист 03. Раздел В");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Портрет");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "Лист03В");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	СтруктураПараметров.Вставить("ИмяСтраницыПанели",  "Лист03В");
	
	Если НЕ мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
		
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		
		МЧБРаздела = "ПечатныйБланк2015Кв1_Лист03В";
		
		МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
		МакетМЧБ.ПолеСверху = 5;
		МакетМЧБ.ПолеСправа = 5;
		МакетМЧБ.ПолеСнизу  = 5;
		МакетМЧБ.ПолеСлева  = 5;
		
		ВремПоля = Новый Структура(СтрПоля);
		
		ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяСтраницы);
						
		Если ИдГруппы <> Неопределено Тогда
			
			ИсхКолвоСтрокБлока = 1;
			
			ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
			
			СохрТабличныйДокумент = Новый ТабличныйДокумент;
			СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
			
			Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
				
				КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
				КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
				
				Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
					КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;
				КонецЕсли;
				
				СтрИменаПоказателей = "";
				
				Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
												
				Для Каждого КолонкаСтруктуры ИЗ Колонки Цикл
					
					СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
					
				КонецЦикла;
				
				СписокЛистовМЧБ = Новый СписокЗначений;
				
				Для Сч = 1 По КолвоЛистовМЧБ Цикл
					
					СписокОчищаемыхОбластей = Новый Массив;
					СписокОбластейПереименования = Новый СписокЗначений;
					
					Для Каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
						
						ИмяЯчейки = ТекущаяОбласть.Имя;
						
						Если СтрДлина(ИмяЯчейки) < 13
						 ИЛИ (Найти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0
						    И Найти(СтрЗаменить(СтрИменаПоказателей, "П00034", "П00033"), Лев(ИмяЯчейки, 13)) = 0) Тогда
							Продолжить;
						КонецЕсли;
						
						ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина);
						ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
						НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
						
						СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина);
						СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
						ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
						
						Если Найти(СтрЗаменить(СтрИменаПоказателей, "П00034", "П00033"), СмысловаяЧасть) = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
						
						Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
							
							СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
							
							Продолжить;
							
						КонецЕсли;
						
						СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
						
					КонецЦикла;
					
					Для Каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
						
						ОбластьСписка.Имя = "";
						ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						
					КонецЦикла;
					
					Для Каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
						
						ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						
					КонецЦикла;
					
					СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					
				КонецЦикла;
				
				Для Каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
					
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
					
					ЛистМЧБ = элЛистМЧБ.Значение;
					
					ЗаполнитьМакетМЧБ(СтруктураПараметров, ЛистМЧБ, ОбщиеРеквизитыРазделов);
															
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(ЛистМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля);
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	ПрефиксИменМакетов = "ПечатныйБланк2015Кв1_";
	
	СоответствиеРазделовМакетам.Вставить("Титульный", ПрефиксИменМакетов + "Титульный");
	
	СоответствиеРазделовМакетам.Вставить("Раздел1_1", ПрефиксИменМакетов + "Раздел1_1");
	СоответствиеРазделовМакетам.Вставить("Раздел1_2", ПрефиксИменМакетов + "Раздел1_2");
	СоответствиеРазделовМакетам.Вставить("Раздел1_3", ПрефиксИменМакетов + "Раздел1_3");
	СоответствиеРазделовМакетам.Вставить("Лист02",    ПрефиксИменМакетов + "Лист02");
	СоответствиеРазделовМакетам.Вставить("Лист02_1",  ПрефиксИменМакетов + "Лист02_1");
	СоответствиеРазделовМакетам.Вставить("Лист02_2",  ПрефиксИменМакетов + "Лист02_2");
	СоответствиеРазделовМакетам.Вставить("Лист02_3",  ПрефиксИменМакетов + "Лист02_3");
	СоответствиеРазделовМакетам.Вставить("Лист02_4",  ПрефиксИменМакетов + "Лист02_4");
	СоответствиеРазделовМакетам.Вставить("Лист02_5",  ПрефиксИменМакетов + "Лист02_5");
	СоответствиеРазделовМакетам.Вставить("Лист02_6",  ПрефиксИменМакетов + "Лист02_6");
	СоответствиеРазделовМакетам.Вставить("Лист02_6а", ПрефиксИменМакетов + "Лист02_6а");
	СоответствиеРазделовМакетам.Вставить("Лист02_6б", ПрефиксИменМакетов + "Лист02_6б");
	СоответствиеРазделовМакетам.Вставить("Лист03А",   ПрефиксИменМакетов + "Лист03А");
	СоответствиеРазделовМакетам.Вставить("Лист03Б",   ПрефиксИменМакетов + "Лист03Б");
	СоответствиеРазделовМакетам.Вставить("Лист04",    ПрефиксИменМакетов + "Лист04");
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2015-01-01' Тогда
		СоответствиеРазделовМакетам.Вставить("Лист05", ПрефиксИменМакетов + "Лист05_2014");
	Иначе
		СоответствиеРазделовМакетам.Вставить("Лист05", ПрефиксИменМакетов + "Лист05");
	КонецЕсли;
	
	СоответствиеРазделовМакетам.Вставить("Лист06",    ПрефиксИменМакетов + "Лист06");
	СоответствиеРазделовМакетам.Вставить("Лист07",    ПрефиксИменМакетов + "Лист07");
	
	СоответствиеРазделовМакетам.Вставить("Приложение1", ПрефиксИменМакетов + "Приложение1");
	СоответствиеРазделовМакетам.Вставить("Приложение2", ПрефиксИменМакетов + "Приложение2");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если Парам1.ИмяСтраницы = "Приложение2" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1;
	КонецЕсли;
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		
		Если Парам1.ИмяСтраницы = "Раздел1_3" Тогда
			ИсхКолвоСтрокБлока = 21;
		ИначеЕсли Парам1.ИмяСтраницы = "Лист02_6б" Тогда
			ИсхКолвоСтрокБлока = 2;
		ИначеЕсли Парам1.ИмяСтраницы = "Лист03А" Тогда
			ИсхКолвоСтрокБлока = 1;
			ТекКолвоСтрокБлока = 1;
		ИначеЕсли Парам1.ИмяСтраницы = "Лист03Б" Тогда
			ИсхКолвоСтрокБлока = 1;
			ТекКолвоСтрокБлока = 1;
		ИначеЕсли Парам1.ИмяСтраницы = "Лист07" Тогда
			ИсхКолвоСтрокБлока = 9;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение1" Тогда
			ИсхКолвоСтрокБлока = 22;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение2" Тогда
			ТекКолвоСтрокБлокаПриложение2_1 = ЭтаФорма[мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1]].Количество();
			ТекКолвоСтрокБлокаПриложение2_2 = ЭтаФорма[мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2]].Количество();
			ИсхКолвоСтрокБлокаПриложение2_1 = 3;
			ИсхКолвоСтрокБлокаПриложение2_2 = 2;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		Если Парам1.ИмяСтраницы = "Приложение2" Тогда
			
			Если (ТекКолвоСтрокБлокаПриложение2_1 > 0 И ИсхКолвоСтрокБлокаПриложение2_1 > 0)
			 ИЛИ (ТекКолвоСтрокБлокаПриложение2_2 > 0 И ИсхКолвоСтрокБлокаПриложение2_2 > 0) Тогда
				
				ДробноеКолвоЛистовМЧБ = Макс(
					?(ТекКолвоСтрокБлокаПриложение2_1 > ИсхКолвоСтрокБлокаПриложение2_1, ТекКолвоСтрокБлокаПриложение2_1 / ИсхКолвоСтрокБлокаПриложение2_1, 1),
					?(ТекКолвоСтрокБлокаПриложение2_2 > ИсхКолвоСтрокБлокаПриложение2_2, ТекКолвоСтрокБлокаПриложение2_2 / ИсхКолвоСтрокБлокаПриложение2_2, 1));
				
				ЦелоеКолвоЛистовМЧБ = Цел(ДробноеКолвоЛистовМЧБ);
				
				КолвоЛистовМЧБ = ?(ДробноеКолвоЛистовМЧБ = ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ, ЦелоеКолвоЛистовМЧБ + 1);
				
				СтрИменаПоказателей = "";
				Колонки = ДанныеФормыВЗначение(ЭтаФорма[СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_1], Тип("ТаблицаЗначений")).Колонки;
				Для Каждого КолонкаСтруктуры ИЗ Колонки Цикл
					СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
				КонецЦикла;
				Колонки = ДанныеФормыВЗначение(ЭтаФорма[СтруктураРеквизитовФормы.ИдМСЧ_Приложение2_2], Тип("ТаблицаЗначений")).Колонки;
				Для Каждого КолонкаСтруктуры ИЗ Колонки Цикл
					СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
				КонецЦикла;
				
				СписокЛистовМЧБ = Новый СписокЗначений;
				
				Для Сч = 1 По КолвоЛистовМЧБ Цикл
					
					СписокОчищаемыхОбластей = Новый Массив;
					СписокОбластейПереименования = Новый СписокЗначений;
					
					Если Сч = 2 Тогда
						МакетМЧБ.УдалитьОбласть(МакетМЧБ.Область("ОсновнаяЧасть1"), ТипСмещенияТабличногоДокумента.ПоВертикали);
						МакетМЧБ.УдалитьОбласть(МакетМЧБ.Область("ПустаяСтрока1"),  ТипСмещенияТабличногоДокумента.ПоВертикали);
						МакетМЧБ.УдалитьОбласть(МакетМЧБ.Область("Ограничители1"),  ТипСмещенияТабличногоДокумента.ПоВертикали);
					КонецЕсли;
					
					Для Каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
						
						ИмяЯчейки = ТекущаяОбласть.Имя;
						
						Если СтрДлина(ИмяЯчейки) < 13 ИЛИ Найти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
						ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
						НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
						
						СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
						СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
						ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
						
						Если Найти(СтрИменаПоказателей, СмысловаяЧасть) = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Если СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000020004") > 0 Тогда
							НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаПриложение2_1);
							ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаПриложение2_1;
						ИначеЕсли СтрЧислоВхождений(ТекущаяОбласть.Имя, "П000020005") > 0 Тогда
							НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлокаПриложение2_2);
							ТекКолвоСтрокБлока = ТекКолвоСтрокБлокаПриложение2_2;
						КонецЕсли;
						
						Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
							СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
							Продолжить;
						КонецЕсли;
						
						СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
						
					КонецЦикла;
					
					Для Каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
						
						ОбластьСписка.Имя = "";
						ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						
					КонецЦикла;
					
					Для Каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
						
						ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						
					КонецЦикла;
					
					СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					
				КонецЦикла;
				
				Для Каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
					
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
					
					ЛистМЧБ = элЛистМЧБ.Значение;
					
					ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
					
					Если СписокЛистовМЧБ.Индекс(элЛистМЧБ) < СписокЛистовМЧБ.Количество() - 1 Тогда
						ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(ЛистМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля);
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
				
				КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
				КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
				
				Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
					КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;
				КонецЕсли;
				
				СтрИменаПоказателей = "";
				
				Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
				
				Для Каждого КолонкаСтруктуры ИЗ Колонки Цикл
					СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
				КонецЦикла;
				
				СписокЛистовМЧБ = Новый СписокЗначений;
				
				Для Сч = 1 По КолвоЛистовМЧБ Цикл
					
					СписокОчищаемыхОбластей = Новый Массив;
					СписокОбластейПереименования = Новый СписокЗначений;
					
					Для Каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
						
						ИмяЯчейки = ТекущаяОбласть.Имя;
						
						Если СтрДлина(ИмяЯчейки) < 13 ИЛИ Найти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
						ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
						НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
						
						СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
						СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
						ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
						
						Если Найти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
						
						Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
							СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
							Продолжить;
						КонецЕсли;
						
						СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + НовыйСчетчик + "_" + НомерЯчейки);
						
					КонецЦикла;
					
					Для Каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
						
						ОбластьСписка.Имя = "";
						ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
						
					КонецЦикла;
					
					Для Каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
						
						ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
						
					КонецЦикла;
					
					СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
					
				КонецЦикла;
				
				Для Каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
					
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
					
					ЛистМЧБ = элЛистМЧБ.Значение;
					
					ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
					
					Если СписокЛистовМЧБ.Индекс(элЛистМЧБ) < СписокЛистовМЧБ.Количество() - 1 Тогда
						ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(ЛистМЧБ);
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля);
					
					РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
					
					ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
		
		ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(МакетМЧБ);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля);
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если (Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		    И Область.СодержитЗначение)
		 ИЛИ Область.Имя = "ПризнакПринадлежности" Тогда
			
			НовСтр = Показатели.Добавить();
			
			Если ПараметрыПечати.ИмяСтраницы = "Лист03В"
			   И СтрЧислоВхождений(Область.Имя, "П00034") > 0 Тогда
			   
				НовСтр.Имя = СтрЗаменить(Область.Имя, "П00034", "П00033");   
				
			Иначе
				
				НовСтр.Имя = Область.Имя;
				
			КонецЕсли;
			
			Если Область.Имя = "ПризнакПринадлежности" Тогда
				
				НовСтр.Значение    = Область.Текст;
				НовСтр.ЗначениеМЧБ = СокрЛП(Область.Текст)
				
			Иначе
				
				НовСтр.Значение    = Область.Значение;
				НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН2";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН3";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);

	НайденноеЗначение = Показатели.Найти("КПП1", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП2";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП3";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
				       		
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
						
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетностьКлиентСервер.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// ОКТМО.
	ПоказательОКТМО = Показатели.Найти("П000110001003", "Имя"); // в разделе 1.1
	Если ПоказательОКТМО = Неопределено Тогда
		ПоказательОКТМО = Показатели.Найти("П000120001003", "Имя"); // в разделе 1.2
	КонецЕсли;
	Если ПоказательОКТМО = Неопределено Тогда
		ПоказательОКТМО = Показатели.Найти("П000130002003", "Имя"); // в разделе 1.3
	КонецЕсли;
	Если ПоказательОКТМО = Неопределено Тогда
		ПоказательОКТМО = Показатели.Найти("П000260000301", "Имя"); // в приложении 6 к листу 02
	КонецЕсли;
	Если ПоказательОКТМО = Неопределено Тогда
		ПоказательОКТМО = Показатели.Найти("П000270000103", "Имя"); // в приложении 6а к листу 02
	КонецЕсли;
	
	Если ПоказательОКТМО <> Неопределено Тогда
		ОКТМО = СокрЛП(ПоказательОКТМО.Значение);
		ОКТМО = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОКТМО, 11, "-", 1);
		ПоказательОКТМО.ЗначениеМЧБ = ОКТМО;
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если (Найти(ИмяОбласти, "П0000200041") > 0 ИЛИ Найти(ИмяОбласти, "П0000200043") > 0
							  ИЛИ Найти(ИмяОбласти, "П000020002003") > 0 ИЛИ Найти(ИмяОбласти, "П000020002103") > 0
							  ИЛИ Найти(ИмяОбласти, "П000020002203") > 0) И РезультатПоиска.Значение < 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							//разделение областей показателя на 2 части
							
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								
								// Для строки 052 Приложения №2 производится разделение
								// на целую и дробную части, если значение дробное.
								Если Найти(Область.Имя, "П0000200052") И (РезультатПоиска.Значение - Цел(РезультатПоиска.Значение)) > 0 Тогда
									Если СтрДлина(СтрЦелаяЧасть) <= 6 Тогда
										ИндексТочкиЧислаНаМЧБ = 7;
									ИначеЕсли СтрДлина(СтрЦелаяЧасть) = 7 Тогда
										ИндексТочкиЧислаНаМЧБ = 8;
									Иначе
										ИндексТочкиЧислаНаМЧБ = 10;
									КонецЕсли;
									//определяем какая часть выводится (Целая, дробная или точка)
									Если ТекАдресЗначенияОбласти.ИндексЗнакоместа < ИндексТочкиЧислаНаМЧБ Тогда
										//выводится целая часть
										ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
										ЗначениеВыведено = Истина;
									ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
										//выводится дробная часть
										ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
										ЗначениеВыведено = Истина;
									Иначе
										//выводится точка
										Если Область.СодержитЗначение = Истина Тогда
											Область.Значение = ".";
										Иначе
											Область.Текст = ".";
										КонецЕсли;
										ЗначениеВыведено = Истина;
									КонецЕсли;
								Иначе
									ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								КонецЕсли;
								//ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								//ЗначениеВыведено = Истина;
								
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									
									// для строки 40 Прил 5 производится округление до 11 знака после запятой
									Если Найти(Область.Имя, "П000250004003") Тогда
										ДлинаДробнойЧасти = СтрДлина(СтрДробнаяЧасть);
										Если ДлинаДробнойЧасти > 11 Тогда
											СтрДробнаяЧасть = Формат(Окр(СтрДробнаяЧасть, -(ДлинаДробнойЧасти - 11)), "ЧГ=0");
										КонецЕсли;
									КонецЕсли;
									
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение) ИЛИ Найти(ИмяОбласти, "НомерКорректировки") > 0);
							ЗначениеВыведено = Истина;		
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеВыведено
						И  (ПараметрыПечати.ИмяСтраницы = "Раздел1_3"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Лист07"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Приложение1"
						ИЛИ ПараметрыПечати.ИмяСтраницы = "Приложение2") Тогда
						ЗначениеВыведено = Истина;
					КонецЕсли;
										
				КонецЕсли;
				Если НЕ ЗначениеВыведено Тогда
										
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);

					Сообщение.Сообщить();

				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН1");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП1");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока Найти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = Найти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = Найти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = Найти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	НачатьЗамерВремени();
	ЗаполнитьАвтоНаСервере();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("Периодичность",                СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("ИНН",                          СтруктураДанныхТитульный.ИНН1);
	ПараметрыОтчета.Вставить("КПП",                          СтруктураДанныхТитульный.КПП1);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки"); // Адрес временного хранилища, где размещена расшифровка результата автозаполнения.
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел1_1",                  ТаблицаСтраницыРаздел1_1);
	Контейнер.Вставить("Раздел1_2",                  ТаблицаСтраницыРаздел1_2);
	Контейнер.Вставить("Раздел1_3",                  ТаблицаСтраницыРаздел1_3);
	Контейнер.Вставить("Лист02",                     ТаблицаСтраницыЛист02);
	Контейнер.Вставить("Лист02_1",                   ТаблицаСтраницыЛист02_1);
	Контейнер.Вставить("Лист02_2",                   ТаблицаСтраницыЛист02_2);
	Контейнер.Вставить("Лист02_3",                   ТаблицаСтраницыЛист02_3);
	Контейнер.Вставить("Лист02_4",                   ТаблицаСтраницыЛист02_4);
	Контейнер.Вставить("Лист02_5",                   ТаблицаСтраницыЛист02_5);
	Контейнер.Вставить("Лист02_6",                   ТаблицаСтраницыЛист02_6);
	Контейнер.Вставить("Лист02_6а",                  ТаблицаСтраницыЛист02_6а);
	Контейнер.Вставить("Лист02_6б",                  СтруктураДанныхЛист02_6б);
	Контейнер.Вставить("Лист02_6б_ДанныеДопСтрок",   П0002800010);
	Контейнер.Вставить("Лист03А",                    ТаблицаСтраницыЛист03А);
	Контейнер.Вставить("Лист03Б",                    ТаблицаСтраницыЛист03Б);
	Контейнер.Вставить("Лист04",                     ТаблицаСтраницыЛист04);
	Контейнер.Вставить("Лист05",                     ТаблицаСтраницыЛист05);
	Контейнер.Вставить("Лист06",                     СтруктураДанныхЛист06);
	Контейнер.Вставить("Лист07",                     СтруктураДанныхЛист07);
	Контейнер.Вставить("Лист07_ДанныеДопСтрок",      П0007000010);
	Контейнер.Вставить("Приложение1",                СтруктураДанныхПриложение1);
	Контейнер.Вставить("Приложение1_ДанныеДопСтрок", П0000100010);
	Контейнер.Вставить("Приложение2",                ТаблицаСтраницыПриложение2.Выгрузить());
	Контейнер.Вставить("Приложение2_ДанныеДопСтрокДоходыИВычеты",     П0000200040);
	Контейнер.Вставить("Приложение2_ДанныеДопСтрокСтандартныеВычеты", П0000200051);
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ЭтаФормаИмя = Лев(ЭтаФормаИмя, Найти(ЭтаФормаИмя, ".Форма.") - 1);
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ЭтаФормаИмя, Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета, Контейнер);
	
	// Заполнение раздела "Приложение №2".
	Если ТипЗнч(Контейнер.Приложение2) = Тип("ТаблицаЗначений") Тогда
		ЗначениеВДанныеФормы(Контейнер.Приложение2, ТаблицаСтраницыПриложение2);
		Если ТаблицаСтраницыПриложение2[0].Свойство("ДанныеДопСтрок") Тогда
			Ном = 0;
			Для Каждого СтрокаТаблЗнач Из Контейнер.Приложение2 Цикл
				Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок[0].Значение) = Тип("Структура") Тогда
					СтруктураДопСтрок = Новый Структура;
					Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок[0].Значение Цикл
						ТаблЗнач = ЭлСтруктуры.Значение;
						Если ТаблЗнач.Количество() = 0 Тогда
							ТаблЗнач.Добавить();
						КонецЕсли;
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
						ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
						СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
					КонецЦикла;
					ТаблицаСтраницыПриложение2[Ном].ДанныеДопСтрок.Очистить();
					ТаблицаСтраницыПриложение2[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
				КонецЕсли;
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	НомерМесяца = Месяц(ЭтаФорма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если НЕ НомерМесяца = 3 И НЕ НомерМесяца = 6 И НЕ НомерМесяца = 9 И НЕ НомерМесяца = 12 Тогда
		
		Для Каждого СтраницаЛиста02_1 Из ТаблицаСтраницыЛист02_1 Цикл
			Если НЕ ЗначениеЗаполнено(СтраницаЛиста02_1.Данные[0].Значение.П000210000100) Тогда
				СтраницаЛиста02_1.Данные[0].Значение.П000210000100 = "1";
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтраницаЛиста02_2 Из ТаблицаСтраницыЛист02_2 Цикл
			Если НЕ ЗначениеЗаполнено(СтраницаЛиста02_2.Данные[0].Значение.П000220000100) Тогда
				СтраницаЛиста02_2.Данные[0].Значение.П000220000100 = "1";
			КонецЕсли;
		КонецЦикла;
		
		РасчетНаСервере("Лист02_3");
		РасчетНаСервере("Лист02_2");
		РасчетНаСервере("Лист02_1");
		РасчетНаСервере("Лист02", , Истина);
		
		Для Каждого СтраницаЛиста02_1 Из ТаблицаСтраницыЛист02_1 Цикл
			
			Для Каждого Показатель Из СтраницаЛиста02_1.Данные[0].Значение Цикл
				
				Если ЗначениеЗаполнено(Показатель.Значение) Тогда
					Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
						СтраницаЛиста02_1.Данные[0].Значение.Вставить(Показатель.Ключ, 0);
					Иначе
						СтраницаЛиста02_1.Данные[0].Значение.Вставить(Показатель.Ключ, "");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтраницаЛиста02_2 Из ТаблицаСтраницыЛист02_2 Цикл
			
			Для Каждого Показатель Из СтраницаЛиста02_2.Данные[0].Значение Цикл
				
				Если ЗначениеЗаполнено(Показатель.Значение) Тогда
					Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
						СтраницаЛиста02_2.Данные[0].Значение.Вставить(Показатель.Ключ, 0);
					Иначе
						СтраницаЛиста02_2.Данные[0].Значение.Вставить(Показатель.Ключ, "");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтраницаЛиста02_3 Из ТаблицаСтраницыЛист02_3 Цикл
			
			Для Каждого Показатель Из СтраницаЛиста02_3.Данные[0].Значение Цикл
				
				Если ЗначениеЗаполнено(Показатель.Значение) Тогда
					Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
						СтраницаЛиста02_3.Данные[0].Значение.Вставить(Показатель.Ключ, 0);
					Иначе
						СтраницаЛиста02_3.Данные[0].Значение.Вставить(Показатель.Ключ, "");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПараметрыОтчета.АдресВременногоХранилищаРасшифровки;
	
	ИзменитьОКТМОРазделов(ЭтаФорма, СтруктураРеквизитовФормы.ОКТМОДляРазделов);
	
	ЗаполнитьКБКРаздел1(Истина);
	ЗаполнитьКБКРаздел2(Истина);
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 				    	СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция НачатьЗамерВремени()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
			
			КлючеваяОперация = "ЗаполнениеФормыНалоговаяОтчетностьПрибыль";
			ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер").НачатьЗамерВремени(КлючеваяОперация);
			
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если Лев(СокрЛП(СтандартныеПодсистемыСервер.ВерсияБиблиотеки()), 4) = "2.1." Тогда
		ВыполнятьЗамерыПроизводительности = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОценкаПроизводительностиПовтИсп").ВыполнятьЗамерыПроизводительности();
	Иначе
		ВыполнятьЗамерыПроизводительности = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп").ВыполнятьЗамерыПроизводительности();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") 
	   И ВыполнятьЗамерыПроизводительности Тогда
		
		Возврат ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер").ЗначениеТаймера();
			
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ВремяНачала <> Неопределено И ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "ЗаполнениеФормыНалоговаяОтчетностьПрибыль";
		ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
		
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность  = Ложь;
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "УдалитьСтроку") = 0
	  И (СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0001300040") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000100010") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П00028") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П00033") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П00034") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П000020004") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П000020005") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0007000010") > 0) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = Найти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры