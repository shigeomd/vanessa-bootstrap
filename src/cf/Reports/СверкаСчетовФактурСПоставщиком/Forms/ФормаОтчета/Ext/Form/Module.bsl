&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Отчет.Контрагент = Параметры.Контрагент;
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Отчет.Организация = Параметры.Организация;
	Иначе
		Отчет.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.НалоговыйПериод) Тогда
		Отчет.ПериодРегистрации = Параметры.НалоговыйПериод;
	Иначе
		Отчет.ПериодРегистрации = НачалоКвартала(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Перечисления.ДоступныеПериодыОтчета.Квартал, 
		НачалоКвартала(Отчет.ПериодРегистрации), 
		КонецКвартала(Отчет.ПериодРегистрации));
		
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	СкрытьПанель = ЗначениеЗаполнено(Параметры.Контрагент)
		И ЗначениеЗаполнено(Параметры.Организация)
		И ЗначениеЗаполнено(Параметры.НалоговыйПериод);
	ВывестиНужнуюПанельРезультатовСверки(СкрытьПанель);
	
	ЕстьПравоВывод = ПравоДоступа("Вывод", Метаданные);
	Элементы.ПечатьСразу.Видимость                = ЕстьПравоВывод;
	Элементы.ПечатьСразуВсеДействия.Видимость     = ЕстьПравоВывод;
	Элементы.ЗагрузитьРеестр.Видимость            = ЕстьПравоВывод;
	Элементы.ЗагрузитьРеестрВсеДействия.Видимость = ЕстьПравоВывод;
	Элементы.СохранитьКакВсеДействия.Видимость    = ЕстьПравоВывод;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Отчет.Контрагент)
		И ЗначениеЗаполнено(Отчет.Организация)
		И ЗначениеЗаполнено(Отчет.ПериодРегистрации) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 0.1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(Элементы.Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РеестрСчетовФактурПоставщика" 
		И Источник = ЭтотОбъект
		И Параметр.Свойство("Контрагент")
		И Параметр.Контрагент = Отчет.Контрагент
		И Параметр.Организация = Отчет.Организация
		И Параметр.НалоговыйПериод = Отчет.ПериодРегистрации Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", 
		НачалоКвартала(Отчет.ПериодРегистрации), 
		КонецКвартала(Отчет.ПериодРегистрации));
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал", ПараметрыВыбора, Элементы.ПредставлениеПериодаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьПериод(ВыбранноеЗначение.НачалоПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(Элементы.Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(Элементы.Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеРезультатыПриИзменении(Элемент)
	
	ПоказатьРезультатСверки();

КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ИзменитьПериод(НачалоКвартала(Отчет.ПериодРегистрации - 1));
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ИзменитьПериод(КонецКвартала(Отчет.ПериодРегистрации) + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестр(Команда)
	
	ОткрытьФормуЗагрузкиРеестра();
	
КонецПроцедуры

#КонецОбласти
 
#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сверка счетов-фактур с поставщиком%1'"),
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоКвартала(Отчет.ПериодРегистрации), 
			КонецКвартала(Отчет.ПериодРегистрации)));
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()

	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	ОписаниеОшибки = "";
	РезультатВыполнения = СформироватьОтчетНаСервере(ОписаниеОшибки);
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "РеестрНеЗагружен" Тогда
			Если ЕстьПравоВывод Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='За %1 г. реестр от ""%2"" еще не загружен.
					|Загрузить реестр?'"),
					ПредставлениеПериодаРегистрации,
					Отчет.Контрагент);
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьРеестрЗавершение", ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
				Возврат;
			Иначе
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='За %1 г. реестр от ""%2"" еще не загружен.'"),
					ПредставлениеПериодаРегистрации,
					Отчет.Контрагент);
			КонецЕсли;
		КонецЕсли;
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
	Если СверкаВыполнена Тогда
		ТекущийЭлемент = Элементы.Результат;
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НалоговыйПериод", Отчет.ПериодРегистрации);
	ПараметрыОтчета.Вставить("Организация",     Отчет.Организация);
	ПараметрыОтчета.Вставить("Контрагент",      Отчет.Контрагент);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере(ОписаниеОшибки)
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ПоказатьВсеРезультаты = 1;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"СверкаДанныхУчетаНДС.СформироватьСверкуСчетовФактур", 
		ПараметрыОтчета,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные(ОписаниеОшибки);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОписаниеОшибки = "";
			ЗагрузитьПодготовленныеДанные(ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				Если ОписаниеОшибки = "РеестрНеЗагружен" Тогда
					Если ЕстьПравоВывод Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='За %1 г. реестр от ""%2"" еще не загружен.
							|Загрузить реестр?'"),
							ПредставлениеПериодаРегистрации,
							Отчет.Контрагент);
						ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьРеестрЗавершение", ЭтотОбъект);
						ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
						Возврат;
					Иначе
						ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='За %1 г. реестр от ""%2"" еще не загружен.'"),
							ПредставлениеПериодаРегистрации,
							Отчет.Контрагент);
					КонецЕсли;
				КонецЕсли;
				ПоказатьПредупреждение(, ОписаниеОшибки);
			КонецЕсли;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные(ОписаниеОшибки)

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	СверкаВыполнена     = НЕ РезультатВыполнения.Свойство("ОписаниеОшибки");
	
	ИдентификаторЗадания = Неопределено;
	
	Если СверкаВыполнена Тогда
		ЕстьРасхождения       = РезультатВыполнения.ЕстьРасхождения;
		ПоказатьВсеРезультаты = 1;
		ТабличныйДокументВсе         = РезультатВыполнения.ТабличныйДокументВсе;
		ТабличныйДокументРасхождения = РезультатВыполнения.ТабличныйДокументРасхождения;
	Иначе
		ОписаниеОшибки = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ПоказатьРезультатСверки();

КонецПроцедуры

&НаСервере
Процедура ПоказатьРезультатСверки()

	Результат.Очистить();
	
	Если СверкаВыполнена Тогда
		Если НЕ ЕстьРасхождения
			ИЛИ ПоказатьВсеРезультаты = 1 Тогда
			Результат.Вывести(ТабличныйДокументВсе);
			Элементы.Результат.ИспользуемоеИмяФайла = ТабличныйДокументВсе.ИспользуемоеИмяФайла;
		Иначе
			Результат.Вывести(ТабличныйДокументРасхождения);
			Элементы.Результат.ИспользуемоеИмяФайла = ТабличныйДокументРасхождения.ИспользуемоеИмяФайла;
		КонецЕсли;
		Результат.АвтоМасштаб = Истина;
		Результат.ОриентацияСтраницы   = ОриентацияСтраницы.Ландшафт;
		Результат.ЧерноБелаяПечать     = Истина;
		Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СверкаСчетовФактур";
	
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		
	КонецЕсли;
	
	ВывестиНужнуюПанельРезультатовСверки();

КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СформироватьОтчет()

	СформироватьОтчетНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(НовыйПериод)

	Отчет.ПериодРегистрации = НовыйПериод;
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"), 
		НачалоКвартала(Отчет.ПериодРегистрации),
		КонецКвартала(Отчет.ПериодРегистрации));
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(Элементы.Результат);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ВывестиНужнуюПанельРезультатовСверки(СкрытьПанель = Ложь)
	
	Элементы.РезультатыСверки.Видимость = НЕ СкрытьПанель;
	Если НЕ СкрытьПанель Тогда
		Если СверкаВыполнена Тогда
			Если ЕстьРасхождения Тогда
				Элементы.РезультатыСверки.ТекущаяСтраница = Элементы.РезультатЕстьРасхождения;
			Иначе
				Элементы.РезультатыСверки.ТекущаяСтраница = Элементы.РезультатДанныеСовпадают;
			КонецЕсли;
		Иначе
			Элементы.РезультатыСверки.ТекущаяСтраница = Элементы.ГруппаУсловияПолученияСервиса;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестрЗавершение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуЗагрузкиРеестра();
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиРеестра()

	ПараметрыФормы = Новый Структура("РежимСверки", Истина);
	ОткрытьФорму("Документ.РеестрСчетовФактурПоставщика.Форма.ЗагрузкаИзФайла", ПараметрыФормы, ЭтотОбъект);
		
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(ПолеТабличногоДокумента)

	ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Картинка  = Новый Картинка;
	ОтображениеСостояния.Текст     = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сверить"" для получения отчета.'");
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;

КонецПроцедуры 

#КонецОбласти
