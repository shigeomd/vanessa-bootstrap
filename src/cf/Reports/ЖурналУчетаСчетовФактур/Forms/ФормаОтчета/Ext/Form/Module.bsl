&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = НСтр("ru='Журнал учета полученных и выданных счетов-фактур'")
		+ БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода,
		Отчет.КонецПериода);
	
	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " " + БухгалтерскиеОтчетыВызовСервераПовтИсп.ПолучитьТекстОрганизация(Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Элементы.КонтрагентДляОтбора.Доступность = Отчет.ОтбиратьПоКонтрагенту;
	Элементы.ГруппаДополнительныеНастройкиКонтрагенты.Доступность = НЕ Отчет.СформироватьОтчетПоСтандартнойФорме;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета(ЭтоФормированиеОтчетаДоПроверкиКонтрагентов)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",                         Отчет.Организация);
	ПараметрыОтчета.Вставить("НалоговыйПериод",                     Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("ГруппироватьПоКонтрагентам",          Отчет.ГруппироватьПоКонтрагентам);
	ПараметрыОтчета.Вставить("СформироватьОтчетПоСтандартнойФорме", Отчет.СформироватьОтчетПоСтандартнойФорме);
	ПараметрыОтчета.Вставить("КонтрагентДляОтбора",                 Отчет.КонтрагентДляОтбора);
	ПараметрыОтчета.Вставить("ОтбиратьПоКонтрагенту",               Отчет.ОтбиратьПоКонтрагенту);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения",   Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыОтчета.Вставить("ЗаполнениеДекларации",                Ложь);
	
	// Поддержка возможности формирования отчета за произвольный период
	Если КонецДня(Отчет.КонецПериода) <> КонецКвартала(Отчет.НачалоПериода) ИЛИ НачалоДня(Отчет.НачалоПериода) <> НачалоКвартала(Отчет.НачалоПериода) Тогда
		ПараметрыОтчета.Вставить("КонецПериодаОтчета", Отчет.КонецПериода);
		ПараметрыОтчета.СформироватьОтчетПоСтандартнойФорме = Ложь;
	КонецЕсли;
	
	ДобавитьПараметрыДляПроверкиКонтрагентов(ПараметрыОтчета, ЭтоФормированиеОтчетаДоПроверкиКонтрагентов);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	Если НЕ ИспользованиеПроверкиВозможно Тогда
		ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	КонецЕсли;
	
	Если ИспользованиеПроверкиВозможно Тогда
		ЖурналУчетаСчетовФактур.Очистить();
		ЕстьДоступКВебСервисуФНС = ПроверкаКонтрагентов.ЕстьДоступКВебСервисуФНС();
		ВыведеныВсеСтроки = Истина;
		ПереключательРежимаОтображения = "Все";
		НедействующиеКонтрагенты.Очистить();
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(Истина);
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		УчетНДСПереопределяемый.ПодготовитьПараметрыЖурналаУчетаСчетовФактур(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"УчетНДСПереопределяемый.ПодготовитьПараметрыЖурналаУчетаСчетовФактур", 
			ПараметрыОтчета, 
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			ЗапуститьПроверкуКонтрагентов();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);

	Если РезультатВыполнения.Свойство("СформированныйЖурнал") Тогда
		
		РезультатВыполнения.Свойство("ОткрыватьПомощникИзМакета", ОткрыватьПомощникИзМакета);
		ЖурналУчетаСчетовФактур = РезультатВыполнения.СформированныйЖурнал;
		ПоказатьВыбранныйЛист();
		
	КонецЕсли;
	
	// Проверка контрагентов
	Если ИспользованиеПроверкиВозможно И РезультатВыполнения.Свойство("ДанныеДляПроверкиКонтрагентов") Тогда
		
		ДанныеДляПроверкиКонтрагентов = РезультатВыполнения.ДанныеДляПроверкиКонтрагентов;
		
		Если ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхВыставленныеСчетаФактуры")
			И ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхПолученныеСчетаФактуры") 
			И ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхДополнительныеСвойства") Тогда
			
			АдресДанныхВыставленныеСчетаФактуры = ДанныеДляПроверкиКонтрагентов.АдресДанныхВыставленныеСчетаФактуры;
			АдресДанныхПолученныеСчетаФактуры   = ДанныеДляПроверкиКонтрагентов.АдресДанныхПолученныеСчетаФактуры;
			АдресДанныхДополнительныеСвойства   = ДанныеДляПроверкиКонтрагентов.АдресДанныхДополнительныеСвойства;
			
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты, "НедействующиеКонтрагенты");
		
	КонецЕсли;	
	 
КонецПроцедуры

&НаСервере
Процедура ПоказатьВыбранныйЛист()

	Результат.Очистить();
	Результат.АвтоМасштаб = Истина;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Результат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЖурналУчетаСчетовФактур";
	Результат.ЧерноБелаяПечать = Истина;

	Если ИспользованиеПроверкиВозможно И НЕ ВыведеныВсеСтроки Тогда // пользователь выбрал режим просмотра - "Только контрагенты с ошибками"
		// Выводим только контрагентов с ошибками
		Результат.Вывести(КонтрагентыСОшибками);
	Иначе
		Результат.Вывести(ЖурналУчетаСчетовФактур);
	КонецЕсли;
	
	РассчитатьОбластьПечати();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");

КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыИзПараметровФормы(Форма)
	
	ПараметрыЗаполненияФормы = Неопределено;
	
	Если Форма.Параметры.Свойство("ПараметрыЗаполненияФормы",ПараметрыЗаполненияФормы) Тогда
	
		ЗаполнитьЗначенияСвойств(Форма.Отчет,ПараметрыЗаполненияФормы);			
	
	КонецЕсли; 		

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНастройки()
    Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПроверкаКонтрагентовКлиент.СброситьАктуальностьОтчета(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Результат.Области.Найти("ПерейтиКПомощнику")<>Неопределено Тогда
		Если Область.Верх = Результат.Области.ПерейтиКПомощнику.Верх Тогда
			СтандартнаяОбработка = Ложь;
			УчетНДСКлиентПереопределяемый.ОткрытьФормуПомощникаПоУчетуНДС(Область.Расшифровка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ЗапуститьПроверкуКонтрагентов();
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
		ПоказатьНастройки("");
	Иначе	
		ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОткрытьНастройки", 0.1, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПроверкаКонтрагентовКлиент.СброситьАктуальностьОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПроверкаКонтрагентовКлиент.СброситьАктуальностьОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияПриИзменении(Элемент, ПолеОрганизация,
		Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПроверкаКонтрагентовКлиент.СброситьАктуальностьОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьПоКонтрагентамПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПроверкаКонтрагентовКлиент.СброситьАктуальностьОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтбиратьПоКонтрагентуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПроверкаКонтрагентовКлиент.СброситьАктуальностьОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентДляОтбораПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПроверкаКонтрагентовКлиент.СброситьАктуальностьОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоСтандартнойФормеПриИзменении(Элемент)
	
	Отчет.СформироватьОтчетПоСтандартнойФорме = ?(СформироватьОтчетПоПравилам = 1, Ложь, Истина);
	
	Если Отчет.СформироватьОтчетПоСтандартнойФорме Тогда
		Если Отчет.ОтбиратьПоКонтрагенту Тогда
			Отчет.ОтбиратьПоКонтрагенту = Ложь;
		КонецЕсли;
		Если Отчет.ГруппироватьПоКонтрагентам Тогда
			Отчет.ГруппироватьПоКонтрагентам = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПроверкаКонтрагентовКлиент.СброситьАктуальностьОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, 
		СоответствиеОрганизаций, Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка,
		ПолеОрганизация, СоответствиеОрганизаций);
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
	
	ЗаполнитьЗначенияСвойств(Отчет, Параметры);
	
	Отчет.СформироватьОтчетПоСтандартнойФорме = ?(СформироватьОтчетПоПравилам = 1, Ложь, Истина);
		
	ЗаполнитьРеквизитыИзПараметровФормы(ЭтаФорма);
	
	ОбщегоНазначенияБПВызовСервера.ЗаполнитьСписокОрганизаций(Элементы.ПолеОрганизация, СоответствиеОрганизаций);
	
	УправлениеФормой(ЭтаФорма);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	#Область ПроверкаКонтрагентов
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	ПроверкаКонтрагентов.УстановитьНадписиВПанелиОтчетаПриСозданииНаСервере(ЭтаФорма);
	ПроверкаКонтрагентовКлиентСервер.СменитьВидПанелиПроверкиКонтрагента(ЭтотОбъект);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
	ЗаполнитьРеквизитыИзПараметровФормы(ЭтаФорма);

	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	Если НЕ ИспользованиеПроверкиВозможно Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ПолеОрганизация <> "" Тогда
		Если НЕ СоответствиеОрганизаций.Свойство(ПолеОрганизация) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", НСтр("ru = 'Организация'"), , ,);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПолеОрганизация", , Отказ);
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

#Область ПроверкаКонтрагентов

&НаСервере
Процедура ДобавитьПараметрыДляПроверкиКонтрагентов(ПараметрыОтчета, ЭтоФормированиеОтчетаДоПроверкиКонтрагентов) Экспорт
	
	ДанныеДляПроверкиКонтрагентов = Новый Структура;
	ДанныеДляПроверкиКонтрагентов.Вставить("ЭтоЖурналУчетаСчетовФактур",	Истина);
	ДанныеДляПроверкиКонтрагентов.Вставить("ИспользованиеПроверкиВозможно", ИспользованиеПроверкиВозможно);
	
	Если ЭтоФормированиеОтчетаДоПроверкиКонтрагентов Тогда
		
		ДанныеДляПроверкиКонтрагентов.Вставить("АдресДанныхВыставленныеСчетаФактуры", 	ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
		ДанныеДляПроверкиКонтрагентов.Вставить("АдресДанныхПолученныеСчетаФактуры", 	ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
		ДанныеДляПроверкиКонтрагентов.Вставить("АдресДанныхДополнительныеСвойства", 	ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
		
	Иначе
		
		ДанныеДляПроверкиКонтрагентов.Вставить("ЗаписиВыставленныхСчетовФактур", ПолучитьИзВременногоХранилища(АдресДанныхВыставленныеСчетаФактуры));
		ДанныеДляПроверкиКонтрагентов.Вставить("ЗаписиПолученныхСчетовФактур",   ПолучитьИзВременногоХранилища(АдресДанныхПолученныеСчетаФактуры));
		ДанныеДляПроверкиКонтрагентов.Вставить("ДополнительныеСвойства",		 ПолучитьИзВременногоХранилища(АдресДанныхДополнительныеСвойства));
		
		ДанныеДляПроверкиКонтрагентов.Вставить("ЖурналУчетаСчетовФактур", 	ЖурналУчетаСчетовФактур);
		
	КонецЕсли;
	ДанныеДляПроверкиКонтрагентов.Вставить("НедействующиеКонтрагенты", 	РеквизитФормыВЗначение("НедействующиеКонтрагенты", Тип("ТаблицаЗначений")));
	ДанныеДляПроверкиКонтрагентов.Вставить("ВыводитьТолькоНекорректныхКонтрагентов", НЕ ЭтоФормированиеОтчетаДоПроверкиКонтрагентов);
	ПараметрыОтчета.Вставить("ДанныеДляПроверкиКонтрагентов", ДанныеДляПроверкиКонтрагентов);
	
	Если УчетНДС.ЭтоОтчетПоНекорректнымКонтрагентам(ПараметрыОтчета) Тогда
		ПараметрыОтчета.СформироватьОтчетПоСтандартнойФорме = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовВыполнялась = Ложь;
	Если ИспользованиеПроверкиВозможно И НедействующиеКонтрагенты.Количество() > 0 Тогда
		
		Если ЕстьДоступКВебСервисуФНС Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов");
			ПроверкаКонтрагентовКлиентСервер.СменитьВидПанелиПроверкиКонтрагента(ЭтотОбъект, "ПроверкаВПроцессеВыполнения");

			РезультатПроверки = ПроверитьКонтрагентов();
			
			Если РезультатПроверки <> Неопределено Тогда
				// Результат получен и уже обработан на стороне сервера
				ОтобразитьРезультатПроверкиКонтрагента();
				ИдентификаторЗадания = Неопределено;
			ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				// Результата еще нет, но есть шансы дождаться
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
			КонецЕсли;
		Иначе
			ВывестиНужнуюПанельПроверкиКонтрагентов();
		КонецЕсли;
	Иначе
		ВывестиНужнуюПанельПроверкиКонтрагентов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрагентов()
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(Ложь);
	
	НаименованиеЗадания = НСтр("ru = 'Проверка контрагентов в книге покупок'");
	РезультатПроверки = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"УчетНДС.ОпределитьНедействующихКонтрагентовВЖурналеУчетаСчетовФактурФоновоеЗадание",
		ПараметрыОтчета,
		НаименованиеЗадания);

	АдресХранилища       = РезультатПроверки.АдресХранилища;
	ИдентификаторЗадания = РезультатПроверки.ИдентификаторЗадания;
	
	Если Не РезультатПроверки.ЗаданиеВыполнено Тогда
		// Надо ждать
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОтобразитьРезультатПроверкиКонтрагента();
			ИдентификаторЗадания = Неопределено;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()

	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если РезультатПроверки.Свойство("НетДоступаКВебСервисуФНС") Тогда
		// Не удалось проверить контрагентов
		ЕстьДоступКВебСервисуФНС = Ложь;
	Иначе
		// Удалось проверить контрагентов
		ЗначениеВРеквизитФормы(РезультатПроверки.НедействующиеКонтрагенты, "НедействующиеКонтрагенты");
		КонтрагентыСОшибками 	= РезультатПроверки.КонтрагентыСОшибками;
		ЖурналУчетаСчетовФактур = РезультатПроверки.ЖурналУчетаСчетовФактур;
	КонецЕсли;
	
	ПоказатьВыбранныйЛист();
	
	ПроверкаКонтрагентовВыполнялась = Истина;
	
	ВывестиНужнуюПанельПроверкиКонтрагентов();

КонецПроцедуры

&НаСервере
Процедура ВывестиНужнуюПанельПроверкиКонтрагентов()

	Если ИспользованиеПроверкиВозможно Тогда
		
		Если ЕстьДоступКВебСервисуФНС Тогда
		
			// Книга открыта на основном разделе
			
			Если ПроверкаКонтрагентовВыполнялась Тогда
				КонтрагентыСПустымСостоянием = НедействующиеКонтрагенты.НайтиСтроки(Новый Структура("Состояние", Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка()));
				Если НедействующиеКонтрагенты.Количество() = 0 Тогда 
					ПроверкаКонтрагентовКлиентСервер.СменитьВидПанелиПроверкиКонтрагента(ЭтотОбъект, "ВсеКонтрагентыКорректные");
				ИначеЕсли НедействующиеКонтрагенты.Количество() > 0 И КонтрагентыСПустымСостоянием.Количество() = НедействующиеКонтрагенты.Количество() Тогда
					// Ни один контрагенты не проверен
					ПроверкаКонтрагентовКлиентСервер.СменитьВидПанелиПроверкиКонтрагента(ЭтотОбъект, "НетДоступаКСервису");
				ИначеЕсли НедействующиеКонтрагенты.Количество() > 0 Тогда
					// Контрагенты проверены
					ПроверкаКонтрагентовКлиентСервер.СменитьВидПанелиПроверкиКонтрагента(ЭтотОбъект, "НайденыНекорректныеКонтрагенты");
				КонецЕсли;
			Иначе
				ПроверкаКонтрагентовКлиентСервер.СменитьВидПанелиПроверкиКонтрагента(ЭтотОбъект);
			КонецЕсли;
			
		Иначе
			 ПроверкаКонтрагентовКлиентСервер.СменитьВидПанелиПроверкиКонтрагента(ЭтотОбъект, "НетДоступаКСервису");
		КонецЕсли;
		
	Иначе
		ПроверкаКонтрагентовКлиентСервер.СменитьВидПанелиПроверкиКонтрагента(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РассчитатьОбластьПечати()

	ПерваяСтрока = 1;
	
	Если ОткрыватьПомощникИзМакета Тогда
		ПерваяСтрока = ПерваяСтрока + 1;
	КонецЕсли;
	
	Результат.ОбластьПечати = Результат.Область(ПерваяСтрока,1,Результат.ВысотаТаблицы, Результат.ШиринаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПереключательРежимаОтображенияПриИзменении(Элемент)
	
	ВыведеныВсеСтроки = НЕ ВыведеныВсеСтроки;
	ПроверкаКонтрагентовКлиентСервер.СменитьВидПанелиПроверкиКонтрагента(ЭтотОбъект, "НайденыНекорректныеКонтрагенты");
	ПоказатьВыбранныйЛист();

КонецПроцедуры

#КонецОбласти

