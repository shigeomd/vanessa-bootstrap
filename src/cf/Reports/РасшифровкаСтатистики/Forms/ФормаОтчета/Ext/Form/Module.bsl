&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	
	// Параметры отчета
	ПараметрыОтчета.Вставить("Организация"                      , Отчет.Организация);
	ПараметрыОтчета.Вставить("НачалоПериода"                    , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                     , Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("Группировка"                      , Отчет.Группировка.Выгрузить());
	ПараметрыОтчета.Вставить("ПоказательБУ"                     , Истина);
	
	// Адресс временного хранилища, куда помещать расшифровку
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                , ПоместитьВоВременноеХранилище("", УникальныйИдентификатор));
    ПараметрыОтчета.Вставить("ДанныеРасшифровкиНастроек"        , ДанныеРасшифровкиНастроек);
	
	// Настройки
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"            , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"              , БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	ПараметрыОтчета.Вставить("НаборПоказателей"                 , Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьНаборПоказателей());
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"        , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("Детализация"              		, Отчет.Детализация);
	ПараметрыОтчета.Вставить("ДеревоНастроек"              		, АдресДереваНастроек);
	ПараметрыОтчета.Вставить("ПредставлениеОтчета"       		, ПредставлениеОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = Форма.ПредставлениеОтчета + " " + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода) + БухгалтерскиеОтчетыВызовСервераПовтИсп.ПолучитьТекстОрганизация(Отчет.Организация);
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	// Получаем результат выполнения отчтета
	РезультатВыполнения 	= ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         		= РезультатВыполнения.Результат;                   
	ДанныеРасшифровкиОтчета = РезультатВыполнения.ДанныеРасшифровки;
	
	// Дополнительно выводим таблицу настроек
	ВывестиТаблицуНастроек();
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВремяНачалаОперации = Неопределено;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуНастроек(); 
	
	ДеревоНастроек = ПолучитьИзВременногоХранилища(АдресДереваНастроек);
	
	// Установим границу между таблицей отчета и таблицей настроек
	// Граница нужна потому что каждая из таблиц использует свои данные расшифровки
	НомерСтрокиРазделителя = Результат.ВысотаТаблицы;
	
	Если ДеревоНастроек.Количество() > 0 Тогда
		
		// Для расшифровки настроек понадобятся параметры отчета
		ПараметрыОтчета = ПодготовитьПараметрыОтчета();
		
		// Создадим новый компоновщик
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		ДанныеРасшифровкиОбъект = Неопределено;
		
		// Получим схему компоновки описывающую таблицу настроек 
		Схема = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьМакет("ОписаниеНастроек");
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Схема.НастройкиПоУмолчанию, ДанныеРасшифровкиОбъект);
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("ТаблицаНастроек", ДеревоНастроек), ДанныеРасшифровкиОбъект, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		
		// Выводим таблицу настроек вместе с основной таблийцей
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
		
		// Создадим данные для расшифровки таблицы настроек
		ДанныеДляРасшифровки = Новый Структура("Объект, ДанныеРасшифровки", ПараметрыОтчета); 
		
		ДанныеДляРасшифровки.Вставить("ДанныеРасшифровки", ДанныеРасшифровкиОбъект);
		
		ДанныеРасшифровкиНастроек = ПоместитьВоВременноеХранилище(ДанныеДляРасшифровки, ЭтаФорма.УникальныйИдентификатор);
		
		// Посде вывода таблицы настроек фиксация в табличном документе сбросилась
		// Устанавливаем заново
		Результат.ФиксацияСверху = 0;
		
		Результат.ФиксацияСлева = 0;	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , Ложь);

	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет", 
			ПараметрыОтчета, 
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;		
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
		
	Возврат РезультатВыполнения;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьПредопределенныеГруппировки(СтруктураОтчета)
	
	Структура = СтруктураОтчета;
	
	// Анализируем структуру из настроек схемы компоновки
	// и добавляем группировки в таблицу
	Пока Структура.Количество() > 0 Цикл
				
		Если Структура[0].ПоляГруппировки.Элементы.Количество() > 0 И Структура[0].Использование Тогда
			
			// Если грппировка в структуре отмечена как недоступная то не берем ее
			Если Не Структура[0].РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
				
				Строка = Отчет.Группировка.Добавить();
				
				Строка.Поле 			= Структура[0].ПоляГруппировки.Элементы[0].Поле;
				Строка.Представление 	= Структура[0].ПоляГруппировки.Элементы[0].Поле;
				Строка.ТипГруппировки	= 0;
				Строка.Использование 	= Структура[0].Использование;
				
			КонецЕсли;
		КонецЕсли;
		
		Структура = Структура[0].Структура;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ДоработатьПоляИтогаСхемы(Схема, ПолеХарактеристикаОбъектаНаблюдения)
	
	// Ищем характкристику в полях итога
	ПолеИтога = Схема.ПоляИтога.Найти(ПолеХарактеристикаОбъектаНаблюдения);
	
	Если ПолеИтога <> Неопределено Тогда
		
		// Добавим в выражение поля итога, конструкцию ЕстьNull 
		// Предполагается что выражение простое ("Сумма(Характеристика)" - > "Сумма(ЕстьNull(Характеристика,0))")
		// Для этого опеределим позицию открывающей скобки исходного выражения
		ПозицияОткрывающейСкобки = Найти(ПолеИтога.Выражение, "(");
		
		// Сохраним исходное выражение (текст до открывающей скобки)
		ИсходноеВыражение = Лев(ПолеИтога.Выражение, ПозицияОткрывающейСкобки);
		
		// Составим новое выражение, используем
		// - Исходное выражение
		// - Конструкцию ЕстьNull
		// - Имя ресурса
		// Учтем также что исходного выражения могло не быть
		ПолеИтога.Выражение	= ИсходноеВыражение + "ЕстьNull(" + ПолеХарактеристикаОбъектаНаблюдения + ",0)" + ?(ПозицияОткрывающейСкобки = 0, "", ")");
		
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСхемыКомпоновкиДанныхНаСервере() Экспорт
	
	// Группировки после изменения схемы компоновки нужно будет заполнить
	Отчет.Группировка.Очистить();
	
	// ИсточникДанных - Перечисление.ИсточникиДанныхСтатистическихПоказателей, из перечисления получим схему компоновки
	// ХарактеристикаОбъектаНаблюдения - поле которое нужно вывести в отчет
	// Без них нет смысла продолжать
	Если ЗначениеЗаполнено(ИсточникДанных) И ЗначениеЗаполнено(ХарактеристикаОбъектаНаблюдения) Тогда
		
		// Одному источнику могут соответствовать разные схемы компоновки (разделы)
		// это зависит от характеристики источника которую мы хотим получить
		// Получаем сначала раздел
		РазделИсточникаДанных = Перечисления.ИсточникиДанныхСтатистическихПоказателей.РазделИсточникаДанных(ИсточникДанных, ХарактеристикаОбъектаНаблюдения);
		
		// Зная раздел получаем схему
		Схема = Перечисления.ИсточникиДанныхСтатистическихПоказателей.СхемаКомпоновкиДанных(ИсточникДанных, РазделИсточникаДанных);
		
		ПолеХарактеристикаОбъектаНаблюдения = Новый ПолеКомпоновкиДанных(ХарактеристикаОбъектаНаблюдения);

		ДоработатьПоляИтогаСхемы(Схема, ПолеХарактеристикаОбъектаНаблюдения);
		
		СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, ЭтаФорма.УникальныйИдентификатор);
		
		// Инициализируем компоновщик
		КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
		
		
		ИмяНастроек = Перечисления.ИсточникиДанныхСтатистическихПоказателей.ИмяНастроекРасшифровки(ИсточникДанных, РазделИсточникаДанных, ХарактеристикаОбъектаНаблюдения);
		
		// В схеме могут быть специальные настройки для расшифровки
		// В них содержится структура расшифровочного отчета
		НастройкиСхемы = Схема.ВариантыНастроек.Найти(ИмяНастроек);
		
		// Загружаем настройки схемы в компоновщик
		// Если есть специальные настройки, заполняем группировку
		Если НастройкиСхемы <> Неопределено Тогда
			ЗаполнитьПредопределенныеГруппировки(НастройкиСхемы.Настройки.Структура);
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСхемы.Настройки);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));		
		
		// Нужно найти характеристику объекта наблюдения среди доступных полей
		ДоступноеПолеВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеХарактеристикаОбъектаНаблюдения);
		
		Если  ДоступноеПолеВыбора <> Неопределено Тогда
			
			// Если поле доступно, добавляем его
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор, ПолеХарактеристикаОбъектаНаблюдения);	
			
			// Отчет можно формировать
			ФормированиеОтчетаДоступно = Истина;
			
		КонецЕсли;
		
		// Возводим флаг детализации
		ЕстьДетализация = ЗначениеЗаполнено(Отчет.Детализация);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ПодготовитьДеревоНастроек(ДеревоНастроек)
	
	// В дерево настроек добавляем колонку
	ДеревоНастроек.Колонки.Добавить("Настройка", Новый ОписаниеТипов("Строка"));  // Пользовательское описание настроек
	
	Если ДеревоНастроек.Количество() > 0 Тогда
		
		// Для того чтобы поля отбора имели пользовательское представление нужно пропустить их через компоновщик
		// Создаем новый (временный) компоновщик, и инициализируем его
		Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
		Компоновщик.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.Настройки);
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		
		// Очищаем отбор
		Компоновщик.Настройки.Отбор.Элементы.Очистить();
		
		СтрокиКУдалению = Новый Массив;
		
		// Обработка дерева настроек
		Для Каждого СтрокаДерева из ДеревоНастроек Цикл
			
			// Сериализуем отбор из дерева настроек
			Настройка = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаДерева.Отбор);
			
			Если Настройка <> Неопределено И Настройка.Элементы.Количество() > 0 Тогда
				
				// Копируем полученный отбор в компоновщик
				КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, Настройка, Ложь);
				
				// Так как в компоновщике инициализированы настройки которми оперирует данный отбор
				// представление отбора будет "красивым" ("Номенклатурная группа" вместо "НоменклатурнаяГруппа")
				СтрокаДерева.Настройка = Компоновщик.Настройки.Отбор; // Преобразование к строке
				
				// Очищаем отбор компоновщика для следующей строки дерева
				Компоновщик.Настройки.Отбор.Элементы.Очистить();
				
			Иначе
				// Если нет настройки, удаляем строку
				СтрокиКУдалению.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Удаляем ненужные строки
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			
			ДеревоНастроек.Удалить(СтрокаКУдалению);
			
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры	

&НаСервере
Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Организация
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ТекстОрганизация = БухгалтерскиеОтчетыВызовСервераПовтИсп.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация, Ложь);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПредставлениеОтчета + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода);
	Результат.Вывести(ОбластьЗаголовок);
	Результат.Вывести(ОбластьОписаниеНастроек);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФормированиеОтчета()
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ЗапуститьФормированиеОтчета();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Распаковываем и проверяем входящие параметры
	Отчет.Организация 	= Параметры.Организация; 
	
	// Настройки периода из регламентированного отчета, дальее могут быть уточнены
	Отчет.НачалоПериода = Параметры.НачалоПериода; 
	Отчет.КонецПериода 	= Параметры.КонецПериода; 
		
	ИмяПоля = Параметры.ИмяПоля;
	
	АдресВременногоХранилищаРасшифровки = Параметры.АдресВременногоХранилищаРасшифровки;
	
	// Отключаем кнопку сформировать
	// Далее включим если удастся инициализировать схему компоновки данных
	ФормированиеОтчетаДоступно = Ложь;
	
	
	Если ЗначениеЗаполнено(АдресВременногоХранилищаРасшифровки) Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаРасшифровки);
	Иначе
		ТаблицаРасшифровки = Неопределено;
	КонецЕсли;
	
	// Если переданных параметров достаточно для расшифровки
	Если ЗначениеЗаполнено(ИмяПоля) И ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		// Таблица расшифровки содержит все расшифровываемые показатели отчета
		// Ищем переданный, показателей с таким кодом (ИмяПоля) в таблице может быть несколько
		// получаем все, дальше они будут обработаны
		ПоказателиРасшифровки = ТаблицаРасшифровки.НайтиСтроки(Новый Структура("ИмяПоказателя", ИмяПоля));
		
		// Если ничего не нашли, выходим
		Если ПоказателиРасшифровки.Количество() = 0 Тогда
		
            Отказ = Истина;
			
		Иначе	
			
			РежимРасшифровки = Истина;
			
			// Перебираем все найденные показатели, предпочтение отдается
			// показателю без дополнительного алгоритма
			Для Каждого ПоказательРасшифровки Из ПоказателиРасшифровки Цикл
				
				// Получим параметры расшифровки конкретного показателя
				ПараметрыРасшифровки = ПоказательРасшифровки.ДополнительныеПараметры;
				
				Если НЕ ЗначениеЗаполнено(ПараметрыРасшифровки.ДополнительныйАлгоритм) И ЗначениеЗаполнено(ПоказательРасшифровки.Сумма) Тогда
					
					Прервать;
					
				КонецЕсли;	
				
			КонецЦикла;
			
			// Уточняем настройки периода, в одном отчете могут содержаться данные за разные периоды
			// И расшифровывать их нужно соответственно
			Отчет.НачалоПериода =  	ПараметрыРасшифровки.НачалоПериода; 
			Отчет.КонецПериода =  	ПараметрыРасшифровки.КонецПериода; 
			
			// Характеристика - соответсвует полю в схеме компоновки данных 
			ХарактеристикаОбъектаНаблюдения = ПараметрыРасшифровки.Характеристика;
			
			// Указатель на схему компоновки данных
			ИсточникДанных = ПараметрыРасшифровки.ИсточникДанных;
			
			// Проверяем детализацию
			Если ПараметрыРасшифровки.Детализировать Тогда
				
				Отчет.Детализация = ПараметрыРасшифровки.Аналитика;
				ПредставлениеОтчета = Отчет.Детализация;
				
			Иначе
				
				ПредставлениеОтчета = ПоказательРасшифровки.НаименованиеПоказателя;
				
			КонецЕсли;	
			
			// Инициализируем схему компоновки данных
			ИзменениеСхемыКомпоновкиДанныхНаСервере();
			
			Если ЗначениеЗаполнено(ПараметрыРасшифровки.ПримененнаяНастройка) Тогда
				
				// Получаем настройки которые били применены для получения показателя
				Настройка = ОбщегоНазначения.ЗначениеИзСтрокиXML(ПараметрыРасшифровки.ПримененнаяНастройка);
				
				// Применяем эти настройки
				КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Отчет.КомпоновщикНастроек.Настройки.Отбор, Настройка, Ложь);
				
				
				// Сбрасываем признак пользовательских настроек у отборов
				Для Каждого ЭлементОтбра Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
					
					ЭлементОтбра.ИдентификаторПользовательскойНастройки = "";
					ЭлементОтбра.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Дерево настроек содержит примененные настройки в привязке к иерархии объектов наблюдения
			// дерево нужно для подробной иллюстрации настроек (должно объяснить "почему показатель получился именно таким?")
			ДеревоНастроек 	= ПараметрыРасшифровки.ДеревоНастроек; 
			
			Если ТипЗнч(ДеревоНастроек) = Тип("ТаблицаЗначений") Тогда
				
				// Копируем дерево настроек чтобы не менять данные в расшифровке
				ДеревоНастроек = ДеревоНастроек.Скопировать();
				
			Иначе
				// Если дерево настроек не задано, получим пустое
				ДеревоНастроек = ЗаполнениеФормСтатистики.НовыйДеревоНастроек();
				
			КонецЕсли;	
			
			// Распакуем настройки отбора записанные в дерево как строка XML
			ПодготовитьДеревоНастроек(ДеревоНастроек);
			
			// Помещаем подготовленное дерево настроек во временное хранилище
			АдресДереваНастроек = ПоместитьВоВременноеХранилище(ДеревоНастроек, УникальныйИдентификатор);
			
		КонецЕсли;
		
		ЭтаФорма.Элементы.СформироватьОтчет.Доступность = ФормированиеОтчетаДоступно;
		
	Иначе
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если ФормированиеОтчетаДоступно Тогда
		// Если формирование разрешено, формируем отчет
		ЗапуститьФормированиеОтчета();
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//Никогда не сохраняем вариант
	ЭтаФорма.ВариантМодифицирован = Ложь;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если Элемент.ТекущаяОбласть.Верх > НомерСтрокиРазделителя Тогда
		ДанныеРасшифровки = ДанныеРасшифровкиНастроек;	
	Иначе
		ДанныеРасшифровки = ДанныеРасшифровкиОтчета;	
	КонецЕсли;	
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	  
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры
