#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда



// Формирует табличную часть отчета
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища)Экспорт 
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыОтбора", ПараметрыОтчета.СписокДокументов);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументыОтбора.Документ КАК Документ
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ДокументыОтбора КАК ДокументыОтбора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ КАК Документ
	|ИЗ
	|	ТаблицаДокументов КАК Документы
	|ГДЕ
	|	(НЕ Документы.Документ ССЫЛКА Документ.АвансовыйОтчет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаФактуры.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетаФактуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК Документы
	|		ПО (Документы.Документ ССЫЛКА Документ.АвансовыйОтчет)
	|			И СчетаФактуры.ДокументОснование = Документы.Документ";
	Фильтр = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	
	Результат = УчетНДСПереопределяемый.ОпределитьНаличиеСчетовФактурПолученных(
		?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода), Неопределено, ПараметрыОтчета.НачалоПериода),			// НачПериода
		?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода), Неопределено, ПараметрыОтчета.КонецПериода),				// КонПериода
		?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.Организация), Неопределено, ПараметрыОтчета.Организация),				// Организация
		?((Фильтр.Количество() > 0 И ПараметрыОтчета.ВсеКромеСпискаДокументов <> Неопределено), Фильтр, Неопределено),	// Фильтр
		?(ПараметрыОтчета.ВсеКромеСпискаДокументов = Неопределено, Истина, ПараметрыОтчета.ВсеКромеСпискаДокументов),	// ВсеКромеФильтра
		ПараметрыОтчета.НаличиеСчетаФактуры,	// НаличиеСчетаФактуры
		,										// СчетФактураПроведен
		,										// ДатаСФНеБолее
		Истина);								// ЭтоОтчет
	
	СформироватьНаличиеСчетовФактур(ПараметрыОтчета, ТабличныйДокумент, Результат);
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
КонецПроцедуры

// Процедура формирует табличный документ с отчетом по наличию счетов-фактур.
//
// Параметры:
//  ДокументРезультат - табличный документ, в который выводится
//                      отчет по наличию счетов-фактур
//  ТаблицаРезультат - таблица значений, содержащая данные для построения
//                     отчета
//
// Возвращаемое значение:
//  Нет.
//
Процедура СформироватьНаличиеСчетовФактур(ПараметрыОтчета, ДокументРезультат, ТаблицаРезультат) Экспорт
	
	ДокументРезультат.Очистить();
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.ПолеСверху         = 10;
	ДокументРезультат.ПолеСнизу          = 10;
	ДокументРезультат.ПолеСлева          = 20;
	ДокументРезультат.ПолеСправа         = 20;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НаличиеСчетовФактур";
	
	// Получим макет и области макета.
	Макет = ПолучитьМакет("НаличиеСчетовФактур");
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	Шапка           = Макет.ПолучитьОбласть("Шапка");
	Строка          = Макет.ПолучитьОбласть("Строка");
	Подвал          = Макет.ПолучитьОбласть("Подвал");
	
	// Выведем заголовок отчета.
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, ?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода), ТекущаяДата(), ПараметрыОтчета.КонецПериода));	
	
	ЗаголовокОтчета.Параметры.НаименованиеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) И НЕ ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		ЗаголовокОтчета.Параметры.ОписаниеПериода = "С " + Формат(ПараметрыОтчета.НачалоПериода, "ДЛФ=DD");
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) И ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		ЗаголовокОтчета.Параметры.ОписаниеПериода = "По " + Формат(ПараметрыОтчета.КонецПериода, "ДЛФ=DD");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) И ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		ЗаголовокОтчета.Параметры.ОписаниеПериода = ПредставлениеПериода(НачалоДня(ПараметрыОтчета.НачалоПериода), КонецДня(ПараметрыОтчета.КонецПериода), "ФП=Истина");
	Иначе
		ЗаголовокОтчета.Параметры.ОписаниеПериода = "(Без ограничения периода)";
	КонецЕсли;
	
	ДокументРезультат.Вывести(ЗаголовокОтчета);
	
	// Выведем шапку таблицы.
	ДокументРезультат.Вывести(Шапка);
	
	// Выведем строки таблицы.
	Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
		
		Строка.Параметры.Заполнить(СтрокаРезультат);
		
		Если СтрокаРезультат.ЭтоСчетФактураПолученный Тогда
			ТекстСчетФактура = НСтр("ru='Счет-фактура полученный %1 от %2'");
			ТекстСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСчетФактура, 
				СтрокаРезультат.СчетФактураНомер,Формат(СтрокаРезультат.СчетФактураДата,"ДЛФ=Д"));
			Строка.Параметры.СчетФактура = ТекстСчетФактура;
		КонецЕсли;
		
		Строка.Параметры.СчетФактураРасшифровка = СтрокаРезультат.СчетФактура;
		
		Строка.Параметры.СчетФактураПроведен = ?(СтрокаРезультат.СчетФактураПроведен = Истина, "●", "");
		
		Строка.Параметры.НомерСтроки = ТаблицаРезультат.Индекс(СтрокаРезультат) + 1;
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(Строка);
		СтрокаСПодвалом.Добавить(Подвал);
		
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаСПодвалом) Тогда
			
			ДокументРезультат.Вывести(Подвал);
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			ДокументРезультат.Вывести(Шапка);
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(Строка);
		
	КонецЦикла;
	
	ДокументРезультат.Вывести(Подвал);
	
	ДокументРезультат.ТолькоПросмотр = Истина;
	
КонецПроцедуры


#КонецЕсли