#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Ложь, Истина, Ложь);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Остатки денежных средств на " + Формат(ПараметрыОтчета.Период, "ДФ=dd.MM.yyyy; ДП=...");
		
КонецФункции

// Формирует таблицу данных для монитора руководителя по организации на дату
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	Дата - Дата - дата на которую нужны остатки
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПолучитьОстаткиДенежныхСредствДляМонитораРуководителя(Организация, Дата) Экспорт
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ложь);
	
	Если СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
		
		СписокОрганизаций = Новый Массив;
		СписокОрганизаций.Добавить(Организация);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВедетсяУчетПоВалютам", БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет());
	
	// ВалютаРегламентированногоУчета пронадобится еще раз ниже
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	// Получим список счетов кассы для отбора
	СписокСчетов = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса);
	// Уберем из иерархии счета по которым не хотим отбирать
	СписокСчетов = ОбщегоНазначенияКлиентСервер.СократитьМассив(СписокСчетов, БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеДокументы)); 
	СписокСчетов = ОбщегоНазначенияКлиентСервер.СократитьМассив(СписокСчетов, БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал)); 
	Запрос.УстановитьПараметр("СчетаКассы", СписокСчетов);
	
	// Получим список счетов безналичных расчетов для отбора
	СписокСчетов = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетов, БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ВалютныеСчета));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетов, БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СпециальныеСчета));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетов, БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПереводыВПути_));
	
	// Уберем из иерархии счета по которым не хотим отбирать
	СписокСчетов = ОбщегоНазначенияКлиентСервер.СократитьМассив(СписокСчетов, БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)); 
	СписокСчетов = ОбщегоНазначенияКлиентСервер.СократитьМассив(СписокСчетов, БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам)); 
	СписокСчетов = ОбщегоНазначенияКлиентСервер.СократитьМассив(СписокСчетов, БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты)); 
	
	Запрос.УстановитьПараметр("СчетаУчетаБезналичные", СписокСчетов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаКассы), , Организация В (&Организация)) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК Сумма,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегламентированногоУчета) КАК Валюта,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0) КАК СуммаВВалюте,
		|	ХозрасчетныйОстатки.Валюта.Наименование КАК ВалютаНаименование
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаУчетаБезналичные), , Организация В (&Организация)) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегламентированногоУчета),
		|	ЕСТЬNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0),
		|	ХозрасчетныйОстатки.Валюта.Наименование";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаДанных = МониторРуководителя.ТаблицаДанных();
	ИтогоВКассе = 0;
	
	// Касса 
	ТаблицаОстатковВКассе = Результат[0].Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Для Каждого СтрокаКасса Из ТаблицаОстатковВКассе Цикл
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Представление 		= НСтр("ru = 'В кассе'");
		СтрокаДанных.ДанныеРасшифровки 	= ВалютаРегламентированногоУчета;
		СтрокаДанных.Порядок       		= 1;
		СтрокаДанных.Сумма         		= СтрокаКасса.Сумма;
		ИтогоВКассе = ИтогоВКассе + СтрокаКасса.Сумма;

	КонецЦикла;   
	
	// Подготовим переменные которые будем использовать при заполнении таблицы
	ПредставлениеДляРублевыхСчетов = НСтр("ru = 'На рублевых счетах'");
	
	ИтогоНаРасчетныхСчетах = 0;
	// Расчетные счета 
	ТаблицаОстатковНаСчетах = Результат[1].Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Для Каждого СтрокаНаСчетах Из ТаблицаОстатковНаСчетах Цикл
		
		ВалютаОстатка        = СтрокаНаСчетах.Валюта;
		
		// Для рублевых счетов особенное представление и порядок
		Если ВалютаОстатка = ВалютаРегламентированногоУчета Тогда
			ПредставлениеОстатка = ПредставлениеДляРублевыхСчетов;
			Порядок = 2;
		Иначе
			ПредставлениеОстатка = СтрокаНаСчетах.ВалютаНаименование;
			Порядок = 3;
		КонецЕсли;
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Представление 		= ПредставлениеОстатка;
		СтрокаДанных.ДанныеРасшифровки  = ВалютаОстатка;
		СтрокаДанных.Порядок       		= Порядок;
		СтрокаДанных.Сумма         		= СтрокаНаСчетах.Сумма;
		СтрокаДанных.СуммаВВалюте  		= СтрокаНаСчетах.СуммаВВалюте;
		ИтогоНаРасчетныхСчетах = ИтогоНаРасчетныхСчетах + СтрокаНаСчетах.Сумма;
		
	КонецЦикла;   
	
	
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Представление = НСтр("ru = 'Итого'"); 
	СтрокаДанных.Сумма         = ИтогоВКассе + ИтогоНаРасчетныхСчетах;
	
	Возврат ТаблицаДанных;
	
КонецФункции 

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Рубль", Константы.ВалютаРегламентированногоУчета.Получить());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВедетсяУчетПоВалютам", БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет());
    
	Если ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", КонецДня(ПараметрыОтчета.Период) + 1);
	КонецЕсли;
	
	Таблица = Неопределено;
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл		
		Если ЭлементСтруктуры.Имя = "Таблица" Тогда
			Таблица = ЭлементСтруктуры;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Если Таблица <> Неопределено Тогда
		// Группировка
		Таблица.Строки.Очистить();
		Группировка = Таблица.Строки;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование Тогда
				Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
					Группировка = Группировка.Добавить();
				Иначе
					Группировка = Группировка.Структура.Добавить();
				КонецЕсли;
				БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);				
			КонецЕсли;
		КонецЦикла;
		Если Не БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет() Тогда
			Для Каждого ЭлементСтруктуры Из Таблица.Колонки Цикл
				Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
					Если Строка(ПолеГруппировки.Поле) =  "Валюта" Тогда
						ЭлементСтруктуры.Использование = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиДенежныхСредств").Размещение.Вставить(Метаданные.Подсистемы.Руководителю82.Подсистемы.ДенежныеСредства, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиДенежныхСредств").Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.ДенежныеСредства, "");
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#КонецЕсли