#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Ложь, Истина, Ложь);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Продажи" + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Субконто", ВидыСубконтоКД);
	
	
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ПараметрыОтчета.Периодичность, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", Периодичность);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДата()));
	КонецЕсли;
	
	ВыводитьДиаграмму = Неопределено;
	
	Если НЕ ПараметрыОтчета.Свойство("ВыводитьДиаграмму", ВыводитьДиаграмму) Тогда
		
		ВыводитьДиаграмму = Истина;
		
	КонецЕсли;
	
	Таблица   = Неопределено;
	Диаграмма = Неопределено;
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл		
		Если ЭлементСтруктуры.Имя = "Таблица" Тогда
			Таблица = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "Диаграмма" Тогда
			Диаграмма = ЭлементСтруктуры;
		КонецЕсли;		
	КонецЦикла;
	
	Если Диаграмма <> Неопределено Тогда
		
		Если ВыводитьДиаграмму Тогда
			
			Диаграмма.Точки.Очистить();
			ГруппировкаПериод = Диаграмма.Точки.Добавить();
			ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование = Истина;
			ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
			ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
			ПолеГруппировки.НачалоПериода =	НачалоДня(ПараметрыОтчета.НачалоПериода);
			ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
			
			ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			// Группировка
			Диаграмма.Серии.Очистить();
			Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
				Если ПолеВыбраннойГруппировки.Использование Тогда
					Группировка = Диаграмма.Серии.Добавить();
					БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);				
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
		Иначе
			
			Диаграмма.Использование = ВыводитьДиаграмму;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Таблица <> Неопределено Тогда
		Таблица.Колонки.Очистить();
		ГруппировкаПериод = Таблица.Колонки.Добавить();
		ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
		ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
		ПолеГруппировки.НачалоПериода = НачалоДня(ПараметрыОтчета.НачалоПериода);
		ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
		
		ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		// Группировка
		Таблица.Строки.Очистить();
		Группировка = Таблица.Строки;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование Тогда
				Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
					Группировка = Группировка.Добавить();
				Иначе
					Группировка = Группировка.Структура.Добавить();
				КонецЕсли;
				БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
		
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				Рисунок.Объект.МаксимумСерий = МаксимумСерий.Ограничено;
				Рисунок.Объект.МаксимумСерийКоличество = 6; // 5 топовых + 1 прочие
				
				Рисунок.Объект.СводнаяСерия.Текст = НСтр("ru = 'Прочие'");
				Рисунок.Объект.СводнаяСерия.Цвет  = WebЦвета.ТусклоСерый;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ПродажиПоНоменклатурнымГруппам = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоНоменклатурнымГруппам");
	ПродажиПоНоменклатурнымГруппам.ФункциональныеОпции.Добавить("ИспользоватьНесколькоНоменклатурныхГрупп");
	ПродажиПоНоменклатурнымГруппам.Размещение.Вставить(Метаданные.Подсистемы.Руководителю82.Подсистемы.Продажи, "");
	ПродажиПоНоменклатурнымГруппам.Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Продажи, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоНоменклатуре").Размещение.Вставить(Метаданные.Подсистемы.Руководителю82.Подсистемы.Продажи, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоКонтрагентам").Размещение.Вставить(Метаданные.Подсистемы.Руководителю82.Подсистемы.Продажи, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоНоменклатуре").Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Продажи, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПродажиПоКонтрагентам").Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Продажи, "");
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","ПродажиПоНоменклатурнымГруппам", "Продажи по номенклатурным группам"));
	Массив.Добавить(Новый Структура("Имя, Представление","ПродажиПоКонтрагентам", "Продажи по контрагентам"));
	Массив.Добавить(Новый Структура("Имя, Представление","ПродажиПоНоменклатуре", "Продажи по номенклатуре"));
	
	Возврат Массив;
	
КонецФункции

// Формирует таблицу данных для монитора руководителя по организации за период
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	ДатаНач - Дата - дата начала периода
// 	ДатаКон - Дата - дата конца периода
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПолучитьПродажиПоКонтрагентамДляМонитораРуководителя(Организация, ДатаНач, ДатаКон) Экспорт
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ложь);
	
	Если СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
		
		СписокОрганизаций = Новый Массив;
		СписокОрганизаций.Добавить(Организация);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаКон));
	
	СписокСчетов = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка);
	Запрос.УстановитьПараметр("СчетаВыручки", СписокСчетов);
	
	СписокСчетов = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса);
	Запрос.УстановитьПараметр("СчетаКассы", СписокСчетов);
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.СуммаОборотКт КАК Сумма,
	               |	ХозрасчетныйОбороты.КорСубконто1 КАК Контрагент
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаВыручки), , Организация В (&Организация), НЕ КорСчет В (&СчетаКассы), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)) КАК ХозрасчетныйОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.СуммаОборотКт,
	               |	НЕОПРЕДЕЛЕНО
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаВыручки), , Организация В (&Организация), КорСчет В (&СчетаКассы), ) КАК ХозрасчетныйОбороты
	               |ГДЕ
	               |	ХозрасчетныйОбороты.СуммаОборотКт <> 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сумма УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаДанных = МониторРуководителя.ТаблицаДанных();
	
	Для ИндексСтроки = 0 По Мин(2, Результат.Количество() - 1) Цикл
		
		СтрокаРезультата = Результат[ИндексСтроки];
		Контрагент = СтрокаРезультата.Контрагент;
				
		СтрокаДанных = ТаблицаДанных.Добавить();
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаДанных.Представление 		= Контрагент;
			СтрокаДанных.ДанныеРасшифровки	= Контрагент;
		Иначе
			СтрокаДанных.Представление 	= НСтр("ru = 'Розничные покупатели и прочие'");
		КонецЕсли;
		
		СтрокаДанных.Порядок 			= 1;
		СтрокаДанных.Сумма 				= СтрокаРезультата.Сумма;
		
	КонецЦикла;   
	
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Представление 	= НСтр("ru = 'Итого'");
	СтрокаДанных.Сумма 			= Результат.Итог("Сумма");
	
	Возврат ТаблицаДанных;			   
	
КонецФункции	

// Формирует таблицу данных для монитора руководителя по организации за период
// Параметры
// 	Организация - СправочникСсылка.Организации - Организация по которой нужны данные
// 	ДатаНач - Дата - дата начала периода
// 	ДатаКон - Дата - дата конца периода
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с данными для монитора руководителя
//
Функция ПолучитьПродажиПоНоменклатурнымГруппамДляМонитораРуководителя(Организация, ДатаНач, ДатаКон) Экспорт
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ложь);
	
	Если СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
		
		СписокОрганизаций = Новый Массив;
		СписокОрганизаций.Добавить(Организация);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаКон));
	
	СписокСчетов = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка);
	Запрос.УстановитьПараметр("СчетаВыручки", СписокСчетов);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.СуммаОборотКт КАК Сумма,
	               |	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&СчетаВыручки), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы), Организация В (&Организация), , ) КАК ХозрасчетныйОбороты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сумма УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаДанных = МониторРуководителя.ТаблицаДанных();
	
	Для ИндексСтроки = 0 По Мин(2, Результат.Количество() - 1) Цикл
		
		СтрокаРезультата = Результат[ИндексСтроки];
		НоменклатурнаяГруппа = СтрокаРезультата.НоменклатурнаяГруппа;
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Представление 		= НоменклатурнаяГруппа;
		СтрокаДанных.ДанныеРасшифровки	= НоменклатурнаяГруппа;
		СтрокаДанных.Порядок 			= 1;
		СтрокаДанных.Сумма 				= СтрокаРезультата.Сумма;
		
	КонецЦикла;   
	
	// Добавляем итог по разделу
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.Представление 		= НСтр("ru = 'Итого'");
	СтрокаДанных.ДанныеРасшифровки 	= НСтр("ru = 'Итого'");
	СтрокаДанных.Сумма 				= Результат.Итог("Сумма");
	
	Возврат ТаблицаДанных;			   
	
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#КонецЕсли