#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция СчетаУчетаТоваров() Экспорт
	
	СчетаУчетаТоваров = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Товары));

	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(СчетаУчетаТоваров, ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(СчетаУчетаТоваров, ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(СчетаУчетаТоваров, ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода);
	
	Счета_43 = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаТоваров, Счета_43);
	
	Счета_10 = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Материалы);
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Счета_10, ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаТоваров, Счета_10);
	
	Счета_21 = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаТоваров, Счета_21);
	
	Счета_1011 = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	
	СчетаУчетаТоваров = ОбщегоНазначенияКлиентСервер.СократитьМассив(СчетаУчетаТоваров, Счета_1011);
	
	Возврат СчетаУчетаТоваров;
	
КонецФункции

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Ложь, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Остатки по складу на %1'"), Формат(ПараметрыОтчета.КонецПериода, "ДЛФ=DD"));
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор, "Количество");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор, "Сумма");
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	СчетаУчетаТоваров = СчетаУчетаТоваров();
	
	СтруктураСчетов = СтруктураСчетов(СчетаУчетаТоваров);
	
	Для Каждого Счета Из СтруктураСчетов Цикл
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, Счета.Ключ, Счета.Значение);
		
	КонецЦикла;
	
	// Группировка
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	Группировка = КомпоновщикНастроек.Настройки.Структура;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
				Группировка = Группировка.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			Иначе
				Группировка = Группировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиПоСкладу").Размещение.Вставить(Метаданные.Подсистемы.Руководителю82.Подсистемы.Продажи, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиПоСкладу").Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Продажи, "");
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","ОстаткиПоСкладу", "Остатки по складу"));
	
	Возврат Массив;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СтруктураСчетов(СчетаУчетаТоваров)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	               |	ХозрасчетныйВидыСубконто.ВидСубконто,
	               |	ХозрасчетныйВидыСубконто.Суммовой
	               |ПОМЕСТИТЬ ВидыСубконто
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	               |ГДЕ
	               |	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаУчетаТоваров)
	               |	И ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоСклады
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыСубконто.Счет КАК Счет
	               |ИЗ
	               |	ВидыСубконто КАК ВидыСубконто
	               |ГДЕ
	               |	ВидыСубконто.Суммовой = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыСубконто.Счет
	               |ИЗ
	               |	ВидыСубконто КАК ВидыСубконто
	               |ГДЕ
	               |	ВидыСубконто.Суммовой = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	НЕ Хозрасчетный.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВидыСубконто.Счет КАК Счет
	               |				ИЗ
	               |					ВидыСубконто КАК ВидыСубконто)
	               |	И Хозрасчетный.Ссылка В(&СчетаУчетаТоваров)";
				   
	Запрос.УстановитьПараметр("СчетаУчетаТоваров", СчетаУчетаТоваров);
	Запрос.УстановитьПараметр("ВидСубконтоСклады", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураСчетов = Новый Структура;
	
	СтруктураСчетов.Вставить("СчетаУчетаСкладИНоменклатура", Результат[1].Выгрузить().ВыгрузитьКолонку("Счет"));
	
	СтруктураСчетов.Вставить("СчетаУчетаСкладТолькоКоличествоИНоменклатура", Результат[2].Выгрузить().ВыгрузитьКолонку("Счет"));
	
	СтруктураСчетов.Вставить("СчетаУчетаНоменклатураБезСклада", Результат[3].Выгрузить().ВыгрузитьКолонку("Счет"));
	
	Возврат СтруктураСчетов;
	
КонецФункции

#КонецЕсли