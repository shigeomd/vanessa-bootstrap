#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Оборотно-сальдовая ведомость по счету " + ПараметрыОтчета.Счет + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	// Очищаем структуру отчета и выбранные поля
	// Они будут перезаполнены в соответствии с настройками которые сделал пользователь
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОтчета.Счет);
	
	// Определим субсчета, в которых состав субконто отличается от родительского
	ОсобенныеСчета = СубсчетаСДругимСоставомСубконто(СвойстваСчета);
	
	// Счета, у которых есть субконто и их состав отличается от состава субконто родительского счета,
	// будут исключены из основного запроса, данные по ним получим отдельным запросом, учитывающим их отличие
	// Счета, у которых нет субконто или есть субконто но их состав полностью не совпадает с составом субконто родительского счета,
	// не будут обрабатываться отдельно, в общем запросе в параметрах виртуальной таблицы нет отбора по видам субконто
	// поэтому данные этих счетов не потеряются
	СчетаИсключенныеИзОбщегоЗапроса = Новый Массив;
	
	Если ОсобенныеСчета.Количество() > 0 Тогда
		
		// Сначала добавим запрос по счетам, у которых есть полный набор субконто
		// Субконто отличаются только порядком
		ИндексНабора = 0;
		
		СтруктураПараметров = СтруктураПараметровДляПодстановкиВТекстЗапроса();
		
		// Отбираем счета с текущим набором субконто
		НаборСчетов = ОсобенныеСчета.НайтиСтроки(Новый Структура("ПолныйНабор", Истина));
		
		// Получаем эталонную схему компоновки
		// Из нее получим шаблон запроса
		СхемаЭталон = ПолучитьМакет("СхемаКомпоновкиДанных");
		
		НаборДанныхПоСубконто = СхемаЭталон.НаборыДанных.ОсновнойНаборДанных.Элементы.ПоСубконто;
		
		ШаблонЗапроса = НаборДанныхПоСубконто.Запрос;
		
		ТекстЗапроса = "";
		Разделитель = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		
		Если НаборСчетов.Количество() > 0 Тогда
			Счета = Новый СписокЗначений();
			
			Для Каждого Счет Из НаборСчетов Цикл
				
				Счета.Добавить(Счет.Счет);
				СчетаИсключенныеИзОбщегоЗапроса.Добавить(Счет.Счет);
				
			КонецЦикла;
			
			// Помещаем список счетов в параметр СКД
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(Схема, "Счета" + ИндексНабора, "Счета", Счета);
			
			// Указываем условие счета для подстановки в текст запроса
			СтруктураПараметров.Вставить("УсловиеСчета", "Счет В (&Счета" + ИндексНабора + ")");
			
			СубконтоНабора = Новый СписокЗначений;
			СубконтоНабора.Добавить(СвойстваСчета["ВидСубконто1"]);
			СубконтоНабора.Добавить(СвойстваСчета["ВидСубконто2"]);
			СубконтоНабора.Добавить(СвойстваСчета["ВидСубконто3"]);
			
			СтруктураПараметров.Вставить("Субконто1", "ОстаткиИОбороты.Субконто1 КАК Субконто1,");
			СтруктураПараметров.Вставить("Субконто1Представление", "ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиИОбороты.Субконто1) КАК Субконто1Представление,");
			СтруктураПараметров.Вставить("ПараметрСубконто1", "(Субконто1).* КАК Субконто1,");
			СтруктураПараметров.Вставить("УсловиеСубконто1", "ОстаткиИОбороты.Субконто1.* КАК Субконто1,");
			
			СтруктураПараметров.Вставить("Субконто2", "ОстаткиИОбороты.Субконто2 КАК Субконто2,");
			СтруктураПараметров.Вставить("Субконто2" + "Представление", "ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиИОбороты.Субконто2) КАК Субконто2Представление,");
			СтруктураПараметров.Вставить("ПараметрСубконто2", "(Субконто2).* КАК Субконто2,");
			СтруктураПараметров.Вставить("УсловиеСубконто2", "ОстаткиИОбороты.Субконто2.* КАК Субконто2,");
			
			СтруктураПараметров.Вставить("Субконто3", "ОстаткиИОбороты.Субконто3 КАК Субконто3,");
			СтруктураПараметров.Вставить("Субконто3Представление", "ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиИОбороты.Субконто3) КАК Субконто3Представление,");
			СтруктураПараметров.Вставить("ПараметрСубконто3", "(Субконто3).* КАК Субконто3,");
			СтруктураПараметров.Вставить("УсловиеСубконто3", "ОстаткиИОбороты.Субконто3.* КАК Субконто3,");
			
			// Записываем виды субконто в параметр СКД
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(Схема, "ВидыСубконто" + ИндексНабора, "ВидыСубконто", СубконтоНабора);
			
			// Указываем параметр ВидыСубконто для подстановки в текст запроса
			СтруктураПараметров.Вставить("ВидыСубконто", "&ВидыСубконто" + ИндексНабора);
			
			// Формируем тест запроса
			// Подставляем собранные параметры в шаблон и добавляем получившийся подзапрос в общий запрос
			ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, СтруктураПараметров) + Разделитель;
			
			// Некоторые части запроса нужны только в первом запросе объединения
			// Корректируем шаблон для последующих запросов
			ПерваяЧастьШаблона = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ШаблонЗапроса, "//НачалоШаблона", "//НачалоСекцииВыбратьСКД");
			ВтораяЧастьШаблона = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ШаблонЗапроса, "//КонецСекцииВыбратьСКД", "//КонецШаблона");
			ШаблонЗапроса = ПерваяЧастьШаблона + Символы.ПС + ВтораяЧастьШаблона;
			ИндексНабора = ИндексНабора + 1;
			
		КонецЕсли;
		
		// Индекс характеризует состав субконто каждого субсчета в терминах родительского счета
		// Количество различных индексов соответствует количеству подзапросов по счетам с одинаковым
		// составом субконто, но при этом отличным от родительского счета
		ОсобенныеСчетаИндекс = ОсобенныеСчета.Скопировать();
		
		ОсобенныеСчетаИндекс.Свернуть("Индекс");
		
		// Перебираем различные наборы субконто
		Для Каждого Индекс Из ОсобенныеСчетаИндекс Цикл
			
			// Если нет ни одного субконто или ни одно субконто этого счета не совпадает с родительским
			Если Индекс.Индекс = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = СтруктураПараметровДляПодстановкиВТекстЗапроса();
			
			// Отбираем счета с текущим набором субконто и не имеющие полного набора субконто
			НаборСчетов = ОсобенныеСчета.НайтиСтроки(Новый Структура("Индекс, ПолныйНабор", Индекс.Индекс, Ложь));
			
			Если НаборСчетов.Количество() > 0 Тогда
				
				Счета = Новый СписокЗначений();
				
				Для Каждого Счет Из НаборСчетов Цикл
					
					Счета.Добавить(Счет.Счет);
					СчетаИсключенныеИзОбщегоЗапроса.Добавить(Счет.Счет);
					
				КонецЦикла;
				
				// Помещаем список счетов в параметр СКД
				БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(Схема, "Счета" + ИндексНабора, "Счета", Счета);
				
				// Указываем условие счета для подстановки в текст запроса
				СтруктураПараметров.Вставить("УсловиеСчета", "Счет В (&Счета" + ИндексНабора + ")");
				
				СубконтоНабора = Новый СписокЗначений;
				
				ИндексСубконто = 1;
				
				Если Счет.Субконто1 > 0 Тогда
					
					// В таблице записаны номера субконто родительского счета, поэтому значение берем оттуда
					СубконтоНабора.Добавить(СвойстваСчета["ВидСубконто1"]);
					
					// Корректируем параметры подстановки в запрос
					СтруктураПараметров.Вставить("Субконто1", "ОстаткиИОбороты.Субконто" + ИндексСубконто + " КАК Субконто1,");
					СтруктураПараметров.Вставить("Субконто1Представление", "ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиИОбороты.Субконто" + ИндексСубконто + ") КАК Субконто1Представление,");
					СтруктураПараметров.Вставить("ПараметрСубконто1", "(Субконто" + ИндексСубконто + ").* КАК Субконто1,");
					СтруктураПараметров.Вставить("УсловиеСубконто1", "ОстаткиИОбороты.Субконто" + ИндексСубконто + ".* КАК Субконто1,");
					
					ИндексСубконто = ИндексСубконто + 1;
					
				КонецЕсли;
				
				Если Счет.Субконто2 > 0 Тогда
					
					СубконтоНабора.Добавить(СвойстваСчета["ВидСубконто2"]);
					
					// Корректируем параметры подстановки в запрос
					СтруктураПараметров.Вставить("Субконто2", "ОстаткиИОбороты.Субконто" + ИндексСубконто + " КАК Субконто2,");
					СтруктураПараметров.Вставить("Субконто2Представление", "ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиИОбороты.Субконто" + ИндексСубконто + ") КАК Субконто2Представление,");
					СтруктураПараметров.Вставить("ПараметрСубконто2", "(Субконто" + ИндексСубконто + ").* КАК Субконто2,");
					СтруктураПараметров.Вставить("УсловиеСубконто2", "ОстаткиИОбороты.Субконто" + ИндексСубконто + ".* КАК Субконто2,");
					
					ИндексСубконто = ИндексСубконто + 1;
					
				КонецЕсли;
				
				Если Счет.Субконто3 > 0 Тогда
					
					СубконтоНабора.Добавить(СвойстваСчета["ВидСубконто3"]);
					
					// Корректируем параметры подстановки в запрос
					СтруктураПараметров.Вставить("Субконто3", "ОстаткиИОбороты.Субконто" + ИндексСубконто + " КАК Субконто3,");
					СтруктураПараметров.Вставить("Субконто3Представление", "ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиИОбороты.Субконто" + ИндексСубконто + ") КАК Субконто3Представление,");
					СтруктураПараметров.Вставить("ПараметрСубконто3", "(Субконто" + ИндексСубконто + ").* КАК Субконто3,");
					СтруктураПараметров.Вставить("УсловиеСубконто3", "ОстаткиИОбороты.Субконто" + ИндексСубконто + ".* КАК Субконто3,");
					
				КонецЕсли;
				
				// Записываем виды субконто в параметр СКД
				БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(Схема, "ВидыСубконто" + ИндексНабора, "ВидыСубконто", СубконтоНабора);
				
				// Указываем параметр ВидыСубконто для подстановки в текст запроса
				СтруктураПараметров.Вставить("ВидыСубконто", "&ВидыСубконто" + ИндексНабора);
				
				// Формируем тест запроса
				// Подставляем собранные параметры в шаблон и добавляем получившийся подзапрос в общий запрос
				ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, СтруктураПараметров) + Разделитель;
				
				// Некоторые части запроса нужны только в первом запросе объединения
				// Корректируем шаблон для последующих запросов
				Если ИндексНабора = 0 Тогда
					ПерваяЧастьШаблона = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ШаблонЗапроса, "//НачалоШаблона", "//НачалоСекцииВыбратьСКД");
					ВтораяЧастьШаблона = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ШаблонЗапроса, "//КонецСекцииВыбратьСКД", "//КонецШаблона");
					ШаблонЗапроса = ПерваяЧастьШаблона + Символы.ПС + ВтораяЧастьШаблона;
				КонецЕсли;
				ИндексНабора = ИндексНабора + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		// Убираем маркеры из текста запроса
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//НачалоШаблона", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//НачалоСекцииВыбратьСКД", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//КонецСекцииВыбратьСКД", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//КонецШаблона", " ");
		
		// Включаем "закомментированные" строки
		// Изменяемые параметры в шаблоне запроса заданы как комментарии
		// поэтому после формирования текста запроса, снимаем признак комментария
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//", "");
		
		// Удаляем послений разделитель и помещаем текст запроса в схему
		Схема.НаборыДанных.ОсновнойНаборДанных.Элементы.ПоСубконто.Запрос = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 17);
		
	КонецЕсли;
	
	// Если не нашлось счетов с особенным порядком субконто, "обнуляем" запрос набора данных "ПоСубконто"
	Если СчетаИсключенныеИзОбщегоЗапроса.Количество() = 0 Тогда
		
		Схема.НаборыДанных.ОсновнойНаборДанных.Элементы.ПоСубконто.Запрос = ПустойЗапрос();
		
	КонецЕсли;
	
	// Вычитаем из полного списка субсчетов счета другим составом субконто 
	СписокСчетов = ОбщегоНазначенияКлиентСервер.СократитьМассив(БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(СвойстваСчета.Ссылка), СчетаИсключенныеИзОбщегоЗапроса);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Счет", СписокСчетов);
	
	// Для запроса по иерархии счетов нужны все субсчета без исключений
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетСИерархией", БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(СвойстваСчета.Ссылка));
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", ПараметрыОтчета.Периодичность);
		
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДата()));
	КонецЕсли;
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	Таблица = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	
	ВидыОстатка = Новый Массив;
	ВидыОстатка.Добавить("");
	
	Если ПараметрыОтчета.РазвернутоеСальдо Тогда
		ВидыОстатка.Добавить("Развернутый");
	КонецЕсли;
	
	Если КоличествоПоказателей > 1 Тогда
		
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя = "Показатели";
		ГруппаПоказатели = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = БухгалтерскиеОтчеты.ЗаголовокГруппыПоказателей();
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		Для Каждого ВидОстатка Из ВидыОстатка Цикл
			Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ИмяПоказателя + ВидОстатка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Для начального сальдо, оборотов и конечного сальдо создадим по отдельной колонке
	// в каждой колонке будет 2 ячейки дебет и кредит
	
	// Колонка Начальное сальдо
	Колонка = Таблица.Колонки.Добавить();
	Колонка.Имя = "СальдоНаНачалоПериода";
	ГруппаСальдоНаНачало = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачало.Заголовок     = "Сальдо на начало периода";
	ГруппаСальдоНаНачало.Использование = Истина;
	ГруппаСальдоНаНачалоДт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоДт.Заголовок     = "Дебет";
	ГруппаСальдоНаНачалоДт.Использование = Истина;
	ГруппаСальдоНаНачалоДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаНачалоКт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоКт.Заголовок     = "Кредит";
	ГруппаСальдоНаНачалоКт.Использование = Истина;
	ГруппаСальдоНаНачалоКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	// Колонка Обороты
	Колонка = Таблица.Колонки.Добавить();
	Колонка.Имя = "ОборотыЗаПериод";
	ГруппаОбороты = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = "Обороты за период";
	ГруппаОбороты.Использование = Истина;
	ГруппаОборотыДт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыДт.Заголовок     = "Дебет";
	ГруппаОборотыДт.Использование = Истина;
	ГруппаОборотыДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаОборотыКт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыКт.Заголовок     = "Кредит";
	ГруппаОборотыКт.Использование = Истина;
	ГруппаОборотыКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	// Колонка Конечное сальдо
	Колонка = Таблица.Колонки.Добавить();
	Колонка.Имя = "СальдоНаКонецПериода";
	ГруппаСальдоНаКонец = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонец.Заголовок     = "Сальдо на конец периода";
	ГруппаСальдоНаКонец.Использование = Истина;
	ГруппаСальдоНаКонецДт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецДт.Заголовок     = "Дебет";
	ГруппаСальдоНаКонецДт.Использование = Истина;
	ГруппаСальдоНаКонецДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаКонецКт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецКт.Заголовок     = "Кредит";
	ГруппаСальдоНаКонецКт.Использование = Истина;
	ГруппаСальдоНаКонецКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	Для Каждого ВидОстатка Из ВидыОстатка Цикл
		
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, "СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокДт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, "СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокКт");
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыДт,        "ОборотыЗаПериод."       + ИмяПоказателя + ВидОстатка + "ОборотДт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыКт,        "ОборотыЗаПериод."       + ИмяПоказателя + ВидОстатка + "ОборотКт");
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  "СальдоНаКонецПериода."  + ИмяПоказателя + "Конечный"  + ВидОстатка + "ОстатокДт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  "СальдоНаКонецПериода."  + ИмяПоказателя + "Конечный"  + ВидОстатка + "ОстатокКт");
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = "Уменьшенный автоотступ" Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Представление = "Уменьшенный автоотступ";
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;

	Структура = Таблица.Строки.Добавить();
	
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
	ПолеОформления.Поле = ПолеГруппировки.Поле;
 	
	Если Не ПараметрыОтчета.ПоСубсчетам Тогда
		ЗначениеОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
		ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КонецЕсли;
	
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить();
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			ПолеОформления.Поле = ПолеГруппировки.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Период
	БухгалтерскиеОтчетыВызовСервера.ДобавитьГруппировкуПоПериоду(ПараметрыОтчета, Структура);
	
	Для каждого ЭлементГруппировки Из Структура.ПоляГруппировки.Элементы Цикл
		Если ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных(?(ПараметрыОтчета.Периодичность = 2, "Регистратор", "Период")) Тогда
			Поле = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			Поле.Поле = ЭлементГруппировки.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Валюта
	Если ПараметрыОтчета.ПоказательВалютнаяСумма И БухгалтерскиеОтчетыКлиентСервер.НайтиГруппировку(Таблица.Строки, "Валюта") = Неопределено Тогда
		Структура = Структура.Структура.Добавить();
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
		
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборДляПоказателяКонтроль(ПараметрыОтчета, КомпоновщикНастроек);
	
	Если УсловноеОформлениеАвтоотступа.Поля.Элементы.Количество() = 0 Тогда
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
	КонецЕсли;

	// Пометить строки для удаления по счетам, на которых не ведется налоговый учет
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("ВР");
	МассивПоказателей.Добавить("ПР");
	МассивПоказателей.Добавить("Контроль");
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	Для Каждого Показатель Из МассивПоказателей Цикл
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + Показатель + "НачальныйОстатокДт");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + Показатель + "НачальныйРазвернутыйОстатокДт");
	КонецЦикла;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловноеОформление.Отбор, "Счет.НалоговыйУчет", Ложь);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	// Определим количество группировок
	КоличествоГруппировок = 0;
	
	Для Каждого СтрокаТаблицы Из ПараметрыОтчета.Группировка Цикл
		Если СтрокаТаблицы.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;

	// Снимем флаг Игнорировать значение Null для реквизитов субконто
	Для ИндексСубконто = 1 По 3 Цикл
		Для Каждого Поле Из МакетКомпоновки.НаборыДанных.ОсновнойНаборДанных.Поля Цикл
			
			Если Лев(Поле.ПутьКДанным, 10) = "Субконто" + ИндексСубконто + "." Тогда
				
				Поле.Роль.ИгнорироватьЗначенияNULL = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;

	КоличествоСтрокШапки = Макс(?(КоличествоГруппировок = 1,2,КоличествоГруппировок), 1);
	ПараметрыОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки + 1);

	// Обработка шапки отчета
	// Шапка отчета состоит и 4 макетов, макет шапки таблицы, и 3 макета группировок колонок
	// поместим ссылки на них в массив, для дальнейшей обработки
	МакетШапкиТаблицы = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетШапки(МакетКомпоновки);
	
	МакетыШапкиОтчета = Новый Массив;
	МакетыШапкиОтчета.Добавить(МакетШапкиТаблицы.Имя);

	Для Каждого Колонка Из МакетКомпоновки.Тело[0].Колонки Цикл

		Для Каждого ТелоГруппировки Из Колонка.Тело Цикл
			МакетыШапкиОтчета.Добавить(ТелоГруппировки.Макет);
		КонецЦикла;

	КонецЦикла;
	
	// Удалим лишние строки из шапки отчета
	МассивДляУдаления = Новый Массив;
	
	Для Каждого ИмяМакетаШапкиОтчета Из МакетыШапкиОтчета Цикл
		
		МакетШапкиОтчета = МакетКомпоновки.Макеты[ИмяМакетаШапкиОтчета];
		
		
		Для Индекс = КоличествоСтрокШапки + 1 По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
			
			МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
			
		КонецЦикла;
		
		Для Каждого Элемент Из МассивДляУдаления Цикл
			МакетШапкиОтчета.Макет.Удалить(Элемент);
		КонецЦикла;
		
		// Если группировка только по счету, объединим ячейки заголовка таблицы
		Если МакетШапкиОтчета = МакетШапкиТаблицы И КоличествоСтрокШапки = 1 Тогда
			
			Для Каждого Ячейка Из МакетШапкиОтчета.Макет[МакетШапкиОтчета.Макет.Количество() - 1].Ячейки Цикл
				
				Оформление = Ячейка.Оформление.Элементы.Найти("ОбъединятьПоВертикали");
				Оформление.Значение = Истина;
				Оформление.Использование = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
	
	// Запомним какие макеты ресурсов каким колонкам соответствуют
	// Это может понадобиться для обработки развернутого сальдо
	СоответствиеМакетовКолонкамОтчета = Новый Соответствие;
	
	Если ПараметрыОтчета.РазвернутоеСальдо Тогда
		
		// Макет подвала таблицы это макет подвала верхней группировки из этой таблицы
		МакетПодвалаТаблицы = МакетКомпоновки.Макеты[МакетКомпоновки.Тело[0].Строки[0].МакетПодвала.Макет];
		
		КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
		
		// В итогах снача идет обычное сальдо а затем развернутое, разделим заголовок итогов на 2 части
		// И нижнюю подпишем "Итого развернутое"
		ЯчейкаРазвернутыйИтог = МакетПодвалаТаблицы.Макет[КоличествоПоказателей].Ячейки[0];
		
		ОбъединятьПоВертикали = ЯчейкаРазвернутыйИтог.Оформление.Элементы.Найти("ОбъединятьПоВертикали");
		
		Если ОбъединятьПоВертикали <> Неопределено Тогда
			
			ОбъединятьПоВертикали.Использование = Ложь;
			
		КонецЕсли;

		ЯчейкаРазвернутыйИтог.Элементы.Очистить();
		НовыйЭлемент = ЯчейкаРазвернутыйИтог.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
		НовыйЭлемент.Значение = НСтр("ru = 'Итого развернутое'");
		
		// В дальнейй обработке понадобится знать где макеты ресурсов подвала
		МакетыПодвалаТаблицы = Новый Массив;
		МакетыПодвалаТаблицы.Добавить(МакетПодвалаТаблицы.Имя);
		
		Для Каждого МакетРесурсаПодвала Из МакетКомпоновки.Тело[0].Строки[0].МакетПодвала.МакетРесурсов Цикл
			МакетыПодвалаТаблицы.Добавить(МакетРесурсаПодвала.Макет);
		КонецЦикла;
		
		// Найдем все макеты ресурсов
		МакетыРесурсов = Новый Массив;
		
		ЗаполнитьМакетыРесурсовГруппировки(МакетКомпоновки.Тело[0].Строки, МакетыРесурсов, СоответствиеМакетовКолонкамОтчета, , Истина, Истина);
			
		// Перереберем все макеты и удалим из них "простое" сальдо
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
			
			СтрокиМакета = Макет.Макет;
			
			// Макеты шапки и подвала обрабатывать не нужно
			Если МакетыШапкиОтчета.Найти(Макет.Имя) <> Неопределено ИЛИ МакетыПодвалаТаблицы.Найти(Макет.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			УдаляемыеСтроки = Новый Массив;
			
			// Определеляем колонку к которой принадлежит макет
			Колонка = СоответствиеМакетовКолонкамОтчета.Получить(Макет.Имя);
			
			Если Колонка = Неопределено Тогда
				
				Для Сч = КоличествоПоказателей По СтрокиМакета.Количество() - 1 Цикл
					
					УдаляемыеСтроки.Добавить(СтрокиМакета[Сч]);
					
				КонецЦикла;
				
			Иначе
				
				Для Сч = 0 По КоличествоПоказателей - 1 Цикл
					
					УдаляемыеСтроки.Добавить(СтрокиМакета[Сч]);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого СтрокаКУдалению Из УдаляемыеСтроки Цикл
				
				СтрокиМакета.Удалить(СтрокаКУдалению);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Макеты групировки и ресурсов групировки по валюте,
	// будем использовать для определения принадлежности элемента Макет, Макета компоновки к группироквке по валюте
	МакетГруппировкиВалюта = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта");
	МакетРесурсовГруппировкиВалюта = Новый Массив;
	
	МассивИменМакетовВалюта = Новый Массив;
	Для Каждого МакетВалюта Из МакетГруппировкиВалюта Цикл
		МассивИменМакетовВалюта.Добавить(МакетВалюта.Имя);
	КонецЦикла;
	
	ЗаполнитьМакетыРесурсовГруппировки(МакетКомпоновки.Тело[0].Строки, МакетРесурсовГруппировкиВалюта, СоответствиеМакетовКолонкамОтчета, "Валюта", Истина);

	// Если в отчете включена валютная сумма, то ее нужно показывать только по тем счетам
	// где есть валюта, для того чтобы убрать вывод показателя валюта там где он не нужен
	// переберем все макеты, и удалим строки предназначенные для вывода валютных сумм у всех макетов
	// кроме макетов группировки по валюте и макетов ресурсов групировки по валюте
	Если ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
			// Пропускаем макеты шапки
			Если МакетыШапкиОтчета.Найти(Макет.Имя) = Неопределено Тогда
				
				Если МассивИменМакетовВалюта.Найти(Макет.Имя) <> Неопределено ИЛИ МакетРесурсовГруппировкиВалюта.Найти(Макет.Имя) <> Неопределено Тогда
					
					Если ПараметрыОтчета.ПоказательКонтроль Тогда
						Макет.Макет.Удалить(Макет.Макет.Количество() - 2);
					КонецЕсли;
					
				ИначеЕсли Макет.Макет.Количество() > 1 Тогда // Последний не удаляем
					
					Макет.Макет.Удалить(Макет.Макет.Количество() - 1);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Возвращаем схему компоновки в исходное состояние
	СхемаКомпоновкиДанных = Неопределено;
	Если ТипЗнч(ПараметрыОтчета.СхемаКомпоновкиДанных) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных) Тогда
			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = ПараметрыОтчета.СхемаКомпоновкиДанных;
	КонецЕсли;

	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		
		СхемаКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Элементы.ПоСубконто.Запрос = ПустойЗапрос();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	Иначе
		Результат.ФиксацияСверху = Результат.Области.Заголовок.Низ + ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	НаборПоказателей.Добавить("Контроль");
	НаборПоказателей.Добавить("ВалютнаяСумма");
	НаборПоказателей.Добавить("Количество");
	
	Возврат НаборПоказателей;
	
КонецФункции


#Область СлужебныеПроцедурыИФункции

Функция СубсчетаСДругимСоставомСубконто(СвойстваСчета)
	
Запрос = Новый Запрос;
	
Запрос.Текст = "ВЫБРАТЬ
               |	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
               |	ХозрасчетныйВидыСубконто.НомерСтроки,
               |	ХозрасчетныйВидыСубконто.ВидСубконто.Ссылка КАК ВидСубконто
               |ПОМЕСТИТЬ ВидыСубконто
               |ИЗ
               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
               |ГДЕ
               |	ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&Счет)
               |	И ХозрасчетныйВидыСубконто.ВидСубконто.Ссылка В (&ВидСубконто1, &ВидСубконто2, &ВидСубконто3)
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВидыСубконто.Счет
               |ПОМЕСТИТЬ ОсобенныеСчета
               |ИЗ
               |	ВидыСубконто КАК ВидыСубконто
               |ГДЕ
               |	(ВидыСубконто.НомерСтроки = 1
               |				И ВидыСубконто.ВидСубконто <> &ВидСубконто1
               |			ИЛИ ВидыСубконто.НомерСтроки = 2
               |				И ВидыСубконто.ВидСубконто <> &ВидСубконто2
               |			ИЛИ ВидыСубконто.НомерСтроки = 3
               |				И ВидыСубконто.ВидСубконто <> &ВидСубконто3)
               |	И ВидыСубконто.Счет <> &Счет
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВидыСубконто.Счет КАК Счет,
               |	ВидыСубконто.НомерСтроки
               |ПОМЕСТИТЬ ВидСубконто1
               |ИЗ
               |	ВидыСубконто КАК ВидыСубконто
               |ГДЕ
               |	ВидыСубконто.ВидСубконто = &ВидСубконто1
               |
               |ИНДЕКСИРОВАТЬ ПО
               |	Счет
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВидыСубконто.Счет КАК Счет,
               |	ВидыСубконто.НомерСтроки
               |ПОМЕСТИТЬ ВидСубконто2
               |ИЗ
               |	ВидыСубконто КАК ВидыСубконто
               |ГДЕ
               |	ВидыСубконто.ВидСубконто = &ВидСубконто2
               |
               |ИНДЕКСИРОВАТЬ ПО
               |	Счет
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВидыСубконто.Счет КАК Счет,
               |	ВидыСубконто.НомерСтроки
               |ПОМЕСТИТЬ ВидСубконто3
               |ИЗ
               |	ВидыСубконто КАК ВидыСубконто
               |ГДЕ
               |	ВидыСубконто.ВидСубконто = &ВидСубконто3
               |
               |ИНДЕКСИРОВАТЬ ПО
               |	Счет
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ОсобенныеСчета.Счет,
               |	ЕСТЬNULL(ВидСубконто1.НомерСтроки, 0) КАК Субконто1,
               |	ЕСТЬNULL(ВидСубконто2.НомерСтроки, 0) КАК Субконто2,
               |	ЕСТЬNULL(ВидСубконто3.НомерСтроки, 0) КАК Субконто3,
               |	ЕСТЬNULL(ВидСубконто1.НомерСтроки, 0) * 100 + ЕСТЬNULL(ВидСубконто2.НомерСтроки, 0) * 10 + ЕСТЬNULL(ВидСубконто3.НомерСтроки, 0) КАК Индекс,
               |	ВЫБОР
               |		КОГДА ЕСТЬNULL(ВидСубконто1.НомерСтроки, 0) + ЕСТЬNULL(ВидСубконто2.НомерСтроки, 0) + ЕСТЬNULL(ВидСубконто3.НомерСтроки, 0) = 6
               |			ТОГДА ИСТИНА
               |		ИНАЧЕ ЛОЖЬ
               |	КОНЕЦ КАК ПолныйНабор
               |ИЗ
               |	ОсобенныеСчета КАК ОсобенныеСчета
               |		ЛЕВОЕ СОЕДИНЕНИЕ ВидСубконто1 КАК ВидСубконто1
               |		ПО ОсобенныеСчета.Счет = ВидСубконто1.Счет
               |		ЛЕВОЕ СОЕДИНЕНИЕ ВидСубконто2 КАК ВидСубконто2
               |		ПО ОсобенныеСчета.Счет = ВидСубконто2.Счет
               |		ЛЕВОЕ СОЕДИНЕНИЕ ВидСубконто3 КАК ВидСубконто3
               |		ПО ОсобенныеСчета.Счет = ВидСубконто3.Счет
               |
               |СГРУППИРОВАТЬ ПО
               |	ОсобенныеСчета.Счет,
               |	ВидСубконто1.НомерСтроки,
               |	ВидСубконто2.НомерСтроки,
               |	ВидСубконто3.НомерСтроки";
	
	Запрос.УстановитьПараметр("Счет", СвойстваСчета.Ссылка);
	
	Запрос.УстановитьПараметр("ВидСубконто1", СвойстваСчета.ВидСубконто1);
	Запрос.УстановитьПараметр("ВидСубконто2", СвойстваСчета.ВидСубконто2);
	Запрос.УстановитьПараметр("ВидСубконто3", СвойстваСчета.ВидСубконто3);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СтруктураПараметровДляПодстановкиВТекстЗапроса()
	
	// Инициализируем структуру параметров для подстановки в текст запроса
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("УсловиеСчета", "Ложь");
	СтруктураПараметров.Вставить("ВидыСубконто", "");
	
	СтруктураПараметров.Вставить("Субконто1", "НЕОПРЕДЕЛЕНО КАК Субконто1,");
	СтруктураПараметров.Вставить("Субконто2", "НЕОПРЕДЕЛЕНО КАК Субконто2,");
	СтруктураПараметров.Вставить("Субконто3", "НЕОПРЕДЕЛЕНО КАК Субконто3,");
	СтруктураПараметров.Вставить("Субконто1Представление", """"" КАК Субконто1Представление,");
	СтруктураПараметров.Вставить("Субконто2Представление", """"" КАК Субконто2Представление,");
	СтруктураПараметров.Вставить("Субконто3Представление", """"" КАК Субконто3Представление,");
	
	СтруктураПараметров.Вставить("ПараметрСубконто1", "");
	СтруктураПараметров.Вставить("ПараметрСубконто2", "");
	СтруктураПараметров.Вставить("ПараметрСубконто3", "");
	
	СтруктураПараметров.Вставить("УсловиеСубконто1", "");
	СтруктураПараметров.Вставить("УсловиеСубконто2", "");
	СтруктураПараметров.Вставить("УсловиеСубконто3", "");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ЗаполнитьМакетыРесурсовГруппировки(Таблица, МассивМакетов, СоответствиеМакетовКолонкамОтчета, ПолеГруппировки = Неопределено, ВключатьМакетыВложенныхГруппировок = Ложь, ПрочитатьМакетыРесурсов = Ложь)
	
	// Переребираем все элементы макета
	Для Каждого Группировка Из Таблица Цикл
		
		Если ТипЗнч(Группировка) = Тип("ГруппировкаТаблицыМакетаКомпоновкиДанных") Тогда
			// Если это группировка проверим поле группировки
			Если ПолеГруппировки = Неопределено ИЛИ Группировка.Группировка[0].ИмяПоля = ПолеГруппировки Тогда
				
				Если ВключатьМакетыВложенныхГруппировок Тогда
					// Перебираем вложенные группировки, условие по полю группировки в них не накладываем
					ЗаполнитьМакетыРесурсовГруппировки(Группировка.Тело, МассивМакетов, СоответствиеМакетовКолонкамОтчета,,,Истина);
				Иначе
					ЗаполнитьМакетыРесурсовГруппировки(Группировка.Тело, МассивМакетов, СоответствиеМакетовКолонкамОтчета, ПолеГруппировки, ВключатьМакетыВложенныхГруппировок, Истина);
				КонецЕсли;
				
				// Перебираем иерархию группировки
				Для Каждого ТелоИерархии Из Группировка.ТелоИерархии Цикл
					
					Если ТипЗнч(ТелоИерархии) = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") Тогда
						
						Для Каждого МакетРесурсов Из ТелоИерархии.МакетРесурсов Цикл
							// Помещаем макеты в массив
							МассивМакетов.Добавить(МакетРесурсов.Макет);
							// Добавляем соответствие макетов ресурсов и колонок отчета
							СоответствиеМакетовКолонкамОтчета.Вставить(МакетРесурсов.Макет, МакетРесурсов.МакетГруппировки);
							
						КонецЦикла;
						
					КонецЕсли;
				
				КонецЦикла;
				
			Иначе
				// Если эта группировка не подошла по условию проверим вложенные группировки
				ЗаполнитьМакетыРесурсовГруппировки(Группировка.Тело, МассивМакетов, СоответствиеМакетовКолонкамОтчета, ПолеГруппировки, ВключатьМакетыВложенныхГруппировок);

			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Группировка) = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") И ПрочитатьМакетыРесурсов Тогда
			
			Для Каждого МакетРесурсов Из Группировка.МакетРесурсов Цикл
				
				// Помещаем макеты в массив
				МассивМакетов.Добавить(МакетРесурсов.Макет);
				// Добавляем соответствие макетов ресурсов и колонок отчета
				СоответствиеМакетовКолонкамОтчета.Вставить(МакетРесурсов.Макет, МакетРесурсов.МакетГруппировки);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ПустойЗапрос()
	
	Возврат "
			|	ВЫБРАТЬ
			|	Неопределено КАК Организация
			|";
	
КонецФункции

#КонецОбласти

#КонецЕсли