#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ИнициализироватьОтчет();

	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
	Если КлючВарианта = "Т2" ИЛИ КадровыйУчетВнутренний.ОтчетВидаКарточкаСотрудника(КлючВарианта) Тогда
		
		Попытка
			
			СтандартнаяОбработка = Ложь;
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФормаТ2";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			ДокументРезультат.Очистить();
			ДокументРезультат.АвтоМасштаб = Истина;
			ДокументРезультат.НачатьАвтогруппировкуСтрок();
			
			НастройкиОтчета = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();
			НастройкиОтчета.Выбор.Элементы.Очистить();
			СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
			ПроверитьЗначенияПараметров(НастройкиОтчета, Истина);
			
			ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
			Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("СтандартнаяДатаНачала") Тогда
				ДатаОтчета = ЗначениеПараметра.Значение.Дата;
			Иначе
				ДатаОтчета = ЗначениеПараметра.Значение;
			КонецЕсли;
			
			РаботникКадровойСлужбыРасшифровкаПодписи = "";
			ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РаботникКадровойСлужбы"));
			Если ЗначениеПараметра <> Неопределено
				И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
				
				КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ЗначениеПараметра.Значение, "ИОФамилия", ДатаОтчета);
				Если КадровыеДанные.Количество() > 0 Тогда
					РаботникКадровойСлужбыРасшифровкаПодписи = КадровыеДанные[0].ИОФамилия;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Данные = Новый ДеревоЗначений;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			// Создадим и инициализируем процессор компоновки.
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(Данные);
			
			// Обозначим начало вывода
			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			
			Группировки = ОтчетыКлиентСервер.ПолучитьПоляГруппировок(ЭтотОбъект.КомпоновщикНастроек);
			
			Если КадровыйУчетВнутренний.ОтчетВидаКарточкаСотрудника(КлючВарианта) Тогда
				
				КадровыйУчетВнутренний.ВывестиМакетыОтчетовПоСотрудникам(КлючВарианта, ДокументРезультат, Данные, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
				
			Иначе
				ВывестиМакетыСГруппировкамиT2(ДокументРезультат, Данные, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
			КонецЕсли;
			
			ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru = 'В настройку отчета внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	Иначе
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		ПроверитьЗначенияПараметров(НастройкиОтчета);
		
		СтандартнаяОбработка = ложь;
		
		ДокументРезультат.Очистить();
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ДоработатьСхемуОтчетаПоСотрудникам(ЭтотОбъект);
	КонецЕсли; 
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	
КонецПроцедуры

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	ИнициализироватьОтчет();
	ЗначениеВДанныеФормы(ЭтотОбъект, Форма.Отчет);
	
КонецПроцедуры

// Унифицированная форма Т-2

Процедура ВывестиМакетыСГруппировкамиT2(ДокументРезультат, Данные, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи)
	
	Если Группировки.Количество() > 0 Тогда
	
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
		
			ПолеДанных = Группировки[0].Значение;
			ВывестиГруппировкуT2(ДокументРезультат, СтрокаДанных, ПолеДанных, 0, СоответствиеПользовательскихПолей);
			ВывестиВложенныеГруппировкиСМакетамиT2(ДокументРезультат, СтрокаДанных, Группировки, 1, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
		
		КонецЦикла;
		
	Иначе
		
		ДополнительныеСведения = КадровыйУчет.ДополнительныеСведенияУнифицированнойФормыТ2(Данные.Строки, ДатаОтчета);
		
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
			
			ВывестиМакетT2(ДокументРезультат, СтрокаДанных, 0, ДатаОтчета, ДополнительныеСведения, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
			
			Если СтрокаДанных <> Данные.Строки.Получить(Данные.Строки.Количество() - 1) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиВложенныеГруппировкиСМакетамиT2(ДокументРезультат, Данные, Группировки, Уровень, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи)
	
	Если Группировки.Количество() > Уровень Тогда 
		
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
		
			ПолеДанных = Группировки[Уровень].Значение;
			ВывестиГруппировкуT2(ДокументРезультат, СтрокаДанных, ПолеДанных, Уровень,  СоответствиеПользовательскихПолей);
			ВывестиВложенныеГруппировкиСМакетамиT2(ДокументРезультат, СтрокаДанных, Группировки, Уровень + 1, ДатаОтчета,  СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
		
		КонецЦикла;
		
	Иначе
		
		ДополнительныеСведения = КадровыйУчет.ДополнительныеСведенияУнифицированнойФормыТ2(Данные.Строки, ДатаОтчета);
		
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
			
			ВывестиМакетT2(ДокументРезультат, СтрокаДанных, Уровень, ДатаОтчета, ДополнительныеСведения,  СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиГруппировкуT2(ДокументРезультат, СтрокаДанных, Поле, Уровень, СоответствиеПользовательскихПолей)
	
	МакетГруппировки  = УправлениеПечатью.МакетПечатнойФормы("Отчет.ОтчетыПоСотрудникам.ПФ_MXL_Т2");
	ОбластьГруппировки = МакетГруппировки.ПолучитьОбласть("Группировка");
	
	ДоступноеПоле = ОтчетыКлиентСервер.ПолучитьДоступноеПоле(КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок, Новый ПолеКомпоновкиДанных(Поле));
	
	ОбластьГруппировки.Параметры.НазваниеПараметра = ДоступноеПоле.Заголовок;
	ОбластьГруппировки.Параметры.Значение = СтрокаДанных[СтрЗаменить(Поле, ".", "")];
	
	ДокументРезультат.Вывести(ОбластьГруппировки, Уровень);
	
КонецПроцедуры 

Процедура ВывестиМакетT2(ДокументРезультат, СтрокаДанных, Уровень, ДатаОтчета, ДополнительныеСведения, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи) 
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ОтчетыПоСотрудникам.ПФ_MXL_Т2");
	
	ВыводитьФормуТ2ГС = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		ВыводитьФормуТ2ГС = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").СведенияГосслужащего(СтрокаДанных);
	КонецЕсли;
	
	ПерваяСтраницаТ2Заголовок				= Макет.ПолучитьОбласть("ПерваяСтраницаТ2Заголовок");
	ПерваяСтраницаТ2						= Макет.ПолучитьОбласть("ПерваяСтраницаТ2");
	ПерваяСтраницаТ2Продолжение				= Макет.ПолучитьОбласть("ПерваяСтраницаТ2Продолжение");
	ВтораяСтраницаТ2						= Макет.ПолучитьОбласть("ВтораяСтраницаТ2");
	ВтораяСтраницаТ2Продолжение1			= Макет.ПолучитьОбласть("ВтораяСтраницаТ2Продолжение1");
	ВтораяСтраницаТ2Продолжение2			= Макет.ПолучитьОбласть("ВтораяСтраницаТ2Продолжение2");
	ТретьяСтраницаТ2						= Макет.ПолучитьОбласть("ТретьяСтраницаТ2");
	ЧетвертаяСтраницаТ2						= Макет.ПолучитьОбласть("ЧетвертаяСтраницаТ2");
	ЧетвертаяСтраницаТ2Продолжение			= Макет.ПолучитьОбласть("ЧетвертаяСтраницаТ2Продолжение");
	ЧетвертаяСтраницаТ2Продолжение2			= Макет.ПолучитьОбласть("ЧетвертаяСтраницаТ2Продолжение2");
	ШапкаСоставСемьи						= Макет.ПолучитьОбласть("ШапкаСоставСемьи");
	СтрокаСоставСемьи						= Макет.ПолучитьОбласть("СтрокаСоставСемьи");
	ЗаголовокПриемыПеремещения				= Макет.ПолучитьОбласть("ЗаголовокПриемыПеремещения");
	ШапкаПриемыПеремещения					= Макет.ПолучитьОбласть("ШапкаПриемыПеремещения");
	СтрокаПриемыПеремещения					= Макет.ПолучитьОбласть("СтрокаПриемыПеремещения");
	ПриемыПеремещенияКоличествоСтрок		= 5;
	
	КлассныеЧиныЗаголовок					= Макет.ПолучитьОбласть("КлассныеЧиныЗаголовок");
	КлассныеЧиныШапка						= Макет.ПолучитьОбласть("КлассныеЧиныШапка");
	КлассныеЧиныСтрока						= Макет.ПолучитьОбласть("КлассныеЧиныСтрока");
	КлассныеЧиныКоличествоСтрок				= 3;
	
	АттестацияЗаголовок						= Макет.ПолучитьОбласть("АттестацияЗаголовок");
	АттестацияШапка							= Макет.ПолучитьОбласть("АттестацияШапка");
	АттестацияСтрока						= Макет.ПолучитьОбласть("АттестацияСтрока");
	АттестацияКоличествоСтрок				= 3;
	
	ПовышениеКвалификацииЗаголовок			= Макет.ПолучитьОбласть("ПовышениеКвалификацииЗаголовок");
	ПовышениеКвалификацииШапка				= Макет.ПолучитьОбласть("ПовышениеКвалификацииШапка");
	ПовышениеКвалификацииСтрока				= Макет.ПолучитьОбласть("ПовышениеКвалификацииСтрока");
	ПовышениеКвалификацииКоличествоСтрок	= 3;
	
	ПрофессиональнаяПереподготовкаЗаголовок	= Макет.ПолучитьОбласть("ПрофессиональнаяПереподготовкаЗаголовок");
	ПрофессиональнаяПереподготовкаШапка		= Макет.ПолучитьОбласть("ПрофессиональнаяПереподготовкаШапка");
	ПрофессиональнаяПереподготовкаСтрока	= Макет.ПолучитьОбласть("ПрофессиональнаяПереподготовкаСтрока");
	ПрофессиональнаяПереподготовкаКоличествоСтрок = 3;
	
	ЗаголовокНаграды						= Макет.ПолучитьОбласть("ЗаголовокНаграды");
	ШапкаНаграды							= Макет.ПолучитьОбласть("ШапкаНаграды");
	СтрокаНаграды							= Макет.ПолучитьОбласть("СтрокаНаграды");
	ЗаголовокОтпуска						= Макет.ПолучитьОбласть("ЗаголовокОтпуска");
	ШапкаОтпуска							= Макет.ПолучитьОбласть("ШапкаОтпуска");
	СтрокаОтпуска							= Макет.ПолучитьОбласть("СтрокаОтпуска");
	ЗаголовокДополнительногоЛиста			= Макет.ПолучитьОбласть("ЗаголовокДополнительногоЛиста");
	ПодвалДополнительногоЛиста				= Макет.ПолучитьОбласть("ПодвалДополнительногоЛиста");
	
	ШапкаСтажи								= Макет.ПолучитьОбласть("ШапкаСтажи");
	СтрокаСтажи								= Макет.ПолучитьОбласть("СтрокаСтажи");
	ЗаголовокДополнительногоЛистаСтажи		= Макет.ПолучитьОбласть("ЗаголовокДополнительногоЛистаСтажи");
	
	ЗаголовокДополнительногоЛистаСоставСемьи	= Макет.ПолучитьОбласть("ЗаголовокДополнительногоЛистаСоставСемьи");
	
	Если ВыводитьФормуТ2ГС Тогда
		
		ПерваяСтраницаТ2Заголовок				= Макет.ПолучитьОбласть("ПерваяСтраницаТ2ЗаголовокГС");
		ПерваяСтраницаТ2Продолжение				= Макет.ПолучитьОбласть("ПерваяСтраницаТ2ПродолжениеГС");
		АттестацияЗаголовок						= Макет.ПолучитьОбласть("АттестацияЗаголовокГС");
		ПовышениеКвалификацииЗаголовок			= Макет.ПолучитьОбласть("ПовышениеКвалификацииЗаголовокГС");
		ПрофессиональнаяПереподготовкаЗаголовок	= Макет.ПолучитьОбласть("ПрофессиональнаяПереподготовкаЗаголовокГС");
		ЗаголовокНаграды						= Макет.ПолучитьОбласть("ЗаголовокНаградыГС");
		ЗаголовокОтпуска						= Макет.ПолучитьОбласть("ЗаголовокОтпускаГС");
		ЧетвертаяСтраницаТ2Продолжение			= Макет.ПолучитьОбласть("ЧетвертаяСтраницаТ2ПродолжениеГС");
		
		ПриемыПеремещенияКоличествоСтрок		= 3;
		АттестацияКоличествоСтрок				= 2;
		ПовышениеКвалификацииКоличествоСтрок	= 2;
		ПрофессиональнаяПереподготовкаКоличествоСтрок = 2;
		
	КонецЕсли; 
	
	ВтораяСтраницаТ2Продолжение2.Параметры.РаботникКадровойСлужбыРасшифровкаПодписи = РаботникКадровойСлужбыРасшифровкаПодписи;
	ЧетвертаяСтраницаТ2Продолжение2.Параметры.РаботникКадровойСлужбыРасшифровкаПодписи = РаботникКадровойСлужбыРасшифровкаПодписи;
	ПодвалДополнительногоЛиста.Параметры.РаботникКадровойСлужбыРасшифровкаПодписи = РаботникКадровойСлужбыРасшифровкаПодписи;
	
	ПерваяСтраницаТ2.Параметры.Заполнить(СтрокаДанных);
	ПерваяСтраницаТ2Продолжение.Параметры.Заполнить(СтрокаДанных);
	
	ПерваяСтраницаТ2.Параметры.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(СтрокаДанных.ЛичныеДанныеМестоРождения);
	ПерваяСтраницаТ2.Параметры.ПерваяБукваФамилии = Лев(СокрЛП(СтрокаДанных.ЛичныеДанныеФамилия), 1);
	ПерваяСтраницаТ2.Параметры.ДатаАктуальности   = ДатаОтчета;
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(ПерваяСтраницаТ2, СтрокаДанных, СоответствиеПользовательскихПолей);
	
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеСтрана) И СтрокаДанных.ЛичныеДанныеСтрана <> Справочники.СтраныМира.Россия Тогда
		ПерваяСтраницаТ2.Параметры.Гражданство = ПерваяСтраницаТ2.Параметры.Гражданство + " (" + СтрокаДанных.ЛичныеДанныеСтрана + ")";
	КонецЕсли; 
	
	ВтораяСтраницаТ2.Параметры.Заполнить(СтрокаДанных);
	ВтораяСтраницаТ2Продолжение1.Параметры.Заполнить(СтрокаДанных);
	
	ВтораяСтраницаТ2Продолжение2.Параметры.Заполнить(СтрокаДанных);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(ВтораяСтраницаТ2Продолжение2, СтрокаДанных, СоответствиеПользовательскихПолей);
	
	// АДРЕСА
	Индекс = "";
	СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияАдресПоПрописке);
	Если СтруктураАдреса.Свойство("Индекс") Тогда
		Индекс = СтруктураАдреса.Индекс;
	КонецЕсли; 
	ВтораяСтраницаТ2Продолжение2.Параметры.ИндексАдресПоПаспорту = Индекс;
	ВтораяСтраницаТ2Продолжение2.Параметры.АдресПоПаспорту       = СтрЗаменить(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеПредставление, Индекс + ",","");
	ВтораяСтраницаТ2Продолжение2.Параметры.ДатаРегистрацииПоМестуЖительства = Формат(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияДатаРегистрации, "ДЛФ=DD");
	
	Индекс = "";
	СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживания);
	Если СтруктураАдреса.Свойство("Индекс") Тогда
		Индекс = СтруктураАдреса.Индекс;
	КонецЕсли; 
	ВтораяСтраницаТ2Продолжение2.Параметры.ИндексАдресФактический = Индекс;
	ВтораяСтраницаТ2Продолжение2.Параметры.АдресФактический       = СтрЗаменить(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияПредставление, Индекс + ",","");
	
	ВидыДокументовПаспорта = ВидыДокументовФизическихЛицПаспортаПоКодамМВД();
	
	// ПАСПОРТ
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументВид) Тогда
		
		Если ВидыДокументовПаспорта.Найти(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументВид) = Неопределено Тогда
			
			ВтораяСтраницаТ2Продолжение2.Параметры.ДругойДокумент = 
				?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументВид), "" + СтрокаДанных.ЛичныеДанныеУдостоверениеДокументВид, "<" + НСтр("ru='вид документа не указан'") + ">") +
				" №" + ?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументНомер), СтрокаДанных.ЛичныеДанныеУдостоверениеДокументНомер, "<" + НСтр("ru='номер документа не указан'") + ">") + 
				?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументСерия), " " + СтрокаДанных.ЛичныеДанныеУдостоверениеДокументСерия, "") + 
				"; " + НСтр("ru='выдан'") + ": " + ?(ЗначениеЗаполнено(СокрЛП(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКемВыдан)), СокрЛП(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКемВыдан), "<" + НСтр("ru='не указано'") + "> ") + 
				" "+ Формат(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументДатаВыдачи,"ДЛФ=DD");
				
		Иначе
				
			ВтораяСтраницаТ2Продолжение2.Параметры.НомерПаспорта = НСтр("ru='серия'") + " " + ?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументСерия),СтрокаДанных.ЛичныеДанныеУдостоверениеДокументСерия,"") + " № " + ?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументНомер),СтрокаДанных.ЛичныеДанныеУдостоверениеДокументНомер,"");
			ВтораяСтраницаТ2Продолжение2.Параметры.ДатаВыдачиПаспорта = Формат(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументДатаВыдачи, "ДЛФ=DD");
			ВтораяСтраницаТ2Продолжение2.Параметры.КемВыданПаспорт = ?(ЗначениеЗаполнено(СокрЛП(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКемВыдан)), СокрЛП(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКемВыдан),"") + ?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКодПодразделения)," № " + НСтр("ru='подразделения'") + " " + СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКодПодразделения,"");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение параметров табличных секций.
	ШапкаСоставСемьи.Параметры.Заполнить(СтрокаДанных);
	
	ЗаголовокПриемыПеремещения.Параметры.Заполнить(СтрокаДанных);
	ШапкаПриемыПеремещения.Параметры.Заполнить(СтрокаДанных);
	
	АттестацияЗаголовок.Параметры.Заполнить(СтрокаДанных);
	АттестацияШапка.Параметры.Заполнить(СтрокаДанных);
	
	ПовышениеКвалификацииЗаголовок.Параметры.Заполнить(СтрокаДанных);
	ПовышениеКвалификацииШапка.Параметры.Заполнить(СтрокаДанных);
	
	ПрофессиональнаяПереподготовкаЗаголовок.Параметры.Заполнить(СтрокаДанных);
	ПрофессиональнаяПереподготовкаШапка.Параметры.Заполнить(СтрокаДанных);
	
	ЗаголовокНаграды.Параметры.Заполнить(СтрокаДанных);
	ШапкаНаграды.Параметры.Заполнить(СтрокаДанных);
	
	ЗаголовокОтпуска.Параметры.Заполнить(СтрокаДанных);
	ШапкаОтпуска.Параметры.Заполнить(СтрокаДанных);
	
	ЗаголовокДополнительногоЛиста.Параметры.Заполнить(СтрокаДанных);
	ЗаголовокДополнительногоЛиста.Параметры.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(СтрокаДанных.ЛичныеДанныеМестоРождения);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(ЗаголовокДополнительногоЛиста, СтрокаДанных, СоответствиеПользовательскихПолей);
	
	ПодвалДополнительногоЛиста.Параметры.Заполнить(СтрокаДанных);
	
	ЧетвертаяСтраницаТ2Продолжение2.Параметры.Заполнить(СтрокаДанных);
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.РабочееМестоПриказОбУвольненииНомер) Тогда
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПриказОбУвольненииНомер = "__________";
	Иначе
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПриказОбУвольненииНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаДанных.РабочееМестоПриказОбУвольненииНомер, Истина, Истина);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтрокаДанных.РабочееМестоПриказОбУвольненииДата) ИЛИ ЗначениеЗаполнено(СтрокаДанных.РабочееМестоДатаУвольнения) Тогда
		
		Если ЗначениеЗаполнено(СтрокаДанных.РабочееМестоПриказОбУвольненииДата) Тогда
			ПриказОбУвольненииДатаПредставление = Формат(СтрокаДанных.РабочееМестоПриказОбУвольненииДата, "ДЛФ=DD");
		Иначе
			ПриказОбУвольненииДатаПредставление = Формат(СтрокаДанных.РабочееМестоДатаУвольнения, "ДЛФ=DD");
		КонецЕсли;
		
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПриказОбУвольненииЧисло = СокрЛП(Лев(ПриказОбУвольненииДатаПредставление, 2));
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПриказОбУвольненииМесяцГод = СокрЛП(Сред(ПриказОбУвольненииДатаПредставление, 3));
	Иначе
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПриказОбУвольненииЧисло = "_____";
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПриказОбУвольненииМесяцГод = " ___________ 20___ г.";
	КонецЕсли;
	
	ОбластиДополнительныхСтрок = Новый Массив;
	МассивПодвалов = Новый Массив;
	МассивПодвалов.Добавить(ПодвалДополнительногоЛиста);
	
	ДокументРезультат.Вывести(ПерваяСтраницаТ2Заголовок, Уровень + 1);
	ДокументРезультат.Вывести(ПерваяСтраницаТ2, Уровень + 1);
	ДокументРезультат.Вывести(ПерваяСтраницаТ2Продолжение, Уровень + 1);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	ДокументРезультат.Вывести(ВтораяСтраницаТ2, Уровень + 1);
	
	// Стажи
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛистаСтажи);

	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеЗаполненияСтажи");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;

	Если ДанныеЗаполненияПоСотруднику.Количество() > 0 Тогда
		
		ПредставлениеДатаСтажа = "8. " + НСтр("ru='Стаж работы (по состоянию на'") + "  " + Формат(СтрокаДанных.ПараметрыДанныхПериод, "ДЛФ=DD") + "):";
		
		// Добавление пустых строк, если стажей менее 4-х.
		Если ДанныеЗаполненияПоСотруднику.Количество() < 4 Тогда
			Для НомерСтажа = ДанныеЗаполненияПоСотруднику.Количество() + 1 По 4 Цикл
				ДанныеЗаполненияПоСотруднику.Добавить(СтруктураПустогоСтажа());
			КонецЦикла;
		КонецЕсли; 
		
	Иначе
		ПредставлениеДатаСтажа = "8. " + НСтр("ru='Стаж работы (по состоянию на'") + "  ""         "" _________ 20     " + НСтр("ru='г'") + ".):";
		ДанныеЗаполненияПоСотруднику = СведенияОСтажахПоУмолчанию();
	КонецЕсли; 
	
	ШапкаСтажи.Параметры.ДатаСтажа = ПредставлениеДатаСтажа;
	ДокументРезультат.Вывести(ШапкаСтажи, Уровень+1);
	
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			4, ОбластиДополнительныхСтрок, ШапкаСтажи, СтрокаСтажи, МассивЗаголовков, МассивПодвалов);
	
	ДокументРезультат.Вывести(ВтораяСтраницаТ2Продолжение1, Уровень+1);	
	
	// Состав семьи
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛистаСоставСемьи);
	ДокументРезультат.Вывести(ШапкаСоставСемьи, Уровень+1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеЗаполненияСоставСемьи");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			6, ОбластиДополнительныхСтрок, ШапкаСоставСемьи, СтрокаСоставСемьи, МассивЗаголовков, МассивПодвалов);
	
	ДокументРезультат.Вывести(ВтораяСтраницаТ2Продолжение2, Уровень+1);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	ДокументРезультат.Вывести(ТретьяСтраницаТ2, Уровень+1);
	
	// Прием на работу и переводы на другую работу.
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ЗаголовокПриемыПеремещения);
	ДокументРезультат.Вывести(ЗаголовокПриемыПеремещения, Уровень+1);
	ДокументРезультат.Вывести(ШапкаПриемыПеремещения, Уровень+1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеЗаполненияКадровойИстории");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.РабочееМестоСотрудник);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
		ПриемыПеремещенияКоличествоСтрок, ОбластиДополнительныхСтрок, ШапкаПриемыПеремещения, СтрокаПриемыПеремещения, МассивЗаголовков, МассивПодвалов);
			
	Если ВыводитьФормуТ2ГС Тогда
				
		// Классные чины
		МассивЗаголовков = Новый Массив;
		МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
		МассивЗаголовков.Добавить(КлассныеЧиныЗаголовок);
		ДокументРезультат.Вывести(КлассныеЧиныЗаголовок, Уровень + 1);
		ДокументРезультат.Вывести(КлассныеЧиныШапка, Уровень + 1);
		ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеКлассныхЧинов");
		Если ДанныеЗаполнения = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		Иначе
			ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
			Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
				ДанныеЗаполненияПоСотруднику = Новый Массив;
			КонецЕсли;
		КонецЕсли;
		ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			КлассныеЧиныКоличествоСтрок, ОбластиДополнительныхСтрок, КлассныеЧиныШапка, КлассныеЧиныСтрока, МассивЗаголовков, МассивПодвалов);
			
	КонецЕсли;
			
	// Аттестации
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(АттестацияЗаголовок);
	ДокументРезультат.Вывести(АттестацияЗаголовок, Уровень + 1);
	ДокументРезультат.Вывести(АттестацияШапка, Уровень + 1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеАттестаций");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.РабочееМестоСотрудник);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			АттестацияКоличествоСтрок, ОбластиДополнительныхСтрок, АттестацияШапка, АттестацияСтрока, МассивЗаголовков, МассивПодвалов);
			
	// Повышении квалификации
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ПовышениеКвалификацииЗаголовок);
	ДокументРезультат.Вывести(ПовышениеКвалификацииЗаголовок, Уровень + 1);
	ДокументРезультат.Вывести(ПовышениеКвалификацииШапка, Уровень + 1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеПовышенияКвалификаций");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			ПовышениеКвалификацииКоличествоСтрок, ОбластиДополнительныхСтрок, ПовышениеКвалификацииШапка, ПовышениеКвалификацииСтрока, МассивЗаголовков, МассивПодвалов);
			
	// Профессиональная подготовка.
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ПрофессиональнаяПереподготовкаЗаголовок);
	ДокументРезультат.Вывести(ПрофессиональнаяПереподготовкаЗаголовок, Уровень + 1);
	ДокументРезультат.Вывести(ПрофессиональнаяПереподготовкаШапка, Уровень + 1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеПрофессиональныхПереподготовок");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			ПрофессиональнаяПереподготовкаКоличествоСтрок, ОбластиДополнительныхСтрок, ПрофессиональнаяПереподготовкаШапка, ПрофессиональнаяПереподготовкаСтрока, МассивЗаголовков, МассивПодвалов);
			
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	ДокументРезультат.Вывести(ЧетвертаяСтраницаТ2, Уровень+1);
	
	// Награды (поощрения), почетные звания.
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ЗаголовокНаграды);
	ДокументРезультат.Вывести(ЗаголовокНаграды, Уровень+1);
	ДокументРезультат.Вывести(ШапкаНаграды, Уровень+1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеЗаполненияНаграды");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			5, ОбластиДополнительныхСтрок, ШапкаНаграды, СтрокаНаграды, МассивЗаголовков, МассивПодвалов);
	
	// Отпуск
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ЗаголовокОтпуска);
	ДокументРезультат.Вывести(ЗаголовокОтпуска, Уровень+1);
	ДокументРезультат.Вывести(ШапкаОтпуска, Уровень+1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеЗаполненияОтпуска");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.РабочееМестоСотрудник);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			14, ОбластиДополнительныхСтрок, ШапкаОтпуска, СтрокаОтпуска, МассивЗаголовков, МассивПодвалов);
	
	ДокументРезультат.Вывести(ЧетвертаяСтраницаТ2Продолжение, Уровень+1);
	ДокументРезультат.Вывести(ЧетвертаяСтраницаТ2Продолжение2, Уровень+1);
	
	ЗарплатаКадры.ВывестиОбластиТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ОбластиДополнительныхСтрок);
	
КонецПроцедуры

Функция ВидыДокументовФизическихЛицПаспортаПоКодамМВД()
	
	ПаспортаПоКодамМВД = Новый Массив;
	
	ПаспортаПоКодамМВД.Добавить(Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота);
	ПаспортаПоКодамМВД.Добавить(Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка);
	ПаспортаПоКодамМВД.Добавить(Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ);
	ПаспортаПоКодамМВД.Добавить(Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР);
	
	ПаспортИностранногоГражданина = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодМВД", "10");
	Если НЕ ПаспортИностранногоГражданина.Пустая() Тогда
		ПаспортаПоКодамМВД.Добавить(ПаспортИностранногоГражданина.Ссылка);
	КонецЕсли; 
	
	Возврат ПаспортаПоКодамМВД;
	
КонецФункции

Функция СведенияОСтажахПоУмолчанию()
	
	МассивСведенийОСтаже = Новый Массив;
	
	МассивСведенийОСтаже.Добавить(Новый Структура("СтажВид,СтажЛет,СтажМесяцев,СтажДней",
		НСтр("ru='Общий'"), 0, 0, 0));
	МассивСведенийОСтаже.Добавить(Новый Структура("СтажВид,СтажЛет,СтажМесяцев,СтажДней",
		НСтр("ru='Непрерывный'"), 0, 0, 0));
	МассивСведенийОСтаже.Добавить(Новый Структура("СтажВид,СтажЛет,СтажМесяцев,СтажДней",
		НСтр("ru='Дающий право на надбавку за выслугу лет'"), 0, 0, 0));
	МассивСведенийОСтаже.Добавить(СтруктураПустогоСтажа());
		
	Возврат МассивСведенийОСтаже;
	
КонецФункции

Функция СтруктураПустогоСтажа()
	
	Возврат Новый Структура("СтажВид,СтажЛет,СтажМесяцев,СтажДней", "___________________________________", 0, 0, 0);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и Функции.

Процедура ПроверитьЗначенияПараметров(НастройкиОтчета, ВыводитьПодписантов = Ложь)
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));

	Если ЗначениеПараметра <> Неопределено Тогда
		
		УстановитьДатуОтчета = Ложь;
		Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("Неопределено") Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("Дата")
			И ЗначениеПараметра.Значение = '00010101' Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли; 
		
		Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("СтандартнаяДатаНачала")
			И Дата(ЗначениеПараметра.Значение) = '00010101' Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли; 
		
		Если УстановитьДатуОтчета Тогда
			ЗначениеПараметра.Значение = ТекущаяДатаСеанса();
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ВыводитьПодписантов Тогда
		
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РаботникКадровойСлужбы"));
		Если НЕ ЗначениеПараметра.Использование Тогда
			ЗначениеПараметра.Значение = Неопределено;
		КонецЕсли; 
		ЗначениеПараметра.Использование = Истина;
		
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьРаботникаКадровойСлужбы"));
		Если НЕ ЗначениеПараметра.Использование Тогда
			ЗначениеПараметра.Значение = Неопределено;
		КонецЕсли; 
		ЗначениеПараметра.Использование = Истина;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли