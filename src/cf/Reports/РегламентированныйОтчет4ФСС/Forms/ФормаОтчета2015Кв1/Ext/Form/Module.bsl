&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обход ошибки платформы "Параметр сеанса отсутствует или удален".
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;

	СтруктураРеквизитовФормы.мЧтоОчищать               = "Расчетную ведомость";
	СтруктураРеквизитовФормы.мСоставПоказателей        = "СоставПоказателей2015Кв1";
	СтруктураРеквизитовФормы.мПоляПоискаПоказателяВТСП = "КодПоказателяПоСоставу, КодПоказателяПоФорме";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	СтруктураРеквизитовФормы.мИдГруппы1       = "П0003100010";
	СтруктураРеквизитовФормы.мИдГруппы2       = "П0004300001";
	СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1 = "П0000100163";
	СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2 = "П0000100164";
	СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3 = "П0000100165";
	СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1 = "П0000700161";
	СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2 = "П0000700162";
	СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3 = "П0000700163";
	
	КолИсхСтрокИдГруппы1        = 1;
	КолИсхСтрокИдГруппы2        = 1;
	КолИсхСтрокИдМСЧ_Раздел11_1 = 1;
	КолИсхСтрокИдМСЧ_Раздел11_2 = 1;
	КолИсхСтрокИдМСЧ_Раздел11_3 = 1;
	КолИсхСтрокИдМСЧ_Раздел27_1 = 1;
	КолИсхСтрокИдМСЧ_Раздел27_2 = 1;
	КолИсхСтрокИдМСЧ_Раздел27_3 = 1;
	
	КолКолонокИдГруппы1        = 5;
	КолКолонокИдГруппы2        = 9;
	КолКолонокИдМСЧ_Раздел11_1 = 2;
	КолКолонокИдМСЧ_Раздел11_2 = 2;
	КолКолонокИдМСЧ_Раздел11_3 = 2;
	КолКолонокИдМСЧ_Раздел27_1 = 5;
	КолКолонокИдМСЧ_Раздел27_2 = 5;
	КолКолонокИдМСЧ_Раздел27_3 = 5;
	
	СтруктураДанныхТитульный   = Новый Структура;
	СтруктураДанныхРаздел1_1   = Новый Структура;
	СтруктураДанныхРаздел1_2   = Новый Структура;
	СтруктураДанныхРаздел1_3   = Новый Структура;
	СтруктураДанныхРаздел1_31  = Новый Структура;
	СтруктураДанныхРаздел1_4   = Новый Структура;
	СтруктураДанныхРаздел1_41  = Новый Структура;
	СтруктураДанныхРаздел1_42  = Новый Структура;
	СтруктураДанныхРаздел1_43  = Новый Структура;
	СтруктураДанныхРаздел1_5   = Новый Структура;
	СтруктураДанныхРаздел2_6   = Новый Структура;
	СтруктураДанныхРаздел2_7   = Новый Структура;
	СтруктураДанныхРаздел2_8_9 = Новый Структура;
	СтруктураДанныхРаздел2_10  = Новый Структура;

	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,       СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,       СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1, СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2, СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3, СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1, СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2, СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3, СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3);
	
	// Структура содержит данные дополнительных страниц.
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,       КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,       КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1, КолИсхСтрокИдМСЧ_Раздел11_1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2, КолИсхСтрокИдМСЧ_Раздел11_2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3, КолИсхСтрокИдМСЧ_Раздел11_3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1, КолИсхСтрокИдМСЧ_Раздел27_1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2, КолИсхСтрокИдМСЧ_Раздел27_2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3, КолИсхСтрокИдМСЧ_Раздел27_3);

	мСтруктураКолвоКолонокРазделов  = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,       КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2,       КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1, КолКолонокИдМСЧ_Раздел11_1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2, КолКолонокИдМСЧ_Раздел11_2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3, КолКолонокИдМСЧ_Раздел11_3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1, КолКолонокИдМСЧ_Раздел27_1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2, КолКолонокИдМСЧ_Раздел27_2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3, КолКолонокИдМСЧ_Раздел27_3);
	
	ЦветЗаполняетсяТолькоВручную        = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир        = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир     = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика       = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяОднозначноВручную    = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически        = Новый Цвет(255, 255, 255);
	СтруктураРеквизитовФормы.ЦветБелый  = Новый Цвет(255, 255, 255);
	СтруктураРеквизитовФормы.ЦветЖелтый = Новый Цвет(255, 255, 192);
	
	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2015";
	
	// Код отчета условный.
	СтруктураРеквизитовФормы.мКодОтчета = "1159999";
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.ЕстьРеквизитКодПодчиненностиФСС
		= Метаданные.Справочники.Организации.Реквизиты.Найти("КодПодчиненностиФСС") <> Неопределено;
	
	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, Найти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела      = ИмяРаздела;

	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить(
		"ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить(
		"ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить(
		"ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел11_1");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел11_2");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел11_3");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел27_1");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел27_2");
	СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел27_3");
	СтруктураРеквизитовФормы.Вставить("мИнтервалАвтосохранения");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
	СтруктураРеквизитовФормы.Вставить("мПоляПоискаПоказателяВТСП");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мЧтоОчищать");
	СтруктураРеквизитовФормы.Вставить("НомерГода");
	СтруктураРеквизитовФормы.Вставить("ФлагСохранения");
	СтруктураРеквизитовФормы.Вставить("ЦветБелый");
	СтруктураРеквизитовФормы.Вставить("ЦветЖелтый");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ЕстьРеквизитКодПодчиненностиФСС");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел1_1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010002201", "П000010002301;П000010002401;П000010002501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010003201", "П000010003301;П000010003401;П000010003501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010005201", "П000010005301;П000010005401;П000010005501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010006201", "П000010006301;П000010006401;П000010006501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010015201", "П000010015301;П000010015401;П000010015501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010016201", "П000010016301;П000010016401;П000010016501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010002003", "П000010002101;П000010002201;П000010002301;П000010002401;П000010002501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010003003", "П000010003101;П000010003201;П000010003301;П000010003401;П000010003501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010005003", "П000010005101;П000010005201;П000010005301;П000010005401;П000010005501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010006003", "П000010006101;П000010006201;П000010006301;П000010006401;П000010006501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010015003", "П000010015101;П000010015201;П000010015301;П000010015401;П000010015501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010016003", "П000010016101;П000010016201;П000010016301;П000010016401;П000010016501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010008003", "П000010001003;П000010002003;П000010003003;П000010004003;П000010005003;"
																  + "П000010006003;П000010007003;П000010002101;П000010002201;П000010003101;"
																  + "П000010003201;П000010005101;П000010005201;П000010006101;П000010006201; "
																  + "П000010002301;П000010002401;П000010002501;П000010003301;П000010003401;"
																  + "П000010003501;П000010005301;П000010005401;П000010005501;П000010006301;"
																  + "П000010006401;П000010006501");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010012003", "П000010013003;П000010014003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010018003", "П000010012003;П000010015003;П000010016003;П000010017003; П000010013003;"
																  + "П000010014003;П000010015101;П000010015201;П000010016101;П000010016201;"
																  + "П000010015301;П000010015401;П000010015501;П000010016301;П000010016401;"
																  + "П000010016501");
																  
	// Раздел1_2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020009003", "П000020010003;П000020011003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020009004", "П000020010004;П000020011004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020009005", "П000020010005;П000020011005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020015004", "П000020001004;П000020003004;П000020005004;П000020007004;П000020008004;П000020009004;П000020012004;П000020013004;П000020014004;П000020010004;П000020011004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000020015005", "П000020001005;П000020003005;П000020005005;П000020007005;П000020008005;П000020009005;П000020012005;П000020013005;П000020014005;П000020010005;П000020011005");
	
	// Раздел1_3.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030004003", "П000030001003;П000030002003;П000030003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030004004", "П000030001004;П000030002004;П000030003004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030004005", "П000030001005;П000030002005;П000030003005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000030004006", "П000030001006;П000030002006;П000030003006");
			
	// Раздел1_4.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000040000403", "П000040000203;П000040000303");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000040000404", "П000040000204;П000040000304");
		
	// Раздел1_41.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000410000303", "П000410000103;П000410000203");
	
	// Раздел1_42.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000420000503", "П000420000203;П000420000303;П000420000403;П000420000103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000420000504", "П000420000204;П000420000304;П000420000404;П000420000104");
			
	// Раздел1_43.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000430000206", "П000430000106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000430000207", "П000430000107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000430000208", "П000430000108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000430000209", "П000430000109");
	
	// Раздел1_5.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050003007", "П000050004007;П000050005007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050003008", "П000050004008;П000050005008");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050003010", "П000050004010;П000050005010");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050003011", "П000050004011;П000050005011");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050003016", "П000050004016;П000050005016");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050003017", "П000050004017;П000050005017");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050001003", "П000050001006;П000050001009;П000050001012;П000050001015;П000050001018");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050002003", "П000050002006;П000050002009;П000050002015;П000050002018");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050003003", "П000050003006;П000050003009;П000050003015;П000050004006;П000050005006;П000050004009;П000050005009;П000050004015;П000050005015");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050004003", "П000050004006;П000050004009;П000050004015");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050005003", "П000050005006;П000050005009;П000050005015");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050006003", "П000050006006;П000050006009;П000050006015");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050001004", "П000050001007;П000050001010;П000050001013;П000050001016;П000050001019");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050002004", "П000050002007;П000050002010;П000050002016;П000050002019");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050003004", "П000050003007;П000050003010;П000050003016;П000050004007;П000050005007;П000050004010;П000050005010;П000050004016;П000050005016");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050004004", "П000050004007;П000050004010;П000050004016");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050005004", "П000050005007;П000050005010;П000050005016");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050006004", "П000050006007;П000050006010;П000050006016");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050001005", "П000050001008;П000050001011;П000050001014;П000050001017;П000050001020");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050002005", "П000050002008;П000050002011;П000050002017;П000050002020");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050003005", "П000050003008;П000050003011;П000050003017;П000050004008;П000050005008;П000050004011;П000050005011;П000050004017;П000050005017");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050004005", "П000050004008;П000050004011;П000050004017");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050005005", "П000050005008;П000050005011;П000050005017");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050006005", "П000050006008;П000050006011;П000050006017");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050009003", "П000050001003;П000050002003;П000050003003;П000050006003;П000050007003;П000050001006;П000050001009;П000050001012;П000050001015;П000050001018;П000050002006;П000050002009;П000050002015;П000050002018;П000050003006;П000050003009;П000050003015;П000050004006;П000050005006;П000050004009;П000050005009;П000050004015;П000050005015;П000050006006;П000050006009;П000050006015");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050009005", "П000050001005;П000050002005;П000050003005;П000050006005;П000050007005;П000050008005;П000050001008;П000050001011;П000050001014;П000050001017;П000050001020;П000050002008;П000050002011;П000050002017;П000050002020;П000050003008;П000050003011;П000050003017;П000050004008;П000050005008;П000050004011;П000050005011;П000050004017;П000050005017;П000050006008;П000050006011;П000050006017");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050009006", "П000050001006;П000050002006;П000050003006;П000050006006;П000050004006;П000050005006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050009008", "П000050001008;П000050002008;П000050003008;П000050006008;П000050004008;П000050005008");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050009009", "П000050001009;П000050002009;П000050003009;П000050006009;П000050004009;П000050005009");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050009011", "П000050001011;П000050002011;П000050003011;П000050006011;П000050004011;П000050005011");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050009012", "П000050001012");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050009014", "П000050001014");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050009015", "П000050001015;П000050002015;П000050003015;П000050006015;П000050004015;П000050005015");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050009017", "П000050001017;П000050002017;П000050003017;П000050006017;П000050004017;П000050005017");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050009018", "П000050001018;П000050002018");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000050009020", "П000050001020;П000050002020");
				
	// Раздел2_6.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000060001203", "П000060001303;П000060001403;П000060001503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000060001204", "П000060001304;П000060001404;П000060001504");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000060001205", "П000060001305;П000060001405;П000060001505");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000060001010", "П000060001006;П000060001007;П000060001009");
	
	// Раздел2_7.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000070002401", "П000070002101;П000070002201;П000070002301");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000070015401", "П000070015101;П000070015201;П000070015301");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000070016401", "П000070016101;П000070016201;П000070016301");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000070002003", "П000070002001;П000070002401;П000070002101;П000070002201;П000070002301");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000070012003", "П000070013003;П000070014003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000070015003", "П000070015001;П000070015401;П000070015101;П000070015201;П000070015301");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000070016003", "П000070016001;П000070016401;П000070016101;П000070016201;П000070016301");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000070008003", "П000070001003;П000070002003;П000070003003;П000070004003;П000070005003;П000070006003;П000070007003;П000070002001;П000070002401;П000070002101;П000070002201;П000070002301");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000070018003", "П000070012003;П000070015003;П000070016003;П000070017003;П000070015001;П000070015401;П000070015101;П000070015201;П000070015301;П000070015001;П000070015401;П000070015101;П000070015201;П000070015301;П000070016001;П000070016401;П000070016101;П000070016201;П000070016301;П000070013003;П000070014003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000070009003", "П000070018003;П000070008003;П000070001003;П000070002003;П000070003003;П000070004003;П000070005003;П000070006003;П000070007003;П000070002001;П000070002401;П000070002101;П000070002201;П000070002301;П000070012003;П000070015003;П000070016003;П000070017003;П000070015001;П000070015401;П000070015101;П000070015201;П000070015301;П000070015001;П000070015401;П000070015101;П000070015201;П000070015301;П000070016001;П000070016401;П000070016101;П000070016201;П000070016301;П000070013003;П000070014003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000070010003", "П000070009003;П000070011003;П000070018003;П000070008003;П000070001003;П000070002003;П000070003003;П000070004003;П000070005003;П000070006003;П000070007003;П000070002001;П000070002401;П000070002101;П000070002201;П000070002301;П000070012003;П000070015003;П000070016003;П000070017003;П000070015001;П000070015401;П000070015101;П000070015201;П000070015301;П000070015001;П000070015401;П000070015101;П000070015201;П000070015301;П000070016001;П000070016401;П000070016101;П000070016201;П000070016301;П000070013003;П000070014003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000070019003", "П000070008003;П000070018003;П000070001003;П000070002003;П000070003003;П000070004003;П000070005003;П000070006003;П000070007003;П000070002001;П000070002401;П000070002101;П000070002201;П000070002301;П000070012003;П000070015003;П000070016003;П000070017003;П000070015001;П000070015401;П000070015101;П000070015201;П000070015301;П000070015001;П000070015401;П000070015101;П000070015201;П000070015301;П000070016001;П000070016401;П000070016101;П000070016201;П000070016301;П000070013003;П000070014003");
	
	// Раздел2_8_9.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000080010004", "П000080001004;П000080004004;П000080007004;П000080009004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000090004003", "П000090001003;П000090003003");

КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	// Выполняем начальные настройки.
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ТабличныйДокумент.Области.НомерКорректировки.Значение = "000";
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	НачальнаяПодготовкаФормы();
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(СтруктураДанныхРаздел2_6.П000060001006)) Тогда
		СтруктураДанныхРаздел2_6.П000060001006 = ПолучитьРазмерСтраховогоТарифа(ЭтаФорма);
		СтруктураДанныхРаздел2_6.П000060001010 = СтруктураДанныхРаздел2_6.П000060001006;
	КонецЕсли;
	
	УстановитьДоступностьОбластей();
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСС");
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ЗначениеТаймера = ЗначениеТаймера();
		ЗаполнитьАвтоНаСервере();
		ЗаписатьЗамер(ЗначениеТаймера);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
		
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(
								   МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0
			 ИЛИ ИмяСтраницы = "Раздел1_31" Тогда
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда	
			
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;

	КонецЦикла;
	
	ФормироватьСтруктуруСтраницОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел I. Табл. 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел I. Табл. 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
		
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_3";
	СтрокаУровня1.Представление            = "Раздел I. Табл. 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_31";
	СтрокаУровня1.Представление            = "Раздел I. Табл. 3.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_4";
	СтрокаУровня1.Представление            = "Раздел I. Табл. 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_41";
	СтрокаУровня1.Представление            = "Раздел I. Табл. 4.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_42";
	СтрокаУровня1.Представление            = "Раздел I. Табл. 4.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_43";
	СтрокаУровня1.Представление            = "Раздел I. Табл. 4.3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
		
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_5";
	СтрокаУровня1.Представление            = "Раздел I. Табл. 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_6";
	СтрокаУровня1.Представление            = "Раздел II. Табл. 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_7";
	СтрокаУровня1.Представление            = "Раздел II. Табл. 7";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_8_9";
	СтрокаУровня1.Представление            = "Раздел II. Табл. 8, 9";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2_10";
	СтрокаУровня1.Представление            = "Раздел II. Табл. 10";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;

КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
		
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_31";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_41";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_42";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_43";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_8_9";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2_10";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
				Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(
				ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2015Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить(
				"Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить(
				"Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПрПодп", 1, ,
		"Выбор подписанта", КоллекцияСписковВыбора["Подписант"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПрекращениеДеятельности", 1, ,
		"Прекращение деятельности", КоллекцияСписковВыбора["ПрекращениеДеятельности"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ШифрСтрах1Часть", 3, ,
		"Выбор шифра", КоллекцияСписковВыбора["ШифрыСтрахователя"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ШифрСтрах2Часть", 2, ,
		"Выбор расширения шифра", КоллекцияСписковВыбора["РасширенияШифра"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ШифрСтрах3Часть", 2, ,
		"Выбор дополнительного шифра", КоллекцияСписковВыбора["ДополнительныеШифры"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000430000103", 2, ,
		"Выбор вида предпринимательской деятельности", КоллекцияСписковВыбора["ВидыДеятельности"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310001005", 2, ,
		"Выбор страны мира", КоллекцияСписковВыбора["СтраныМира"]);	
		
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(
			КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(
				ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	Если Область.Имя = "ПрПодп" Тогда
		ПрПодписанта = ТабличныйДокумент.Области.ПрПодп.Значение;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, ПрПодписанта, Разделитель", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, ПрПодписанта, Разделитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область       = ДополнительныеПараметры.Область;
	ПрПодписанта  = ДополнительныеПараметры.ПрПодписанта;
	Разделитель   = ДополнительныеПараметры.Разделитель;
	ИмяРаздела    = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя
	 ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(
		ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
				= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Если Область.Имя = "ПрПодп" Тогда
		ПрПодписантаНов = ТабличныйДокумент.Области.ПрПодп.Значение;
		СменилсяПрПодписанта = ?(ПрПодписанта = ПрПодписантаНов, Ложь, Истина);
		Если СменилсяПрПодписанта Тогда
			Если ПрПодписантаНов = "1" Тогда
				ЗаполнитьСведенияОбОрганизации(Истина);
			ИначеЕсли ПрПодписантаНов = "2" ИЛИ ПрПодписантаНов = "3" Тогда
				ТабличныйДокумент.Области.ДокУпПред.Защита = Ложь;
				ТабличныйДокумент.Области.ДокУпПред.ЦветФона = СтруктураРеквизитовФормы.ЦветЖелтый;
				ТабличныйДокумент.Области.ОргПодписантФамилия.Значение = "";
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Модифицированность = Истина;
	
	ВключитьПечатьЗаполненногоНеобязательногоРаздела(ЭтаФорма, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура НачальнаяПодготовкаФормы() Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
	СтруктураРеквизитовФормы.мАвтоВыборКодов       = Ложь;
	СтруктураРеквизитовФормы.ФлагСохранения        = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати          = Ложь;
	СтруктураРеквизитовФормы.ВидДокумента          = 0;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
		
		мСтруктураДокУпПред = Новый Структура;
		мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры"          , " ");
		мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы"          , " ");
		мСтруктураДокУпПред.Вставить("НомерУдостоверяющего"       , " ");
		мСтруктураДокУпПред.Вставить("ДатаВыдачи"                 , "");
		мСтруктураДокУпПред.Вставить("КемВыдан"                   , " ");
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.мДелитель                = 1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьДатуВЯчейкахНаСервере();
		ЗаполнитьСведенияОбОрганизации(, Истина, Истина);
	КонецЕсли;
	
	Для Каждого СтрокаУровня1 Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		НазваниеСтраницы          = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе = СтрокаУровня1.МногостраничностьВРазделе;
		
		Если (НазваниеСтраницы = "Титульный") Тогда
			Продолжить;
		КонецЕсли;
		
		Если (СтруктураРеквизитовФормы.мДокументВосстановлен) И (МногостраничностьВРазделе) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьЦветФонаЯчейкиНаСервере(,, НазваниеСтраницы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьОбластей()
	
	Если ТабличныйДокумент.Области.ПрПодп.Значение = "1" Тогда
		ТабличныйДокумент.Области.ДокУпПред.Защита = Истина;
		ТабличныйДокумент.Области.ДокУпПред.ЦветФона = СтруктураРеквизитовФормы.ЦветБелый;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	НомерМесяца   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	МассивМесяцев = РегламентированнаяОтчетностьКлиентСервер.РазобратьСтрокуВМассивПоРазделителю("1.2.4.5.7.8.10.11");
	Если МассивМесяцев.Найти(НомерМесяца) <> Неопределено Тогда
		НомерМесяца = "1";
	КонецЕсли;
	
	НомерКвартала = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");
	СтруктураРеквизитовФормы.НомерГода = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	
	КодПериода = Формат(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ДФ=ММ");
	КодПериода = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КодПериода,2,0);
	
	ЗаполнениеПериодаОтчетаПоПриказу1385н
		= (КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= КонецГода('20111231'));
	
	Если ЗаполнениеПериодаОтчетаПоПриказу1385н Тогда
		КодПериода = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=ММ");
		Если (КодПериода = "03" ИЛИ КодПериода = "06" ИЛИ КодПериода = "09" ИЛИ КодПериода = "12")
		   И НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.НомДопРасчета.Значение) Тогда
			ТабличныйДокумент.Области.Период.Значение = КодПериода;
		Иначе
			ТабличныйДокумент.Области.Период.Значение = "";
		КонецЕсли;
	Иначе
		ТабличныйДокумент.Области.Период.Значение = КодПериода;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ОтчетГод.Значение = СтруктураРеквизитовФормы.НомерГода;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь, СменилсяПризнакПодписанта = Ложь, ЭтоНачальноеЗаполнение = Ложь)

	Если (СтруктураРеквизитовФормы.Организация = Неопределено)
	 Или (СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(
	 "СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОГРН"); 
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "РегистрационныйНомерФСС");
		Сведения.Добавить("", "КодПодчиненностиФСС");
		Сведения.Добавить("", "АдрЮР");
		Сведения.Добавить("", "АдрПрописки");
	КонецЕсли;
	
	Сведения.Добавить("", "ШифрСтрахователяФСС");
	Сведения.Добавить("", "СистемыНалогообложения");
	Сведения.Добавить("", "ВидПлательщикаСтраховыхВзносов");
	
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИО");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ИННЮЛ                   = "";
		КППЮЛ                   = "";
		НаимЮЛПол               = "";
		ОГРН                    = "";
		ОКВЭД                   = "";
		РегистрационныйНомерФСС = "";
		КодПодчиненностиФСС     = "";
		АдрЮР                   = "";
		АдрПрописки             = "";
	КонецЕсли;
	
	ШифрСтрахователяФСС            = "";
	СистемыНалогообложения         = "";
	ВидПлательщикаСтраховыхВзносов = "";
	
	ФИОРук         = "";
	ФИО            = "";
	ТелОрганизации = "";
	ТелСлуж        = "";
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ОргСведения.Свойство("ИННЮЛ",                   ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ",                   КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол",               НаимЮЛПол);
		ОргСведения.Свойство("ОГРН",                    ОГРН);
		ОргСведения.Свойство("ОКВЭД",                   ОКВЭД);
		ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
		ОргСведения.Свойство("КодПодчиненностиФСС",     КодПодчиненностиФСС);
		ОргСведения.Свойство("АдрЮР",                   АдрЮР);
		ОргСведения.Свойство("АдрПрописки",             АдрПрописки);
	КонецЕсли;
	
	ОргСведения.Свойство("ШифрСтрахователяФСС",            ШифрСтрахователяФСС);
	ОргСведения.Свойство("СистемыНалогообложения",         СистемыНалогообложения);
	ОргСведения.Свойство("ВидПлательщикаСтраховыхВзносов", ВидПлательщикаСтраховыхВзносов);
	
	ОргСведения.Свойство("ФИОРук",         ФИОРук);
	ОргСведения.Свойство("ФИО",            ФИО);
	ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
	ОргСведения.Свойство("ТелСлуж",        ТелСлуж);
	
	Если ПБОЮЛ Тогда
		НаимЮлПол      = ФИО;
		Адрес          = АдрПрописки;
		ТелОрганизации = ТелСлуж;
		ФИОРук         = ФИО;
	КонецЕсли;
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	ПолныйШифр = ОбъектОтчета.ПолныйШифрСтрахователяФСС(ШифрСтрахователяФСС, СистемыНалогообложения, ВидПлательщикаСтраховыхВзносов);
	Если СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация ИЛИ ВПрограммеИзмененаДатаПодписи
	 ИЛИ НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ШифрСтрах1Часть.Значение) Тогда
		ТабличныйДокумент.Области.ШифрСтрах1Часть.Значение = ПолныйШифр.Часть1;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация ИЛИ ВПрограммеИзмененаДатаПодписи
	 ИЛИ НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ШифрСтрах2Часть.Значение) Тогда
		ТабличныйДокумент.Области.ШифрСтрах2Часть.Значение = ПолныйШифр.Часть2;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация ИЛИ ВПрограммеИзмененаДатаПодписи
	 ИЛИ НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ШифрСтрах3Часть.Значение) Тогда
		ТабличныйДокумент.Области.ШифрСтрах3Часть.Значение = ПолныйШифр.Часть3;
	КонецЕсли;

	Если ВПрограммеИзмененаДатаПодписи Тогда
		ТабличныйДокумент.Области.ПрПодп.Значение = "1";
		ТабличныйДокумент.Области.ОргПодписантФамилия.Значение = ФИОРук;
		ЗапретитьВводДокументаПредставителя(ЭтаФорма);
		Возврат;
	КонецЕсли;

	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		Или (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОргНазв.Значение)) Тогда
		ТабличныйДокумент.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		Или (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ПрПодп.Значение))
		Или (СменилсяПризнакПодписанта) Тогда
		ТабличныйДокумент.Области.ПрПодп.Значение = "1";
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		Или (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОргПодписантФамилия.Значение))
		Или (СменилсяПризнакПодписанта) Тогда
		ТабличныйДокумент.Области.ОргПодписантФамилия.Значение = ФИОРук;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		Или (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ДокУпПред.Значение))
		Или (СменилсяПризнакПодписанта) Тогда
		ЗапретитьВводДокументаПредставителя(ЭтаФорма);
	КонецЕсли;
	
	ИННЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННЮЛ,12,"0",0);
	КППЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КППЮЛ,9,"-",1);
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ИНН.Значение)) Тогда
		ТабличныйДокумент.Области.ИНН.Значение = ИННЮЛ;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.КПП.Значение)) Тогда
		ТабличныйДокумент.Области.КПП.Значение = КППЮЛ;
	КонецЕсли;
	
	ОГРН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОГРН,15,"0",0);
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОГРН.Значение)) Тогда
		ТабличныйДокумент.Области.ОГРН.Значение = ОГРН;
	КонецЕсли;
	
	РазрешенныеЗнаки = "0123456789";
	ОткорректированныйНомерТелефона = "";
	Для Инд = 1 По СтрДлина(ТелОрганизации) Цикл
		ТекущийСимвол = Сред(ТелОрганизации, Инд, 1);
		Если Найти(РазрешенныеЗнаки, ТекущийСимвол) <> 0 Тогда
			ОткорректированныйНомерТелефона = ОткорректированныйНомерТелефона + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	ТелОрганизации = ОткорректированныйНомерТелефона;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
		ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ТелОрганизации.Значение)) Тогда
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация ИЛИ ЭтоНачальноеЗаполнение)
		ИЛИ (НЕ ЗначениеЗаполнено(СтруктураДанныхРаздел2_6.ОКВЭД)) Тогда
		СтруктураДанныхРаздел2_6.ОКВЭД = ОКВЭД;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация ИЛИ ЭтоНачальноеЗаполнение)
		ИЛИ (НЕ ЗначениеЗаполнено(СтруктураДанныхРаздел1_1.ОКВЭД)) Тогда
		СтруктураДанныхРаздел1_1.ОКВЭД = ОКВЭД;
	КонецЕсли;

	Если Не ПБОЮЛ Тогда
		Адрес = АдрЮр;
	КонецЕсли;
	
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адрес);
	
	Если НЕ СтруктураАдреса = Неопределено Тогда
		
		ТабличныйДокумент.Области.Адрес1.Значение = СтруктураАдреса.Индекс;
		ТабличныйДокумент.Области.Адрес2.Значение = СтруктураАдреса.Регион;
		
		Если ЗначениеЗаполнено(СтруктураАдреса.Регион)
		   И ЗначениеЗаполнено(СтруктураАдреса.Район) Тогда
		   
			ТабличныйДокумент.Области.Адрес2.Значение = СтруктураАдреса.Регион + "," + СтруктураАдреса.Район;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураАдреса.Регион)
				   И ЗначениеЗаполнено(СтруктураАдреса.Район) Тогда
			
			ТабличныйДокумент.Области.Адрес2.Значение = СтруктураАдреса.Район;
			
		КонецЕсли;
		
		ТабличныйДокумент.Области.Адрес4.Значение = СтруктураАдреса.Город;
		
		Если ЗначениеЗаполнено(СтруктураАдреса.Город)
		   И ЗначениеЗаполнено(СтруктураАдреса.НаселенныйПункт) Тогда
		   
			ТабличныйДокумент.Области.Адрес4.Значение = СтруктураАдреса.Город + "," + СтруктураАдреса.НаселенныйПункт;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураАдреса.Город)
				   И ЗначениеЗаполнено(СтруктураАдреса.НаселенныйПункт) Тогда
			
			ТабличныйДокумент.Области.Адрес4.Значение = СтруктураАдреса.НаселенныйПункт;
			
		КонецЕсли;
				
		ТабличныйДокумент.Области.Адрес6.Значение = СтруктураАдреса.Улица;
		ТабличныйДокумент.Области.Адрес7.Значение = СтруктураАдреса.Дом;
		ТабличныйДокумент.Области.Адрес8.Значение = СтруктураАдреса.Корпус;
		ТабличныйДокумент.Области.Адрес9.Значение = СтруктураАдреса.Квартира;
		
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ОргФССКод.Значение)) Тогда
		ТабличныйДокумент.Области.ОргФССКод.Значение = РегистрационныйНомерФСС;
	КонецЕсли;
	
	Если (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	 ИЛИ (НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.КодПодчиненности.Значение)) Тогда
		ТабличныйДокумент.Области.КодПодчиненности.Значение = КодПодчиненностиФСС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДокументаПредставителя(Форма)
	
	Форма.ТабличныйДокумент.Области.ДокУпПред.Значение = "";
	Форма.мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	Форма.мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
	Форма.мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
	Форма.мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
	Форма.мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
	Форма.мСтруктураДокУпПред.Вставить("КемВыдан", " ");
	Форма.ТабличныйДокумент.Области.ДокУпПред.Защита = Истина;
	Форма.ТабличныйДокумент.Области.ДокУпПред.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветБелый;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРазмерСтраховогоТарифа(Форма)

	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтраховойТариф");
	СтраховойТариф = Неопределено;
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Форма.СтруктураРеквизитовФормы.Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, Сведения);
	ОргСведения.Свойство("СтраховойТариф", СтраховойТариф);
	
	Возврат ?(СтраховойТариф = Неопределено, 0, СтраховойТариф);

КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многострочные разделы.
	//
	Если НаимРаздела = "Раздел1_31" ИЛИ НаимРаздела = "Раздел1_43" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
		
	ИначеЕсли НаимРаздела = "Раздел2_7" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, "П0000700161");
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, "П0000700162");
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, "П0000700163");
		
	ИначеЕсли НаимРаздела = "Раздел1_1" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, "П0000100163");
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, "П0000100164");
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, "П0000100165");
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции 

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По Форма[ИмяТабличногоПоля].Области.Количество() - 1 Цикл
		ТекущаяОбласть = Форма[ИмяТабличногоПоля].Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
	Если ВыбТабличноеПолеИмя = "Раздел1_1"
	 ИЛИ ВыбТабличноеПолеИмя = "Раздел1_31"
	 ИЛИ ВыбТабличноеПолеИмя = "Раздел1_43"
	 ИЛИ ВыбТабличноеПолеИмя = "Раздел2_7" Тогда
		ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма.ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
	мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры"          , " ");
	мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы"          , " ");
	мСтруктураДокУпПред.Вставить("НомерУдостоверяющего"       , " ");
	мСтруктураДокУпПред.Вставить("ДатаВыдачи"                 , "");
	мСтруктураДокУпПред.Вставить("КемВыдан"                   , " ");
	
	Если ВыбТабличноеПолеИмя = "Титульный" Тогда
		ПоказатьПериод();
	КонецЕсли;
	
	Если ВыбТабличноеПолеИмя = "Раздел1_1"
	 ИЛИ ВыбТабличноеПолеИмя = "Раздел1_31"
	 ИЛИ ВыбТабличноеПолеИмя = "Раздел1_43"
	 ИЛИ ВыбТабличноеПолеИмя = "Раздел2_7" Тогда
		ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма.ТабличныйДокумент);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписиПриИзмененииНаКлиенте()
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьДатуВЯчейкахНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(Истина);
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьДатуВЯчейкахНаСервере();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизации();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	КМенюТД = Элементы.ТабличныйДокумент.КонтекстноеМеню;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета =
			?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	Элементы.Обновить.Доступность = ?(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный", Истина, Ложь);
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1_1"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1_31"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1_43"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2_7" Тогда
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость = Истина;
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Истина;
	Иначе
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость = Ложь;
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	ТекТабличноеПоле = ЭтаФорма.ТабличныйДокумент;
	
	// Многострочные разделы.
	//
	Если ИмяТекРаздела = "Раздел1_31" ИЛИ ИмяТекРаздела = "Раздел1_43" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		СтруктураГруппы = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы, ИмяТекРаздела);
		ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
		
	ИначеЕсли ИмяТекРаздела = "Раздел2_7" Тогда
		
		ТекТабличноеПоле = ТабличныйДокумент;
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = "П0000700161";
		СтруктураГруппы = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы, ИмяТекРаздела);
		ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
		
		ИмяГруппы = "П0000700162";
		СтруктураГруппы = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы, ИмяТекРаздела);
		ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
		
		ИмяГруппы = "П0000700163";
		СтруктураГруппы = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы, ИмяТекРаздела);
		ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
		
	ИначеЕсли ИмяТекРаздела = "Раздел1_1" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = "П0000100163";
		СтруктураГруппы = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы, ИмяТекРаздела);
		ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
		
		ИмяГруппы = "П0000100164";
		СтруктураГруппы = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы, ИмяТекРаздела);
		ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
		
		ИмяГруппы = "П0000100165";
		СтруктураГруппы = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы, ИмяТекРаздела);
		ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей();
	Иначе
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, 26));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, 26)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы, ИмяТекРаздела) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы, ИмяТекРаздела);
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы, ИмяТекРаздела) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы, ИмяТекРаздела);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, ИмяТекРаздела)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	Если ИсходноеКоличествоСтрокГруппы > ТекущееКоличествоСтрокГруппы Тогда
		Для Инд = 1 По (ИсходноеКоличествоСтрокГруппы - ТекущееКоличествоСтрокГруппы) Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(
			ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы,
			ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;

	Если ИмяТекРаздела = "Раздел1_1" Тогда
		Форма.СкорректироватьМакетРаздела1_1(ИмяГруппы, СтруктураГруппы.Количество());
	ИначеЕсли ИмяТекРаздела = "Раздел2_7" Тогда
		Форма.СкорректироватьМакетРаздела2_7(ИмяГруппы, СтруктураГруппы.Количество());
	КонецЕсли;
	
	ВывестиЗначенияВМногострочнуюЧасть(Форма, СтруктураГруппы, ТекТабличноеПоле, ИмяГруппы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		Если ТабличныйДокумент.Области.НомерКорректировки.Значение = "" Тогда
			ТабличныйДокумент.Области.НомерКорректировки.Значение = "000";
		КонецЕсли;
		Вариант = Число(ТабличныйДокумент.Области.НомерКорректировки.Значение);
	Иначе
		Вариант = Число(СтруктураДанныхТитульный.НомерКорректировки);
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
	Иначе
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, , Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);

	СтруктураРеквизитовФормы.мВариант = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ,
			ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ,
			ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
						
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
						
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
						
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
						
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	
	СписокСохранения.Вставить("ДокументУпПред", мСтруктураДокУпПред);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
		Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
		ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
		Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
			Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
				СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			НайденноеЗначение = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					Ном = 0;
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								ТаблЗнач = ЭлСтруктуры.Значение;
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							КонецЦикла;
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						КонецЕсли;
						Ном = Ном + 1;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			мСтруктураВариантыЗаполнения.Очистить();
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);

	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("ДокументУпПред", мСтруктураДокУпПред);
	Если мСтруктураДокУпПред = Неопределено Тогда
		
		мСтруктураДокУпПред = Новый Структура;
		мСтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
		мСтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
		мСтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
		мСтруктураДокУпПред.Вставить("ДатаВыдачи", "");
		мСтруктураДокУпПред.Вставить("КемВыдан", " ");
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			СтруктураРеквизитовФормы.ФлагСохранения = Истина;
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
			Для Каждого ЭлементСтруктуры Из ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] Цикл
				Ключ = ПреобразованноеИмяПоказателя(ЭлементСтруктуры.Ключ);
				Если НЕ ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство(Ключ) Тогда
					ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить(Ключ, ЭлементСтруктуры.Значение);
					ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Удалить(ЭлементСтруктуры.Ключ);
					ЭтаФорма[Лев(Ключ, 11)][Число(Прав(Ключ, 1)) - 1][Лев(Ключ, 13)] = ЭлементСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	ВосстановитьСведенияИзРаздела1_1СтарогоОбразца(ПоказателиОтчета);
	ВосстановитьСведенияИзРаздела2_6СтарогоОбразца(ПоказателиОтчета);
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ).Имя = "ДатаПодписи" Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ДатаПодписи;
			Иначе
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	СтруктураРеквизитовФормы.мДелитель = 1;
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	ПривестиВСоответствиеЗначенияИзДопСтрокСтруктурамДанныхРазделов();
	Модифицированность = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ОргФССКод_1" Тогда
			СтруктураДанныхТитульный.Вставить("ОргФССКод");
			Для Ном = 1 По 10 Цикл
				СтруктураДанныхТитульный.ОргФССКод = СокрЛП(
					СтруктураДанныхТитульный.ОргФССКод) + ПоказателиТаблПоле["ОргФССКод_" + Ном];
				СтруктураДанныхТитульный.Удалить("ОргФССКод_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КодПодчиненности_1" Тогда
			СтруктураДанныхТитульный.Вставить("КодПодчиненности");
			Для Ном = 1 По 5 Цикл
				СтруктураДанныхТитульный.КодПодчиненности = СокрЛП(
					СтруктураДанныхТитульный.КодПодчиненности) + ПоказателиТаблПоле["КодПодчиненности_" + Ном];
				СтруктураДанныхТитульный.Удалить("КодПодчиненности_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ИНН1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН = СокрЛП(СтруктураДанныхТитульный.ИНН) + ПоказателиТаблПоле["ИНН" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН = Сред(СтруктураДанныхТитульный.ИНН, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП = СокрЛП(СтруктураДанныхТитульный.КПП) + ПоказателиТаблПоле["КПП" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРН1" Тогда
			СтруктураДанныхТитульный.Вставить("ОГРН");
			Для Ном = 1 По 15 Цикл
				СтруктураДанныхТитульный.ОГРН = СокрЛП(СтруктураДанныхТитульный.ОГРН) + ПоказателиТаблПоле["ОГРН" + Ном];
				СтруктураДанныхТитульный.Удалить("ОГРН" + Ном);
			КонецЦикла;		
		ИначеЕсли ИмяПоказателя = "ТелОрганизации1" Тогда
			СтруктураДанныхТитульный.Вставить("ТелОрганизации");
			Для Ном = 1 По 15 Цикл
				СтруктураДанныхТитульный.ТелОрганизации = СокрЛП(
					СтруктураДанныхТитульный.ТелОрганизации) + ПоказателиТаблПоле["ТелОрганизации" + Ном];
				СтруктураДанныхТитульный.Удалить("ТелОрганизации" + Ном);
			КонецЦикла;			
		ИначеЕсли ИмяПоказателя = "ШифрСтрах1Часть_1" Тогда
			СтруктураДанныхТитульный.Вставить("ШифрСтрах1Часть");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.ШифрСтрах1Часть = СокрЛП(
					СтруктураДанныхТитульный.ШифрСтрах1Часть) + ПоказателиТаблПоле["ШифрСтрах1Часть_" + Ном];
				СтруктураДанныхТитульный.Удалить("ШифрСтрах1Часть_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ШифрСтрах2Часть_1" Тогда
			СтруктураДанныхТитульный.Вставить("ШифрСтрах2Часть");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.ШифрСтрах2Часть = СокрЛП(
					СтруктураДанныхТитульный.ШифрСтрах2Часть) + ПоказателиТаблПоле["ШифрСтрах2Часть_" + Ном];
				СтруктураДанныхТитульный.Удалить("ШифрСтрах2Часть_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ШифрСтрах3Часть_1" Тогда
			СтруктураДанныхТитульный.Вставить("ШифрСтрах3Часть");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.ШифрСтрах3Часть = СокрЛП(
					СтруктураДанныхТитульный.ШифрСтрах3Часть) + ПоказателиТаблПоле["ШифрСтрах3Часть_" + Ном];
				СтруктураДанныхТитульный.Удалить("ШифрСтрах3Часть_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			СтруктураДанныхТитульный.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.НомерКорректировки = СокрЛП(
					СтруктураДанныхТитульный.НомерКорректировки) + ПоказателиТаблПоле["НомерКорректировки" + Ном];
				СтруктураДанныхТитульный.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период_1" Тогда
			СтруктураДанныхТитульный.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.Период = СокрЛП(
					СтруктураДанныхТитульный.Период) + ПоказателиТаблПоле["Период_" + Ном];
				СтруктураДанныхТитульный.Удалить("Период_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомДопРасчета_1" Тогда
			СтруктураДанныхТитульный.Вставить("НомДопРасчета");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.НомДопРасчета = СокрЛП(
					СтруктураДанныхТитульный.НомДопРасчета) + ПоказателиТаблПоле["НомДопРасчета_" + Ном];
				СтруктураДанныхТитульный.Удалить("НомДопРасчета_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(
					СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ЧислРаботников_1" Тогда
			СтруктураДанныхТитульный.Вставить("ЧислРаботников");
			Для Ном = 1 По 6 Цикл
				СтруктураДанныхТитульный.ЧислРаботников = СокрЛП(
					СтруктураДанныхТитульный.ЧислРаботников) + ПоказателиТаблПоле["ЧислРаботников_" + Ном];
				СтруктураДанныхТитульный.Удалить("ЧислРаботников_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ЧислЖенщин_1" Тогда
			СтруктураДанныхТитульный.Вставить("ЧислЖенщин");
			Для Ном = 1 По 6 Цикл
				СтруктураДанныхТитульный.ЧислЖенщин = СокрЛП(
					СтруктураДанныхТитульный.ЧислЖенщин) + ПоказателиТаблПоле["ЧислЖенщин_" + Ном];
				СтруктураДанныхТитульный.Удалить("ЧислЖенщин_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ЧислИнвалидов_1" Тогда
			СтруктураДанныхТитульный.Вставить("ЧислИнвалидов");
			Для Ном = 1 По 6 Цикл
				СтруктураДанныхТитульный.ЧислИнвалидов = СокрЛП(
					СтруктураДанныхТитульный.ЧислИнвалидов) + ПоказателиТаблПоле["ЧислИнвалидов_" + Ном];
				СтруктураДанныхТитульный.Удалить("ЧислИнвалидов_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ЧислВред_1" Тогда
			СтруктураДанныхТитульный.Вставить("ЧислВред");
			Для Ном = 1 По 6 Цикл
				СтруктураДанныхТитульный.ЧислВред = СокрЛП(
					СтруктураДанныхТитульный.ЧислВред) + ПоказателиТаблПоле["ЧислВред_" + Ном];
				СтруктураДанныхТитульный.Удалить("ЧислВред_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СПриложением1" Тогда
			СтруктураДанныхТитульный.Вставить("СПриложением");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.СПриложением = СокрЛП(
					СтруктураДанныхТитульный.СПриложением) + ПоказателиТаблПоле["СПриложением" + Ном];
				СтруктураДанныхТитульный.Удалить("СПриложением" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуВЯчейкахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияИзРаздела1_1СтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаРаздел1_1"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ОКВЭД1" Тогда
			
			СтруктураДанныхРаздел1_1.Вставить("ОКВЭД");
			
			ПерваяЧасть = СокрЛП(СтруктураДанныхРаздел1_1.ОКВЭД1) + СокрЛП(СтруктураДанныхРаздел1_1.ОКВЭД2);
			ВтораяЧасть = СокрЛП(СтруктураДанныхРаздел1_1.ОКВЭД4) + СокрЛП(СтруктураДанныхРаздел1_1.ОКВЭД5);
			ТретьяЧасть = СокрЛП(СтруктураДанныхРаздел1_1.ОКВЭД7) + СокрЛП(СтруктураДанныхРаздел1_1.ОКВЭД8);
			
			СтруктураДанныхРаздел1_1.ОКВЭД = ПерваяЧасть
										   + ?(ПустаяСтрока(ВтораяЧасть), "", ".") + ВтораяЧасть
										   + ?(ПустаяСтрока(ТретьяЧасть), "", ".") + ТретьяЧасть;
			
			СтруктураДанныхРаздел1_1.Удалить("ОКВЭД1");
			СтруктураДанныхРаздел1_1.Удалить("ОКВЭД2");
			СтруктураДанныхРаздел1_1.Удалить("ОКВЭД4");
			СтруктураДанныхРаздел1_1.Удалить("ОКВЭД5");
			СтруктураДанныхРаздел1_1.Удалить("ОКВЭД7");
			СтруктураДанныхРаздел1_1.Удалить("ОКВЭД8");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияИзРаздела2_6СтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаРаздел2_6"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ОКВЭД1" Тогда
			
			СтруктураДанныхРаздел2_6.Вставить("ОКВЭД");
			
			ПерваяЧасть = СокрЛП(СтруктураДанныхРаздел2_6.ОКВЭД1) + СокрЛП(СтруктураДанныхРаздел2_6.ОКВЭД2);
			ВтораяЧасть = СокрЛП(СтруктураДанныхРаздел2_6.ОКВЭД4) + СокрЛП(СтруктураДанныхРаздел2_6.ОКВЭД5);
			ТретьяЧасть = СокрЛП(СтруктураДанныхРаздел2_6.ОКВЭД7) + СокрЛП(СтруктураДанныхРаздел2_6.ОКВЭД8);
			
			СтруктураДанныхРаздел2_6.ОКВЭД = ПерваяЧасть
											 + ?(ПустаяСтрока(ВтораяЧасть), "", ".") + ВтораяЧасть
											 + ?(ПустаяСтрока(ТретьяЧасть), "", ".") + ТретьяЧасть;
			
			СтруктураДанныхРаздел2_6.Удалить("ОКВЭД1");
			СтруктураДанныхРаздел2_6.Удалить("ОКВЭД2");
			СтруктураДанныхРаздел2_6.Удалить("ОКВЭД4");
			СтруктураДанныхРаздел2_6.Удалить("ОКВЭД5");
			СтруктураДанныхРаздел2_6.Удалить("ОКВЭД7");
			СтруктураДанныхРаздел2_6.Удалить("ОКВЭД8");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПривестиВСоответствиеЗначенияИзДопСтрокСтруктурамДанныхРазделов()
	
	СохранитьОтчет = Ложь;
	
	МассивДанныхДопСтрок = Новый Массив;
	МассивДанныхДопСтрок.Добавить(П0000100163);
	МассивДанныхДопСтрок.Добавить(П0000100164);
	МассивДанныхДопСтрок.Добавить(П0000100165);
	
	Если НЕ РегламентированнаяОтчетность.ЗначенияИзДопСтрокСоответствуютСтруктуреДанныхРаздела(
		СтруктураДанныхРаздел1_1, МассивДанныхДопСтрок) Тогда
		
		РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
			СтруктураДанныхРаздел1_1, МассивДанныхДопСтрок);
		
		СохранитьОтчет = Истина;
		
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ЗначенияИзДопСтрокСоответствуютСтруктуреДанныхРаздела(
		СтруктураДанныхРаздел1_31, П0003100010) Тогда
		
		РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
			СтруктураДанныхРаздел1_31, П0003100010);
		
		СохранитьОтчет = Истина;
		
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ЗначенияИзДопСтрокСоответствуютСтруктуреДанныхРаздела(
		СтруктураДанныхРаздел1_43, П0004300001) Тогда
		
		РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
			СтруктураДанныхРаздел1_43, П0004300001);
		
		СохранитьОтчет = Истина;
		
	КонецЕсли;
		
	МассивДанныхДопСтрок.Очистить();
	МассивДанныхДопСтрок.Добавить(П0000700161);
	МассивДанныхДопСтрок.Добавить(П0000700162);
	МассивДанныхДопСтрок.Добавить(П0000700163);
	
	Если НЕ РегламентированнаяОтчетность.ЗначенияИзДопСтрокСоответствуютСтруктуреДанныхРаздела(
		СтруктураДанныхРаздел2_6, МассивДанныхДопСтрок) Тогда
		
		РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
			СтруктураДанныхРаздел2_6, МассивДанныхДопСтрок);
		
		СохранитьОтчет = Истина;
		
	КонецЕсли;
	
	Если СохранитьОтчет Тогда
		
		Сохранить( , , СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки, , "Титульный");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено, ТекущаяОбласть = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",       СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2",       СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("ИдМСЧ_Раздел11_1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел11_2", СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2);
	ИдГрупп.Вставить("ИдМСЧ_Раздел11_3", СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3);
	ИдГрупп.Вставить("ИдМСЧ_Раздел27_1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел27_2", СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2);
	ИдГрупп.Вставить("ИдМСЧ_Раздел27_3", СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп, ТекущаяОбласть);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено, ТекущаяОбласть = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",       СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2",       СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("ИдМСЧ_Раздел11_1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел11_2", СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2);
	ИдГрупп.Вставить("ИдМСЧ_Раздел11_3", СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3);
	ИдГрупп.Вставить("ИдМСЧ_Раздел27_1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел27_2", СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2);
	ИдГрупп.Вставить("ИдМСЧ_Раздел27_3", СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп, ТекущаяОбласть);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп, ТекущаяОбласть = Неопределено)
	Перем ИмяГруппы;
		
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1_1" Тогда
		
		Если ТекущаяОбласть = "П0000100163" Тогда
			ИмяГруппы = ИдГрупп.ИдМСЧ_Раздел11_1;
		ИначеЕсли ТекущаяОбласть = "П0000100164" Тогда
			ИмяГруппы = ИдГрупп.ИдМСЧ_Раздел11_2;	
		ИначеЕсли ТекущаяОбласть = "П0000100165" Тогда
			ИмяГруппы = ИдГрупп.ИдМСЧ_Раздел11_3;		
		Иначе	
			ИмяГруппы = ИдГрупп.ИдМСЧ_Раздел11_1;
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2_7" Тогда
		
		Если ТекущаяОбласть = "П0000700161" Тогда
			ИмяГруппы = ИдГрупп.ИдМСЧ_Раздел27_1;
		ИначеЕсли ТекущаяОбласть = "П0000700162" Тогда
			ИмяГруппы = ИдГрупп.ИдМСЧ_Раздел27_2;	
		ИначеЕсли ТекущаяОбласть = "П0000700163" Тогда
			ИмяГруппы = ИдГрупп.ИдМСЧ_Раздел27_3;		
		Иначе	
			ИмяГруппы = ИдГрупп.ИдМСЧ_Раздел27_1;
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_31" Тогда
		
		ИмяГруппы = ИдГрупп.мИдГруппы1;
		
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел1_43" Тогда
		
		ИмяГруппы = ИдГрупп.мИдГруппы2;	
		
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",       СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2",       СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("ИдМСЧ_Раздел11_1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел11_2", СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2);
	ИдГрупп.Вставить("ИдМСЧ_Раздел11_3", СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3);
	ИдГрупп.Вставить("ИдМСЧ_Раздел27_1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел27_2", СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2);
	ИдГрупп.Вставить("ИдМСЧ_Раздел27_3", СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",       СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2",       СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("ИдМСЧ_Раздел11_1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел11_2", СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2);
	ИдГрупп.Вставить("ИдМСЧ_Раздел11_3", СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3);
	ИдГрупп.Вставить("ИдМСЧ_Раздел27_1", СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1);
	ИдГрупп.Вставить("ИдМСЧ_Раздел27_2", СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2);
	ИдГрупп.Вставить("ИдМСЧ_Раздел27_3", СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.ИдМСЧ_Раздел11_1
		ИЛИ ИдГруппы = ИдГрупп.ИдМСЧ_Раздел11_2 ИЛИ ИдГруппы = ИдГрупп.ИдМСЧ_Раздел11_3 Тогда
		
		ТекТабличноеПоле = "Раздел1_1";
		
	ИначеЕсли ИдГруппы = ИдГрупп.ИдМСЧ_Раздел27_1
		ИЛИ ИдГруппы = ИдГрупп.ИдМСЧ_Раздел27_2 ИЛИ ИдГруппы = ИдГрупп.ИдМСЧ_Раздел27_3 Тогда
		
		ТекТабличноеПоле = "Раздел2_7";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		
		ТекТабличноеПоле = "Раздел1_31";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		
		ТекТабличноеПоле = "Раздел1_43";	
	
	КонецЕсли;

	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		НачНомер = 1;
		
		Если ИмяГруппы = "П0000100163"
		 ИЛИ ИмяГруппы = "П0000100164"
		 ИЛИ ИмяГруппы = "П0000100165" Тогда
			
			НачНомер = 0;
			
		КонецЕсли;
		
		Для НомерГрафы = НачНомер По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			Если ИмяГруппы = "П0000100163"
			 ИЛИ ИмяГруппы = "П0000100164"
			 ИЛИ ИмяГруппы = "П0000100165" Тогда
				
				ИмяКолонки = ИмяГруппы + НомерГрафы + "1";
				
			Иначе
				
				ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
			КонецЕсли;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();

	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	ЕстьИзмененияНастройкаСтраниц = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		Модифицированность = Истина;

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");

		Сообщение.Сообщить();

	Иначе
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");

		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);

	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",     ОписаниеТиповСтрока15);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения", ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",      ОписаниеТиповЧисло15);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",            ОписаниеТиповЧисло15);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",       ОписаниеТиповСтрока100);
		
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0
			 ИЛИ ИмяСтраницы = "Раздел1_31" Тогда	
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);

				ЕстьИзменения = Истина;
				
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					ТаблДляЦикла = ЭлементМассива.Выгрузить();
					
					Для каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								ЕстьИзменения = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	ФормироватьСтруктуруСтраницОтчета();

	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(
				ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(
				РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если Найти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
    	
	Если Не ИмяЯчейки = Неопределено Тогда
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;
				
				Попытка
					ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
					Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
						ТекОбластьЯчеек.Примечание.Текст = Комментарий;
					КонецЕсли;
					
					Ключ = "_" + ВариантЗаполнения;
					Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
					
					Если ВариантЗаполнения = 4 Тогда
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
					
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				Исключение
					
				КонецПопытки;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)

	ИмяГруппы = Лев(ИмяПоказателя, 11);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущегоРаздела = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущегоРаздела, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущегоРаздела = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущегоРаздела, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущегоРаздела = "", ОбластьИмя = "")
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущегоРаздела = "Раздел1_1" Тогда
		
		СтруктураДанныхРаздела = Форма["СтруктураДанных" + ИмяТекущегоРаздела];
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010002201, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010002201.Значение = Форма.ТабличныйДокумент.Области.П000010002301.Значение
																   + Форма.ТабличныйДокумент.Области.П000010002401.Значение
																   + Форма.ТабличныйДокумент.Области.П000010002501.Значение;
		КонецЕсли;
															   
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010003201, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010003201.Значение = Форма.ТабличныйДокумент.Области.П000010003301.Значение
																   + Форма.ТабличныйДокумент.Области.П000010003401.Значение
																   + Форма.ТабличныйДокумент.Области.П000010003501.Значение;
		КонецЕсли;
															   
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010005201, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010005201.Значение = Форма.ТабличныйДокумент.Области.П000010005301.Значение
																   + Форма.ТабличныйДокумент.Области.П000010005401.Значение
																   + Форма.ТабличныйДокумент.Области.П000010005501.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010006201, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010006201.Значение = Форма.ТабличныйДокумент.Области.П000010006301.Значение
																   + Форма.ТабличныйДокумент.Области.П000010006401.Значение
																   + Форма.ТабличныйДокумент.Области.П000010006501.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010015201, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010015201.Значение = Форма.ТабличныйДокумент.Области.П000010015301.Значение
																   + Форма.ТабличныйДокумент.Области.П000010015401.Значение
																   + Форма.ТабличныйДокумент.Области.П000010015501.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010016201, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			МСЧ1 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				МСЧ1 = МСЧ1 + Форма.ТабличныйДокумент.Области["П000010016301_" + Ном].Значение;
				
			КонецЦикла;
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			МСЧ2 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				МСЧ2 = МСЧ2 + Форма.ТабличныйДокумент.Области["П000010016401_" + Ном].Значение;
				
			КонецЦикла;
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			МСЧ3 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				МСЧ3 = МСЧ3 + Форма.ТабличныйДокумент.Области["П000010016501_" + Ном].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000010016201.Значение = МСЧ1 + МСЧ2 + МСЧ3;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010002003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010002003.Значение = Форма.ТабличныйДокумент.Области.П000010002101.Значение
																   + Форма.ТабличныйДокумент.Области.П000010002201.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010003003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010003003.Значение = Форма.ТабличныйДокумент.Области.П000010003101.Значение
																   + Форма.ТабличныйДокумент.Области.П000010003201.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010005003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010005003.Значение = Форма.ТабличныйДокумент.Области.П000010005101.Значение
																   + Форма.ТабличныйДокумент.Области.П000010005201.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010006003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010006003.Значение = Форма.ТабличныйДокумент.Области.П000010006101.Значение
																   + Форма.ТабличныйДокумент.Области.П000010006201.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010015003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010015003.Значение = Форма.ТабличныйДокумент.Области.П000010015101.Значение
																   + Форма.ТабличныйДокумент.Области.П000010015201.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010016003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010016003.Значение = Форма.ТабличныйДокумент.Области.П000010016101.Значение
																   + Форма.ТабличныйДокумент.Области.П000010016201.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010008003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010008003.Значение = Форма.ТабличныйДокумент.Области.П000010001003.Значение
																   + Форма.ТабличныйДокумент.Области.П000010002003.Значение
																   + Форма.ТабличныйДокумент.Области.П000010003003.Значение
																   + Форма.ТабличныйДокумент.Области.П000010004003.Значение
																   + Форма.ТабличныйДокумент.Области.П000010005003.Значение
																   + Форма.ТабличныйДокумент.Области.П000010006003.Значение
																   + Форма.ТабличныйДокумент.Области.П000010007003.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010012003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010012003.Значение = Форма.ТабличныйДокумент.Области.П000010013003.Значение
																   + Форма.ТабличныйДокумент.Области.П000010014003.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010018003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000010018003.Значение = Форма.ТабличныйДокумент.Области.П000010012003.Значение
																   + Форма.ТабличныйДокумент.Области.П000010015003.Значение
																   + Форма.ТабличныйДокумент.Области.П000010016003.Значение
																   + Форма.ТабличныйДокумент.Области.П000010017003.Значение;
		КонецЕсли;
		
		Если Форма.ТабличныйДокумент.Области.П000010018003.Значение > Форма.ТабличныйДокумент.Области.П000010008003.Значение Тогда 
			ЗадолженностьЗаФондомВсего = Форма.ТабличныйДокумент.Области.П000010018003.Значение
									   - Форма.ТабличныйДокумент.Области.П000010008003.Значение;
			Форма.ТабличныйДокумент.Области.П000010019003.Значение = 0;
		Иначе
			Форма.ТабличныйДокумент.Области.П000010019003.Значение = Форма.ТабличныйДокумент.Области.П000010008003.Значение
																   - Форма.ТабличныйДокумент.Области.П000010018003.Значение;
			ЗадолженностьЗаФондомВсего = 0;
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области.П000010010003.Значение = ЗадолженностьЗаФондомВсего
															   - Форма.ТабличныйДокумент.Области.П000010011003.Значение;
		Форма.ТабличныйДокумент.Области.П000010009003.Значение = Форма.ТабличныйДокумент.Области.П000010010003.Значение
															   + Форма.ТабличныйДокумент.Области.П000010011003.Значение;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_2" Тогда
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020009003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000020009003.Значение = Форма.ТабличныйДокумент.Области.П000020010003.Значение
																   + Форма.ТабличныйДокумент.Области.П000020011003.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020009004, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000020009004.Значение = Форма.ТабличныйДокумент.Области.П000020010004.Значение
																   + Форма.ТабличныйДокумент.Области.П000020011004.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020009005, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000020009005.Значение = Форма.ТабличныйДокумент.Области.П000020010005.Значение
																   + Форма.ТабличныйДокумент.Области.П000020011005.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020015004, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000020015004.Значение = Форма.ТабличныйДокумент.Области.П000020001004.Значение
																   + Форма.ТабличныйДокумент.Области.П000020003004.Значение
																   + Форма.ТабличныйДокумент.Области.П000020005004.Значение
																   + Форма.ТабличныйДокумент.Области.П000020007004.Значение
																   + Форма.ТабличныйДокумент.Области.П000020008004.Значение
																   + Форма.ТабличныйДокумент.Области.П000020009004.Значение
																   + Форма.ТабличныйДокумент.Области.П000020012004.Значение
																   + Форма.ТабличныйДокумент.Области.П000020013004.Значение
																   + Форма.ТабличныйДокумент.Области.П000020014004.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000020015005, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000020015005.Значение = Форма.ТабличныйДокумент.Области.П000020001005.Значение
																   + Форма.ТабличныйДокумент.Области.П000020005005.Значение
																   + Форма.ТабличныйДокумент.Области.П000020009005.Значение
																   + Форма.ТабличныйДокумент.Области.П000020012005.Значение
																   + Форма.ТабличныйДокумент.Области.П000020013005.Значение
																   + Форма.ТабличныйДокумент.Области.П000020014005.Значение;
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_3" Тогда
				
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030004003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000030004003.Значение = Форма.ТабличныйДокумент.Области.П000030001003.Значение
																   - Форма.ТабличныйДокумент.Области.П000030002003.Значение
																   - Форма.ТабличныйДокумент.Области.П000030003003.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030004004, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000030004004.Значение = Форма.ТабличныйДокумент.Области.П000030001004.Значение
																   - Форма.ТабличныйДокумент.Области.П000030002004.Значение
																   - Форма.ТабличныйДокумент.Области.П000030003004.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030004005, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000030004005.Значение = Форма.ТабличныйДокумент.Области.П000030001005.Значение
																   - Форма.ТабличныйДокумент.Области.П000030002005.Значение
																   - Форма.ТабличныйДокумент.Области.П000030003005.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000030004006, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000030004006.Значение = Форма.ТабличныйДокумент.Области.П000030001006.Значение
																   - Форма.ТабличныйДокумент.Области.П000030002006.Значение
																   - Форма.ТабличныйДокумент.Области.П000030003006.Значение;
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_4" Тогда	
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000040000403, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000040000403.Значение  = ? (Форма.ТабличныйДокумент.Области.П000040000203.Значение <> 0,
																		(Форма.ТабличныйДокумент.Области.П000040000303.Значение
																	   / Форма.ТабличныйДокумент.Области.П000040000203.Значение) * 100, 0);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000040000404, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000040000404.Значение  = ? (Форма.ТабличныйДокумент.Области.П000040000204.Значение <> 0,
																		(Форма.ТабличныйДокумент.Области.П000040000304.Значение
																	   / Форма.ТабличныйДокумент.Области.П000040000204.Значение) * 100, 0);
		КонецЕсли;
	    
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_41" Тогда	
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000410000303, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000410000303.Значение  = ? (Форма.ТабличныйДокумент.Области.П000410000103.Значение <> 0,
																		(Форма.ТабличныйДокумент.Области.П000410000203.Значение
																	   / Форма.ТабличныйДокумент.Области.П000410000103.Значение) * 100, 0);
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_42" Тогда
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000420000503, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000420000503.Значение  = ? (Форма.ТабличныйДокумент.Области.П000420000103.Значение <> 0,
																		((Форма.ТабличныйДокумент.Области.П000420000203.Значение
																	   + Форма.ТабличныйДокумент.Области.П000420000303.Значение
																	   + Форма.ТабличныйДокумент.Области.П000420000403.Значение)
																	   / Форма.ТабличныйДокумент.Области.П000420000103.Значение) * 100, 0);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000420000504, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000420000504.Значение  = ? (Форма.ТабличныйДокумент.Области.П000420000104.Значение <> 0,
																		((Форма.ТабличныйДокумент.Области.П000420000204.Значение
																	   + Форма.ТабличныйДокумент.Области.П000420000304.Значение
																	   + Форма.ТабличныйДокумент.Области.П000420000404.Значение)
																	   / Форма.ТабличныйДокумент.Области.П000420000104.Значение) * 100, 0);
		КонецЕсли;

	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_43" Тогда
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000430000206, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка6 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Колонка6 = Колонка6 + Форма.ТабличныйДокумент.Области["П000430000106_" + Ном].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000430000206.Значение = Колонка6;
	
			Форма.СтруктураДанныхРаздел1_3.П000030007003 = Колонка6;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000430000207, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка7 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Колонка7 = Колонка7 + Форма.ТабличныйДокумент.Области["П000430000107_" + Ном].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000430000207.Значение = Колонка7;
	
			Форма.СтруктураДанныхРаздел1_3.П000030007004 = Колонка7;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000430000208, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка8 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Колонка8 = Колонка8 + Форма.ТабличныйДокумент.Области["П000430000108_" + Ном].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000430000208.Значение = Колонка8;
	
			Форма.СтруктураДанныхРаздел1_3.П000030007005 = Колонка8;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000430000209, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			Колонка9 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				Колонка9 = Колонка9 + Форма.ТабличныйДокумент.Области["П000430000109_" + Ном].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000430000209.Значение = Колонка9;
			
			Форма.СтруктураДанныхРаздел1_3.П000030007006 = Колонка9;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_5" Тогда
	    															   
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050003007, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050003007.Значение = Форма.ТабличныйДокумент.Области.П000050004007.Значение
																   + Форма.ТабличныйДокумент.Области.П000050005007.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050003008, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050003008.Значение = Форма.ТабличныйДокумент.Области.П000050004008.Значение
																   + Форма.ТабличныйДокумент.Области.П000050005008.Значение;
		КонецЕсли;
						
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050003010, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050003010.Значение = Форма.ТабличныйДокумент.Области.П000050004010.Значение
																   + Форма.ТабличныйДокумент.Области.П000050005010.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050003011, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050003011.Значение = Форма.ТабличныйДокумент.Области.П000050004011.Значение
																   + Форма.ТабличныйДокумент.Области.П000050005011.Значение;
		КонецЕсли;
						
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050003016, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050003016.Значение = Форма.ТабличныйДокумент.Области.П000050004016.Значение
																   + Форма.ТабличныйДокумент.Области.П000050005016.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050003017, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050003017.Значение = Форма.ТабличныйДокумент.Области.П000050004017.Значение
																   + Форма.ТабличныйДокумент.Области.П000050005017.Значение;
		КонецЕсли;
															   
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050001003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050001003.Значение = Форма.ТабличныйДокумент.Области.П000050001006.Значение
																   + Форма.ТабличныйДокумент.Области.П000050001009.Значение
																   + Форма.ТабличныйДокумент.Области.П000050001012.Значение
																   + Форма.ТабличныйДокумент.Области.П000050001015.Значение
																   + Форма.ТабличныйДокумент.Области.П000050001018.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050002003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050002003.Значение = Форма.ТабличныйДокумент.Области.П000050002006.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002009.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002015.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002018.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050003003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050003003.Значение = Форма.ТабличныйДокумент.Области.П000050003006.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003009.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003015.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050004003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050004003.Значение = Форма.ТабличныйДокумент.Области.П000050004006.Значение
																   + Форма.ТабличныйДокумент.Области.П000050004009.Значение
																   + Форма.ТабличныйДокумент.Области.П000050004015.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050005003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050005003.Значение = Форма.ТабличныйДокумент.Области.П000050005006.Значение
																   + Форма.ТабличныйДокумент.Области.П000050005009.Значение
																   + Форма.ТабличныйДокумент.Области.П000050005015.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050006003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050006003.Значение = Форма.ТабличныйДокумент.Области.П000050006006.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006009.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006015.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050001004, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050001004.Значение = Форма.ТабличныйДокумент.Области.П000050001007.Значение
																   + Форма.ТабличныйДокумент.Области.П000050001010.Значение
																   + Форма.ТабличныйДокумент.Области.П000050001013.Значение
																   + Форма.ТабличныйДокумент.Области.П000050001016.Значение
																   + Форма.ТабличныйДокумент.Области.П000050001019.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050002004, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050002004.Значение = Форма.ТабличныйДокумент.Области.П000050002007.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002010.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002016.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002019.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050003004, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050003004.Значение = Форма.ТабличныйДокумент.Области.П000050003007.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003010.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003016.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050004004, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050004004.Значение = Форма.ТабличныйДокумент.Области.П000050004007.Значение
																   + Форма.ТабличныйДокумент.Области.П000050004010.Значение
																   + Форма.ТабличныйДокумент.Области.П000050004016.Значение;
		КонецЕсли;													   
															   
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050005004, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050005004.Значение = Форма.ТабличныйДокумент.Области.П000050005007.Значение
																   + Форма.ТабличныйДокумент.Области.П000050005010.Значение
																   + Форма.ТабличныйДокумент.Области.П000050005016.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050006004, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050006004.Значение = Форма.ТабличныйДокумент.Области.П000050006007.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006010.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006016.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050001005, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050001005.Значение = Форма.ТабличныйДокумент.Области.П000050001008.Значение
																   + Форма.ТабличныйДокумент.Области.П000050001011.Значение
																   + Форма.ТабличныйДокумент.Области.П000050001014.Значение
																   + Форма.ТабличныйДокумент.Области.П000050001017.Значение
																   + Форма.ТабличныйДокумент.Области.П000050001020.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050002005, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050002005.Значение = Форма.ТабличныйДокумент.Области.П000050002008.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002011.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002017.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002020.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050003005, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050003005.Значение = Форма.ТабличныйДокумент.Области.П000050003008.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003011.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003017.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050004005, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050004005.Значение = Форма.ТабличныйДокумент.Области.П000050004008.Значение
																   + Форма.ТабличныйДокумент.Области.П000050004011.Значение
																   + Форма.ТабличныйДокумент.Области.П000050004017.Значение;
		КонецЕсли;													   

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050005005, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050005005.Значение = Форма.ТабличныйДокумент.Области.П000050005008.Значение
																   + Форма.ТабличныйДокумент.Области.П000050005011.Значение
																   + Форма.ТабличныйДокумент.Области.П000050005017.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050006005, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050006005.Значение = Форма.ТабличныйДокумент.Области.П000050006008.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006011.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006017.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050009003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050009003.Значение = Форма.ТабличныйДокумент.Области.П000050001003.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002003.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003003.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006003.Значение
																   + Форма.ТабличныйДокумент.Области.П000050007003.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050009005, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050009005.Значение = Форма.ТабличныйДокумент.Области.П000050001005.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002005.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003005.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006005.Значение
																   + Форма.ТабличныйДокумент.Области.П000050007005.Значение
																   + Форма.ТабличныйДокумент.Области.П000050008005.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050009006, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050009006.Значение = Форма.ТабличныйДокумент.Области.П000050001006.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002006.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003006.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006006.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050009008, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050009008.Значение = Форма.ТабличныйДокумент.Области.П000050001008.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002008.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003008.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006008.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050009009, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050009009.Значение = Форма.ТабличныйДокумент.Области.П000050001009.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002009.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003009.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006009.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050009011, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050009011.Значение = Форма.ТабличныйДокумент.Области.П000050001011.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002011.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003011.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006011.Значение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050009012, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050009012.Значение = Форма.ТабличныйДокумент.Области.П000050001012.Значение;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050009014, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050009014.Значение = Форма.ТабличныйДокумент.Области.П000050001014.Значение;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050009015, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050009015.Значение = Форма.ТабличныйДокумент.Области.П000050001015.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002015.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003015.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006015.Значение;
		КонецЕсли;
															   
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050009017, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050009017.Значение = Форма.ТабличныйДокумент.Области.П000050001017.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002017.Значение
																   + Форма.ТабличныйДокумент.Области.П000050003017.Значение
																   + Форма.ТабличныйДокумент.Области.П000050006017.Значение;
		КонецЕсли;													   
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050009018, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050009018.Значение = Форма.ТабличныйДокумент.Области.П000050001018.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002018.Значение;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000050009020, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000050009020.Значение = Форма.ТабличныйДокумент.Области.П000050001020.Значение
																   + Форма.ТабличныйДокумент.Области.П000050002020.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел2_6" Тогда
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000060001203, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000060001203.Значение = Форма.ТабличныйДокумент.Области.П000060001303.Значение
																   + Форма.ТабличныйДокумент.Области.П000060001403.Значение
																   + Форма.ТабличныйДокумент.Области.П000060001503.Значение;
		КонецЕсли;

	    Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000060001204, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000060001204.Значение = Форма.ТабличныйДокумент.Области.П000060001304.Значение
																   + Форма.ТабличныйДокумент.Области.П000060001404.Значение
																   + Форма.ТабличныйДокумент.Области.П000060001504.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000060001205, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000060001205.Значение = Форма.ТабличныйДокумент.Области.П000060001305.Значение
																   + Форма.ТабличныйДокумент.Области.П000060001405.Значение
																   + Форма.ТабличныйДокумент.Области.П000060001505.Значение;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000060001010, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000060001010.Значение = Форма.ТабличныйДокумент.Области.П000060001006.Значение
															  * (1 - Форма.ТабличныйДокумент.Области.П000060001007.Значение / 100
																   + Форма.ТабличныйДокумент.Области.П000060001009.Значение / 100);
		КонецЕсли;
	
	ИначеЕсли ИмяТекущегоРаздела = "Раздел2_7" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000070002401, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000070002401.Значение = Форма.ТабличныйДокумент.Области.П000070002101.Значение
																   + Форма.ТабличныйДокумент.Области.П000070002201.Значение
																   + Форма.ТабличныйДокумент.Области.П000070002301.Значение;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000070015401, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000070015401.Значение = Форма.ТабличныйДокумент.Области.П000070015101.Значение
																   + Форма.ТабличныйДокумент.Области.П000070015201.Значение
																   + Форма.ТабличныйДокумент.Области.П000070015301.Значение;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000070016401, ОбластьИмя) > 0 Тогда
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			МСЧ1 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				МСЧ1 = МСЧ1 + Форма.ТабличныйДокумент.Области["П000070016101_" + Ном].Значение;
				
			КонецЦикла;
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			МСЧ2 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				МСЧ2 = МСЧ2 + Форма.ТабличныйДокумент.Области["П000070016201_" + Ном].Значение;
				
			КонецЦикла;
			
			Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3, ТаблицаБлока);
			
			ТаблицаБлока = Форма[ТаблицаБлока];
			
			МСЧ3 = 0;
			
			Для Ном = 1 По ТаблицаБлока.Количество() Цикл
				
				МСЧ3 = МСЧ3 + Форма.ТабличныйДокумент.Области["П000070016301_" + Ном].Значение;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000070016401.Значение = МСЧ1 + МСЧ2 + МСЧ3;

			Форма.СтруктураДанныхРаздел2_7.П000070016401 = МСЧ1 + МСЧ2 + МСЧ3;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000070002003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000070002003.Значение = Форма.ТабличныйДокумент.Области.П000070002001.Значение
																   + Форма.ТабличныйДокумент.Области.П000070002401.Значение;
		КонецЕсли;
															   
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000070012003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000070012003.Значение = Форма.ТабличныйДокумент.Области.П000070013003.Значение
																   + Форма.ТабличныйДокумент.Области.П000070014003.Значение;
		КонецЕсли;													   
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000070015003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000070015003.Значение = Форма.ТабличныйДокумент.Области.П000070015001.Значение
																   + Форма.ТабличныйДокумент.Области.П000070015401.Значение;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000070016003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000070016003.Значение = Форма.ТабличныйДокумент.Области.П000070016001.Значение
																   + Форма.ТабличныйДокумент.Области.П000070016401.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000070008003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000070008003.Значение = Форма.ТабличныйДокумент.Области.П000070001003.Значение
																   + Форма.ТабличныйДокумент.Области.П000070002003.Значение
																   + Форма.ТабличныйДокумент.Области.П000070003003.Значение
																   + Форма.ТабличныйДокумент.Области.П000070004003.Значение
																   + Форма.ТабличныйДокумент.Области.П000070005003.Значение
																   + Форма.ТабличныйДокумент.Области.П000070006003.Значение
																   + Форма.ТабличныйДокумент.Области.П000070007003.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000070018003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000070018003.Значение = Форма.ТабличныйДокумент.Области.П000070012003.Значение
																   + Форма.ТабличныйДокумент.Области.П000070015003.Значение
																   + Форма.ТабличныйДокумент.Области.П000070016003.Значение
																   + Форма.ТабличныйДокумент.Области.П000070017003.Значение;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000070009003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000070009003.Значение = ?(Форма.ТабличныйДокумент.Области.П000070018003.Значение > Форма.ТабличныйДокумент.Области.П000070008003.Значение
																	 , Форма.ТабличныйДокумент.Области.П000070018003.Значение - Форма.ТабличныйДокумент.Области.П000070008003.Значение, 0);
																	 
			Форма.ТабличныйДокумент.Области.П000070010003.Значение = Форма.ТабличныйДокумент.Области.П000070009003.Значение
																   - Форма.ТабличныйДокумент.Области.П000070011003.Значение;
			
		КонецЕсли;
															   
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000070010003, ОбластьИмя) > 0 Тогда													   
			
			Форма.ТабличныйДокумент.Области.П000070010003.Значение = Форма.ТабличныйДокумент.Области.П000070009003.Значение
																   - Форма.ТабличныйДокумент.Области.П000070011003.Значение;
																   
		КонецЕсли;														   

		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000070019003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000070019003.Значение = ?(Форма.ТабличныйДокумент.Области.П000070008003.Значение > Форма.ТабличныйДокумент.Области.П000070018003.Значение
																	 , Форма.ТабличныйДокумент.Области.П000070008003.Значение - Форма.ТабличныйДокумент.Области.П000070018003.Значение, 0);
		КонецЕсли;
				
	ИначеЕсли ИмяТекущегоРаздела = "Раздел2_8_9" Тогда	
	
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000080010004, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000080010004.Значение = Форма.ТабличныйДокумент.Области.П000080001004.Значение
																   + Форма.ТабличныйДокумент.Области.П000080004004.Значение
																   + Форма.ТабличныйДокумент.Области.П000080007004.Значение
																   + Форма.ТабличныйДокумент.Области.П000080009004.Значение;
		КонецЕсли;
															   
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000090004003, ОбластьИмя) > 0 Тогда
			
			Форма.ТабличныйДокумент.Области.П000090004003.Значение = Форма.ТабличныйДокумент.Области.П000090001003.Значение
																   + Форма.ТабличныйДокумент.Области.П000090003003.Значение;
		КонецЕсли;

	ИначеЕсли ИмяТекущегоРаздела = "" Тогда
		
		РасчетВСтруктуре(Форма, "Раздел1_1");
		РасчетВСтруктуре(Форма, "Раздел1_2");
		РасчетВСтруктуре(Форма, "Раздел1_31");
		РасчетВСтруктуре(Форма, "Раздел1_43");
		РасчетВСтруктуре(Форма, "Раздел1_3");
		РасчетВСтруктуре(Форма, "Раздел1_4");
		РасчетВСтруктуре(Форма, "Раздел1_41");
		РасчетВСтруктуре(Форма, "Раздел1_42");
		РасчетВСтруктуре(Форма, "Раздел1_5");
		РасчетВСтруктуре(Форма, "Раздел2_6");
		РасчетВСтруктуре(Форма, "Раздел2_7");
		РасчетВСтруктуре(Форма, "Раздел2_8_9");
	
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВСтруктуре(Форма, ИмяТекущегоРаздела)
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущегоРаздела = "Раздел1_1" Тогда
		
		СтруктураДанныхРаздела = Форма["СтруктураДанных" + ИмяТекущегоРаздела];
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			СтруктураДанныхРаздела.П000010002201 = Форма.ТабличныйДокумент.Области.П000010002301.Значение
												 + Форма.ТабличныйДокумент.Области.П000010002401.Значение
												 + Форма.ТабличныйДокумент.Области.П000010002501.Значение;
			Форма.ТабличныйДокумент.Области.П000010002201.Значение = СтруктураДанныхРаздела.П000010002201;
			
			СтруктураДанныхРаздела.П000010003201 = Форма.ТабличныйДокумент.Области.П000010003301.Значение
												 + Форма.ТабличныйДокумент.Области.П000010003401.Значение
												 + Форма.ТабличныйДокумент.Области.П000010003501.Значение;
			Форма.ТабличныйДокумент.Области.П000010003201.Значение = СтруктураДанныхРаздела.П000010003201;
			
			СтруктураДанныхРаздела.П000010005201 = Форма.ТабличныйДокумент.Области.П000010005301.Значение
												 + Форма.ТабличныйДокумент.Области.П000010005401.Значение
												 + Форма.ТабличныйДокумент.Области.П000010005501.Значение;
			Форма.ТабличныйДокумент.Области.П000010005201.Значение = СтруктураДанныхРаздела.П000010005201;
			
			СтруктураДанныхРаздела.П000010006201 = Форма.ТабличныйДокумент.Области.П000010006301.Значение
												 + Форма.ТабличныйДокумент.Области.П000010006401.Значение
												 + Форма.ТабличныйДокумент.Области.П000010006501.Значение;
			Форма.ТабличныйДокумент.Области.П000010006201.Значение = СтруктураДанныхРаздела.П000010006201;
			
			СтруктураДанныхРаздела.П000010015201 = Форма.ТабличныйДокумент.Области.П000010015301.Значение
												 + Форма.ТабличныйДокумент.Области.П000010015401.Значение
												 + Форма.ТабличныйДокумент.Области.П000010015501.Значение;
			Форма.ТабличныйДокумент.Области.П000010015201.Значение = СтруктураДанныхРаздела.П000010015201;
			
		Иначе
			
			СтруктураДанныхРаздела.П000010002201 = СтруктураДанныхРаздела.П000010002301
												 + СтруктураДанныхРаздела.П000010002401
												 + СтруктураДанныхРаздела.П000010002501;
			СтруктураДанныхРаздела.П000010003201 = СтруктураДанныхРаздела.П000010003301
												 + СтруктураДанныхРаздела.П000010003401
												 + СтруктураДанныхРаздела.П000010003501;
			СтруктураДанныхРаздела.П000010005201 = СтруктураДанныхРаздела.П000010005301
												 + СтруктураДанныхРаздела.П000010005401
												 + СтруктураДанныхРаздела.П000010005501;
			СтруктураДанныхРаздела.П000010006201 = СтруктураДанныхРаздела.П000010006301
												 + СтруктураДанныхРаздела.П000010006401
												 + СтруктураДанныхРаздела.П000010006501;
			СтруктураДанныхРаздела.П000010015201 = СтруктураДанныхРаздела.П000010015301
												 + СтруктураДанныхРаздела.П000010015401
												 + СтруктураДанныхРаздела.П000010015501;
			
		КонецЕсли;
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		МСЧ1 = 0;
		
		Для Ном = 1 По ТаблицаБлока.Количество() Цикл
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
				
				МСЧ1 = МСЧ1 + Форма.ТабличныйДокумент.Области["П000010016301_" + Ном].Значение;
				
			Иначе
				
				МСЧ1 = МСЧ1 + ТаблицаБлока[Ном-1]["П000010016301"];
				
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		МСЧ2 = 0;
		
		Для Ном = 1 По ТаблицаБлока.Количество() Цикл
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
				
				МСЧ2 = МСЧ2 + Форма.ТабличныйДокумент.Области["П000010016401_" + Ном].Значение;
				
			Иначе
				
				МСЧ2 = МСЧ2 + ТаблицаБлока[Ном-1]["П000010016401"];
				
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		МСЧ3 = 0;
		
		Для Ном = 1 По ТаблицаБлока.Количество() Цикл
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
				
				МСЧ3 = МСЧ3 + Форма.ТабличныйДокумент.Области["П000010016501_" + Ном].Значение;
				
			Иначе
				
				МСЧ3 = МСЧ3 + ТаблицаБлока[Ном-1]["П000010016501"];
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураДанныхРаздела.П000010016201 = МСЧ1 + МСЧ2 + МСЧ3;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			Форма.ТабличныйДокумент.Области.П000010016201.Значение = МСЧ1 + МСЧ2 + МСЧ3;
			
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			СтруктураДанныхРаздела.П000010002003 = Форма.ТабличныйДокумент.Области.П000010002101.Значение
												 + Форма.ТабличныйДокумент.Области.П000010002201.Значение;
			Форма.ТабличныйДокумент.Области.П000010002003.Значение = СтруктураДанныхРаздела.П000010002003;
			
			СтруктураДанныхРаздела.П000010003003 = Форма.ТабличныйДокумент.Области.П000010003101.Значение
												 + Форма.ТабличныйДокумент.Области.П000010003201.Значение;
			Форма.ТабличныйДокумент.Области.П000010003003.Значение = СтруктураДанныхРаздела.П000010003003;
			
			СтруктураДанныхРаздела.П000010005003 = Форма.ТабличныйДокумент.Области.П000010005101.Значение
												 + Форма.ТабличныйДокумент.Области.П000010005201.Значение;
			Форма.ТабличныйДокумент.Области.П000010005003.Значение = СтруктураДанныхРаздела.П000010005003;
			
			СтруктураДанныхРаздела.П000010006003 = Форма.ТабличныйДокумент.Области.П000010006101.Значение
												 + Форма.ТабличныйДокумент.Области.П000010006201.Значение;
			Форма.ТабличныйДокумент.Области.П000010006003.Значение = СтруктураДанныхРаздела.П000010006003;
			
			СтруктураДанныхРаздела.П000010015003 = Форма.ТабличныйДокумент.Области.П000010015101.Значение
												 + Форма.ТабличныйДокумент.Области.П000010015201.Значение;
			Форма.ТабличныйДокумент.Области.П000010015003.Значение = СтруктураДанныхРаздела.П000010015003;
			
			СтруктураДанныхРаздела.П000010016003 = Форма.ТабличныйДокумент.Области.П000010016101.Значение
												 + Форма.ТабличныйДокумент.Области.П000010016201.Значение;
			Форма.ТабличныйДокумент.Области.П000010016003.Значение = СтруктураДанныхРаздела.П000010016003;
			
			СтруктураДанныхРаздела.П000010008003 = Форма.ТабличныйДокумент.Области.П000010001003.Значение
												 + Форма.ТабличныйДокумент.Области.П000010002003.Значение
												 + Форма.ТабличныйДокумент.Области.П000010003003.Значение
												 + Форма.ТабличныйДокумент.Области.П000010004003.Значение
												 + Форма.ТабличныйДокумент.Области.П000010005003.Значение
												 + Форма.ТабличныйДокумент.Области.П000010006003.Значение
												 + Форма.ТабличныйДокумент.Области.П000010007003.Значение;
			Форма.ТабличныйДокумент.Области.П000010008003.Значение = СтруктураДанныхРаздела.П000010008003;
			
			СтруктураДанныхРаздела.П000010012003 = Форма.ТабличныйДокумент.Области.П000010013003.Значение
												 + Форма.ТабличныйДокумент.Области.П000010014003.Значение;
			Форма.ТабличныйДокумент.Области.П000010012003.Значение = СтруктураДанныхРаздела.П000010012003;
			
			СтруктураДанныхРаздела.П000010018003 = Форма.ТабличныйДокумент.Области.П000010012003.Значение
												 + Форма.ТабличныйДокумент.Области.П000010015003.Значение
												 + Форма.ТабличныйДокумент.Области.П000010016003.Значение
												 + Форма.ТабличныйДокумент.Области.П000010017003.Значение;
			Форма.ТабличныйДокумент.Области.П000010018003.Значение = СтруктураДанныхРаздела.П000010018003;
			
			Если Форма.ТабличныйДокумент.Области.П000010018003.Значение
			   > Форма.ТабличныйДокумент.Области.П000010008003.Значение Тогда
				ЗадолженностьЗаФондомВсего = Форма.ТабличныйДокумент.Области.П000010018003.Значение
										   - Форма.ТабличныйДокумент.Области.П000010008003.Значение;
				СтруктураДанныхРаздела.П000010019003 = 0;
			Иначе
				СтруктураДанныхРаздела.П000010019003 = Форма.ТабличныйДокумент.Области.П000010008003.Значение
													 - Форма.ТабличныйДокумент.Области.П000010018003.Значение;
				ЗадолженностьЗаФондомВсего = 0;
			КонецЕсли;
			Форма.ТабличныйДокумент.Области.П000010019003.Значение = СтруктураДанныхРаздела.П000010019003;
			
			СтруктураДанныхРаздела.П000010010003 = ЗадолженностьЗаФондомВсего
												 - Форма.ТабличныйДокумент.Области.П000010011003.Значение;
			Форма.ТабличныйДокумент.Области.П000010010003.Значение = СтруктураДанныхРаздела.П000010010003;
			
			СтруктураДанныхРаздела.П000010009003 = Форма.ТабличныйДокумент.Области.П000010010003.Значение
												 + Форма.ТабличныйДокумент.Области.П000010011003.Значение;
			Форма.ТабличныйДокумент.Области.П000010009003.Значение = СтруктураДанныхРаздела.П000010009003;
			
		Иначе
			
			СтруктураДанныхРаздела.П000010002003 = СтруктураДанныхРаздела.П000010002101
												 + СтруктураДанныхРаздела.П000010002201;
			СтруктураДанныхРаздела.П000010003003 = СтруктураДанныхРаздела.П000010003101
												 + СтруктураДанныхРаздела.П000010003201;
			СтруктураДанныхРаздела.П000010005003 = СтруктураДанныхРаздела.П000010005101
												 + СтруктураДанныхРаздела.П000010005201;
			СтруктураДанныхРаздела.П000010006003 = СтруктураДанныхРаздела.П000010006101
												 + СтруктураДанныхРаздела.П000010006201;
			СтруктураДанныхРаздела.П000010015003 = СтруктураДанныхРаздела.П000010015101
												 + СтруктураДанныхРаздела.П000010015201;
			СтруктураДанныхРаздела.П000010016003 = СтруктураДанныхРаздела.П000010016101
												 + СтруктураДанныхРаздела.П000010016201;
			СтруктураДанныхРаздела.П000010008003 = СтруктураДанныхРаздела.П000010001003
												 + СтруктураДанныхРаздела.П000010002003
												 + СтруктураДанныхРаздела.П000010003003
												 + СтруктураДанныхРаздела.П000010004003
												 + СтруктураДанныхРаздела.П000010005003
												 + СтруктураДанныхРаздела.П000010006003
												 + СтруктураДанныхРаздела.П000010007003;
			СтруктураДанныхРаздела.П000010012003 = СтруктураДанныхРаздела.П000010013003
												 + СтруктураДанныхРаздела.П000010014003;
			СтруктураДанныхРаздела.П000010018003 = СтруктураДанныхРаздела.П000010012003
												 + СтруктураДанныхРаздела.П000010015003
												 + СтруктураДанныхРаздела.П000010016003
												 + СтруктураДанныхРаздела.П000010017003;
				
			Если СтруктураДанныхРаздела.П000010018003 > СтруктураДанныхРаздела.П000010008003 Тогда 
				ЗадолженностьЗаФондомВсего = СтруктураДанныхРаздела.П000010018003
										   - СтруктураДанныхРаздела.П000010008003;
				СтруктураДанныхРаздела.П000010019003 = 0;
			Иначе
				СтруктураДанныхРаздела.П000010019003 = СтруктураДанныхРаздела.П000010008003
													 - СтруктураДанныхРаздела.П000010018003;
				ЗадолженностьЗаФондомВсего = 0;
			КонецЕсли;
			
			СтруктураДанныхРаздела.П000010010003 = ЗадолженностьЗаФондомВсего
												 - СтруктураДанныхРаздела.П000010011003;
			СтруктураДанныхРаздела.П000010009003 = СтруктураДанныхРаздела.П000010010003
												 + СтруктураДанныхРаздела.П000010011003;
			
		КонецЕсли;
											 
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_2" Тогда										 
		
		СтруктураДанныхРаздела = Форма["СтруктураДанных" + ИмяТекущегоРаздела];
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			СтруктураДанныхРаздела.П000020009003 = Форма.ТабличныйДокумент.Области.П000020010003.Значение
												 + Форма.ТабличныйДокумент.Области.П000020011003.Значение;
			Форма.ТабличныйДокумент.Области.П000020009003.Значение = СтруктураДанныхРаздела.П000020009003;
			
			СтруктураДанныхРаздела.П000020009004 = Форма.ТабличныйДокумент.Области.П000020010004.Значение
												 + Форма.ТабличныйДокумент.Области.П000020011004.Значение;
			Форма.ТабличныйДокумент.Области.П000020009004.Значение = СтруктураДанныхРаздела.П000020009004;
			
			СтруктураДанныхРаздела.П000020009005 = Форма.ТабличныйДокумент.Области.П000020010005.Значение
												 + Форма.ТабличныйДокумент.Области.П000020011005.Значение;
			Форма.ТабличныйДокумент.Области.П000020009005.Значение = СтруктураДанныхРаздела.П000020009005;
									
			СтруктураДанныхРаздела.П000020015004 = Форма.ТабличныйДокумент.Области.П000020001004.Значение
												 + Форма.ТабличныйДокумент.Области.П000020003004.Значение
												 + Форма.ТабличныйДокумент.Области.П000020005004.Значение
												 + Форма.ТабличныйДокумент.Области.П000020007004.Значение
												 + Форма.ТабличныйДокумент.Области.П000020008004.Значение
												 + Форма.ТабличныйДокумент.Области.П000020009004.Значение
												 + Форма.ТабличныйДокумент.Области.П000020012004.Значение
												 + Форма.ТабличныйДокумент.Области.П000020013004.Значение
												 + Форма.ТабличныйДокумент.Области.П000020014004.Значение;
			Форма.ТабличныйДокумент.Области.П000020015004.Значение = СтруктураДанныхРаздела.П000020015004;
			
			СтруктураДанныхРаздела.П000020015005 = Форма.ТабличныйДокумент.Области.П000020001005.Значение
												 + Форма.ТабличныйДокумент.Области.П000020005005.Значение
												 + Форма.ТабличныйДокумент.Области.П000020009005.Значение
												 + Форма.ТабличныйДокумент.Области.П000020012005.Значение
												 + Форма.ТабличныйДокумент.Области.П000020013005.Значение
												 + Форма.ТабличныйДокумент.Области.П000020014005.Значение;
			Форма.ТабличныйДокумент.Области.П000020015005.Значение = СтруктураДанныхРаздела.П000020015005;
			
		Иначе
			
			СтруктураДанныхРаздела.П000020009003 = СтруктураДанныхРаздела.П000020010003
												 + СтруктураДанныхРаздела.П000020011003;
			СтруктураДанныхРаздела.П000020009004 = СтруктураДанныхРаздела.П000020010004
												 + СтруктураДанныхРаздела.П000020011004;
			СтруктураДанныхРаздела.П000020009005 = СтруктураДанныхРаздела.П000020010005
												 + СтруктураДанныхРаздела.П000020011005;
			СтруктураДанныхРаздела.П000020015004 = СтруктураДанныхРаздела.П000020001004
												 + СтруктураДанныхРаздела.П000020003004
												 + СтруктураДанныхРаздела.П000020005004
												 + СтруктураДанныхРаздела.П000020007004
												 + СтруктураДанныхРаздела.П000020008004
												 + СтруктураДанныхРаздела.П000020009004
												 + СтруктураДанныхРаздела.П000020012004
												 + СтруктураДанныхРаздела.П000020013004
												 + СтруктураДанныхРаздела.П000020014004;
			СтруктураДанныхРаздела.П000020015005 = СтруктураДанныхРаздела.П000020001005
												 + СтруктураДанныхРаздела.П000020005005
												 + СтруктураДанныхРаздела.П000020009005
												 + СтруктураДанныхРаздела.П000020012005
												 + СтруктураДанныхРаздела.П000020013005
												 + СтруктураДанныхРаздела.П000020014005;
			
		КонецЕсли;
											 
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_3" Тогда
		
		СтруктураДанныхРаздела = Форма["СтруктураДанных" + ИмяТекущегоРаздела];
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			СтруктураДанныхРаздела.П000030004003 = Форма.ТабличныйДокумент.Области.П000030001003.Значение
												 - Форма.ТабличныйДокумент.Области.П000030002003.Значение
												 - Форма.ТабличныйДокумент.Области.П000030003003.Значение;
			Форма.ТабличныйДокумент.Области.П000030004003.Значение = СтруктураДанныхРаздела.П000030004003;
			
			СтруктураДанныхРаздела.П000030004004 = Форма.ТабличныйДокумент.Области.П000030001004.Значение
												 - Форма.ТабличныйДокумент.Области.П000030002004.Значение
												 - Форма.ТабличныйДокумент.Области.П000030003004.Значение;
			Форма.ТабличныйДокумент.Области.П000030004004.Значение = СтруктураДанныхРаздела.П000030004004;
			
			СтруктураДанныхРаздела.П000030004005 = Форма.ТабличныйДокумент.Области.П000030001005.Значение
												 - Форма.ТабличныйДокумент.Области.П000030002005.Значение
												 - Форма.ТабличныйДокумент.Области.П000030003005.Значение;
			Форма.ТабличныйДокумент.Области.П000030004005.Значение = СтруктураДанныхРаздела.П000030004005;
			
			СтруктураДанныхРаздела.П000030004006 = Форма.ТабличныйДокумент.Области.П000030001006.Значение
												 - Форма.ТабличныйДокумент.Области.П000030002006.Значение
												 - Форма.ТабличныйДокумент.Области.П000030003006.Значение;
			Форма.ТабличныйДокумент.Области.П000030004006.Значение = СтруктураДанныхРаздела.П000030004006;
			
			СтруктураДанныхРаздела.П000030007003 = Форма.СтруктураДанныхРаздел1_43.П000430000206;
			Форма.ТабличныйДокумент.Области.П000030007003.Значение = СтруктураДанныхРаздела.П000030007003;
			
			СтруктураДанныхРаздела.П000030007004 = Форма.СтруктураДанныхРаздел1_43.П000430000207;
			Форма.ТабличныйДокумент.Области.П000030007004.Значение = СтруктураДанныхРаздела.П000030007004;
			
			СтруктураДанныхРаздела.П000030007005 = Форма.СтруктураДанныхРаздел1_43.П000430000208;
			Форма.ТабличныйДокумент.Области.П000030007005.Значение = СтруктураДанныхРаздела.П000030007005;
			
			СтруктураДанныхРаздела.П000030007006 = Форма.СтруктураДанныхРаздел1_43.П000430000209;
			Форма.ТабличныйДокумент.Области.П000030007006.Значение = СтруктураДанныхРаздела.П000030007006;
						
		Иначе
			
			СтруктураДанныхРаздела.П000030004003 = СтруктураДанныхРаздела.П000030001003
												 - СтруктураДанныхРаздела.П000030002003
												 - СтруктураДанныхРаздела.П000030003003;
			СтруктураДанныхРаздела.П000030004004 = СтруктураДанныхРаздела.П000030001004
												 - СтруктураДанныхРаздела.П000030002004
												 - СтруктураДанныхРаздела.П000030003004;
			СтруктураДанныхРаздела.П000030004005 = СтруктураДанныхРаздела.П000030001005
												 - СтруктураДанныхРаздела.П000030002005
												 - СтруктураДанныхРаздела.П000030003005;
			СтруктураДанныхРаздела.П000030004006 = СтруктураДанныхРаздела.П000030001006
												 - СтруктураДанныхРаздела.П000030002006
												 - СтруктураДанныхРаздела.П000030003006;
			
			СтруктураДанныхРаздела.П000030007003 = Форма.СтруктураДанныхРаздел1_43.П000430000206;
			СтруктураДанныхРаздела.П000030007004 = Форма.СтруктураДанныхРаздел1_43.П000430000207;
			СтруктураДанныхРаздела.П000030007005 = Форма.СтруктураДанныхРаздел1_43.П000430000208;
			СтруктураДанныхРаздела.П000030007006 = Форма.СтруктураДанныхРаздел1_43.П000430000209;
			
		КонецЕсли;										 
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_4" Тогда
		
		СтруктураДанныхРаздела = Форма["СтруктураДанных" + ИмяТекущегоРаздела];
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			СтруктураДанныхРаздела.П000040000403  = ? (Форма.ТабличныйДокумент.Области.П000040000203.Значение <> 0,
													  (Форма.ТабличныйДокумент.Области.П000040000303.Значение
													 / Форма.ТабличныйДокумент.Области.П000040000203.Значение) * 100, 0);
													
			СтруктураДанныхРаздела.П000040000404  = ? (Форма.ТабличныйДокумент.Области.П000040000204.Значение <> 0,
													  (Форма.ТабличныйДокумент.Области.П000040000304.Значение
													 / Форма.ТабличныйДокумент.Области.П000040000204.Значение) * 100, 0);
			
			Форма.ТабличныйДокумент.Области.П000040000403.Значение  = СтруктураДанныхРаздела.П000040000403;
			Форма.ТабличныйДокумент.Области.П000040000404.Значение  = СтруктураДанныхРаздела.П000040000404;
			
		Иначе
			
			СтруктураДанныхРаздела.П000040000403  = ? (СтруктураДанныхРаздела.П000040000203 <> 0,
													  (СтруктураДанныхРаздела.П000040000303
													 / СтруктураДанныхРаздела.П000040000203) * 100, 0);
													
			СтруктураДанныхРаздела.П000040000404  = ? (СтруктураДанныхРаздела.П000040000204 <> 0,
													  (СтруктураДанныхРаздела.П000040000304
													 / СтруктураДанныхРаздела.П000040000204) * 100, 0);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_41" Тогда
		
		СтруктураДанныхРаздела = Форма["СтруктураДанных" + ИмяТекущегоРаздела];
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			СтруктураДанныхРаздела.П000410000303  = ? (Форма.ТабличныйДокумент.Области.П000410000103.Значение <> 0,
													  (Форма.ТабличныйДокумент.Области.П000410000203.Значение
													 / Форма.ТабличныйДокумент.Области.П000410000103.Значение) * 100, 0);
			
			Форма.ТабличныйДокумент.Области.П000410000303.Значение = СтруктураДанныхРаздела.П000410000303;
			
		Иначе
			
			СтруктураДанныхРаздела.П000410000303  = ? (СтруктураДанныхРаздела.П000410000103 <> 0,
													  (СтруктураДанныхРаздела.П000410000203
													 / СтруктураДанныхРаздела.П000410000103) * 100, 0);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_42" Тогда
		
		СтруктураДанныхРаздела = Форма["СтруктураДанных" + ИмяТекущегоРаздела];
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			СтруктураДанныхРаздела.П000420000503  = ?(Форма.ТабличныйДокумент.Области.П000420000103.Значение <> 0,
													((Форма.ТабличныйДокумент.Области.П000420000203.Значение +
													  Форма.ТабличныйДокумент.Области.П000420000303.Значение +
													  Форма.ТабличныйДокумент.Области.П000420000403.Значение)
													/ Форма.ТабличныйДокумент.Области.П000420000103.Значение) * 100, 0);
			
			СтруктураДанныхРаздела.П000420000504  = ?(Форма.ТабличныйДокумент.Области.П000420000104.Значение <> 0,
													((Форма.ТабличныйДокумент.Области.П000420000204.Значение +
													  Форма.ТабличныйДокумент.Области.П000420000304.Значение +
													  Форма.ТабличныйДокумент.Области.П000420000404.Значение)
													/ Форма.ТабличныйДокумент.Области.П000420000104.Значение) * 100, 0);
			
			Форма.ТабличныйДокумент.Области.П000420000503.Значение = СтруктураДанныхРаздела.П000440000503;
			Форма.ТабличныйДокумент.Области.П000420000504.Значение = СтруктураДанныхРаздела.П000440000504;
			
		Иначе
			
			СтруктураДанныхРаздела.П000420000503  = ?(СтруктураДанныхРаздела.П000420000103 <> 0,
													((СтруктураДанныхРаздела.П000420000203 +
													  СтруктураДанныхРаздела.П000420000303 +
													  СтруктураДанныхРаздела.П000420000403)
													/ СтруктураДанныхРаздела.П000420000103) * 100, 0);
			
			СтруктураДанныхРаздела.П000420000504  = ?(СтруктураДанныхРаздела.П000420000104 <> 0,
													((СтруктураДанныхРаздела.П000420000204 +
													  СтруктураДанныхРаздела.П000420000304 +
													  СтруктураДанныхРаздела.П000420000404)
													/ СтруктураДанныхРаздела.П000420000104) * 100, 0);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_43" Тогда
		
		СтруктураДанныхРаздела = Форма["СтруктураДанных" + ИмяТекущегоРаздела];
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		Колонка6 = 0;
		Колонка7 = 0;
		Колонка8 = 0;
		Колонка9 = 0;
		
		Для Ном = 1 По ТаблицаБлока.Количество() Цикл
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
				
				Колонка6 = Колонка6 + Форма.ТабличныйДокумент.Области["П000430000106_" + Ном].Значение;
				Колонка7 = Колонка7 + Форма.ТабличныйДокумент.Области["П000430000107_" + Ном].Значение;
				Колонка8 = Колонка8 + Форма.ТабличныйДокумент.Области["П000430000108_" + Ном].Значение;
				Колонка9 = Колонка9 + Форма.ТабличныйДокумент.Области["П000430000109_" + Ном].Значение;
				
			Иначе
				
				Колонка6 = Колонка6 + ТаблицаБлока[Ном-1]["П000430000106"];
				Колонка7 = Колонка7 + ТаблицаБлока[Ном-1]["П000430000107"];
				Колонка8 = Колонка8 + ТаблицаБлока[Ном-1]["П000430000108"];
				Колонка9 = Колонка9 + ТаблицаБлока[Ном-1]["П000430000109"];
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураДанныхРаздела.П000430000206 = Колонка6;
		Форма.СтруктураДанныхРаздел1_3.П000030007003 = Колонка6;
		
		СтруктураДанныхРаздела.П000430000207 = Колонка7;
		Форма.СтруктураДанныхРаздел1_3.П000030007004 = Колонка7;
		
		СтруктураДанныхРаздела.П000430000208 = Колонка8;
		Форма.СтруктураДанныхРаздел1_3.П000030007005 = Колонка8;
		
		СтруктураДанныхРаздела.П000430000209 = Колонка9;
		Форма.СтруктураДанныхРаздел1_3.П000030007006 = Колонка9;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			Форма.ТабличныйДокумент.Области.П000430000206.Значение = Колонка6;
			Форма.ТабличныйДокумент.Области.П000430000207.Значение = Колонка7;
			Форма.ТабличныйДокумент.Области.П000430000208.Значение = Колонка8;
			Форма.ТабличныйДокумент.Области.П000430000209.Значение = Колонка9;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел1_5" Тогда
		
		СтруктураДанныхРаздела = Форма["СтруктураДанных" + ИмяТекущегоРаздела];
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
						
			СтруктураДанныхРаздела.П000050003007 = Форма.ТабличныйДокумент.Области.П000050004007.Значение
												 + Форма.ТабличныйДокумент.Области.П000050005007.Значение;
			Форма.ТабличныйДокумент.Области.П000050003007.Значение = СтруктураДанныхРаздела.П000050003007;
			
			СтруктураДанныхРаздела.П000050003008 = Форма.ТабличныйДокумент.Области.П000050004008.Значение
												 + Форма.ТабличныйДокумент.Области.П000050005008.Значение;
			Форма.ТабличныйДокумент.Области.П000050003008.Значение = СтруктураДанныхРаздела.П000050003008;
						
			СтруктураДанныхРаздела.П000050003010 = Форма.ТабличныйДокумент.Области.П000050004010.Значение
												 + Форма.ТабличныйДокумент.Области.П000050005010.Значение;
			Форма.ТабличныйДокумент.Области.П000050003010.Значение = СтруктураДанныхРаздела.П000050003010;
			
			СтруктураДанныхРаздела.П000050003011 = Форма.ТабличныйДокумент.Области.П000050004011.Значение
												 + Форма.ТабличныйДокумент.Области.П000050005011.Значение;
			Форма.ТабличныйДокумент.Области.П000050003011.Значение = СтруктураДанныхРаздела.П000050003011;
									
			СтруктураДанныхРаздела.П000050003016 = Форма.ТабличныйДокумент.Области.П000050004016.Значение
												 + Форма.ТабличныйДокумент.Области.П000050005016.Значение;
			Форма.ТабличныйДокумент.Области.П000050003016.Значение = СтруктураДанныхРаздела.П000050003016;
			
			СтруктураДанныхРаздела.П000050003017 = Форма.ТабличныйДокумент.Области.П000050004017.Значение
												 + Форма.ТабличныйДокумент.Области.П000050005017.Значение;
			Форма.ТабличныйДокумент.Области.П000050003017.Значение = СтруктураДанныхРаздела.П000050003017;
			
			СтруктураДанныхРаздела.П000050001003 = Форма.ТабличныйДокумент.Области.П000050001006.Значение
												 + Форма.ТабличныйДокумент.Области.П000050001009.Значение
												 + Форма.ТабличныйДокумент.Области.П000050001012.Значение
												 + Форма.ТабличныйДокумент.Области.П000050001015.Значение
												 + Форма.ТабличныйДокумент.Области.П000050001018.Значение;
			Форма.ТабличныйДокумент.Области.П000050001003.Значение = СтруктураДанныхРаздела.П000050001003;
			
			СтруктураДанныхРаздела.П000050002003 = Форма.ТабличныйДокумент.Области.П000050002006.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002009.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002015.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002018.Значение;
			Форма.ТабличныйДокумент.Области.П000050002003.Значение = СтруктураДанныхРаздела.П000050002003;
			
			СтруктураДанныхРаздела.П000050003003 = Форма.ТабличныйДокумент.Области.П000050003006.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003009.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003015.Значение;
			Форма.ТабличныйДокумент.Области.П000050003003.Значение = СтруктураДанныхРаздела.П000050003003;
			
			СтруктураДанныхРаздела.П000050004003 = Форма.ТабличныйДокумент.Области.П000050004006.Значение
												 + Форма.ТабличныйДокумент.Области.П000050004009.Значение
												 + Форма.ТабличныйДокумент.Области.П000050004015.Значение;
			Форма.ТабличныйДокумент.Области.П000050004003.Значение = СтруктураДанныхРаздела.П000050004003;
			
			СтруктураДанныхРаздела.П000050005003 = Форма.ТабличныйДокумент.Области.П000050005006.Значение
												 + Форма.ТабличныйДокумент.Области.П000050005009.Значение
												 + Форма.ТабличныйДокумент.Области.П000050005015.Значение;
			Форма.ТабличныйДокумент.Области.П000050005003.Значение = СтруктураДанныхРаздела.П000050005003;
			
			СтруктураДанныхРаздела.П000050006003 = Форма.ТабличныйДокумент.Области.П000050006006.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006009.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006015.Значение;
			Форма.ТабличныйДокумент.Области.П000050006003.Значение = СтруктураДанныхРаздела.П000050006003;
			
			СтруктураДанныхРаздела.П000050001004 = Форма.ТабличныйДокумент.Области.П000050001007.Значение
												 + Форма.ТабличныйДокумент.Области.П000050001010.Значение
												 + Форма.ТабличныйДокумент.Области.П000050001013.Значение
												 + Форма.ТабличныйДокумент.Области.П000050001016.Значение
												 + Форма.ТабличныйДокумент.Области.П000050001019.Значение;
			Форма.ТабличныйДокумент.Области.П000050001004.Значение = СтруктураДанныхРаздела.П000050001004;
			
			СтруктураДанныхРаздела.П000050002004 = Форма.ТабличныйДокумент.Области.П000050002007.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002010.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002016.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002019.Значение;
			Форма.ТабличныйДокумент.Области.П000050002004.Значение = СтруктураДанныхРаздела.П000050002004;
			
			СтруктураДанныхРаздела.П000050003004 = Форма.ТабличныйДокумент.Области.П000050003007.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003010.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003016.Значение;
			Форма.ТабличныйДокумент.Области.П000050003004.Значение = СтруктураДанныхРаздела.П000050003004;
			
			СтруктураДанныхРаздела.П000050004004 = Форма.ТабличныйДокумент.Области.П000050004007.Значение
												 + Форма.ТабличныйДокумент.Области.П000050004010.Значение
												 + Форма.ТабличныйДокумент.Области.П000050004016.Значение;
			Форма.ТабличныйДокумент.Области.П000050004004.Значение = СтруктураДанныхРаздела.П000050004004;
			
			СтруктураДанныхРаздела.П000050005004 = Форма.ТабличныйДокумент.Области.П000050005007.Значение
												 + Форма.ТабличныйДокумент.Области.П000050005010.Значение
												 + Форма.ТабличныйДокумент.Области.П000050005016.Значение;
			Форма.ТабличныйДокумент.Области.П000050005004.Значение = СтруктураДанныхРаздела.П000050005004;
			
			СтруктураДанныхРаздела.П000050006004 = Форма.ТабличныйДокумент.Области.П000050006007.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006010.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006016.Значение;
			Форма.ТабличныйДокумент.Области.П000050006004.Значение = СтруктураДанныхРаздела.П000050006004;
			
			СтруктураДанныхРаздела.П000050001005 = Форма.ТабличныйДокумент.Области.П000050001008.Значение
												 + Форма.ТабличныйДокумент.Области.П000050001011.Значение
												 + Форма.ТабличныйДокумент.Области.П000050001014.Значение
												 + Форма.ТабличныйДокумент.Области.П000050001017.Значение
												 + Форма.ТабличныйДокумент.Области.П000050001020.Значение;
			Форма.ТабличныйДокумент.Области.П000050001005.Значение = СтруктураДанныхРаздела.П000050001005;
			
			СтруктураДанныхРаздела.П000050002005 = Форма.ТабличныйДокумент.Области.П000050002008.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002011.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002017.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002020.Значение;
			Форма.ТабличныйДокумент.Области.П000050002005.Значение = СтруктураДанныхРаздела.П000050002005;
			
			СтруктураДанныхРаздела.П000050003005 = Форма.ТабличныйДокумент.Области.П000050003008.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003011.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003017.Значение;
			Форма.ТабличныйДокумент.Области.П000050003005.Значение = СтруктураДанныхРаздела.П000050003005;
			
			СтруктураДанныхРаздела.П000050004005 = Форма.ТабличныйДокумент.Области.П000050004008.Значение
												 + Форма.ТабличныйДокумент.Области.П000050004011.Значение
												 + Форма.ТабличныйДокумент.Области.П000050004017.Значение;
			Форма.ТабличныйДокумент.Области.П000050004005.Значение = СтруктураДанныхРаздела.П000050004005;
			
			СтруктураДанныхРаздела.П000050005005 = Форма.ТабличныйДокумент.Области.П000050005008.Значение
												 + Форма.ТабличныйДокумент.Области.П000050005011.Значение
												 + Форма.ТабличныйДокумент.Области.П000050005017.Значение;
			Форма.ТабличныйДокумент.Области.П000050005005.Значение = СтруктураДанныхРаздела.П000050005005;
			
			СтруктураДанныхРаздела.П000050006005 = Форма.ТабличныйДокумент.Области.П000050006008.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006011.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006017.Значение;
			Форма.ТабличныйДокумент.Области.П000050006005.Значение = СтруктураДанныхРаздела.П000050006005;
			
			СтруктураДанныхРаздела.П000050009003 = Форма.ТабличныйДокумент.Области.П000050001003.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002003.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003003.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006003.Значение
												 + Форма.ТабличныйДокумент.Области.П000050007003.Значение;
			Форма.ТабличныйДокумент.Области.П000050009003.Значение = СтруктураДанныхРаздела.П000050009003;
			
			СтруктураДанныхРаздела.П000050009005 = Форма.ТабличныйДокумент.Области.П000050001005.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002005.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003005.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006005.Значение
												 + Форма.ТабличныйДокумент.Области.П000050007005.Значение
												 + Форма.ТабличныйДокумент.Области.П000050008005.Значение;
			Форма.ТабличныйДокумент.Области.П000050009005.Значение = СтруктураДанныхРаздела.П000050009005;
			
			СтруктураДанныхРаздела.П000050009006 = Форма.ТабличныйДокумент.Области.П000050001006.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002006.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003006.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006006.Значение;
			Форма.ТабличныйДокумент.Области.П000050009006.Значение = СтруктураДанныхРаздела.П000050009006;
			
			СтруктураДанныхРаздела.П000050009008 = Форма.ТабличныйДокумент.Области.П000050001008.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002008.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003008.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006008.Значение;
			Форма.ТабличныйДокумент.Области.П000050009008.Значение = СтруктураДанныхРаздела.П000050009008;
			
			СтруктураДанныхРаздела.П000050009009 = Форма.ТабличныйДокумент.Области.П000050001009.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002009.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003009.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006009.Значение;
			Форма.ТабличныйДокумент.Области.П000050009009.Значение = СтруктураДанныхРаздела.П000050009009;
			
			СтруктураДанныхРаздела.П000050009011 = Форма.ТабличныйДокумент.Области.П000050001011.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002011.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003011.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006011.Значение;
			Форма.ТабличныйДокумент.Области.П000050009011.Значение = СтруктураДанныхРаздела.П000050009011;
			
			СтруктураДанныхРаздела.П000050009012 = Форма.ТабличныйДокумент.Области.П000050001012.Значение;
			Форма.ТабличныйДокумент.Области.П000050009012.Значение = СтруктураДанныхРаздела.П000050009012;
			
			СтруктураДанныхРаздела.П000050009014 = Форма.ТабличныйДокумент.Области.П000050001014.Значение;
			Форма.ТабличныйДокумент.Области.П000050009014.Значение = СтруктураДанныхРаздела.П000050009014;
			
			СтруктураДанныхРаздела.П000050009015 = Форма.ТабличныйДокумент.Области.П000050001015.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002015.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003015.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006015.Значение;
			Форма.ТабличныйДокумент.Области.П000050009015.Значение = СтруктураДанныхРаздела.П000050009015;
			
			СтруктураДанныхРаздела.П000050009017 = Форма.ТабличныйДокумент.Области.П000050001017.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002017.Значение
												 + Форма.ТабличныйДокумент.Области.П000050003017.Значение
												 + Форма.ТабличныйДокумент.Области.П000050006017.Значение;
			Форма.ТабличныйДокумент.Области.П000050009017.Значение = СтруктураДанныхРаздела.П000050009017;
			
			СтруктураДанныхРаздела.П000050009018 = Форма.ТабличныйДокумент.Области.П000050001018.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002018.Значение;
			Форма.ТабличныйДокумент.Области.П000050009018.Значение = СтруктураДанныхРаздела.П000050009018;
			
			СтруктураДанныхРаздела.П000050009020 = Форма.ТабличныйДокумент.Области.П000050001020.Значение
												 + Форма.ТабличныйДокумент.Области.П000050002020.Значение;
			Форма.ТабличныйДокумент.Области.П000050009020.Значение = СтруктураДанныхРаздела.П000050009020;
			
		Иначе
									
			СтруктураДанныхРаздела.П000050003007 = СтруктураДанныхРаздела.П000050004007
												 + СтруктураДанныхРаздела.П000050005007;
			
			СтруктураДанныхРаздела.П000050003008 = СтруктураДанныхРаздела.П000050004008
												 + СтруктураДанныхРаздела.П000050005008;
									
			СтруктураДанныхРаздела.П000050003010 = СтруктураДанныхРаздела.П000050004010
												 + СтруктураДанныхРаздела.П000050005010;
			
			СтруктураДанныхРаздела.П000050003011 = СтруктураДанныхРаздела.П000050004011
												 + СтруктураДанныхРаздела.П000050005011;
						
			СтруктураДанныхРаздела.П000050003016 = СтруктураДанныхРаздела.П000050004016
												 + СтруктураДанныхРаздела.П000050005016;
			
			СтруктураДанныхРаздела.П000050003017 = СтруктураДанныхРаздела.П000050004017
												 + СтруктураДанныхРаздела.П000050005017;
			
			СтруктураДанныхРаздела.П000050001003 = СтруктураДанныхРаздела.П000050001006
												 + СтруктураДанныхРаздела.П000050001009
												 + СтруктураДанныхРаздела.П000050001012
												 + СтруктураДанныхРаздела.П000050001015
												 + СтруктураДанныхРаздела.П000050001018;
			
			СтруктураДанныхРаздела.П000050002003 = СтруктураДанныхРаздела.П000050002006
												 + СтруктураДанныхРаздела.П000050002009
												 + СтруктураДанныхРаздела.П000050002015
												 + СтруктураДанныхРаздела.П000050002018;
			
			СтруктураДанныхРаздела.П000050003003 = СтруктураДанныхРаздела.П000050003006
												 + СтруктураДанныхРаздела.П000050003009
												 + СтруктураДанныхРаздела.П000050003015;
			
			СтруктураДанныхРаздела.П000050004003 = СтруктураДанныхРаздела.П000050004006
												 + СтруктураДанныхРаздела.П000050004009
												 + СтруктураДанныхРаздела.П000050004015;
			
			СтруктураДанныхРаздела.П000050005003 = СтруктураДанныхРаздела.П000050005006
												 + СтруктураДанныхРаздела.П000050005009
												 + СтруктураДанныхРаздела.П000050005015;
			
			СтруктураДанныхРаздела.П000050006003 = СтруктураДанныхРаздела.П000050006006
												 + СтруктураДанныхРаздела.П000050006009
												 + СтруктураДанныхРаздела.П000050006015;
			
			СтруктураДанныхРаздела.П000050001004 = СтруктураДанныхРаздела.П000050001007
												 + СтруктураДанныхРаздела.П000050001010
												 + СтруктураДанныхРаздела.П000050001013
												 + СтруктураДанныхРаздела.П000050001016
												 + СтруктураДанныхРаздела.П000050001019;
			
			СтруктураДанныхРаздела.П000050002004 = СтруктураДанныхРаздела.П000050002007
												 + СтруктураДанныхРаздела.П000050002010
												 + СтруктураДанныхРаздела.П000050002016
												 + СтруктураДанныхРаздела.П000050002019;
			
			СтруктураДанныхРаздела.П000050003004 = СтруктураДанныхРаздела.П000050003007
												 + СтруктураДанныхРаздела.П000050003010
												 + СтруктураДанныхРаздела.П000050003016;
			
			СтруктураДанныхРаздела.П000050004004 = СтруктураДанныхРаздела.П000050004007
												 + СтруктураДанныхРаздела.П000050004010
												 + СтруктураДанныхРаздела.П000050004016;
			
			СтруктураДанныхРаздела.П000050005004 = СтруктураДанныхРаздела.П000050005007
												 + СтруктураДанныхРаздела.П000050005010
												 + СтруктураДанныхРаздела.П000050005016;
			
			СтруктураДанныхРаздела.П000050006004 = СтруктураДанныхРаздела.П000050006007
												 + СтруктураДанныхРаздела.П000050006010
												 + СтруктураДанныхРаздела.П000050006016;
			
			СтруктураДанныхРаздела.П000050001005 = СтруктураДанныхРаздела.П000050001008
												 + СтруктураДанныхРаздела.П000050001011
												 + СтруктураДанныхРаздела.П000050001014
												 + СтруктураДанныхРаздела.П000050001017
												 + СтруктураДанныхРаздела.П000050001020;
			
			СтруктураДанныхРаздела.П000050002005 = СтруктураДанныхРаздела.П000050002008
												 + СтруктураДанныхРаздела.П000050002011
												 + СтруктураДанныхРаздела.П000050002017
												 + СтруктураДанныхРаздела.П000050002020;
			
			СтруктураДанныхРаздела.П000050003005 = СтруктураДанныхРаздела.П000050003008
												 + СтруктураДанныхРаздела.П000050003011
												 + СтруктураДанныхРаздела.П000050003017;
			
			СтруктураДанныхРаздела.П000050004005 = СтруктураДанныхРаздела.П000050004008
												 + СтруктураДанныхРаздела.П000050004011
												 + СтруктураДанныхРаздела.П000050004017;
			
			СтруктураДанныхРаздела.П000050005005 = СтруктураДанныхРаздела.П000050005008
												 + СтруктураДанныхРаздела.П000050005011
												 + СтруктураДанныхРаздела.П000050005017;
			
			СтруктураДанныхРаздела.П000050006005 = СтруктураДанныхРаздела.П000050006008
												 + СтруктураДанныхРаздела.П000050006011
												 + СтруктураДанныхРаздела.П000050006017;
			
			СтруктураДанныхРаздела.П000050009003 = СтруктураДанныхРаздела.П000050001003
												 + СтруктураДанныхРаздела.П000050002003
												 + СтруктураДанныхРаздела.П000050003003
												 + СтруктураДанныхРаздела.П000050006003
												 + СтруктураДанныхРаздела.П000050007003;
			
			СтруктураДанныхРаздела.П000050009005 = СтруктураДанныхРаздела.П000050001005
												 + СтруктураДанныхРаздела.П000050002005
												 + СтруктураДанныхРаздела.П000050003005
												 + СтруктураДанныхРаздела.П000050006005
												 + СтруктураДанныхРаздела.П000050007005
												 + СтруктураДанныхРаздела.П000050008005;
			
			СтруктураДанныхРаздела.П000050009006 = СтруктураДанныхРаздела.П000050001006
												 + СтруктураДанныхРаздела.П000050002006
												 + СтруктураДанныхРаздела.П000050003006
												 + СтруктураДанныхРаздела.П000050006006;
			
			СтруктураДанныхРаздела.П000050009008 = СтруктураДанныхРаздела.П000050001008
												 + СтруктураДанныхРаздела.П000050002008
												 + СтруктураДанныхРаздела.П000050003008
												 + СтруктураДанныхРаздела.П000050006008;
			
			СтруктураДанныхРаздела.П000050009009 = СтруктураДанныхРаздела.П000050001009
												 + СтруктураДанныхРаздела.П000050002009
												 + СтруктураДанныхРаздела.П000050003009
												 + СтруктураДанныхРаздела.П000050006009;
			
			СтруктураДанныхРаздела.П000050009011 = СтруктураДанныхРаздела.П000050001011
												 + СтруктураДанныхРаздела.П000050002011
												 + СтруктураДанныхРаздела.П000050003011
												 + СтруктураДанныхРаздела.П000050006011;
			
			СтруктураДанныхРаздела.П000050009012 = СтруктураДанныхРаздела.П000050001012;
			
			СтруктураДанныхРаздела.П000050009014 = СтруктураДанныхРаздела.П000050001014;
			
			СтруктураДанныхРаздела.П000050009015 = СтруктураДанныхРаздела.П000050001015
												 + СтруктураДанныхРаздела.П000050002015
												 + СтруктураДанныхРаздела.П000050003015
												 + СтруктураДанныхРаздела.П000050006015;
			
			СтруктураДанныхРаздела.П000050009017 = СтруктураДанныхРаздела.П000050001017
												 + СтруктураДанныхРаздела.П000050002017
												 + СтруктураДанныхРаздела.П000050003017
												 + СтруктураДанныхРаздела.П000050006017;
			
			СтруктураДанныхРаздела.П000050009018 = СтруктураДанныхРаздела.П000050001018
												 + СтруктураДанныхРаздела.П000050002018;
			
			СтруктураДанныхРаздела.П000050009020 = СтруктураДанныхРаздела.П000050001020
												 + СтруктураДанныхРаздела.П000050002020;
			                                                                                              			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел2_6" Тогда
		
		СтруктураДанныхРаздела = Форма["СтруктураДанных" + ИмяТекущегоРаздела];
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			СтруктураДанныхРаздела.П000060001203 = Форма.ТабличныйДокумент.Области.П000060001303.Значение
												 + Форма.ТабличныйДокумент.Области.П000060001403.Значение
												 + Форма.ТабличныйДокумент.Области.П000060001503.Значение;
			СтруктураДанныхРаздела.П000060001204 = Форма.ТабличныйДокумент.Области.П000060001304.Значение
												 + Форма.ТабличныйДокумент.Области.П000060001404.Значение
												 + Форма.ТабличныйДокумент.Области.П000060001504.Значение;
			СтруктураДанныхРаздела.П000060001205 = Форма.ТабличныйДокумент.Области.П000060001305.Значение
												 + Форма.ТабличныйДокумент.Области.П000060001405.Значение
												 + Форма.ТабличныйДокумент.Области.П000060001505.Значение;
			СтруктураДанныхРаздела.П000060001010 = Форма.ТабличныйДокумент.Области.П000060001006.Значение
											* (1 - Форма.ТабличныйДокумент.Области.П000060001007.Значение / 100
												 + Форма.ТабличныйДокумент.Области.П000060001009.Значение / 100);
			
			Форма.ТабличныйДокумент.Области.П000060001203.Значение = СтруктураДанныхРаздела.П000060001203;
			Форма.ТабличныйДокумент.Области.П000060001204.Значение = СтруктураДанныхРаздела.П000060001204;
			Форма.ТабличныйДокумент.Области.П000060001205.Значение = СтруктураДанныхРаздела.П000060001205;
			Форма.ТабличныйДокумент.Области.П000060001010.Значение = СтруктураДанныхРаздела.П000060001010;
			
		Иначе
			
			СтруктураДанныхРаздела.П000060001203 = СтруктураДанныхРаздела.П000060001303
												 + СтруктураДанныхРаздела.П000060001403
												 + СтруктураДанныхРаздела.П000060001503;
			СтруктураДанныхРаздела.П000060001204 = СтруктураДанныхРаздела.П000060001304
												 + СтруктураДанныхРаздела.П000060001404
												 + СтруктураДанныхРаздела.П000060001504;
			СтруктураДанныхРаздела.П000060001205 = СтруктураДанныхРаздела.П000060001305
												 + СтруктураДанныхРаздела.П000060001405
												 + СтруктураДанныхРаздела.П000060001505;
			СтруктураДанныхРаздела.П000060001010 = СтруктураДанныхРаздела.П000060001006
											* (1 - СтруктураДанныхРаздела.П000060001007 / 100
												 + СтруктураДанныхРаздела.П000060001009 / 100);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел2_7" Тогда	
		
		СтруктураДанныхРаздела = Форма["СтруктураДанных" + ИмяТекущегоРаздела];
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			СтруктураДанныхРаздела.П000070002401 = Форма.ТабличныйДокумент.Области.П000070002101.Значение
												 + Форма.ТабличныйДокумент.Области.П000070002201.Значение
												 + Форма.ТабличныйДокумент.Области.П000070002301.Значение;
			СтруктураДанныхРаздела.П000070015401 = Форма.ТабличныйДокумент.Области.П000070015101.Значение
												 + Форма.ТабличныйДокумент.Области.П000070015201.Значение
												 + Форма.ТабличныйДокумент.Области.П000070015301.Значение;
			
			Форма.ТабличныйДокумент.Области.П000070002401.Значение = СтруктураДанныхРаздела.П000070002401;
			Форма.ТабличныйДокумент.Области.П000070015401.Значение = СтруктураДанныхРаздела.П000070015401;
			
		Иначе
			
			СтруктураДанныхРаздела.П000070002401 = СтруктураДанныхРаздела.П000070002101
												 + СтруктураДанныхРаздела.П000070002201
												 + СтруктураДанныхРаздела.П000070002301;
			СтруктураДанныхРаздела.П000070015401 = СтруктураДанныхРаздела.П000070015101
												 + СтруктураДанныхРаздела.П000070015201
												 + СтруктураДанныхРаздела.П000070015301;
												 
		КонецЕсли;										 
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		МСЧ1 = 0;
		
		Для Ном = 1 По ТаблицаБлока.Количество() Цикл
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
				
				МСЧ1 = МСЧ1 + Форма.ТабличныйДокумент.Области["П000070016101_" + Ном].Значение;
				
			Иначе
				
				МСЧ1 = МСЧ1 + ТаблицаБлока[Ном-1]["П000070016101"];
				
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		МСЧ2 = 0;
		
		Для Ном = 1 По ТаблицаБлока.Количество() Цикл
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
				
				МСЧ2 = МСЧ2 + Форма.ТабличныйДокумент.Области["П000070016201_" + Ном].Значение;
				
			Иначе
				
				МСЧ2 = МСЧ2 + ТаблицаБлока[Ном-1]["П000070016201"];
				
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3, ТаблицаБлока);
		ТаблицаБлока = Форма[ТаблицаБлока];
		
		МСЧ3 = 0;
		
		Для Ном = 1 По ТаблицаБлока.Количество() Цикл
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
				
				МСЧ3 = МСЧ3 + Форма.ТабличныйДокумент.Области["П000070016301_" + Ном].Значение;
				
			Иначе
				
				МСЧ3 = МСЧ3 + ТаблицаБлока[Ном-1]["П000070016301"];
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураДанныхРаздела.П000070016401 = МСЧ1 + МСЧ2 + МСЧ3;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			Форма.ТабличныйДокумент.Области.П000070016401.Значение = МСЧ1 + МСЧ2 + МСЧ3;
			
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			СтруктураДанныхРаздела.П000070002003 = Форма.ТабличныйДокумент.Области.П000070002001.Значение
												 + Форма.ТабличныйДокумент.Области.П000070002401.Значение;
			Форма.ТабличныйДокумент.Области.П000070002003.Значение = СтруктураДанныхРаздела.П000070002003;
		
			СтруктураДанныхРаздела.П000070012003 = Форма.ТабличныйДокумент.Области.П000070013003.Значение
												 + Форма.ТабличныйДокумент.Области.П000070014003.Значение;
			Форма.ТабличныйДокумент.Области.П000070012003.Значение = СтруктураДанныхРаздела.П000070012003;
			
			СтруктураДанныхРаздела.П000070015003 = Форма.ТабличныйДокумент.Области.П000070015001.Значение
												 + Форма.ТабличныйДокумент.Области.П000070015401.Значение;
			Форма.ТабличныйДокумент.Области.П000070015003.Значение = СтруктураДанныхРаздела.П000070015003;
			
			СтруктураДанныхРаздела.П000070016003 = Форма.ТабличныйДокумент.Области.П000070016001.Значение
												 + Форма.ТабличныйДокумент.Области.П000070016401.Значение;
			Форма.ТабличныйДокумент.Области.П000070016003.Значение = СтруктураДанныхРаздела.П000070016003;
			
			СтруктураДанныхРаздела.П000070008003 = Форма.ТабличныйДокумент.Области.П000070001003.Значение
												 + Форма.ТабличныйДокумент.Области.П000070002003.Значение
												 + Форма.ТабличныйДокумент.Области.П000070003003.Значение
												 + Форма.ТабличныйДокумент.Области.П000070004003.Значение
												 + Форма.ТабличныйДокумент.Области.П000070005003.Значение
												 + Форма.ТабличныйДокумент.Области.П000070006003.Значение
												 + Форма.ТабличныйДокумент.Области.П000070007003.Значение;
			Форма.ТабличныйДокумент.Области.П000070008003.Значение = СтруктураДанныхРаздела.П000070008003;
			
			СтруктураДанныхРаздела.П000070018003 = Форма.ТабличныйДокумент.Области.П000070012003.Значение
												 + Форма.ТабличныйДокумент.Области.П000070015003.Значение
												 + Форма.ТабличныйДокумент.Области.П000070016003.Значение
												 + Форма.ТабличныйДокумент.Области.П000070017003.Значение;
			Форма.ТабличныйДокумент.Области.П000070018003.Значение = СтруктураДанныхРаздела.П000070018003;
			
			СтруктураДанныхРаздела.П000070009003 = ?(Форма.ТабличныйДокумент.Области.П000070018003.Значение
												   > Форма.ТабличныйДокумент.Области.П000070008003.Значение
												   , Форма.ТабличныйДокумент.Области.П000070018003.Значение
												   - Форма.ТабличныйДокумент.Области.П000070008003.Значение, 0);
			Форма.ТабличныйДокумент.Области.П000070009003.Значение = СтруктураДанныхРаздела.П000070009003;
			
			
			СтруктураДанныхРаздела.П000070010003 = Форма.ТабличныйДокумент.Области.П000070009003.Значение
												 - Форма.ТабличныйДокумент.Области.П000070011003.Значение;
			Форма.ТабличныйДокумент.Области.П000070010003.Значение = СтруктураДанныхРаздела.П000070010003;									 
			
			СтруктураДанныхРаздела.П000070019003 = ?(Форма.ТабличныйДокумент.Области.П000070008003.Значение
												   > Форма.ТабличныйДокумент.Области.П000070018003.Значение
												   , Форма.ТабличныйДокумент.Области.П000070008003.Значение
												   - Форма.ТабличныйДокумент.Области.П000070018003.Значение, 0);
			Форма.ТабличныйДокумент.Области.П000070019003.Значение = СтруктураДанныхРаздела.П000070019003;
			
		Иначе
			
			СтруктураДанныхРаздела.П000070002003 = СтруктураДанныхРаздела.П000070002001
												 + СтруктураДанныхРаздела.П000070002401;
			СтруктураДанныхРаздела.П000070012003 = СтруктураДанныхРаздела.П000070013003
												 + СтруктураДанныхРаздела.П000070014003;
			СтруктураДанныхРаздела.П000070015003 = СтруктураДанныхРаздела.П000070015001
												 + СтруктураДанныхРаздела.П000070015401;
			СтруктураДанныхРаздела.П000070016003 = СтруктураДанныхРаздела.П000070016001
												 + СтруктураДанныхРаздела.П000070016401;
			СтруктураДанныхРаздела.П000070008003 = СтруктураДанныхРаздела.П000070001003
												 + СтруктураДанныхРаздела.П000070002003
												 + СтруктураДанныхРаздела.П000070003003
												 + СтруктураДанныхРаздела.П000070004003
												 + СтруктураДанныхРаздела.П000070005003
												 + СтруктураДанныхРаздела.П000070006003
												 + СтруктураДанныхРаздела.П000070007003;
			СтруктураДанныхРаздела.П000070018003 = СтруктураДанныхРаздела.П000070012003
												 + СтруктураДанныхРаздела.П000070015003
												 + СтруктураДанныхРаздела.П000070016003
												 + СтруктураДанныхРаздела.П000070017003;
												 
			СтруктураДанныхРаздела.П000070009003 = ?(СтруктураДанныхРаздела.П000070018003
												   > СтруктураДанныхРаздела.П000070008003
												   , СтруктураДанныхРаздела.П000070018003
												   - СтруктураДанныхРаздела.П000070008003, 0);
												   
			СтруктураДанныхРаздела.П000070010003 = СтруктураДанныхРаздела.П000070009003
												 - СтруктураДанныхРаздела.П000070011003;
												   
			СтруктураДанныхРаздела.П000070019003 = ?(СтруктураДанныхРаздела.П000070008003
												   > СтруктураДанныхРаздела.П000070018003
												   , СтруктураДанныхРаздела.П000070008003
												   - СтруктураДанныхРаздела.П000070018003, 0);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоРаздела = "Раздел2_8_9" Тогда
		
		СтруктураДанныхРаздела = Форма["СтруктураДанных" + ИмяТекущегоРаздела];
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекущегоРаздела Тогда
			
			СтруктураДанныхРаздела.П000080010004 = Форма.ТабличныйДокумент.Области.П000080001004.Значение
												 + Форма.ТабличныйДокумент.Области.П000080004004.Значение
												 + Форма.ТабличныйДокумент.Области.П000080007004.Значение
												 + Форма.ТабличныйДокумент.Области.П000080009004.Значение;
			СтруктураДанныхРаздела.П000090004003 = Форма.ТабличныйДокумент.Области.П000090001003.Значение
												 + Форма.ТабличныйДокумент.Области.П000090003003.Значение;
			
			Форма.ТабличныйДокумент.Области.П000080010004.Значение = СтруктураДанныхРаздела.П000080010004;
			Форма.ТабличныйДокумент.Области.П000090004003.Значение = СтруктураДанныхРаздела.П000090004003;
			
		Иначе
			
			СтруктураДанныхРаздела.П000080010004 = СтруктураДанныхРаздела.П000080001004
												 + СтруктураДанныхРаздела.П000080004004
												 + СтруктураДанныхРаздела.П000080007004
												 + СтруктураДанныхРаздела.П000080009004;
			СтруктураДанныхРаздела.П000090004003 = СтруктураДанныхРаздела.П000090001003
												 + СтруктураДанныхРаздела.П000090003003;
		
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьМакетРаздела1_1(ИмяГруппы, СтруктураГруппыКоличество) Экспорт
	
	Если ИмяГруппы <> СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1
	   И ИмяГруппы <> СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2
	   И ИмяГруппы <> СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3 Тогда
		Возврат;
	КонецЕсли;
	
	ПерваяЯчейкаМСЧ = ТабличныйДокумент.Области[ИмяГруппы + "01_1"];
	ПоследняяЯчейкаМСЧ = ТабличныйДокумент.Области[ИмяГруппы + "01_" + Формат(СтруктураГруппыКоличество, "ЧГ=0")];
	
	ОбластьГрафы2 = ТабличныйДокумент.Область(ПерваяЯчейкаМСЧ.Верх, 2, ПоследняяЯчейкаМСЧ.Низ, 2);
	ОбластьГрафы2.Объединить();
	
	ОбластьГрафы3 = ТабличныйДокумент.Область(ПерваяЯчейкаМСЧ.Верх, 3, ПоследняяЯчейкаМСЧ.Низ, 3);
	ОбластьГрафы3.Объединить();
	
	Если ИмяГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1 Тогда
		ИмяОбластиПоказателя = "П000010003301";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2 Тогда
		ИмяОбластиПоказателя = "П000010003401";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3 Тогда
		ИмяОбластиПоказателя = "П000010003501";
	КонецЕсли;
	
	ОбластьГрафы3.Имя = ИмяОбластиПоказателя;
	
	ОбластьГрафы7 = ТабличныйДокумент.Область(ПерваяЯчейкаМСЧ.Верх, 7, ПоследняяЯчейкаМСЧ.Низ, 7);
	ОбластьГрафы7.Объединить();
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьМакетРаздела2_7(ИмяГруппы, СтруктураГруппыКоличество) Экспорт
	
	Если ИмяГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1 Тогда
		
		ИмяПоследнейЯчейкиМСЧ = ИмяГруппы + "01_" + СтрокаЧГ0(СтруктураГруппыКоличество);
		ПоследняяЯчейкаМСЧ = ТабличныйДокумент.Области[ИмяПоследнейЯчейкиМСЧ];
		
		ВерхСтроки5 = 18;
		
		ОбъединяемаяОбласть = ТабличныйДокумент.Область(ВерхСтроки5, 2, ПоследняяЯчейкаМСЧ.Низ + 1, 3);
		ОбъединяемаяОбласть.Объединить();
		
		ОбъединяемаяОбласть = ТабличныйДокумент.Область(ВерхСтроки5, 4, ПоследняяЯчейкаМСЧ.Низ + 1, 4);
		ОбъединяемаяОбласть.Объединить();
		
		ОбъединяемаяОбласть = ТабличныйДокумент.Область(ВерхСтроки5, 5, ПоследняяЯчейкаМСЧ.Низ + 1, 5);
		ОбъединяемаяОбласть.Объединить();
		
		ОбъединяемаяОбласть.Имя = "П000070005003";
		
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2
		  ИЛИ ИмяГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3 Тогда
		
		ВерхСтроки6 = ТабличныйДокумент.Области["П000070016204_1"].Верх;
		НизСтроки6  = ТабличныйДокумент.Области["П000070017003"].Низ;
		
		ОбъединяемаяОбласть = ТабличныйДокумент.Область(ВерхСтроки6, 2, НизСтроки6, 3);
		ОбъединяемаяОбласть.Объединить();
		
		ОбъединяемаяОбласть = ТабличныйДокумент.Область(ВерхСтроки6, 4, НизСтроки6, 4);
		ОбъединяемаяОбласть.Объединить();
		
		ОбъединяемаяОбласть = ТабличныйДокумент.Область(ВерхСтроки6, 5, НизСтроки6, 5);
		ОбъединяемаяОбласть.Объединить();
		
		ОбъединяемаяОбласть.Имя = "П000070006003";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ВерхСтроки16 = 16;
	НизСтроки16  = ТабличныйДокумент.Области["П000070017003"].Низ - 1;
	
	ОбъединяемаяОбласть = ТабличныйДокумент.Область(ВерхСтроки16, 11, НизСтроки16, 11);
	ОбъединяемаяОбласть.Объединить();
	
	ОбъединяемаяОбласть = ТабличныйДокумент.Область(ВерхСтроки16, 12, НизСтроки16, 12);
	ОбъединяемаяОбласть.Объединить();
	ОбъединяемаяОбласть.Имя = "П000070016003";
	
	// Корректировка верхней линии строк многострочной части.
	Для НомерСтроки = 1 По СтруктураГруппыКоличество Цикл
		
		ОбластьПоказателя = ТабличныйДокумент.Области["УдалитьСтроку" + ИмяГруппы + "01_" + СтрокаЧГ0(НомерСтроки)];
		
		Если НомерСтроки = 1 Тогда
			ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		Иначе
			ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		КонецЕсли;
		
		ОбластьПоказателя = ТабличныйДокумент.Области[ИмяГруппы + "01_" + СтрокаЧГ0(НомерСтроки)];
		
		Если НомерСтроки = 1 Тогда
			ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		Иначе
			ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		КонецЕсли;
		
		ОбластьПоказателя = ТабличныйДокумент.Области[ИмяГруппы + "04_" + СтрокаЧГ0(НомерСтроки)];
		
		Если НомерСтроки = 1 Тогда
			ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		Иначе
			ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		КонецЕсли;
		
		ОбластьПоказателя = ТабличныйДокумент.Области[ИмяГруппы + "05_" + СтрокаЧГ0(НомерСтроки)];
		
		Если НомерСтроки = 1 Тогда
			ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		Иначе
			ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Функция СуммаПоказателейМСЧ(ДанныеРаздела, ИмяПоказателя)
	
	Результат = 0;
	
	НомерСтроки = 1;
	ПолноеИмя = ИмяПоказателя + "_" + СтрокаЧГ0(НомерСтроки);
	
	Пока ДанныеРаздела.Свойство(ПолноеИмя) Цикл
		Результат = Результат + ДанныеРаздела[ПолноеИмя];
		
		НомерСтроки = НомерСтроки + 1;
		ПолноеИмя = ИмяПоказателя + "_" + СтрокаЧГ0(НомерСтроки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСтроку()
	
	ТекТабличноеПоле = ТабличныйДокумент;
	ТекущаяОбласть   = ЭтаФорма["ТабличныйДокумент"].ТекущаяОбласть;
	ТекРаздел = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ТекущаяОбласть.Имя = "ДобавитьСтроку" ИЛИ ТекущаяОбласть.Имя = "ДобавитьСтрокуЗначок" Тогда
		ИмяПараметраАктивнойОбласти = Лев(СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтроку", ""), 11);
	ИначеЕсли ТекущаяОбласть.Имя = "ДобавитьСтроку1м"
		  ИЛИ ТекущаяОбласть.Имя = "ДобавитьСтрокуЗначок1м"
		  ИЛИ (Найти(ТекущаяОбласть.Имя, "П0000100163") > 0 ИЛИ Найти(ТекущаяОбласть.Имя, "П0000700161") > 0) Тогда
		Если ТекРаздел = "Раздел1_1" Тогда
			ИмяПараметраАктивнойОбласти = "П0000100163";
		ИначеЕсли ТекРаздел = "Раздел2_7" Тогда
			ИмяПараметраАктивнойОбласти = "П0000700161";
		КонецЕсли;
	ИначеЕсли ТекущаяОбласть.Имя = "ДобавитьСтроку2м"
		 ИЛИ ТекущаяОбласть.Имя = "ДобавитьСтрокуЗначок2м"
		 ИЛИ (Найти(ТекущаяОбласть.Имя, "П0000100164") > 0 ИЛИ Найти(ТекущаяОбласть.Имя, "П0000700162") > 0) Тогда
		Если ТекРаздел = "Раздел1_1" Тогда
			ИмяПараметраАктивнойОбласти = "П0000100164";
		ИначеЕсли ТекРаздел = "Раздел2_7" Тогда
			ИмяПараметраАктивнойОбласти = "П0000700162";
		КонецЕсли;
	ИначеЕсли ТекущаяОбласть.Имя = "ДобавитьСтроку3м"
		 ИЛИ ТекущаяОбласть.Имя = "ДобавитьСтрокуЗначок3м"
		 ИЛИ (Найти(ТекущаяОбласть.Имя, "П0000100165") > 0 ИЛИ Найти(ТекущаяОбласть.Имя, "П0000700163") > 0) Тогда
		Если ТекРаздел = "Раздел1_1" Тогда
			ИмяПараметраАктивнойОбласти = "П0000100165";
		ИначеЕсли ТекРаздел = "Раздел2_7" Тогда
			ИмяПараметраАктивнойОбласти = "П0000700163";
		КонецЕсли;
	КонецЕсли;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ИмяПараметраАктивнойОбласти);
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ВставитьДополнительнуюСтроку(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку()
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку(ТекущаяСтраница, ИмяГруппы)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	ТекТабличноеПоле = ЭтаФорма[ТекТабличноеПолеИмя];
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = "УдалитьСтроку" + ИмяГруппы + "01_" + КолСтрокСтр;
	
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	ИмяПервойЯчейкиПервойСтроки = "УдалитьСтроку" + ИмяГруппы + "01_1";
	ОбластьПервойЯчейкиПервойСтроки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
	ВерхОбластиМногострочнойЧасти = ОбластьПервойЯчейкиПервойСтроки.Верх;
	
	ВысотаСтроки = МаксимальноеКоличествоСтрокГруппы;
	НомерПоследнейСтроки = СтруктураГруппы.Количество();
	
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	
	ИсходнаяОбластьМСЧ = ТекТабличноеПоле.Область(ВерхОбластиМногострочнойЧасти, , НомерНижнЯчейкиОбласти, );
	ИмяОбластиМСЧ = ИсходнаяОбластьМСЧ.Имя;
	ИсходнаяОбластьМСЧ.Имя = Неопределено;
	
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	СпециальногоДобавленияСтроки(
		ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти,
		СтруктураГруппы, НомерПоследнейСтроки, ВерхОбластиМногострочнойЧасти, ВысотаСтроки, ИмяОбластиМСЧ);
	
	ЭтаФорма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Если СтрЧислоВхождений(ИмяГруппы, "П000070012") > 0 Тогда
		ДопСимволы = "04_";
	ИначеЕсли СтрЧислоВхождений(ИмяГруппы, "П000010016") > 0 Тогда
		ДопСимволы = "11_";
	Иначе
		ДопСимволы = "01_";
	КонецЕсли;
	
	ИмяТекущейОбласти = ИмяГруппы + ДопСимволы + КолСтрокСтр1;
	
	ЭтаФорма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы[ТекТабличноеПолеИмя];
	
	ЭтаФорма[ИмяГруппы].Добавить();
	
	Если ТекущаяСтраница = "Раздел1_1" Тогда
		СкорректироватьМакетРаздела1_1(ИмяГруппы, ЭтаФорма[ИмяГруппы].Количество());
	ИначеЕсли ТекущаяСтраница = "Раздел2_7" Тогда
		СкорректироватьМакетРаздела2_7(ИмяГруппы, ЭтаФорма[ИмяГруппы].Количество());
	КонецЕсли;
	
	ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	
	ТекущаяСтраница = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = ТабличныйДокумент;

	ТекущаяОбласть = Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(ЭтаФорма, ТекущаяОбласть);
	
	ПараметрыУдаления = Новый Структура;
	ПараметрыУдаления.Вставить("СпециальноеДобавление", СпециальноеДобавление);
	ПараметрыУдаления.Вставить("ИмяКолонкиНомера", ИмяКолонкиНомера);
	ПараметрыУдаления.Вставить("ИмяГруппы", ИмяГруппы);
	ПараметрыУдаления.Вставить("ТекущаяСтраница", ТекущаяСтраница);
	
	Если ИмяГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1
	 ИЛИ ИмяГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2
	 ИЛИ ИмяГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3
	 ИЛИ ИмяГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1
	 ИЛИ ИмяГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2
	 ИЛИ ИмяГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3 Тогда
		УдалитьСоставнуюДополнительнуюСтроку(ПараметрыУдаления);
	Иначе
		УдалитьОбычнуюДополнительнуюСтроку(ПараметрыУдаления);
	КонецЕсли;
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОбычнуюДополнительнуюСтроку(ПараметрыУдаления)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	СпециальноеДобавление = ПараметрыУдаления.СпециальноеДобавление;
	ИмяКолонкиНомера = ПараметрыУдаления.ИмяКолонкиНомера;
	ИмяГруппы = ПараметрыУдаления.ИмяГруппы;
	ТекущаяСтраница = ПараметрыУдаления.ТекущаяСтраница;
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекТабличноеПоле = ТабличныйДокумент;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	
	ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;
	
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		ВысотаСтроки = 1;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
			ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;
		
		Если СпециальноеДобавление Тогда
		Иначе
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
			ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Имя = "";
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		Иначе
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		КонецЕсли;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр - 1];
				
				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					Если НомерГрафы = 1 Тогда
						
						КолонкаТаблицыИмя = "УдалитьСтроку" + ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
						
						ИмяСдвинутойЯчейки = КолонкаТаблицыИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаТаблицыИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
								СтарыйНомер = Число(ТекСтрока[КолонкаТаблицыИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								ТекСтрока[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда	
						
						ИмяСдвинутойЯчейки = КолонкаТаблицыИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаТаблицыИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
								СтарыйНомер = Число(ТекСтрока[КолонкаТаблицыИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								ТекСтрока[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;

		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы, ТекущаяСтраница);
		
	КонецЕсли;
	
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	
	ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСоставнуюДополнительнуюСтроку(ПараметрыУдаления)
	
	Перем ИсходноеКоличествоСтрокМСЧ;
	Перем СтруктураГруппы;
	
	СпециальноеДобавление = ПараметрыУдаления.СпециальноеДобавление;
	ИмяКолонкиНомера      = ПараметрыУдаления.ИмяКолонкиНомера;
	ИмяГруппы             = ПараметрыУдаления.ИмяГруппы;
	ТекущаяСтраница       = ПараметрыУдаления.ТекущаяСтраница;
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокМСЧ);
	
	ТекТабличноеПоле = ТабличныйДокумент;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	
	ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	КоличествоСтрокДоУдаления = СтруктураГруппы.Количество();
	НомерУдаляемойСтроки      = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	ИндексСтрокиТаблицы       = НомерУдаляемойСтроки - 1;
	
	Если КоличествоСтрокДоУдаления > ИсходноеКоличествоСтрокМСЧ Тогда
		
		// Сохранение данных табличного документа в таблице.
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			ИндексСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			Постфикс = "_" + Формат(ИндексСтрокиВТаблице + 1, "ЧГ=0");
			
			НачНомер = 1;
			
			Если ИмяГруппы = "П0000100163" ИЛИ ИмяГруппы = "П0000100164" ИЛИ ИмяГруппы = "П0000100165" Тогда
				НачНомер = 0;
			КонецЕсли;
			
			Для НомерГрафы = НачНомер По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				Если ИмяГруппы = "П0000100163" ИЛИ ИмяГруппы = "П0000100164" ИЛИ ИмяГруппы = "П0000100165" Тогда
					КолонкаТаблицыИмя = ИмяГруппы + НомерГрафы + "1";
				Иначе
					КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				КонецЕсли;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки = КолонкаТаблицыИмя + Постфикс;
					ОбластьЯчейкиМСЧ = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиМСЧ.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейкиМСЧ.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейкиМСЧ.Текст;
					КонецЕсли;
					
					СтрокаТаблицы[КолонкаТаблицыИмя] = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		СтруктураГруппы.Удалить(ИндексСтрокиТаблицы);
		
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(КоличествоСтрокДоУдаления, "ЧГ=0");
		ОбластьЯчейкиУдаляемойСтроки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		ВысотаСтроки = 1;
		НомерВерхЯчейкиОбласти = ОбластьЯчейкиУдаляемойСтроки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейкиУдаляемойСтроки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
			ЭтаФорма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			НайденныеСтроки = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;
		
		Если СпециальноеДобавление Тогда
		Иначе
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
			ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Имя = "";
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		КонецЕсли;
		
		ВывестиЗначенияВМногострочнуюЧасть(ЭтаФорма, СтруктураГруппы, ТекТабличноеПоле, ИмяГруппы);
		
	Иначе
		
		СтруктураГруппы.Удалить(ИндексСтрокиТаблицы);
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы, ТекущаяСтраница);
		
	КонецЕсли;
	
	// Порядковые номера строк, выводимых в табличный документ.
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
		
		НачНомер = 1;
		
		Если ИмяГруппы = "П0000100163" ИЛИ ИмяГруппы = "П0000100164" ИЛИ ИмяГруппы = "П0000100165" Тогда
			НачНомер = 0;
		КонецЕсли; 
		
		Для НомерГрафы = НачНомер По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			Если ИмяГруппы = "П0000100163" ИЛИ ИмяГруппы = "П0000100164" ИЛИ ИмяГруппы = "П0000100165" Тогда
				КолонкаТаблицыИмя = ИмяГруппы + НомерГрафы + "1";
			Иначе
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			КонецЕсли;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				Если ИмяКолонкиНомера <> Неопределено Тогда
					Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
						СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НомТекущейСтроки = Мин(НомерУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = "УдалитьСтроку" + ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	
	ОтрисоватьЗначкиУдаленияСтрок(ТекТабличноеПоле);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
	
	ИмяПервойЯчейкиПервойСтроки = ИмяГруппы + "01_1";
	ОбластьЯчейкиПервойСтроки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
	ВерхОбластиМногострочнойЧасти = ОбластьЯчейкиПервойСтроки.Верх;
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + Формат(ИсходноеКоличествоСтрокГруппы, "ЧГ=0");
	ОбластьЯчейкиПоследнейСтроки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	НизОбластиМногострочнойЧасти = ОбластьЯчейкиПоследнейСтроки.Низ;
	
	ИсходнаяОбластьМСЧ = ТекТабличноеПоле.Область(ВерхОбластиМногострочнойЧасти, , НизОбластиМногострочнойЧасти, );
	ИмяОбластиМСЧ = ИсходнаяОбластьМСЧ.Имя;
	ИсходнаяОбластьМСЧ.Имя = Неопределено;
	
	ПрототипДобавляемойОбласти = ТекТабличноеПоле.ПолучитьОбласть(
		ОбластьЯчейкиПоследнейСтроки.Верх, , ОбластьЯчейкиПоследнейСтроки.Низ, );
	ПомежуточныйТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для НомерНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл
		ПомежуточныйТабличныйДокумент.Вывести(ПрототипДобавляемойОбласти);
		
		НачНомер = 1;
		
		Если ИмяГруппы = "П0000100163" ИЛИ ИмяГруппы = "П0000100164" ИЛИ ИмяГруппы = "П0000100165" Тогда
			НачНомер = 0;
		КонецЕсли; 
		
		Для НомерГрафы = НачНомер По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			Если ИмяГруппы = "П0000100163" ИЛИ ИмяГруппы = "П0000100164" ИЛИ ИмяГруппы = "П0000100165" Тогда
				КолонкаИмя = ИмяГруппы + НомерГрафы + "1";
			Иначе
				КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			КонецЕсли;
			
			Если НомерГрафы = НачНомер Тогда
				
				ИмяОбластиПрототипа = "УдалитьСтроку" + КолонкаИмя + "_" + Формат(ИсходноеКоличествоСтрокГруппы, "ЧГ=0");
				НазначаемоеИмяОбластиДобавленнойСтроки = "УдалитьСтроку" + КолонкаИмя + "_" + Формат(НомерНовойСтроки, "ЧГ=0");
				
				ОбластьДобавленнойСтроки = ПомежуточныйТабличныйДокумент.Области[ИмяОбластиПрототипа];
				ОбластьДобавленнойСтроки.Имя = НазначаемоеИмяОбластиДобавленнойСтроки;
				
				Если ОбластьДобавленнойСтроки.СодержитЗначение = Истина Тогда
					ОбластьДобавленнойСтроки.Очистить();
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
				
				ИмяОбластиПрототипа = КолонкаИмя + "_" + Формат(ИсходноеКоличествоСтрокГруппы, "ЧГ=0");
				НазначаемоеИмяОбластиДобавленнойСтроки = КолонкаИмя + "_" + Формат(НомерНовойСтроки, "ЧГ=0");
				
				ОбластьДобавленнойСтроки = ПомежуточныйТабличныйДокумент.Области[ИмяОбластиПрототипа];
				ОбластьДобавленнойСтроки.Имя = НазначаемоеИмяОбластиДобавленнойСтроки;
				
				Если ОбластьДобавленнойСтроки.СодержитЗначение = Истина Тогда
					ОбластьДобавленнойСтроки.Очистить();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла
		
	КонецЦикла;
	
	ВставляемаяОбласть = ПомежуточныйТабличныйДокумент.Область(1, , ПомежуточныйТабличныйДокумент.ВысотаТаблицы, );
	ПозицияВставки = ТекТабличноеПоле.Область(ОбластьЯчейкиПоследнейСтроки.Верх + 1, , ОбластьЯчейкиПоследнейСтроки.Низ + 1, );
	ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, ПозицияВставки, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	МаксимальноеКоличествоСтрокГруппы = 1;
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ОбластьМСЧ = ТекТабличноеПоле.Область(
		ВерхОбластиМногострочнойЧасти, , ВерхОбластиМногострочнойЧасти + МаксимальноеКоличествоСтрокГруппы - 1, );
	ОбластьМСЧ.Имя = ИмяОбластиМСЧ;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеобходимоеКоличествоДопСтрокНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок) Экспорт
	
	// Получим таблицу значений, содержащую данные дополнительных строк.
	ПромТаблицаДопСтрокРаздела = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
	
	ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
	
	ИсходноеКоличествоСтрокГруппы = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
	
	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
		
		НСтр = ПромТаблицаДопСтрокРаздела.Количество();
		
		Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
			
			ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
			
			ИмяПервойКолонки = ИмяГруппыДопСтрок + "01_";
			ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + НСтр;
			
			ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
			
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			
			РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(
				ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			
			ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
			
			НСтр = НСтр - 1;
			
		КонецЦикла;
		
		Если ВыбТабличноеПоле.Области.Найти("МногострочнаяЧасть") = Неопределено Тогда
			
			ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти - 1, , НомерНижнЯчейкиОбласти - 1).Имя = "МногострочнаяЧасть";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти, СтруктураГруппы, НомерПоследнейСтроки, ВерхОбластиМногострочнойЧасти, ВысотаСтроки, ИмяОбластиМСЧ) Экспорт
	
	КопияИсходнойОбласти = ТекТабличноеПоле.ПолучитьОбласть(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	
	ПромежуточныйТД = Новый ТабличныйДокумент;
	ПромежуточныйТД.Вывести(КопияИсходнойОбласти);
	
	// Переименование областей и очистка значений.
	ПрямоугольныеОбласти = Новый Массив;
	Для Каждого Область Из ПромежуточныйТД.Области Цикл
		Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		ПрямоугольныеОбласти.Добавить(Область);
	КонецЦикла;
	
	Для Каждого Область Из ПрямоугольныеОбласти Цикл
		СоставляющиеИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Область.Имя, "_");
		Если СтруктураГруппы[0].Свойство(СоставляющиеИмени[0])
		 ИЛИ СтрЧислоВхождений(СоставляющиеИмени[0],"УдалитьСтроку") > 0 Тогда
			СоставляющиеИмени[1] = Формат(НомерПоследнейСтроки + 1, "ЧГ=0");
			НовоеИмя = СоставляющиеИмени[0];
			НовоеИмя = НовоеИмя + "_" + СоставляющиеИмени[1];
			Область.Имя = НовоеИмя;
		Иначе
			Область.Имя = Неопределено;
		КонецЕсли;
		Если Область.СодержитЗначение = Истина Тогда
			Область.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	// Вставка результата и дополнение структуры данных раздела.
	ВставляемаяОбласть = ПромежуточныйТД.Область(1, , ПромежуточныйТД.ВысотаТаблицы);
	ПозицияВставки = ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + 1, );
	ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, ПозицияВставки, ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
	
	ОбластьМСЧ = ТекТабличноеПоле.Область(ВерхОбластиМногострочнойЧасти, , ВерхОбластиМногострочнойЧасти + ВысотаСтроки - 1, );
	ОбластьМСЧ.Имя = ИмяОбластиМСЧ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиЗначенияВМногострочнуюЧасть(Форма, СтруктураГруппы, ПолеТабличногоДокумента, ИмяГруппы)
	
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		НачНомер = 1;
		
		Если ИмяГруппы = "П0000100163" ИЛИ ИмяГруппы = "П0000100164" ИЛИ ИмяГруппы = "П0000100165" Тогда
			НачНомер = 0;
		КонецЕсли; 
		
		Для НомерГрафы = НачНомер По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			Если ИмяГруппы = "П0000100163" ИЛИ ИмяГруппы = "П0000100164" ИЛИ ИмяГруппы = "П0000100165" Тогда
				КолонкаТаблицыИмя = ИмяГруппы + НомерГрафы + "1";
			Иначе
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			КонецЕсли;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки            = КолонкаТаблицыИмя + "_" + Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
				ОбластьЯчейкиТаблицы = ПолеТабличногоДокумента.Области[ИмяЯчейки];
				ЗначениеЯчейки       = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт

	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1_1.Очистить();
	СтруктураДанныхРаздел1_2.Очистить();
	СтруктураДанныхРаздел1_3.Очистить();
	СтруктураДанныхРаздел1_31.Очистить();
	СтруктураДанныхРаздел1_4.Очистить();
	СтруктураДанныхРаздел1_41.Очистить();
	СтруктураДанныхРаздел1_42.Очистить();
	СтруктураДанныхРаздел1_43.Очистить();
	СтруктураДанныхРаздел1_5.Очистить();
	СтруктураДанныхРаздел2_6.Очистить();
	СтруктураДанныхРаздел2_7.Очистить();
	СтруктураДанныхРаздел2_8_9.Очистить();
	СтруктураДанныхРаздел2_10.Очистить();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();

	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		ЗначениеКорректировки = ТабличныйДокумент.Области.НомерКорректировки.Значение;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеКорректировки) Тогда
			ТабличныйДокумент.Области.НомерКорректировки.Значение = "000";
			ЗначениеКорректировки = 0;
		КонецЕсли;
		
		НомерКорректировки = ЗначениеКорректировки;
		СтруктураРеквизитовФормы.ВидДокумента = ?(ЗначениеКорректировки = 0, 0, 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		ТабличныйДокумент.Область("НомерКорректировки").Значение = "000";
		
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницы = "Раздел1_1" Тогда
		
		П0000100163.Очистить();
		П0000100164.Очистить();
		П0000100165.Очистить();
		
		П0000100163.Добавить();
		П0000100164.Добавить();
		П0000100165.Добавить();
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяСтраницы, 1);
		
	ИначеЕсли ИмяСтраницы = "Раздел2_7" Тогда
		
		П0000700161.Очистить();
		П0000700162.Очистить();
		П0000700163.Очистить();
		
		П0000700161.Добавить();
		П0000700162.Добавить();
		П0000700163.Добавить();
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяСтраницы, 1);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
		ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
			УдалятьсяВсеДопЭкземпляры = Истина;
		Иначе
			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
		ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(НазванияМногостраничныхРазделовДляУдаления = "")
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(
		ЭтаФорма, НазванияМногостраничныхРазделовДляУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Истина);
	мПараметры.Вставить("Выгрузка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мИнтервалАвтосохранения", СтруктураРеквизитовФормы.мИнтервалАвтосохранения);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура(
		"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
		ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения =  Новый ОписаниеОповещения(
		"ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			
			флЗначенияИдентичны = Ложь;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
				ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	#Если ВебКлиент Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	#Иначе
		РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	#КонецЕсли
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета	= ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны			= ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	ИмяТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьСразуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт

	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено
	   И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
		
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
		
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрокаУровня1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",   "ПечатнаяФормаОтчета2015Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1_1",   "ПечатнаяФормаОтчета2015Кв1_Раздел1_1");
	СоответствиеРазделовМакетам.Вставить("Раздел1_2",   "ПечатнаяФормаОтчета2015Кв1_Раздел1_2");
	СоответствиеРазделовМакетам.Вставить("Раздел1_3",   "ПечатнаяФормаОтчета2015Кв1_Раздел1_3");
	СоответствиеРазделовМакетам.Вставить("Раздел1_31",  "ПечатнаяФормаОтчета2015Кв1_Раздел1_31");
	СоответствиеРазделовМакетам.Вставить("Раздел1_4",   "ПечатнаяФормаОтчета2015Кв1_Раздел1_4");
	СоответствиеРазделовМакетам.Вставить("Раздел1_41",  "ПечатнаяФормаОтчета2015Кв1_Раздел1_41");
	СоответствиеРазделовМакетам.Вставить("Раздел1_42",  "ПечатнаяФормаОтчета2015Кв1_Раздел1_42");
	СоответствиеРазделовМакетам.Вставить("Раздел1_43",  "ПечатнаяФормаОтчета2015Кв1_Раздел1_43");
	СоответствиеРазделовМакетам.Вставить("Раздел1_5",   "ПечатнаяФормаОтчета2015Кв1_Раздел1_5");
	СоответствиеРазделовМакетам.Вставить("Раздел2_6",   "ПечатнаяФормаОтчета2015Кв1_Раздел2_6");
	СоответствиеРазделовМакетам.Вставить("Раздел2_7",   "ПечатнаяФормаОтчета2015Кв1_Раздел2_7");
	СоответствиеРазделовМакетам.Вставить("Раздел2_8_9", "ПечатнаяФормаОтчета2015Кв1_Раздел2_8_9");
	СоответствиеРазделовМакетам.Вставить("Раздел2_10",  "ПечатнаяФормаОтчета2015Кв1_Раздел2_10");
	
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетПечатнойФормы = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ПечатнаяФормаРаздела);
	
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу  = 5;
	МакетПечатнойФормы.ПолеСлева  = 5;
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		Если Парам1.ИмяСтраницы = "Раздел1_1" Тогда
			
			Для НомГруппы = 3 По 5 Цикл
				
				ИдГруппы = "П000010016" + НомГруппы;
				
				КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
				
				КолвоСтрокВПечатнойФорме = 1;
				
				Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
					
					НомерВерхЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + "01_" + КолвоСтрокВПечатнойФорме).Верх;
					НомерНижнЯчейкиОбласти = НомерВерхЯчейкиОбласти;
					
					ВставляемаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
					
					КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
					
					Для Ном = 1 По КолвоДопСтрок Цикл
						
						МакетПечатнойФормы.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
						
					КонецЦикла;
					
					Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(
						НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
						Если СтрЧислоВхождений(Область.Имя, ИдГруппы) = 0 Тогда
							Продолжить;
						КонецЕсли;
						НайденнаяОбласть = МакетПечатнойФормы.Области.Найти(Область.Имя);
						Если НЕ НайденнаяОбласть = Неопределено Тогда 
							НайденнаяОбласть.Имя = Лев(НайденнаяОбласть.Имя, Найти(НайденнаяОбласть.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВТаблДок, "ЧЦ=3");
						КонецЕсли;
					КонецЦикла;
					
					Для Ном = 0 По КолвоДопСтрок - 1 Цикл
						
						Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(
							НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
							НайденнаяОбласть = МакетПечатнойФормы.Область(
								НомерВерхЯчейкиОбласти + Ном, Область.Лево, НомерВерхЯчейкиОбласти + Ном, Область.Право);
							Если НЕ НайденнаяОбласть = Неопределено Тогда 
								НайденнаяОбласть.Имя = Лев(Область.Имя, Найти(Область.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВПечатнойФорме + Ном, "ЧЦ=3");
							КонецЕсли;
						КонецЦикла;
						
					КонецЦикла;
					
					ПерваяЯчейкаМСЧ = МакетПечатнойФормы.Области[ИдГруппы + "01_1"];
					ПоследняяЯчейкаМСЧ = МакетПечатнойФормы.Области[ИдГруппы + "01_" + Формат(КолвоСтрокВТаблДок, "ЧГ=0")];
					
					ОбластьГрафы2 = МакетПечатнойФормы.Область(ПерваяЯчейкаМСЧ.Верх, 2, ПоследняяЯчейкаМСЧ.Низ, 2);
					ОбластьГрафы2.Объединить();
					
					ОбластьГрафы3 = МакетПечатнойФормы.Область(ПерваяЯчейкаМСЧ.Верх, 3, ПоследняяЯчейкаМСЧ.Низ, 3);
					ОбластьГрафы3.Объединить();
					Если ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_1 Тогда
						ИмяОбластиПоказателя = "П000010003301";
					ИначеЕсли ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_2 Тогда
						ИмяОбластиПоказателя = "П000010003401";
					ИначеЕсли ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел11_3 Тогда
						ИмяОбластиПоказателя = "П000010003501";
					КонецЕсли;
					ОбластьГрафы3.Имя = ИмяОбластиПоказателя;
					
					ОбластьГрафы7 = МакетПечатнойФормы.Область(ПерваяЯчейкаМСЧ.Верх, 7, ПоследняяЯчейкаМСЧ.Низ, 7);
					ОбластьГрафы7.Объединить();
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел2_7" Тогда
			
			Для НомГруппы = 1 По 3 Цикл
				
				ИдГруппы = "П000070016" + НомГруппы;
				
				КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
				
				КолвоСтрокВПечатнойФорме = 1;
				
				Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
					
					НомерВерхЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + "01_" + КолвоСтрокВПечатнойФорме).Верх;
					НомерНижнЯчейкиОбласти = НомерВерхЯчейкиОбласти;
					
					ВставляемаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
					
					КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
					
					Для Ном = 1 По КолвоДопСтрок Цикл
						
						МакетПечатнойФормы.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
						
					КонецЦикла;
					
					Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(
						НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
						Если СтрЧислоВхождений(Область.Имя, ИдГруппы) = 0 Тогда
							Продолжить;
						КонецЕсли;
						НайденнаяОбласть = МакетПечатнойФормы.Области.Найти(Область.Имя);
						Если НЕ НайденнаяОбласть = Неопределено Тогда 
							НайденнаяОбласть.Имя = Лев(
								НайденнаяОбласть.Имя, Найти(НайденнаяОбласть.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВТаблДок, "ЧЦ=3");
						КонецЕсли;
					КонецЦикла;
					
					Для Ном = 0 По КолвоДопСтрок - 1 Цикл
						
						Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(
							НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
							НайденнаяОбласть = МакетПечатнойФормы.Область(
								НомерВерхЯчейкиОбласти + Ном, Область.Лево, НомерВерхЯчейкиОбласти + Ном, Область.Право);
							Если НЕ НайденнаяОбласть = Неопределено Тогда 
								НайденнаяОбласть.Имя = Лев(Область.Имя, Найти(Область.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВПечатнойФорме + Ном, "ЧЦ=3");
							КонецЕсли;
						КонецЦикла;
						
					КонецЦикла;
					
					Если ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_1 Тогда
						
						ИмяПоследнейЯчейкиМСЧ = ИдГруппы + "01_" + СтрокаЧГ0(ЭтаФорма[ИдГруппы].Количество());
						ПоследняяЯчейкаМСЧ = МакетПечатнойФормы.Области[ИмяПоследнейЯчейкиМСЧ];
						
						ВерхСтроки5 = 23;
						
						ОбъединяемаяОбласть = МакетПечатнойФормы.Область(ВерхСтроки5, 2, ПоследняяЯчейкаМСЧ.Низ, 3);
						ОбъединяемаяОбласть.Объединить();
						
						ОбъединяемаяОбласть = МакетПечатнойФормы.Область(ВерхСтроки5, 4, ПоследняяЯчейкаМСЧ.Низ, 4);
						ОбъединяемаяОбласть.Объединить();
						
						ОбъединяемаяОбласть = МакетПечатнойФормы.Область(ВерхСтроки5, 5, ПоследняяЯчейкаМСЧ.Низ, 5);
						ОбъединяемаяОбласть.Объединить();
						ОбъединяемаяОбласть.Имя = "П000070005003";
						
					ИначеЕсли ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_2
						  ИЛИ ИдГруппы = СтруктураРеквизитовФормы.ИдМСЧ_Раздел27_3 Тогда
						
						ВерхСтроки6 = МакетПечатнойФормы.Области["П000070016204_1"].Верх;
						НизСтроки6  = МакетПечатнойФормы.Области["П000070017003"].Низ;
						
						ОбъединяемаяОбласть = МакетПечатнойФормы.Область(ВерхСтроки6, 2, НизСтроки6, 3);
						ОбъединяемаяОбласть.Объединить();
						
						ОбъединяемаяОбласть = МакетПечатнойФормы.Область(ВерхСтроки6, 4, НизСтроки6, 4);
						ОбъединяемаяОбласть.Объединить();
						
						ОбъединяемаяОбласть = МакетПечатнойФормы.Область(ВерхСтроки6, 5, НизСтроки6, 5);
						ОбъединяемаяОбласть.Объединить();
						ОбъединяемаяОбласть.Имя = "П000070006003";
						
					Иначе
						Возврат;
					КонецЕсли;
					
					ВерхСтроки12 = 21;
					НизСтроки12  = МакетПечатнойФормы.Области["П000070017003"].Низ - 1;
					
					ОбъединяемаяОбласть = МакетПечатнойФормы.Область(ВерхСтроки12, 10, НизСтроки12, 10);
					ОбъединяемаяОбласть.Объединить();
					
					ОбъединяемаяОбласть = МакетПечатнойФормы.Область(ВерхСтроки12, 11, НизСтроки12, 11);
					ОбъединяемаяОбласть.Объединить();
					ОбъединяемаяОбласть.Имя = "П000070016003";
					
					// Корректировка верхней линии строк многострочной части.
					Для НомерСтроки = 1 По ЭтаФорма[ИдГруппы].Количество() Цикл
						
						ОбластьПоказателя = МакетПечатнойФормы.Области[ИдГруппы + "01_" + СтрокаЧГ0(НомерСтроки)];
						
						Если НомерСтроки = 1 Тогда
							ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
						Иначе
							ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
						КонецЕсли;
						
						ОбластьПоказателя = МакетПечатнойФормы.Области[ИдГруппы + "04_" + СтрокаЧГ0(НомерСтроки)];
						
						Если НомерСтроки = 1 Тогда
							ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
						Иначе
							ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
						КонецЕсли;
						
						ОбластьПоказателя = МакетПечатнойФормы.Области[ИдГруппы + "05_" + СтрокаЧГ0(НомерСтроки)];
						
						Если НомерСтроки = 1 Тогда
							ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
						Иначе
							ОбластьПоказателя.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
			
			ОбластьМнгЧасти              = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть");
			ВысотаОбластиМнгЧасти        = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть").ВысотаТаблицы;
			ИмяОбластиПоследнейДопСтроки = ОбластьМнгЧасти.ПолучитьОбласть(ВысотаОбластиМнгЧасти, , ВысотаОбластиМнгЧасти).Области[0].Имя;
			
			КолвоСтрокВПечатнойФорме = Число(Сред(ИмяОбластиПоследнейДопСтроки, Найти(ИмяОбластиПоследнейДопСтроки, "_") + 1));
			
			Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
				
				НомерВерхЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + "01_" + КолвоСтрокВПечатнойФорме).Верх;
				НомерНижнЯчейкиОбласти = МакетПечатнойФормы.Область(
					ИдГруппы + Формат(мСтруктураКолвоКолонокРазделов[ИдГруппы], "ЧЦ=2; ЧВН=") + "_" + КолвоСтрокВПечатнойФорме).Низ;
				
				ВставляемаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
				
				КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
				
				Для Ном = 1 По КолвоДопСтрок Цикл
					
					МакетПечатнойФормы.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
					
				КонецЦикла;
				
				Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(
					НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
					НайденнаяОбласть = МакетПечатнойФормы.Области.Найти(Область.Имя);
					Если НЕ НайденнаяОбласть = Неопределено Тогда 
						НайденнаяОбласть.Имя = Лев(НайденнаяОбласть.Имя, Найти(НайденнаяОбласть.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВТаблДок, "ЧЦ=3");
					КонецЕсли;
				КонецЦикла;
				
				Для Ном = 0 По КолвоДопСтрок - 1 Цикл
					
					Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(
						НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
						НайденнаяОбласть = МакетПечатнойФормы.Область(
							НомерВерхЯчейкиОбласти + Ном, Область.Лево, НомерВерхЯчейкиОбласти + Ном, Область.Право);
						Если НЕ НайденнаяОбласть = Неопределено Тогда 
							НайденнаяОбласть.Имя = Лев(Область.Имя, Найти(Область.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВПечатнойФорме + Ном, "ЧЦ=3");
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
		ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполненРаздел1_2(Форма)
	
	ПрефиксПоказателейРаздела = "П" + "00002";
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" Тогда
		
		Для Каждого Область Из Форма.ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
				Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Для Каждого Показатель Из Форма.СтруктураДанныхРаздел1_2 Цикл
			ЭтоПоказатель = (Найти(Показатель.Ключ, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ЗначениеЗаполнено(Показатель.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполненРаздел1_31(Форма)
	
	ПрефиксПоказателейРаздела = "П" + "00031";
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_31" Тогда
		
		Для Каждого Область Из Форма.ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
				Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Для Каждого Показатель Из Форма.СтруктураДанныхРаздел1_31 Цикл
			ЭтоПоказатель = (Найти(Показатель.Ключ, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ЗначениеЗаполнено(Показатель.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполненРаздел1_4(Форма)
	
	ПрефиксПоказателейРаздела = "П" + "00004";
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_4" Тогда
		
		Для Каждого Область Из Форма.ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
				Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Для Каждого Показатель Из Форма.СтруктураДанныхРаздел1_4 Цикл
			ЭтоПоказатель = (Найти(Показатель.Ключ, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ЗначениеЗаполнено(Показатель.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполненРаздел1_41(Форма)
	
	ПрефиксПоказателейРаздела = "П" + "00041";
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_41" Тогда
		
		Для Каждого Область Из Форма.ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
				Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Для Каждого Показатель Из Форма.СтруктураДанныхРаздел1_41 Цикл
			ЭтоПоказатель = (Найти(Показатель.Ключ, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ЗначениеЗаполнено(Показатель.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполненРаздел1_42(Форма)
	
	ПрефиксПоказателейРаздела = "П" + "00042";
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_42" Тогда
		
		Для Каждого Область Из Форма.ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
				Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Для Каждого Показатель Из Форма.СтруктураДанныхРаздел1_42 Цикл
			ЭтоПоказатель = (Найти(Показатель.Ключ, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ЗначениеЗаполнено(Показатель.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполненРаздел1_43(Форма)
	
	ПрефиксПоказателейРаздела = "П" + "00043";
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_43" Тогда
		
		Для Каждого Область Из Форма.ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
				Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Для Каждого Показатель Из Форма.СтруктураДанныхРаздел1_43 Цикл
			ЭтоПоказатель = (Найти(Показатель.Ключ, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ЗначениеЗаполнено(Показатель.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполненРаздел1_5(Форма)
	
	ПрефиксПоказателейРаздела = "П" + "00005";
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_5" Тогда
		
		Для Каждого Область Из Форма.ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				ЭтоПоказатель = (Найти(Область.Имя, ПрефиксПоказателейРаздела) = 1);
				Если ЭтоПоказатель И ПоказательЗаполнен(Область) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Для Каждого Показатель Из Форма.СтруктураДанныхРаздел1_5 Цикл
			ЭтоПоказатель = (Найти(Показатель.Ключ, ПрефиксПоказателейРаздела) = 1);
			Если ЭтоПоказатель И ЗначениеЗаполнено(Показатель.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполненРаздел2_8_9(Форма)

	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2_8_9" Тогда
		
		Для Каждого Область Из Форма.ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Если ПоказательЗаполнен(Область) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Для Каждого Показатель Из Форма.СтруктураДанныхРаздел2_8_9 Цикл
			Если ЗначениеЗаполнено(Показатель.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательЗаполнен(ОбластьПоказателя)
	
	Если ОбластьПоказателя.СодержитЗначение Тогда
		ЗначениеОбласти = ОбластьПоказателя.Значение;
		ТипЗначенияОбласти = ТипЗнч(ЗначениеОбласти);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			Возврат (ЗначениеОбласти <> 0);
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			Возврат (НЕ ПустаяСтрока(ЗначениеОбласти));
		Иначе
			Возврат ЗначениеЗаполнено(ЗначениеОбласти);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивОргФССКод         = Новый Массив(10);
	МассивКодПодчиненности  = Новый Массив(5);
	МассивНомСтр            = Новый Массив(3);
	МассивДатаПодписи       = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ОргФССКод");
	
	Если НЕ Область = Неопределено Тогда
		
		ОргФССКод = Область.Значение;
		
		Для Ном = 1 По СтрДлина(ОргФССКод) Цикл
			
			МассивОргФССКод[Ном - 1] = Сред(ОргФССКод, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КодПодчиненности");
	
	Если НЕ Область = Неопределено Тогда
		
		КодПодчиненности = Область.Значение;
		
		Для Ном = 1 По СтрДлина(КодПодчиненности) Цикл
			
			МассивКодПодчиненности[Ном - 1] = Сред(КодПодчиненности, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;

	Область = ИсходныйМакет.Области.Найти("НомСтр");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивНомСтр[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ОргФССКод",         МассивОргФССКод);
	ОбщиеРеквизитыРазделов.Вставить("КодПодчиненности",  МассивКодПодчиненности);
	
	ОбщиеРеквизитыРазделов.Вставить("НомСтр",      МассивНомСтр);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции
	
&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов, СтрокаУровня1)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];

	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ОргФССКод") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "КодПодчиненности") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "НомСтр") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0 Тогда
				
					Продолжить;
				
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ИНН") > 0 Тогда
					
					СтрИНН = Область.Значение;
				 	Если СтрДлина(СтрИНН) = 10 Тогда
						СтрИНН = "00" + СтрИНН;
					КонецЕсли;

					Для Ном = 1 По СтрДлина(СтрИНН) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрИНН, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "Период") > 0 Тогда
					
					СтрПериод = Область.Значение;
					
					Для Ном = 1 По СтрДлина(СтрПериод) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + "_" + Ном].Значение = Сред(СтрПериод, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомДопРасчета") > 0 Тогда
					
					СтрНомДопРасчета = Область.Значение;
				 	Если ЗначениеЗаполнено(СтрНомДопРасчета) Тогда
						СтрНомДопРасчета = Прав("00" + СтрНомДопРасчета, 2);
					КонецЕсли;
					
					Для Ном = 1 По СтрДлина(СтрНомДопРасчета) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + "_" + Ном].Значение = Сред(СтрНомДопРасчета, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "ШифрСтрах1Часть") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ШифрСтрах2Часть") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ШифрСтрах3Часть") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ЧислРаботников") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ЧислЖенщин") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ЧислИнвалидов") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ЧислВред") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + "_" + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомерКорректировки") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ОтчетГод") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "КПП") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ОГРН") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ТелОрганизации") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "СПриложением") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел1_31" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ИтоговыеПоказатели") > 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел1_1" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ОКВЭД") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел2_6" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ОКВЭД") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли Область.Имя = "П000060000100" ИЛИ Область.Имя = "П000060000200" Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Постфикс = 1;
		Разделитель = Истина;
		Если Реквизит.Ключ = "ОргФССКод" Тогда
			НаименованиеОбласти = "ОргФССКод";
		ИначеЕсли Реквизит.Ключ = "КодПодчиненности" Тогда
			НаименованиеОбласти = "КодПодчиненности";
		ИначеЕсли Реквизит.Ключ = "НомСтр" Тогда
			НаименованиеОбласти = "НомСтр";
			Разделитель = Ложь;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписи" Тогда
			НаименованиеОбласти = "ДатаПодписи";
			Разделитель = Ложь;
		Иначе
			НаименованиеОбласти = Реквизит.Ключ;
		КонецЕсли;
		
		Если НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + ?(Разделитель, "_", "") + Постфикс) = Неопределено Тогда
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				МакетПечатнойФормы.Области[НаименованиеОбласти + ?(Разделитель, "_", "") + Ном].Значение = Реквизит.Значение[Ном - 1];
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		МакетПечатнойФормы.Области["ДатаПодписиПолная"].Значение = Формат(ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'""");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Заголовок = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если Найти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""2"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.5.0") < 0 Тогда
	Иначе
		
		Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
			РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
		КонецЕсли;
	КонецЕсли;
	Если НЕ УниверсальнаяВыгрузкаНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище"
								+ ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище"
							+ ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;

	// Восстанавливаем документ, подтверждающий полномочия представителя.
	СохрСтруктура.Свойство("ДокументУпПред", мСтруктураДокУпПред);
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("НомерСтрахователя", СокрЛП(Титульный.ОргФССКод));
	ПараметрыВыгрузки.Вставить("КодПодчиненности", СокрЛП(Титульный.КодПодчиненности));
	ПараметрыВыгрузки.Вставить("РасчПериод", СокрЛП(Титульный.ОтчетГод));
	
	ПараметрыВыгрузки.Вставить("ОтчПериод", СокрЛП(Титульный.Период));
	Если ПустаяСтрока(ПараметрыВыгрузки.ОтчПериод) Тогда
		ПараметрыВыгрузки.ОтчПериод = Формат(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ДФ=ММ");
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("НомерКорректировки", СтрокаВЧисло(Титульный.НомерКорректировки));
	ПараметрыВыгрузки.Вставить("НомДопРасчета", СтрокаВЧисло(Титульный.НомДопРасчета));
	ПараметрыВыгрузки.Вставить("ПрекращениеДеятельности", ?(ПустаяСтрока(Титульный.ПрекращениеДеятельности), 0, 1));
	ПараметрыВыгрузки.Вставить("ОргНазв", СокрЛП(Титульный.ОргНазв));
	ПараметрыВыгрузки.Вставить("ИНН", СокрЛП(Титульный.ИНН));
	ПараметрыВыгрузки.Вставить("КПП", СокрЛП(СтрЗаменить(Титульный.КПП, "-", "")));
	ПараметрыВыгрузки.Вставить("ОГРН", СокрЛП(Титульный.ОГРН));
	ПараметрыВыгрузки.Вставить("Телефон", СокрЛП(Титульный.ТелОрганизации));
	
	АдресРегистрации = СокрЛП(Титульный.Адрес1) + "," +
	                   СокрЛП(Титульный.Адрес2) + ?(СтрЧислоВхождений(Титульный.Адрес2, ",") > 0, ",", ",,") +
	                   СокрЛП(Титульный.Адрес4) + ?(СтрЧислоВхождений(Титульный.Адрес4, ",") > 0, ",", ",,") +
	                   СокрЛП(Титульный.Адрес6) + "," +
	                   СокрЛП(Титульный.Адрес7) + "," +
	                   СокрЛП(Титульный.Адрес8) + "," +
	                   СокрЛП(Титульный.Адрес9);
	
	ПараметрыВыгрузки.Вставить("АдресРегистрации", АдресРегистрации);
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), "АдресЭлектроннойПочтыОрганизации");
	ПараметрыВыгрузки.Вставить("ЭлектроннаяПочта", СведенияОбОрганизации.АдресЭлектроннойПочтыОрганизации);
	
	ПараметрыВыгрузки.Вставить("ШифрСтрах1Часть", СокрЛП(Титульный.ШифрСтрах1Часть));
	ПараметрыВыгрузки.Вставить("ШифрСтрах2Часть", СокрЛП(Титульный.ШифрСтрах2Часть));
	ПараметрыВыгрузки.Вставить("ШифрСтрах3Часть", СокрЛП(Титульный.ШифрСтрах3Часть));
	
	ПараметрыВыгрузки.Вставить("ЧислРаботников", СтрокаВЧисло(Титульный.ЧислРаботников));
	ПараметрыВыгрузки.Вставить("ЧислЖенщин", СтрокаВЧисло(Титульный.ЧислЖенщин));
	ПараметрыВыгрузки.Вставить("ЧислИнвалидов", СтрокаВЧисло(Титульный.ЧислИнвалидов));
	ПараметрыВыгрузки.Вставить("ЧислВред", СтрокаВЧисло(Титульный.ЧислВред));
		
	ПараметрыВыгрузки.Вставить("ПризнакПодписанта", Титульный.ПрПодп);
	ПараметрыВыгрузки.Вставить("ОргДиректор", СокрЛП(Титульный.ОргПодписантФамилия));
	
	ПараметрыВыгрузки.Вставить("ДатаПредставления", ТекущаяДатаСеанса());
	ПараметрыВыгрузки.Вставить("ДокументПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки));
	
	ПараметрыВыгрузки.Вставить("КодФонда", Лев(Титульный.КодПодчиненности, 4)); // используется для контроля заполнения значения
	
	ПараметрыВыгрузки.Вставить("ОКВЭДРаздел1", СтруктураДанныхРаздел1_1.ОКВЭД);
	ПараметрыВыгрузки.Вставить("ОКВЭДРаздел2", СтруктураДанныхРаздел2_6.ОКВЭД);
	
	// Подсчет итоговых сумм по месяцам в строке 16 таблицы 1.
	Табл1Стр16Месяц1 = СуммаПоказателейМСЧ(мДанныеОтчета.ПолеТабличногоДокументаРаздел1_1, "П000010016301");
	Табл1Стр16Месяц2 = СуммаПоказателейМСЧ(мДанныеОтчета.ПолеТабличногоДокументаРаздел1_1, "П000010016401");
	Табл1Стр16Месяц3 = СуммаПоказателейМСЧ(мДанныеОтчета.ПолеТабличногоДокументаРаздел1_1, "П000010016501");
	
	ПараметрыВыгрузки.Вставить("Табл1Стр16Месяц1", Табл1Стр16Месяц1);
	ПараметрыВыгрузки.Вставить("Табл1Стр16Месяц2", Табл1Стр16Месяц2);
	ПараметрыВыгрузки.Вставить("Табл1Стр16Месяц3", Табл1Стр16Месяц3);
	
	// Значения служебных реквизитов "Частичное финансирование из бюджета"
	// и "Установлена льгота 60% (п. 2 ст. 2 Федерального закона от 22.12.2005 № 179 ФЗ)"
	// (таблица 6).
	Льгота60Процентов = ?(ЗначениеЗаполнено(СтруктураДанныхРаздел2_6.П000060000200), 1, 0);
	ПараметрыВыгрузки.Вставить("Льгота60Процентов", Льгота60Процентов);
	ЧастичноеФинансированиеИзБюдж = ?(ЗначениеЗаполнено(СтруктураДанныхРаздел2_6.П000060000100), 1, 0);
	ПараметрыВыгрузки.Вставить("ЧастичноеФинансированиеИзБюдж", ЧастичноеФинансированиеИзБюдж);
	
	// Подсчет итоговых сумм по месяцам в строке 12 таблицы 7.
	Табл7Стр16Месяц1 = СуммаПоказателейМСЧ(мДанныеОтчета.ПолеТабличногоДокументаРаздел2_7, "П000070016101");
	Табл7Стр16Месяц2 = СуммаПоказателейМСЧ(мДанныеОтчета.ПолеТабличногоДокументаРаздел2_7, "П000070016201");
	Табл7Стр16Месяц3 = СуммаПоказателейМСЧ(мДанныеОтчета.ПолеТабличногоДокументаРаздел2_7, "П000070016301");
	
	ПараметрыВыгрузки.Вставить("Табл7Стр16Месяц1", Табл7Стр16Месяц1);
	ПараметрыВыгрузки.Вставить("Табл7Стр16Месяц2", Табл7Стр16Месяц2);
	ПараметрыВыгрузки.Вставить("Табл7Стр16Месяц3", Табл7Стр16Месяц3);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Процедура ПроверитьСведенияПП(ДанныеПП, СтатусПроверки)
	
	ДанныеМСЧ = ДанныеПП.ДанныеМСЧ;
	ИмяРаздела = ДанныеПП.ИмяРаздела;
	ОписаниеРаздела = ДанныеПП.ОписаниеРаздела;
	ИмяПоказателяНомераПП = ДанныеПП.ИмяПоказателяНомераПП;
	ИмяПоказателяДатыПП = ДанныеПП.ИмяПоказателяДатыПП;
	ИмяПоказателяСуммыПП = ДанныеПП.ИмяПоказателяСуммыПП;
	
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеМСЧ, ИмяПоказателяНомераПП + "_" + Формат(НомСтр, "ЧГ=0")) Цикл
		Посфикс = "_" + Формат(НомСтр, "ЧГ=0");
		
		НомерПП = ДанныеМСЧ[ИмяПоказателяНомераПП + Посфикс];
		ДатаПП  = ДанныеМСЧ[ИмяПоказателяДатыПП + Посфикс];
		СуммаПП = ДанныеМСЧ[ИмяПоказателяСуммыПП + Посфикс];
		
		Если ЗначениеЗаполнено(НомерПП) ИЛИ ЗначениеЗаполнено(ДатаПП) ИЛИ ЗначениеЗаполнено(СуммаПП) Тогда
			Если НЕ (ЗначениеЗаполнено(НомерПП) И ЗначениеЗаполнено(ДатаПП) И ЗначениеЗаполнено(СуммаПП)) Тогда
				ТекстСообщенияОбОшибке = НСтр("ru='Не полностью заполнены сведения о платежном поручении " + ОписаниеРаздела + "!'");
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					ТекстСообщенияОбОшибке, ИмяРаздела, ИмяПоказателяДатыПП + Посфикс);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки)
	
	КодСтрахователя = ПараметрыВыгрузки.НомерСтрахователя;
	РасчетныйГод    = ПараметрыВыгрузки.РасчПериод;
	ОтчетныйКвартал = ПараметрыВыгрузки.ОтчПериод;
	
	Возврат КодСтрахователя + "_" + РасчетныйГод + "_" + ОтчетныйКвартал + ".xml";
	
КонецФункции

&НаСервере
Функция СтрокаВЧисло(Знач Стр)
	
	Стр = СокрЛП(Стр);
	Возврат ?(ЗначениеЗаполнено(Стр) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Стр, , Ложь), Число(Стр), 0);
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузкиXML07_2015");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		НомСтр = ВысотаТаблицы - НомерСтроки + 2;
		Если Макет.Область(НомерСтроки, 0, НомерСтроки, 0).Видимость = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), НомерСтроки);
			Сообщение.Сообщить();
			
		КонецЕсли;
	КонецЦикла;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ВыгрузкаВозможна(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	// Проверка показателей титульного листа.
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НомерСтрахователя) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			НСтр("ru='Не задан номер страхователя!'"),
			"Титульный", "ОргФССКод");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодПодчиненности) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			НСтр("ru='Не задан код подчиненности!'"),
			"Титульный", "КодПодчиненности");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодПодчиненности) <> 5 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			НСтр("ru='Неверно задан код подчиненности (должен состоять из 5 цифр и заканчиваться на 1, 2 или 3)!'"),
			"Титульный", "КодПодчиненности");
		СтатусПроверки = Ложь;
	Иначе
		ПоследнийСимвол = Прав(ПараметрыВыгрузки.КодПодчиненности, 1);
		Если НЕ (ПоследнийСимвол = "1" ИЛИ ПоследнийСимвол = "2" ИЛИ ПоследнийСимвол = "3") Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				НСтр("ru='Код подчиненности должен заканчиваться на цифру 1, 2 или 3!'"),
				"Титульный", "КодПодчиненности");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИНН)
	 ИЛИ ПараметрыВыгрузки.ИНН = "000000000000" Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			НСтр("ru='Не задан ИНН организации!'"),
			"Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
		
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) И СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
		НСтр("ru='Неверно задан КПП организации!'"),
		"Титульный", "КПП");
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ОКВЭДРаздел1)
		И (ПараметрыВыгрузки.ОКВЭДРаздел1 <> ПараметрыВыгрузки.ОКВЭДРаздел2) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			НСтр("ru='Различаются значения кодов по ОКВЭД раздела I и раздела II!'"),
			"Раздел1_1", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ВозможныеЗначенияШифра1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"071,051,081,091,101,121,131,141,151,161,171,181,191");
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ШифрСтрах1Часть) Тогда
		Если ВозможныеЗначенияШифра1.Найти(ПараметрыВыгрузки.ШифрСтрах1Часть) = Неопределено Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				НСтр("ru='Неверно задана первая часть шифра страхователя!'"),
				"Титульный", "ШифрСтрах1Часть");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			НСтр("ru='Не задано значение первой части шифра страхователя!'"),
			"Титульный", "ШифрСтрах1Часть");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ВозможныеЗначенияШифра2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("00,01,02,03");
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ШифрСтрах2Часть) Тогда
		Если ВозможныеЗначенияШифра2.Найти(ПараметрыВыгрузки.ШифрСтрах2Часть) = Неопределено Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				НСтр("ru='Неверно задана вторая часть шифра страхователя!'"),
				"Титульный", "ШифрСтрах2Часть");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВозможныеЗначенияШифра3 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("00,01");
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ШифрСтрах3Часть) Тогда
		Если ВозможныеЗначенияШифра3.Найти(ПараметрыВыгрузки.ШифрСтрах3Часть) = Неопределено Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				НСтр("ru='Неверно задана третья часть шифра страхователя!'"),
				"Титульный", "ШифрСтрах3Часть");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.НомерКорректировки <> 0 Тогда
		Если ПараметрыВыгрузки.НомДопРасчета <> 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				НСтр("ru='При номере корректировки, отличном от 000 вторая часть кода ""Отчетный период"" не должна заполняться!'"),
				"Титульный", "НомДопРасчета");
			СтатусПроверки = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОргДиректор) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			НСтр("ru='На титульном листе не заданы Ф.И.О. руководителя организации, индивидуального предпринимателя, физического лица, представителя плательщика страховых взносов (страхователя)!'"),
			"Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Многострочные части таблицы 1.
	ДанныеРаздела1_1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_1;
	
	ДанныеПП = Новый Структура;
	ДанныеПП.Вставить("ДанныеМСЧ", ДанныеРаздела1_1);
	ДанныеПП.Вставить("ИмяРаздела", "Раздел1_1");
	ДанныеПП.Вставить("ОписаниеРаздела", "в разделе I (табл.1)");
	
	ДанныеПП.Вставить("ИмяПоказателяНомераПП", "П000010016321");
	ДанныеПП.Вставить("ИмяПоказателяДатыПП",   "П000010016311");
	ДанныеПП.Вставить("ИмяПоказателяСуммыПП",  "П000010016301");
	
	ПроверитьСведенияПП(ДанныеПП, СтатусПроверки);
	
	ДанныеПП.Вставить("ИмяПоказателяНомераПП", "П000010016421");
	ДанныеПП.Вставить("ИмяПоказателяДатыПП",   "П000010016411");
	ДанныеПП.Вставить("ИмяПоказателяСуммыПП",  "П000010016401");
	
	ПроверитьСведенияПП(ДанныеПП, СтатусПроверки);
	
	ДанныеПП.Вставить("ИмяПоказателяНомераПП", "П000010016521");
	ДанныеПП.Вставить("ИмяПоказателяДатыПП",   "П000010016511");
	ДанныеПП.Вставить("ИмяПоказателяСуммыПП",  "П000010016501");
	
	ПроверитьСведенияПП(ДанныеПП, СтатусПроверки);
	
	// Таблица 3.1.
	ДанныеРаздела1_31 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_31;
	НомСтроки = 1;
	
	ФИОСотрудника = Неопределено;
	Гражданство	  = Неопределено;
	
	Пока ДанныеРаздела1_31.Свойство("П000310001002_" + Формат(НомСтроки, "ЧГ="), ФИОСотрудника) Цикл
		
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела1_31.Свойство("П000310001005_" + НомерСтроки, Гражданство);
						
		Если ЗначениеЗаполнено(ФИОСотрудника)
		 ИЛИ ЗначениеЗаполнено(Гражданство) Тогда
			СтрокаЗаполнена = Истина;
		КонецЕсли;
		
		Если СтрокаЗаполнена Тогда
			
			ФИО = РегламентированнаяОтчетностьКлиентСервер.РазложитьФИО(ФИОСотрудника);
			
			Если НЕ ЗначениеЗаполнено(ФИО.Фамилия) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					НСтр("ru='В таблице 3.1, в строке " + НомерСтроки + " не указана фамилия сотрудника!'"),
					"Раздел1_31", "П000310001002_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ФИО.Имя) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					НСтр("ru='В таблице 3.1, в строке " + НомерСтроки + " не указано имя сотрудника!'"),
					"Раздел1_31", "П000310001002_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Гражданство) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					НСтр("ru='В таблице 3.1, строке " + НомерСтроки + " не указано гражданство сотрудника!'"),
					"Раздел1_31", "П000310001005_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		НомСтроки = НомСтроки +1;
		
	КонецЦикла;
	
	// Таблица 4.3.
	ДанныеРаздела1_43 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_43;
	НомСтроки = 1;
	
	НомерПатента		 = Неопределено;
	ВидПредпДеятельности = Неопределено;
	СведИзПатентаДатаНач = Неопределено;
	СведИзПатентаДатаКон = Неопределено;
	СуммаВсего			 = Неопределено;
	Сумма1Месяц			 = Неопределено;
	Сумма2Месяц			 = Неопределено;
	Сумма3Месяц			 = Неопределено;
	
	Пока ДанныеРаздела1_43.Свойство("П000430000102_" + Формат(НомСтроки, "ЧГ="), НомерПатента) Цикл
		
		НомерСтроки = Формат(НомСтроки, "ЧГ=");
		
		СтрокаЗаполнена = Ложь;
		ДанныеРаздела1_43.Свойство("П000430000103_" + НомерСтроки, ВидПредпДеятельности);
		ДанныеРаздела1_43.Свойство("П000430000104_" + НомерСтроки, СведИзПатентаДатаНач);
		ДанныеРаздела1_43.Свойство("П000430000105_" + НомерСтроки, СведИзПатентаДатаКон);
		ДанныеРаздела1_43.Свойство("П000430000106_" + НомерСтроки, СуммаВсего);
		ДанныеРаздела1_43.Свойство("П000430000107_" + НомерСтроки, Сумма1Месяц);
		ДанныеРаздела1_43.Свойство("П000430000108_" + НомерСтроки, Сумма2Месяц);
		ДанныеРаздела1_43.Свойство("П000430000109_" + НомерСтроки, Сумма3Месяц);
		
		Если ЗначениеЗаполнено(НомерПатента)
		 ИЛИ ЗначениеЗаполнено(ВидПредпДеятельности)
		 ИЛИ ЗначениеЗаполнено(СведИзПатентаДатаНач)
		 ИЛИ ЗначениеЗаполнено(СведИзПатентаДатаКон)
		 ИЛИ ЗначениеЗаполнено(СуммаВсего)
		 ИЛИ ЗначениеЗаполнено(Сумма1Месяц)
		 ИЛИ ЗначениеЗаполнено(Сумма2Месяц)
		 ИЛИ ЗначениеЗаполнено(Сумма3Месяц) Тогда
			СтрокаЗаполнена = Истина;
		КонецЕсли;
		
		Если СтрокаЗаполнена Тогда
			Если НЕ ЗначениеЗаполнено(НомерПатента) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					НСтр("ru='В таблице 4.3, в строке " + НомерСтроки
					+ " не указан номер патента!'"),
					"Раздел1_43", "П000430000102_" + НомерСтроки);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(НомерПатента)) <> 13 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					НСтр("ru='В таблице 4.3, в строке " + НомерСтроки
					+ " неверно указан номер патента!'"),
					"Раздел1_43", "П000430000102_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ВидПредпДеятельности) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					НСтр("ru='В таблице 4.3, в строке " + НомерСтроки
					+ " не указан вид предпринимательской деятельности!'"),
					"Раздел1_43", "П000430000103_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СведИзПатентаДатаНач) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					НСтр("ru='В таблице 4.3, в строке " + НомерСтроки
					+ " не указана дата начала действия (""Сведения из патента"")!'"),
					"Раздел1_43", "П000430000104_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СведИзПатентаДатаКон) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
					НСтр("ru='В таблице 4.3, в строке " + НомерСтроки
					+ " не указана дата окончания действия (""Сведения из патента"")!'"),
					"Раздел1_43", "П000430000105_" + НомерСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		НомСтроки = НомСтроки +1;
	КонецЦикла;
	
	// Многострочные части таблицы 7.
	ДанныеРаздела2_7 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2_7;
	
	ДанныеПП = Новый Структура;
	ДанныеПП.Вставить("ДанныеМСЧ", ДанныеРаздела2_7);
	ДанныеПП.Вставить("ИмяРаздела", "Раздел2_7");
	ДанныеПП.Вставить("ОписаниеРаздела", "в разделе II (табл.7)");
	
	ДанныеПП.Вставить("ИмяПоказателяНомераПП", "П000070016104");
	ДанныеПП.Вставить("ИмяПоказателяДатыПП",   "П000070016105");
	ДанныеПП.Вставить("ИмяПоказателяСуммыПП",  "П000070016101");
	
	ПроверитьСведенияПП(ДанныеПП, СтатусПроверки);
	
	ДанныеПП.Вставить("ИмяПоказателяНомераПП", "П000070016204");
	ДанныеПП.Вставить("ИмяПоказателяДатыПП",   "П000070016205");
	ДанныеПП.Вставить("ИмяПоказателяСуммыПП",  "П000070016201");
	
	ПроверитьСведенияПП(ДанныеПП, СтатусПроверки);
	
	ДанныеПП.Вставить("ИмяПоказателяНомераПП", "П000070016304");
	ДанныеПП.Вставить("ИмяПоказателяДатыПП",   "П000070016305");
	ДанныеПП.Вставить("ИмяПоказателяСуммыПП",  "П000070016301");
	
	ПроверитьСведенияПП(ДанныеПП, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ЗаполнитьСодержательнуюЧасть(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки);
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				НСтр("ru='Формирование XML: Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ ("
				+ АдресПоказателя(Стр)+ ") меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")'"),
				"Титульный", "");
		КонецЕсли;
		
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				НСтр("ru='Формирование XML: Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """  ("
				+ АдресПоказателя(Стр)+ ") больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")'"),
				"Титульный", "");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция АдресПоказателя(СтрокаПоказателя)
	
	Результат = СтрокаПоказателя.Код;
	
	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияПП(ПрототипУзла_PAYM_ORDER, ДанныеПП)
	
	ДанныеМСЧ = ДанныеПП.ДанныеМСЧ;
	ИмяПоказателяНомераПП = ДанныеПП.ИмяПоказателяНомераПП;
	ИмяПоказателяДатыПП = ДанныеПП.ИмяПоказателяДатыПП;
	ИмяПоказателяСуммыПП = ДанныеПП.ИмяПоказателяСуммыПП;
	
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеМСЧ, ИмяПоказателяНомераПП + "_" + Формат(НомСтр, "ЧГ=0")) Цикл
		Посфикс = "_" + Формат(НомСтр, "ЧГ=0");
		
		Узел_PAYM_ORDER = НовыйУзелИзПрототипа(ПрототипУзла_PAYM_ORDER);
		ЗадатьЗначениеЭлемента(Узел_PAYM_ORDER, "NUM", ДанныеМСЧ[ИмяПоказателяНомераПП + Посфикс]);
		ЗадатьЗначениеЭлемента(Узел_PAYM_ORDER, "DT",  ДанныеМСЧ[ИмяПоказателяДатыПП + Посфикс]);
		ЗадатьЗначениеЭлемента(Узел_PAYM_ORDER, "SUM", ДанныеМСЧ[ИмяПоказателяСуммыПП + Посфикс]);
		
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("windows-1251");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	
	ПотокXML.ЗаписатьБезОбработки(Символы.ПС + "<?F4FORM version=""0.7"" appname=""1С""?>");
		
	Возврат ПотокXML;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("F4REPORT");
		ПотокXML.ЗаписатьАтрибут("xmlns", "http://fz122.fss.ru");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsd", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsd:schemaLocation", "http://fz122.fss.ru/doc/f4form_2015.xsd");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(ПараметрыВыгрузки, УзелРодитель)
	
	УзелTITLE = ПолучитьПодчиненныйЭлемент(УзелРодитель, "TITLE");
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелTITLE);
	
	Раздел1_1  = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_1;
	Раздел1_1.Вставить("ОКВЭДРаздел1", ПараметрыВыгрузки.ОКВЭДРаздел1);
	Раздел1_1.Вставить("Табл1Стр16Месяц1", ПараметрыВыгрузки.Табл1Стр16Месяц1);
	Раздел1_1.Вставить("Табл1Стр16Месяц2", ПараметрыВыгрузки.Табл1Стр16Месяц2);
	Раздел1_1.Вставить("Табл1Стр16Месяц3", ПараметрыВыгрузки.Табл1Стр16Месяц3);
	
	Раздел1_2  = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_2;
	Раздел1_3  = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_3;
	Раздел1_31 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_31;
	Раздел1_4  = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_4;
	Раздел1_41 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_41;
	Раздел1_42 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_42;
	Раздел1_43 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_43;
	Раздел1_5  = мДанныеОтчета.ПолеТабличногоДокументаРаздел1_5;
	
	Раздел2_6 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2_6;
	Раздел2_6.Вставить("ОКВЭДРаздел2", ПараметрыВыгрузки.ОКВЭДРаздел2);
	Раздел2_6.Вставить("Льгота60Процентов", ПараметрыВыгрузки.Льгота60Процентов);
	Раздел2_6.Вставить("ЧастичноеФинансированиеИзБюдж", ПараметрыВыгрузки.ЧастичноеФинансированиеИзБюдж);
	
	Раздел2_7 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2_7;
	Раздел2_7.Вставить("Табл7Стр16Месяц1", ПараметрыВыгрузки.Табл7Стр16Месяц1);
	Раздел2_7.Вставить("Табл7Стр16Месяц2", ПараметрыВыгрузки.Табл7Стр16Месяц2);
	Раздел2_7.Вставить("Табл7Стр16Месяц3", ПараметрыВыгрузки.Табл7Стр16Месяц3);
		
	Раздел2_8_9 = мДанныеОтчета.ПолеТабличногоДокументаРаздел2_8_9;
	
	Раздел2_10  = мДанныеОтчета.ПолеТабличногоДокументаРаздел2_10;
	
	УзелF4INF1 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "F4INF1");
	ЗаполнитьДаннымиУзел(Раздел1_1,  УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_2,  УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_3,  УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_4,  УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_41, УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_42, УзелF4INF1);
	ЗаполнитьДаннымиУзел(Раздел1_43, УзелF4INF1);
		
	ПрототипУзла_PAYM_ORDER = ПолучитьПодчиненныйЭлемент(УзелF4INF1, "PAYM_ORDER");
	
	ДанныеПП = Новый Структура;
	ДанныеПП.Вставить("ДанныеМСЧ", Раздел1_1);
	ДанныеПП.Вставить("ИмяПоказателяНомераПП", "П000010016321");
	ДанныеПП.Вставить("ИмяПоказателяДатыПП",   "П000010016311");
	ДанныеПП.Вставить("ИмяПоказателяСуммыПП",  "П000010016301");
	
	ЗаполнитьСведенияПП(ПрототипУзла_PAYM_ORDER, ДанныеПП);
	
	ДанныеПП = Новый Структура;
	ДанныеПП.Вставить("ДанныеМСЧ", Раздел1_1);
	ДанныеПП.Вставить("ИмяПоказателяНомераПП", "П000010016421");
	ДанныеПП.Вставить("ИмяПоказателяДатыПП",   "П000010016411");
	ДанныеПП.Вставить("ИмяПоказателяСуммыПП",  "П000010016401");
	
	ЗаполнитьСведенияПП(ПрототипУзла_PAYM_ORDER, ДанныеПП);
	
	ДанныеПП = Новый Структура;
	ДанныеПП.Вставить("ДанныеМСЧ", Раздел1_1);
	ДанныеПП.Вставить("ИмяПоказателяНомераПП", "П000010016521");
	ДанныеПП.Вставить("ИмяПоказателяДатыПП",   "П000010016511");
	ДанныеПП.Вставить("ИмяПоказателяСуммыПП",  "П000010016501");
	
	ЗаполнитьСведенияПП(ПрототипУзла_PAYM_ORDER, ДанныеПП);
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_PAYM_ORDER);
	
	// Выгрузка таблицы 3.1 (многострочная).
	УзелF4INOSTШаблон = ПолучитьПодчиненныйЭлемент(УзелF4INF1, "F4INOST");
	
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел1_31, "П000310001001_" + Формат(НомСтр, "ЧГ=")) Цикл
		ФИОИнГраждЗаполнено = ЗначениеЗаполнено(Раздел1_31["П000310001002_" + Формат(НомСтр, "ЧГ=")]);
		Если ФИОИнГраждЗаполнено Тогда
			УзелF4INOST = СкопироватьУзел(УзелF4INF1, УзелF4INOSTШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел1_31, УзелF4INOST, НомСтр);
			
			ФИО = РегламентированнаяОтчетностьКлиентСервер.РазложитьФИО(ВРЕГ(Раздел1_31["П000310001002_" + Формат(НомСтр, "ЧГ=")]));
			ЗадатьЗначениеЭлемента(УзелF4INOST, "LNAME", ФИО.Фамилия);
			ЗадатьЗначениеЭлемента(УзелF4INOST, "FNAME", ФИО.Имя);
			ЗадатьЗначениеЭлемента(УзелF4INOST, "MNAME", ФИО.Отчество);
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	// Выгрузка таблицы 4.3 (многострочная).
	УзелF4PATШаблон = ПолучитьПодчиненныйЭлемент(УзелF4INF1, "F4PAT");
	
	НомСтр = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел1_43, "П000430000101_" + Формат(НомСтр, "ЧГ=")) Цикл
		НомерПатентаЗаполнен = ЗначениеЗаполнено(Раздел1_43["П000430000102_" + Формат(НомСтр, "ЧГ=")]);
		Если НомерПатентаЗаполнен Тогда
			УзелF4PAT = СкопироватьУзел(УзелF4INF1, УзелF4PATШаблон);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел1_43, УзелF4PAT, НомСтр);
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	Узел_F4INFO = ПолучитьПодчиненныйЭлемент(УзелРодитель, "F4INFO");
	ЗаполнитьДаннымиУзел(Раздел1_5,   Узел_F4INFO);
	ЗаполнитьДаннымиУзел(Раздел2_6,   Узел_F4INFO);
	ЗаполнитьДаннымиУзел(Раздел2_7,   Узел_F4INFO);
	ЗаполнитьДаннымиУзел(Раздел2_8_9, Узел_F4INFO);
	ЗаполнитьДаннымиУзел(Раздел2_10,  Узел_F4INFO);
	
	ПрототипУзла_PAYM_ORDER = ПолучитьПодчиненныйЭлемент(Узел_F4INFO, "PAYM_ORDER");
	
	ДанныеПП = Новый Структура;
	ДанныеПП.Вставить("ДанныеМСЧ", Раздел2_7);
	ДанныеПП.Вставить("ИмяПоказателяНомераПП", "П000070016105");
	ДанныеПП.Вставить("ИмяПоказателяДатыПП",   "П000070016104");
	ДанныеПП.Вставить("ИмяПоказателяСуммыПП",  "П000070016101");
	
	ЗаполнитьСведенияПП(ПрототипУзла_PAYM_ORDER, ДанныеПП);
	
	ДанныеПП = Новый Структура;
	ДанныеПП.Вставить("ДанныеМСЧ", Раздел2_7);
	ДанныеПП.Вставить("ИмяПоказателяНомераПП", "П000070016205");
	ДанныеПП.Вставить("ИмяПоказателяДатыПП",   "П000070016204");
	ДанныеПП.Вставить("ИмяПоказателяСуммыПП",  "П000070016201");
	
	ЗаполнитьСведенияПП(ПрототипУзла_PAYM_ORDER, ДанныеПП);
	
	ДанныеПП = Новый Структура;
	ДанныеПП.Вставить("ДанныеМСЧ", Раздел2_7);
	ДанныеПП.Вставить("ИмяПоказателяНомераПП", "П000070016305");
	ДанныеПП.Вставить("ИмяПоказателяДатыПП",   "П000070016304");
	ДанныеПП.Вставить("ИмяПоказателяСуммыПП",  "П000070016301");
	
	ЗаполнитьСведенияПП(ПрототипУзла_PAYM_ORDER, ДанныеПП);
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_PAYM_ORDER);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	РодительСтрока = ?(Родитель = Неопределено, Узел.Владелец(), Родитель);
	
	СтрокиСТемЖеКодом = РодительСтрока.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = РодительСтрока.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= РодительСтрока.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = РодительСтрока.Строки.Добавить();
	Иначе
		НовыйУзел = РодительСтрока.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Узел.Значение) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0";
	ИначеЕсли Узел.Формат = "D" Тогда
		Возврат Узел.Значение = "0001-01-01";
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	РодительСтроки = ?(Стр.Родитель = Неопределено, Стр.Владелец(), Стр.Родитель);
	Возврат (РодительСтроки.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

&НаСервере
Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено, ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

&НаСервере
Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (
			ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
			СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "D" Тогда
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd"));
		Иначе
			Узел.Значение = "0001-01-01";
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ВыгрузкаВозможна = Истина;
	
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		ВыгрузкаВозможна = Ложь;
	КонецЕсли;
	
	Если НЕ ВыгрузкаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьРеквизит(Текст, ДобСтрока, Префикс)
     
	Если ЗначениеЗаполнено(ДобСтрока) Тогда
		Текст = Текст + Префикс + ДобСтрока;
	КонецЕсли;
	
	Возврат Текст;
     
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
		
	ОбластьИмя = Область.Имя;
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку();
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Гиперссылка Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтроку();
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ОбластьИмя, "ДокУпПред") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураДокумента", мСтруктураДокУпПред);
		
		ФормаВводаДокументПредставителя = ПолучитьФорму("Отчет.РегламентированныйОтчет4ФСС.Форма.ФормаВводаДокументПредставителя", ПараметрыФормы);
		ФормаВводаДокументПредставителя.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуВводаДокументаПредставителяЗавершение", ЭтотОбъект);
		ФормаВводаДокументПредставителя.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВводаДокументПредставителя.Открыть();
		
	ИначеЕсли ОбластьИмя = "П000060000100" ИЛИ ОбластьИмя = "П000060000200" Тогда
		
		СтандартнаяОбработка = Ложь;
		Область.Значение = ?(СокрЛП(Область.Значение) = "", "Х", "");
		Модифицированность = Истина;
		
	Иначе
		
		ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ОбластьИмя));
		
		Если ПараметрВводаПоля.Количество() = 0 Тогда
			ПараметрВводаПоля = Неопределено;
			Для Каждого Стр из СвойстваПоказателей Цикл
				Если Лев(Область.Имя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
					ПараметрВводаПоля = Стр;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПараметрВводаПоля = ПараметрВводаПоля[0];
		КонецЕсли;
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			ВвестиПоказатель(Элемент, Область, ПараметрВводаПоля.Показатель, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность  = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000100163") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000100164") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000100165") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000700161") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000700162") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0000700163") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0003100010") > 0
	 ИЛИ СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "П0004300001") > 0 Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ПозицияЗнакаПодчеркивания = Найти(Элемент.ТекущаяОбласть.Имя, "_");
		
		Если НЕ ПозицияЗнакаПодчеркивания = Неопределено Тогда
			
			КодОбласти = Лев(Элемент.ТекущаяОбласть.Имя, ПозицияЗнакаПодчеркивания);
			
			Если НЕ ТабличныйДокумент.Области.Найти(КодОбласти + "2") = Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаДокументаПредставителяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		мСтруктураДокУпПред = Результат;
		Текст = "";
		
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.НаименованиеУдостоверяющего, "");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.СерияРимскиеЦифры, " ");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.СерияРусскиеБуквы, " ");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.НомерУдостоверяющего, " № ");
		Текст = ДобавитьРеквизит(Текст, Формат(мСтруктураДокУпПред.ДатаВыдачи,"ДФ=dd.MM.yyyy"), " от ");
		Текст = ДобавитьРеквизит(Текст, мСтруктураДокУпПред.КемВыдан, " выдан: ");
		
		ТабличныйДокумент.Области.ДокУпПред.Значение = Текст;		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	ИмяОбласти = Область.Имя;
	
	ПозицияПодстроки = Найти(ИмяОбласти, "_");
	
	Если ПозицияПодстроки > 0 Тогда
		ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
	КонецЕсли;
	
	Если Найти(ИмяОбласти, "НомДопРасчета") > 0 Тогда
		
		ЭтоОбластьПериода = (ИмяОбласти = "НомДопРасчета");
		ЗаполнениеПериодаОтчетаПоПриказу1385н
			= (КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= КонецГода('20111231'));
		
		Если ЭтоОбластьПериода И ЗаполнениеПериодаОтчетаПоПриказу1385н Тогда
			КодПериода = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=ММ");
			Если КодПериода = "03" ИЛИ КодПериода = "06"  ИЛИ КодПериода = "09" ИЛИ КодПериода = "12" Тогда
				Если ПустаяСтрока(ТабличныйДокумент.Области.НомДопРасчета.Значение) Тогда
					ТабличныйДокумент.Области.Период.Значение = КодПериода;		
				Иначе
					ТабличныйДокумент.Области.Период.Значение = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
			
	Если ИмяОбласти = "КодПодчиненности" Тогда
		Если СтрДлина(СокрЛП(Область.Значение)) <> 5 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Введенное значение кода подчиненности должно состоять из 5 символов!'");
			Сообщение.Сообщить();
			Область.Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяОбласти = "ОКВЭД" Тогда
		Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(Область.Значение) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Введено некорректное значение кода вида деятельности по ОКВЭД!%1Допустимы значения, соответствующие следующим шаблонам:%2""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).'"), Символы.ПС, Символы.ПС);
			Сообщение.Сообщить();
			Область.Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяОбласти = "НомерКорректировки" Тогда
		
		Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда
			Область.Значение = "0";
		КонецЕсли;
		
		ОтобразитьНомерКорректировки(ЭтаФорма, Область.Значение);
		
	ИначеЕсли ИмяОбласти = "ДатаПодписи" Тогда
		
		ДатаПодписи = ТабличныйДокумент.Области.ДатаПодписи.Значение;
		
		#Если ВебКлиент Тогда
			ДатаПодписиПриИзмененииНаСервере();
		#Иначе
			ДатаПодписиПриИзмененииНаКлиенте();
		#КонецЕсли
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
	
	ВключитьПечатьЗаполненногоНеобязательногоРаздела(ЭтаФорма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма, ЗначениеКорректировки)
	
	Форма.СтруктураРеквизитовФормы.ВидДокумента = ?(Число(ЗначениеКорректировки) = 0, 0, 1);
	
	Форма.НомерКорректировки = Форма.СтруктураРеквизитовФормы.ВидДокумента * Число(ЗначениеКорректировки);
	НомерКорректировкиСтрока = Формат(Форма.НомерКорректировки, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	НомерКорректировкиСтрока = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(НомерКорректировкиСтрока,3,"0",0);	
	
	Форма.ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	НачатьЗамерВремени();
	ЗаполнитьАвтоНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
	Контейнер.Вставить("Раздел1_1", СтруктураДанныхРаздел1_1);
	Контейнер.Вставить("Раздел11_1_ДанныеДопСтрок", П0000100163);
	Контейнер.Вставить("Раздел11_2_ДанныеДопСтрок", П0000100164);
	Контейнер.Вставить("Раздел11_3_ДанныеДопСтрок", П0000100165);
	Контейнер.Вставить("Раздел1_2", СтруктураДанныхРаздел1_2);
	Контейнер.Вставить("Раздел1_3", СтруктураДанныхРаздел1_3);
	Контейнер.Вставить("Раздел1_31", СтруктураДанныхРаздел1_31);
	Контейнер.Вставить("Раздел1_31_ДанныеДопСтрок", П0003100010);
	Контейнер.Вставить("Раздел1_4", СтруктураДанныхРаздел1_4);
	Контейнер.Вставить("Раздел1_41", СтруктураДанныхРаздел1_41);
	Контейнер.Вставить("Раздел1_42", СтруктураДанныхРаздел1_42);
	Контейнер.Вставить("Раздел1_43", СтруктураДанныхРаздел1_43);
	Контейнер.Вставить("Раздел1_43_ДанныеДопСтрок", П0004300001);
	Контейнер.Вставить("Раздел1_5", СтруктураДанныхРаздел1_5);
	Контейнер.Вставить("Раздел2_6", СтруктураДанныхРаздел2_6);
	Контейнер.Вставить("Раздел2_7", СтруктураДанныхРаздел2_7);
	Контейнер.Вставить("Раздел2_7_1_ДанныеДопСтрок", П0000700161);
	Контейнер.Вставить("Раздел2_7_2_ДанныеДопСтрок", П0000700162);
	Контейнер.Вставить("Раздел2_7_3_ДанныеДопСтрок", П0000700163);
	Контейнер.Вставить("Раздел2_8_9", СтруктураДанныхРаздел2_8_9);
	Контейнер.Вставить("Раздел2_10", СтруктураДанныхРаздел2_10);
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ЭтаФормаИмя = Лев(ЭтаФормаИмя, Найти(ЭтаФормаИмя, ".Форма.") - 1);
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ЭтаФормаИмя, Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета, Контейнер);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если П0000100163.Количество() = 0 Тогда
		П0000100163.Добавить();
	КонецЕсли;
	
	Если П0000100164.Количество() = 0 Тогда
		П0000100164.Добавить();
	КонецЕсли;
	
	Если П0000100165.Количество() = 0 Тогда
		П0000100165.Добавить();
	КонецЕсли;
	
	Если П0003100010.Количество() = 0 Тогда
		П0003100010.Добавить();
	КонецЕсли;
	
	Если П0004300001.Количество() = 0 Тогда
		П0004300001.Добавить();
	КонецЕсли;
			
	Если П0000700161.Количество() = 0 Тогда
		П0000700161.Добавить();
	КонецЕсли;
	
	Если П0000700162.Количество() = 0 Тогда
		П0000700162.Добавить();
	КонецЕсли;
	
	Если П0000700163.Количество() = 0 Тогда
		П0000700163.Добавить();
	КонецЕсли;
	
	ЗаполнитьСтруктурыДанныхРазделовЗначениямиИзДопСтрок();
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Для Каждого Страница Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		ВключитьПечатьЗаполненногоНеобязательногоРаздела(ЭтаФорма, Страница.ИмяСтраницы);
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктурыДанныхРазделовЗначениямиИзДопСтрок()
	
	МассивДанныхДопСтрок = Новый Массив;
	МассивДанныхДопСтрок.Добавить(П0000100163);
	МассивДанныхДопСтрок.Добавить(П0000100164);
	МассивДанныхДопСтрок.Добавить(П0000100165);
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
		СтруктураДанныхРаздел1_1, МассивДанныхДопСтрок);
	
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
		СтруктураДанныхРаздел1_31, П0003100010);
		
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
		СтруктураДанныхРаздел1_43, П0004300001);
			
	МассивДанныхДопСтрок.Очистить();
	МассивДанныхДопСтрок.Добавить(П0000700161);
	МассивДанныхДопСтрок.Добавить(П0000700162);
	МассивДанныхДопСтрок.Добавить(П0000700163);
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
		СтруктураДанныхРаздел2_7, МассивДанныхДопСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Раздел31ФИО = "";
	
	Если СтрЧислоВхождений(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя, СтруктураРеквизитовФормы.мИдГруппы1) > 0 Тогда
		Раздел31ФИО = ТабличныйДокумент.Области[СтруктураРеквизитовФормы.мИдГруппы1 + "02_" + Сред(
			Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя, Найти(
			Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя, "_") + 1)].Значение;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",   СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",    СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("Раздел31ФИО",                Раздел31ФИО);
	ПараметрыОтчета.Вставить("ЗначениеТекущегоПоказателя", Элементы.ТабличныйДокумент.ТекущаяОбласть.Текст);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
		Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7),
		Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделЗаполнен(Форма, ИмяСтраницы)
	
	Если ИмяСтраницы = "Раздел1_2" Тогда
		
		Возврат ЗаполненРаздел1_2(Форма);
		
	ИначеЕсли ИмяСтраницы = "Раздел1_31" Тогда
		
		Возврат ЗаполненРаздел1_31(Форма);
		
	ИначеЕсли ИмяСтраницы = "Раздел1_4" Тогда
		
		Возврат ЗаполненРаздел1_4(Форма);
		
	ИначеЕсли ИмяСтраницы = "Раздел1_41" Тогда
		
		Возврат ЗаполненРаздел1_41(Форма);
		
	ИначеЕсли ИмяСтраницы = "Раздел1_42" Тогда
		
		Возврат ЗаполненРаздел1_42(Форма);
		
	ИначеЕсли ИмяСтраницы = "Раздел1_43" Тогда
		
		Возврат ЗаполненРаздел1_43(Форма);
				
	ИначеЕсли ИмяСтраницы = "Раздел1_5" Тогда
		
		Возврат ЗаполненРаздел1_5(Форма);
		
	ИначеЕсли ИмяСтраницы = "Раздел2_8_9" Тогда
		
		Возврат ЗаполненРаздел2_8_9(Форма);
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВключитьПечатьЗаполненногоНеобязательногоРаздела(Форма, ИмяРаздела)
	
	ОбязательныеРазделы = Новый Массив;
	ОбязательныеРазделы.Добавить("Титульный");
	ОбязательныеРазделы.Добавить("Раздел1_1");
	ОбязательныеРазделы.Добавить("Раздел1_3");
	ОбязательныеРазделы.Добавить("Раздел2_6");
	ОбязательныеРазделы.Добавить("Раздел2_7");
	ОбязательныеРазделы.Добавить("Раздел2_10");
	
	Если ОбязательныеРазделы.Найти(ИмяРаздела) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСтраницыРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		Форма.мДеревоВыбранныхСтраниц.ПолучитьЭлементы(), "ИмяСтраницы", ИмяРаздела);
	Если НастройкиСтраницыРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВРазделеОтключенаПечать = (НастройкиСтраницыРаздела.ВыводНаПечать = 0);
	
	Если ВРазделеОтключенаПечать И РазделЗаполнен(Форма, ИмяРаздела) Тогда
		НастройкиСтраницыРаздела.ВыводНаПечать = 1;
	КонецЕсли;
	
	КопироватьДанныеФормы(Форма.мДеревоВыбранныхСтраниц, Форма.мДеревоСтраницОтчета);
	
КонецПроцедуры

&НаСервере
Функция ПреобразованноеИмяПоказателя(ИсходноеИмя)
	
	СписокПреобразования = "П000010016301,П000010016311,П000010016321,
	                       |П000010016401,П000010016411,П000010016421,
	                       |П000010016501,П000010016511,П000010016521,
	                       |П000070016101,П000070016104,П000070016105,
	                       |П000070016201,П000070016204,П000070016205,
	                       |П000070016301,П000070016304,П000070016305";
	Если Найти(СписокПреобразования, ИсходноеИмя) <> 0 Тогда
		Результат = ИсходноеИмя + "_1";
	Иначе
		Результат = ИсходноеИмя;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НачатьЗамерВремени()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "ЗаполнениеФормыНалоговаяОтчетность4ФСС";
		ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер").НачатьЗамерВремени(КлючеваяОперация);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если Лев(СокрЛП(СтандартныеПодсистемыСервер.ВерсияБиблиотеки()), 4) = "2.1." Тогда
		ВыполнятьЗамерыПроизводительности = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОценкаПроизводительностиПовтИсп").ВыполнятьЗамерыПроизводительности();
	Иначе
		ВыполнятьЗамерыПроизводительности = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп").ВыполнятьЗамерыПроизводительности();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") 
	   И ВыполнятьЗамерыПроизводительности Тогда
		
		Возврат ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер").ЗначениеТаймера();
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаписатьЗамер(ВремяНачала)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ВремяНачала <> Неопределено И ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = "ЗаполнениеФормыНалоговаяОтчетность4ФСС";
		ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОценкаПроизводительностиКлиентСервер").ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОТПРАВКА ОТЧЕТА В ФСС

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФСС");
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСС");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФСС");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры
