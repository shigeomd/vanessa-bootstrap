
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Справка (расширенная форма).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_СправкаРасширенная";
	КомандаПечати.Представление = НСтр("ru = 'Справка (по форме 2013г.)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 10;
	
	// Справка (утвержденная форма).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_Справка";
	КомандаПечати.Представление = НСтр("ru = 'Справка (по форме 2011г.)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 20;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	МассивДопустимыхОбъектов = Новый Массив;
	Для каждого ДопустимыйОбъект Из МассивОбъектов Цикл
		Если ТипЗнч(ДопустимыйОбъект) = Тип("ДокументСсылка.ИсходящаяСправкаОЗаработкеДляРасчетаПособий") Тогда
			МассивДопустимыхОбъектов.Добавить(ДопустимыйОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДопустимыхОбъектов.Количество() > 0 Тогда
		НапечататьМакет(МассивДопустимыхОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, "ПФ_MXL_Справка", Нстр("ru = 'Исходящая справка о заработке для расчета пособий (утвержденная форма)'"));
		НапечататьМакет(МассивДопустимыхОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, "ПФ_MXL_СправкаРасширенная", Нстр("ru = 'Исходящая справка о заработке для расчета пособий (расширенная форма)'"));
	КонецЕсли;	
КонецПроцедуры

Процедура НапечататьМакет(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ИмяМакета, Синоним)
	
	// Проверяем, нужно ли для макета Справка формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета) Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		ИмяМакета, Синоним, ТабличныйДокументСправка(МассивОбъектов, ОбъектыПечати, ИмяМакета));
	КонецЕсли;
	
КонецПроцедуры

Функция ТабличныйДокументСправка(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	Если ИмяМакета = "ПФ_MXL_Справка" Тогда
		ТабличныйДокумент = ПечатьСправки(МассивОбъектов, ОбъектыПечати, ИмяМакета);
	ИначеЕсли ИмяМакета = "ПФ_MXL_СправкаРасширенная" Тогда
		ТабличныйДокумент = ПечатьСправки2013(МассивОбъектов, ОбъектыПечати, ИмяМакета);
	КонецЕсли;
	Возврат ТабличныйДокумент
КонецФункции

// Функция формирует табличный документ с печатной формой справки.
//
// Возвращаемое значение:
//	Табличный документ - печатная форма.
//
Функция ПечатьСправки(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаОЗаработкеДляРасчетаПособий";
	
	// запоминаем области макета
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий." + ИмяМакета);
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ОбластьМакетаПодвал	= Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета 		= Макет.ПолучитьОбласть("Год"); // область календарного года
	ПустаяОбластьМакета = Макет.ПолучитьОбласть("ПустойГод"); // область календарного года
	
	РезультатЗапросаПоШапке = СформироватьЗапросДляПечати(МассивОбъектов);
	ВыборкаДляШапкиИПодвала = РезультатЗапросаПоШапке.Выбрать();
	ВыборкаСтрок = СформироватьЗапросПоДанныеОЗаработке(МассивОбъектов).Выбрать();
	
	АдресаОрганизаций = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресаОрганизаций(РезультатЗапросаПоШапке.Выгрузить().ВыгрузитьКолонку("Организация"));
		
	ПервыйДокумент = Истина;
	
	Валюта = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	Пока ВыборкаДляШапкиИПодвала.Следующий() Цикл
		Если Не ПервыйДокумент Тогда
			// Все документы нужно выводить на разных страницах.
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// получаем данные для печати
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		
		СтрокаФИО = "%1 %2 %3";
		ПараметрФИО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФИО, ВыборкаДляШапкиИПодвала.Фамилия, ВыборкаДляШапкиИПодвала.Имя, ВыборкаДляШапкиИПодвала.Отчество); 		
		ОбластьМакетаШапка.Параметры.ФИО = ПараметрФИО;
		
		ОписаниеЮридическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
			АдресаОрганизаций,
			ВыборкаДляШапкиИПодвала.Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);

		ОбластьМакетаШапка.Параметры.АдресСтрахователя = ОписаниеЮридическогоАдреса.Представление;
		
		ОбластьМакетаШапка.Параметры.НаименованиеТерриториальногоОрганаФСС = СокрЛП(ОбластьМакетаШапка.Параметры.НаименованиеТерриториальногоОрганаФСС);
		ОбластьМакетаШапка.Параметры.КемВыданДокумент = СокрЛП(ОбластьМакетаШапка.Параметры.КемВыданДокумент);
		ОбластьМакетаШапка.Параметры.ДатаВыдачиДокумента = Формат(ОбластьМакетаШапка.Параметры.ДатаВыдачиДокумента,"ДЛФ=DD");
		ДанныеАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
				ВыборкаДляШапкиИПодвала.АдресПоПрописке, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
		Если ДанныеАдреса <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ОбластьМакетаШапка.Параметры,ДанныеАдреса);
		КонецЕсли;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
		
		СписокФизлиц = Новый Массив;
		СписокФизлиц.Добавить(ВыборкаДляШапкиИПодвала.Руководитель);
		СписокФизлиц.Добавить(ВыборкаДляШапкиИПодвала.ГлавныйБухгалтер);
		
		КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизлиц, "ИОФамилия");
		
		ДанныеРуководителя = КадровыеДанныеФизическихЛиц.Найти(ВыборкаДляШапкиИПодвала.Руководитель, "ФизическоеЛицо");
		Если НЕ ДанныеРуководителя = Неопределено Тогда
		   ОбластьМакетаПодвал.Параметры["РуководительРасшифровкаПодписи"] = ДанныеРуководителя.ИОФамилия;
		КонецЕсли;
		
		ДанныеГлавногоБухгалтера = КадровыеДанныеФизическихЛиц.Найти(ВыборкаДляШапкиИПодвала.ГлавныйБухгалтер, "ФизическоеЛицо");
		Если НЕ ДанныеГлавногоБухгалтера = Неопределено Тогда
		   ОбластьМакетаПодвал.Параметры["ГлавныйБухгалтерРасшифровкаПодписи"] = ДанныеГлавногоБухгалтера.ИОФамилия;
		КонецЕсли;

		// Начинаем формировать выходной документ.
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
		
		ВыведеноСтрок = 0;
		
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаДляШапкиИПодвала.Ссылка);
		
		// выводим строки по годам
		Пока ВыборкаСтрок.НайтиСледующий(СтруктураПоиска) Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
			ОбластьМакета.Параметры.РасчетныйГод = ВыборкаСтрок.РасчетныйГод;
			ОбластьМакета.Параметры.Заработок = Формат(Цел(ВыборкаСтрок.Заработок),"ЧДЦ=0; ЧН=-");
			ОбластьМакета.Параметры.ЗаработокКоп = Формат((ВыборкаСтрок.Заработок - Цел(ВыборкаСтрок.Заработок)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-");
			ОбластьМакета.Параметры.ЗаработокПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ВыборкаСтрок.Заработок, Валюта);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
		КонецЦикла;
		
		Пока ВыведеноСтрок < 3 Цикл
			ТабличныйДокумент.Вывести(ПустаяОбластьМакета);
			ВыведеноСтрок = ВыведеноСтрок + 1;
		КонецЦикла;
		
		// Выводим предварительно подготовленный Подвал документа.
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапкиИПодвала.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции
  
// Функция формирует табличный документ с печатной формой справки.
//
// Возвращаемое значение:
//	Табличный документ - печатная форма.
//
Функция ПечатьСправки2013(МассивОбъектов, ОбъектыПечати, ИмяМакета)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаОЗаработкеДляРасчетаПособий";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// запоминаем области макета
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий." + ИмяМакета);
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ОбластьМакетаПодвал	= Макет.ПолучитьОбласть("Подвал");// Подвал документа
	
	// получаем данные для печати
	РезультатЗапросаДляШапкиИПодвала = СформироватьЗапросДляПечати(МассивОбъектов);
	ВыборкаДляШапкиИПодвала = РезультатЗапросаДляШапкиИПодвала.Выбрать();
	ВыборкаПериодовРаботы = СформироватьЗапросПоДанныеОПериодахРаботы(МассивОбъектов).Выбрать();
	ВыборкаЗаработка = СформироватьЗапросПоДанныеОЗаработке(МассивОбъектов).Выбрать();
	ВыборкаСтрокОтсутствий = СформироватьЗапросПоДанныеОДняхОтсутствий(МассивОбъектов).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	АдресаОрганизаций = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресаОрганизаций(РезультатЗапросаДляШапкиИПодвала.Выгрузить().ВыгрузитьКолонку("Организация"));
		
	ПервыйДокумент = Истина;
	
	Валюта = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();

	Пока ВыборкаДляШапкиИПодвала.Следующий() Цикл
		Если Не ПервыйДокумент Тогда
			// Все документы нужно выводить на разных страницах.
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		
		СтрокаФИО = "%1 %2 %3";
		ПараметрФИО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФИО, ВыборкаДляШапкиИПодвала.Фамилия, ВыборкаДляШапкиИПодвала.Имя, ВыборкаДляШапкиИПодвала.Отчество); 		
		ОбластьМакетаШапка.Параметры.ФИО = ПараметрФИО;

		ОписаниеЮридическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
			АдресаОрганизаций,
			ВыборкаДляШапкиИПодвала.Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);

		ОбластьМакетаШапка.Параметры.АдресСтрахователя = ОписаниеЮридическогоАдреса.Представление;
		
		ОбластьМакетаШапка.Параметры.НаименованиеТерриториальногоОрганаФСС = СокрЛП(ОбластьМакетаШапка.Параметры.НаименованиеТерриториальногоОрганаФСС);
		ОбластьМакетаШапка.Параметры.КемВыданДокумент = СокрЛП(ОбластьМакетаШапка.Параметры.КемВыданДокумент);
		ОбластьМакетаШапка.Параметры.ДатаВыдачиДокумента = Формат(ОбластьМакетаШапка.Параметры.ДатаВыдачиДокумента,"ДЛФ=DD");
		ДанныеАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
				ВыборкаДляШапкиИПодвала.АдресПоПрописке, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
		Если ДанныеАдреса <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ОбластьМакетаШапка.Параметры,ДанныеАдреса);
		КонецЕсли;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
		
		СписокФизлиц = Новый Массив;
		СписокФизлиц.Добавить(ВыборкаДляШапкиИПодвала.Руководитель);
		СписокФизлиц.Добавить(ВыборкаДляШапкиИПодвала.ГлавныйБухгалтер);
		
		КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизлиц, "ИОФамилия");
		
		ДанныеРуководителя = КадровыеДанныеФизическихЛиц.Найти(ВыборкаДляШапкиИПодвала.Руководитель, "ФизическоеЛицо");
		Если НЕ ДанныеРуководителя = Неопределено Тогда
		   ОбластьМакетаПодвал.Параметры["РуководительРасшифровкаПодписи"] = ДанныеРуководителя.ИОФамилия;
		КонецЕсли;
		
		ДанныеГлавногоБухгалтера = КадровыеДанныеФизическихЛиц.Найти(ВыборкаДляШапкиИПодвала.ГлавныйБухгалтер, "ФизическоеЛицо");
		Если НЕ ДанныеГлавногоБухгалтера = Неопределено Тогда
		   ОбластьМакетаПодвал.Параметры["ГлавныйБухгалтерРасшифровкаПодписи"] = ДанныеГлавногоБухгалтера.ИОФамилия;
		КонецЕсли;

		// Начинаем формировать выходной документ.
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПериодРаботы"); // область календарного года
		
		ВыведеноСтрок = 0;
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаДляШапкиИПодвала.Ссылка);
		
		// выводим строки по годам
		Пока ВыборкаПериодовРаботы.НайтиСледующий(СтруктураПоиска) Цикл
			ОбластьМакета.Параметры.Заполнить(ВыборкаПериодовРаботы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыведеноСтрок = ВыведеноСтрок + 1;
		КонецЦикла;
		
		Пока ВыведеноСтрок < 1 Цикл
			ОбластьМакета.Параметры.ПериодРаботыС = "";
			ОбластьМакета.Параметры.ПериодРаботыПо = "";
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыведеноСтрок = ВыведеноСтрок + 1;
		КонецЦикла;
		
		ОбластьМакета 		= Макет.ПолучитьОбласть("Год"); // область календарного года
		ПустаяОбластьМакета = Макет.ПолучитьОбласть("ПустойГод"); // область календарного года
		
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пункт3"));
		
		// выводим строки по годам
		ВыведеноСтрок = 0;
	
		// выводим строки по годам
		Пока ВыборкаЗаработка.НайтиСледующий(СтруктураПоиска) Цикл
			
			ОбластьМакета.Параметры.РасчетныйГод = ВыборкаЗаработка.РасчетныйГод;
			ОбластьМакета.Параметры.Заработок = Формат(Цел(ВыборкаЗаработка.Заработок),"ЧДЦ=0; ЧН=-");
			ОбластьМакета.Параметры.ЗаработокКоп = Формат((ВыборкаЗаработка.Заработок - Цел(ВыборкаЗаработка.Заработок)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-");
			ОбластьМакета.Параметры.ЗаработокПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ВыборкаЗаработка.Заработок, Валюта);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
		КонецЦикла;
		
		Пока ВыведеноСтрок < 1 Цикл
			ТабличныйДокумент.Вывести(ПустаяОбластьМакета);
			ВыведеноСтрок = ВыведеноСтрок + 1;
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Пункт4"));
		ОбластьМакета 		= Макет.ПолучитьОбласть("ГодДни"); // область календарного года
		ОбластьПериод 		= Макет.ПолучитьОбласть("ПериодДни"); // область периода года
		ПустаяОбластьПериод	= Макет.ПолучитьОбласть("ПустойПериодДни"); // область периода года
		ПустаяОбластьМакета = Макет.ПолучитьОбласть("ПустойГодДни"); // область календарного года
		
		// выводим строки по годам
		ВыведеноСтрок = 0; 	
		ВыборкаСтрокОтсутствий.Сбросить();
		Если ВыборкаСтрокОтсутствий.НайтиСледующий(СтруктураПоиска) Тогда
			ВыборкаСтрокОтсутствийПоДокументу = ВыборкаСтрокОтсутствий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСтрокОтсутствийПоДокументу.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокОтсутствийПоДокументу);
				ОбластьМакета.Параметры.РасчетныйГод = Формат(ВыборкаСтрокОтсутствийПоДокументу.РасчетныйГод, "ЧГ=0");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ВыведеноСтрок = ВыведеноСтрок + 1;
				
				ВыборкаСтрокОтсутствийПоГоду = ВыборкаСтрокОтсутствийПоДокументу.Выбрать();
				ВыведеноСтрокПериодов = 0;
				Пока ВыборкаСтрокОтсутствийПоГоду.Следующий() Цикл
					ОбластьПериод.Параметры.Заполнить(ВыборкаСтрокОтсутствийПоГоду);
					ТабличныйДокумент.Вывести(ОбластьПериод);
					ВыведеноСтрокПериодов = ВыведеноСтрокПериодов + 1;
				КонецЦикла;
				Пока ВыведеноСтрокПериодов < 1 Цикл
					ТабличныйДокумент.Вывести(ПустаяОбластьПериод);
					ВыведеноСтрокПериодов = ВыведеноСтрокПериодов + 1;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;	
		
		Пока ВыведеноСтрок < 1 Цикл
			ТабличныйДокумент.Вывести(ПустаяОбластьМакета);
			ТабличныйДокумент.Вывести(ПустаяОбластьПериод);
			ВыведеноСтрок = ВыведеноСтрок + 1;
		КонецЦикла;
		
		// Выводим предварительно подготовленный Подвал документа.
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, ВыборкаДляШапкиИПодвала.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьСправки()

// Формирует запрос по шапке документа.
//
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросДляПечати(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ОписаниеИсточникаДанных = ПерсонифицированныйУчет.ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий";
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "Дата";
	ОписаниеИсточникаДанных.СписокСсылок = МассивОбъектов;

	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументСправка.Дата,
	|	ДокументСправка.Номер,
	|	ДокументСправка.Организация,
	|	Организации.НаименованиеПолное КАК НазваниеОрганизации,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП,
	|	"""" КАК АдресСтрахователя,
	|	ДокументСправка.Ссылка,
	|	ДокументСправка.Сотрудник,
	|	ДокументСправка.Руководитель,
	|	Должности.Наименование КАК ДолжностьРуководителя,
	|	ДокументСправка.ГлавныйБухгалтер,
	|	ДокументСправка.ТелефонОрганизации,
	|	ДокументСправка.РегистрационныйНомерФСС,
	|	ДокументСправка.ДополнительныйКодФСС,
	|	ДокументСправка.КодПодчиненностиФСС,
	|	ДокументСправка.НаименованиеТерриториальногоОрганаФСС,
	|	ДокументСправка.УдалитьПериодРаботыС КАК ПериодРаботыС,
	|	ДокументСправка.УдалитьПериодРаботыПо КАК ПериодРаботыПо,
	|	ДокументСправка.СтраховойНомерПФР,
	|	ДокументСправка.Фамилия,
	|	ДокументСправка.Имя,
	|	ДокументСправка.Отчество,
	|	ДокументСправка.АдресПоПрописке,
	|	ДокументСправка.ВидДокумента,
	|	ДокументСправка.СерияДокумента,
	|	ДокументСправка.НомерДокумента,
	|	ДокументСправка.ДатаВыдачиДокумента,
	|	ДокументСправка.КемВыданДокумент,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЮрЛицо
	|ИЗ
	|	Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий КАК ДокументСправка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК Организации
	|		ПО ДокументСправка.Организация = Организации.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО ДокументСправка.ДолжностьРуководителя = Должности.Ссылка
	|ГДЕ
	|	ДокументСправка.Ссылка В(&МассивОбъектов)";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Формирует запрос по табличной части Начисления.
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоДанныеОЗаработке(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("МассивОбъектов" , МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.РасчетныйГод КАК РасчетныйГод,
	|	Документ.Заработок КАК Заработок,
	|	Документ.НомерСтроки,
	|	Документ.Ссылка
	|ПОМЕСТИТЬ ВТСтрокиДокумента
	|ИЗ
	|	Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий.ДанныеОЗаработке КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Ссылка,
	|	Документ.РасчетныйГод,
	|	Документ.Заработок,
	|	Документ.НомерСтроки,
	|	Документ.УдалитьДнейБолезниУходаЗаДетьми
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.РасчетныйГод КАК РасчетныйГод,
	|	Документ.Заработок КАК Заработок,
	|	Документ.НомерСтроки,
	|	Документ.Ссылка,
	|	ПовторныеСтроки.НомерСтроки КАК НомерПовторнойСтроки
	|ИЗ
	|	ВТСтрокиДокумента КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ПовторныеСтроки
	|		ПО Документ.РасчетныйГод = ПовторныеСтроки.РасчетныйГод
	|			И Документ.НомерСтроки < ПовторныеСтроки.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйГод";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Формирует запрос по табличной части ПериодыРаботы.
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоДанныеОПериодахРаботы(МассивОбъектов) Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.НомерСтроки,
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.ПериодРаботыС,
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.ПериодРаботыПо,
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.Ссылка
	|ИЗ
	|	Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий.ПериодыРаботы КАК СправкаОЗаработкеДляРасчетаПособийПериодыРаботы
	|ГДЕ
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.ПериодРаботыС";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по табличной части ДниБолезниУходаЗаДетьми.
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоДанныеОДняхОтсутствий(МассивОбъектов) Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкаОЗаработке.НомерСтроки,
	|	ГОД(СправкаОЗаработке.ПериодС) КАК РасчетныйГод,
	|	СправкаОЗаработке.Дни КАК ДнейБолезниУходаЗаДетьми,
	|	СправкаОЗаработке.ПериодС,
	|	СправкаОЗаработке.ПериодПо,
	|	СправкаОЗаработке.НаименованиеПериода,
	|	СправкаОЗаработке.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИсходящаяСправкаОЗаработкеДляРасчетаПособий.ДниБолезниУходаЗаДетьми КАК СправкаОЗаработке
	|ГДЕ
	|	СправкаОЗаработке.Ссылка В(&МассивОбъектов)
	|	И СправкаОЗаработке.Дни > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправкаОЗаработке.ПериодС
	|ИТОГИ
	|	СУММА(ДнейБолезниУходаЗаДетьми)
	|ПО
	|	Ссылка,
	|	РасчетныйГод";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

////////////////////////////////
// Механизм фиксации изменений.

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ПараметрыФиксацииВторичныхДанных = ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксацииВторичныхДанных(ФиксацияОписаниеФиксацииРеквизитов(), , ФиксацияОписанияТЧ());
	УчетПособийСоциальногоСтрахования.ДополнитьПараметрыФиксацииИсходящаяСправкаОЗаработкеДляРасчетаПособий(ПараметрыФиксацииВторичныхДанных);  
	Возврат ПараметрыФиксацииВторичныхДанных;
КонецФункции

Функция ФиксацияОписаниеФиксацииРеквизитов()
	
	ОписаниеФиксацииРеквизитов = Новый Соответствие;
	
	// Данные работодателя
	ОписаниеФиксацииРеквизитов.Вставить("НаименованиеТерриториальногоОрганаФСС", 	ФиксацияОписаниеФиксацииРеквизита("НаименованиеТерриториальногоОрганаФСС","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("Руководитель", 							ФиксацияОписаниеФиксацииРеквизита("Руководитель","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("ГлавныйБухгалтер", 						ФиксацияОписаниеФиксацииРеквизита("ГлавныйБухгалтер","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("ДолжностьРуководителя", 					ФиксацияОписаниеФиксацииРеквизита("ДолжностьРуководителя","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("ТелефонОрганизации", 						ФиксацияОписаниеФиксацииРеквизита("ТелефонОрганизации","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("РегистрационныйНомерФСС", 					ФиксацияОписаниеФиксацииРеквизита("РегистрационныйНомерФСС","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("ДополнительныйКодФСС", 					ФиксацияОписаниеФиксацииРеквизита("ДополнительныйКодФСС","РеквизитыОрганизации", "Организация"));
	ОписаниеФиксацииРеквизитов.Вставить("КодПодчиненностиФСС", 						ФиксацияОписаниеФиксацииРеквизита("КодПодчиненностиФСС","РеквизитыОрганизации", "Организация"));
	
	// Данные сотрудника
	ОписаниеФиксацииРеквизитов.Вставить("Фамилия", 									ФиксацияОписаниеФиксацииРеквизита("Фамилия","ФИОСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("Имя", 										ФиксацияОписаниеФиксацииРеквизита("Имя","ФИОСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("Отчество",	 								ФиксацияОписаниеФиксацииРеквизита("Отчество","ФИОСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("СтраховойНомерПФР", 						ФиксацияОписаниеФиксацииРеквизита("СтраховойНомерПФР","РеквизитыСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("ВидДокумента", 							ФиксацияОписаниеФиксацииРеквизита("ВидДокумента","РеквизитыУдостоверения", "Сотрудник", , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("СерияДокумента", 							ФиксацияОписаниеФиксацииРеквизита("СерияДокумента","РеквизитыУдостоверения", "Сотрудник", , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("НомерДокумента", 							ФиксацияОписаниеФиксацииРеквизита("НомерДокумента","РеквизитыУдостоверения", "Сотрудник", , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("КемВыданДокумент", 						ФиксацияОписаниеФиксацииРеквизита("КемВыданДокумент","РеквизитыУдостоверения", "Сотрудник", , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("ДатаВыдачиДокумента", 						ФиксацияОписаниеФиксацииРеквизита("ДатаВыдачиДокумента","РеквизитыУдостоверения", "Сотрудник", , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("АдресПоПрописке", 							ФиксацияОписаниеФиксацииРеквизита("АдресПоПрописке","РеквизитыСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("ПериодРаботыС", 							ФиксацияОписаниеФиксацииРеквизита("УдалитьПериодРаботыС","РеквизитыСотрудника", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("ПериодРаботыПо", 							ФиксацияОписаниеФиксацииРеквизита("УдалитьПериодРаботыПо","РеквизитыСотрудника", "Сотрудник"));
	
	// Данные о заработке
	ОписаниеФиксацииРеквизитов.Вставить("ДанныеОЗаработкеЗаработок", 				ФиксацияОписаниеФиксацииРеквизита("Заработок","ДанныеОЗаработке", "ЗаработокСотрудника", Истина, Истина, "ДанныеОЗаработке"));
	
	Возврат Новый ФиксированноеСоответствие(ОписаниеФиксацииРеквизитов);  
	
КонецФункции 

Функция ФиксацияОписанияТЧ()
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("РасчетныйГод");
	
	СтруктураКлючевыхПолей = Новый Структура("ДанныеОЗаработке", МассивПолей);
	
	Возврат	СтруктураКлючевыхПолей
КонецФункции

Функция ФиксацияОписаниеФиксацииРеквизита(ИмяРеквизита, 
	ИмяГруппы, 
	ОснованиеЗаполнения,
	РеквизитСтроки = Ложь,
	ФиксацияГруппы = Ложь, 
	Путь = "",
	Используется = Истина, 
	ОтображатьПредупреждение = Истина, 
	СтрокаПредупреждения =  "")
	
	ФиксацияРеквизита = ФиксацияВторичныхДанныхВДокументах.СтруктураПараметровОписанияФиксацииРеквизитов();
	ФиксацияРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
	ФиксацияРеквизита.Вставить("Используется", Используется);
	ФиксацияРеквизита.Вставить("ИмяГруппы", ИмяГруппы);
	ФиксацияРеквизита.Вставить("ФиксацияГруппы", ФиксацияГруппы);
	ФиксацияРеквизита.Вставить("ОснованиеЗаполнения", ОснованиеЗаполнения);
	ФиксацияРеквизита.Вставить("Путь", Путь);
	ФиксацияРеквизита.Вставить("ОтображатьПредупреждение", ОтображатьПредупреждение);
	Если СтрокаПредупреждения <> "" Тогда
		ФиксацияРеквизита.Вставить("СтрокаПредупреждения", СтрокаПредупреждения);
	КонецЕсли;
	ФиксацияРеквизита.Вставить("РеквизитСтроки", РеквизитСтроки);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксацииРеквизита(ФиксацияРеквизита)
КонецФункции 

// Механизм фиксации изменений.
////////////////////////////////

#КонецОбласти

#КонецЕсли