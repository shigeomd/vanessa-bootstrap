////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьНовыйДокумент();
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПоступлениеДенежныхДокументов";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И НЕ Объект.Проведен Тогда
		Объект.Дата = Объект.ДатаВходящегоДокумента + (Объект.Дата - НачалоДня(Объект.Дата));
		ДатаПриИзмененииНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаДенежныхДокументовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетУчетаДенежныхДокументов) Тогда
		СчетУчетаДенежныхДокументовПриИзмененииСервер();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ПараметрыДокумента = ПолучитьДанныеВалютаПриИзменении(
			Объект.ВалютаДокумента,
			Объект.Дата,
			Объект.ВидОперации, Объект.ДоговорКонтрагента);
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыДокумента);
		
		УстановитьПараметрыВыбора(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект. Контрагент) Тогда
		ПараметрыДокумента = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, СчетУчетаДенежныхДокументов, ВалютаДокумента",
			Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.СчетУчетаДенежныхДокументов, Объект.ВалютаДокумента);
		
		ПараметрыДокумента = ПолучитьДанныеКонтрагентПриИзменении(ПараметрыДокумента, Объект.Дата);
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыДокумента);
	КонецЕсли;
	
	УстановитьДоступностьСвязанныхЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.ПринятоОт = ПолучитьТекстПринятоОт(Объект.Организация, Объект.Контрагент, Объект.Дата);
	Иначе
		Объект.ПринятоОт = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятоОтПрочееНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаСписка",
		Новый Структура("РежимВыбора", Истина), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятоОтПрочееОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Объект.ПринятоОт = ПолучитьТекстПринятоОт(Объект.Организация, ВыбранноеЗначение, Объект.Дата);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомПрочееПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаРасчетовСКонтрагентом);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1",
		"СубконтоКт2",
		"СубконтоКт3");
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентом, Объект, ПоляОбъекта,, ЗначенияСубконто);
	
	ИзменитьПараметрыВыбораПолейСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "СубконтоКт%Индекс%");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДенежныеДокументы

&НаКлиенте
Процедура ДенежныеДокументыДенежныйДокументПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ДенежныеДокументы.ТекущиеДанные;
	Если СтрокаПлатеж.Количество = 0 Тогда
		СтрокаПлатеж.Количество = 1;
	КонецЕсли;
	
	Стоимость = ПолучитьСтоимостьИзДенежногоДокумента(СтрокаПлатеж.ДенежныйДокумент);
	СтрокаПлатеж.Сумма = Стоимость * СтрокаПлатеж.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеДокументыКоличествоПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ДенежныеДокументы.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДенежныйДокумент) Тогда
		Стоимость = ПолучитьСтоимостьИзДенежногоДокумента(СтрокаПлатеж.ДенежныйДокумент);
	Иначе
		Стоимость = 0;
	КонецЕсли;
	
	СтрокаПлатеж.Сумма = Стоимость * СтрокаПлатеж.Количество;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ВалютаДокумента

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВалютаДокумента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетУчетаДенежныхДокументовВалютный", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика") Тогда
		Элементы.ГруппаОтКогоСтраницы.ТекущаяСтраница = Элементы.ГруппаПолученоОтПоставщика;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПодотчетногоЛица") Тогда
		Элементы.ГруппаОтКогоСтраницы.ТекущаяСтраница = Элементы.ГруппаПринятоОтПодотчетногоЛица;
	Иначе
		Элементы.ГруппаОтКогоСтраницы.ТекущаяСтраница = Элементы.ГруппаПрочее;
	КонецЕсли;
	
	УстановитьОграничениеТипаКонтрагента(Форма);
	
	Элементы.ВалютаДокумента.Доступность = Форма.СчетУчетаДенежныхДокументовВалютный;
	
	УстановитьДоступностьСвязанныхЭлементов(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСвязанныхЭлементов(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1",
		"СубконтоКт2",
		"СубконтоКт3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто1",
		"ЗаголовокСубконто2",
		"ЗаголовокСубконто3");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",   Форма.Объект.СчетУчетаРасчетовСКонтрагентом);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбора(Форма)
	
	Валютный = Форма.Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета;
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Валютный", Валютный);
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(НовыйПараметр);
	
	ТекущиеПараметрыВыбора = Форма.Элементы.ДоговорКонтрагента.ПараметрыВыбора;
	Для каждого ПараметрВыбора Из ТекущиеПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя <> "Отбор.Валютный" Тогда
			НовыйМассивПараметров.Добавить(ПараметрВыбора);
		КонецЕсли;
	КонецЦикла;
	
	Форма.Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.Заголовок = "Контрагент";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПодотчетногоЛица") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.Заголовок = "Подотчетное лицо";
	Иначе // .ПрочаяВыдача
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.Контрагент.Заголовок = "Контрагент";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтоимостьИзДенежногоДокумента(Знач ДенежныйДокумент)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДенежныйДокумент, "Стоимость");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВалютаПриИзменении(Знач ВалютаДокумента, Знач Дата, Знач ВидОперации, Знач ДоговорКонтрагента)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	СтруктураДанные.Вставить("КурсВзаиморасчетов"     , СтруктураКурса.Курс);
	СтруктураДанные.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика
		И ЗначениеЗаполнено(ДоговорКонтрагента)
		И ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаДокумента Тогда
		СтруктураДанные.Вставить("ДоговорКонтрагента", Неопределено);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеКонтрагентПриИзменении(ПараметрыДокумента, ДатаДокумента)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыДокумента.СчетУчетаДенежныхДокументов);
	СтруктураДополнительныхПараметров = Новый Структура();
	СтруктураДополнительныхПараметров.Вставить("Валютный", Новый Структура("ЗначениеОтбора", СвойстваСчета.Валютный));
	СтруктураДополнительныхПараметров.Вставить("ВалютаВзаиморасчетов", Новый Структура("ЗначениеОтбора", ПараметрыДокумента.ВалютаДокумента));
	
	ПараметрыДокумента = ЗаполнениеДокументов.ПолучитьДанныеКонтрагентПриИзменении(
		ПараметрыДокумента, СписокВидовДоговоров, СтруктураДополнительныхПараметров);
	
	СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыДокумента.Контрагент, ДатаДокумента);
	ПараметрыДокумента.Вставить("ПринятоОт", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,"));
	
	Возврат ПараметрыДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстПринятоОт(Знач Организация, Знач ФизЛицо, Знач Дата)
	
	ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Организация, ФизЛицо, Дата, Истина);
	
	Возврат ДанныеФизЛица.Представление;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента           = Объект.Дата;
	ТекущийВидОперации             = Объект.ВидОперации;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаДенежныхДокументов);
	СчетУчетаДенежныхДокументовВалютный = ДанныеСчета.Валютный;
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаРасчетовСКонтрагентом);
	
	Элементы.Контрагент.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Элементы.ПодотчетноеЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	
	ЗаполнитьСчетаДенежныхДокументов();
	
	УстановитьПараметрыВыбора(ЭтотОбъект);
	ИзменитьПараметрыВыбораПолейСубконто();
	
	УстановитьСостояниеДокумента();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовыйДокумент()
	
	ПараметрыДокумента = ПолучитьДанныеВалютаПриИзменении(
		Объект.ВалютаДокумента,
		Объект.Дата,
		Объект.ВидОперации,
		Объект.ДоговорКонтрагента);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПараметрыВыбораПолейСубконто()
	
	ПараметрыДокумента = ПолучитьСписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "СубконтоКт%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		ЭтотОбъект, Объект, "СубконтоКт%Индекс%", "СубконтоКт%Индекс%", ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Организация",              Объект.Организация);
	ПараметрыДокумента.Вставить("Дата",                     Объект.Дата);
	ПараметрыДокумента.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",       Объект.ДоговорКонтрагента);
	
	ПараметрыДокумента = ЗаполнениеДокументов.ПолучитьДанныеОрганизацияПриИзменении(ПараметрыДокумента);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыДокумента);
	
	ИзменитьПараметрыВыбораПолейСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	Объект.ДоговорКонтрагента             = Неопределено;
	Объект.СчетУчетаРасчетовСКонтрагентом = Неопределено;
	Объект.ПринятоОт                      = "";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентом, Объект, ПоляОбъекта,, ЗначенияСубконто);
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаРасчетовСКонтрагентом);
	
	УправлениеФормой(ЭтотОбъект);
	
	Если Элементы.Контрагент.ОграничениеТипа.Типы().Количество() = 0 Тогда
		Объект.Контрагент = Неопределено;
	Иначе
		Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СчетУчетаДенежныхДокументовПриИзмененииСервер()
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаДенежныхДокументов);
	СчетУчетаДенежныхДокументовВалютный = ДанныеСчета.Валютный;
	
	Если НЕ СчетУчетаДенежныхДокументовВалютный Тогда
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		УстановитьПараметрыВыбора(ЭтотОбъект);
		ПараметрыДокумента = ПолучитьДанныеВалютаПриИзменении(
			Объект.ВалютаДокумента,
			Объект.Дата,
			Объект.ВидОперации,
			Объект.ДоговорКонтрагента);
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаДенежныхДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ПланСчетов
	|ГДЕ
	|	НЕ ПланСчетов.Ссылка.ЗапретитьИспользоватьВПроводках
	|	И ПланСчетов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДенежныеДокументы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Ссылка.Код";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		МассивСчетов = Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	Иначе
		МассивСчетов = Новый Массив;
	КонецЕсли;
	
	Если МассивСчетов.Количество() > 0 Тогда
		НовыйМассивПараметров = Новый Массив();
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивСчетов)));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		Элементы.СчетУчетаДенежныхДокументов.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать
