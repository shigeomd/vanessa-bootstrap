&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		Модифицированность = Истина;
		
		ВидОперацииОбработатьИзменение();
		
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
		УстановитьЗаголовокФормы();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;

	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеВозвратТоваровПоставщику";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтотОбъект);
	
	УстановитьЗаголовокФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру Тогда 
		
		РеквизитыСФ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ТекущийОбъект.Ссылка);
		
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
		
	УстановитьСостояниеДокумента();

	ПроверкаКонтрагентов.ОпределитьНаличиеИзмененияВСчетеФактуре(ЭтотОбъект, СчетФактура);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПроверитьКонтрагентовПриОткрытии();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если КонтрагентыВСчетеФактуреИзменилисьПослеЗаписи Тогда
		ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактура);
	КонецЕсли;
	
	Оповестить("Запись_ВозвратТоваровПоставщику", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовВХранилище(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПроверкаКонтрагентов.ПередЗаписьюНаСервере(ЭтотОбъект, СчетФактура);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

	ЗапуститьПроверкуКонтрагентов(Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СвойстваСклада = ОбщегоНазначенияБПВызовСервера.ЗначенияРеквизитовОбъекта(
			Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
		
		ТипЦенСклада   = СвойстваСклада.ТипЦенРозничнойТорговли;
		ТипСклада      = СвойстваСклада.ТипСклада;
	Иначе
		ТипЦенСклада = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
		ТипСклада    = ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад");
	КонецЕсли;

	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	
	Если НТТ И РассчитыватьСуммаВРознице Тогда
		ТекстВопроса = НСтр("ru = 'Свернуть табличную часть по номенклатуре?'");
		ЗаголовокВопроса = НСтр("ru = 'Свертка по номенклатуре'");
		Оповещение = Новый ОписаниеОповещения("ВопросСвернутьТабличнуюЧастьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
	Иначе
		ТоварыСвернуты	= Ложь;
		
		СкладПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;

	ЗапуститьПроверкуКонтрагентов(Элемент); 

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)

	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураВыданный");

	ЗапуститьПроверкуКонтрагентов(Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Товары>

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|НомерГТД, СтранаПроисхождения,
		|ЦенаВРознице, СуммаВРознице, СтавкаНДСВРознице,
		|Всего, СчетУчетаЗабалансовый");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|РассчитыватьСуммаВРознице, ЗаполнятьСтавкуНДСВРознице, ЭтоКомиссия");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.РассчитыватьСуммаВРознице		= РассчитыватьСуммаВРознице;
	ДанныеОбъекта.ЗаполнятьСтавкуНДСВРознице	= НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице;
	ДанныеОбъекта.ЭтоКомиссия					= ЭтоКомиссия;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") 
		ИЛИ Объект.ДокументБезНДС Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	КонецЕсли;

	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = неопределено Тогда
		Возврат;
	КонецЕсли;

	// Установить коэффициент
	СтрокаТабличнойЧасти.Коэффициент = 1;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПересчитатьСуммуТовары("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммуТовары("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПересчитатьЦену("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьНДС("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	Строка = Элементы.Товары.ТекущиеДанные;
	Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВРознице;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВРозницеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЦенаВРознице = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.СуммаВРознице/СтрокаТабличнойЧасти.Количество);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.СчетУчетаЗабалансовый = ЗначениеЗаполнено(ТекущиеДанные.СчетУчета)
		И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчета).Забалансовый;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияПриИзменении(Элемент)

	Строка = Элементы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		Строка.Себестоимость = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",   Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",    Объект.Организация);
	ПараметрыОбъекта.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",      ТекущиеДанные.СчетУчета);
	ПараметрыОбъекта.Вставить("Склад",          Объект.Склад);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.ВозвратТоваровПоставщику.ТабличныеЧасти.Товары.Реквизиты.ДокументОприходования.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// Подготовим данные для установки договора
	КонтейнерОбъект = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(КонтейнерОбъект, Объект);
	
	КонтейнерСтрока = Новый Структура("Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(КонтейнерСтрока, ТекущиеДанные);
	
	// Подготовимся заполнять счета
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Контрагент, Товары.ДоговорКонтрагента",
		Объект,
		ТекущиеДанные,
		КонтейнерОбъект,
		КонтейнерСтрока);
	
	// Получим данные с сервера	
	ЗаполненныеРеквизиты = ТоварыКонтрагентПриИзмененииНаСервере(КонтейнерОбъект, КонтейнерСтрока, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ЗаполненныеРеквизиты);

	ЗапуститьПроверкуКонтрагентов(Элементы.Товары);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДоговорКонтрагентаПриИзменении(Элемент)

	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.ДоговорКонтрагента",
		Объект,
		Элементы.Товары.ТекущиеДанные);
	
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", 	Объект.Организация);
	Отбор.Вставить("Номенклатура", 	ТекущиеДанные.Номенклатура);
	
	ОткрытьФорму("Справочник.НомераГТД.Форма.ФормаВыбораПоОстаткам", Новый Структура("Отбор, Дата", Отбор, Объект.Дата) , ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВозвратнаяТара
//

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)

	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, СтрокаТабличнойЧасти);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ВидОперации, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.СуммаВключаетНДС = Истина;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"ВозвратнаяТара.Номенклатура",
		Объект,
		СтрокаТабличнойЧасти,
		ПараметрыОбъекта,
		ДанныеСтрокаТаблицы);
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(Элементы.ВозвратнаяТара.ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)
	
	ПересчитатьСуммуТовары("ВозвратнаяТара");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммуТовары("ВозвратнаяТара");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)
	
	ПересчитатьЦену("ВозвратнаяТара");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Товары", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Товары", "Заполнить");

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияТара(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("ВозвратнаяТара", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюТара(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("ВозвратнаяТара", "Заполнить");

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("ВозвратнаяТара");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыписатьСчетФактуру(Команда)
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруВыданный(ЭтаФорма);
	Если РеквизитыСФ <> Неопределено Тогда 
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактура); 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ТоварыДокументОприходования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));


	// ТоварыСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Себестоимость", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));


	// ТоварыЦенаВРознице, ТоварыСуммаВРознице, ТоварыСтавкаНДСВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаВРознице");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаВРознице");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"НТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСчетУчета, ТоварыКонтрагент, ТоварыДоговорКонтрагента, ТоварыСчетРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СчетУчетаРасчетовПоТаре
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовПоТаре");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЕстьВозвратнаяТара", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СчетУчетаРасчетовПоПретензиям, СчетУчетаРасчетовСКонтрагентом

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовПоПретензиям");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовСКонтрагентом");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Поля не используются для вида операции "Из переработки"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерГТД");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоМест");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Поля не используются, если по розничному складу НТТ номенклатура не вводится.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатураАртикул");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатураКод");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦена");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаВРознице");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТоварыСвернуты", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДСВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РазделениеПоСтавкамВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"НТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыКонтрагент, ТоварыДоговорКонтрагента, ТоварыСчетРасчетов
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасчетов");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСтавкаНДС, ТоварыСуммаНДС, ТоварыСчетУчетаНДС, ТоварыВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтранаПроисхождения
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НомерГТД", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента			= Объект.Дата;
	ВалютаРегламентированногоУчета 	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов");
		ЭтоКомиссия          = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Иначе
		ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		ЭтоКомиссия          = Ложь;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) 
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменениеНаСервере(Новый Массив);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДоговорУказан Тогда
		УстановитьПараметрыВыбораДляСчетаУчета(ЭтаФорма, Объект.ВидОперации);
	КонецЕсли;
	
	ТребуетсяСчетФактура = Объект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
		И НЕ ЭтоКомиссия;
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
		ТипЦенСклада = СвойстваСклада.ТипЦенРозничнойТорговли;
		ТипСклада    = СвойстваСклада.ТипСклада;
	Иначе
		ТипЦенСклада = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ТипСклада    = Перечисления.ТипыСкладов.ОптовыйСклад;
	КонецЕсли;
	
	СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	
	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	
	Если НТТ И РассчитыватьСуммаВРознице И Объект.Товары.Количество() > 0 Тогда
		
		ТоварыСвернуты	= Истина;
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				ТоварыСвернуты	= Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ТоварыСвернуты	= Ложь;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьПараметрыВыбора(ЭтаФорма);
	
	УстановитьЗаголовокФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС               	 = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	СпособОценкиТоваровВРознице 	 = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	УчетВПродажныхЦенах         	 = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	ИспользоватьТипыЦенНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");	 
	ЕстьВалютныйУчет 				 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();

КонецПроцедуры

// Внешний вид, содержание надписей и т.п.

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаВозвратнаяТара.Видимость =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");

	Элементы.ГруппаРасчеты.Видимость =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Оборудование") Тогда
		Элементы.ГруппаТовары.Заголовок = НСтр("ru = 'Оборудование'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		Элементы.ГруппаТовары.Заголовок = НСтр("ru = 'Материалы'");
	Иначе
		Элементы.ГруппаТовары.Заголовок = НСтр("ru = 'Товары'");
	КонецЕсли;

	// Счет-фактура
	Если Форма.ТребуетсяСчетФактура И НЕ ЗначениеЗаполнено(Форма.СчетФактура) Тогда
		Элементы.ГруппаСчетФактура.ТекущаяСтраница = Элементы.ГруппаВыписатьСчетФактуру;
	Иначе
		Элементы.ГруппаСчетФактура.ТекущаяСтраница = Элементы.ГруппаСчетФактураСсылка;
	КонецЕсли;
	Если Элементы.НадписьСчетФактура.Гиперссылка <> Форма.ТребуетсяСчетФактура Тогда
		Элементы.НадписьСчетФактура.Гиперссылка = Форма.ТребуетсяСчетФактура;
	КонецЕсли;
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.Сделка.Доступность                   = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Элементы.ТоварыКонтрагент.Доступность 		  =  НЕ Форма.ЭтоКомиссия И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия");
	Элементы.ТоварыДоговорКонтрагента.Доступность =  НЕ Форма.ЭтоКомиссия И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия");
	Элементы.ТоварыСчетРасчетов.Доступность 	  =  НЕ Форма.ЭтоКомиссия И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия");

	Элементы.ИтогиВсегоНДС.Доступность = 
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки");
		
	Элементы.ИтогиВсегоНДС.Видимость 	 	= Не Объект.ДокументБезНДС;
	Элементы.ГруппаСчетФактура.Видимость	= Не Объект.ДокументБезНДС;
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ТекстЗаголовка = НСтр("ru = 'Возврат товаров поставщику'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Формат(Объект.Дата, "ДЛФ=D"));
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка + " (" + Строка(Объект.ВидОперации) + ")";

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	Форма.ИтогиВсего = Объект.Товары.Итог("Всего");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, ВалютаРегламентированногоУчета",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Форма.ВалютаРегламентированногоУчета);
		
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		СтруктураНадписи.Вставить("СуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
		СтруктураНадписи.Вставить("ДокументБезНДС",       Объект.ДокументБезНДС);
	КонецЕсли;
	
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;

	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуру(Форма, РеквизитыСФ = Неопределено)

	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруВыданный(
		Форма,
		РеквизитыСФ);
		
КонецПроцедуры

// Облуживание типа цен - валюты - НДС:

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"     , Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс"                , Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность"           , Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент"          , Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор"             , Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация"         , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента"       , Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен"              , Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТолькоПросмотр"      , ТолькоПросмотр);

	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		СтруктураПараметров.Вставить("СуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ДокументБезНДС",       Объект.ДокументБезНДС);
	КонецЕсли;

	// 2. Открвыаем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры
		ИЛИ (ЕстьВалютныйУчет И ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета) Тогда 
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
			Если Не ПлательщикНДС Тогда
				СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
			КонецЕсли;
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		КонецЕсли;
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);		
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
			
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения 	 = Объект.ВалютаДокумента;
		КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ДокументБезНДС		   = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Модифицированность = Истина;
		
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены, 
				СтруктураЦеныИВалюта.ПересчитатьЦены, 
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
			
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь);
	
	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		Префикс = "Товары[" + Формат(Строка.НомерСтроки - 1, "ЧН=;ЧГ=") + "].";
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, Префикс);
	КонецЦикла;
	Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
		Префикс = "ВозвратнаяТара[" + Формат(Строка.НомерСтроки - 1, "ЧН=;ЧГ=") + "].";
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, Префикс);
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества, Префикс)

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
            Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
                ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
            Иначе
                ЦенаВключаетНДС = Ложь;
            КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);

		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		
		Если Объект.ДокументБезНДС Тогда
			Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;

		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		Строка.Всего 	= Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
	Иначе
		Строка.Цена     = Цена;
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;

	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()

	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("ВидОперации");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда

		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.НомерГТД = Справочники.НомераГТД.ПустаяСсылка();
			СтрокаТовара.СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка();
		КонецЦикла;

	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
			ПолучитьМассивВидовДоговоров(Объект.ВидОперации));
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения);
		КонецЕсли;
	КонецЕсли;

	ТребуетсяСчетФактура = 
		Объект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
		И НЕ ЭтоКомиссия;
		
	ЗаполнитьСчетаУчета("ВидОперации", ПричиныИзменения);
		
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;

	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;

	ПодразделениеПоУмолчанию = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменениеНаСервере(ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("Организация", ПричиныИзменения);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменениеНаСервере(Новый Массив);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("Контрагент");

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров(Объект.ВидОперации));

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения);
	КонецЕсли;

	ЗаполнитьСчетаУчета("Контрагент", ПричиныИзменения);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение(Новый Массив);
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("ДоговорКонтрагента");

	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения   		= Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения 			= Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "Владелец, ВалютаВзаиморасчетов, ТипЦен, ВидДоговора");

	Если ДоговорУказан Тогда
		ВалютаВзаиморасчетов   = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента = ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	ЭтоКомиссия       = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
	Если ДоговорУказан Тогда
		УстановитьПараметрыВыбораДляСчетаУчета(ЭтаФорма, Объект.ВидОперации);
	КонецЕсли;
	
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		 Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		 Объект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.ТипЦен, "ЦенаВключаетНДС");
	КонецЕсли;
	
	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	
	Если ЕстьСтрокиВТабличныхЧастях() И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, 
			КурсДоИзменения, 
			КратностьДоИзменения, 
			Ложь, 
			ПересчитатьЦены, 
			ПересчитатьНДС);
	КонецЕсли;
	
	ТребуетсяСчетФактура = Объект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
		И НЕ ЭтоКомиссия;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	
	ЗаполнитьСчетаУчета("ДоговорКонтрагента", ПричиныИзменения);
	
	УстановитьПараметрыВыбора(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСвернутьТабличнуюЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТоварыСвернуты = (Результат = КодВозвратаДиалога.Да);
	СкладПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	
	Если НЕ ЕстьСтрокиВТабличныхЧастях() Тогда
		Возврат;
	КонецЕсли;
	
	Если РассчитыватьСуммаВРознице 
		ИЛИ (НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице) Тогда
	
		РассчитатьСуммуВРознице();
	
	КонецЕсли; 
	
	Если ТоварыСвернуты Тогда
		
		ТаблицаТоваров = Объект.Товары.Выгрузить();
		ТаблицаТоваров.Свернуть("СтавкаНДС, СтавкаНДСВРознице", "Сумма, СуммаНДС, Всего, СуммаВРознице");
		Объект.Товары.Загрузить(ТаблицаТоваров);
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета("Склад", Объект));
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВРознице()
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад, ЭтоКомиссия");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
	
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовары.Номенклатура);
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РассчитыватьСуммаВРознице Тогда
			СтрокаТовары.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
		КонецЕсли;
		
		Если НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице Тогда
			СтрокаТовары.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
		КонецЕсли;
		
		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТовары);
		
	КонецЦикла; 
	
КонецПроцедуры
 

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровПоставщику, 
		СчетаУчетаКЗаполнению, 
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
		
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
		СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
		СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
		
		Если ДанныеОбъекта.РассчитыватьСуммаВРознице Тогда
			СтрокаТабличнойЧасти.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
		КонецЕсли;
		
		Если ДанныеОбъекта.ЗаполнятьСтавкуНДСВРознице Тогда
			СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДС;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровПоставщику, 
		СчетаУчетаКЗаполнению, 
		ДанныеОбъекта,
		"ВозвратнаяТара",
		СтрокаТаблицы);
		
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗаполненныеСчета);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТаблицы.Номенклатура, ДанныеОбъекта, Ложь);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Цена = СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТоварыКонтрагентПриИзмененииНаСервере(Знач ДанныеОбъекта, Знач ДанныеСтроки, Знач СчетаУчетаКЗаполнению)

	Результат = Новый Структура;
	
	МассивВидовАгентскихДоговоров = Новый Массив;
	МассивВидовАгентскихДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);

	ДоговорИзменен = БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДанныеСтроки.ДоговорКонтрагента,
		ДанныеСтроки.Контрагент,
		ДанныеОбъекта.Организация,
		МассивВидовАгентскихДоговоров);
		
	Если ДоговорИзменен Тогда
		Результат.Вставить("ДоговорКонтрагента", ДанныеСтроки.ДоговорКонтрагента);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СчетаУчетаКЗаполнению, "Товары.ДоговорКонтрагента");
	КонецЕсли;
		
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ВозвратТоваровПоставщику, 
		СчетаУчетаКЗаполнению, 
		ДанныеОбъекта,
		"Товары",
		ДанныеСтроки);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ЗаполненныеСчета, Истина);
	
	Возврат Результат;

КонецФункции

// Пересчеты реквизитов в строках табличных частей

&НаКлиенте
Процедура ПересчитатьСуммуТовары(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(Строка, Объект.СуммаВключаетНДС);

	Если НТТ
		 И УчетВПродажныхЦенах
		 И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия")
		 И НЕ ЭтоКомиссия Тогда

		Строка.СуммаВРознице = Строка.Количество * Строка.ЦенаВРознице;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦену(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
	Если ИмяТабЧасти = "Товары" Тогда
		ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);
	КонецЕсли;

КонецПроцедуры

// Заполнение документа по документам - основаниям:

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(ТабличнаяЧасть, СпособЗаполнения)

	// Оценочная стоимость возвратной тары учитывается в валюте взаиморасчетов по договору,
	// поэтому перед заполнением договор должен быть выбран.
	Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Не выбран договор контрагента!'"));
		Возврат;
	КонецЕсли;

	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
		И Объект[ТабличнаяЧасть].Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ДополнитьТабличнуюЧастьПоПоступлению(ТабличнаяЧасть, СпособЗаполнения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьТабличнуюЧастьПоПоступлению(ТабличнаяЧасть, СпособЗаполнения)

	Если (СпособЗаполнения = "Заполнить" И Не ЗначениеЗаполнено(Объект.Сделка))
		ИЛИ (СпособЗаполнения = "Добавить") Тогда

		// Теперь нужно выбрать документ, по которому будем заполнять
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура("ДоговорКонтрагента,Проведен",Объект.ДоговорКонтрагента,Истина);
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Отбор.Вставить("Организация",Объект.Организация);
		КонецЕсли;

		СписокОпераций = Новый СписокЗначений;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку"));
		Иначе
			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия"));
			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
			СписокОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"));
		КонецЕсли;
		Отбор.Вставить("ВидОперации", СписокОпераций);

		ПараметрыФормы.Вставить("Отбор",Отбор);

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы,ЭтаФорма,,,,ОповещениеОЗакрытии);	
	Иначе
		ДокументПоступления = Объект.Сделка;
		ЗаполнитьТабличнуюЧастьПоПоступлениюПослеПолученияДокумента(ДокументПоступления, ТабличнаяЧасть, СпособЗаполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект[ДополнительныеПараметры.ТабличнаяЧасть].Очистить();
		ДополнитьТабличнуюЧастьПоПоступлению(ДополнительныеПараметры.ТабличнаяЧасть, ДополнительныеПараметры.СпособЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДокументПоступления = РезультатЗакрытия;
	
	Если Не ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат; // ничего не выбрали.
	КонецЕсли;

	ТабличнаяЧасть   = ДополнительныеПараметры.ТабличнаяЧасть;
	СпособЗаполнения = ДополнительныеПараметры.СпособЗаполнения;
	
	Если СпособЗаполнения = "Заполнить" Тогда
		Объект.Сделка = ДокументПоступления;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьПоПоступлениюПослеПолученияДокумента(ДокументПоступления, ТабличнаяЧасть, СпособЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлениюПослеПолученияДокумента(ДокументПоступления, ТабличнаяЧасть, СпособЗаполнения)
	
	// Вызываем процедуру заполнения.
	Если СпособЗаполнения = "Заполнить" Тогда

		Если ТабличнаяЧасть = "Товары" Тогда
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Оборудование") Тогда
				ЗаполнитьОборудованиеПоОснованию(ДокументПоступления);
			Иначе
				ЗаполнитьТоварыПоОснованию(ДокументПоступления);
			КонецЕсли;
		ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда
			ЗаполнитьВозвратнуюТаруПоОснованию(ДокументПоступления);
		КонецЕсли;

	Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору

		ДобавитьСтрокиТабличнойЧастиИзДокументаПоступления(ДокументПоступления, ТабличнаяЧасть);

	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиТабличнойЧастиИзДокументаПоступления(ДокументПоступления, ТабличнаяЧасть)

	ВидОперацииОборудование = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.Оборудование"));

	Выборка = ПолучитьДанныеДляКопирования(ДокументПоступления, ТабличнаяЧасть,ВидОперацииОборудование);
	МетаданныеДокумента = Объект.Ссылка.Метаданные();

	// Обходим строки Реализации
	СтруктураОтбора = Новый Структура();
	Пока Выборка.Следующий() Цикл

		// Ищем текущую позицию основания в табличной части документа возврата.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ТабличнаяЧасть, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> неопределено Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество =  СтрокаТабличнойЧасти.Количество + Выборка.Количество;
 			Если ТабличнаяЧасть = "Товары" Тогда

				СтрокаТабличнойЧасти.КоличествоМест = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0,
											СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.Коэффициент);

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

			ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

			КонецЕсли;

		Иначе

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ТабличнаяЧасть].Добавить();
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Выборка.Количество;

			Если ТабличнаяЧасть = "Товары" Тогда

				СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент      = 1;

				СтрокаТабличнойЧасти.КоличествоМест   = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0,
												СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.Коэффициент);

				Если НЕ ВидОперацииОборудование Тогда
					СтрокаТабличнойЧасти.НомерГТД            = Выборка.НомерГТД;
					СтрокаТабличнойЧасти.СтранаПроисхождения = Выборка.СтранаПроисхождения;
					СтрокаТабличнойЧасти.Контрагент 		 = Выборка.Контрагент;
					СтрокаТабличнойЧасти.ДоговорКонтрагента	 = Выборка.ДоговорКонтрагента;
					СтрокаТабличнойЧасти.СчетРасчетов		 = Выборка.СчетРасчетов;
				КонецЕсли;

				// Заполняем реквизиты табличной части.
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Объект,"Товары",МетаданныеДокумента);

				// Пересчитаем цену в валюту документа.
				Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
				                  Выборка.ВалютаДокумента,    Объект.ВалютаДокумента,
				                  Выборка.КурсДокумента,      ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
				                  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета));

				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 Выборка.СуммаВключаетНДС,
				                                                 Объект.СуммаВключаетНДС,
				                                                 УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				СтрокаТабличнойЧасти.СчетУчета  = Выборка.СчетУчета;

				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

			ИначеЕсли ТабличнаяЧасть = "ВозвратнаяТара" Тогда

				// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
				СтрокаТабличнойЧасти.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
				                  Выборка.ВалютаВзаиморасчетов, Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				                  Выборка.КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета),
				                  Выборка.КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета));

				// По флагам налогообложения тару пересчитывать не надо,
				// Считаем, для тары флаги одинаковы (с НДС),

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

				СтрокаТабличнойЧасти.СчетУчета  = Выборка.СчетУчета;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если Объект.ДокументБезНДС
		И Объект.Товары.Итог("СуммаНДС") <> 0 Тогда
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляКопирования(ДокументСсылка, ТабличнаяЧасть,ВидОперацииОборудование)

	// Считываем нужную информацию по документу Реализации
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.СчетУчета,
	|	Док.Цена,";

	Если ТабличнаяЧасть = "Товары" Тогда

		Запрос.Текст = Запрос.Текст + "
		|	Док.ЕдиницаИзмерения,
		|	Док.Коэффициент,
		|	Док.Ссылка.ВалютаДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КурсВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КурсДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КратностьВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КратностьДокумента,
		|	Док.Ссылка.СуммаВключаетНДС,
		|	Док.СтавкаНДС" +
		?(ВидОперацииОборудование, "", ",
		|	Док.НомерГТД,
		|	Док.СтранаПроисхождения,
		|	Док.Контрагент,
		|	Док.ДоговорКонтрагента,
		|	Док.СчетРасчетов");

	Иначе

		Запрос.Текст = Запрос.Текст + "
		|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов  КАК ВалютаВзаиморасчетов,
		|	Док.Ссылка.КурсВзаиморасчетов,
		|	Док.Ссылка.КратностьВзаиморасчетов ";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг" + ?(ТабличнаяЧасть = "Товары",?(ВидОперацииОборудование, ".Оборудование",".Товары"),".ВозвратнаяТара") + " КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Возврат Выборка;

КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения,
	|	ПоступлениеТоваровУслугТовары.СчетУчета,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугТовары.Ссылка.НДСВключенВСтоимость,
	|	ПоступлениеТоваровУслугТовары.ЦенаВРознице,
	|	ПоступлениеТоваровУслугТовары.СуммаВРознице,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДСВРознице,
	|	ПоступлениеТоваровУслугТовары.Контрагент,
	|	ПоступлениеТоваровУслугТовары.ДоговорКонтрагента,
	|	ПоступлениеТоваровУслугТовары.СчетРасчетов,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());

	Если Объект.ДокументБезНДС
		И Объект.Товары.Итог("СуммаНДС") <> 0 Тогда
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И НЕ (Объект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда

		Курс         = ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета);
		КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
		Кратность    = ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета);
		КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, Объект.ВалютаДокумента,
											                                  КурсОсн, Курс, КратностьОсн, Кратность);

			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
												Выборка.СуммаВключаетНДС,
												Объект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

		КонецЦикла;
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОборудованиеПоОснованию(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОборудование.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугОборудование.Ссылка.НДСВключенВСтоимость,
	|	ПоступлениеТоваровУслугОборудование.Ссылка.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугОборудование.Номенклатура,
	|	ПоступлениеТоваровУслугОборудование.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугОборудование.Коэффициент,
	|	ПоступлениеТоваровУслугОборудование.Количество,
	|	ПоступлениеТоваровУслугОборудование.Цена,
	|	ПоступлениеТоваровУслугОборудование.Сумма,
	|	ПоступлениеТоваровУслугОборудование.СуммаНДС,
	|	ПоступлениеТоваровУслугОборудование.СтавкаНДС,
	|	ПоступлениеТоваровУслугОборудование.СчетУчета,
	|	ПоступлениеТоваровУслугОборудование.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|ГДЕ
	|	ПоступлениеТоваровУслугОборудование.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();

	Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());

	Если Объект.ДокументБезНДС
		И Объект.Товары.Итог("СуммаНДС") <> 0 Тогда
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		И НЕ (Объект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда

		Курс         = ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета);
		КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
		Кратность    = ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета);
		КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл

			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.Цена,
				Выборка.ВалютаДокумента,
				Объект.ВалютаДокумента,
				КурсОсн,
				Курс,
				КратностьОсн,
				Кратность);

			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
												Выборка.СуммаВключаетНДС,
												Объект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

		КонецЦикла;
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Номенклатура,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Количество,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Цена,
	|	ПоступлениеТоваровУслугВозвратнаяТара.Сумма,
	|	ПоступлениеТоваровУслугВозвратнаяТара.СчетУчета,
	|	ПоступлениеТоваровУслугВозвратнаяТара.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслугВозвратнаяТара
	|ГДЕ
	|	ПоступлениеТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();

	Курс         = ЗаполнениеДокументов.КурсДокумента(Объект, ВалютаРегламентированногоУчета);
	КурсОсн      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета);
	Кратность    = ЗаполнениеДокументов.КратностьДокумента(Объект, ВалютаРегламентированногоУчета);
	КратностьОсн = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = Объект.ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура     = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество       = Выборка.Количество;
		СтрокаВозвратнойТары.Цена             = Выборка.Цена;
		СтрокаВозвратнойТары.Сумма        	  = Выборка.Сумма;
		СтрокаВозвратнойТары.СчетУчета  	  = Выборка.СчетУчета;

		// Если валюта документа отличается от валюты основания, пересчитаем цену и суммы.
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента)
		   И НЕ (Объект.ВалютаДокумента = Выборка.ВалютаДокумента) Тогда
			// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
			СтрокаВозвратнойТары.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
											СтрокаВозвратнойТары.Цена, Выборка.ВалютаДокумента, Объект.ВалютаДокумента,
			                            	КурсОсн, Курс, КратностьОсн, Кратность);

			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаВозвратнойТары);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Прочий функционал общего назначения:

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма)
	
	Объект = Форма.Объект;
	
	Форма.РассчитыватьСуммаВРознице = 
		Форма.ТипСклада <> ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад")
		И Форма.УчетВПродажныхЦенах
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия")
		И НЕ Форма.ЭтоКомиссия;
	
	Форма.НТТ = (Форма.ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбора(Форма)

	Элементы = Форма.Элементы;

	МассивВидовДоговоров = Новый ФиксированныйМассив(ПолучитьМассивВидовДоговоров(Форма.Объект.ВидОперации));

	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;

КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()
	
	ЕстьСтроки = Объект.Товары.Количество() > 0;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
		ЕстьСтроки = ЕстьСтроки ИЛИ Объект.ВозвратнаяТара.Количество() > 0;
	КонецЕсли;
	
	Возврат ЕстьСтроки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров(ВидОперации)

	СписокВидовДоговоров = Новый Массив;

	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	Иначе
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	КонецЕсли;

	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	Если СтрокаТаблицы.Свойство("СчетУчета") И СтрокаТаблицы.Свойство("СчетУчетаЗабалансовый") Тогда
		СтрокаТаблицы.СчетУчетаЗабалансовый = ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
			И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета).Забалансовый;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДляСчетаУчета(Форма, ВидОперации)
	
	Элементы = Форма.Элементы;
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия Тогда
		НовыйМассивПараметров = Новый Массив();
		Если Форма.ЭтоКомиссия Тогда
			НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Истина));
		КонецЕсли;
		
		НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		Элементы.ТоварыСчетУчета.ПараметрыВыбора = НовыеПараметрыВыбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	Валюта = Объект.ВалютаДокумента;
	
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Возвратная тара'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Если ТипСклада <> ПредопределенноеЗначение("Перечисление.ТипыСкладов.ОптовыйСклад") Тогда
			ПараметрыФормы.Вставить("ТипЦен", ТипЦенСклада);
		КонецЕсли;
	КонецЕсли;
	
	
	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ПоказыватьЦены"    , ЗначениеЗаполнено(ПараметрыФормы.ТипЦен));
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Склад"             , Объект.Склад);
	ПараметрыФормы.Вставить("Кратность"			, Объект.КратностьВзаиморасчетов);
	ПараметрыФормы.Вставить("Курс"        		, Объект.КурсВзаиморасчетов);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";

	Если ЭтоКомиссия Тогда
		ВидПодбора = "Комитент";
	КонецЕсли;

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	ДобавленныеСтроки = Новый Массив;
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад, ЭтоКомиссия");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС)
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
		
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТовара);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавленныеСтроки.Добавить(СтрокаТаблицы);

		Если ИмяТаблицы = "Товары" Тогда
			
			СтрокаТаблицы.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
			СтрокаТаблицы.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
			СтрокаТаблицы.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
			СтрокаТаблицы.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
			СтрокаТаблицы.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
			
			СтрокаТаблицы.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТаблицы.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			
			Если РассчитыватьСуммаВРознице Тогда
				СтрокаТаблицы.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
			КонецЕсли;
			
			Если НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице Тогда
				СтрокаТаблицы.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
			КонецЕсли;
			
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТаблицы);
			
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС);
			
		ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
			
			СтрокаТаблицы.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТаблицы.Цена, ЦенаВключаетНДС, Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
			
			// Рассчитать реквизиты табличной части
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(ДобавленныеСтроки, ИмяТаблицы, Объект, Документы.ВозвратТоваровПоставщику);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Истина);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 				Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 				Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументБезНДС",               Объект.ДокументБезНДС);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);

	Возврат ПараметрыОбработки;
	
КонецФункции 

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	СтрокиДляДополнительнойОбработки = Обработки.ИзменениеТаблицыТоваров.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.ВозвратТоваровПоставщику, Истина);

	Для Каждого СтрокаТабличнойЧасти ИЗ СтрокиДляДополнительнойОбработки Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтотОбъект);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтотОбъект, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтотОбъект, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтотОбъект, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСпособУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыПереданныеСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыСчетДоходов");
	ЭлементыСчетов.Добавить("ТоварыСчетРасходов");
	ЭлементыСчетов.Добавить("ТоварыСубконто");
	ЭлементыСчетов.Добавить("ВозвратнаяТараСчетУчета");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоТаре");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоПретензиям");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ВозвратТоваровПоставщику",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоПретензиям");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоПретензиям");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоТаре");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоПретензиям");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоТаре");
	КонецЕсли;

	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоПретензиям");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоТаре");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоПретензиям");
	КонецЕсли;

	// Товары.Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
	КонецЕсли;

	// Склад
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Товары.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
	КонецЕсли;

	// ВозвратнаяТара.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВозвратнаяТара.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоПретензиям");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоПретензиям");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоТаре");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоПретензиям");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоТаре");
		КонецЕсли;

		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоПретензиям");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоТаре");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоПретензиям");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
		КонецЕсли;

		// Товары.Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
		КонецЕсли;

		// Склад
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
		КонецЕсли;

		// Товары.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// ВозвратнаяТара.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВозвратнаяТара.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричинаИзменения, ПричиныИзменения)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти
