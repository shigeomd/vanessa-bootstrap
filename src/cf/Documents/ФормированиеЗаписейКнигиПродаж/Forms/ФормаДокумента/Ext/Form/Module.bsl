&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		ЗаполнитьРеквизитыИзПараметровФормы(ЭтаФорма);
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	Если Элементы.ГруппаРеализация.Видимость Тогда
		СписокТабличныхЧастей.Добавить("Реализация"           , "Реализация");
	КонецЕсли;
	Если Элементы.ГруппаАвансы.Видимость Тогда
		СписокТабличныхЧастей.Добавить("Авансы"               , "Авансы");
	КонецЕсли;
	Если Элементы.ГруппаНачисленКУплате.Видимость Тогда
		СписокТабличныхЧастей.Добавить("НачисленКУплате"      , "НачисленКУплате");
	КонецЕсли;
	Если Элементы.ГруппаВосстановленПоАвансам.Видимость Тогда
		СписокТабличныхЧастей.Добавить("ВосстановленПоАвансам", "ВосстановленПоАвансам");
	КонецЕсли;
	Если Элементы.ГруппаВосстановлен.Видимость Тогда
		СписокТабличныхЧастей.Добавить("Восстановлен"         , "Восстановлен");
	КонецЕсли;
	Если Элементы.ГруппаНеОтражаетсяВКниге.Видимость Тогда
		СписокТабличныхЧастей.Добавить("НеОтражаетсяВКниге"   , "НеОтражаетсяВКниге");
	КонецЕсли;
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	Если НЕ ЗначениеЗаполнено(АктивизироватьТабличнуюЧасть) Тогда
		// Если все табличные части пустые, то функция ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть()
		// вернет пустую строку, активизируем при этом первую в списке табличную часть,
		// чтобы не оставались текущими табличные части на скрытых закладках.
		АктивизироватьТабличнуюЧасть = СписокТабличныхЧастей[0].Значение;
	КонецЕсли;
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("СостояниеРегламентнойОперации", 
			?(Объект.Проведен, ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено"), 
							   ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено")));
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеФормированиеЗаписейКнигиПродаж";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьСостояниеДокумента();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСторнирующиеЗаписиДопЛистовВручнуюПриИзменении(Элемент)

	ЕстьСторнирующиеЗаписи = Объект.Реализация.Итог("СторнирующаяЗаписьДопЛистаЧисло")
		+ Объект.Авансы.Итог("СторнирующаяЗаписьДопЛистаЧисло")
		+ Объект.ВосстановленПоАвансам.Итог("СторнирующаяЗаписьДопЛистаЧисло");
		
	Если НЕ Объект.ФормироватьСторнирующиеЗаписиДопЛистовВручную
		И ЕстьСторнирующиеЗаписи Тогда
		
		ТекстВопроса = НСтр("ru = 'Удалить строки с установленным флагом ""Сторнирующая запись доп. листа"" из табличных частей?'"); 
		Оповещение = Новый ОписаниеОповещения("ВопросФормироватьСторнирующиеЗаписиДопЛистовВручнуюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		УправлениеФормой(ЭтаФорма);
		ОбновитьУсловноеОформление(ЭтотОбъект);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Объект.Реализация.Очистить();
	Объект.Авансы.Очистить();
	Объект.НачисленКУплате.Очистить();
	Объект.НеОтражаетсяВКниге.Очистить();
	Объект.Восстановлен.Очистить();
	Объект.ВосстановленПоАвансам.Очистить();
	
	УпрощенныйУчетНДС = УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	Если УпрощенныйУчетНДС Тогда
		Объект.Реализация0 = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Реализация0ПриИзменении(Элемент)

	Если Объект.Реализация.Количество() > 0
		ИЛИ Объект.Авансы.Количество() > 0
		ИЛИ Объект.НачисленКУплате.Количество() > 0
		ИЛИ Объект.НеОтражаетсяВКниге.Количество() > 0
		ИЛИ Объект.Восстановлен.Количество() > 0
		ИЛИ Объект.ВосстановленПоАвансам.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросРеализация0ПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru ='Необходимо очистить табличные части. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		УправлениеФормой(ЭтаФорма);
		УстановитьСписокВыбораРеализацияСобытие(ЭтаФорма);
		ОбновитьУсловноеОформление(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Реализация

&НаКлиенте
Процедура РеализацияПриИзменении(Элемент)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДанныеСтроки = Новый Структура(
			"СчетФактура, ВидЦенности", 
			ТекущиеДанные.СчетФактура, 
			ТекущиеДанные.ВидЦенности
			);
		ТекущиеДанные.ОтметкаНезаполненногоПокупатель = НеобходимостьПокупателяВСтрокеТаблицы(ДанныеСтроки.СчетФактура, ДанныеСтроки.ВидЦенности);
		ТекущиеДанные.ВидимостьДоговораКомиссии = 
			ТекущиеДанные.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НалоговыйАгентКомитент");
		ТекущиеДанные.ЗаписьДополнительногоЛистаЧисло = ТекущиеДанные.ЗаписьДополнительногоЛиста;
		ТекущиеДанные.СторнирующаяЗаписьДопЛистаЧисло = ТекущиеДанные.СторнирующаяЗаписьДопЛиста;		
	КонецЕсли; 
	УстановитьВидимостьФлагаСторнирующихЗаписей(ЭтаФорма);
	ВидимостьДоговораКомиссии = Объект.Реализация.Итог("ВидимостьДоговораКомиссии");
	ОбновитьНадписьПодвала(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеализацияДокументОплатыПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Реализация.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаОплаты) И ЗначениеЗаполнено(ТекущиеДанные.ДокументОплаты) Тогда
		ТекущиеДанные.ДатаОплаты = ПолучитьДатуДокумента(ТекущиеДанные.ДокументОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Реализация.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСуммаБезНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Реализация.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Авансы

&НаКлиенте
Процедура АвансыПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ЗаписьДополнительногоЛистаЧисло = ТекущиеДанные.ЗаписьДополнительногоЛиста;
		ТекущиеДанные.СторнирующаяЗаписьДопЛистаЧисло = ТекущиеДанные.СторнирующаяЗаписьДопЛиста;
	КонецЕсли;
	УстановитьВидимостьФлагаСторнирующихЗаписей(ЭтаФорма);	
	ОбновитьНадписьПодвала(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура АвансыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Авансы.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыСуммаБезНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Авансы.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НачисленКУплате

&НаКлиенте
Процедура НачисленКУплатеПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ЗаписьДополнительногоЛистаЧисло = ТекущиеДанные.ЗаписьДополнительногоЛиста;
	КонецЕсли;
	УстановитьВидимостьФлагаСторнирующихЗаписей(ЭтаФорма);	
	ОбновитьНадписьПодвала(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленКУплатеСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НачисленКУплате.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленКУплатеСуммаБезНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НачисленКУплате.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВосстановленПоАвансам

&НаКлиенте
Процедура ВосстановленПоАвансамПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ЗаписьДополнительногоЛистаЧисло = ТекущиеДанные.ЗаписьДополнительногоЛиста;
		ТекущиеДанные.СторнирующаяЗаписьДопЛистаЧисло = ТекущиеДанные.СторнирующаяЗаписьДопЛиста;
	КонецЕсли;
	УстановитьВидимостьФлагаСторнирующихЗаписей(ЭтаФорма);	
	ОбновитьНадписьПодвала(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановленПоАвансамСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВосстановленПоАвансам.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановленПоАвансамСуммаБезНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВосстановленПоАвансам.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Восстановлен

&НаКлиенте
Процедура ВосстановленПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ЗаписьДополнительногоЛистаЧисло = ТекущиеДанные.ЗаписьДополнительногоЛиста;
	КонецЕсли;
	УстановитьВидимостьФлагаСторнирующихЗаписей(ЭтаФорма);	
	ОбновитьНадписьПодвала(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановленСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Восстановлен.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановленСуммаБезНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Восстановлен.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НеОтражаетсяВКниге

&НаКлиенте
Процедура НеОтражаетсяВКнигеПриИзменении(Элемент)
	
	ОбновитьНадписьПодвала(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтражаетсяВКнигеСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НеОтражаетсяВКниге.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтражаетсяВКнигеСуммаБезНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НеОтражаетсяВКниге.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьДокументВсеРазделы(Команда)

	ЗаполнитьДокументНаКлиенте(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРазделРеализация(Команда)

	ЗаполнитьДокументНаКлиенте("Реализация");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРазделАвансы(Команда)

	ЗаполнитьДокументНаКлиенте("Авансы");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРазделНачисленКУплате(Команда)

	ЗаполнитьДокументНаКлиенте("НачисленКУплате");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРазделВосстановленПоАвансам(Команда)

	ЗаполнитьДокументНаКлиенте("ВосстановленПоАвансам");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРазделВосстановленПоДругимОперациям(Команда)

	ЗаполнитьДокументНаКлиенте("Восстановлен");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРазделНеОтражаетсяВКниге(Команда)

	ЗаполнитьДокументНаКлиенте("НеОтражаетсяВКниге");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУсловногоОформления = Новый Структура;

	УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеВидимость();
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// РеализацияСостояние

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РеализацияСостояние");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Реализация0", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Используются только при сторнировании записи доп.листов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РеализацияСторнирующаяЗаписьДопЛиста");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыСторнирующаяЗаписьДопЛиста");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленКУплатеСторнирующаяЗаписьДопЛиста");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВосстановленПоАвансамСторнирующаяЗаписьДопЛиста");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВосстановленСторнирующаяЗаписьДопЛиста");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ФормироватьСторнирующиеЗаписиДопЛистовВручную", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// РеализацияДоговорКонтрагента

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РеализацияДоговорКонтрагента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВидимостьДоговораКомиссии", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаРеализация
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("РеализацияПроинициализировано") Тогда

		Форма.УстановитьУсловноеОформлениеРеализация();
	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаАвансы
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("АвансыПроинициализировано") Тогда
		
		Форма.УстановитьУсловноеОформлениеАвансы();
	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаНачисленКУплате
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("НачисленКУплатеПроинициализировано") Тогда
		
		Форма.УстановитьУсловноеОформлениеНачисленКУплате();
	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаВосстановленПоАвансам
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("ВосстановленПоАвансамПроинициализировано") Тогда

		Форма.УстановитьУсловноеОформлениеВосстановленПоАвансам();
	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаВосстановлен
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("ВосстановленПроинициализировано") Тогда

		Форма.УстановитьУсловноеОформлениеВосстановлен();
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРеализация() Экспорт

	НастройкиУсловногоОформления.Вставить("РеализацияПроинициализировано", Истина);


	// РеализацияКорректируемыйПериод

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РеализацияКорректируемыйПериод");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Реализация.ЗаписьДополнительногоЛиста", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// РеализацияДоговорКонтрагента

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РеализацияДоговорКонтрагента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Реализация.ВидЦенности", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// РеализацияПокупатель

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РеализацияПокупатель");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Реализация.ОтметкаНезаполненногоПокупатель", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеАвансы() Экспорт

	НастройкиУсловногоОформления.Вставить("АвансыПроинициализировано", Истина);


	// АвансыКорректируемыйПериод

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыКорректируемыйПериод");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Авансы.ЗаписьДополнительногоЛиста", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеНачисленКУплате() Экспорт

	НастройкиУсловногоОформления.Вставить("НачисленКУплатеПроинициализировано", Истина);


	// НачисленКУплатеКорректируемыйПериод

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НачисленКУплатеКорректируемыйПериод");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НачисленКУплате.ЗаписьДополнительногоЛиста", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВосстановленПоАвансам() Экспорт

	НастройкиУсловногоОформления.Вставить("ВосстановленПоАвансамПроинициализировано", Истина);


	// ВосстановленПоАвансамКорректируемыйПериод

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВосстановленПоАвансамКорректируемыйПериод");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВосстановленПоАвансам.ЗаписьДополнительногоЛиста", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ВосстановленПоАвансамНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВосстановленПоАвансамНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВосстановленПоАвансам.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВосстановленПоАвансам.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВосстановлен() Экспорт

	НастройкиУсловногоОформления.Вставить("ВосстановленПроинициализировано", Истина);


	// ВосстановленКорректируемыйПериод

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВосстановленКорректируемыйПериод");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Восстановлен.ЗаписьДополнительногоЛиста", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуДокумента(Документ)
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Дата");
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТаблицы) 
	
	СтрокаТаблицы.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаБезНДС, 
		Ложь, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)
		);
		
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента	= Объект.Дата;
	УпрощенныйУчетНДС 		= УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьСостояниеДокумента();
	УправлениеФормой(ЭтаФорма);
	ОбновитьНадписьПодвала(ЭтаФорма);
	УстановитьСписокВыбораРеализацияСобытие(ЭтаФорма);
	
	ВидимостьДоговораКомиссии = Объект.Реализация.Итог("ВидимостьДоговораКомиссии");

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НеобходимостьПокупателяВСтрокеТаблицы(СчетФактура, ВидЦенности)

	Возврат УчетНДСПереопределяемый.НеобходимоУказаниеКонтрагентаДляСчетаФактуры(СчетФактура, ВидЦенности);

КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого Строка Из Объект.Реализация Цикл
		Строка.ОтметкаНезаполненногоПокупатель = НеобходимостьПокупателяВСтрокеТаблицы(Строка.СчетФактура, Строка.ВидЦенности);
		Строка.ВидимостьДоговораКомиссии = 
			Строка.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
		Строка.ЗаписьДополнительногоЛистаЧисло = Строка.ЗаписьДополнительногоЛистаЧисло;
	КонецЦикла;

	Для Каждого Строка Из Объект.Авансы Цикл
		Строка.ОтметкаНезаполненногоПокупатель = НеобходимостьПокупателяВСтрокеТаблицы(Строка.СчетФактура, Строка.ВидЦенности);
		Строка.ЗаписьДополнительногоЛистаЧисло = Строка.ЗаписьДополнительногоЛистаЧисло;
	КонецЦикла;

	Для Каждого Строка Из Объект.НачисленКУплате Цикл
		Строка.ОтметкаНезаполненногоПокупатель = НеобходимостьПокупателяВСтрокеТаблицы(Строка.СчетФактура, Строка.ВидЦенности);
		Строка.ЗаписьДополнительногоЛистаЧисло = Строка.ЗаписьДополнительногоЛистаЧисло;
	КонецЦикла;

	Для Каждого Строка Из Объект.Восстановлен Цикл
		Строка.ОтметкаНезаполненногоПокупатель = НеобходимостьПокупателяВСтрокеТаблицы(Строка.СчетФактура, Строка.ВидЦенности);
		Строка.ЗаписьДополнительногоЛистаЧисло = Строка.ЗаписьДополнительногоЛистаЧисло;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ВосстановленПоАвансам Цикл
		Строка.ЗаписьДополнительногоЛистаЧисло = Строка.ЗаписьДополнительногоЛистаЧисло;
	КонецЦикла;

	Для Каждого Строка Из Объект.НеОтражаетсяВКниге Цикл
		Строка.ОтметкаНезаполненногоПокупатель = НеобходимостьПокупателяВСтрокеТаблицы(Строка.СчетФактура, Строка.ВидЦенности);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	УстановитьВидимостьФлагаСторнирующихЗаписей(Форма);

	Элементы.Реализация0.Видимость = НЕ Форма.УпрощенныйУчетНДС И УчетНДСКлиентСервер.Версия(Объект.Дата) = 1;

	ОбщаяВидимость = НЕ Форма.УпрощенныйУчетНДС И НЕ Объект.Реализация0 И УчетНДСКлиентСервер.Версия(Объект.Дата) = 1;

	Элементы.ГруппаРеализация.Видимость            = УчетНДСКлиентСервер.Версия(Объект.Дата) = 1;
	Элементы.ГруппаАвансы.Видимость                = ОбщаяВидимость;
	Элементы.ГруппаНачисленКУплате.Видимость       = ОбщаяВидимость;
	Элементы.ГруппаНеОтражаетсяВКниге.Видимость    = ОбщаяВидимость;
	Элементы.ГруппаВосстановлен.Видимость		   = ОбщаяВидимость;
	Элементы.ГруппаВосстановленПоАвансам.Видимость = НЕ Объект.Реализация0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСписокВыбораРеализацияСобытие(Форма)
	
	СписокВыбора = Форма.Элементы.РеализацияСобытие.СписокВыбора;
	СписокВыбора.Очистить();
	Если Форма.Объект.Реализация0 Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытияПоНДСПродажи.НеПодтвержденаСтавка0"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытияПоНДСПродажи.ПодтвержденаСтавка0"));
	Иначе
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытияПоНДСПродажи.Реализация"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытияПоНДСПродажи.НДССкорректирован"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СобытияПоНДСПродажи.Оплата"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьФлагаСторнирующихЗаписей(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ФормироватьСторнирующиеЗаписиДопЛистовВручную.Видимость =
		Объект.Реализация.Итог("ЗаписьДополнительногоЛистаЧисло")
		+ Объект.Восстановлен.Итог("ЗаписьДополнительногоЛистаЧисло")
		+ Объект.Авансы.Итог("ЗаписьДополнительногоЛистаЧисло")
		+ Объект.НачисленКУплате.Итог("ЗаписьДополнительногоЛистаЧисло")
		+ Объект.ВосстановленПоАвансам.Итог("ЗаписьДополнительногоЛистаЧисло");
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьПодвала(Форма)

	Объект = Форма.Объект;
	Форма.ВсегоНДС = Объект.Реализация.Итог("НДС")
		+ Объект.Авансы.Итог("НДС")
		+ Объект.НачисленКУплате.Итог("НДС")
		+ Объект.НеОтражаетсяВКниге.Итог("НДС")
		+ Объект.Восстановлен.Итог("НДС")
		+ Объект.ВосстановленПоАвансам.Итог("НДС");

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ЗагрузитьПодготовленныеДанные();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
	ОповеститьОбИзменении(Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументНаКлиенте(ИмяТабЧасти)

	Если ИмяТабЧасти = Неопределено Тогда
		ЕстьДанные = Объект.Реализация.Количество() > 0
			ИЛИ Объект.Авансы.Количество() > 0
			ИЛИ Объект.НачисленКУплате.Количество() > 0
			ИЛИ Объект.Восстановлен.Количество() > 0
			ИЛИ Объект.НеОтражаетсяВКниге.Количество() > 0
			ИЛИ Объект.ВосстановленПоАвансам.Количество() > 0;
	Иначе
		ЕстьДанные = Объект[ИмяТабЧасти].Количество() > 0;
	КонецЕсли;

	Если ЕстьДанные Тогда
		Если Объект.Проведен Тогда
			Если ИмяТабЧасти = Неопределено Тогда
				ТекстВопроса = НСтр("ru = 'Перед заполнением проведение документа будет отменено, а табличные части будут очищены. Заполнить?'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Перед заполнением проведение документа будет отменено, а табличная часть будет очищена. Заполнить?'");
			КонецЕсли;
		Иначе
			Если ИмяТабЧасти = Неопределено Тогда
				ТекстВопроса = НСтр("ru = 'Табличные части будут очищены. Заполнить?'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена. Заполнить?'");
			КонецЕсли;
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументЗавершение", ЭтотОбъект, ИмяТабЧасти);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьДокумент(ИмяТабЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент(ИмяТабЧасти)

	Результат = ЗаполнитьДокументНаСервере(ИмяТабЧасти);

	Если Результат.ЗаданиеВыполнено Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Функция ЗаполнитьДокументНаСервере(ИмяТабЧасти)

	Если ИмяТабЧасти = Неопределено Тогда
		Объект.Реализация.Очистить();
		Объект.Авансы.Очистить();
		Объект.НачисленКУплате.Очистить();
		Объект.ВосстановленПоАвансам.Очистить();
		Объект.Восстановлен.Очистить();
		Объект.НеОтражаетсяВКниге.Очистить();
	Иначе
		Объект[ИмяТабЧасти].Очистить();
	КонецЕсли;

	Если Объект.Проведен Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	КонецЕсли;

	СтруктураПараметров = Новый Структура("ИмяТабЧасти,Дата,Организация,Реализация0",
		ИмяТабЧасти, Объект.Дата, Объект.Организация, Объект.Реализация0);

	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Документы.ФормированиеЗаписейКнигиПродаж.ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);

	Иначе
		Если ИмяТабЧасти = Неопределено Тогда
			НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Формирование записей книги продаж""'");
		ИначеЕсли ИмяТабЧасти = "Реализация" Тогда
			НаименованиеЗадания = НСтр("ru = 'Заполнение раздела ""По реализации"" документа ""Формирование записей книги продаж""'");
		ИначеЕсли ИмяТабЧасти = "Авансы" Тогда
			НаименованиеЗадания = НСтр("ru = 'Заполнение раздела ""С авансов"" документа ""Формирование записей книги продаж""'");
		ИначеЕсли ИмяТабЧасти = "НачисленКУплате" Тогда
			НаименованиеЗадания = НСтр("ru = 'Заполнение раздела ""Начислен к уплате"" документа ""Формирование записей книги продаж""'");
		ИначеЕсли ИмяТабЧасти = "ВосстановленПоАвансам" Тогда
			НаименованиеЗадания = НСтр("ru = 'Заполнение раздела ""Восстановление по авансам"" документа ""Формирование записей книги продаж""'");
		ИначеЕсли ИмяТабЧасти = "Восстановлен" Тогда
			НаименованиеЗадания = НСтр("ru = 'Заполнение раздела ""Восстановление по другим операциям"" документа ""Формирование записей книги продаж""'");
		ИначеЕсли ИмяТабЧасти = "НеОтражаетсяВКниге" Тогда
			НаименованиеЗадания = НСтр("ru = 'Заполнение раздела ""Не отражается в книге"" документа ""Формирование записей книги продаж""'");
		КонецЕсли;

		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Документы.ФормированиеЗаписейКнигиПродаж.ПодготовитьДанныеДляЗаполнения",
			СтруктураПараметров,
			НаименованиеЗадания);

		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;

	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураДанных.Свойство("Реализация") Тогда
		Объект.Реализация.Загрузить(СтруктураДанных.Реализация);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Авансы") Тогда
		Объект.Авансы.Загрузить(СтруктураДанных.Авансы);
	КонецЕсли;
	Если СтруктураДанных.Свойство("НачисленКУплате") Тогда
		Объект.НачисленКУплате.Загрузить(СтруктураДанных.НачисленКУплате);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВосстановленПоАвансам") Тогда
		Объект.ВосстановленПоАвансам.Загрузить(СтруктураДанных.ВосстановленПоАвансам);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Восстановлен") Тогда
		Объект.Восстановлен.Загрузить(СтруктураДанных.Восстановлен);
	КонецЕсли;
	Если СтруктураДанных.Свойство("НеОтражаетсяВКниге") Тогда
		Объект.НеОтражаетсяВКниге.Загрузить(СтруктураДанных.НеОтражаетсяВКниге);
	КонецЕсли;

	ОбновитьНадписьПодвала(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Функция УпрощенныйУчетНДС(Знач Организация, Знач Дата)
	
	Возврат УчетнаяПолитика.УпрощенныйУчетНДС(Организация, Дата);
	
КонецФункции

&НаСервере
Процедура УдалитьСторнирующиеЗаписиВТаблицах()

	Отбор = Новый Структура("СторнирующаяЗаписьДопЛиста", Истина);
	
	СтрокиКУдалению = Объект.Реализация.НайтиСтроки(Отбор);
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Объект.Реализация.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	СтрокиКУдалению = Объект.Авансы.НайтиСтроки(Отбор);
		
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Объект.Авансы.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	СтрокиКУдалению = Объект.ВосстановленПоАвансам.НайтиСтроки(Отбор);
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Объект.ВосстановленПоАвансам.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыИзПараметровФормы(Форма)
	
	ПараметрыЗаполненияФормы = Неопределено;
	
	Если Форма.Параметры.Свойство("ПараметрыЗаполненияФормы",ПараметрыЗаполненияФормы) Тогда
	
		ЗаполнитьЗначенияСвойств(Форма.Объект,ПараметрыЗаполненияФормы);			
	
	КонецЕсли; 		

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УпрощенныйУчетНДС = УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);

	Если УчетНДСКлиентСервер.Версия(Объект.Дата) = 2 Тогда

		Объект.Реализация0 = Ложь;

		Если Объект.Реализация.Количество() > 0
			ИЛИ Объект.Авансы.Количество() > 0
			ИЛИ Объект.НачисленКУплате.Количество() > 0
			ИЛИ Объект.НеОтражаетсяВКниге.Количество() > 0
			ИЛИ Объект.Восстановлен.Количество() > 0 Тогда

			Объект.Реализация.Очистить();
			Объект.Авансы.Очистить();
			Объект.НачисленКУплате.Очистить();
			Объект.НеОтражаетсяВКниге.Очистить();
			Объект.Восстановлен.Очистить();
		КонецЕсли;
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВопросФормироватьСторнирующиеЗаписиДопЛистовВручнуюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьСторнирующиеЗаписиВТаблицах();
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВопросРеализация0ПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Реализация.Очистить();
		Объект.Авансы.Очистить();
		Объект.НачисленКУплате.Очистить();
		Объект.НеОтражаетсяВКниге.Очистить();
		Объект.Восстановлен.Очистить();
		Объект.ВосстановленПоАвансам.Очистить();
		УправлениеФормой(ЭтаФорма);
	Иначе
		Объект.Реализация0 = НЕ Объект.Реализация0;
	КонецЕсли;
	УстановитьСписокВыбораРеализацияСобытие(ЭтаФорма);
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументЗавершение(Результат, ИмяТабЧасти) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДокумент(ИмяТабЧасти);
	КонецЕсли;
	
КонецПроцедуры
