#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	НомераТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента();
	Результат = Запрос.Выполнить();
	
	ПараметрыПроведения.Вставить("Реквизиты", Результат.Выгрузить());
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Запрос.УстановитьПараметр("Реализация0", Реквизиты.Реализация0);
	
	Запрос.Текст = ТекстЗапросаТаблицаПоРеализации(НомераТаблиц)
		+ ТекстЗапросаНДССАвансов(НомераТаблиц)
	    + ТекстЗапросаТаблицаНачисленКУплате(НомераТаблиц)
		+ ТекстЗапросаВосстановленПоАвансам(НомераТаблиц)
		+ ТекстЗапросаТаблицаВосстановлениеПоДругимОперациям(НомераТаблиц)
		+ ТекстЗапросаТаблицаНДСНеОтражаетсяВКниге(НомераТаблиц)
		+ ТекстЗапросаПоФормированиюРегламентнойОперации(НомераТаблиц);
					
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	НЕОПРЕДЕЛЕНО КАК УпрощенныйУчетНДС,
	|	Реквизиты.ФормироватьСторнирующиеЗаписиДопЛистовВручную КАК ФормироватьСторнирующиеЗаписиДопЛистовВручную,
	|	Реквизиты.Реализация0
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПоРеализации(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаПоРеализации", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРеализация.Ссылка КАК Регистратор,
	|	ТаблицаРеализация.Ссылка.Организация КАК Организация,
	|	ТаблицаРеализация.Покупатель,
	|	ТаблицаРеализация.ДоговорКонтрагента,
	|	ТаблицаРеализация.СчетФактура,
	|	ТаблицаРеализация.СчетФактура.Дата КАК ДатаСчетаФактуры,
	|	ТаблицаРеализация.СтавкаНДС,
	|	ТаблицаРеализация.СуммаБезНДС,
	|	ТаблицаРеализация.НДС,
	|	ТаблицаРеализация.ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА ТаблицаРеализация.ЗаписьДополнительногоЛиста = ИСТИНА
	|				И ТаблицаРеализация.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
	|			ТОГДА ТаблицаРеализация.СторнирующаяЗаписьДопЛиста
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА (НЕ ТаблицаРеализация.ЗаписьДополнительногоЛиста)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ТаблицаРеализация.КорректируемыйПериод
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ТаблицаРеализация.ВидЦенности КАК ВидЦенности,
	|	ТаблицаРеализация.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА ТаблицаРеализация.ЗаписьДополнительногоЛиста
	|			ТОГДА ТаблицаРеализация.Ссылка.Дата
	|		КОГДА ТаблицаРеализация.ДатаОплаты > ТаблицаРеализация.СчетФактура.Дата
	|			ТОГДА ТаблицаРеализация.ДатаОплаты
	|		ИНАЧЕ ТаблицаРеализация.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ТаблицаРеализация.Ссылка.Реализация0
	|				И ТаблицаРеализация.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРеализация.ЗаписьДополнительногоЛиста
	|						ТОГДА ТаблицаРеализация.Ссылка.Дата
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТаблицаРеализация.ДатаОплаты > ТаблицаРеализация.СчетФактура.Дата
	|								ТОГДА ТаблицаРеализация.ДатаОплаты
	|							ИНАЧЕ ТаблицаРеализация.СчетФактура.Дата
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаРеализация.Ссылка.Дата
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаРеализация.Ссылка.Реализация0
	|				И ТаблицаРеализация.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НеПодтвержденаСтавка0)
	|		ИНАЧЕ ТаблицаРеализация.Событие
	|	КОНЕЦ КАК Событие,
	|	ВЫБОР
	|		КОГДА ТаблицаРеализация.Ссылка.Реализация0
	|				ИЛИ ТаблицаРеализация.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.Реализация0)
	|		КОГДА ТаблицаРеализация.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.РеализацияБезНДС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.РеализацияСНДС)
	|	КОНЕЦ КАК ВидНачисления,
	|	ТаблицаРеализация.ДатаОплаты
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК ТаблицаРеализация
	|ГДЕ
	|	ТаблицаРеализация.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаРеализация.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	

Функция ТекстЗапросаТаблицаНачисленКУплате(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаНачисленКУплате", НомераТаблиц.Количество());	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачисленКУплате.Ссылка КАК Регистратор,
	|	НачисленКУплате.Ссылка.Организация КАК Организация,
	|	НачисленКУплате.Покупатель,
	|	НачисленКУплате.ДоговорКонтрагента,
	|	НачисленКУплате.СчетФактура,
	|	НачисленКУплате.СчетФактура.Дата КАК ДатаСчетаФактуры,
	|	НачисленКУплате.СтавкаНДС,
	|	НачисленКУплате.СуммаБезНДС,
	|	НачисленКУплате.НДС,
	|	НачисленКУплате.ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА НачисленКУплате.ЗаписьДополнительногоЛиста = ИСТИНА
	|				И НачисленКУплате.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
	|			ТОГДА НачисленКУплате.СторнирующаяЗаписьДопЛиста
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА (НЕ НачисленКУплате.ЗаписьДополнительногоЛиста)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НачисленКУплате.КорректируемыйПериод
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	НачисленКУплате.ВидЦенности КАК ВидЦенности,
	|	ВЫБОР
	|		КОГДА НачисленКУплате.ЗаписьДополнительногоЛиста
	|			ТОГДА НачисленКУплате.Ссылка.Дата
	|		КОГДА НачисленКУплате.ДатаОплаты > НачисленКУплате.СчетФактура.Дата
	|			ТОГДА НачисленКУплате.ДатаОплаты
	|		ИНАЧЕ НачисленКУплате.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаСобытия,
	|	НачисленКУплате.Ссылка.Дата КАК Период,
	|	НачисленКУплате.Событие КАК Событие,
	|	ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.НДСНачисленКУплате) КАК ВидНачисления,
	|	НачисленКУплате.ДокументОплаты,
	|	НачисленКУплате.ДатаОплаты
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж.НачисленКУплате КАК НачисленКУплате
	|ГДЕ
	|	НачисленКУплате.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачисленКУплате.НомерСтроки";
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСНеОтражаетсяВКниге(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаНДСНеОтражаетсяВКниге", НомераТаблиц.Количество());	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НеОтражаетсяВКниге.Ссылка КАК Регистратор,
	|	НеОтражаетсяВКниге.Ссылка.Организация КАК Организация,
	|	НеОтражаетсяВКниге.Покупатель,
	|	НеОтражаетсяВКниге.СчетФактура,
	|	НеОтражаетсяВКниге.СчетФактура.Дата КАК ДатаСчетаФактуры,
	|	НеОтражаетсяВКниге.СтавкаНДС,
	|	НеОтражаетсяВКниге.СуммаБезНДС,
	|	НеОтражаетсяВКниге.НДС,
	|	НеОтражаетсяВКниге.ВидЦенности КАК ВидЦенности,
	|	ВЫБОР
	|		КОГДА НеОтражаетсяВКниге.ДатаОплаты > НеОтражаетсяВКниге.СчетФактура.Дата
	|			ТОГДА НеОтражаетсяВКниге.ДатаОплаты
	|		ИНАЧЕ НеОтражаетсяВКниге.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаСобытия,
	|	НеОтражаетсяВКниге.Ссылка.Дата КАК Период,
	|	НеОтражаетсяВКниге.Событие КАК Событие,
	|	НеОтражаетсяВКниге.ВидНачисления КАК ВидНачисления,
	|	НеОтражаетсяВКниге.ДокументОплаты,
	|	НеОтражаетсяВКниге.ДатаОплаты
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж.НеОтражаетсяВКниге КАК НеОтражаетсяВКниге
	|ГДЕ
	|	НеОтражаетсяВКниге.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НеОтражаетсяВКниге.НомерСтроки";
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	

Функция ТекстЗапросаТаблицаВосстановлениеПоДругимОперациям(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаВосстановлениеПоДругимОперациям", НомераТаблиц.Количество());	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Восстановлен.Ссылка КАК Регистратор,
	|	Восстановлен.Ссылка.Организация КАК Организация,
	|	Восстановлен.Покупатель,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	Восстановлен.СчетФактура,
	|	Восстановлен.СчетФактура.Дата КАК ДатаСчетаФактуры,
	|	Восстановлен.СтавкаНДС,
	|	Восстановлен.СуммаБезНДС,
	|	Восстановлен.НДС,
	|	Восстановлен.ВидЦенности КАК ВидЦенности,
	|	ВЫБОР
	|		КОГДА Восстановлен.ЗаписьДополнительногоЛиста
	|			ТОГДА Восстановлен.Ссылка.Дата
	|		ИНАЧЕ Восстановлен.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС) КАК Событие,
	|	Восстановлен.Ссылка.Дата КАК Период,
	|	Восстановлен.СчетУчетаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.НДСВосстановлен) КАК ВидНачисления,
	|	Восстановлен.ЗаписьДополнительногоЛиста,
	|	Восстановлен.КорректируемыйПериод,
	|	ВЫБОР
	|		КОГДА Восстановлен.ЗаписьДополнительногоЛиста = ИСТИНА
	|				И Восстановлен.Ссылка.ФормироватьСторнирующиеЗаписиДопЛистовВручную = ИСТИНА
	|			ТОГДА Восстановлен.СторнирующаяЗаписьДопЛиста
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж.Восстановлен КАК Восстановлен
	|ГДЕ
	|	Восстановлен.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Восстановлен.НомерСтроки";
    	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	

Функция ТекстЗапросаВосстановленПоАвансам(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаВосстановленПоАвансам", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаВосстановленПоАвансам.Ссылка КАК Регистратор,
	|	ТаблицаВосстановленПоАвансам.Ссылка.Дата КАК Период,
	|	ТаблицаВосстановленПоАвансам.Ссылка.Организация КАК Организация,
	|	ТаблицаВосстановленПоАвансам.Поставщик КАК Контрагент,
	|	ТаблицаВосстановленПоАвансам.ДоговорКонтрагента,
	|	ТаблицаВосстановленПоАвансам.СчетФактура,
	|	ТаблицаВосстановленПоАвансам.СчетФактура.Дата КАК ДатаСчетаФактуры,
	|	ТаблицаВосстановленПоАвансам.СтавкаНДС,
	|	ТаблицаВосстановленПоАвансам.СуммаБезНДС,
	|	ТаблицаВосстановленПоАвансам.НДС КАК СуммаНДС,
	|	ТаблицаВосстановленПоАвансам.ЗаписьДополнительногоЛиста,
	|	ТаблицаВосстановленПоАвансам.СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА (НЕ ТаблицаВосстановленПоАвансам.ЗаписьДополнительногоЛиста)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ТаблицаВосстановленПоАвансам.КорректируемыйПериод
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные) КАК ВидЦенности,
	|	ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.НДСВосстановлен) КАК ВидНачисления,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС) КАК Событие,
	|	ТаблицаВосстановленПоАвансам.СчетФактура КАК ДокументОплаты,
	|	ТаблицаВосстановленПоАвансам.СчетФактура.Дата КАК ДатаОплаты,
	|	ТаблицаВосстановленПоАвансам.Ссылка.Дата КАК ДатаСобытия,
	|	ТаблицаВосстановленПоАвансам.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА ТаблицаВосстановленПоАвансам.Ссылка.Дата < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА """"
	|		ИНАЧЕ ""21""
	|	КОНЕЦ КАК КодВидаОперации
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж.ВосстановленПоАвансам КАК ТаблицаВосстановленПоАвансам
	|ГДЕ
	|	ТаблицаВосстановленПоАвансам.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаВосстановленПоАвансам.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаНДССАвансов(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаНДССАвансов", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФормированиеЗаписейКнигиПродажАвансы.ВидЦенности,
	|	ФормированиеЗаписейКнигиПродажАвансы.Покупатель КАК Контрагент,
	|	ФормированиеЗаписейКнигиПродажАвансы.ДоговорКонтрагента,
	|	ФормированиеЗаписейКнигиПродажАвансы.СчетФактура,
	|	ФормированиеЗаписейКнигиПродажАвансы.СчетФактура КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА ФормированиеЗаписейКнигиПродажАвансы.ЗаписьДополнительногоЛиста
	|			ТОГДА ФормированиеЗаписейКнигиПродажАвансы.Ссылка.Дата
	|		ИНАЧЕ ФормированиеЗаписейКнигиПродажАвансы.СчетФактура.Дата
	|	КОНЕЦ КАК ДатаСобытия,
	|	ФормированиеЗаписейКнигиПродажАвансы.СчетФактура.Дата КАК ДатаОплаты,
	|	ФормированиеЗаписейКнигиПродажАвансы.СтавкаНДС,
	|	ФормированиеЗаписейКнигиПродажАвансы.СуммаБезНДС,
	|	ФормированиеЗаписейКнигиПродажАвансы.НДС КАК СуммаНДС,
	|	ФормированиеЗаписейКнигиПродажАвансы.Событие,
	|	НЕОПРЕДЕЛЕНО КАК ИсправленныйСчетФактура,
	|	ФормированиеЗаписейКнигиПродажАвансы.ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА (НЕ ФормированиеЗаписейКнигиПродажАвансы.ЗаписьДополнительногоЛиста)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ФормированиеЗаписейКнигиПродажАвансы.КорректируемыйПериод
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ФормированиеЗаписейКнигиПродажАвансы.СторнирующаяЗаписьДопЛиста
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж.Авансы КАК ФормированиеЗаписейКнигиПродажАвансы
	|ГДЕ
	|	ФормированиеЗаписейКнигиПродажАвансы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	

Функция ТекстЗапросаПоФормированиюРегламентнойОперации(НомераТаблиц)

	НомераТаблиц.Вставить("ДанныеРегламентнойОперации", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(Реквизиты.Дата, КВАРТАЛ) КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &Реализация0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж)
	|	КОНЕЦ КАК РегламентнаяОперация
	|ИЗ
	|	Документ.ФормированиеЗаписейКнигиПродаж КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ

Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура;
	
	ИмяТабЧасти = СтруктураПараметров.ИмяТабЧасти;
	
	Если ИмяТабЧасти = Неопределено Тогда 
		Если УчетнаяПолитика.УпрощенныйУчетНДС(СтруктураПараметров.Организация, СтруктураПараметров.Дата)
			ИЛИ УчетНДСКлиентСервер.Версия(СтруктураПараметров.Дата) = 2 Тогда
			ДанныеДляЗаполнения.Вставить(
				"ВосстановленПоАвансам", ПодготовитьДанныеРазделаВосстановленПоАвансам(СтруктураПараметров));
		ИначеЕсли СтруктураПараметров.Реализация0 Тогда
			ДанныеДляЗаполнения.Вставить(
				"Реализация", ПодготовитьДанныеРазделаРеализация(СтруктураПараметров));
		Иначе // Все табличные части
			ДанныеДляЗаполнения.Вставить(
				"Реализация", ПодготовитьДанныеРазделаРеализация(СтруктураПараметров));
			ДанныеДляЗаполнения.Вставить(
				"Авансы", ПодготовитьДанныеРазделаАвансы(СтруктураПараметров));
			ДанныеДляЗаполнения.Вставить(
				"НачисленКУплате", ПодготовитьДанныеРазделаНачисленКУплате(СтруктураПараметров));
			ДанныеДляЗаполнения.Вставить(
				"ВосстановленПоАвансам", ПодготовитьДанныеРазделаВосстановленПоАвансам(СтруктураПараметров));
			ДанныеДляЗаполнения.Вставить(
				"Восстановлен", ПодготовитьДанныеРазделаВосстановленПоДругимОперациям(СтруктураПараметров));
			ДанныеДляЗаполнения.Вставить(
				"НеОтражаетсяВКниге", ПодготовитьДанныеРазделаНеОтражаетсяВКниге(СтруктураПараметров));
		КонецЕсли;
		
	ИначеЕсли ИмяТабЧасти = "Реализация" Тогда
		ДанныеДляЗаполнения.Вставить(
			"Реализация", ПодготовитьДанныеРазделаРеализация(СтруктураПараметров));
		
	ИначеЕсли ИмяТабЧасти = "Авансы" Тогда
		ДанныеДляЗаполнения.Вставить(
			"Авансы", ПодготовитьДанныеРазделаАвансы(СтруктураПараметров));
		
	ИначеЕсли ИмяТабЧасти = "НачисленКУплате" Тогда
		ДанныеДляЗаполнения.Вставить(
			"НачисленКУплате", ПодготовитьДанныеРазделаНачисленКУплате(СтруктураПараметров));
	
	ИначеЕсли ИмяТабЧасти = "ВосстановленПоАвансам" Тогда
		ДанныеДляЗаполнения.Вставить(
			"ВосстановленПоАвансам", ПодготовитьДанныеРазделаВосстановленПоАвансам(СтруктураПараметров));
	
	ИначеЕсли ИмяТабЧасти = "Восстановлен" Тогда
		ДанныеДляЗаполнения.Вставить(
			"Восстановлен", ПодготовитьДанныеРазделаВосстановленПоДругимОперациям(СтруктураПараметров));
	
	ИначеЕсли ИмяТабЧасти = "НеОтражаетсяВКниге" Тогда
		ДанныеДляЗаполнения.Вставить(
			"НеОтражаетсяВКниге", ПодготовитьДанныеРазделаНеОтражаетсяВКниге(СтруктураПараметров));
	
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

// Заполнение ТЧ Реализация
Функция ПодготовитьДанныеРазделаРеализация(СтруктураПараметров)
	
	Если СтруктураПараметров.Реализация0 Тогда
		ТаблицаРеализация = ПолучитьТаблицуРеализацииПоДаннымРегистраНДСРеализация0(СтруктураПараметров);
		ПорядокСортировки = "СчетФактураДата,СчетФактура,Покупатель,ДоговорКонтрагента,ВидЦенности,СтавкаНДС,Событие";	
	Иначе	
		ТаблицаРеализация = ПолучитьТаблицуРеализацииПоДаннымРегистраНДСНачисленный(СтруктураПараметров);
		ПорядокСортировки = "СчетФактураДата,СчетФактура,Покупатель,ДоговорКонтрагента,ВидЦенности,СтавкаНДС,ДатаОплаты,Событие";	
	КонецЕсли; 
	
	ТаблицаРеализация.Сортировать(ПорядокСортировки, Новый СравнениеЗначений);
		
	Возврат ТаблицаРеализация;
	
КонецФункции

Функция ПолучитьТаблицуРеализацииПоДаннымРегистраНДСНачисленный(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0)) КАК НДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0)) КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	НДСНачисленныйОстатки.ДатаОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.Реализация) КАК Событие
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И НЕ ВидНачисления В (&ИсключаемыеВидыНачисления)) КАК НДСНачисленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И НДСНачисленныйОстатки.СчетФактура = РеквизитыДокументовРасчетов.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыДокументовРасчетов.ДатаРегистратора,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СчетФактура,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	НДСНачисленныйОстатки.ДатаОплаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";
	
	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыНачисления = Новый СписокЗначений;
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);		// не отражается в книге продаж
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСНачисленКУплате);	// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСсАвансов);			// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСВосстановлен);		// Отражается отдельно
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыНачисления", ИсключаемыеВидыНачисления);
    Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата),ВидГраницы.Включая));
	
	ТаблицаНДСНачисленный = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	НДСРеализация0Остатки.ВидЦенности,
	|	НДСРеализация0Остатки.СтавкаНДС,
	|	НДСРеализация0Остатки.Покупатель,
	|	СУММА(ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК НДС,
	|	СУММА(ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСРеализация0Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРеализация0Остатки.ВидЦенности,
	|	НДСРеализация0Остатки.СчетФактура,
	|	НДСРеализация0Остатки.СтавкаНДС,
	|	НДСРеализация0Остатки.Покупатель";
		
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата),ВидГраницы.Включая));
	
	ТаблицаНДСРеализация0 = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, Покупатель");
	
	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаРеализация0 Из ТаблицаНДСРеализация0 Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаРеализация0);
		
		СтрокиНДСНачисленный = ТаблицаНДСНачисленный.НайтиСтроки(СтруктураОтбора);
		
		Для каждого СтрокаНДСНачисленный Из СтрокиНДСНачисленный Цикл
			
			СуммаБезНДС = Мин(СтрокаНДСНачисленный.СуммаБезНДС, СтрокаРеализация0.СуммаБезНДС);
			НДС 		= Мин(СтрокаНДСНачисленный.НДС, СтрокаРеализация0.НДС);
			СуммаСНДС 	= Мин(СтрокаНДСНачисленный.СуммаСНДС, СтрокаРеализация0.СуммаСНДС);
			
			СтрокаНДСНачисленный.СуммаБезНДС = СтрокаНДСНачисленный.СуммаБезНДС - СуммаБезНДС;
			СтрокаНДСНачисленный.НДС 		 = СтрокаНДСНачисленный.НДС - НДС;
			СтрокаНДСНачисленный.СуммаСНДС 	 = СтрокаНДСНачисленный.СуммаСНДС - СуммаСНДС;
			СтрокаРеализация0.СуммаБезНДС 	 = СтрокаРеализация0.СуммаБезНДС - СуммаБезНДС;
			СтрокаРеализация0.НДС 			 = СтрокаРеализация0.НДС - НДС;
			СтрокаРеализация0.СуммаСНДС 	 = СтрокаРеализация0.СуммаСНДС - СуммаСНДС;
			
			Если СтрокаНДСНачисленный.СуммаБезНДС = 0
				И СтрокаНДСНачисленный.НДС = 0
				И СтрокаНДСНачисленный.СуммаСНДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаНДСНачисленный);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СтрокиКУдалению);
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаНДСНачисленный.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Возврат ТаблицаНДСНачисленный;
		
КонецФункции

Функция ПолучитьТаблицуРеализацииПоДаннымРегистраНДСРеализация0(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСРеализация0Остатки.Организация,
	|	НДСРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	НДСРеализация0Остатки.Состояние,
	|	НДСРеализация0Остатки.ВидЦенности КАК ВидЦенности,
	|	НДСРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСРеализация0Остатки.СуммаБезНДСОстаток,
	|	НДСРеализация0Остатки.НДСОстаток
	|ПОМЕСТИТЬ ВТНДСРеализация0Остатки
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСРеализация0Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента,
	|	НДСНачисленныйОстатки.СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток,
	|	НДСНачисленныйОстатки.НДСОстаток
	|ПОМЕСТИТЬ ВТНДСНачисленныйОстатки
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСНачисленныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСНачисленныйОстатки.СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСРеализация0Остатки.Организация,
	|	НДСРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	|	НДСРеализация0Остатки.ВидЦенности,
	|	НДСРеализация0Остатки.СтавкаНДС,
	|	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	|	ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0) КАК НДС,
	|	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0) КАК СуммаСНДС,
	|	НДСРеализация0Остатки.Состояние,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС_НачисленоВсего,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток < НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток
	|				И НЕ НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяКорректировка,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|			ТОГДА НДСНачисленныйОстатки.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА НДСРеализация0Остатки.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ПодтвержденаСтавка0)
	|		КОГДА НДСРеализация0Остатки.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НеПодтвержденаСтавка0)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПустаяСсылка)
	|	КОНЕЦ КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСРеализация0Остатки.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
	|				И КОНЕЦПЕРИОДА(ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода), КВАРТАЛ) <> КОНЕЦПЕРИОДА(&КонецПериода, КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА НДСРеализация0Остатки.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
	|				И КОНЕЦПЕРИОДА(ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода), КВАРТАЛ) <> КОНЕЦПЕРИОДА(&КонецПериода, КВАРТАЛ)
	|			ТОГДА ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК КорректируемыйПериод
	|ИЗ
	|	ВТНДСРеализация0Остатки КАК НДСРеализация0Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНДСНачисленныйОстатки КАК НДСНачисленныйОстатки
	|		ПО НДСРеализация0Остатки.СчетФактура = НДСНачисленныйОстатки.СчетФактура
	|			И НДСРеализация0Остатки.ВидЦенности = НДСНачисленныйОстатки.ВидЦенности
	|			И НДСРеализация0Остатки.СтавкаНДС = НДСНачисленныйОстатки.СтавкаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И НДСРеализация0Остатки.СчетФактура = РеквизитыДокументовРасчетов.Документ
	|ГДЕ
	|	(НДСРеализация0Остатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСРеализация0Остатки.НДСОстаток > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата";

	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата),ВидГраницы.Включая));
    
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаСФ Из РезультатЗапроса Цикл
		Если СтрокаСФ.ТребуетсяКорректировка Тогда
			СтрокаСФ.НДС = (СтрокаСФ.НДС * СтрокаСФ.СуммаСНДС_НачисленоВсего / СтрокаСФ.СуммаСНДС);
			СтрокаСФ.СуммаСНДС = СтрокаСФ.СуммаСНДС_НачисленоВсего;
			СтрокаСФ.СуммаБезНДС = СтрокаСФ.СуммаСНДС - СтрокаСФ.НДС;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Заполнение ТЧ Авансы
Функция ПодготовитьДанныеРазделаАвансы(СтруктураПараметров)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	&Событие_НДСсАвансов КАК Событие,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидНачисления = &НДСВидНачисления_НДСсАвансов) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСсАвансов", Перечисления.НДСВидНачисления.НДСсАвансов);
	Запрос.УстановитьПараметр("Событие_НДСсАвансов", Перечисления.СобытияПоНДСПродажи.ПолученАванс);

	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

// Заполнение ТЧ НачисленКУплате
Функция ПодготовитьДанныеРазделаНачисленКУплате(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.ДоговорКонтрагента,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &СобытиеСкорректирован
	|		ИНАЧЕ &СобытиеНДСНачисленКУплате
	|	КОНЕЦ КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.ВидЦенности = &ВидЦенностиСуммыСвязанныеСРасчетами
	|			ТОГДА НДСНачисленныйОстатки.СчетФактура.Дата
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидНачисления = &НДСВидНачисленияНДСНачисленКУплате) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  						 СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", 			     Новый Граница(КонецДня(СтруктураПараметров.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисленияНДСНачисленКУплате",  Перечисления.НДСВидНачисления.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("СобытиеНДСНачисленКУплате", 		 	 Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("СобытиеСкорректирован", 			 	 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("ВидЦенностиСуммыСвязанныеСРасчетами", Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполнение ТЧ ВосстановленПоАвансам
Функция ПодготовитьДанныеРазделаВосстановленПоАвансам(СтруктураПараметров)

	Если УчетнаяПолитика.УпрощенныйУчетНДС(СтруктураПараметров.Организация, СтруктураПараметров.Дата) 
		ИЛИ УчетНДСКлиентСервер.Версия(СтруктураПараметров.Дата) = 2 Тогда
		ТаблицаВосстановленПоАвансам = ПолучитьТаблицуВосстановленПоАвансамУпрощенныйУчетНДС(СтруктураПараметров);
	Иначе
		ТаблицаВосстановленПоАвансам = ПолучитьТаблицуВосстановленПоАвансам(СтруктураПараметров);
	КонецЕсли;
	
	Возврат ТаблицаВосстановленПоАвансам;
	
КонецФункции

Функция ПолучитьТаблицуВосстановленПоАвансамУпрощенныйУчетНДС(СтруктураПараметров)

	Запрос = Новый Запрос;
	
	ВидыСубконто = Новый Массив;

	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДатаГраница",  Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОстатки.Субконто2 КАК СчетФактура,
	|	-1 * ХозрасчетныйОстатки.СуммаОстаток КАК СуммаНДСАванса
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	ОстаткиПоСчету = Запрос.Выполнить().Выгрузить();
	
	СписокСчетовФактур = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ОстаткиПоСчету.ВыгрузитьКолонку("СчетФактура"));
	
	// Исключаем полученные счета-фактуры на аванс по договорам вида "С комиссионером на закупку", составленные от имени поставщиков.
	// Восстановление НДС по таким счетам-фактурам производится вручную на основании информации, полученной от комиссионера.
	
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетФактураПолученный.ДокументОснование КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование В(&СписокСчетовФактур)
	|	И СчетФактураПолученный.Ссылка.Организация = &Организация
	|	И СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|	И СчетФактураПолученный.Ссылка.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку)
	|	И СчетФактураПолученный.Ссылка.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И СчетФактураПолученный.Ссылка.Продавец <> СчетФактураПолученный.Ссылка.Контрагент";
	
	ВыборкаПоКомиссииНаЗакупку = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоКомиссииНаЗакупку.Следующий() Цикл
		ИндексСФ = СписокСчетовФактур.Найти(ВыборкаПоКомиссииНаЗакупку.СчетФактура);
		Если ИндексСФ <> Неопределено Тогда
			СписокСчетовФактур.Удалить(ИндексСФ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) - ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот, 0)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0) - ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0)) КАК НДС,
	|	НДСЗаписиКнигиПокупокОбороты.ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&ДатаГраница,
	|			,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|				И СчетФактура В (&СписокСчетовФактур)) КАК НДСЗаписиКнигиПокупокОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				,
	|				&ДатаГраница,
	|				,
	|				Организация = &Организация
	|					И СчетФактура В (&СписокСчетовФактур)
	|					И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСЗаписиКнигиПродажОбороты
	|		ПО (НДСЗаписиКнигиПродажОбороты.Организация = НДСЗаписиКнигиПокупокОбороты.Организация)
	|			И (НДСЗаписиКнигиПродажОбороты.Покупатель = НДСЗаписиКнигиПокупокОбороты.Поставщик)
	|			И (НДСЗаписиКнигиПродажОбороты.СчетФактура = НДСЗаписиКнигиПокупокОбороты.СчетФактура)
	|			И (НДСЗаписиКнигиПродажОбороты.ВидЦенности = НДСЗаписиКнигиПокупокОбороты.ВидЦенности)
	|			И (НДСЗаписиКнигиПродажОбороты.СтавкаНДС = НДСЗаписиКнигиПокупокОбороты.СтавкаНДС)
	|			И (НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента)
	|			И (НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура = НДСЗаписиКнигиПокупокОбороты.ИсправленныйСчетФактура)
	|ГДЕ
	|	ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) - ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот, 0) > 0
	|	И ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0) - ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0) > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.ИсправленныйСчетФактура";

				   			   
	ОстаткиПоРегистру = Запрос.Выполнить().Выгрузить();
	
	Если ОстаткиПоРегистру.Количество() = 0 Тогда
		Возврат ОстаткиПоРегистру;
	КонецЕсли;

	СтруктураОтбора = Новый Структура("СчетФактура, Поставщик");
	
	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаОстаткаПоСчету Из ОстаткиПоСчету Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаОстаткаПоСчету);
		
		СтрокиОстаткаПоРегистру = ОстаткиПоРегистру.НайтиСтроки(СтруктураОтбора);
		
		Для каждого СтрокаОстаткаПоРегистру Из СтрокиОстаткаПоРегистру Цикл
			
			Если СтрокаОстаткаПоСчету.СуммаНДСАванса = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаОстаткаПоРегистру);
				Продолжить;
			КонецЕсли;
			
			Если СтрокаОстаткаПоСчету.СуммаНДСАванса >= СтрокаОстаткаПоРегистру.НДС Тогда
				СтрокаОстаткаПоСчету.СуммаНДСАванса = СтрокаОстаткаПоСчету.СуммаНДСАванса
					- СтрокаОстаткаПоРегистру.НДС;
			Иначе				
				
				СтрокаОстаткаПоРегистру.СуммаБезНДС = 
					Окр(СтрокаОстаткаПоРегистру.СуммаБезНДС
					- (СтрокаОстаткаПоРегистру.СуммаБезНДС / СтрокаОстаткаПоРегистру.НДС) * СтрокаОстаткаПоСчету.СуммаНДСАванса, 2);
					
				СтрокаОстаткаПоРегистру.НДС = СтрокаОстаткаПоРегистру.НДС - СтрокаОстаткаПоСчету.СуммаНДСАванса;
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ОстаткиПоРегистру.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если ОстаткиПоРегистру.Количество() = 0 Тогда
		Возврат ОстаткиПоРегистру;
	КонецЕсли;

	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным); // 60.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал); // 60.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ); // 60.32
	
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);
	
	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР", СубконтоСчетаРасчетов_ЕстьДР);
	
	// Получим остатки по авансам для определения суммы незачтенного аванса.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаАвансов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовАвансов)
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.Субконто3 КАК СчетФактура,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаГраница,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаАвансов.Счет
	|				ИЗ
	|					СчетаАвансов КАК СчетаАвансов),
	|			&СубконтоСчетаРасчетов_ЕстьДР,
	|			Организация = &Организация
	|				И Субконто3 В (&СписокСчетовФактур)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3";
					   
	
	НепогашенныеАвансы = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("Поставщик, ДоговорКонтрагента");
	
	Для каждого НепогашенныйАвансПоСФ Из НепогашенныеАвансы Цикл
		
		Если НепогашенныйАвансПоСФ.СчетФактура = Неопределено Тогда
			Если СтруктураОтбора.Свойство("СчетФактура") Тогда
				СтруктураОтбора.Удалить("СчетФактура");
			КонецЕсли;
		Иначе
			Если НЕ СтруктураОтбора.Свойство("СчетФактура") Тогда
				СтруктураОтбора.Вставить("СчетФактура");
			КонецЕсли;
		КонецЕсли;
		// Отбор строк зачета авансов с документом расчетов
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, НепогашенныйАвансПоСФ);
		
		СтрокиАвансаПоОтбору = ОстаткиПоРегистру.НайтиСтроки(СтруктураОтбора);
		
		МассивСуммаБезНДС = Новый Массив();
		МассивСуммаНДС = Новый Массив();
		
		СуммаБезНДС = 0;
		СуммаНДС = 0;
		Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
			МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
			
			СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
			СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
		КонецЦикла; 
		
		СуммаСНДС = Мин(НепогашенныйАвансПоСФ.Сумма, (СуммаБезНДС+СуммаНДС));
		
		Если СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
		СуммаНДС = СуммаСНДС - СуммаБезНДС;
		
		Если СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
		КонецЕсли;
		
		Если СуммаНДС > 0 Тогда
			МассивСуммаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
		КонецЕсли; 
		
		Если МассивСуммаБезНДС = Неопределено 
			ИЛИ МассивСуммаНДС = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Счетчик = 0;
		Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0);
			СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаПоСФ Из ОстаткиПоРегистру Цикл
		Если СтрокаПоСФ.СуммаБезНДС = 0 И СтрокаПоСФ.НДС = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаПоСФ);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ОстаткиПоРегистру.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат ОстаткиПоРегистру;
		
КонецФункции

Функция ПолучитьТаблицуВосстановленПоАвансам(СтруктураПараметров)

	// Восстановление НДС по авансам выданным
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",         СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата),ВидГраницы.Включая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток,
	|	НДСПредъявленныйОстатки.НДСОстаток
	|ПОМЕСТИТЬ ВТНДСПредъявленныйОстатки
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСПредъявленныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	Поставщик,
	|	ДоговорКонтрагента,
	|	СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСсАвансовОстатки.Организация,
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.Покупатель КАК Поставщик,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	|	НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) КАК НДС,
	|	НДСсАвансовОстатки.ВидЦенности
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСсАвансовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДСПредъявленныйОстатки КАК НДСПредъявленныйОстатки
	|		ПО НДСсАвансовОстатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
	|			И НДСсАвансовОстатки.Покупатель = НДСПредъявленныйОстатки.Поставщик
	|			И НДСсАвансовОстатки.ДоговорКонтрагента = НДСПредъявленныйОстатки.ДоговорКонтрагента
	|			И НДСсАвансовОстатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
	|ГДЕ
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) > 0
	|	И НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) > 0";
				   
	ТаблицаНДССАвансов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаНДССАвансов.Количество() = 0 Тогда
		Возврат ТаблицаНДССАвансов;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНДССАвансов", ТаблицаНДССАвансов);
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным); // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ); // 62.32
	
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);
	
	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР",  СубконтоСчетаРасчетов_ЕстьДР);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаАвансов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовАвансов)
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНДССАвансов.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ТаблицаНДССАвансов
	|ИЗ
	|	&ТаблицаНДССАвансов КАК ТаблицаНДССАвансов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Поставщик,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.Субконто3 КАК СчетФактура,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериодаГраница,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаАвансов.Счет
	|				ИЗ
	|					СчетаАвансов КАК СчетаАвансов),
	|			,
	|			Организация = &Организация
	|				И Субконто3 В
	|					(ВЫБРАТЬ
	|						ТаблицаНДССАвансов.СчетФактура
	|					ИЗ
	|						ТаблицаНДССАвансов КАК ТаблицаНДССАвансов)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт > 0";
				   
	ТаблицаНезачтенныхАвансов = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("Поставщик, ДоговорКонтрагента, СчетФактура");
	МассивРаспределения = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНезачтенныхАвансов Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
		СтрокиОтбора = ТаблицаНДССАвансов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			Если (СтрокаОтбора.СуммаБезНДС = 0
				И СтрокаОтбора.НДС = 0) Или СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаРаспределения = Мин(СтрокаТаблицы.Сумма, СтрокаОтбора.СуммаБезНДС + СтрокаОтбора.НДС);
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - СуммаРаспределения;
			МассивРаспределения.Очистить();
			
			МассивРаспределения.Добавить(СтрокаОтбора.СуммаБезНДС);
			МассивРаспределения.Добавить(СтрокаОтбора.НДС);
			
			ИтогРаспределения = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаРаспределения, МассивРаспределения);
			
			СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС - ИтогРаспределения[0];
			СтрокаОтбора.НДС = СтрокаОтбора.НДС - ИтогРаспределения[1];
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	Для	Каждого СтрокаТаблицыНДССАвансов Из ТаблицаНДССАвансов Цикл
		Если СтрокаТаблицыНДССАвансов.СуммаБезНДС = 0
			И СтрокаТаблицыНДССАвансов.НДС = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыНДССАвансов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаНДССАвансов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Возврат ТаблицаНДССАвансов;
		
КонецФункции

// Заполнение ТЧ ВосстановленПоДругимОперациям
Функция ПодготовитьДанныеРазделаВосстановленПоДругимОперациям(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидНачисления = &НДСВидНачисления) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  		 СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления", 	 Перечисления.НДСВидНачисления.НДСВосстановлен);
	
	НДСкВосстановлению = Запрос.Выполнить().Выгрузить();
	НДСкВосстановлению.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Если НДСкВосстановлению.Количество() > 0 Тогда
	
		//Определение счетов учета НДС для формирования проводки по восстановлению
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСНачисленный.СчетФактура КАК СчетФактура,
		|	НДСНачисленный.ВидЦенности,
		|	НДСНачисленный.СтавкаНДС,
		|	НДСНачисленный.СчетУчетаНДС,
		|	СУММА(ВЫБОР
		|			КОГДА НДСНачисленный.ВидДвижения = &ДвижениеПриход
		|				ТОГДА НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС
		|			ИНАЧЕ (НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС) * -1
		|		КОНЕЦ) КАК СуммаСНДС
		|ИЗ
		|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
		|ГДЕ
		|	НДСНачисленный.Организация = &Организация
		|	И НДСНачисленный.СчетФактура В(&СписокСчетовФактур)
		|	И НДСНачисленный.ВидНачисления = &НДСВидНачисления
		|	И НДСНачисленный.ВидЦенности В(&СписокВидовЦенностей)
		|	И НДСНачисленный.СтавкаНДС В(&СписокСтавокНДС)
		|	И НДСНачисленный.Период <= &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСНачисленный.Организация,
		|	НДСНачисленный.ВидЦенности,
		|	НДСНачисленный.СчетУчетаНДС,
		|	НДСНачисленный.СчетФактура,
		|	НДСНачисленный.СтавкаНДС
		|
		|ИМЕЮЩИЕ
		|	(НЕ СУММА(ВЫБОР
		|				КОГДА НДСНачисленный.ВидДвижения = &ДвижениеПриход
		|					ТОГДА НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС
		|				ИНАЧЕ (НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС) * -1
		|			КОНЕЦ) = 0)
		|ИТОГИ ПО
		|	СчетФактура";
		
		Запрос.УстановитьПараметр("КонецПериода", 	  КонецДня(СтруктураПараметров.Дата));
		Запрос.УстановитьПараметр("Организация",  	  СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("НДСВидНачисления", Перечисления.НДСВидНачисления.НДСВосстановлен);
		
		Запрос.УстановитьПараметр("СписокСчетовФактур",   ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("СчетФактура"),Истина));
		Запрос.УстановитьПараметр("СписокВидовЦенностей", ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("ВидЦенности"),Истина));
		Запрос.УстановитьПараметр("СписокСтавокНДС", 	  ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(НДСкВосстановлению.ВыгрузитьКолонку("СтавкаНДС"),Истина));
		
		Запрос.УстановитьПараметр("ДвижениеПриход", ВидДвиженияНакопления.Приход);
		
		НДСкВосстановлениюВРазрезеСчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СтрокиКУдалению = Новый Массив();
		КоличествоБазовыхСтрок = НДСкВосстановлению.Количество();
		
		Для НомерСтрокиВосстановления = 1 По КоличествоБазовыхСтрок Цикл
			
			СтрокаВосстановления = НДСкВосстановлению[НомерСтрокиВосстановления - 1];
			СтрокаСФВРазрезеСчетов = НДСкВосстановлениюВРазрезеСчетов.Строки.Найти(СтрокаВосстановления.СчетФактура,"СчетФактура");
			Если СтрокаСФВРазрезеСчетов = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			РасшифровкаСФвРазрезеСчетов = СтрокаСФВРазрезеСчетов.Строки.НайтиСтроки(Новый Структура("ВидЦенности,СтавкаНДС", СтрокаВосстановления.ВидЦенности, СтрокаВосстановления.СтавкаНДС));
			
			Если РасшифровкаСФвРазрезеСчетов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СуммаСНДСПоСтроке = СтрокаВосстановления.СуммаСНДС;
			
			Для каждого СтрокаРасшифровки Из РасшифровкаСФвРазрезеСчетов Цикл
				СуммаПокрытия = 0;
				Если НЕ СуммаСНДСПоСтроке * СтрокаРасшифровки.СуммаСНДС > 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				СуммаПокрытия = ?(СуммаСНДСПоСтроке > 0, Мин(СуммаСНДСПоСтроке, СтрокаРасшифровки.СуммаСНДС), Макс(СуммаСНДСПоСтроке, СтрокаРасшифровки.СуммаСНДС));
				
				//Добавление новой строки по восстановлению в разрезе СФ
				НоваяСтрокаВосстановления = НДСкВосстановлению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВосстановления, СтрокаВосстановления);
				НоваяСтрокаВосстановления.СуммаСНДС = СуммаПокрытия;
				НоваяСтрокаВосстановления.СуммаБезНДС = Окр(НоваяСтрокаВосстановления.СуммаБезНДС * СуммаПокрытия / СуммаСНДСПоСтроке,2);
				НоваяСтрокаВосстановления.НДС = НоваяСтрокаВосстановления.СуммаСНДС - НоваяСтрокаВосстановления.СуммаБезНДС;
				НоваяСтрокаВосстановления.СчетУчетаНДС = СтрокаРасшифровки.СчетУчетаНДС;
				
				СуммаСНДСПоСтроке = СуммаСНДСПоСтроке - СуммаПокрытия;
				
				//Уменьшение суммы по строке восстановления без указания счета
				СтрокаВосстановления.СуммаСНДС = СтрокаВосстановления.СуммаСНДС - НоваяСтрокаВосстановления.СуммаСНДС;
				СтрокаВосстановления.СуммаБезНДС = СтрокаВосстановления.СуммаБезНДС - НоваяСтрокаВосстановления.СуммаБезНДС;
				СтрокаВосстановления.НДС = СтрокаВосстановления.НДС - НоваяСтрокаВосстановления.НДС;
				
				//Уменьшение остатка в таблице расшифровки 
				СтрокаРасшифровки.СуммаСНДС = СтрокаРасшифровки.СуммаСНДС - НоваяСтрокаВосстановления.СуммаСНДС;
				
				Если СуммаСНДСПоСтроке = 0 Тогда
					СтрокиКУдалению.Добавить(СтрокаВосстановления);
					Прервать;
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если НЕ СуммаСНДСПоСтроке = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаВосстановления);
				НоваяСтрокаВосстановления = НДСкВосстановлению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВосстановления, СтрокаВосстановления);
			КонецЕсли; 
		КонецЦикла;
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			НДСкВосстановлению.Удалить(СтрокаКУдалению);
		КонецЦикла; 

	КонецЕсли; 
	
	Возврат НДСкВосстановлению;
		
КонецФункции

// Заполнение ТЧ НеОтражаетсяВКниге
Функция ПодготовитьДанныеРазделаНеОтражаетсяВКниге(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие,
	|	НДСНачисленныйОстатки.ВидНачисления,
	|	НДСНачисленныйОстатки.ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидНачисления В (&НеотражаемыеВидыНачисленияНДС)) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	НеотражаемыеВидыНачисленияНДС = Новый Массив();
	НеотражаемыеВидыНачисленияНДС.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
		
	Запрос.УстановитьПараметр("Организация",  					СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецПериода", 					КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", 			Новый Граница(КонецДня(СтруктураПараметров.Дата),ВидГраницы.Включая));
    Запрос.УстановитьПараметр("НеотражаемыеВидыНачисленияНДС",  НеотражаемыеВидыНачисленияНДС);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 	Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 		Перечисления.СобытияПоНДСПродажи.НДССкорректирован);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

#КонецЕсли