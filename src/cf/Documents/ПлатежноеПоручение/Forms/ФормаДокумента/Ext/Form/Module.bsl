&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем СтрокаПоискаПоКБК;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЗаполнитьСписокОчередностьПлатежа();
	
	// При создании платежки из списка задач бухгалтера заполняем правило и период события
	Если Параметры.Свойство("ПериодСобытия") Тогда
		
		Если ТипЗнч(Параметры.Правило) = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
			ПравилоУплатыНалогов            = Параметры.Правило;
			ПериодСобытияКалендаря          = Параметры.ПериодСобытия;
		Иначе
			ПравилоРегулярногоПлатежа       = Параметры.Правило;
			ПериодСобытияРегулярногоПлатежа = Параметры.ПериодСобытия;
		КонецЕсли;
	
	КонецЕсли;
	
	Если Параметры.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = Параметры.ВидОперации;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если Параметры.ЗначенияЗаполнения.Свойство("КодБК")
		И Параметры.ЗначенияЗаполнения.Свойство("КодНалоговогоОргана")
		И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ВидГосударственногоОргана = Справочники.Контрагенты.ВидГосударственногоОрганаПоКБК(Параметры.ЗначенияЗаполнения.КодБК);
		Если ЗначениеЗаполнено(ВидГосударственногоОргана)
			И ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий Тогда
			ЗапроситьСведенияОПолучателе = Новый Структура();
			ЗапроситьСведенияОПолучателе.Вставить("ВидГосударственногоОргана", ВидГосударственногоОргана);
			ЗапроситьСведенияОПолучателе.Вставить("КодГосударственногоОргана", Параметры.ЗначенияЗаполнения.КодНалоговогоОргана);
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьПлатежныеРеквизитыФоновоеЗадание();
	
	// Уведомим об изменениях в правилах платежей в бюджет
	НомерСчетаПолучателя = Объект.СчетКонтрагента.НомерСчета;
	
	// Если платежка не соответствует правилам платежей в бюджет,
	// то предложим пользователю варианты выхода из случая
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Если НЕ Объект.ПеречислениеВБюджет
			И (ПлатежиВБюджетКлиентСервер.ЭтоСчетПлатежаВБюджет(НомерСчетаПолучателя, Объект.Дата)
			ИЛИ УчетДенежныхСредствКлиентСервер.ПеречислениеВБюджет(Объект.ВидОперации, Объект.Контрагент))Тогда
			ВключитьПеречислениеВБюджет();
		Иначе
			НайтиОшибкиПлатежаВБюджет(Параметры.ЗначениеКопирования.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации =
			Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтотОбъект, Элементы.ИнформационныеСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПредупреждениеОбОшибке", 0.5, Истина);
	
	Если ЗначениеЗаполнено(ЗапроситьСведенияОПолучателе) Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьЗаполнениеСведенийОГосударственномОргане", 0.1, Истина);
		
	КонецЕсли;
	
	ПроверитьВыполнениеФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.РеквизитыУплатыНалоговИПлатежейВБюджет") Тогда
		
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога");
			ВидОперацииОбработатьИзменение();
		КонецЕсли;
		
		ВключитьПеречислениеВБюджет(ВыбранноеЗначение);
		
		УправлениеФормой(ЭтотОбъект);
		
		УведомитьПользователяПлатежиВБюджет();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		НадписьСледующийПлатеж = НадписьСледующийПлатеж(ВыбранноеЗначение, ПериодСобытияРегулярногоПлатежа);
		
		Если УстановитьПравилоПоДокументу(Объект.Организация, Объект.Ссылка, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа) Тогда
			ОбновитьЗадачиБухгалтера();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		ПравилоРегулярногоПлатежа = НовыйОбъект;
		НадписьСледующийПлатеж    = НадписьСледующийПлатеж(НовыйОбъект, ПериодСобытияРегулярногоПлатежа);
		
		Если УстановитьПравилоПоДокументу(Объект.Организация, Объект.Ссылка, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа) Тогда
			ОбновитьЗадачиБухгалтера();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборРеквизитовПлательщика" Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		НадписьРеквизитыПлательщика = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ВыборРеквизитовПолучателя" Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		НадписьРеквизитыПолучателя = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ВыборРеквизитовПлатежейВБюджет" И Источник = ЭтотОбъект Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ОбновитьФорму" И ТипЗнч(Источник) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		ОрганизацияПриИзмененииНаСервере();
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекПлатежныхПорученийИТребований" Тогда
		НастройкиПечатиПриИзмененииНаСервере();
		ЭтотОбъект.Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "Запись_Контрагенты" Тогда
		Если Источник = Объект.Контрагент Тогда
			УстановитьРеквизитыПолучателяНаСервере(Истина);
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если Источник = Объект.Организация Тогда
			УстановитьРеквизитыПлательщикаНаСервере(Истина);
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗаполнитьСписокОчередностьПлатежа();
	ЗаполнитьПравилоРегулярногоПлатежаНаСервере(Объект.Ссылка);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверитьПередЗаписью(Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение   = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПлатежноеПоручение";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ПропуститьПроверку")
		И ПараметрыЗаписи.ПропуститьПроверку Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ПеречислениеВБюджет Тогда
		СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверкаРеквизитовПередЗаписьюНаСервере();
	
	ТекстВопроса = "";
	Если РезультатПроверки.ПредупредитьОбОшибках Тогда
		
		ТекстВопроса = НСтр("ru = 'При проверке правильности заполнения реквизитов обнаружены ошибки.
			|Записать с ошибками?'");
		
	ИначеЕсли РезультатПроверки.ПредупредитьДублиУИН Тогда
		
		ШаблонТекстаВопроса = НСтр("ru = '%1
			|
			|Записать документ?'");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекстаВопроса,
			РезультатПроверки.ИнформацияДублиУИН);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина; // Примем решение позже, в зависимости от ответа пользователя
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросЗаписатьСОшибкамиЗавершение", ЭтотОбъект, ПараметрыЗаписи),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(ПравилоРегулярногоПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПравилоОбновлено",
		УстановитьПравилоПоДокументу(ТекущийОбъект.Организация, ТекущийОбъект.Ссылка, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	ХранилищеОбщихНастроек.Сохранить("ПлатежноеПоручение_ВидПлатежа",, Объект.ВидПлатежа);
	
	УстановитьСостояниеДокумента();
	
	//Если задано правило уплаты налогов, зарегистрируем документ в регистре
	Если ТекущийОбъект.ПеречислениеВБюджет И ЗначениеЗаполнено(ПравилоУплатыНалогов) Тогда
		РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
			ТекущийОбъект.Организация,
			ТекущийОбъект.Ссылка,
			ПравилоУплатыНалогов,
			ПериодСобытияКалендаря);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка);
	
	Если Объект.ПеречислениеВБюджет Тогда
		ПараметрыНалога = Новый Структура;
		ПараметрыНалога.Вставить("ДокументОснование", Объект.ДокументОснование);
		ПараметрыНалога.Вставить("ПоказательПериода", Объект.ПоказательПериода);
		ПараметрыНалога.Вставить("КБК",               Объект.КодБК);
		ПараметрыНалога.Вставить("ОКАТО",             Объект.КодОКАТО);
		ПараметрыНалога.Вставить("Ссылка",            Объект.Ссылка);
		ПараметрыНалога.Вставить("Оплачено",          Объект.Оплачено);
		ПараметрыНалога.Вставить("Сумма",             Объект.СуммаДокумента);
		Оповестить("Запись_ПлатежныйДокумент_УплатаНалогов", ПараметрыНалога);
	КонецЕсли;
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	НадписьСледующийПлатеж = НадписьСледующийПлатеж(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
	Если ПараметрыЗаписи.Свойство("ПравилоОбновлено") И ПараметрыЗаписи.ПравилоОбновлено Тогда
		
		ОбновитьЗадачиБухгалтера();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) И ВидОперацииДоИзменения <> Объект.ВидОперации Тогда
		
		ВидОперацииПриИзмененииСервер();
		
		ПроверитьВыполнениеФоновогоЗадания();
		
		УведомитьПользователяПлатежиВБюджет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьОчередностьПлатежаПо345ФЗ(ЭтотОбъект);
	ИзменитьПодсказкуОчередностьПлатежа();
	
	Если Объект.ПеречислениеВБюджет
		И ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ПредыдущаяДата)
		<> ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(Объект.Дата) Тогда
		
		ИзменениеПериодаПримененияПравилПлатежаВБюджет();
		
	ИначеЕсли НЕ Объект.ПеречислениеВБюджет
		И (ПлатежиВБюджетКлиентСервер.ЭтоСчетПлатежаВБюджет(НомерСчетаПолучателя, Объект.Дата)
		ИЛИ УчетДенежныхСредствКлиентСервер.ПеречислениеВБюджет(Объект.ВидОперации, Объект.Контрагент))Тогда
		
		ВключитьПеречислениеВБюджет();
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) <> НачалоДня(ПредыдущаяДата) Тогда
		ЗаполнитьВспомогательныеРеквизитыПолучателя(Истина);
		НадписьРеквизитыПолучателя = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
		УстановитьРеквизитыПлательщикаНаСервере(Истина);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	УведомитьПользователяПлатежиВБюджет();
	
	ДатаСледующегоПлатежа = ДатаСледующегоПлатежа(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
	Если ЗначениеЗаполнено(ДатаСледующегоПлатежа) И Объект.Дата >= ДатаСледующегоПлатежа Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Дата документа больше срока следующего платежа.
			|Перейти к редактированию расписания (документ будет записан)?'");
		Оповещение   = Новый ОписаниеОповещения("ВопросРедактированиеПравилаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ОрганизацияПриИзмененииНаСервере();
		
		ПроверитьВыполнениеФоновогоЗадания();
		
		УведомитьПользователяПлатежиВБюджет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	УстановитьРеквизитыПлательщикаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		
		АктуализированыРеквизитыПлатежаВБюджет = Ложь;
		НалогПриИзмененииНаСервере(АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК);
		
		Если АктуализированыРеквизитыПлатежаВБюджет Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Коды бюджетной классификации успешно обновлены'"),
				"e1cib/data/Справочник.ВидыНалоговИПлатежейВБюджет.Форма.ФормаСписка",
				НСтр("ru = 'Налоги и взносы'"),
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
		ПроверитьВыполнениеФоновогоЗадания();
		
		УведомитьПользователяПлатежиВБюджет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(Параметры.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(Параметры.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидНалоговогоОбязательстваПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) И ЗначениеЗаполнено(Объект.ВидНалоговогоОбязательства) Тогда
		
		РеквизитыОбъекта = Новый Структура("КодБК, Налог, ВидНалоговогоОбязательства, Организация, Дата, ПоказательПериода");
		ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
		
		РеквизитыПлатежаВБюджет = РеквизитыПлатежаВБюджетПриИзмененииВидаНалоговогоОбязательства(РеквизитыОбъекта);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПлатежаВБюджет);
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
	ПроверитьВыполнениеФоновогоЗадания();
	
	УведомитьПользователяПлатежиВБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		
		СчетКонтрагентаПриИзмененииНаСервере();
		
		ПроверитьВыполнениеФоновогоЗадания();
		
		УведомитьПользователяПлатежиВБюджет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере(Ложь);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПолучателяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	ЕстьОшибки = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", НСтр("ru = 'Организация'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", ЕстьОшибки);
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Получатель'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", ЕстьОшибки);
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Счет получателя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетКонтрагента", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭтоПлательщик", Ложь);
	СтруктураПараметров.Вставить("Объект", Объект);
	
	ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.РеквизитыПлательщикаПолучателя", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Объект.СуммаНДС = ПересчитатьСуммуНДС(Объект.СуммаДокумента, Объект.СтавкаНДС);
	СформироватьНазначениеПлатежаНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	Объект.СуммаНДС = ПересчитатьСуммуНДС(Объект.СуммаДокумента, Объект.СтавкаНДС);
	СформироватьНазначениеПлатежаНаСервере(Истина);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежаНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлатежейВБюджетНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРедактированияРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияРеквизитовПлатежаВБюджет(ИсправитьОшибки = Ложь, АдресОшибок = "")
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение", ЭтотОбъект);
	
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	
	// Заполним показатели
	Для каждого ОписаниеРеквизита Из ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение() Цикл
		РеквизитыПлатежаВБюджет[ОписаниеРеквизита.Ключ] = Объект[ОписаниеРеквизита.Значение];
	КонецЦикла;
	
	// Заполним контекст
	СвойстваКонтекста = Новый Структура;
	СвойстваКонтекста.Вставить("Период",                     Объект.Дата);
	СвойстваКонтекста.Вставить("Организация",                Объект.Организация);
	СвойстваКонтекста.Вставить("СчетПолучателя",             Объект.СчетКонтрагента);
	СвойстваКонтекста.Вставить("Налог",                      Объект.Налог);
	СвойстваКонтекста.Вставить("ВидНалоговогоОбязательства", Объект.ВидНалоговогоОбязательства);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Реквизиты",                РеквизитыПлатежаВБюджет);
	ПараметрыФормы.Вставить("СвойстваКонтекста",        СвойстваКонтекста);
	ПараметрыФормы.Вставить("ТолькоПросмотр",           ТолькоПросмотр);
	ПараметрыФормы.Вставить("ИсправитьОшибки",          ИсправитьОшибки);
	ПараметрыФормы.Вставить("АдресИнформацииОбОшибках", АдресОшибок);
	ПараметрыФормы.Вставить("Ссылка",                   Объект.Ссылка);
	
	ОткрытьФорму(
		"ОбщаяФорма.РеквизитыПлатежаВБюджет",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоПриИзменении(Элемент)
	
	ДокументСписания = НайтиДокументСписанияНаСервере(Объект.Ссылка, Объект.ДокументОснование, НадписьДокументСписания);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.НазначениеПлатежа) Тогда
		НазначениеПлатежаБылоИзмененоВручную = Ложь;
	Иначе
		НазначениеПлатежаБылоИзмененоВручную = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередностьПлатежаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьСписокЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСледующийПлатежНажатие(Элемент, СтандартнаяОбработка)
	
	Если Объект.Организация.Пустая() Тогда
		// Организация, по которой создается регулярный платеж, задается в форме документа и не может быть пустой.
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект");
	
	ИначеЕсли Объект.Ссылка.Пустая()  Тогда
		// Если редактируем правило по новому документу - запишем документ
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
				|Выполнение команды ""Расписание повторения платежа"" возможно только после записи данных.
				|Данные будут записаны.'");
					
		Оповещение = Новый ОписаниеОповещения("ВопросРедактированиеПравилаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ТекстВопроса);
		
	Иначе
		
		ОткрытьПравилоРегулярногоПлатежа();
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаExtendedTooltipОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "e1cib/app/Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ПлатежныеРеквизиты", ПлатежныеРеквизиты());
		ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
		ОписаниеОповещения = Новый ОписаниеОповещения("СчетКонтрагентаExtendedTooltipОбработкаНавигационнойСсылкиЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов",
			ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения);
		
	ИначеЕсли НавигационнаяСсылка = "e1cib/app/Обработка.ИнтернетПоддержкаПользователей.Форма.ОбщаяАвторизация" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПлатежныеРеквизиты", ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаExtendedTooltipОбработкаНавигационнойСсылкиЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("ПерезаполнитьКонтрагента") Тогда
		
		УстановитьКонтрагентаНаСервере(РезультатВыполнения.Контрагент, РезультатВыполнения.СчетКонтрагента);
		
	КонецЕсли;
	
	ПроверитьВыполнениеФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Элемент = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		Элемент = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",  Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет"));
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора",
			Новый Структура("ПараметрыОтбораСписка, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ФормаВыбора",
			Новый Структура("Отбор, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Объект.СуммаДокумента = СуммаВыплаченнойЗарплатыРаботнику(
			Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
	Иначе
		Объект.СуммаДокумента = 0;
	КонецЕсли;
	ПлатежнаяВедомостьПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРЕДУПРЕЖДЕНИЕ ОБ ИЗМЕНЕНИЯХ ПРАВИЛ ПЛАТЕЖЕЙ В БЮДЖЕТ

&НаКлиенте
Функция ЕстьОшибкиЗаполненияПлатежаВБюджет()
	
	ПредыдущаяДата = Объект.Дата;
	
	Возврат ЗначениеЗаполнено(АдресОшибок);
	
КонецФункции

&НаСервере
Функция НайтиОшибкиПлатежаВБюджет(Знач ПредыдущаяДата = '0001-01-01')
	
	АдресОшибок = ""; // Устанавливает реквизит формы
	
	Если НЕ Объект.ПеречислениеВБюджет Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ПредыдущаяДата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(Объект.Дата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Ошибки = Документы.ПлатежноеПоручение.ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(Объект, Ложь);
	Если Ошибки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АдресОшибок = ПоместитьВоВременноеХранилище(Ошибки, УникальныйИдентификатор);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВопросИсправитьОшибкиПлатежаВБюджетЗавершение(РезультатВопроса, АдресОшибок) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		// Исправить прямо сейчас
		ОткрытьФормуРедактированияРеквизитовПлатежаВБюджет(Истина);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Пропустить Тогда
		// Показать ошибки
		ОткрытьФормуРедактированияРеквизитовПлатежаВБюджет(Ложь, АдресОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомитьПользователяПлатежиВБюджет()
	
	Если ЕстьОшибкиЗаполненияПлатежаВБюджет() Тогда
		
		ИсправитьОшибкиПлатежаВБюджет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьОшибкиПлатежаВБюджет()
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'С %1 применяются новые правила заполнения платежных поручений в бюджет.
			|
			|Это платежное поручение не соответствует новым правилам.
			|
			|Исправить реквизиты платежа в бюджет сейчас?'"),
		Формат(ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа107н(), "ДЛФ=DD"));
		
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,         НСтр("ru = 'Да, исправить сейчас'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет,        НСтр("ru = 'Нет, исправить позже'"));
	Кнопки.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Показать ошибки'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросИсправитьОшибкиПлатежаВБюджетЗавершение", ЭтотОбъект, АдресОшибок);
	
	АдресОшибок = ""; // Очищаем значение реквизита формы. До следующего вызова НайтиОшибкиПлатежаВБюджет не используем реквизит формы.
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, Кнопки[0].Значение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("Закрыть",     Истина);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПлатежиВБюджет(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимВыбора", Истина);
	
	СписокОрганизаций   = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Объект.Организация);
	СписокОрганизаций.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	
	СтруктураОтбора     = Новый Структура("Организация", СписокОрганизаций);
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.Форма.ФормаВыбора", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПлатежногоПоручения(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Банковский счет'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетОрганизации", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет получателя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетКонтрагента", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// См. Документы.ПлатежноеПоручение.НовыеПараметрыНазначенияПлатежа();
	ПараметрыНазначенияПлатежа = Новый Структура(
	"Организация, Дата, ВидОперации,
	|Налог, ВидНалоговогоОбязательства,
	|Контрагент, ПеречислениеВБюджет, ПлатежнаяВедомость,
	|СчетКонтрагента, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ПараметрыНазначенияПлатежа, Объект);
	
	АвтоТекстНазначения = АвтоТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа);

	ПараметрыФормы = Новый Структура(
		"БанковскийСчетОрганизации, БанковскийСчетКонтрагента, АвтоТекстНазначения, ОткрытИзПлатежки",
		Объект.СчетОрганизации, Объект.СчетКонтрагента, АвтоТекстНазначения, Истина);
	
	ОткрытьФорму("ОбщаяФорма.НастройкиПлатежныхПорученийТребований", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Работа с регулярными платежами
&НаСервереБезКонтекста
Функция ДатаСледующегоПлатежа(ПравилоРегулярногоПлатежа, ПериодСобытия)
	
	Если ЗначениеЗаполнено(ПравилоРегулярногоПлатежа) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоРегулярногоПлатежа, "Выполняется") Тогда
		
		Возврат Справочники.ПравилаРегулярныхПлатежей.ДатаБлижайшегоПлатежа(ПравилоРегулярногоПлатежа, ПериодСобытия);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПравилоРегулярногоПлатежаНаСервере(ПлатежноеПоручение)
	
	ЗаписьПоПлатежномуПоручению = РегистрыСведений.РегулярныеПлатежи.ЗаписьПравилаПоПлатежномуПоручению(ПлатежноеПоручение);
	
	Если ЗаписьПоПлатежномуПоручению <> Неопределено Тогда
		ПравилоРегулярногоПлатежа       = ЗаписьПоПлатежномуПоручению.Правило;
		ПериодСобытияРегулярногоПлатежа = ЗаписьПоПлатежномуПоручению.ПериодСобытия;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗаполненияКалендарьБухгалтера()
	
	Результат = ПолучитьИзВременногоХранилища(АдресЗаполнениеЗадачБухгалтера);
	
	Если ЗначениеЗаполнено(Результат) И Результат Тогда
		
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
		
	Иначе
		
		ПодключитьОбработчикОжидания("ПроверкаЗаполненияКалендарьБухгалтера", 2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьЗадачиБухгалтераНаСервере(Организация, УникальныйИдентификаторФормы, АдресХранилища)
	
	РезультатВыполнения = КалендарьБухгалтера.ЗапуститьЗаполнениеВФоне(УникальныйИдентификаторФормы, Организация, Ложь, Ложь, Истина);
	
	АдресХранилища = РезультатВыполнения.АдресХранилища;
	
	Возврат РезультатВыполнения.ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗадачиБухгалтера()
	Перем АдресХранилища;
	
	Если ОбновитьЗадачиБухгалтераНаСервере(Объект.Организация, УникальныйИдентификатор, АдресХранилища) Тогда
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	Иначе
		АдресЗаполнениеЗадачБухгалтера = АдресХранилища;
		
		ПодключитьОбработчикОжидания("ПроверкаЗаполненияКалендарьБухгалтера", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилоРегулярногоПлатежа()
	
	ПараметрыРегулярныхПлатежей = Новый Структура;
	ПараметрыРегулярныхПлатежей.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыРегулярныхПлатежей.Вставить("ПериодСобытия", ПериодСобытияРегулярногоПлатежа);
	
	Если ЗначениеЗаполнено(ПравилоРегулярногоПлатежа) Тогда
		
		ПараметрыРегулярныхПлатежей.Вставить("Ключ", ПравилоРегулярногоПлатежа);
		
	Иначе
		ЗначенияЗаполнения = Новый Структура;
		
		ЗначенияЗаполнения.Вставить("Организация",      Объект.Организация);
		ЗначенияЗаполнения.Вставить("Периодичность",    ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
		ЗначенияЗаполнения.Вставить("НачалоВыполнения", ДобавитьМесяц(Объект.Дата, 1));
		ЗначенияЗаполнения.Вставить("Выполняется",      Истина);
		
		ПараметрыРегулярныхПлатежей.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ПравилаРегулярныхПлатежей.ФормаОбъекта", ПараметрыРегулярныхПлатежей, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПравилоПоДокументу(Организация, ПлатежноеПоручение, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа)
	
	Возврат РегистрыСведений.РегулярныеПлатежи.ДобавитьЗаписьПравила(Организация, ПлатежноеПоручение, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьСледующийПлатеж(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа)
	
	ДатаСледующегоПлатежа = ДатаСледующегоПлатежа(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
	Если ЗначениеЗаполнено(ДатаСледующегоПлатежа) Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Следующий платеж %1'"),
			Формат(ДатаСледующегоПлатежа, "ДЛФ=D"));
	
	Иначе
		
		Возврат НСтр("ru = 'Повторять платеж?'");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
	// Установка реквизитов формы
	ВалютаРегламентированногоУчета        = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	ВидОперацииДоИзменения                = Объект.ВидОперации;
	
	ВидыПеречисленийВБюджет = Новый Структура;
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыПеречисленийВБюджет.ЗначенияПеречисления Цикл
		ВидыПеречисленийВБюджет.Вставить(ЗначениеПеречисления.Имя, Перечисления.ВидыПеречисленийВБюджет[ЗначениеПеречисления.Имя]);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПлатежа) Тогда
		СохраненныйВид = ХранилищеОбщихНастроек.Загрузить("ПлатежноеПоручение_ВидПлатежа");
		Если СохраненныйВид <> "" Тогда
			Объект.ВидПлатежа = СохраненныйВид;
		Иначе
			Объект.ВидПлатежа = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	ПеречислениеВБюджет = УчетДенежныхСредствКлиентСервер.ПеречислениеВБюджет(Объект.ВидОперации, Объект.Контрагент);
	
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Объект.Организация,
		Объект.СчетОрганизации,
		?(ПереводМеждуСчетами, Объект.Организация, Объект.Контрагент),
		Объект.СчетКонтрагента,
		ПеречислениеВБюджет,
		Объект.Дата);
	
	ПараметрыНазначенияПлатежа = Документы.ПлатежноеПоручение.НовыеПараметрыНазначенияПлатежа();
	ЗаполнитьЗначенияСвойств(ПараметрыНазначенияПлатежа, Объект);
	ТекстНазначенияАвто = Документы.ПлатежноеПоручение.ТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа);
	
	АвтоЗначенияРеквизитов.Вставить("ТекстНазначенияПлатежа", ТекстНазначенияАвто);
	НазначениеПлатежаБылоИзмененоВручную = Документы.ПлатежноеПоручение.НазначениеПлатежаИзмененоВручную(
		Объект.НазначениеПлатежа, ТекстНазначенияАвто);
	
	ОпределитьЮрФизЛицо();
	НадписьРеквизитыПлательщика     = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	НадписьРеквизитыПолучателя      = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	НадписьСледующийПлатеж          = НадписьСледующийПлатеж(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	ПоказыватьВДокументахСчетаУчета = Истина;
	
	ДокументСписания = Документы.ПлатежноеПоручение.НайтиДокументСписания(Объект.Ссылка, Объект.ДокументОснование, НадписьДокументСписания);
	
	ПараметрыДляСчетов = Новый Массив;
	ПараметрыДляСчетов.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", ВалютаРегламентированногоУчета));
	
	Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыДляСчетов);
	Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыДляСчетов);
	
	УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	УстановитьСостояниеДокумента();
	
	ЗаполнитьСписокВыбора(Элементы.ВидНалоговогоОбязательства, СписокВидовНалоговыхОбязательств(Объект.Налог, Объект.Дата));
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ПеречислениеЗарплаты        = Ложь;
	ПеречислениеФизическомуЛицу = Ложь;
	ПереводМеждуСчетами         = Ложь;
	ПеречислениеВБюджет         = Объект.ПеречислениеВБюджет;
	ПеречислениеКонтрагенту     = Ложь;
	УплатаНалога                = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
		ПеречислениеВБюджет = Истина;
		УплатаНалога = Истина;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя") Тогда
		ПереводМеждуСчетами = Истина;
	ИначеЕсли УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации) Тогда
		ПеречислениеФизическомуЛицу = Истина;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику") Тогда
			Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
				ПеречислениеЗарплаты = Ложь;
			Иначе
				ПеречислениеЗарплаты = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП") Тогда
		ПеречислениеКонтрагенту = Истина;
	КонецЕсли;
	
	Элементы.ПлатежнаяВедомость.Видимость   = ПеречислениеЗарплаты;
	Элементы.Контрагент.Доступность         = НЕ ПереводМеждуСчетами;
	Элементы.СчетКонтрагента.Доступность    = ПереводМеждуСчетами ИЛИ ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.ДоговорКонтрагента.Видимость   = ПеречислениеКонтрагенту;
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.СтавкаНДС.Видимость            = ПеречислениеКонтрагенту;
	Элементы.СуммаНДС.Видимость             = ПеречислениеКонтрагенту;
	Элементы.СуммаНДС.Доступность           = Объект.СтавкаНДС <> ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
	                                        И Объект.СтавкаНДС <> ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") И ПеречислениеКонтрагенту;
	
	Элементы.Налог.Видимость                          = УплатаНалога;
	Элементы.ВидНалоговогоОбязательства.Видимость     = УплатаНалога;
	Элементы.ГруппаРеквизитыПлатежейВБюджет.Видимость = ПеречислениеВБюджет;
	
	Элементы.ИдентификаторПлатежа.Видимость = ПеречислениеКонтрагенту;
	Если Объект.Дата >= ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа() Тогда
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании            = "";
	Иначе
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании            =
			НСтр("ru = 'До 31.03.2014 идентификатор платежа используется только для платежей в бюджет'");
	КонецЕсли;
	
	ОбновитьПодсказкуОчередностьПлатежа(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФункциональныеОпцииФормы(Форма)
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкуОчередностьПлатежа(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ОчередностьПлатежа > 0 Тогда
		Если Объект.ОчередностьПлатежа > Элементы.ОчередностьПлатежа.СписокВыбора.Количество() Тогда
			// Если ОчередностьПлатежа = 6 будут выбирать после вступления в действие 345-Ф, не будем у такого значения отображать подсказку
			Форма.РасшифровкаОчередностиПлатежа = "";
		Иначе
			Форма.РасшифровкаОчередностиПлатежа = Сред(Элементы.ОчередностьПлатежа.СписокВыбора[
				Объект.ОчередностьПлатежа - 1].Представление, 5);
		КонецЕсли;
	Иначе
		Форма.РасшифровкаОчередностиПлатежа = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьЮрФизЛицо()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЮридическоеФизическоеЛицо");
	Иначе
		ОрганизацияЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
	Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
		ИЛИ ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		КонтрагентЮрФизЛицо  = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		КонтрагентЮрФизЛицо  = ОрганизацияЮрФизЛицо;
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮридическоеФизическоеЛицо");
	Иначе
		КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаРеквизитовПередЗаписьюНаСервере()
	
	Результат = Новый Структура;
	Результат.Вставить("ПредупредитьОбОшибках", Ложь);
	Результат.Вставить("ПредупредитьДублиУИН",  Ложь);
	Результат.Вставить("ИнформацияДублиУИН",    "");
	
	// Проверяем все, кроме УИН и выводим перечень ошибок
	Ошибки = Документы.ПлатежноеПоручение.ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(Объект, Истина, Ложь);
	
	// Проверяем дубли УИН
	ДублиУИН = ПлатежиВБюджет.ПроверитьДублиУИН(Объект.ИдентификаторПлатежа, Объект.Ссылка);
	
	Если Ошибки.Количество() > 0 Тогда
		
		// Информацию о дублях УИН выводим среди других ошибок
		Для каждого Ошибка Из ДублиУИН Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка.Описание, Объект.Ссылка);
		КонецЦикла;
		
		Результат.ПредупредитьОбОшибках = Истина;
		
	ИначеЕсли ДублиУИН.Количество() > 0 Тогда
		
		// Информацию о дублях УИН выводим отдельно
		Результат.ПредупредитьДублиУИН = Истина;
		
		ТекстыСообщений = Новый Массив;
		Для каждого ОписаниеОшибки Из ДублиУИН Цикл
			ТекстыСообщений.Добавить(ОписаниеОшибки.Описание);
		КонецЦикла;
		
		Результат.ИнформацияДублиУИН = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ТекстыСообщений, Символы.ПС);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция АвтоТекстНазначенияПлатежа(Знач ПараметрыНазначенияПлатежа)
	
	Возврат Документы.ПлатежноеПоручение.ТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьСуммуНДС(СуммаДокумента, СтавкаНДС)
	
	ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
	СуммаНДС   = Окр(СуммаДокумента * ПроцентНДС / (100 + ПроцентНДС), 2);
	
	Возврат СуммаНДС;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьНадписьРеквизитыПлательщика(Форма)
	
	Объект = Форма.Объект;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьКПП   = Форма.АвтоЗначенияРеквизитов.ВсегдаУказыватьКПППлательщика ИЛИ НЕ ПустаяСтрока(Объект.КПППлательщика);
		ШаблонНадписи = НСтр("ru = 'ИНН %1%2%3, %4'");
		
		ИндивидуальныйПредприниматель =
			Форма.ОрганизацияЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		КППНетребуется = НЕ ПоказатьКПП И ПустаяСтрока(Объект.КПППлательщика);
		ТекстКПП       = ?(ИндивидуальныйПредприниматель, "", НСтр("ru = ', КПП <не требуется>'"));
		ТекстНадписи   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНадписи,
			?(ПустаяСтрока(Объект.ИННПлательщика), НСтр("ru = '<не указан>'"), СокрЛП(Объект.ИННПлательщика)),
			?(КППНетребуется, "", НСтр("ru = ', КПП '")),
			?(КППНетребуется, ТекстКПП, СокрЛП(Объект.КПППлательщика)),
			СокрЛП(Объект.ТекстПлательщика));
	Иначе
		ТекстНадписи = "";
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьНадписьРеквизитыПолучателя(Форма)
	
	Объект = Форма.Объект;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьКПП    = Форма.АвтоЗначенияРеквизитов.ВсегдаУказыватьКПППолучателя ИЛИ НЕ ПустаяСтрока(Объект.КПППолучателя);
		ШаблонНадписи  = НСтр("ru = 'ИНН %1%2%3, %4'");
		
		ФизЛицо = Форма.КонтрагентЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		КППНетребуется = НЕ ПоказатьКПП И ПустаяСтрока(Объект.КПППолучателя);
		ТекстКПП       = ?(ФизЛицо, "", НСтр("ru = ', КПП <не требуется>'"));
		ТекстНадписи   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНадписи,
			?(ПустаяСтрока(Объект.ИННПолучателя), НСтр("ru = '<не указан>'"), СокрЛП(Объект.ИННПолучателя)),
			?(КППНетребуется, "", НСтр("ru = ', КПП '")),
			?(КППНетребуется, ТекстКПП, СокрЛП(Объект.КПППолучателя)),
			СокрЛП(Объект.ТекстПолучателя));
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		ТекстНадписи = УстановитьНадписьРеквизитыПлательщика(Форма);
	Иначе
		ТекстНадписи = "";
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьРеквизитыПлатежейВБюджет(Форма)
	
	Объект = Форма.Объект;
	
	Если НЕ Объект.ПеречислениеВБюджет Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПлатежиВБюджетКлиентСервер.НадписьРеквизитыПлатежейВБюджет(Объект);
	
КонецФункции

&НаСервере
Процедура СформироватьНазначениеПлатежаНаСервере(ТолькоСумму = Ложь)
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		Объект,
		АвтоЗначенияРеквизитов,
		НазначениеПлатежаБылоИзмененоВручную,
		ТолькоСумму);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыПолучателяНаСервере(ОбработкаОповещения = Ложь, ИзменениеКонтрагента = Истина)
	
	ЗаполнитьВспомогательныеРеквизитыПолучателя(ИзменениеКонтрагента);
	
	НадписьРеквизитыПолучателя = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
	Если ОбработкаОповещения И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ЗначениеЗаполнено(Объект.Организация) Тогда
			ОсновнойДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Объект.Контрагент, "ОсновнойДоговорКонтрагента");
			
			Если ЗначениеЗаполнено(ОсновнойДоговор) И ОпределитьОрганизациюДоговора(ОсновнойДоговор) = Объект.Организация Тогда
				Объект.ДоговорКонтрагента = ОсновнойДоговор;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			Объект.СчетКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ОсновнойБанковскийСчет");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ОпределитьОрганизациюДоговора(Договор)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Договор);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Организация
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	КонецЕсли;
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура УстановитьРеквизитыПлательщикаНаСервере(ИзменениеОрганизации = Ложь)
	
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Объект.Организация,
		Объект.СчетОрганизации,
		?(ПереводМеждуСчетами, Объект.Организация, Объект.Контрагент),
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		Объект.Дата);
	
	ЗаполнитьЗначенияСвойств(
		Объект,
		АвтоЗначенияРеквизитов,
		"ТекстПлательщика" + ?(ИзменениеОрганизации, ", ИННПлательщика, КПППлательщика", ""));
	
	НадписьРеквизитыПлательщика = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	
	Если Объект.ПеречислениеВБюджет И ИзменениеОрганизации Тогда
		СтруктураРеквизитов = УчетДенежныхСредствБП.РеквизитыПлатежаВБюджетПоУмолчанию(
			Объект.Дата,
			Объект.Организация,
			Объект.ПеречислениеВБюджет,
			Объект.СчетКонтрагента,
			Объект.Налог,
			Объект.ВидНалоговогоОбязательства);
		
		Объект.СтатусСоставителя        = СтруктураРеквизитов.СтатусСоставителя;
		НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОчередностьПлатежа()
	
	ЗаполнитьСписокВыбора(Элементы.ОчередностьПлатежа, УчетДенежныхСредствКлиентСервер.ПолучитьСписокОчередностьПлатежа(Объект.Дата));
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВидОперацииОрганизации()
	
	ДоступныеОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПолучитьСписокДоступныхЗначений(
		Новый Структура("Организация", Объект.Организация));
	
	Если ДоступныеОперации.Количество() > 0 И ДоступныеОперации.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		
		Объект.ВидОперации = ДоступныеОперации[0].Значение;
		ВидОперацииПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПроверитьВидОперацииОрганизации();
	
	УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
	УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	ПереводМеждуСвоимиСчетами();
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	ОпределитьЮрФизЛицо();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.СчетОрганизации,
		Объект.Организация,
		Объект.ВалютаДокумента);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	Если Объект.ПеречислениеВБюджет Тогда
		ИзменилсяКонтрагент = Ложь;
		ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект, ИзменилсяКонтрагент);
		Если ИзменилсяКонтрагент Тогда
			КонтрагентПриИзмененииНаСервере();
		КонецЕсли;
	Иначе
		СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации =
			Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	
	УстановитьРеквизитыПлательщикаНаСервере(Истина);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПереводМеждуСвоимиСчетами()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		
		Объект.СчетКонтрагента = Неопределено;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			УстановитьРеквизитыПолучателяНаСервере();
			Объект.Контрагент    = Неопределено;
		Иначе
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИндивидуальныйПредприниматель");
			Объект.Контрагент    = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалогПриИзмененииНаСервере(АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК)
	
	АктуализированыРеквизитыПлатежаВБюджет = Ложь;
	Если Не Справочники.ВидыНалоговИПлатежейВБюджет.РеквизитыАктуальны(Объект.Налог, Объект.Дата) Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.ОбновитьПоставляемыеДанныеИзКлассификатора();
		АктуализированыРеквизитыПлатежаВБюджет = Истина;
	КонецЕсли;
	
	НалогОбработатьИзменение(СтрокаПоискаПоКБК);
	
	ИзменилсяКонтрагент = Ложь;
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект, ИзменилсяКонтрагент);
	Если ИзменилсяКонтрагент Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НалогОбработатьИзменение(СтрокаПоискаПоКБК)
	
	Объект.ВидНалоговогоОбязательства = Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(СтрокаПоискаПоКБК, Объект.Дата);
	
	ЗаполнитьСписокВыбора(Элементы.ВидНалоговогоОбязательства, СписокВидовНалоговыхОбязательств(Объект.Налог, Объект.Дата));
	
	Если Не ЗначениеЗаполнено(Объект.ВидНалоговогоОбязательства)
		Или Элементы.ВидНалоговогоОбязательства.СписокВыбора.НайтиПоЗначению(Объект.ВидНалоговогоОбязательства) = Неопределено Тогда
		Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	КонецЕсли;
	
	Если Объект.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		Объект.Контрагент = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Объект.Налог, Объект.Организация, Объект.Дата);
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			КонтрагентОбработатьИзменение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();
	
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьПризнакПлатежаВБюджет(Форма)
	
	Объект = Форма.Объект;
	
	Если НЕ ПустаяСтрока(Объект.СтатусСоставителя) Тогда
		Объект.СтатусСоставителя = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()
	
	Объект.ПеречислениеВБюджет = УчетДенежныхСредствКлиентСервер.ПеречислениеВБюджет(Объект.ВидОперации, Объект.Контрагент);
	Объект.ВидПеречисленияВБюджет = ?(Объект.ПеречислениеВБюджет,
		Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж, Перечисления.ВидыПеречисленийВБюджет.ПустаяСсылка());
	
	ОпределитьЮрФизЛицо();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.СчетКонтрагента,
		Объект.Контрагент,
		Объект.ВалютаДокумента);
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		СчетКонтрагентаПриИзмененииНаСервере(Истина);
	КонецЕсли;
	
	Если НЕ УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
		И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
			Объект.СуммаДокумента = СуммаВыплаченнойЗарплатыРаботнику(
				Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
		Иначе
			Объект.СуммаДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	ДоговорПриИзмененииНаСервере();
	ПроверитьПлатежныеРеквизитыФоновоеЗадание();
	
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Объект.Организация,
		Объект.СчетОрганизации,
		?(ПереводМеждуСчетами, Объект.Организация, Объект.Контрагент),
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		Объект.Дата);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
	
	НадписьРеквизитыПлательщика = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	НадписьРеквизитыПолучателя  = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииНаСервере(ИзменениеКонтрагента = Ложь)
	
	НомерСчетаПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "НомерСчета");
	
	Если НЕ УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации) Тогда
		Если НЕ Объект.ПеречислениеВБюджет И ПлатежиВБюджетКлиентСервер.ЭтоСчетПлатежаВБюджет(НомерСчетаПолучателя, Объект.Дата) Тогда
			ВключитьПеречислениеВБюджет();
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	Иначе
		Если Объект.ПеречислениеВБюджет Тогда
			Объект.ПеречислениеВБюджет = Ложь;
			СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьВспомогательныеРеквизитыПолучателя(ИзменениеКонтрагента);
	
	НадписьРеквизитыПолучателя = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
	СформироватьНазначениеПлатежаНаСервере(Ложь);
	
	ПроверитьПлатежныеРеквизитыФоновоеЗадание();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПеречислениеВБюджет(НастройкаЗаполнения = Неопределено)
	
	Объект.ПеречислениеВБюджет = Истина;
	
	Объект.СтавкаНДС              = Перечисления.СтавкиНДС.ПустаяСсылка();
	Объект.СуммаНДС               = 0;
	Объект.ДоговорКонтрагента     = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Объект.Организация,
		Объект.СчетОрганизации,
		Объект.Контрагент,
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		Объект.Дата);
	
	ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов);
	
	НадписьРеквизитыПлательщика = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	НадписьРеквизитыПолучателя  = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
	ИзменилсяКонтрагент = Ложь;
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект, ИзменилсяКонтрагент, НастройкаЗаполнения);
	Если ИзменилсяКонтрагент Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере(ИзменениеКонтрагента = Истина)
	
	УстановитьРеквизитыПолучателяНаСервере(, ИзменениеКонтрагента);
	Объект.СтавкаНДС = УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(Объект.ДоговорКонтрагента);
	Объект.СуммаНДС  = ПересчитатьСуммуНДС(Объект.СуммаДокумента, Объект.СтавкаНДС);
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную);
	
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиПриИзмененииНаСервере()
	
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Объект.Организация,
		Объект.СчетОрганизации,
		?(ПереводМеждуСчетами, Объект.Организация, Объект.Контрагент),
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		Объект.Дата);
	
	ЗаполнитьЗначенияСвойств(
		Объект,
		АвтоЗначенияРеквизитов,
		"ТекстПлательщика, КПППлательщика, ТекстПолучателя, КПППолучателя");
	
	НадписьРеквизитыПлательщика     = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	НадписьРеквизитыПолучателя      = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиДокументСписанияНаСервере(Знач ПлатежноеПоручение, Знач ДокументОснование, НаименованиеДокумента)
	
	Возврат Документы.ПлатежноеПоручение.НайтиДокументСписания(ПлатежноеПоручение, ДокументОснование, НаименованиеДокумента);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбора(Элемент, СписокДанных)
	
	Элемент.СписокВыбора.Очистить();
	Для каждого ЭлементДанных Из СписокДанных Цикл
		Элемент.СписокВыбора.Добавить(ЭлементДанных.Значение, ЭлементДанных.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлательщикаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", ЕстьОшибки);
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Банковский счет'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетОрганизации", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭтоПлательщик", Истина);
	СтруктураПараметров.Вставить("Объект", Объект);
	
	ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.РеквизитыПлательщикаПолучателя", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПлатежаВБюджет(Форма, ИзменилсяКонтрагент = Ложь, НастройкаЗаполнения = Неопределено)
	
	Объект = Форма.Объект;
	
	Если НастройкаЗаполнения = Неопределено
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога")
		И Объект.Налог = ПредопределенноеЗначение("Справочник.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъекта = ПлатежиВБюджетКлиентСерверПереопределяемый.НовыеРеквизитыПлатежаВБюджет(Объект, Объект.ПеречислениеВБюджет);
	Если Объект.ПеречислениеВБюджет Тогда
		ЗаполнитьРеквизитыПлатежаВБюджетНаСервере(РеквизитыОбъекта, ИсточникДанныхКонтекстаПлатежногоДокумента(Форма), НастройкаЗаполнения);
		
		ИзменилсяКонтрагент = РеквизитыОбъекта.Свойство("Контрагент") И РеквизитыОбъекта.Контрагент <> Объект.Контрагент;
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта);
	Иначе
		СброситьПризнакПлатежаВБюджет(Форма);
	КонецЕсли;
	
	Форма.НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИсточникДанныхКонтекстаПлатежногоДокумента(Форма)
	
	Объект = Форма.Объект;
	
	ИсточникДанныхКонтекста = Новый Структура;
	ИсточникДанныхКонтекста.Вставить("Период",                      Объект.Дата);
	ИсточникДанныхКонтекста.Вставить("Организация",                 Объект.Организация);
	ИсточникДанныхКонтекста.Вставить("Получатель",                  Объект.Контрагент);
	ИсточникДанныхКонтекста.Вставить("СчетПолучателя",              Объект.СчетКонтрагента);
	ИсточникДанныхКонтекста.Вставить("Налог",                       Объект.Налог);
	ИсточникДанныхКонтекста.Вставить("ВидНалоговогоОбязательства",  Объект.ВидНалоговогоОбязательства);
	ИсточникДанныхКонтекста.Вставить("РегистрацияВНалоговомОргане", Неопределено);
	
	Возврат ИсточникДанныхКонтекста;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПлатежаВБюджетНаСервере(РеквизитыОбъекта, Знач ИсточникДанных, Знач НастройкаЗаполнения)
	
	Если НастройкаЗаполнения <> Неопределено Тогда
		ДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
			НастройкаЗаполнения, ИсточникДанных.Период);
	КонецЕсли;
	
	Документы.ПлатежноеПоручение.ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(
		РеквизитыОбъекта, ИсточникДанных, ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизитыПолучателя(ИзменениеКонтрагента = Истина)
	
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Объект.Организация,
		Объект.СчетОрганизации,
		?(ПереводМеждуСчетами, Объект.Организация, Объект.Контрагент),
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		Объект.Дата);
	
	ЗаполнитьЗначенияСвойств(
		Объект,
		АвтоЗначенияРеквизитов,
		"ТекстПолучателя" + ?(ИзменениеКонтрагента, ", ИННПолучателя, КПППолучателя", ""));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПодсказкуОчередностьПлатежа()
	
	ЗаполнитьСписокВыбора(Элементы.ОчередностьПлатежа, УчетДенежныхСредствКлиентСервер.ПолучитьСписокОчередностьПлатежа(Объект.Дата));
	ОбновитьПодсказкуОчередностьПлатежа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументСписанияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ Модифицированность Тогда
		ОбъектЗаписан = Записать();
		
		Если НЕ ОбъектЗаписан Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСписания) Тогда
		ПоказатьЗначение(, ДокументСписания);
	Иначе
		Если Объект.ПометкаУдаления Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя вводить оплату на основании документа, помеченного на удаление!'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыСписания = Новый Структура("Основание", Параметры.Ключ);
		ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.ФормаОбъекта", ПараметрыСписания, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередностьПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОчередностьПлатежаПо345ФЗ(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.Дата < УчетДенежныхСредствКлиентСервер.НачалоДействияНовыхПравилОчередностиПлатежа() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчаниюДо345ФЗ() Тогда
		Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчанию();
	ИначеЕсли Объект.ПеречислениеВБюджет Тогда
		
		РеквизитыДокумента           = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
		ИмяРеквизитаОснованиеПлатежа = РеквизитыДокумента["ОснованиеПлатежа"];
		КодОснованияПлатежа          = Объект[ИмяРеквизитаОснованиеПлатежа];
		
		Если ПлатежиВБюджетКлиентСервер.ЭтоПлатежПоИсполнительномуЛисту(КодОснованияПлатежа) Тогда
			
			Если Объект.ОчередностьПлатежа > УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоИсполнительномуЛисту() Тогда
				Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоИсполнительномуЛисту();
			КонецЕсли;
			
		Иначе // Не по исполнительному листу
			
			Если Объект.ОчередностьПлатежа < УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаНалогиВзносы() Тогда
				Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаНалогиВзносы();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеПериодаПримененияПравилПлатежаВБюджет()
	
	НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	
	УстановитьРеквизитыПлательщикаНаСервере();
	
	НайтиОшибкиПлатежаВБюджет(ПредыдущаяДата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПолучателя", ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПолучателя(Ответ, ДопПараметры) Экспорт
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОГосударственномОрганеПоКоду(
		ЗапроситьСведенияОПолучателе.ВидГосударственногоОргана,
		ЗапроситьСведенияОПолучателе.КодГосударственногоОргана,
		ОписаниеОшибки);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПлатежныеРеквизиты(Ответ, ДопПараметры) Экспорт
	
	ПроверитьПлатежныеРеквизитыФоновоеЗадание();
	
	ПроверитьВыполнениеФоновогоЗадания();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОГосударственномОрганеПоКоду(Вид, Код, ОписаниеОшибки = "")
	
	Если Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Код);
	ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
		Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Код);
	ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
		Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Код);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
		ОписаниеОшибки = Реквизиты.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(Реквизиты);
	КонецЕсли;
	
	УстановитьКонтрагентаНаСервере(Реквизиты.Ссылка, Реквизиты.ПлатежныеРеквизиты.БанковскийСчет);
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверитьПлатежныеРеквизиты()
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НужноВыполнятьПроверку =
			ЗначениеЗаполнено(Объект.Контрагент)
			И ЗначениеЗаполнено(Объект.СчетКонтрагента)
			И (Объект.Дата + 86400 * 10 > ТекущаяДатаСеанса())
			И Объект.ПеречислениеВБюджет
			И НЕ Объект.Оплачено;
	
	Если НужноВыполнятьПроверку Тогда
		
		РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент,
			"ГосударственныйОрган, ВидГосударственногоОргана, КодГосударственногоОргана");
		Если РеквизитыКонтрагента.ГосударственныйОрган
			И ЗначениеЗаполнено(РеквизитыКонтрагента.ВидГосударственногоОргана)
			И РеквизитыКонтрагента.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
			И ЗначениеЗаполнено(РеквизитыКонтрагента.КодГосударственногоОргана) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПроверитьПлатежныеРеквизитыФоновоеЗадание() Экспорт
	
	Если ТребуетсяПроверитьПлатежныеРеквизиты() Тогда
		
		// Инициализируем параметры фонового задания
		АдресРезультатаПроверкиПлатежныхРеквизитов = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ИдентификаторЗаданияПроверкиПлатежныхРеквизитов = Неопределено;
		
		ПараметрыЗапуска = Новый Структура;
		ПараметрыЗапуска.Вставить("Контрагент", Объект.Контрагент);
		ПараметрыЗапуска.Вставить("ПлатежныеРеквизиты", ПлатежныеРеквизиты());
		ПараметрыЗапуска.Вставить("АдресРезультатаПроверкиПлатежныхРеквизитов", АдресРезультатаПроверкиПлатежныхРеквизитов);
		
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ПараметрыЗапуска);
		
		Попытка
			
			ФоновоеЗадание = ФоновыеЗадания.Выполнить("ДанныеГосударственныхОрганов.ПроверитьПлатежныеРеквизитыКонтрагента", 
				ПараметрыФоновогоЗадания,, НСтр("ru = 'Проверка платежных реквизитов в документе'"));
				
			Если ФоновоеЗадание <> Неопределено Тогда 
				ИдентификаторЗаданияПроверкиПлатежныхРеквизитов = ФоновоеЗадание.УникальныйИдентификатор;
			КонецЕсли;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Сервис данных гос_органов.Проверка платежных реквизитов фоновым заданием'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		КонецПопытки;
			
	Иначе
		
		ИдентификаторЗаданияПроверкиПлатежныхРеквизитов = Неопределено;
		
	КонецЕсли;
	
	УстановитьСостояниеКонтрагента();
	
КонецПроцедуры

&НаСервере
Функция ПлатежныеРеквизиты()
	
	ПлатежныеРеквизиты = Новый Структура();
	ПлатежныеРеквизиты.Вставить("ПолучательПлатежа", Объект.ТекстПолучателя);
	ПлатежныеРеквизиты.Вставить("ИНН", Объект.ИННПолучателя);
	ПлатежныеРеквизиты.Вставить("КПП", Объект.КПППолучателя);
	
	РеквизитыРасчетногоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СчетКонтрагента, "НомерСчета, Банк");
	ПлатежныеРеквизиты.Вставить("РасчетныйСчет", РеквизитыРасчетногоСчета.НомерСчета);
	Если ЗначениеЗаполнено(РеквизитыРасчетногоСчета.Банк) Тогда
		РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыРасчетногоСчета.Банк, "Код");
		ПлатежныеРеквизиты.Вставить("БИК", РеквизитыБанка.Код);
	Иначе
		ПлатежныеРеквизиты.Вставить("БИК", "");
	КонецЕсли;
	
	Возврат ПлатежныеРеквизиты;
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеКонтрагента()
	
	Элементы.ГруппаСчетКонтрагента.ЦветФона = Новый Цвет();
	
	Подстроки = Новый Массив;
	
	Если ТребуетсяПроверитьПлатежныеРеквизиты() Тогда
		Если ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиПлатежныхРеквизитов) Тогда
			
			Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Выполняется проверка платежных реквизитов'")));
			Подстроки.Добавить(Символы.ПС);
			
		Иначе
			//Задание выполнено
			
			Если ЗначениеЗаполнено(АдресРезультатаПроверкиПлатежныхРеквизитов)
				И ЭтоАдресВременногоХранилища(АдресРезультатаПроверкиПлатежныхРеквизитов) Тогда
				
				РезультатРаботыФоновогоЗадания = ПолучитьИзВременногоХранилища(АдресРезультатаПроверкиПлатежныхРеквизитов);
				
				Если РезультатРаботыФоновогоЗадания <> Неопределено
					И РезультатРаботыФоновогоЗадания.Свойство("РезультатПроверки") Тогда
					
					Подстроки.Добавить(РезультатРаботыФоновогоЗадания.РезультатПроверки);
					Подстроки.Добавить(Символы.ПС);
					
					Если РезультатРаботыФоновогоЗадания.Свойство("ТребуетсяАутентификация")
						И РезультатРаботыФоновогоЗадания.ТребуетсяАутентификация = Истина Тогда
						
						СсылкаНаПодключениеКИТС = Новый ФорматированнаяСтрока(НСтр("ru = 'Подключится'")
							,,,, "e1cib/app/Обработка.ИнтернетПоддержкаПользователей.Форма.ОбщаяАвторизация");
						Подстроки.Добавить(СсылкаНаПодключениеКИТС);
						
					КонецЕсли;
					
					Если РезультатРаботыФоновогоЗадания.Свойство("ПлатежныеРеквизитыАктуальны") Тогда
						Если РезультатРаботыФоновогоЗадания.ПлатежныеРеквизитыАктуальны = Ложь Тогда
							КрасныйЦвет = Новый Цвет(251, 212, 212);
							Элементы.ГруппаСчетКонтрагента.ЦветФона = КрасныйЦвет;
							СсылкаНаПодробнее = Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее'")
								,,,, "e1cib/app/Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов");
							Подстроки.Добавить(СсылкаНаПодробнее);
						Иначе
							ЗеленыйЦвет = Новый Цвет(215, 240, 199);
							Элементы.ГруппаСчетКонтрагента.ЦветФона = ЗеленыйЦвет;
						КонецЕсли;
					КонецЕсли;
					
					АдресРезультатаПроверкиПлатежныхРеквизитов = "";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Для платежных поручений на уплату налогов и взносов
																|есть возможность проверить актуальность платежных реквизитов
																|государственных органов.
																|Проверка выполняется для неоплаченных платежных поручений,
																|созданных не более 10 дней назад.'")));
	КонецЕсли;
	
	Элементы.СчетКонтрагента.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(Подстроки);
	
КонецПроцедуры

&НаСервере
Функция ЗаданиеПроверкиПлатежныхРеквизитовВыполнено()
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗаданияПроверкиПлатежныхРеквизитов);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиПлатежныхРеквизитов()
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ЗаданиеПроверкиПлатежныхРеквизитовВыполнено() Тогда
		ИдентификаторЗаданияПроверкиПлатежныхРеквизитов = Неопределено;
		УстановитьСостояниеКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиПлатежныхРеквизитов",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьКонтрагентаНаСервере(Контрагент, СчетКонтрагента)
	
	Модифицированность = Истина;
	
	Объект.Контрагент      = Контрагент;
	Объект.СчетКонтрагента = СчетКонтрагента;
	
	ОпределитьЮрФизЛицо();
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация);
	
	ДоговорПриИзмененииНаСервере();
	
	ЗаполнитьВспомогательныеРеквизитыПолучателя(Ложь);
	
	НадписьРеквизитыПолучателя = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
	ПроверитьПлатежныеРеквизитыФоновоеЗадание();
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыполнениеФоновогоЗадания()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиПлатежныхРеквизитов) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиПлатежныхРеквизитов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ВидОперацииОбработатьИзменение();
	
	Если Объект.ПеречислениеВБюджет Тогда
		ВключитьПеречислениеВБюджет();
	Иначе
		СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	ВидОперацииДоИзменения = Объект.ВидОперации;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	
	УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	ПереводМеждуСвоимиСчетами();
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	ОпределитьЮрФизЛицо();
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			Объект.СчетКонтрагента,
			Объект.Контрагент,
			Объект.ВалютаДокумента);
		
		Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			СчетКонтрагентаПриИзмененииНаСервере(Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Объект.ДокументОснование = Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка();
	КонецЕсли;
	
	Объект.ПеречислениеВБюджет = УчетДенежныхСредствКлиентСервер.ПеречислениеВБюджет(Объект.ВидОперации, Объект.Контрагент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СуммаВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач ФизЛицо, Знач ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		ТаблицаНеоплаченныхВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, Ложь);
		ТаблицаОплаченныхВедомостей   = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, Истина);
		
		Если ТаблицаНеоплаченныхВедомостей.Количество() = 0 И ТаблицаОплаченныхВедомостей.Количество() = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В выбранной ведомости отсутствуют сведения о заработной плате сотрудника %1!'"), ФизЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			
		Иначе
			
			ВедомостьОплачена = ТаблицаОплаченныхВедомостей.Количество() <> 0;
			
			Если ВедомостьОплачена Тогда
				ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По текущей ведомости заработная плата сотрудника %1 выплачена!'"), ФизЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
				СтрокаВедомости = ТаблицаОплаченныхВедомостей[0];
				СуммаДокумента  = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			Иначе
				СтрокаВедомости = ТаблицаНеоплаченныхВедомостей[0];
				СуммаДокумента  = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	
	Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораБанковскихСчетов(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Форма.ВалютаРегламентированногоУчета));
	Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Форма.ВалютаРегламентированногоУчета));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Форма.ВладелецСчетаКонтрагента));
	Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВладельцаСчетаКонтрагента(Форма)
	
	Объект = Форма.Объект;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		Форма.ВладелецСчетаКонтрагента = Объект.Организация;
	Иначе
		Форма.ВладелецСчетаКонтрагента = Объект.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПлатежнаяВедомостьПриИзмененииНаСервере()
	
	Если НЕ НазначениеПлатежаБылоИзмененоВручную Тогда
		АвтоЗначенияРеквизитов.Вставить("ТекстНазначенияПлатежа", "");
	КонецЕсли;
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВидовНалоговыхОбязательств(Знач Налог, Знач Период)
	
	Возврат Перечисления.ВидыПлатежейВГосБюджет.СписокВидовНалоговыхОбязательств(Налог, Период);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеВыбораНалогаПоКБК(Знач КодБК)
	
	Возврат Справочники.ВидыНалоговИПлатежейВБюджет.ДанныеВыбораПоКБК(КодБК);
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыПлатежаВБюджетПриИзмененииВидаНалоговогоОбязательства(Знач РеквизитыОбъекта)
	
	РеквизитыПлатежаВБюджет = Новый Структура("КодБК, НазначениеПлатежа");
	
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыОбъекта.Налог, "ВидНалога");
	
	ШаблонКБК = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(РеквизитыОбъекта.КодБК) + ПлатежиВБюджетКлиентСервер.ШаблонКБК(РеквизитыОбъекта.КодБК, Истина);
	
	РеквизитыПлатежаВБюджет.КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
		ШаблонКБК, ВидНалога, РеквизитыОбъекта.ВидНалоговогоОбязательства, РеквизитыОбъекта.Дата);
	
	РеквизитыПлатежаВБюджет.НазначениеПлатежа = НазначениеПлатежаПриИзмененииПоказателяПериода(РеквизитыОбъекта);
	
	Возврат РеквизитыПлатежаВБюджет;
	
КонецФункции

&НаСервереБезКонтекста
Функция НазначениеПлатежаПриИзмененииПоказателяПериода(Знач РеквизитыОбъекта)
	
	НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
		РеквизитыОбъекта.Налог,
		РеквизитыОбъекта.ВидНалоговогоОбязательства,
		РеквизитыОбъекта.Организация,
		РеквизитыОбъекта.Дата,
		ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(РеквизитыОбъекта.ПоказательПериода));
	
	Возврат НазначениеПлатежа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

&НаКлиенте
Процедура Подключаемый_ПредупреждениеОбОшибке()
	
	УведомитьПользователяПлатежиВБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтотОбъект.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗаполнениеСведенийОГосударственномОргане()
	
	Если ЗначениеЗаполнено(ЗапроситьСведенияОПолучателе) Тогда
		
		ОписаниеОшибки = "";
		ЗаполнитьСведенияОГосударственномОрганеПоКоду(
			ЗапроситьСведенияОПолучателе.ВидГосударственногоОргана,
			ЗапроситьСведенияОПолучателе.КодГосударственногоОргана,
			ОписаниеОшибки);
		
		// Обработка ошибок
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
				
				ТекстВопроса = НСтр("ru = 'Для автоматического заполнения реквизитов получателя
					|необходимо подключиться к Интернет-поддержке пользователей.
					|Подключиться сейчас?'");
				ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
			Иначе
				ПоказатьПредупреждение(, ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура ОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РеквизитыДокумента = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
	Для каждого РеквизитПлатежаВБюджет Из Результат Цикл
		ИмяРеквизита         = РеквизитыДокумента[РеквизитПлатежаВБюджет.Ключ];
		Если РеквизитПлатежаВБюджет.Значение <> Неопределено Тогда
			Объект[ИмяРеквизита] = РеквизитПлатежаВБюджет.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыОбъекта = Новый Структура("КодБК, Налог, ВидНалоговогоОбязательства, Организация, Дата, ПоказательПериода");
	ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
	Объект.НазначениеПлатежа = НазначениеПлатежаПриИзмененииПоказателяПериода(РеквизитыОбъекта);
	
	НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	
	УстановитьОчередностьПлатежаПо345ФЗ(ЭтотОбъект);
	ОбновитьПодсказкуОчередностьПлатежа(ЭтотОбъект);
	
	// Заменим (добавим) УИН (уникальный идентификатор начисления)
	// С 01 января 2014 по 30 марта 2014 он указывается в назначении платежа
	ПлатежиВБюджетКлиентСервер.ЗаменитьВНазначенииПлатежаУИН(
		Объект.НазначениеПлатежа,
		Объект.ИдентификаторПлатежа,
		Объект.Дата,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи = Новый Структура("Закрыть", Истина);
		Если Записать(ПараметрыЗаписи) Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаписатьСОшибкамиЗавершение(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаписи.Вставить("ПропуститьПроверку", Истина);
		Записать(ПараметрыЗаписи);
		
		Если ПараметрыЗаписи.Свойство("Закрыть")
			И ПараметрыЗаписи.Закрыть Тогда
			Закрыть();
		ИначеЕсли ПараметрыЗаписи.Свойство("ОткрытьПравилоРегулярногоПлатежа") Тогда
			ОткрытьПравилоРегулярногоПлатежа();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросРедактированиеПравилаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаписи = Новый Структура("ОткрытьПравилоРегулярногоПлатежа");
		
		Если Записать(ПараметрыЗаписи) Тогда
			
			ОткрытьПравилоРегулярногоПлатежа();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать
