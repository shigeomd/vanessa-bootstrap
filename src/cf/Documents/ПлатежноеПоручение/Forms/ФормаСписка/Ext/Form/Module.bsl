////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ТипИнформации = "Контрагент";
	
	ВходящийОтборПоОрганизации = Ложь;
	СтруктураОтбора = Неопределено;	
	
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ЗначениеЗаполнено(СтруктураОтбора) Тогда
		
		ВходящийОтборПоОрганизации = СтруктураОтбора.Свойство("Организация", ОтборОрганизация);
		СтруктураОтбора.Свойство("СчетОрганизации", ОтборСчетОрганизации);
		СтруктураОтбора.Свойство("Контрагент",      ОтборКонтрагент);
		СтруктураОтбора.Свойство("ДатаОтбора",      ОтборДатаОтбора);
		
		ОтборОрганизацияИспользование     = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
		ОтборКонтрагентИспользование      = ЗначениеЗаполнено(ОтборКонтрагент);
		ОтборДатаОтбораИспользование      = ЗначениеЗаполнено(ОтборДатаОтбора);
		
		Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
			Если ТипЗнч(ОтборКонтрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ТипИнформации = "Сотрудник";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
		
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если НЕ ВходящийОтборПоОрганизации И ОтборОрганизация <> ОсновнаяОрганизация Тогда
		ОтборОрганизация                  = ОсновнаяОрганизация;
		УстановитьСчетОрганизации(ОтборСчетОрганизации, ОтборОрганизация);
		ОтборОрганизацияИспользование     = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
	КонецЕсли;
	
	УстановитьВосстановленныеОтборы();
	УстановитьОграничениеТипаОтбораИнформации(ЭтотОбъект);
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.ПлатежноеПоручение);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	УстановитьУсловноеОформление();
	
	// Уведомим о появлении нового функционала
	КлючиНастроекПредупреждений = "БыстроеОсвоениеПлатежноеПоручение, ЗагрузкаЭлектронногоСчетаНаОплату";
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях(КлючиНастроекПредупреждений);
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтотОбъект, Элементы.ИнформационныеСсылки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ТипЗнч(Настройки["ОтборКонтрагент"]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ТипИнформации = "Сотрудник";
	Иначе
		ТипИнформации = "Контрагент";
	КонецЕсли;
	
	УстановитьОграничениеТипаОтбораИнформации(ЭтотОбъект);
	
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ЗначениеЗаполнено(СтруктураОтбора) Тогда
		
		СтруктураОтбора.Свойство("Организация",     ОтборОрганизация);
		СтруктураОтбора.Свойство("СчетОрганизации", ОтборСчетОрганизации);
		СтруктураОтбора.Свойство("Контрагент",      ОтборКонтрагент);
		СтруктураОтбора.Свойство("ДатаОтбора",      ОтборДатаОтбора);
		
		ОтборОрганизацияИспользование     = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
		ОтборКонтрагентИспользование      = ЗначениеЗаполнено(ОтборКонтрагент);
		ОтборДатаОтбораИспользование      = ЗначениеЗаполнено(ОтборДатаОтбора);
		
		Параметры.Отбор = Неопределено;
		
	Иначе
		Если ОтборОрганизация <> ОсновнаяОрганизация Тогда
			ОтборОрганизация                  = ОсновнаяОрганизация;
			
			// Предварительно сбросим сохраненный банковский счет, т.к. он не принадлежит текущей организации
			// и может быть проблема при RLS.
			ОтборСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
			
			УстановитьСчетОрганизации(ОтборСчетОрганизации, ОтборОрганизация);
			ОтборОрганизацияИспользование     = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
		ИначеЕсли НЕ ОтборОрганизацияИспользование Тогда
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВосстановленныеОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Организация");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "СчетОрганизации");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "ДатаОтбора");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "Контрагент");
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьБыстроеОсвоение", 0.5, Истина);
	
	Если НастройкиПредупреждений.ЗагрузкаЭлектронногоСчетаНаОплату Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьИнформациюОЗагрузкеЭлектронногоСчетаНаОплату", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОсновнаяОрганизация = Параметр;
		Если ОсновнаяОрганизация <> ОтборОрганизация Тогда
			ОтборОрганизация                  = ОсновнаяОрганизация;
			УстановитьСчетОрганизации(ОтборСчетОрганизации, ОтборОрганизация);
			ОтборОрганизацияИспользование     = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
			
			УстановитьВосстановленныеОтборы(Истина);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = ОтборОрганизация Тогда
		УстановитьВидимостьБанковскогоСчета();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ Список

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	КлючеваяОперация = "СозданиеФормыПлатежноеПоручение";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	КлючеваяОперация = "ОткрытиеФормыПлатежноеПоручение";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыгрузитьВКлиентБанк(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимПоУмолчанию", "ГруппаВыгрузка");
	
	Если ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СтруктураПараметров.Вставить("Организация",    ОтборОрганизация);
	КонецЕсли;
	
	Если ОтборСчетОрганизацииИспользование И ЗначениеЗаполнено(ОтборСчетОрганизации) Тогда
		СтруктураПараметров.Вставить("БанковскийСчет", ОтборСчетОрганизации);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура УплатаНалоговИВзносов(Команда)
	
	СтруктураПараметров     = Новый Структура;
	Если ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СтруктураПараметров.Вставить("Организация",    ОтборОрганизация);
	КонецЕсли;
	
	Если ОтборСчетОрганизацииИспользование И ЗначениеЗаполнено(ОтборСчетОрганизации) Тогда
		СтруктураПараметров.Вставить("СчетОрганизации", ОтборСчетОрганизации);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СпособОплаты", ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
	
	ОткрытьФорму("Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСБанком(Команда)
	
	Если ЗначениеЗаполнено(ОтборСчетОрганизации) Тогда
		ПараметрыБанковскогоСчета = ПараметрыБанковскогоСчета(ОтборСчетОрганизации);
		ЭлектронныеДокументыКлиент.СинхронизироватьСБанком(
			ПараметрыБанковскогоСчета.Владелец, ПараметрыБанковскогоСчета.Банк);
	Иначе
		ЭлектронныеДокументыКлиент.СинхронизироватьСБанком();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
//

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьСчетОрганизации(ОтборСчетОрганизации, ОтборОрганизация);
	ОтборОрганизацияИспользование     = ЗначениеЗаполнено(ОтборОрганизация);
	ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
	
	УстановитьВосстановленныеОтборы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетОрганизацииПриИзменении(Элемент)
	
	ОтборСчетОрганизацииИспользование = ЗначениеЗаполнено(ОтборСчетОрганизации);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "СчетОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаОтбораПриИзменении(Элемент)
	
	ОтборДатаОтбораИспользование = ЗначениеЗаполнено(ОтборДатаОтбора);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИнформацииПриИзменении(Элемент)
	
	УстановитьОграничениеТипаОтбораИнформации(ЭтотОбъект);
	Если ТипИнформации = "Сотрудник" Тогда
		ОтборКонтрагент = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	Иначе
		ОтборКонтрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	ОтборКонтрагентИспользование = Ложь;
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИнформацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	ОтборКонтрагентИспользование = ЗначениеЗаполнено(ОтборКонтрагент);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетОрганизацииИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "СчетОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	Если ОтборОрганизацияИспользование Тогда
		Если НЕ ОтборСчетОрганизацииИспользование И ЗначениеЗаполнено(ОтборСчетОрганизации) Тогда
			ОтборСчетОрганизацииИспользование = Истина;
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "СчетОрганизации");
		КонецЕсли;
	ИначеЕсли ОтборСчетОрганизацииИспользование Тогда
		ОтборСчетОрганизацииИспользование = Ложь;
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "СчетОрганизации");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// Организация

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизацияИспользование", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизация", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СчетОрганизации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетОрганизации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборСчетОрганизацииИспользование", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборСчетОрганизации", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Список

	СписокВыделения = Неопределено;

	Если Параметры.Свойство("СписокВыделения", СписокВыделения) И ЗначениеЗаполнено(СписокВыделения) Тогда
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Список.Ссылка", ВидСравненияКомпоновкиДанных.ВСписке, СписокВыделения.Ссылка);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Новый Шрифт(),,, Истина));
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыБанковскогоСчета(БанковскийСчет)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "Владелец, Банк");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Процедура УстановитьСчетОрганизации(СчетОрганизации, Знач Организация)
	
	Если Организация = Неопределено Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВосстановленныеОтборы(ТолькоОрганизацияИСчет = Ложь)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "СчетОрганизации");
	
	Если НЕ ТолькоОрганизацияИСчет Тогда
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	КонецЕсли;
	
	УстановитьВидимостьБанковскогоСчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьБанковскогоСчета()
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации =
			Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(ОтборОрганизация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	
	Элементы.ОтборСчетОрганизации.Видимость              = ИспользоватьНесколькоБанковскихСчетовОрганизации;
	Элементы.ОтборСчетОрганизацииИспользование.Видимость = ИспользоватьНесколькоБанковскихСчетовОрганизации;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОЛЕЗНАЯ ИНФОРМАЦИЯ

&НаКлиенте
Процедура Подключаемый_ПоказатьБыстроеОсвоение()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("БыстроеОсвоениеПлатежноеПоручение",, НастройкиПредупреждений);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтотОбъект.ИмяФормы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаОтбораИнформации(Форма)

	Если Форма.ТипИнформации = "Сотрудник" Тогда
		Форма.Элементы.ОтборКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Иначе
		Форма.Элементы.ОтборКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСчетНаОплатуXMLИзФайла(Команда)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ЗагрузкаСчетаНаОплатуИзФайла");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьЗагрузкуСчетаНаОплатуXMLИзФайла", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗагрузкуСчетаНаОплатуXMLИзФайла(РасширениеПодключено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РасширениеПодключено = Истина Тогда
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр             = "(*.zip)|*.zip";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок          = НСтр("ru='Выберите счет на оплату'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьЗагруженныеФайлы", ЭтотОбъект);
		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
		
	Иначе
		ТекстСообщения = НСтр("ru='Расширение для работы с файлами в веб-клиенте не подключено, загрузка счетов остановлена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСчетНаОплатуXMLИзЭлектроннойПочты(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВариантЗагрузкиЭД", ПредопределенноеЗначение("Перечисление.ВариантыЗагрузкиЭД.СчетНаОплату"));
	ДополнительныеПараметры.Вставить("ГлубинаПоиска"    , 7);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСчетНаОплатуXMLПоПочтеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПрямойОбменЭД.Форма.Форма", ДополнительныеПараметры, ЭтаФорма, , , ,ОписаниеОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ПрочитатьЗагруженныеФайлы(ЗагруженныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗагруженныеФайлы <> Неопределено Тогда
		ОписаниеФайлов = ЗагруженныеФайлы.Получить(0);
		АдресФайла     = ОписаниеФайлов.Хранение;
	Иначе
		Возврат;
	КонецЕсли;
	
	АдресаФайловXML = Новый Массив;
	АдресаФайловXML.Добавить(АдресФайла);
	РеквизитыСчета = ПрочитатьРеквизитыИзФайлаСчетаXMLНаСервере(АдресаФайловXML);
	Если Не ЗначениеЗаполнено(РеквизитыСчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", РеквизитыСчета);
	ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСчетНаОплатуXMLПоПочтеЗавершение(РеквизитыСчета, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(РеквизитыСчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", РеквизитыСчета);
	ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьРеквизитыИзФайлаСчетаXMLНаСервере(АдресаФайловXML)
	
	РеквизитыСчета = Документы.СчетНаОплатуПокупателю.РазобратьСчетаНаОплатуПокупателюXML(АдресаФайловXML);
	Если ЗначениеЗаполнено(РеквизитыСчета) Тогда
		
		ЕстьОшибки = Ложь;
		Обработки.ПрямойОбменЭД.ДополнитьСтруктуруРеквизитовСчета(РеквизитыСчета[0].ДанныеДокумента, ЕстьОшибки);
		
		Если ЕстьОшибки Тогда
			Возврат Неопределено;
		Иначе
			Возврат РеквизитыСчета[0].ДанныеДокумента;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОЛЕЗНАЯ ИНФОРМАЦИЯ

&НаКлиенте
Процедура Подключаемый_ПоказатьИнформациюОЗагрузкеЭлектронногоСчетаНаОплату()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ЗагрузкаЭлектронногоСчетаНаОплату", , НастройкиПредупреждений);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать
