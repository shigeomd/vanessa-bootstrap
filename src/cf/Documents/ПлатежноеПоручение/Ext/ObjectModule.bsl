#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ЗаполнитьПоСтруктуре(ДанныеЗаполнения);
		ИначеЕсли Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИндивидуальныйПредприниматель");
		Контрагент = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		
		УчетДенежныхСредствБП.ЗаполнитьРеквизитыПлатежногоДокумента(ЭтотОбъект);
		
		// При отсутствии данных заполнения реквизиты заполняются по данным основной регистрации в налоговом органе
		АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет, Дата);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата              = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный     = Пользователи.ТекущийПользователь();
	ДокументОснование = Неопределено;
	Оплачено          = Ложь;
	
	ЗаполнитьВидПеречисленияВБюджет();
	
	Если ОбъектКопирования.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчаниюДо345ФЗ() Тогда
		ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчанию();
	ИначеЕсли ОбъектКопирования.Дата < УчетДенежныхСредствКлиентСервер.НачалоДействияНовыхПравилОчередностиПлатежа()
		И ОбъектКопирования.ПеречислениеВБюджет
		И ОбъектКопирования.ОчередностьПлатежа < УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаНалогиВзносы() Тогда
		ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаНалогиВзносы();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектКопирования.ВидОперации) Тогда
		ДокументСписания = Документы.ПлатежноеПоручение.НайтиДокументСписания(ОбъектКопирования.Ссылка, ОбъектКопирования.ДокументОснование);
		Если ЗначениеЗаполнено(ДокументСписания) Тогда
			ВидОперации = ДокументСписания.ВидОперации;
		Иначе
			Если ОбъектКопирования.ПеречислениеВБюджет Тогда
				ВидОперации = УчетДенежныхСредствКлиентСервер.ВидОперацииДокументаПеречисленияВБюджет(ОбъектКопирования.КодБК);
			Иначе
				ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	МассивНепроверяемыхРеквизитов.Добавить("ВалютаДокумента");
	
	// ИНН плательщика и ИНН получателя на форме не виден, поэтому если он не  заполнен, то позиционироваться на гиперссылке
	Если ЗначениеЗаполнено(Организация) Тогда
		Если ПустаяСтрока(ИННПлательщика) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ИННПлательщика");
			ТекстСообщения = НСтр("ru = 'Не указан ИНН плательщика.
				|Заполните ИНН организации ""%1""'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ИННПлательщика");
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если ПустаяСтрока(ИННПолучателя) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ИННПолучателя");
			ТекстСообщения = НСтр("ru = 'Не указан ИНН получателя.
				|Заполните ИНН контрагента ""%1""'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Контрагент", "Объект", Отказ);
		КонецЕсли;
		Если ПустаяСтрока(ТекстПолучателя) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ТекстПолучателя");
			ТекстСообщения = НСтр("ru = 'Не указано наименование получателя.
				|Заполните наименование контрагента ""%1""'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Контрагент", "Объект", Отказ);
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ИННПолучателя");
		МассивНепроверяемыхРеквизитов.Добавить("ТекстПолучателя");
		МассивНепроверяемыхРеквизитов.Добавить("СчетКонтрагента");
	КонецЕсли;
	
	Если Прав(СокрЛП(Номер), 6) = "000000" Тогда
		ТекстСообщения = НСтр("ru = 'Номер не должен быть равен нулю'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Номер", "Объект", Отказ);
	КонецЕсли;
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
			ИЛИ (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
			И НЕ ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")) Тогда
			
			Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(Контрагент) Тогда
				
				Ведомости = Новый Массив;
				Ведомости.Добавить(ПлатежнаяВедомость);
				
				ТаблицаНеоплаченныхВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, Контрагент, Ложь);
				ТаблицаОплаченныхВедомостей   = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, Контрагент, Истина);
				
				Если ТаблицаНеоплаченныхВедомостей.Количество() = 0 И ТаблицаОплаченныхВедомостей.Количество() = 0 Тогда
					
					ШаблонСообщения = НСтр("ru = 'В выбранной ведомости отсутствуют сведения о заработной плате сотрудника %1!'");
					ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контрагент);
					ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Корректность", НСтр("ru = 'Ведомость'"),,, ШаблонСообщения);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПлатежнаяВедомость", "Объект", Отказ);
					
				Иначе
					
					Если ТаблицаОплаченныхВедомостей.Количество() <> 0 Тогда
						СтрокаВедомости = ТаблицаОплаченныхВедомостей[0];
					Иначе
						СтрокаВедомости = ТаблицаНеоплаченныхВедомостей[0];
					КонецЕсли;
					
					СуммаПоВедомости = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
					
					Если СуммаПоВедомости <> СуммаДокумента Тогда
						ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа (%1 руб.) и сумма по платежной ведомости (%2 руб.)'");
						ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СуммаДокумента, СуммаПоВедомости);
						
						ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Налог");
		МассивНепроверяемыхРеквизитов.Добавить("ВидНалоговогоОбязательства");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда 
		СтатьяДвиженияДенежныхСредств = Неопределено;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьУдалитьПравилоРегулярногоПлатежа();
	
	Если ЗначениеЗаполнено(Организация) И НЕ ЗначениеЗаполнено(СчетОрганизации)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			СчетОрганизации, Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	ВидДокументаОснования = ТипЗнч(Основание);
	ДокументОснование     = Основание;
	
	Если ВидДокументаОснования    = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ПоступлениеНМА")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		Контрагент                  = Основание.Контрагент;
		ИННПолучателя               = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ИНН");
		ДоговорКонтрагента          = Основание.ДоговорКонтрагента;
		ВалютаВзаиморасчетов        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ВидРасчетовПоДоговору   = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента);
			Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
				ВалютаДокумента     = ВалютаВзаиморасчетов;
			КонецЕсли;
			
			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсДокумента           = СтруктураКурсаДокумента.Курс;
			КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КурсДокумента) Тогда
			КурсДокумента           = 1;
			КратностьДокумента      = 1;
		КонецЕсли;
		
		Если ВидДокументаОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			СчетКонтрагента = Основание.БанковскийСчетКонтрагента;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = Новый ТаблицаЗначений();
		ТаблицаПлатежей.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ТаблицаПлатежей.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		ТаблицаПлатежей.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
		Если ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			
			СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			
			СтрокаТаблицыСумм.СтавкаНДС    = Основание.СтавкаНДСВознаграждения;
			СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения") + Основание.Услуги.Итог("СуммаНДСВознаграждения");
			СтрокаТаблицыСумм.СуммаПлатежа = ?(Основание.СуммаВключаетНДС, Основание.СуммаВознаграждения,
				Основание.СуммаВознаграждения + СтрокаТаблицыСумм.СуммаНДС);
			
		Иначе
			
			СуммаДокументаОснования = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			Если ВидДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				
				СуммаДокументаОснования.ЗаполнитьЗначения(0, "СуммаНДС");
				СуммаДокументаОснования.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");
				Если Основание.УдержатьВознаграждение Тогда
					СуммаКоррПлатежа = СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.СуммаВознаграждения;
					НоваяКолонкаСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
						СуммаКоррПлатежа, СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если НоваяКолонкаСумм <> Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаСумм,"СуммаПлатежа");
					КонецЕсли;
					
					Если НЕ Основание.СуммаВключаетНДС Тогда
						СуммаКоррНДС    = СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДСВознаграждения");
						НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
							СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если НоваяКолонкаНДС <> Неопределено Тогда
							СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаПлатежа");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Основание.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
					СуммаКоррНДС    = СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДС");
					НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
						СуммаКоррНДС, СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
					Если НоваяКолонкаНДС <> Неопределено Тогда
						СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС, "СуммаПлатежа");
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				
				Если Основание.Сумма <> 0 И Основание.СуммаНДС <> 0  Тогда
					Если СуммаДокументаОснования.Количество() = 0 Тогда
						СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
					Иначе
						СтрокаТаблицыСумм = СуммаДокументаОснования[0];
					КонецЕсли;
					
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.Сумма;
					СтрокаТаблицыСумм.СуммаНДС     = СтрокаТаблицыСумм.СуммаНДС + Основание.СуммаНДС;
					Если НЕ Основание.СуммаВключаетНДС Тогда
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.СуммаНДС;
					КонецЕсли;
				КонецЕсли;
				
				СуммаДокументаОснования.ЗаполнитьЗначения(Основание.СтавкаНДС, "СтавкаНДС");
				
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			Если ДоговорКонтрагента.УчетАгентскогоНДС Тогда
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - СтрокаПлатеж.СуммаНДС;
				СтрокаПлатеж.СуммаНДС     = 0;
				СтрокаПлатеж.СтавкаНДС    = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПлатежей.Свернуть(, "СуммаПлатежа, СтавкаНДС, СуммаНДС");
		
		СуммаДокумента = ТаблицаПлатежей.Итог("СуммаПлатежа");
		СуммаНДС       = ТаблицаПлатежей.Итог("СуммаНДС");
		СтавкаНДС      = ?(ТаблицаПлатежей.Количество() = 1, ТаблицаПлатежей[0].СтавкаНДС, "");
		
		АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет, Дата);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
		
		Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ЭтотОбъект, АвтоЗначенияРеквизитов, Ложь);
		
	ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк")
		ИЛИ ВидДокументаОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
		
		ЗаполнитьДокументПоВедомости(Основание);
		
	ИначеЕсли ВидДокументаОснования = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		ЗаполнитьПоСписаниюСРасчетногоСчета(Основание);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоВедомости(Основание)
	
	ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	
	Организация = Основание.Организация;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаРегламентированногоУчета);
	
	ПлатежныеВедомости = Новый Массив;
	ПлатежныеВедомости.Добавить(Основание);
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	
	ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, ПлатежныеВедомости);
	
	Если ТаблицаВедомостей.Количество() = 0 Тогда
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 нет сумм к выплате!'"), Основание.Ссылка);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 полностью оплачен!'"), Основание.Ссылка);
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		Для каждого СтрокаВедомости Из ТаблицаВедомостей Цикл
			Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
				Если СтрокаВедомости.Ведомость.ВидМестаВыплаты <> Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет
					И СтрокаВедомости.Ведомость.ВидМестаВыплаты <> Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ %1 оплачивается через кассу!'"), СтрокаВедомости.Ведомость);
					
					ВызватьИсключение ТекстСообщения;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате") + ТаблицаВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	
	ПлатежнаяВедомость = Основание;
	ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаОплатаТруда();
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет, Дата);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
	
КонецПроцедуры

Процедура ЗаполнитьПоСписаниюСРасчетногоСчета(Основание)
	
	Перем РегистрацияВНалоговомОргане, ЭтоПереводМеждуСчетами;
	
	ДокументОснование              = Основание;
	ВидОперации                    = Основание.ВидОперации;
	Организация                    = Основание.Организация;
	СчетОрганизации                = Основание.СчетОрганизации;
	Контрагент                     = Основание.Контрагент;
	СчетКонтрагента                = Основание.СчетКонтрагента;
	ДоговорКонтрагента             = Основание.ДоговорКонтрагента;
	СтатьяДвиженияДенежныхСредств  = Основание.СтатьяДвиженияДенежныхСредств;
	ПлатежнаяВедомость             = Основание.ПлатежнаяВедомость;
	Налог                          = Основание.Налог;
	
	РегистрацияВНалоговомОргане = Документы.СписаниеСРасчетногоСчета.ПолучитьРегистрациюВНалоговомОргане(Основание);
	
	Оплачено = Истина;
	
	СуммаДокумента                 = Основание.СуммаДокумента;
	ВалютаДокумента                = Основание.ВалютаДокумента;
	
	ЗаполненоНазначениеПлатежа = НЕ ПустаяСтрока(Основание.НазначениеПлатежа);
	НазначениеПлатежаБылоИзмененоВручную = ЗаполненоНазначениеПлатежа
		И Основание.НазначениеПлатежа <> Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Основание,, Истина);
	
	Если Основание.РасшифровкаПлатежа.Количество() = 1 Тогда
		ДоговорКонтрагента = Основание.РасшифровкаПлатежа[0].ДоговорКонтрагента;
		СтавкаНДС          = Основание.РасшифровкаПлатежа[0].СтавкаНДС;
		СуммаНДС           = Основание.РасшифровкаПлатежа[0].СуммаНДС;
		СтатьяДвиженияДенежныхСредств = Основание.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	ИначеЕсли Основание.РасшифровкаПлатежа.Количество() > 1 Тогда
		СтавкаНДС          = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаНДС           = Основание.РасшифровкаПлатежа.Итог("СуммаНДС");
		НазначениеПлатежаБылоИзмененоВручную = ЗаполненоНазначениеПлатежа;
	КонецЕсли;
	
	Если НазначениеПлатежаБылоИзмененоВручную Тогда
		НазначениеПлатежа = Основание.НазначениеПлатежа;
	КонецЕсли;
	
	ПеречислениеВБюджет = УчетДенежныхСредствКлиентСервер.ПеречислениеВБюджет(ВидОперации, Контрагент);
	
	// Реквизиты плательщика и получателя
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация,
		СчетОрганизации,
		?((ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет), Организация, Контрагент),
		СчетКонтрагента,
		ПеречислениеВБюджет,
		Дата,
		РегистрацияВНалоговомОргане);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
	
	// Реквизиты перечисления в бюджет
	Если ПеречислениеВБюджет Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			ВидНалоговогоОбязательства  = Документы.СписаниеСРасчетногоСчета.ПолучитьВидНалоговогоОбязательства(Основание);
		КонецЕсли;
		
		ИсточникДанныхКонтекста = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
		ИсточникДанныхКонтекста.Период         = Дата;
		ИсточникДанныхКонтекста.Организация    = Организация;
		ИсточникДанныхКонтекста.Получатель     = Контрагент;
		ИсточникДанныхКонтекста.СчетПолучателя = СчетКонтрагента;
		ИсточникДанныхКонтекста.Налог          = Налог;
		ИсточникДанныхКонтекста.ВидНалоговогоОбязательства  = ВидНалоговогоОбязательства;
		ИсточникДанныхКонтекста.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
		
		РеквизитыОбъекта = ПлатежиВБюджетКлиентСерверПереопределяемый.НовыеРеквизитыПлатежаВБюджет(ЭтотОбъект);
		Документы.ПлатежноеПоручение.ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(
			РеквизитыОбъекта, ИсточникДанныхКонтекста, Основание);
		
		Если НазначениеПлатежаБылоИзмененоВручную Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОбъекта,, "НазначениеПлатежа");
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОбъекта);
		КонецЕсли;
		
		ЗаполнитьВидПеречисленияВБюджет();
		
	Иначе
		
		Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ЭтотОбъект, АвтоЗначенияРеквизитов,
			НазначениеПлатежаБылоИзмененоВручную);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения)
	
	Перем РегистрацияВНалоговомОргане, УровеньБюджета;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	КонецЕсли;
	
	УчетДенежныхСредствБП.ЗаполнитьРеквизитыПлатежногоДокумента(ЭтотОбъект);
	НазначениеПлатежаБылоИзмененоВручную = Ложь;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		ПеречислениеВБюджет = Истина;
		
		Если ДанныеЗаполнения.Свойство("СчетУчета")
			И ДанныеЗаполнения.Свойство("Субконто1")
			И ДанныеЗаполнения.Свойство("Субконто2")
			И ДанныеЗаполнения.Свойство("Субконто3") Тогда
			
			// ВидНалоговогоОбязательства
			НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(ДанныеЗаполнения.СчетУчета,
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["ВидыПлатежейВГосБюджет"]);
			Если НомерСубконто <> 0 Тогда
				ВидНалоговогоОбязательства = ДанныеЗаполнения["Субконто" + НомерСубконто];
			Иначе
				ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			КонецЕсли;
			
			// РегистрацияВНалоговомОргане
			Если НалоговыйУчетОбособленныхПодразделений.УчетВРазрезеНалоговыхОрганов() Тогда
				НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(ДанныеЗаполнения.СчетУчета,
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"]);
				Если НомерСубконто <> 0 Тогда
					РегистрацияВНалоговомОргане = ДанныеЗаполнения["Субконто" + НомерСубконто];
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Налог) Тогда
				
				// УровниБюджета
				НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(ДанныеЗаполнения.СчетУчета,
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["УровниБюджетов"]);
				Если НомерСубконто <> 0 Тогда
					УровеньБюджета = ДанныеЗаполнения["Субконто" + НомерСубконто];
				КонецЕсли;
				
				ВидНалога =  РасчетыСБюджетом.ВидНалогаПоСчетуУчета(ДанныеЗаполнения.СчетУчета, Организация, Дата, УровеньБюджета);
				Налог     = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Налог, Организация, Дата);
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент, ВалютаДокумента);
		КонецЕсли;
		
		ИсточникДанныхКонтекста = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
		ИсточникДанныхКонтекста.Период         = Дата;
		ИсточникДанныхКонтекста.Организация    = Организация;
		ИсточникДанныхКонтекста.Получатель     = Контрагент;
		ИсточникДанныхКонтекста.СчетПолучателя = СчетКонтрагента;
		ИсточникДанныхКонтекста.Налог          = Налог;
		ИсточникДанныхКонтекста.ВидНалоговогоОбязательства  = ВидНалоговогоОбязательства;
		ИсточникДанныхКонтекста.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
		
		РеквизитыОбъекта = ПлатежиВБюджетКлиентСерверПереопределяемый.НовыеРеквизитыПлатежаВБюджет(ЭтотОбъект);
		Документы.ПлатежноеПоручение.ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(
			РеквизитыОбъекта, ИсточникДанныхКонтекста, ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОбъекта);
		
		ЗаполнитьВидПеречисленияВБюджет();
		
		НазначениеПлатежаБылоИзмененоВручную = Истина;
		
	ИначеЕсли ДанныеЗаполнения.Свойство("НазначениеПлатежа") И ЗначениеЗаполнено(ДанныеЗаполнения.НазначениеПлатежа) Тогда
		
		НазначениеПлатежаБылоИзмененоВручную = Истина;
		
	КонецЕсли;
	
	// Реквизиты плательщика и получателя
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ПеречислениеВБюджет, Дата, РегистрацияВНалоговомОргане);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, АвтоЗначенияРеквизитов);
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(ЭтотОбъект, АвтоЗначенияРеквизитов,
		НазначениеПлатежаБылоИзмененоВручную);
	
КонецПроцедуры

Процедура ПроверитьУдалитьПравилоРегулярногоПлатежа()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПлатежноеПоручение", Ссылка);
	Запрос.УстановитьПараметр("Организация",        Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегулярныеПлатежи.Правило
	|ИЗ
	|	РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегулярныеПлатежи КАК ПлатежиПоПравилу
	|		ПО РегулярныеПлатежи.Правило = ПлатежиПоПравилу.Правило
	|			И РегулярныеПлатежи.ПлатежноеПоручение <> ПлатежиПоПравилу.ПлатежноеПоручение
	|			И (НЕ ПлатежиПоПравилу.ПлатежноеПоручение.ПометкаУдаления)
	|ГДЕ
	|	РегулярныеПлатежи.ПлатежноеПоручение = &ПлатежноеПоручение
	|	И РегулярныеПлатежи.Организация = &Организация
	|	И ПлатежиПоПравилу.ПлатежноеПоручение ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Если по правилу платежного поручения нет других непомеченных на удаление документов
	// то статус пометки на удаления правила регулируется этой платежкой
	Если Выборка.Следующий() Тогда
		
		Правило = Выборка.Правило.ПолучитьОбъект();
		Правило.ПометкаУдаления = ПометкаУдаления;
		Правило.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидПеречисленияВБюджет()
	
	Если ПеречислениеВБюджет 
		И ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(Дата) Тогда
		
		ПравильныйВидПеречисления = ПлатежиВБюджетКлиентСервер.ВидПеречисления(КодБК, Дата);
		
		Если ВидПеречисленияВБюджет <> ПравильныйВидПеречисления Тогда
			ВидПеречисленияВБюджет = ПравильныйВидПеречисления;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

