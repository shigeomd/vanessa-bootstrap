#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ

Процедура УстановитьПроведен(ПараметрыОтложенногоОбновления = Неопределено) Экспорт
	
	ОбновлениеСПредыдущейРедакции.УстановитьПроведен(Метаданные.Документы.ПлатежноеПоручение, ПараметрыОтложенногоОбновления);
	
КонецПроцедуры

Процедура УстановитьВидОперации(Параметры) Экспорт
	
	// Обработчик обновления заменен на монопольный УстановитьВидОперацииМонопольно()
	
	УстановитьВидОперацииМонопольно();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура УстановитьВидОперацииМонопольно() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
	|	СписаниеСРасчетногоСчета.ВидОперации КАК ВидОперации,
	|	СписаниеСРасчетногоСчета.УдалитьФизЛицо КАК ФизическоеЛицо,
	|	СписаниеСРасчетногоСчета.ПлатежнаяВедомость КАК ПлатежнаяВедомость,
	|	ПлатежноеПоручение.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА СписаниеСРасчетногоСчета.Контрагент ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА СписаниеСРасчетногоСчета.Контрагент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СконвертированныйПолучатель
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ПО (ПлатежноеПоручение.ДокументОснование = СписаниеСРасчетногоСчета.Ссылка
	|				ИЛИ ПлатежноеПоручение.Ссылка = СписаниеСРасчетногоСчета.ДокументОснование)
	|ГДЕ
	|	ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.ПлатежноеПоручение.ПолучитьОбъект();
		
		БалансовыйСчет = УчетДенежныхСредствКлиентСервер.БалансовыйСчет(ДокументОбъект.СчетКонтрагента);
		
		Если ЗначениеЗаполнено(Выборка.ВидОперации) Тогда
			
			ДокументОбъект.ВидОперации        = Выборка.ВидОперации;
			ДокументОбъект.ПлатежнаяВедомость = Выборка.ПлатежнаяВедомость;
			
		Иначе
			
			Если ДокументОбъект.ПеречислениеВБюджет Тогда
				ДокументОбъект.ВидОперации = УчетДенежныхСредствКлиентСервер.ВидОперацииДокументаПеречисленияВБюджет(ДокументОбъект.КодБК);
			Иначе

				Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты")
					ИЛИ ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
					
					Если БалансовыйСчет = "40817" Тогда
						ДокументОбъект.ВидОперации        = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику;
						ДокументОбъект.ПлатежнаяВедомость = ДокументОбъект.ДокументОснование;
					Иначе
						ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
					КонецЕсли;
					
				Иначе
					ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
					Если ДокументОбъект.ИННПлательщика = ДокументОбъект.ИННПолучателя Тогда
						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
					КонецЕсли;
					
					ДокументОбъект.ВидОперации = ВидОперацииДокумента;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(ДокументОбъект.ВидОперации) Тогда
			
			Если БалансовыйСчет = "40817" Тогда
				
				Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
					
					Если СтрДлина(СокрЛП(ДокументОбъект.Контрагент.ИНН)) = 12
						И СтрДлина(СокрЛП(ДокументОбъект.ИННПолучателя)) = 12 Тогда
						
						ФизическоеЛицо = ?(ЗначениеЗаполнено(Выборка.ФизическоеЛицо),Выборка.ФизическоеЛицо,Выборка.СконвертированныйПолучатель);
						Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
							
							ДокументОбъект.Контрагент      = ФизическоеЛицо;
							Если ЗначениеЗаполнено(ДокументОбъект.СчетКонтрагента) Тогда
								
								СчетНайден = Ложь;
								ФизическоеЛицоСчет = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", ДокументОбъект.СчетКонтрагента.НомерСчета);
								Если ЗначениеЗаполнено(ФизическоеЛицоСчет) Тогда
									Если ФизическоеЛицоСчет.Владелец = ФизическоеЛицо Тогда
										ДокументОбъект.СчетКонтрагента = ФизическоеЛицоСчет;
										СчетНайден = Истина;
									КонецЕсли;
								КонецЕсли;
								
								Если НЕ СчетНайден Тогда
									Если ЗначениеЗаполнено(ДокументОбъект.СчетКонтрагента) Тогда
										СчетОбъект = ДокументОбъект.СчетКонтрагента.ПолучитьОбъект();
										Если ТипЗнч(СчетОбъект.Владелец) <> Тип("СправочникСсылка.Организации") Тогда
											СчетОбъект.Владелец = ФизическоеЛицо;
											ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
										Иначе
											ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе
							ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
						КонецЕсли;
					Иначе
						ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
					КонецЕсли;
				Иначе
					ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
				КонецЕсли;
			Иначе
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			ДокументОбъект.Контрагент      = Неопределено;
			СчетОрганизации = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",ДокументОбъект.СчетКонтрагента.НомерСчета);
			Если НЕ ЗначениеЗаполнено(СчетОрганизации) Тогда
				Если ЗначениеЗаполнено(ДокументОбъект.СчетКонтрагента) Тогда
					СчетОбъект = ДокументОбъект.СчетКонтрагента.ПолучитьОбъект();
					СчетОбъект.Владелец = ДокументОбъект.Организация;
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			ДокументОбъект.ПеречислениеВБюджет = Истина;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура СформироватьНазначениеПлатежа(Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную, ТолькоСумму = Ложь) Экспорт
	
	ТекстНазначение = Объект.НазначениеПлатежа;
	
	ПозицияСумма = Найти(ТекстНазначение, "Сумма");
	
	Если ПозицияСумма = 0 Тогда // для совместимости, при редактировании старых платежек
		ПозицияСумма = Найти(ТекстНазначение, "В т.ч. НДС");
		Если ПозицияСумма = 0 Тогда
			ПозицияСумма = Найти(ТекстНазначение, "Без налога (НДС)");
		КонецЕсли;
		Если ПозицияСумма = 0 Тогда
			ПозицияСумма = Найти(ТекстНазначение, "НДС не облагается");
		КонецЕсли;
	КонецЕсли;
	
	Если ТолькоСумму Тогда
		ТекстНазначение = ?(ПозицияСумма = 0, ТекстНазначение, Лев(ТекстНазначение, ПозицияСумма - 1));
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
	Иначе
		
		ПараметрыНазначенияПлатежа = НовыеПараметрыНазначенияПлатежа();
		ЗаполнитьЗначенияСвойств(ПараметрыНазначенияПлатежа, Объект);
		ТекстНазначенияАвто = ТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа);
		
		Если НЕ НазначениеПлатежаБылоИзмененоВручную ИЛИ ПустаяСтрока(ТекстНазначение) Тогда
			НазначениеПлатежаБылоИзмененоВручную = Ложь;
			Если ЗначениеЗаполнено(АвтоЗначенияРеквизитов.ТекстНазначенияПлатежа) Тогда
				// Менять только если значение назначения платежа не было ранее введено вручную
				ТекстНазначение = АвтоЗначенияРеквизитов.ТекстНазначенияПлатежа;
			ИначеЕсли Объект.ПеречислениеВБюджет И ЗначениеЗаполнено(ТекстНазначение) Тогда
				НазначениеПлатежаБылоИзмененоВручную = Истина;
			ИначеЕсли ЗначениеЗаполнено(ТекстНазначенияАвто) Тогда
				ТекстНазначение = ТекстНазначенияАвто;
			Иначе
				НазначениеПлатежаБылоИзмененоВручную = НЕ ПустаяСтрока(ТекстНазначение);
			КонецЕсли;
		Иначе
			ТекстНазначение = ?(ПозицияСумма = 0, ТекстНазначение, Лев(ТекстНазначение, ПозицияСумма - 1));
			Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
				ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
			КонецЕсли;
			
			АвтоЗначенияРеквизитов.Вставить("ТекстНазначенияПлатежа", ТекстНазначенияАвто);
			НазначениеПлатежаБылоИзмененоВручную = НазначениеПлатежаИзмененоВручную(ТекстНазначение, ТекстНазначенияАвто);
		КонецЕсли;
	КонецЕсли;
	
	// Заменим (добавим) УИН (уникальный идентификатор начисления)
	// С 01 января 2014 по 30 марта 2014 он указывается в назначении платежа
	ПлатежиВБюджетКлиентСервер.ЗаменитьВНазначенииПлатежаУИН(
		ТекстНазначение,
		Объект.ИдентификаторПлатежа,
		Объект.Дата,
		Объект.ПеречислениеВБюджет);
	
	// отработаем ситуацию, когда ПП введена на основании документа "Списание с расчетного счета",
	// при этом, в Списании данные введены Списком (поэтому и СтавкаНДС в ПП пустая) и заполнено Назначение платежа
	// т.к. скорее всего, Назначение платежа в Списании более правильно (учтены реквизиты, которых нет в ПП)
	Если (НазначениеПлатежаБылоИзмененоВручную ИЛИ
		ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета"))
		И Объект.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка()
		И НЕ ПустаяСтрока(Объект.НазначениеПлатежа) Тогда
		
		Возврат;
	КонецЕсли;
	
	// При перечислении в бюджет НДС не указываем
	Если Объект.ПеречислениеВБюджет Тогда
		Объект.НазначениеПлатежа = ТекстНазначение;
		Возврат;
	КонецЕсли;
	
	ТекстСумма = "Сумма " + Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		Если ТолькоСумму Тогда
			Возврат;
		Иначе
			ТекстСумма = "";
			ТекстНДС   = "НДС не облагается";
		КонецЕсли;
	ИначеЕсли УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		ТекстНДС = "Без налога (НДС)";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ТекстНДС = "";
	Иначе
		Если Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ТекстНДС = "Без налога (НДС)";
		ИначеЕсли Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			ТекстНДС = "НДС (0%)";
		ИначеЕсли Объект.СуммаНДС > 0 Тогда
			ТекстНДС = "В т.ч. НДС "
			+ ?(ЗначениеЗаполнено(Объект.СтавкаНДС), " (" + Объект.СтавкаНДС + ") ", "")
			+ Формат(Объект.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		Иначе
			ТекстНДС = "";
		КонецЕсли;
	КонецЕсли;
	
	ТекстСуммаНазначения = ТекстСумма + ?(ТекстСумма = "", "", Символы.ПС) + ТекстНДС;
	
	Объект.НазначениеПлатежа = ТекстНазначение
		+ ?(ПустаяСтрока(ТекстСуммаНазначения), "", Символы.ПС + ТекстСуммаНазначения);
	
КонецПроцедуры

// Формирует текст назначения платежа
//
// Параметры:
//   ПараметрыНазначенияПлатежа - структура описанная в НовыеПараметрыНазначенияПлатежа()
//
Функция ТекстНазначенияПлатежа(Параметры) Экспорт
	
	Организация                = Параметры.Организация;
	Дата                       = Параметры.Дата;
	ВидОперации                = Параметры.ВидОперации;
	Контрагент                 = Параметры.Контрагент;
	ПлатежнаяВедомость         = Параметры.ПлатежнаяВедомость;
	ПеречислениеВБюджет        = Параметры.ПеречислениеВБюджет;
	СчетКонтрагента            = Параметры.СчетКонтрагента;
	ДоговорКонтрагента         = Параметры.ДоговорКонтрагента;
	Налог                      = Параметры.Налог;
	ВидНалоговогоОбязательства = Параметры.ВидНалоговогоОбязательства;
	
	РасчетыСРаботниками = Ложь;
	
	Если ЗначениеЗаполнено(СчетКонтрагента.ТекстНазначения) Тогда
		
		ТекстНазначение = СчетКонтрагента.ТекстНазначения;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		ТекстНазначение = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(Налог, ВидНалоговогоОбязательства, Организация, Дата);
		
	ИначеЕсли ПеречислениеВБюджет Тогда
		
		// Как правило, для формирования осмысленного текста недостаточно данных.
		// Кроме того, договор не виден на форме.
		ТекстНазначение = "";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		
		ТекстНазначение = НСтр("ru = 'Перевод собственных денежных средств'");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику Тогда
		
		ТекстНазначение = НСтр("ru = 'Выдача займа'");
		РасчетыСРаботниками = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		ТекстНазначение = НСтр("ru = 'Перевод средств между счетами'");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		
		ТекстНазначение = НСтр("ru = 'Перечисление депонированной заработной платы'");
		РасчетыСРаботниками = Истина;
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		
		ТекстНазначение = НСтр("ru = 'Заработная плата'");
		РасчетыСРаботниками = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		
		ТекстНазначение = НСтр("ru = 'Перечисление подотчетному лицу'");
		РасчетыСРаботниками = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
		ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "Наименование, ВидДоговора");
		ТекстНазначение = НСтр("ru = 'Возврат оплаты по договору'");
		Если НЕ ПустаяСтрока(ПараметрыДоговора.Наименование) Тогда
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2'"), 
				ТекстНазначение,
				СокрЛП(ПараметрыДоговора.Наименование));
			КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "Наименование, ВидДоговора");
		
		Если ПараметрыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ТекстНазначение = НСтр("ru = 'Возврат оплаты по договору'");
		Иначе
			ТекстНазначение = НСтр("ru = 'Оплата по договору'");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПараметрыДоговора.Наименование) Тогда
			ТекстНазначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"), 
			ТекстНазначение,
			СокрЛП(ПараметрыДоговора.Наименование));
		КонецЕсли;
		
	Иначе
		
		ТекстНазначение =  НСтр("ru = 'Оплата по счету'");
		
	КонецЕсли;
	
	Если РасчетыСРаботниками Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			
			Если ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
				МесяцУплаты = Формат(ПлатежнаяВедомость.ПериодРегистрации, "ДФ=ММММ");
				ГодУплаты   = Формат(ПлатежнаяВедомость.ПериодРегистрации, "ДФ=гггг");
			Иначе
				МесяцУплаты = Формат(Дата, "ДФ=ММММ");
				ГодУплаты   = Формат(Дата, "ДФ=гггг");
			КонецЕсли;
			
			ТекстПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' за %1 %2 г.'"),
			МесяцУплаты, ГодУплаты);
			
			ТекстНазначение = ТекстНазначение + ТекстПериод;
		КонецЕсли;
		
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") И ЗначениеЗаполнено(Контрагент) Тогда
			ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(Организация, 
			Контрагент, Дата, Истина);
			ТекстПолучатель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ', работник: %1'"),
			ДанныеФизЛица.Представление);
			
			ТекстНазначение = ТекстНазначение + ТекстПолучатель;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстНазначение;
	
КонецФункции

// Возвращает структуру параметрова для функции ТекстНазначенияПлатежа()
//
Функция НовыеПараметрыНазначенияПлатежа() Экспорт
	
	ПараметрыНазначенияПлатежа = Новый Структура;
	ПараметрыНазначенияПлатежа.Вставить("Организация",                Справочники.Организации.ПустаяСсылка());
	ПараметрыНазначенияПлатежа.Вставить("Дата",                       '00010101');
	ПараметрыНазначенияПлатежа.Вставить("ВидОперации",                Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПустаяСсылка());
	ПараметрыНазначенияПлатежа.Вставить("ПеречислениеВБюджет",        Ложь);
	ПараметрыНазначенияПлатежа.Вставить("ПлатежнаяВедомость",         Неопределено);
	ПараметрыНазначенияПлатежа.Вставить("Контрагент",                 Неопределено);
	ПараметрыНазначенияПлатежа.Вставить("СчетКонтрагента",            ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ПараметрыНазначенияПлатежа.Вставить("ДоговорКонтрагента",         Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ПараметрыНазначенияПлатежа.Вставить("Налог",                      Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	ПараметрыНазначенияПлатежа.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка());
	
	Возврат ПараметрыНазначенияПлатежа;
	
КонецФункции

Функция НазначениеПлатежаИзмененоВручную(НазначениеПлатежа, НазначениеПлатежаАвто) Экспорт
	
	Если ПустаяСтрока(НазначениеПлатежа) ИЛИ ПустаяСтрока(НазначениеПлатежаАвто) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПозицияСумма = Найти(НазначениеПлатежа, "Сумма");
	
	Если ПозицияСумма = 0 Тогда // для совместимости, при редактировании старых платежек
		ПозицияСумма = Найти(НазначениеПлатежа, "В т.ч. НДС");
		Если ПозицияСумма = 0 Тогда
			ПозицияСумма = Найти(НазначениеПлатежа, "Без налога (НДС)");
		КонецЕсли;
		Если ПозицияСумма = 0 Тогда
			ПозицияСумма = Найти(НазначениеПлатежа, "НДС не облагается");
		КонецЕсли;
	КонецЕсли;
	
	ТекстНазначение = ?(ПозицияСумма = 0, НазначениеПлатежа, Лев(НазначениеПлатежа, ПозицияСумма - 1));
	Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
		ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
	КонецЕсли;
	
	Возврат СокрЛП(ТекстНазначение) <> СокрЛП(НазначениеПлатежаАвто);
	
КонецФункции

Функция НайтиДокументСписания(ПлатежноеПоручение, ДокументОснование, НаименованиеДокумента = "") Экспорт
	
	ДокументСписания = Документы.СписаниеСРасчетногоСчета.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		ДокументСписания = ДокументОснование;
		ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСписания, "Номер, Дата, Проведен");
		СтрокаДокумент = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ПараметрыДокумента.Номер, Истина, Ложь);
		НаименованиеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Списание с расчетного счета № %1 от %2 г.'"),
			СтрокаДокумент,
			Формат(ПараметрыДокумента.Дата, "ДФ=dd.MM.yyyy"));
		Возврат ДокументСписания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПлатежноеПоручение) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", ПлатежноеПоручение);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДокСписания.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК ДокСписания
		|ГДЕ
		|	ДокСписания.ДокументОснование = &ДокументСсылка";
		
		ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаИзЗапроса.Следующий() Тогда
			ДокументСписания = ВыборкаИзЗапроса.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСписания) Тогда
		ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСписания, "Номер, Дата, Проведен");
		СтрокаДокумент = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ПараметрыДокумента.Номер, Истина, Ложь);
		НаименованиеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Списание с расчетного счета № %1 от %2 г.'"),
			СтрокаДокумент,
			Формат(ПараметрыДокумента.Дата, "ДФ=dd.MM.yyyy"));
	Иначе
		НаименованиеДокумента = НСтр("ru = 'Ввести документ списания с расчетного счета'");
	КонецЕсли;
	
	Возврат ДокументСписания;
	
КонецФункции

Функция ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(ДанныеОбъекта, СообщатьОбОшибках = Истина, ПроверятьДублиУИН = Истина) Экспорт
	
	Если НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ДанныеОбъекта.Дата) Тогда
		// До даты применения 107н не выполняем проверку, так как был переходный период,
		// в течение которого непонятно, выполнение каких правил контролировать
		Возврат Новый Массив;
	КонецЕсли;
	
	РеквизитыДокумента      = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Для каждого РеквизитПлатежаВБюджет Из РеквизитыПлатежаВБюджет Цикл
		ИмяПоля               = РеквизитПлатежаВБюджет.Ключ;
		ИмяРеквизитаДокумента = РеквизитыДокумента[ИмяПоля];
		РеквизитыПлатежаВБюджет[ИмяПоля] = ДанныеОбъекта[ИмяРеквизитаДокумента];
	КонецЦикла;
	
	РезультатПроверки = ПлатежиВБюджетКлиентСервер.ПроверитьЗаполнение(РеквизитыПлатежаВБюджет, КонтекстПлатежногоДокумента(ДанныеОбъекта));
	
	// Проверим дубли УИН
	Если ПроверятьДублиУИН Тогда
		ИнформацияДублиУИН = ПлатежиВБюджет.ПроверитьДублиУИН(РеквизитыПлатежаВБюджет.ИдентификаторПлатежа, ДанныеОбъекта.Ссылка);
		Для каждого ОписаниеОшибки Из ИнформацияДублиУИН Цикл
			РезультатПроверки.Ошибки.Добавить(ОписаниеОшибки);
		КонецЦикла;
	КонецЕсли;
	
	// Выведем результат проверки
	Если СообщатьОбОшибках Тогда
		
		Для каждого Ошибка Из РезультатПроверки.Ошибки Цикл
			
			ИмяРеквизитаДокумента = РеквизитыДокумента[Ошибка.ИмяПоля];
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Ошибка.Описание,
				ДанныеОбъекта.Ссылка,
				ИмяРеквизитаДокумента,
				"Объект");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатПроверки.Ошибки;
	
КонецФункции

Процедура ОтметитьНезаполненныеЗначенияРеквизитовДляПеречисленияВБюджет(Объект) Экспорт
	
	РеквизитыДокумента      = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Для каждого РеквизитПлатежаВБюджет Из РеквизитыПлатежаВБюджет Цикл
		ИмяПоля      = РеквизитПлатежаВБюджет.Ключ;
		ИмяРеквизита = РеквизитыДокумента[ИмяПоля];
		РеквизитыПлатежаВБюджет[ИмяПоля] = Объект[ИмяРеквизита];
	КонецЦикла;
	
	ПлатежиВБюджетКлиентСервер.ОтметитьНезаполненныеЗначения(РеквизитыПлатежаВБюджет);
	
	Для каждого Реквизит Из РеквизитыПлатежаВБюджет Цикл
		ИмяПоля      = Реквизит.Ключ;
		ИмяРеквизита = РеквизитыДокумента[ИмяПоля];
		Если Объект[ИмяРеквизита] <> РеквизитыПлатежаВБюджет[ИмяПоля] Тогда
			Объект[ИмяРеквизита] = РеквизитыПлатежаВБюджет[ИмяПоля];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(РеквизитыОбъекта, ИсточникДанных, ИсходныеДанныеЗаполнения = Неопределено) Экспорт
	
	Если НалоговыйУчетОбособленныхПодразделений.УчетВРазрезеНалоговыхОрганов() И ИсточникДанных.РегистрацияВНалоговомОргане = Неопределено Тогда
		ИсточникДанных.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиРегистрациюВНалоговомОргане(
			ИсточникДанных.Организация, ИсточникДанных.Получатель);
	КонецЕсли;
	
	Если ИсходныеДанныеЗаполнения = Неопределено Тогда
		// Если настройка не выбрана явно, попробуем определить по налогу
		НастройкаЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.КлючНастройкиУплатыНалога(
			ИсточникДанных.Налог, ИсточникДанных.Организация, ИсточникДанных.РегистрацияВНалоговомОргане);
		Если НастройкаЗаполнения <> Неопределено Тогда
			ИсходныеДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
				НастройкаЗаполнения, ИсточникДанных.Период);
		КонецЕсли;
	КонецЕсли;
	
	// Эмулируем работу формы документа, как если бы то, что в данных заполнения, вводил пользователь
	РеквизитыДокумента = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
	
	// Перейдем на терминологию модуля ПлатежиВБюджетКлиентСервер
	ДанныеЗаполнения = Новый Структура;
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Для каждого Реквизит Из РеквизитыДокумента Цикл
		РеквизитыПлатежаВБюджет[Реквизит.Ключ] = РеквизитыОбъекта[Реквизит.Значение];
		Если ЗначениеЗаполнено(ИсходныеДанныеЗаполнения) Тогда
			// ДанныеЗаполнения
			Если ТипЗнч(ИсходныеДанныеЗаполнения) = Тип("Структура") Тогда
				// Считаем изменениями то, что в данных заполнения
				Если НЕ ИсходныеДанныеЗаполнения.Свойство(Реквизит.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Значение = ИсходныеДанныеЗаполнения[Реквизит.Значение];
				Если Значение = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				// Считаем изменениями все, что заполнено
				Значение = РеквизитыОбъекта[Реквизит.Значение];
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДанныеЗаполнения.Вставить(Реквизит.Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Эмулируем работу пользователя
	Контекст = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанных);
	ЗначенияПоУмолчанию = ПлатежиВБюджетКлиентСервер.ЗначенияПоУмолчанию(Контекст);
	ЗаполнитьЗначенияСвойств(РеквизитыПлатежаВБюджет, ЗначенияПоУмолчанию);
	ПлатежиВБюджетКлиентСервер.ЗаполнитьДопустимымиЗначениями(РеквизитыПлатежаВБюджет, ДанныеЗаполнения, Контекст);
	
	// Перейдем на терминологию документа
	Для каждого Реквизит Из РеквизитыДокумента Цикл
		РеквизитыОбъекта[Реквизит.Значение] = РеквизитыПлатежаВБюджет[Реквизит.Ключ];
	КонецЦикла;
	
	Если ТипЗнч(ИсходныеДанныеЗаполнения) = Тип("Структура") Тогда
		Если ИсходныеДанныеЗаполнения.Свойство("Контрагент") И ЗначениеЗаполнено(ИсходныеДанныеЗаполнения.Контрагент) Тогда
			РеквизитыОбъекта.Вставить("Контрагент", ИсходныеДанныеЗаполнения.Контрагент);
			Если ИсходныеДанныеЗаполнения.Свойство("СчетКонтрагента") И ЗначениеЗаполнено(ИсходныеДанныеЗаполнения.СчетКонтрагента) Тогда
				РеквизитыОбъекта.Вставить("СчетКонтрагента", ИсходныеДанныеЗаполнения.СчетКонтрагента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Контекст платежа используется для вызова методов модуля ПлатежиВБюджетКлиентСервер
//
Функция КонтекстПлатежногоДокумента(Объект) Экспорт
	
	ИсточникДанных = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	ИсточникДанных.Период                      = Объект.Дата;
	ИсточникДанных.Организация                 = Объект.Организация;
	ИсточникДанных.СчетПолучателя              = Объект.СчетКонтрагента;
	ИсточникДанных.Налог                       = Объект.Налог;
	ИсточникДанных.ВидНалоговогоОбязательства  = Объект.ВидНалоговогоОбязательства;
	
	Возврат ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанных);
	
КонецФункции

#Область ОбработчикиОбновления

// Заполняет новые реквизиты "Налог" и "ВидНалоговогоОбязательства"
//
Процедура ЗаполнитьРеквизитыНалогВидНалоговогоОбязательства() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|ГДЕ
		|	ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
		|	И (ПлатежноеПоручение.Налог = ЗНАЧЕНИЕ(Справочник.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка)
		|			ИЛИ ПлатежноеПоручение.ВидНалоговогоОбязательства = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПустаяСсылка))";
	
	НалогПоКБК = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(Объект.Налог) Тогда
			Если Не ПустаяСтрока(Объект.КодБК) Тогда
				Налог = НалогПоКБК[Объект.КодБК];
				Если Налог = Неопределено Тогда
					Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Объект.КодБК);
					НалогПоКБК.Вставить(Объект.КодБК, Налог);
				КонецЕсли;
				Объект.Налог = Налог;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.Налог) Тогда
				Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ВидНалоговогоОбязательства) Тогда
			Объект.ВидНалоговогоОбязательства =
				Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(Объект.КодБК, Объект.Дата);
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект, Ложь);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Платежное поручение
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПлатежноеПоручение";
	КомандаПечати.Представление = НСтр("ru = 'Платежное поручение'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Платежное поручение""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатиПлатежногоПоручения(МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыПлатежногоПоручения();
	
	ДанныеДляПечати = Запрос.Выполнить().Выгрузить();
	ДанныеДляПечати.Колонки.Добавить("НомерДляПечати", Новый ОписаниеТипов("Строка"));
	ДанныеДляПечати.Колонки.Добавить("ДатаДляПечати", Новый ОписаниеТипов("Строка"));
	
	Для каждого ПлатежноеПоручение Из ДанныеДляПечати Цикл
		
		ПлатежноеПоручение.НомерДляПечати = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ПлатежноеПоручение.Номер, Истина, Истина);
		
		МесяцПрописью = ПлатежноеПоручение.СчетОрганизацииМесяцПрописью;
		ФорматДаты    = "ДФ=" + ?(ЗначениеЗаполнено(МесяцПрописью) И МесяцПрописью, "'дд ММММ гггг'", "'дд.ММ.гггг'");
		ПлатежноеПоручение.ДатаДляПечати = Формат(ПлатежноеПоручение.Дата, ФорматДаты);
		
		ПлатежноеПоручение.НаименованиеБанкаПлательщика = СокрЛП(ПлатежноеПоручение.НаименованиеБанкаПлательщика);
		ПлатежноеПоручение.НомерСчетаПлательщика        = СокрЛП(ПлатежноеПоручение.НомерСчетаПлательщика);
		ПлатежноеПоручение.БикБанкаПлательщика          = СокрЛП(ПлатежноеПоручение.БикБанкаПлательщика);
		ПлатежноеПоручение.СчетБанкаПлательщика         = СокрЛП(ПлатежноеПоручение.СчетБанкаПлательщика);
		
		ПлатежноеПоручение.НаименованиеБанкаПолучателя  = СокрЛП(ПлатежноеПоручение.НаименованиеБанкаПолучателя);
		ПлатежноеПоручение.НомерСчетаПолучателя         = СокрЛП(ПлатежноеПоручение.НомерСчетаПолучателя);
		ПлатежноеПоручение.БикБанкаПолучателя           = СокрЛП(ПлатежноеПоручение.БикБанкаПолучателя);
		ПлатежноеПоручение.СчетБанкаПолучателя          = СокрЛП(ПлатежноеПоручение.СчетБанкаПолучателя);
		
		ПлатежноеПоручение.НазначениеПлатежа = СокрЛП(ПлатежноеПоручение.НазначениеПлатежа);
		
		Если ПлатежноеПоручение.ПеречислениеВБюджет Тогда
			
			ОтметитьНезаполненныеЗначенияРеквизитовДляПеречисленияВБюджет(ПлатежноеПоручение);
			ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(ПлатежноеПоручение);
			
		КонецЕсли;
		
		Если ПлатежноеПоручение.Дата < ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа() Тогда
			// Идентификатор можно указывать в печатной форме платежного поручения с 31.03.2014
			ПлатежноеПоручение.ИдентификаторПлатежа = "";
		ИначеЕсли ПлатежноеПоручение.Дата >= ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа126н()
			И (ПлатежноеПоручение.ПеречислениеВБюджет
			ИЛИ ПлатежноеПоручение.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога) Тогда
			// Согласно приказу Минфина от 30.10.2014 N 126н с 01.01.2015 показатель типа (поле "110") не заполняется.
			// Но согласно Положению ЦБ РФ от 19.06.2012 N 383-П
			// "Распоряжения, в которых реквизит 101 имеет значение, подлежат контролю наличия значений реквизитов 102 - 110".
			// Поэтому всегда указываем в поле "110" - "0".
			ПлатежноеПоручение.ПоказательТипа = "0";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыПлатежногоПоручения()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка,
	|	ПлатежноеПоручение.ВерсияДанных,
	|	ПлатежноеПоручение.ПометкаУдаления,
	|	ПлатежноеПоручение.Номер,
	|	ПлатежноеПоручение.Дата,
	|	ПлатежноеПоручение.Проведен,
	|	ПлатежноеПоручение.ДокументОснование,
	|	ПлатежноеПоручение.ВидОперации КАК ВидОперации,
	|	ПлатежноеПоручение.Организация,
	|	ПлатежноеПоручение.СчетОрганизации,
	|	ПлатежноеПоручение.Контрагент,
	|	ПлатежноеПоручение.СчетКонтрагента,
	|	ПлатежноеПоручение.ВидПлатежа,
	|	ПлатежноеПоручение.ОчередностьПлатежа,
	|	ПлатежноеПоручение.НазначениеПлатежа,
	|	ПлатежноеПоручение.СуммаДокумента,
	|	ПлатежноеПоручение.ВалютаДокумента,
	|	ПлатежноеПоручение.ТекстПлательщика,
	|	ПлатежноеПоручение.ТекстПолучателя,
	|	ПлатежноеПоручение.Комментарий,
	|	ПлатежноеПоручение.ИННПлательщика,
	|	ПлатежноеПоручение.КПППлательщика,
	|	ПлатежноеПоручение.ИННПолучателя,
	|	ПлатежноеПоручение.КПППолучателя,
	|	ПлатежноеПоручение.КодБК,
	|	ПлатежноеПоручение.КодОКАТО,
	|	ПлатежноеПоручение.ПоказательДаты,
	|	ПлатежноеПоручение.ПоказательНомера,
	|	ПлатежноеПоручение.ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательПериода,
	|	ПлатежноеПоручение.ПоказательТипа,
	|	ПлатежноеПоручение.СтатусСоставителя,
	|	ПлатежноеПоручение.Ответственный,
	|	ПлатежноеПоручение.ПодразделениеОрганизации,
	|	ПлатежноеПоручение.ПеречислениеВБюджет,
	|	ПлатежноеПоручение.ВидПеречисленияВБюджет,
	|	ПлатежноеПоручение.Налог,
	|	ПлатежноеПоручение.ВидНалоговогоОбязательства,
	|	ПлатежноеПоручение.СтавкаНДС,
	|	ПлатежноеПоручение.СуммаНДС,
	|	ПлатежноеПоручение.Представление,
	|	ПлатежноеПоручение.МоментВремени,
	|	"""" КАК СрокПлатежа,
	|	ПлатежноеПоручение.СчетОрганизации.СуммаБезКопеек,
	|	ПлатежноеПоручение.СчетОрганизации.МесяцПрописью,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Код
	|		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации.Банк.Код
	|	КОНЕЦ КАК БикБанкаПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Наименование
	|		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации.Банк.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Город
	|		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Код
	|		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента.Банк.Код
	|	КОНЕЦ КАК БикБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Наименование
	|		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента.Банк.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Город
	|		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПолучателя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НепрямыеРасчетыУПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НепрямыеРасчетыУПолучателя,
	|	ПлатежноеПоручение.ИдентификаторПлатежа КАК ИдентификаторПлатежа
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручение.Дата,
	|	ПлатежноеПоручение.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует печатную форму
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатиПлатежногоПоручения(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	Для каждого ПлатежноеПоручение Из ДанныеДляПечати Цикл
		
		ЕстьОшибки = Ложь;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ПлатежноеПоручение");
		Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Обл.Параметры.НаименованиеНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № %1'"), ПлатежноеПоручение.НомерДляПечати);
		Обл.Параметры.ДатаДокумента = ПлатежноеПоручение.ДатаДляПечати;
		
		// Сумма платежного документа
		СуммаБезКопеек  = ЗначениеЗаполнено(ПлатежноеПоручение.СчетОрганизацииСуммаБезКопеек) И ПлатежноеПоручение.СчетОрганизацииСуммаБезКопеек;
		Обл.Параметры.СуммаЧислом   = УчетДенежныхСредствБП.ФорматироватьСуммуПлатежногоДокумента(
		                              ПлатежноеПоручение.СуммаДокумента, СуммаБезКопеек);
		Обл.Параметры.СуммаПрописью = УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(
		                              ПлатежноеПоручение.СуммаДокумента, ПлатежноеПоручение.ВалютаДокумента, СуммаБезКопеек);
		
		// Реквизиты плательщика
		Обл.Параметры.ИННПлательщика   = "ИНН " + ПлатежноеПоручение.ИННПлательщика;
		Обл.Параметры.КПППлательщика   = "КПП " + ПлатежноеПоручение.КПППлательщика;
		Обл.Параметры.ТекстПлательщика = ПлатежноеПоручение.ТекстПлательщика;
		
		// Реквизиты банка плательщика
		Обл.Параметры.НаименованиеБанкаПлательщика = ПлатежноеПоручение.НаименованиеБанкаПлательщика+" "+ПлатежноеПоручение.ГородБанкаПлательщика;
		Обл.Параметры.НомерСчетаПлательщика        = ПлатежноеПоручение.НомерСчетаПлательщика;
		Обл.Параметры.БикБанкаПлательщика          = ПлатежноеПоручение.БикБанкаПлательщика;
		Обл.Параметры.СчетБанкаПлательщика         = ПлатежноеПоручение.СчетБанкаПлательщика;
		
		// Реквизиты получателя
		Обл.Параметры.ИННПолучателя   = "ИНН " + ПлатежноеПоручение.ИННПолучателя;
		Обл.Параметры.КПППолучателя   = "КПП " + ПлатежноеПоручение.КПППолучателя;
		Обл.Параметры.ТекстПолучателя = ПлатежноеПоручение.ТекстПолучателя;
		
		// Реквизиты банка получателя
		Обл.Параметры.НаименованиеБанкаПолучателя = ПлатежноеПоручение.НаименованиеБанкаПолучателя+" "+ПлатежноеПоручение.ГородБанкаПолучателя;
		Обл.Параметры.НомерСчетаПолучателя        = ПлатежноеПоручение.НомерСчетаПолучателя;
		Обл.Параметры.БикБанкаПолучателя          = ПлатежноеПоручение.БикБанкаПолучателя;
		Обл.Параметры.СчетБанкаПолучателя         = ПлатежноеПоручение.СчетБанкаПолучателя;
		
		// Прочие реквизиты
		Обл.Параметры.ВидПлатежа           = ПлатежноеПоручение.ВидПлатежа;
		Обл.Параметры.НазначениеПлатежа    = ПлатежноеПоручение.НазначениеПлатежа;
		Обл.Параметры.Очередность          = ПлатежноеПоручение.ОчередностьПлатежа;
		Обл.Параметры.СрокПлатежа          = ПлатежноеПоручение.СрокПлатежа;
		Обл.Параметры.ИдентификаторПлатежа = ПлатежноеПоручение.ИдентификаторПлатежа;
		
		// Реквизиты для перечисления налогов
		
		Если ПлатежноеПоручение.ПеречислениеВБюджет
			ИЛИ ПлатежноеПоручение.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			
			ПоляЗаполнения = "СтатусСоставителя, КодБК, КодОКАТО, ПоказательОснования, ПоказательНомера, ПоказательДаты, ПоказательТипа, ПоказательПериода";
			
			ЗаполнитьЗначенияСвойств(Обл.Параметры, ПлатежноеПоручение, ПоляЗаполнения);
			
			// Если УИН не заполнен и в поле 22 выводится "0", то выведем его шрифтом с размером "9",
			// если же УИН заполнен, то поле 22 выводится шрифтом размером "6"
			Если НЕ ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(ПлатежноеПоручение.ИдентификаторПлатежа) Тогда
				ПолеКод = Обл.Область("ИдентификаторПлатежа");
				ПолеКод.Шрифт = Новый Шрифт(ПолеКод.Шрифт,, 9);
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(Обл);
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ПлатежноеПоручение.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Проверяем, нужно ли для макета ПлатежноеПоручение формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПлатежноеПоручение") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		Если МассивОбъектов.Количество() = 1 Тогда
			ДатаНомер = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МассивОбъектов[0], "Дата, Номер");
			НомерПечать    = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДатаНомер.Номер, Истина, Истина);
			ДатаДокумента  = Формат(ДатаНомер.Дата, "ДФ='дд ММММ гггг'");
			СинонимМакета  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Платежное поручение № %1 от %2'"), НомерПечать, ДатаДокумента); 
		Иначе
			СинонимМакета = НСтр("ru = 'Платежные поручения'");
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПлатежноеПоручение",
			СинонимМакета,
			ПечатьПлатежногоПоручения(МассивОбъектов, ОбъектыПечати),,
			"ОбщийМакет.ПФ_MXL_ПлатежноеПоручение");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;
	
	ПолеЗапросаНазначениеПлатежа =
	"ВЫБОР
	|		КОГДА Таб.НазначениеПлатежа ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(Таб.Контрагент.Наименование КАК СТРОКА(100))
	|		ИНАЧЕ """" + (ВЫРАЗИТЬ(Таб.Контрагент.Наименование КАК СТРОКА(100))) + "" / "" + Таб.НазначениеПлатежа
	|	КОНЕЦ";
	
	Результат.Вставить("Информация", ПолеЗапросаНазначениеПлатежа);
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли