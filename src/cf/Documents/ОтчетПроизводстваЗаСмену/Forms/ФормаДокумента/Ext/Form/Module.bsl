////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	// Включим предопределенные счета и их субсчета
	УчетПроизводства.ОграничитьВыборСчетамиПрямыхРасходов(Элементы.СчетЗатрат);
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Продукция",			"Продукция");
	СписокТабличныхЧастей.Добавить("Услуги",			"Услуги");
	СписокТабличныхЧастей.Добавить("ВозвратныеОтходы",	"ВозвратныеОтходы");
	СписокТабличныхЧастей.Добавить("Материалы",			"Материалы");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	УстановитьУсловноеОформление();
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеОтчетПроизводстваЗаСмену";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();

	Если Не ЗначениеЗаполнено(Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить()) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);
	КонецЕсли;
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// Проверка выполняется только в интерактивном режиме
	Если ПлательщикНДФЛ И Объект.Материалы.Количество() = 0 Тогда
		
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Список", , , , "Материалы", );
		
		Если Объект.Услуги.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Материалы", "Объект", Отказ);
		Иначе
			// Проверяем заполнение ТЧ Материалы только, если выпускается продукция не из давальческого сырья
			Для Каждого СтрокаПродукции Из Объект.Продукция Цикл
				
				Если ЗначениеЗаполнено(СтрокаПродукции.Счет)
					И СтрокаПродукции.Счет <> ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Материалы", "Объект", Отказ);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеЗатрат) Тогда
		Объект.ПодразделениеЗатрат = Объект.ПодразделениеОрганизации;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)

	ПереключательСпособСписанияНДС = 1;
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатратПриИзменении(Элемент)

	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюЭлементовФормы()

	Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = Булево(ПереключательСпособСписанияНДС);
	
	Если Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат Тогда
		Объект.СчетСписанияНДС = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	Иначе
		Объект.СчетСписанияНДС = Объект.СчетЗатрат;
	КонецЕсли;
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетСписанияНДС, "", "СписанияНДС", Ложь, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоСписанияНДС1", "СубконтоСписанияНДС2", "СубконтоСписанияНДС3");
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетСписанияНДС, Объект, ПоляОбъекта, , ЗначенияСубконто);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры


&НаКлиенте
Процедура СчетСписанияНДСПриИзменении(Элемент)

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетСписанияНДС, "", "СписанияНДС", Ложь, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоСписанияНДС1", "СубконтоСписанияНДС2", "СубконтоСписанияНДС3");
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетСписанияНДС, Объект, ПоляОбъекта,, ЗначенияСубконто);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияНДС", "СчетСписанияНДС");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДСПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияНДС", "СчетСписанияНДС");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоСписанияНДС%Индекс%", "СчетСписанияНДС");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Продукция>

&НаКлиенте
Процедура ПродукцияПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|ПлановаяСтоимость, СуммаПлановая,
		|Спецификация, Счет, НоменклатурнаяГруппа");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПродукцияНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ТекущиеДанные.Коэффициент = 1;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПлановаяСтоимостьПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаПлановаяПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные.Количество <> 0 Тогда
		ТекущиеДанные.ПлановаяСтоимость = ТекущиеДанные.СуммаПлановая / ТекущиеДанные.Количество;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Услуги>

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконтоТаблицыУслуги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПередНачаломИзменения(Элемент, Отказ)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ИзменитьПараметрыВыбораПолейСубконтоТаблицыУслуги(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ТекущиеДанные.Счет, "Услуги", "", Истина, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= Новый Структура(
		"Номенклатура, Количество,
		|ПлановаяСтоимость, СуммаПлановая,
		|Счет, ПодразделениеЗатрат, Субконто1, Субконто2, Субконто3,
		|Спецификация, НоменклатурнаяГруппа,
		|ПодразделениеЗатратДоступность,
		|Субконто1Доступность, Субконто2Доступность, Субконто3Доступность");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ИзменитьПараметрыВыбораПолейСубконтоТаблицыУслуги(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ТекущиеДанные.Счет, "Услуги", "", Истина, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтроки	= Новый Структура("Дата, Организация, Склад,
		|Номенклатура ,Количество, 
		|ПлановаяСтоимость, СуммаПлановая,
		|Счет, ПодразделениеЗатрат, Субконто1, Субконто2, Субконто3,
		|Спецификация, НоменклатурнаяГруппа,
		|ПодразделениеЗатратДоступность,
		|Субконто1Доступность, Субконто2Доступность, Субконто3Доступность");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ДанныеСтроки.Счет, "Услуги", "", Истина, Истина);
	
	УслугиСчетПриИзмененииНаСервере(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ИзменитьПараметрыВыбораПолейСубконтоТаблицыУслуги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконтоТаблицыУслуги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(
		ЭтаФорма, Элемент, СтандартнаяОбработка,
		СписокПараметровВыбораСубконтоТаблицыУслуги(ЭтаФорма, ТекущиеДанные, "Субконто%Индекс%"));

КонецПроцедуры

&НаКлиенте
Процедура УслугиПересчитатьСумму(Элемент)

	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПлановаяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти.ПлановаяСтоимость = СтрокаТабличнойЧасти.СуммаПлановая / СтрокаТабличнойЧасти.Количество;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ВозвратныеОтходы>

&НаКлиенте
Процедура ВозвратныеОтходыПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= Новый Структура(
		"Номенклатура, Количество,
		|Цена, Сумма,
		|Счет, СтатьяЗатрат,
		|ОтражениеВУСН, НоменклатурнаяГруппа");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ВозвратныеОтходыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЦенаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если ТекущиеДанные.Количество <> 0 Тогда
		ТекущиеДанные.Цена	= ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Материалы>

&НаКлиенте
Процедура МатериалыПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Счет, КоличествоМест,
		|ЕдиницаИзмерения, Коэффициент, Количество,
		|ОтражениеВУСН, СпособУчетаНДС,
		|ДокументОприходования, Себестоимость,
		|НоменклатурнаяГруппа, СтатьяЗатрат");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	МатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыДокументОприходованияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументОприходования) Тогда
		ТекущиеДанные.Себестоимость	= 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные	= Элементы.Материалы.ТекущиеДанные;
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("Организация",	Объект.Организация);
	ПараметрыФормы.Вставить("СчетУчета",	ТекущиеДанные.Счет);
	ПараметрыФормы.Вставить("Номенклатура",	ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("Склад",		Объект.Склад);
	ПараметрыФормы.Вставить("КонецПериода",	?(Параметры.Ключ.Пустая(), КонецДня(ТекущаяДата()), Объект.Дата));
	
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)

	Если Объект.Материалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена.
			|Заполнить?'") ;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьМатериалыПоСпецификацииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораПродукция(Команда)

	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Продукция"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораМатериалы(Команда)

	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Материалы"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаУслуги Тогда

		Форма.УстановитьУсловноеОформлениеУслуги();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("МатериалыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалы Тогда

		Форма.УстановитьУсловноеОформлениеМатериалы();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()

	// Склад

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Склад");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтметкаНезаполненногоСклад", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// МатериалыДокументОприходования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьСебестоимость", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	Для Сч = 1 По 3 Цикл

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	КонецЦикла;

	
	// Субконто
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслуги() Экспорт

	НастройкиУсловногоОформления.Вставить("УслугиПроинициализировано", Истина);


	// Субконто
	Для Сч = 1 По 3 Цикл

		// Незаполненное субконто

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));

	КонецЦикла;


	// УслугиПодразделениеЗатрат

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиПодразделениеЗатрат");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ПодразделениеЗатратДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиКоличество, УслугиСуммаПлановая

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаПлановая");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.Количество", ВидСравненияКомпоновкиДанных.НеРавно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СуммаПлановая", ВидСравненияКомпоновкиДанных.НеРавно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// УслугиПодразделениеЗатрат

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиПодразделениеЗатрат");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ПодразделениеЗатратДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ПодразделениеЗатрат", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеМатериалы() Экспорт

	НастройкиУсловногоОформления.Вставить("МатериалыПроинициализировано", Истина);


	// МатериалыДокументОприходования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));


	// МатериалыСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.Себестоимость", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));


	// МатериалыСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МатериалыСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Материалы.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);

	ТекущаяДатаДокумента					= Объект.Дата;
	ВалютаРегламентированногоУчета			= Константы.ВалютаРегламентированногоУчета.Получить();
	ТипЦенПлановойСебестоимостиНоменклатуры	= Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	
	ПереключательСпособСписанияНДС	= Число(Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетСписанияНДС, "", "СписанияНДС", Ложь, Ложь);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПоказыватьСебестоимость	= (УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата) <>
		Перечисления.СпособыОценки.ПоСредней);
	
	ПлательщикНДФЛ		= УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;

	Если Объект.НДСвСтоимостиТоваров = ПредопределенноеЗначение("Перечисление.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость") Тогда
		Элементы.ГруппаСписаниеНДСсчетИАналитика.Доступность = Истина;
	Иначе
		Элементы.ГруппаСписаниеНДСсчетИАналитика.Доступность = Ложь;
		Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = Истина;
		Форма.ПереключательСпособСписанияНДС = 1;
		Объект.СчетСписанияНДС = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	КонецЕсли;
	
	Если Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат Тогда 
		Элементы.ГруппаСчетСубконто.Доступность = Ложь;
	Иначе
		Элементы.ГруппаСчетСубконто.Доступность = Истина;
	КонецЕсли;
		
	Элементы.Материалы.АвтоОтметкаНезаполненного	= Форма.ПлательщикНДФЛ;
	
	Форма.ОтметкаНезаполненногоСклад = (Объект.Продукция.Количество() > 0
		ИЛИ Объект.ВозвратныеОтходы.Количество() > 0
		ИЛИ Объект.Материалы.Количество() > 0);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		СтрокаТаблицы.ПодразделениеЗатрат =
			БухгалтерскийУчет.ПолучитьПодразделениеПоСчету(
				СтрокаТаблицы.ПодразделениеЗатрат,
				СтрокаТаблицы.Счет,
				Объект.Организация,
				Объект.ПодразделениеОрганизации);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Продукция" Тогда
		Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Продукция");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Услуги" Тогда
		Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы" Тогда
		Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратныеОтходы");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Материалы" Тогда
		Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Материалы");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродукцияНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	
	ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);	
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.ПлановаяСтоимость		= СведенияОНоменклатуре.ПлановаяСтоимость;
	СтрокаТабличнойЧасти.Спецификация			= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
	
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Продукция", СведенияОНоменклатуре);
		
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервере
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	
	ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);	
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ПлановаяСтоимость		= СведенияОНоменклатуре.ПлановаяСтоимость;
	СтрокаТабличнойЧасти.Спецификация			= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
	
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
	
	УслугиСчетПриИзмененииНаСервере(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервере
Процедура УслугиСчетПриИзмененииНаСервере(ДанныеСтроки)
	
	ПоляОбъекта = Новый Структура("Организация, Подразделение, Субконто1, Субконто2, Субконто3",
		Объект.Организация, "ПодразделениеЗатрат", "Субконто1", "Субконто2", "Субконто3");
		
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ДанныеСтроки.Счет, ДанныеСтроки, ПоляОбъекта, Истина, ЗначенияСубконто);
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ПодразделениеЗатрат) Тогда
		СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.Счет);
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			ДанныеСтроки.ПодразделениеЗатрат	= Объект.ПодразделениеЗатрат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратныеОтходыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	
	ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СтатьяЗатрат			= ?(ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат), 
		СведенияОНоменклатуре.СтатьяЗатрат,	ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.ПлановаяСтоимость;
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
	
	СтрокаТабличнойЧасти.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
	
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратныеОтходы", СведенияОНоменклатуре);
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура МатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	
	СтрокаТабличнойЧасти.СтатьяЗатрат			= ?(ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат), 
		СведенияОНоменклатуре.СтатьяЗатрат,	ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
	СтрокаТабличнойЧасти.СпособУчетаНДС			= СведенияОНоменклатуре.СпособУчетаНДС;	
	СтрокаТабличнойЧасти.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
	
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Материалы", СведенияОНоменклатуре);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

&НаСервере
Процедура ЗаполнитьМатериалыПоСпецификацииНаСервере()
	
	Объект.Материалы.Очистить();
	Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьМатериалыПоПродукцииУслугам(
		Объект.Материалы,
		Объект.Продукция.Выгрузить(),
		Объект.Услуги.Выгрузить(),
		Объект.Организация,
		Объект.Склад);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);

	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в документ %1 (%2)'");
	Если ИмяТаблицы = "Продукция" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Продукция'");
	ИначеЕсли ИмяТаблицы = "Материалы" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Материалы'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора,
		Объект.Ссылка, ПредставлениеТаблицы);
		
	
	ПараметрыФормы.Вставить("ДатаРасчетов",   	 ДатаРасчетов);
	ПараметрыФормы.Вставить("Склад",          	 Объект.Склад);
	ПараметрыФормы.Вставить("Организация",    	 Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение",  	 Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Валюта",         	 ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыФормы.Вставить("ЕстьЦена",		  	 Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество", 	 Истина);
	ПараметрыФормы.Вставить("Заголовок",      	 ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы",     	 ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги",         	 ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ТипЦен",         	 ТипЦенПлановойСебестоимостиНоменклатуры);
	ПараметрыФормы.Вставить("ПоказыватьЦены", 	 ЗначениеЗаполнено(ТипЦенПлановойСебестоимостиНоменклатуры));
	ПараметрыФормы.Вставить("ПоказыватьОстатки", Истина);

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ИмяТаблицы = "Продукция" Тогда
		ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
		
		Если ИмяТаблицы = "Продукция" Тогда
			
			СтрокаТабличнойЧасти.Спецификация		= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
			СтрокаТабличнойЧасти.ПлановаяСтоимость	= СведенияОНоменклатуре.ПлановаяСтоимость;
			ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
			
		ИначеЕсли ИмяТаблицы = "Материалы" Тогда
			
			СтрокаТабличнойЧасти.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
			СтрокаТабличнойЧасти.СпособУчетаНДС	= СведенияОНоменклатуре.СпособУчетаНДС;
			СтрокаТабличнойЧасти.СтатьяЗатрат	= СведенияОНоменклатуре.СтатьяЗатрат;
			
		КонецЕсли;
		
		Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		ЗаполнитьДобавленныеКолонкиТаблицыУслуги(СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблицыУслуги(СтрокаТаблицы)

	СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
	
	СтрокаТаблицы.ПодразделениеЗатратДоступность = СвойстваСчета.УчетПоПодразделениям;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТаблицы.Счет, СтрокаТаблицы, ПоляОбъекта);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект,
		"Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		Форма.Объект, 
		"Субконто" + Суффикс + "%Индекс%", 
		"Субконто" + Суффикс + "%Индекс%", 
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	
	Для Индекс = 1 По 3 Цикл
		
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
		
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект[ИмяСчета]);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконтоТаблицыУслуги(Форма)

	Если Форма.Элементы.Услуги.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Форма.Объект.Услуги.НайтиПоИдентификатору(Форма.Элементы.Услуги.ТекущаяСтрока);
	
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, 
		СтрокаТаблицы, 
		"Субконто%Индекс%", 
		"УслугиСубконто%Индекс%", 
		СписокПараметровВыбораСубконтоТаблицыУслуги(Форма, СтрокаТаблицы, "Субконто%Индекс%"));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконтоТаблицыУслуги(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	
	ШаблонИмяПоляОбъекта = "Субконто%Индекс%";
	
	ОбщиеПараметры = Новый Соответствие;
	ОбщиеПараметры.Вставить(Тип("СправочникСсылка.Контрагенты"),          "Контрагент");
	ОбщиеПараметры.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"), "ДоговорКонтрагента");
	ОбщиеПараметры.Вставить(Тип("СправочникСсылка.Номенклатура"),         "Номенклатура");
	ОбщиеПараметры.Вставить(Тип("СправочникСсылка.Склады"),               "Склад");
	
	Для Индекс = 1 По 3 Цикл
		
		ИмяПоля         = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ЗначениеПоля    = ПараметрыОбъекта[ИмяПоля];
		ТипЗначенияПоля = ТипЗнч(ЗначениеПоля);
		
		ИмяПараметра = ОбщиеПараметры[ТипЗначенияПоля];
		Если ЗначениеЗаполнено(ИмяПараметра) Тогда
			СписокПараметров.Вставить(ИмяПараметра, ЗначениеПоля);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",   ПараметрыОбъекта.Счет);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Префикс = "", Постфикс = "", ЕстьПодразделение, ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "Субконто" + Постфикс + "1",
		Префикс + "Субконто" + Постфикс + "2",
		Префикс + "Субконто" + Постфикс + "3");

	Если ЕстьПодразделение Тогда
		ПоляФормы.Вставить("Подразделение", Префикс + "ПодразделениеЗатрат" + Постфикс);
	КонецЕсли;

	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "ЗаголовокСубконто" + Постфикс + "1",
		Префикс + "ЗаголовокСубконто" + Постфикс + "2",
		Префикс + "ЗаголовокСубконто" + Постфикс + "3");

	Если ЕстьПодразделение Тогда
		ЗаголовкиПолей.Вставить("Подразделение", Префикс + "ПодразделениеЗатрат" + Постфикс);
	КонецЕсли;

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей, ЭтоТаблица);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьМатериалыПоСпецификацииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

