#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмФиксацииИзменений

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксацииВторичныхДанных(ФиксацияОписаниеФиксацииРеквизитов(), , ФиксацияОписанияТЧ());
КонецФункции

Функция ФиксацияОписаниеФиксацииРеквизитов()
	
	ОписаниеФиксацииРеквизитов = Новый Соответствие;
	
	// Сотрудники
	ОписаниеФиксацииРеквизитов.Вставить("ДатаЗакрытия", ФиксацияОписаниеФиксацииРеквизита("ДатаЗакрытия", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("ЛицевойСчет", ФиксацияОписаниеФиксацииРеквизита("ЛицевойСчет", "Сотрудник"));
	
	Возврат Новый ФиксированноеСоответствие(ОписаниеФиксацииРеквизитов);
	
КонецФункции

Функция ФиксацияОписанияТЧ()
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("ФизическоеЛицо");
	
	СтруктураКлючевыхПолей = Новый Структура("Сотрудники", МассивПолей);
	
	Возврат СтруктураКлючевыхПолей;
	
КонецФункции

Функция ФиксацияОписаниеФиксацииРеквизита(ИмяРеквизита, 
	ИмяГруппы, 
	ОснованиеЗаполнения = "Сотрудник",
	РеквизитСтроки = Истина,
	ФиксацияГруппы = Ложь, 
	Путь = "Сотрудники",
	Используется = Истина, 
	ОтображатьПредупреждение = Истина, 
	СтрокаПредупреждения =  "")
	
	ФиксацияРеквизита = ФиксацияВторичныхДанныхВДокументах.СтруктураПараметровОписанияФиксацииРеквизитов();
	ФиксацияРеквизита.Вставить("Используется", Используется);
	ФиксацияРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
	ФиксацияРеквизита.Вставить("ИмяГруппы", ИмяГруппы);
	ФиксацияРеквизита.Вставить("ФиксацияГруппы", ФиксацияГруппы);
	ФиксацияРеквизита.Вставить("ОснованиеЗаполнения", ОснованиеЗаполнения);
	ФиксацияРеквизита.Вставить("Путь", Путь);
	ФиксацияРеквизита.Вставить("ОтображатьПредупреждение", ОтображатьПредупреждение);
	Если СтрокаПредупреждения <> "" Тогда
		ФиксацияРеквизита.Вставить("СтрокаПредупреждения", СтрокаПредупреждения);
	КонецЕсли;
	ФиксацияРеквизита.Вставить("РеквизитСтроки", РеквизитСтроки);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксацииРеквизита(ФиксацияРеквизита);
	
КонецФункции

#КонецОбласти

#Область ФормированиеФайлаОбмена

// Формирует и прикрепляет файл обмена к документу с помощью подсистемы "Файлы".
//
// Параметры:
//		СтруктураПараметровДляФормированияФайла - Структура - должна содержать значения:
//			МассивДокументов - Массив ссылок на документы, по которым требуется сформировать файл.
//			МассивОписанийФайлов - Массив описаний сформированных файлов.
//
Процедура ВыгрузитьФайлыДляОбменаСБанком(СтруктураПараметровДляФормированияФайла) Экспорт
	
	Если Не СтруктураПараметровДляФормированияФайла.Свойство("СтруктураПараметровЭД") Тогда
		СтруктураПараметровДляФормированияФайла.Вставить("СтруктураПараметровЭД", Неопределено);
	КонецЕсли;
	
	Отказ = Ложь;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", СтруктураПараметровДляФормированияФайла.МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников.Ссылка КАК Заявка,
	|	ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников.Проведен КАК Проведен
	|ИЗ
	|	Документ.ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников КАК ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников
	|ГДЕ
	|	ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников.Ссылка В(&МассивДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Проведен Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 не проведен.'"), Выборка.Заявка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Заявка,,, Отказ);
		КонецЕсли;
		Если НЕ ОбменСБанкамиПоЗарплатнымПроектам.ИспользоватьЭОИСБанком(Выборка.ЗарплатныйПроект) Тогда
			Если ЗначениеЗаполнено(Выборка.ЗарплатныйПроект) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По зарплатному проекту %1 не используется обмен электронными документами с банком.'"),
					Выборка.ЗарплатныйПроект);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 не выбран зарплатный проект.'"), Выборка.Заявка);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, Выборка.ЗарплатныйПроект, "ИспользоватьЭлектронныйДокументооборотСБанком",,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = "ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников";
	ДатаПолученияДанных = ТекущаяДатаСеанса();

	СтруктураПараметровДляФормированияФайла.Вставить("ВидОперации", ВидОперации);
	СтруктураПараметровДляФормированияФайла.Вставить("ДанныеШапки", ДанныеШапкиДокументовДляПолученияТекстаФайла(
		СтруктураПараметровДляФормированияФайла.МассивДокументов, ДатаПолученияДанных));
	СтруктураПараметровДляФормированияФайла.Вставить("ДанныеСтрок", ДанныеСтрокДокументовДляПолученияТекстаФайла(
		СтруктураПараметровДляФормированияФайла.МассивДокументов, ДатаПолученияДанных));
	СтруктураПараметровДляФормированияФайла.Вставить("КорневыеСвойства", ОбменСБанкамиПоЗарплатнымПроектам.КорневыеСвойства(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеПолейФайла", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеПолейФайла(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("ОбязательныеПоляФайла", ОбменСБанкамиПоЗарплатнымПроектам.ОбязательныеПоляФайла(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеПреобразованияЗначений", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеПреобразованияЗначений(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеТипов", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеТипов(ВидОперации));
	
	ОбменСБанкамиПоЗарплатнымПроектам.СоздатьФайлыДляОбменаСБанком(СтруктураПараметровДляФормированияФайла);
	
КонецПроцедуры

// Получает данные документов для формирования файла обмена.
//
// Параметры:
//		МассивДокументов - Массив ссылок на документы, по которым требуется получить данные.
//		ДатаПолученияДанных - дата формирования файла.
//
// Возвращаемое значение:
//		Строка таблицы значений "ДанныеШапкиДокументов" - содержит данные шапки документа.
//
Функция ДанныеШапкиДокументовДляПолученияТекстаФайла(МассивДокументов, ДатаПолученияДанных)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ЗаявкиНаЗакрытиеЛицевыхСчетовСотрудников", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаЗакрытие.Документ КАК Документ,
	|	ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников.Номер КАК НомерДокумента,
	|	ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеОрганизации,
	|	Организации.ИНН КАК ИННОрганизации,
	|	ЗарплатныеПроекты.Ссылка КАК ЗарплатныйПроект,
	|	ЗарплатныеПроекты.НомерДоговора КАК НомерДоговора,
	|	ЗарплатныеПроекты.ДатаДоговора КАК ДатаДоговора,
	|	ЗарплатныеПроекты.РасчетныйСчет КАК НомерРасчетногоСчетаОрганизации,
	|	ЗарплатныеПроекты.ОтделениеБанка КАК ОтделениеБанка,
	|	ЗарплатныеПроекты.ФорматФайла КАК ФорматФайла,
	|	КлассификаторБанковРФ.Код КАК БИКБанка,
	|	ЗаявкаНаЗакрытие.КоличествоЗаписей КАК КоличествоЗаписей,
	|	0 КАК СуммаИтого
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники.Ссылка КАК Документ,
	|		КОЛИЧЕСТВО(ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники.Сотрудник) КАК КоличествоЗаписей
	|	ИЗ
	|		Документ.ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников.Сотрудники КАК ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники
	|	ГДЕ
	|		ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники.Ссылка В(&ЗаявкиНаЗакрытиеЛицевыхСчетовСотрудников)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники.Ссылка) КАК ЗаявкаНаЗакрытие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников КАК ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников
	|		ПО ЗаявкаНаЗакрытие.Документ = ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников.Организация = Организации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО (ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
	|		ПО (ЗарплатныеПроекты.Банк = КлассификаторБанковРФ.Ссылка)";
	
	ДанныеШапкиДокументов = Запрос.Выполнить().Выгрузить();
	
	// ИдПервичногоДокумента
	ДанныеШапкиДокументов.Колонки.Добавить("ИдПервичногоДокумента");
	
	// ДатаФормирования
	ДанныеШапкиДокументов.Колонки.Добавить("ДатаФормирования");
	
	// ИмяФайла
	ДанныеШапкиДокументов.Колонки.Добавить("ИмяФайла");
	
	// ДанныеРеестра
	ДанныеШапкиДокументов.Колонки.Добавить("ДанныеРеестра");
	
	КоличествоЗаписей = Неопределено;
	СуммаИтого = Неопределено;
	Для каждого СтрокаДанных Из ДанныеШапкиДокументов Цикл
		Если КоличествоЗаписей = Неопределено Тогда
			КоличествоЗаписей = ДанныеШапкиДокументов.Итог("КоличествоЗаписей");
		КонецЕсли;
		Если СуммаИтого = Неопределено Тогда
			СуммаИтого = ДанныеШапкиДокументов.Итог("СуммаИтого");
		КонецЕсли;
		СтрокаДанных.ДатаФормирования = ДатаПолученияДанных;
		СтрокаДанных.ИдПервичногоДокумента = СтрокаДанных.Документ.УникальныйИдентификатор();
		СтрокаДанных.ИмяФайла = ОбменСБанкамиПоЗарплатнымПроектам.ИмяФайлаОбменаСБанкамиПоЗарплатнымПроектам(СтрокаДанных.Документ, СтрокаДанных.ОтделениеБанка, СтрокаДанных.НомерДокумента, "u");
		
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьДанныеШапкиДокументаДляПолученияТекстаФайла(СтрокаДанных, СтрокаДанных.Документ, ДатаПолученияДанных);
	КонецЦикла;
	
	Возврат ДанныеШапкиДокументов;
	
КонецФункции

// Получает данные строк документа для формирования файла обмена.
//
// Параметры:
//		МассивДокументов - Массив ссылок на документы, по которым требуется получить данные.
//		ДатаПолученияДанных - дата формирования файла.
//
// Возвращаемое значение:
//		Таблица значений "ДанныеСтрокДокументов" - содержит данные строк документа.
//
Функция ДанныеСтрокДокументовДляПолученияТекстаФайла(МассивДокументов, ДатаПолученияДанных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ЗаявкиНаЗакрытиеЛицевыхСчетовСотрудников", МассивДокументов);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ДатаПолученияДанных КАК Период,
	|	ДанныеСотрудников.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	Документ.ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников.Сотрудники КАК ДанныеСотрудников
	|ГДЕ
	|	ДанныеСотрудников.Ссылка В(&ЗаявкиНаЗакрытиеЛицевыхСчетовСотрудников)";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСписокСотрудников");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Фамилия,Имя,Отчество");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники.Ссылка КАК Документ,
	|	ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники.Сотрудник КАК Сотрудник,
	|	ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники.НомерСтроки КАК НомерСтроки,
	|	КадровыеДанныеСотрудников.Фамилия КАК Фамилия,
	|	КадровыеДанныеСотрудников.Имя КАК Имя,
	|	КадровыеДанныеСотрудников.Отчество КАК Отчество,
	|	ЗарплатныеПроекты.ОтделениеБанка КАК ОтделениеБанка,
	|	ЗарплатныеПроекты.ФилиалОтделенияБанка КАК ФилиалОтделенияБанка,
	|	ЗарплатныеПроекты.Валюта.Код КАК КодВалюты,
	|	ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники.ДатаЗакрытия КАК ДатаЗакрытия,
	|	ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники.ЛицевойСчет
	|ИЗ
	|	Документ.ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников.Сотрудники КАК ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники.Ссылка.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|ГДЕ
	|	ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудниковСотрудники.Ссылка В(&ЗаявкиНаЗакрытиеЛицевыхСчетовСотрудников)";
	
	ДанныеСтрокДокументов = Запрос.Выполнить().Выгрузить();
	
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ДополнитьКолонкиДанныхСтрокДокументов(ДанныеСтрокДокументов);
	
	Для каждого СтрокаДанныхДокумента Из ДанныеСтрокДокументов Цикл
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ЗаполнитьКолонкиДанныхСтрокДокумента(СтрокаДанныхДокумента);
	КонецЦикла;
	
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьДанныеСтрокДокументовДляПолученияТекстаФайла(ДанныеСтрокДокументов, ДатаПолученияДанных);
	
	Возврат ДанныеСтрокДокументов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли