////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеДоверенность";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	// Если дата действия отличалась на 10 дней, т.е. не была исправлена, надо ее поправить
	Если НачалоДня(Объект.ДатаДействия) - НачалоДня(ТекущаяДатаДокумента) = 10 * (24 * 60 * 60) Тогда
		Объект.ДатаДействия = Объект.Дата + 10 * (24 * 60 * 60);
	КонецЕсли;
	
	ТекущаяДатаДокумента = Объект.Дата; 

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ДанныеОбъекта = Новый Структура("Организация, БанковскийСчетОрганизации, Контрагент, ДоговорКонтрагента");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ОрганизацияПриИзмененииНаСервере(ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	ДоговорКонтрагентаОбработатьИзменение();

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	ДанныеОбъекта = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, НаПолучениеОт");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	КонтрагентПриИзмененииНаСервере(ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	ДоговорКонтрагентаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ДоговорКонтрагентаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)

	ПаспортныеДанные = ПолучитьПаспортныеДанныеСтрокой(Объект.Организация, Объект.ФизЛицо);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	
	СделкаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",               Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",         Объект.Контрагент);
	ПараметрыОбъекта.Вставить("Организация",        Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов",     "Метаданные.Документы.Доверенность.Реквизиты.Сделка.Тип");
		
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Товары>

&НаКлиенте
Процедура ТоварыНаименованиеТовараНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("НаименованиеПолное", СокрЛП(Элемент.ТекстРедактирования));
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОтбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаименованиеТовараОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		ТекДанные = Элементы.Товары.ТекущиеДанные;
		РеквизитыСтрока = "НаименованиеПолное, ЕдиницаИзмерения";
		ЗначенияРеквизитов = ПолучитьСвойстваТовара(ВыбранноеЗначение, РеквизитыСтрока); 
		ТекДанные.НаименованиеТовара = ЗначенияРеквизитов.НаименованиеПолное;
		
		Если НЕ ЗначениеЗаполнено(ТекДанные.ЕдиницаПоКлассификатору) ИЛИ
			ТекДанные.ЕдиницаПоКлассификатору <> ЗначенияРеквизитов.ЕдиницаИзмерения Тогда
			ТекДанные.ЕдиницаПоКлассификатору = ЗначенияРеквизитов.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора, 
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ПаспортныеДанные = ОбщегоНазначенияБПВызовСервера.ПолучитьПаспортныеДанныеСтрокой(Объект.Организация, Объект.ФизЛицо);
	КонецЕсли;
	
	УстановитьПараметрыВыбора(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.БанковскийСчетОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Сделка.Доступность = ЗначениеЗаполнено(Объект.Организация) И 
		ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.НаПолучениеОт.Доступность = ЗначениеЗаполнено(Объект.Организация) И 
		ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПоДокументу.Доступность = ЗначениеЗаполнено(Объект.Организация) И 
		ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) И Форма.ПаспортныеДанные = "Отсутствуют данные об удостоверении личности." Тогда
		Элементы.ГруппаПаспортныеДанные.ТекущаяСтраница = Элементы.ГруппаПаспортныеДанныеОтсутствуют;
	Иначе
		Элементы.ГруппаПаспортныеДанные.ТекущаяСтраница = Элементы.ГруппаЕстьПаспортныеДанные;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбора(Форма)
	
	Элементы = Форма.Элементы;
	
	МассивВидовДоговоров = Новый ФиксированныйМассив(ПолучитьМассивВидовДоговоров());
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОрганизацияПриИзмененииНаСервере(ДанныеОбъекта)
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(ДанныеОбъекта.БанковскийСчетОрганизации, ДанныеОбъекта.Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДанныеОбъекта.ДоговорКонтрагента, ДанныеОбъекта.Контрагент, ДанныеОбъекта.Организация, ПолучитьМассивВидовДоговоров());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииНаСервере(ДанныеОбъекта)
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДанныеОбъекта.ДоговорКонтрагента, ДанныеОбъекта.Контрагент, ДанныеОбъекта.Организация, ПолучитьМассивВидовДоговоров());
	
	ДанныеОбъекта.НаПолучениеОт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.Контрагент, "НаименованиеПолное");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	Объект.Сделка      = Неопределено;
	СделкаОбработатьИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаОбработатьИзменение()
	
	Объект.ПоДокументу = ПолучитьПредставлениеДокумента(Объект.Сделка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()
	
	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	
	Возврат СписокВидовДоговоров;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;
	
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)
	
	ВидПодбора = "";
	
	Возврат ВидПодбора;

КонецФункции

&НаСервере
Функция ПолучитьСвойстваТовара(Товар, РеквизитыСтрока)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Товар, РеквизитыСтрока);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТовара);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.НаименованиеТовара      = СведенияОНоменклатуре.НаименованиеПолное;
		СтрокаТаблицы.ЕдиницаПоКлассификатору = СведенияОНоменклатуре.ЕдиницаИзмерения;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПаспортныеДанныеСтрокой(Организация, ФизЛицо) Экспорт

	Возврат ОбщегоНазначенияБПВызовСервера.ПолучитьПаспортныеДанныеСтрокой(Организация, ФизЛицо);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеДокумента(Сделка)
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		ПредставлениеДокумента = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(
			Сделка, СокрЛП(Сделка.Метаданные().Представление()))
	Иначе
		ПредставлениеДокумента = "";
	КонецЕсли;
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

