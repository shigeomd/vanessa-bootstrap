#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ВыполнитьОперацию(БлокировкаУстановленаНеявно = Ложь) Экспорт

	Отказ = Ложь;
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(
		ЭтотОбъект,
		Отказ,
		РежимЗаписиДокумента.Запись,
		РежимПроведенияДокумента.Неоперативный);
	
	Если Отказ ИЛИ НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = НСтр("ru = 'выполнить'");
	УдалосьУстановитьБлокировку = УстановитьОбъектныеБлокировки(БлокировкаУстановленаНеявно, Действие);
	Если НЕ УдалосьУстановитьБлокировку Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НайтиДубли() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Если ЭтоНовый() ИЛИ Модифицированность() Тогда
		Записать();
	КонецЕсли;
	
	Если РучнаяКорректировка Тогда
		МетаданныеОбъекта = Метаданные();
		
		МассивИменРегистров = ПроведениеСервер.ПолучитьМассивИспользуемыхРегистров(
			Ссылка,
			МетаданныеОбъекта.Движения);
		
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Движения[ИмяРегистра].Прочитать();
			Движения[ИмяРегистра].УстановитьАктивность(Истина);
			Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;
		
		Движения.Записать();
		ИзменитьСостояниеОперации(Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
		
		Возврат Истина;
	КонецЕсли;
	
	// Собственно выполнение операции
	Отказ = Ложь;
	СформироватьДвиженияИлиСообщенияОбОшибках(Отказ); // Добавит в ДополнительныеСвойства свойство Ошибки
	
	Если НЕ Отказ Тогда
		
		НовоеСостояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
		
	Иначе
		
		// Некоторые сообщения об ошибках переданы через сообщения пользователю
		СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
		ЗакрытиеМесяцаСообщенияОбОшибках.ДополнитьИнформациюОбОшибкахСообщениямиПользователю(
			ДополнительныеСвойства.Ошибки,
			СообщенияПользователю);
		
		Если ВыводСообщенийОбОшибках.ЕстьОшибки(ДополнительныеСвойства.Ошибки) Тогда
			НовоеСостояние  = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками;
		Иначе
			НовоеСостояние  = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		КонецЕсли;
		
		// Некоторые операции могли успеть записать какие-то движения.
		// Такие движения не имеют смысла - удалим их.
		ОбщегоНазначенияБПВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Истина, РучнаяКорректировка, Ложь);
		
	КонецЕсли;
	
	// Подготовим описание ошибок для пользователя и сохраним его в документ
	Если ВыводСообщенийОбОшибках.ЕстьОшибки(ДополнительныеСвойства.Ошибки) ИЛИ ОписаниеОшибок.Получить() <> Неопределено Тогда
		ОписаниеОшибок = ЗакрытиеМесяцаСообщенияОбОшибках.ОписаниеОшибок(
			ДополнительныеСвойства.Ошибки,
			Дата,
			Организация,
			ВидОперации);
	КонецЕсли;
	
	ИзменитьСостояниеОперации(НовоеСостояние);
	
	// Из-за выполнении рег.операции перенесем момент нарушения последовательности на начало следующего месяца.
	Если Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда
		НадоПроверятьПоследовательность = Истина;
		Если ДополнительныеСвойства.Свойство("НеПроверятьПоследовательность") Тогда
			Если ДополнительныеСвойства.НеПроверятьПоследовательность = Истина Тогда
				НадоПроверятьПоследовательность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НадоПроверятьПоследовательность Тогда
			МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(Организация, КонецМесяца(Дата));
			Если МоментНарушения = Неопределено Тогда
				НачалоСледующегоМесяца = КонецМесяца(Дата) + 1;
				МоментПервогоДокументаСледующегоМесяца = РаботаСПоследовательностями.МоментВремениПервогоДокументаВПоследовательности(
					Организация, НачалоСледующегоМесяца);
				Если МоментПервогоДокументаСледующегоМесяца <> Неопределено Тогда
					РаботаСПоследовательностями.СброситьСостояниеПоследовательностиДокумента(
						МоментПервогоДокументаСледующегоМесяца.Ссылка, МоментПервогоДокументаСледующегоМесяца.Дата, Организация);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
	
КонецФункции // ВыполнитьОперацию

Процедура ОтменитьОперацию(БлокировкаУстановленаНеявно = Ложь, Отказ = Ложь, УдалитьДвижения = Истина, СдвигатьМоментНарушенияПоследовательности = Истина) Экспорт
	
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(ЭтотОбъект, 
		Отказ, РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Действие = НСтр("ru = 'отменить'");
	УдалосьУстановитьБлокировку = УстановитьОбъектныеБлокировки(БлокировкаУстановленаНеявно, Действие);
	Если НЕ УдалосьУстановитьБлокировку Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	// Из-за изменения рег.операции перенесем момент нарушения последовательности на начало следующего месяца.
	// При массовой отмене регламентных операций сдвиг последовательности следует выполнять один раз.
	Если СдвигатьМоментНарушенияПоследовательности Тогда
		Если Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда
			МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(Организация, КонецМесяца(Дата));
			Если МоментНарушения = Неопределено Тогда
				НачалоСледующегоМесяца = КонецМесяца(Дата) + 1;
				МоментПервогоДокументаСледующегоМесяца = РаботаСПоследовательностями.МоментВремениПервогоДокументаВПоследовательности(
					Организация, НачалоСледующегоМесяца);
				Если МоментПервогоДокументаСледующегоМесяца <> Неопределено Тогда
					РаботаСПоследовательностями.СброситьСостояниеПоследовательностиДокумента(
						МоментПервогоДокументаСледующегоМесяца.Ссылка, МоментПервогоДокументаСледующегоМесяца.Дата, Организация);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если УдалитьДвижения Тогда
		ОбщегоНазначенияБПВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	Иначе
		ОбщегоНазначенияБПВызовСервера.ИзменитьАктивностьПоРегистратору(ЭтотОбъект, Отказ, Ложь);
	КонецЕсли;
	ОписаниеОшибок = Неопределено;
	
	ИзменитьСостояниеОперации(Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
	
КонецПроцедуры // ОтменитьОперацию()

Процедура ПропуститьОперацию(БлокировкаУстановленаНеявно = Ложь, Отказ = Ложь) Экспорт

	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(ЭтотОбъект, 
		Отказ, РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Действие = НСтр("ru = 'пропустить'");
	УдалосьУстановитьБлокировку = УстановитьОбъектныеБлокировки(БлокировкаУстановленаНеявно, Действие);
	Если НЕ УдалосьУстановитьБлокировку Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	Если НайтиДубли() Тогда
		Возврат;
	КонецЕсли;
	
	ОперацияБылаВыполнена = Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
	
	Если ОперацияБылаВыполнена Тогда
		ОбщегоНазначенияБПВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка, Ложь);
	КонецЕсли;
	
	ОписаниеОшибок = Неопределено;
	Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
	Записать();
	
	Если ОперацияБылаВыполнена Тогда
		РегистрыСведений.НеактуальныеРегламентныеОперации.ОбновитьГраницуАктуальности(Организация, Дата, ВидОперации);  
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПропуститьОперацию()

Функция ВосстановитьОперацию(НовоеСостояние, БлокировкаУстановленаНеявно = Ложь) Экспорт

	Отказ = Ложь;
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(ЭтотОбъект, 
		Отказ, РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;

	Действие = НСтр("ru = 'восстановить'");
	УдалосьУстановитьБлокировку = УстановитьОбъектныеБлокировки(БлокировкаУстановленаНеявно, Действие);
	Если Не УдалосьУстановитьБлокировку Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПравильноЗаполнено = ПроверитьЗаполнение();
	Если Не ПравильноЗаполнено Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Ложь;
	КонецЕсли;

	ОбщегоНазначенияБПВызовСервера.ИзменитьАктивностьПоРегистратору(ЭтотОбъект, Ложь, Истина);

	ИзменитьСостояниеОперации(НовоеСостояние);

	Возврат Истина;

КонецФункции

Процедура ИзменитьСостояниеОперации(НовоеСостояние)
	
	Если Состояние <> НовоеСостояние Тогда
		Состояние = НовоеСостояние;
	КонецЕсли;
	
	Если Модифицированность() Тогда
		Записать();
	КонецЕсли;
	
	РегистрыСведений.НеактуальныеРегламентныеОперации.ОбновитьГраницуАктуальности(Организация, Дата, ВидОперации);
	ОтразитьИзменениеРегламентныхОперацийДляПереходаНаУСН();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блокировки

Функция УстановитьОбъектныеБлокировки(БлокировкаУстановленаНеявно, ТипВыполнения) Экспорт
	
	УдалосьУстановитьБлокировку = Ложь;
	
	// Заблокируем выполняемый документ,
	// чтобы никто параллельно не мог завладеть им в данном периоде,
	// по данной Организации/Виду операции.
	// Также учтем Группы операций
	// и филиальные структуры организаций
	
	ШаблонСообщения = НСтр("ru = 'Операцию ""[ВидОперации]"" сейчас [Действие] нельзя. Повторите попытку позже.'");
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("ВидОперации", ВидОперации);
	ПараметрыСообщения.Вставить("Действие",    ТипВыполнения);
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСообщения, ПараметрыСообщения);
	
	Если РольДоступна("АдминистраторСистемы") Тогда
		ШаблонСообщения = НСтр("ru = 'Операцию можно будет [Действие], когда завершатся фоновые задания, выполняющие регламентные операции.
		|Детальная информация о фоновых заданиях доступна по команде ""[Команда]"" раздела интерфейса ""[РазделИнтерфейса]"".'");
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Действие",         ТипВыполнения);
		ПараметрыСообщения.Вставить("Команда",          Метаданные.Обработки.РегламентныеИФоновыеЗадания.Команды.РегламентныеИФоновыеЗадания.Синоним);
		ПараметрыСообщения.Вставить("РазделИнтерфейса", Метаданные.Подсистемы.Администрирование.Синоним);
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСообщения, ПараметрыСообщения);
	КонецЕсли;
	
	// при выполнении из формы документа, он сам себя заблокирует (неявно),
	// а новые (не записанные) объекты, заблокировать объектной блокировкой нельзя
	Если НЕ Заблокирован() И НЕ БлокировкаУстановленаНеявно И НЕ ЭтоНовый() Тогда
		// аналогичный документ, в данный момент не используется
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Ссылка);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат УдалосьУстановитьБлокировку;
		КонецПопытки;
	КонецЕсли;
	
	Группа = ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации);
	
	// аналогичная операция, в данный момент не используется,
	// в т.ч. не должно быть пересечения выполнения между головным и обособленным подразделением группы организаций
	
	Параметры           = Новый Массив(1);
	СвойстваОрганизации = БухгалтерскийУчетПереопределяемый.СтруктураОрганизации(Организация);
	СтруктураБлокировкиПоОрганизациям = Новый Структура(
		"Организация, ПериодРегистрации, РегламентнаяОперация",
		Организация,
		КонецМесяца(Дата),
		ВидОперации);
	
	Если СвойстваОрганизации.Тип <> "Простая" и СвойстваОрганизации.ГоловнаяОрганизация.Количество() > 0 Тогда
		Если СвойстваОрганизации.Тип = "ОП" Тогда
			СтруктураБлокировкиПоОрганизациям.Вставить("Организация", СвойстваОрганизации.ГоловнаяОрганизация[0].Значение);
			
			Параметры[0]  = СтруктураБлокировкиПоОрганизациям;
			КлючЗаписиОрг = Новый (Тип("РегистрСведенийКлючЗаписи.ОчередьРегламентныхОпераций"), Параметры);
			Попытка
				ЗаблокироватьДанныеДляРедактирования(КлючЗаписиОрг);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат УдалосьУстановитьБлокировку;
			КонецПопытки;
			
			РазблокироватьДанныеДляРедактирования(КлючЗаписиОрг);
		КонецЕсли;
		
		Если СвойстваОрганизации.Тип = "ГО" Тогда
			Для каждого ОрганизацияОП Из СвойстваОрганизации.Организация Цикл
				Если ОрганизацияОП.Значение = Организация Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураБлокировкиПоОрганизациям.Вставить("Организация", ОрганизацияОП.Значение);
				
				Параметры[0]  = СтруктураБлокировкиПоОрганизациям;
				КлючЗаписиОрг = Новый (Тип("РегистрСведенийКлючЗаписи.ОчередьРегламентныхОпераций"), Параметры);
				Попытка
					ЗаблокироватьДанныеДляРедактирования(КлючЗаписиОрг);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат УдалосьУстановитьБлокировку;
				КонецПопытки;
				
				РазблокироватьДанныеДляРедактирования(КлючЗаписиОрг);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураБлокировкиПоОрганизациям.Вставить("Организация", Организация);
	Параметры[0]  = СтруктураБлокировкиПоОрганизациям;
	КлючЗаписиОрг = Новый (Тип("РегистрСведенийКлючЗаписи.ОчередьРегламентныхОпераций"), Параметры);
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписиОрг);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат УдалосьУстановитьБлокировку;
	КонецПопытки;
	
	// если это выполнение, то операции из любой другой Группы в данный момент не используются
	// если это отмена или пропуск, то операции выше данной группы в данный момент не используются
	
	СтруктураБлокировки = Новый Структура("Организация, Группа, Дата, ВидОперации");
	СтруктураБлокировки.Вставить("Организация", Организация);
	СтруктураБлокировки.Вставить("Дата",        НачалоМесяца(Дата));
	
	ЭтоВыполнение   = (ТипВыполнения = НСтр("ru = 'выполнить'"));
	НачальнаяГруппа = ?(ЭтоВыполнение, 1, Группа + 1);
	Если НачальнаяГруппа < 5 Тогда
		Для Каждого ЗначениеПеречисленияМет Из Метаданные.Перечисления.ВидыРегламентныхОпераций.ЗначенияПеречисления Цикл
			ЗначениеПеречисления = Перечисления.ВидыРегламентныхОпераций[ЗначениеПеречисленияМет.Имя];
			Для сч = НачальнаяГруппа По 4 Цикл
				ГруппаОперации = ЗакрытиеМесяца.ГруппаПоВидуОперации(ЗначениеПеречисления);
				Если Группа = ГруппаОперации Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураБлокировки.Вставить("ВидОперации", ЗначениеПеречисления);
				СтруктураБлокировки.Вставить("Группа",      ГруппаОперации);
				КлючЗаписиГруппа = РегистрыСведений.НеактуальныеРегламентныеОперации.СоздатьКлючЗаписи(СтруктураБлокировки);
				Попытка
					ЗаблокироватьДанныеДляРедактирования(КлючЗаписиГруппа);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат УдалосьУстановитьБлокировку;
				КонецПопытки;
				
				РазблокироватьДанныеДляРедактирования(КлючЗаписиГруппа);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураБлокировки.Вставить("ВидОперации", ВидОперации);
	СтруктураБлокировки.Вставить("Группа",      Группа);
	КлючЗаписиГруппа = РегистрыСведений.НеактуальныеРегламентныеОперации.СоздатьКлючЗаписи(СтруктураБлокировки);
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписиГруппа);
		УдалосьУстановитьБлокировку = Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), Ссылка);
		Возврат УдалосьУстановитьБлокировку;
	КонецПопытки;
	
	Возврат УдалосьУстановитьБлокировку;
	
КонецФункции // УстановитьОбъектныеБлокировки()

Функция УстановитьТранзакционнуюБлокировку() Экспорт
	
	// Объектная блокировка не работает для незаписанных объектов,
	// поэтому будем всегда ставить и транзакционную блокировку
	// при конкурентном доступе пересекающихся записанных объектов,
	// они будут отваливаться сразу от объектной, в ином случае, от транзакционной
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.РегламентнаяОперация");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), Ссылка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // УстановитьТранзакционнуюБлокировку()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Дата = КонецМесяца(Дата); // при обмене могут создать документ с неверной датой
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ВыполняютсяСпециальнымиДокументами = Перечисления.ВидыРегламентныхОпераций.ВыполняютсяСпециальнымиДокументами();
	Если Не ПометкаУдаления И ВыполняютсяСпециальнымиДокументами.Найти(ВидОперации) <> Неопределено Тогда
		// Документов с таким видом операции быть не должно
		Отказ = Истина;
	КонецЕсли;
	
	УдалосьУстановитьБлокировку = УстановитьТранзакционнуюБлокировку();
	
	Если НЕ УдалосьУстановитьБлокировку Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления
		И Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда
		ОтменитьОперацию();
	КонецЕсли;
	
	Если Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
		РегистрыСведений.НеАктуальныеРегламентныеОперации.УдалитьЗапись(
			Организация,
			Дата,
			ВидОперации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Дата = КонецМесяца(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата          = КонецМесяца(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	Состояние     = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Поиск ошибок в данных

// Перед выполнением регламентных операций выполняется поиск ошибок в данных,
// препятствующих выполнению.
// В отдельных случаях ошибки ищутся в ходе выполнения операций, а не перед ним.
// Информация о найденных ошибках сохраняется в документе.

Процедура ПроверитьИсходныеДанныеИНастройки(СтруктураШапкиДокумента, Отказ, Ошибки)
	
	СтруктураШапкиДокумента.Вставить("Ссылка", Ссылка);
	ПлательщикНалогаНаПрибыль	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
	ПоддержкаПБУ18				= УчетнаяПолитика.ПоддержкаПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		                       
		КонтрольЗатрат.ВыявитьУчетныеОшибкиРасчетСебестоимости(
			Ошибки,
			СтруктураШапкиДокумента.КонДата, 
			СтруктураШапкиДокумента.Организация);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		
		КонтрольЗатрат.ВыявитьУчетныеОшибкиРасходыНаПродажу(
			Ошибки,
			СтруктураШапкиДокумента.КонДата, 
			СтруктураШапкиДокумента.Организация);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91 Тогда
		
		УчетДоходовРасходов.ВыявитьОшибкиПриЗакрытииМесяца(
			Ошибки,
			СтруктураШапкиДокумента.КонДата, 
			СтруктураШапкиДокумента.Организация);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		
		// Нет ставок налога на прибыль
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтавкиНалогаНаПрибыльСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.СрезПоследних(&Дата, ) КАК СтавкиНалогаНаПрибыльСрезПоследних";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ШаблонСообщения = НСтр("ru = 'Не указана ставка налога на прибыль.
				|Отсутствуют записи в регистре сведений ""Ставки налога на прибыль"" на %1.
				|Установите ставку налога на прибыль.'");
			
			СсылкаДляПерехода = "e1cib/data/РегистрСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций";
			ТекстСообщения      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Формат(НачалоГода(СтруктураШапкиДокумента.Дата), "ДФ=дд.ММ.гггг"));
			ДобавитьПростоеОписаниеОшибки(ТекстСообщения, СсылкаДляПерехода, Отказ);
		КонецЕсли;
				
		// Убыток прошлого года не перенесен на будущее
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Дата",        НачалоГода(СтруктураШапкиДокумента.Дата));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Организация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Дата,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
		|			Организация = &Организация
		|				И (ВЫРАЗИТЬ(Субконто1 КАК Перечисление.ВидыАктивовИОбязательств)) = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК ХозрасчетныйОстатки";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ТекстСообщения = НСтр("ru = 'Не перенесен убыток прошлого года.
				|Обнаружен остаток на начало года на счете 09 по виду ""Убыток текущего периода"".
				|Рекомендуется перед реформацией баланса прошлого года ввести проводки с датой конца прошлого года:
				|С кредита счета 09 по виду ""Убыток текущего периода"" в дебет счета 09 по виду ""Расходы будущих периодов"" с датой конца прошлого года на сумму остатка по виду ""Убыток текущего периода"".
				|С кредита счета 99 в дебет счета 97 по статье РБП с видом ""Убытки прошлых лет"" на положительную сумму налогового учета и отрицательную сумму временных разниц, равную сумме убытка'");
			
			СсылкаДляПерехода = "e1cib/list/Документ.ОперацияБух";
			ДобавитьПростоеОписаниеОшибки(ТекстСообщения, СсылкаДляПерехода, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП Тогда
		УчетСтраховыхВзносовИП.ВыявитьУчетныеОшибкиУплатыСтраховыхВзносов(Ошибки,
			СтруктураШапкиДокумента.КонДата, СтруктураШапкиДокумента.Организация);
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество Тогда
		
		Если СтруктураШапкиДокумента.Дата < '20140101' Тогда
			
			СсылкаДляПерехода = "";
			ТекстСообщения = НСтр("ru = 'Эта операция поддерживается с 2014 года'");
			ДобавитьПростоеОписаниеОшибки(ТекстСообщения, СсылкаДляПерехода, Отказ);
			
		Иначе
		
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата", КонецМесяца(СтруктураШапкиДокумента.Дата));
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СтавкиНалогаНаИмуществоСрезПоследних.Период
			|ИЗ
			|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Дата, ) КАК СтавкиНалогаНаИмуществоСрезПоследних";
			
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				// Нет ставок налога на имущество
				
				ШаблонСообщения = НСтр("ru = 'Не указана ставка налога на имущество.
					|Отсутствуют записи в регистре сведений ""Ставки налога на имущество"" на %1.
					|Установите ставку налога на имущество.'");
				
				СсылкаДляПерехода = "e1cib/data/РегистрСведений.СтавкиНалогаНаИмущество";
				ТекстСообщения      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					Формат(НачалоГода(СтруктураШапкиДокумента.Дата), "ДФ=дд.ММ.гггг"));
				ДобавитьПростоеОписаниеОшибки(ТекстСообщения, СсылкаДляПерехода, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТранспортногоНалога Тогда
		
		Если СтруктураШапкиДокумента.Дата < '20140101' Тогда
			
			СсылкаДляПерехода = "";
			ТекстСообщения = НСтр("ru = 'Эта операция поддерживается с 2014 года'");
			ДобавитьПростоеОписаниеОшибки(ТекстСообщения, СсылкаДляПерехода, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		
		Если СтруктураШапкиДокумента.Дата < '20140101' Тогда
			
			СсылкаДляПерехода = "";
			ТекстСообщения = НСтр("ru = 'Эта операция поддерживается с 2014 года'");
			ДобавитьПростоеОписаниеОшибки(ТекстСообщения, СсылкаДляПерехода, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихНалогУСН Тогда
	
		УчетУСН.ВыявитьУчетныеОшибкиРасходовУменьшающихНалогУСН(
			Ошибки,
			СтруктураШапкиДокумента.КонДата,
			СтруктураШапкиДокумента.Организация);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПростоеОписаниеОшибки(Описание, Ссылка, Отказ)
	
	Отказ = Истина;
	
	Если ДополнительныеСвойства.Свойство("Ошибки") Тогда
		ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(
			ДополнительныеСвойства.Ошибки, 
			Описание, 
			Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Функция УчетнаяПолитикаСуществует(ОрганизацияДляУчетнойПолитики)
	
	Существует = УчетнаяПолитика.Существует(ОрганизацияДляУчетнойПолитики, Дата, Ложь, Ссылка);
	Отказ      = Не Существует;
	
	Если Не Существует Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для организации %1 на %2 не заполнена учетная политика.'"),
			ОрганизацияДляУчетнойПолитики,
			Формат(НачалоМесяца(Дата), "ДФ='MMMM yyyy'"));
		
		ДобавитьПростоеОписаниеОшибки(
			ТекстСообщения, 
			БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьНавигационнуюСсылкуНаУчетнуюПолитикуОрганизации(), 
			Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Процедура ПроверитьПоследовательностьДокументов(СписокОрганизаций, Ошибки, Отказ)

	ШаблонТекста = НСтр("ru = 'Нарушена последовательность проведения документов.
		|Возможно изменение результатов проведения документов за %1 по организации %2.
		|Выполните повторно перепроведение документов, начиная с %3
		|(раздел ""Учет и отчетность"" - ""Закрытие месяца"").'");

	Для Каждого ЭлементСписка Из СписокОрганизаций Цикл
		
		ТекущаяОрганизация = ЭлементСписка.Значение;
		
		МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
			ТекущаяОрганизация, КонецМесяца(Дата));

		Если МоментНарушения <> Неопределено Тогда

			Отказ = Истина;

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста, 
				Формат(МоментНарушения.Дата, "ДФ='MMММ yyyy ""г.""'"), 
				ТекущаяОрганизация, 
				Формат(МоментНарушения.Дата, "ДЛФ=Д"));

			ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(
				Ошибки, 
				ТекстСообщения);

		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Актуализация списка регламентных операций

Функция НайтиДубли() Экспорт
	
	Дубли = Документы.РегламентнаяОперация.НайтиДубли(Дата, Организация, ВидОперации, Ссылка);
	
	Если Дубли.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Выборка = Дубли.Выбрать();
	Выборка.Следующий();
	
	ШаблонСообщения = НСтр("ru = 'Регламентная операция ""%1"" создана ранее.
		|Используйте документ %2'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения, 
		Строка(ВидОперации), 
		Строка(Выборка.Ссылка));
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
		
	Возврат Истина;
	
КонецФункции	

Процедура ОтразитьИзменениеРегламентныхОперацийДляПереходаНаУСН()

	Если ЭтоПодготовкаКПереходуНаУСН() Тогда
		ДатаПереходаНаУСН = УчетнаяПолитика.ДатаПереходаНаУСН(Организация, ДобавитьМесяц(Дата, 1));
		Если ЗначениеЗаполнено(ДатаПереходаНаУСН) Тогда
			
			ПараметрыПереходаНаУСН = Новый Структура;
			ПараметрыПереходаНаУСН.Вставить("Организация",  Организация);
			ПараметрыПереходаНаУСН.Вставить("ДатаПерехода", ДатаПереходаНаУСН);
			ПараметрыПереходаНаУСН.Вставить("ВидОперации",  Перечисления.ВидыОперацийПереходаНаУСН.ВычетНДСПоАвансамПокупателей);
			ПараметрыПереходаНаУСН.Вставить("НаправлениеПерехода", Перечисления.НаправленияИзмененийНалоговыхРежимов.ОСНнаУСН);
			
			УчетУСН.ЗафиксироватьУстаревшиеОперацииПереходаНаУСН(ПараметрыПереходаНаУСН);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ЭтоПодготовкаКПереходуНаУСН()

	ЭтоОперацияПереходаНаУСН = Ложь;
	
	Если КонецМесяца(Дата) = КонецГода(Дата) Тогда
		Если ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации) = 1 Тогда
			Если УчетнаяПолитика.ПереходНаУСН(Организация, ДобавитьМесяц(Дата, 1)) Тогда
				ЭтоОперацияПереходаНаУСН = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоОперацияПереходаНаУСН;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ЗаполнитьСтруктуруШапкиДокумента(Отказ, Заголовок) Экспорт
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	Отказ               = УчетнаяПолитикаСуществует(ГоловнаяОрганизация);
	СтруктураШапки      = Новый Структура();
	
	Если Отказ Тогда
		Возврат СтруктураШапки;
	КонецЕсли;
	
	СтруктураШапки.Вставить("НачДата",                 НачалоМесяца(Дата));
	СтруктураШапки.Вставить("КонДата",                 КонецМесяца(Дата));
	СтруктураШапки.Вставить("НачГраница",              Новый Граница(СтруктураШапки.НачДата, ВидГраницы.Исключая));
	СтруктураШапки.Вставить("КонГраница",              Новый Граница(СтруктураШапки.КонДата, ВидГраницы.Включая));
	СтруктураШапки.Вставить("НачГода",                 НачалоГода(Дата));
	СтруктураШапки.Вставить("Организация",             Организация);
	СтруктураШапки.Вставить("Ссылка",                  Ссылка);
	СтруктураШапки.Вставить("Дата",                    Дата);
	СтруктураШапки.Вставить("Номер",                   Номер);
	СтруктураШапки.Вставить("ВидОперации",             ВидОперации);
	СтруктураШапки.Вставить("Заголовок",               Заголовок);
	СтруктураШапки.Вставить("ГоловноеПодразделение",   ГоловнаяОрганизация);
	СтруктураШапки.Вставить("Предприниматель",         УчетнаяПолитика.ПлательщикНДФЛ(Организация, СтруктураШапки.КонДата));
	
	ВсяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	СписокОП = Новый СписокЗначений;
	Для Каждого ОбособленноеПодразделение Из ВсяОрганизация Цикл
		СписокОП.Добавить(ОбособленноеПодразделение);
	КонецЦикла;
	СтруктураШапки.Вставить("СписокОрганизаций", СписокОП);
	
	ЕстьОбособленныеПодразделения = СписокОП.Количество() > 1;
	СтруктураШапки.Вставить("ЕстьОбособленныеПодразделения", ЕстьОбособленныеПодразделения);
	СтруктураШапки.Вставить("СуммаПересчетаУбытков",0);
	Возврат СтруктураШапки;
	
КонецФункции // ЗаполнитьСтруктуруШапкиДокумента()

Процедура СформироватьДвиженияИлиСообщенияОбОшибках(Отказ)
	
	ДополнительныеСвойства.Вставить("Ошибки", ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках());
	Ошибки = ДополнительныеСвойства.Ошибки;
	
	// Сообщения об ошибках могут быть помещены в коллекцию Ошибки явно,
	// или помещены в сообщения пользователю.
	// В последнем случае они будут записаны в коллекцию Ошибки позже.
	
	Заголовок   = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента = ЗаполнитьСтруктуруШапкиДокумента(Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// При последовательном проведении регламентных операций проверку последовательности
	// имеет смысл выполнить один раз в самом начале, для остальных регламетных операций 
	// установить признак НеПроверятьПоследовательность.
	НадоПроверятьПоследовательность = Истина;
	Если ДополнительныеСвойства.Свойство("НеПроверятьПоследовательность") Тогда
		Если ДополнительныеСвойства.НеПроверятьПоследовательность = Истина Тогда
			НадоПроверятьПоследовательность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НадоПроверятьПоследовательность Тогда

		НомерГруппыВидаОперации = ЗакрытиеМесяца.ГруппаПоВидуОперации(СтруктураШапкиДокумента.ВидОперации);

		Если ЗакрытиеМесяца.ГруппаВыполняетсяПоОрганизацииВЦелом(НомерГруппыВидаОперации) Тогда
			СписокОрганизаций = СтруктураШапкиДокумента.СписокОрганизаций;
		Иначе
			СписокОрганизаций = Новый СписокЗначений;
			СписокОрганизаций.Добавить(Организация);
		КонецЕсли;
	
		ПроверитьПоследовательностьДокументов(СписокОрганизаций, Ошибки, Отказ);
	КонецЕсли;
	
	Если Не ЗакрытиеМесяца.ПредыдущиеОперацииВыполнены(Дата, Организация, ВидОперации, Ошибки) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",                    ЭтоНовый());
	ДополнительныеСвойства.Вставить("ДатаДокументаСдвинутаВперед", Ложь);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект, Ложь); // Записанные движения регистратора будут принудительно очищены
	
	// Проверяем после очистки движений,
	// чтобы движения регламентной операции не повлияли на результат проверки
	ПроверитьИсходныеДанныеИНастройки(СтруктураШапкиДокумента, Отказ, Ошибки);
	Если ВыводСообщенийОбОшибках.ЕстьОшибки(Ошибки) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДвижения(СтруктураШапкиДокумента, Отказ, Ошибки);
	
	Если Не Отказ Тогда
		Движения.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура СформироватьДвижения(СтруктураШапкиДокумента, Отказ, Ошибки)
	
	// Как правило, алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета.
	// Есть исключения для отдельных регл. операций. Они описаны ниже.
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС Тогда
		// АМОРТИЗАЦИЯ
		НачислениеАмортизацииИИзносаОС(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР Тогда
		// Начисление амортизации НМА и списание расходов по НИОКР
		НачислениеАмортизацииНМА_НИОКР(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВэксплуатации Тогда
		// СПЕЦОДЕЖДА И СПЕЦОСНАСТКА
		ПогашениеСтоимостиСпецодеждыИСпецоснастки(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредств Тогда
		// ПЕРЕОЦЕНКА
		ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Ошибки);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры Тогда
		// КОРРЕКТИРОВКА СТОИМОСТИ НОМЕНКЛАТУРЫ
		КорректировкаСтоимостиНоменклатуры(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета97 Тогда
		// СПИСАНИЕ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ
		ЗакрытиеСчета97(СтруктураШапкиДокумента, Отказ);
		
	// ИМУЩЕСТВЕННЫЕ НАЛОГИ	
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидНалога", Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество); 
		ВыполнитьРасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);	
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТранспортногоНалога Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидНалога", Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог);
		ВыполнитьРасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		
		СтруктураШапкиДокумента.Вставить("ВидНалога", Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог);
		ВыполнитьРасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда
		// Расчет долей списания косвенных расходов налогового учета, транспортных расходов и распределения 
		// расходов по видам деятельности
		РасчетДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		// РАСЧЕТ СТОИМОСТИ ВЫПУЩЕННОЙ ПРОДУКЦИИ И ОКАЗАННЫХ УСЛУГ
		ЗакрытиеСчетов20_23_25_26(СтруктураШапкиДокумента, Отказ, Ошибки);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТорговойНаценкиПоПроданнымТоварам Тогда
		// ТОРГОВЛЯ
		РасчетТорговойНаценкиПоПроданнымТоварам(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		// ЗАКРЫТИЕ СЧЕТА 44
		ЗакрытиеСчета44(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам Тогда
		// РАСЧЕТ РЕЗЕРВОВ ПО СОМНИТЕЛЬНЫМ ДОЛГАМ
		РасчетРезервовПоСомнительнымДолгам(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91 Тогда
		// ЗАКРЫТИЕ СЧЕТОВ БУ
		ЗакрытиеСчетов90_91(СтруктураШапкиДокумента, Отказ);
		//Округление сумм НДС до полных рублей № 248-ФЗ от 23.07.2013
		ОкруглениеСуммНДС(СтруктураШапкиДокумента);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет Тогда
		// УБЫТКИ ПРОШЛЫХ ЛЕТ
		СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		// НАЛОГ НА ПРИБЫЛЬ
		
		ВыполнитьРасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ);
		НалоговыйУчетОбособленныхПодразделений.ПроведениеПересчетаОНАиОНОКаждыйМесяц(СтруктураШапкиДокумента, Движения, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса Тогда
		// РЕФОРМАЦИЯ БАЛАНСА И ЗАКРЫТИЕ ГОДА
		ПроведениеПеречетаОНАиОНО(СтруктураШапкиДокумента, Отказ);
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать(Ложь);
		КонецЕсли;
		
		ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ);
		
		// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО УСН
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ИсключениеНЗПИзСоставаМатериальныхРасходовДляУСН Тогда 
		
		УчестьОстаткиНЗПприУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеОСДляУСН Тогда 
		ПризнаниеРасходовНаПриобретениеОСУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеНМАДляУСН Тогда 
		ПризнаниеРасходовНаПриобретениеНМАУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН Тогда
		СписаниеДопРасходовУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеТаможенныхПлатежейДляУСН Тогда
		СписаниеТаможенныхПлатежейУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН Тогда
		РаспределениеРасходовЕНВДУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихНалогУСН Тогда
		РассчитатьРасходыУменьшающиеНалогУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН Тогда
		НачислитьНалогУСН(СтруктураШапкиДокумента, Отказ);
		
		// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО ИП
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП Тогда 
		
		НачислитьСтраховыеВзносыИП(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП Тогда 
		
		ВключениеАвансовВПрочиеДоходыИП(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляИП Тогда 
		
		РаспределениеРасходовЕНВДИП(СтруктураШапкиДокумента, Отказ);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Эта операция в данный момент не поддерживается'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Движения.Хозрасчетный.Записывать = Ложь;
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентные расчеты

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО НАЧИСЛЕНИЮ АМОРТИЗАЦИИ ОС, НМА и НИОКР

// Выполняет начисление амортизации и износа основных средств
//
Процедура НачислениеАмортизацииИИзносаОС(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачислениеАмортизацииИзносаОС(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Начисление амортизации ОС
	ПараметрыНачисленияАмортизации = УчетОС.ПодготовитьТаблицыАмортизацииОСИСуммАмортизационнойПремии(Неопределено,
		ПараметрыПроведения.НачислениеАмортизацииОС, Отказ);
	
	ЭтоМесяцНачисленияИзноса = Месяц(СтруктураШапкиДокумента.Дата) = 12;
	Если ЭтоМесяцНачисленияИзноса Тогда
		// Начисление износа ОС по ЕНАОФ
		ПараметрыНачисленияИзноса = УчетОС.ПодготовитьТаблицуИзносаБухРегл(Неопределено,
			ПараметрыПроведения.НачислениеИзносаОС, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		
	УчетОС.СформироватьДвиженияНачислениеАмортизацииИАмортизационнойПремии(
		ПараметрыНачисленияАмортизации,
		Движения, Отказ);
	
	Если ЭтоМесяцНачисленияИзноса Тогда
		// Начисление износа ОС по ЕНАОФ
		УчетОС.СформироватьДвиженияНачислениеИзноса(
			ПараметрыНачисленияИзноса,
			ПараметрыПроведения.НачислениеИзносаОС,
			Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры // НачислениеАмортизацииОС()

// Выполняет начисление амортизации НМА и списание расходов по НИОКР
//
Процедура НачислениеАмортизацииНМА_НИОКР(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачислениеАмортизацииНМА_НИОКР(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Начисление амортизации ОС
	ПараметрыНачисленияАмортизации = УчетНМА.ПодготовитьТаблицыАмортизацииНМА(Неопределено,
		ПараметрыПроведения.НачислениеАмортизацииНМА, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		
	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
		ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаЗатрат,
		ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаРеквизиты,
		Движения, Отказ);
	
КонецПроцедуры


// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПОГАШЕНИЮ СТОИМОСТИ СПЕЦОДЕЖДЫ И СПЕЦОСНАСТКИ

// Выполняет погашение стоимости спецодежды и спецоснастки
//
Процедура ПогашениеСтоимостиСпецодеждыИСпецоснастки(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыСпецодеждаИСпецоснастка(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетМатериаловВЭксплуатации.СформироватьДвиженияПогашениеСтоимостиСпецодеждыСпецоснасткиРеглОперация(
		ПараметрыПроведения.РеквизитыСпецодеждаИСпецоснастка, Движения, Отказ);    
	
КонецПроцедуры // ПогашениеСтоимостиСпецодеждыИСпецоснастки()


// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПЕРЕОЦЕНКЕ ВАЛЮТНЫХ СРЕДСТВ

// Выполняет переоценку валютных счетов
//
//Процедура ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Заголовок)
Процедура ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Ошибки)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыПроведенияВалюнаяПереоценка(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Переоценка валютных остатков
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ, Ошибки);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
		
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
		
	СоответствиеКолонок = Новый Структура("СуммаПереоценки, СуммаПереоценкиНУ, СуммаПереоценкиПР", "Сумма", "СуммаНУ", "СуммаПР");
	ЗакрытиеМесяца.ИзменитьИменаКолонокВТаблицеЗначений(ТаблицаПереоценка, СоответствиеКолонок);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков,
		"РасчетПереоценкиВалютныхСредств",
		"Организация, Подразделение, Счет, Валюта, Субконто1, Субконто2, Субконто3, КурсПереоценки",
		"СуммаВВалюте, СуммаВРублях, СуммаВРубляхНУ, СуммаВРубляхПР, Сумма, СуммаНУ, СуммаПР");
	
КонецПроцедуры // ПереоценкаВалютныхСредств()


// ПРОЦЕДУРЫ И ФУНКЦИИ ПО КОРРЕКТИРОВКЕ СТОИМОСТИ НОМЕНКЛАТУРЫ

Процедура КорректировкаСтоимостиНоменклатуры(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыУчетЗатрат(СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ДанныеНаборовЗаписей = РасчетСебестоимости.РассчитатьСебестоимостьЗапасов(ПараметрыПроведения.РеквизитыРегламентнойОперации);
	
	Если ДанныеНаборовЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	РасчетСебестоимости.СформироватьДвиженияРасчетСебестоимости(
		ДанныеНаборовЗаписей.Хозрасчетный,
		ПараметрыПроведения.РеквизитыРегламентнойОперации,
		Движения, 
		Отказ);
		
	ЭлементыЗатрат.СформироватьДвиженияСтруктураСтоимостиЗапасов(
		ДанныеНаборовЗаписей,
		Движения,
		ПараметрыПроведения.РеквизитыРегламентнойОперации);
	
КонецПроцедуры // КорректировкаСтоимостиНоменклатуры()


// ПРОЦЕДУРЫ И ФУНКЦИИ ПО СПИСАНИЮ РАСХОДОВ БУДУЩИХ ПЕРИОДОВ

Процедура ЗакрытиеСчета97(СтруктураШапкиДокумента, Отказ)
	
	ПрименяетсяУСНДоходыРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетСписанияРБП(
		СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	// Расчет списания РБП
	ТаблицаРасчетСписанияРБП = ЗакрытиеМесяца.ПодготовитьТаблицуРасчетСписанияРБП(
		ПараметрыПроведения.ТаблицаРеквизитыРБП, Отказ);
		
	// Учет доходов и расходов ИП
	ТаблицаРасчетСписанияРБПИП	= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуРасчетСписанияРБП(
		ПараметрыПроведения.ТаблицаРеквизитыРБП, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияРасчетСписанияРБП(ТаблицаРасчетСписанияРБП,
		ПараметрыПроведения.ТаблицаРеквизитыРБП, Движения, Отказ);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ТаблицаРасчетСписанияРБП,
		ПараметрыПроведения.ТаблицаРеквизитыРБП,
		"РасчетСписанияРБП",
		"Организация, Статья, СчетУчета, СчетСписания, СпособПризнанияРасходов, ДатаНачала, ДатаОкончания, КоличествоМесяцевДнейТекущегоПериода, КоличествоМесяцевДней, СуммаДоговора, ПодразделениеОрганизации",
		"Сумма, НачОстаток, КонОстаток, НачОстатокНУ, КонОстатокНУ, СуммаНУ, НачОстатокПР, КонОстатокПР, СуммаПР, НачОстатокВР, КонОстатокВР, СуммаВР");
		
		
	Если ПрименяетсяУСНДоходыРасходы Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("Ссылка", Ссылка);
		Параметры.Вставить("Объект", ЭтотОбъект);
		Параметры.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		Параметры.Вставить("Дата", СтруктураШапкиДокумента.Дата);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
		
		НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "СписаниеРБП", Параметры, 0);
		
	КонецЕсли;
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияРасчетСписанияРБП(
		ТаблицаРасчетСписанияРБПИП, ПараметрыПроведения.ТаблицаРеквизитыРБП, Движения, Отказ);
	
КонецПроцедуры // ЗакрытиеСчета97()


// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ПРОИЗВОДСТВЕННОЙ ЧАСТИ

Процедура ЗакрытиеСчетов20_23_25_26(СтруктураШапкиДокумента, Отказ, Ошибки)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыУчетЗатрат(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	РезультатРасчета = РасчетСебестоимости.РассчитатьСебестоимостьВыпуска(ПараметрыПроведения.РеквизитыРегламентнойОперации);
	
	Если РезультатРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатРасчета.Свойство("Ошибки") Тогда
		
		Отказ = Истина;
		
		КонтрольЗатрат.ОписатьОшибкиВыявленныеПриРасчетеСебестоимости(Ошибки, РезультатРасчета.Ошибки, Дата, Организация);
		
		Возврат;
		
	КонецЕсли;
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	РасчетСебестоимости.СформироватьДвиженияРасчетСебестоимости(
		РезультатРасчета.Хозрасчетный,
		ПараметрыПроведения.РеквизитыРегламентнойОперации,
		Движения, 
		Отказ);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезультатРасчета.РасчетПорядкаПеределов,
		ПараметрыПроведения.РеквизитыРегламентнойОперации,
		"РасчетПорядкаПеределов");
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезультатРасчета.РасчетСебестоимостиПродукции,
		ПараметрыПроведения.РеквизитыРегламентнойОперации,
		"РасчетСебестоимостиПродукции",
		"Организация, СчетУчета, Подразделение, НоменклатурнаяГруппа, Продукция, ВидОперации",
		"Сумма, СуммаНУ, СуммаПР, СуммаВР, СуммаНЗП, СуммаНЗПНУ, СуммаНЗППР, СуммаНЗПВР, СуммаПлан");
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезультатРасчета.РасчетРаспределенияКосвенныхРасходов,
		ПараметрыПроведения.РеквизитыРегламентнойОперации,
		"РасчетРаспределенияКосвенныхРасходов",
		"Организация, СчетУчета, Подразделение, СтатьяЗатрат, ПодразделениеРаспределения, НоменклатурнаяГруппаРаспределения, БазаРаспределения, СчетРаспределения, ВидОперации, ЕНВД",
		"Сумма, СуммаНУ, СуммаПР, СуммаВР, СуммаБазы, СуммаБазыНУ, СуммаБазыПР, СуммаБазыВР");
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезультатРасчета.РасчетСписанияКосвенныхРасходов,
		ПараметрыПроведения.РеквизитыРегламентнойОперации,
		"РасчетСписанияКосвенныхРасходов",
		"Организация, Подразделение, СчетУчета, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат",
		"СуммаЗатрат, СуммаЗатратНУ, СуммаЗатратПР, СуммаЗатратВР, СуммаННП, СуммаННП, СуммаННПНУ, СуммаННППР, СуммаННПВР, СуммаНеННП, СуммаНеННПНУ, СуммаНеННППР, СуммаНеННПВР");
		
	ЭлементыЗатрат.СформироватьДвиженияСтруктураСтоимостиЗапасов(
		РезультатРасчета,
		Движения,
		ПараметрыПроведения.РеквизитыРегламентнойОперации);
		
КонецПроцедуры

// РАСЧЕТ ДОЛЕЙ СПИСАНИЯ КОСВЕННЫХ РАСХОДОВ

Процедура РасчетДолейСписанияКосвенныхРасходов(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетДолей(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	Параметры   = ПараметрыПроведения.ТаблицаРеквизитыРасчетДолей[0];
	Период      = Параметры.Период;
	Организация = Параметры.Организация;
	
	ДолиСписанияКосвенныхРасходов = Движения.ДолиСписанияКосвенныхРасходов.ВыгрузитьКолонки();
	РасчетНормированияРасходов    = Движения.РасчетНормированияРасходов.ВыгрузитьКолонки();
	
	ЗаполнитьЗначенияСвойств(
		ДолиСписанияКосвенныхРасходов.Добавить(),
		НалоговыйУчет.ДолиСписанияРасходов(Период, Организация, РасчетНормированияРасходов));
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РасчетНормированияРасходов,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетДолей,
		"РасчетНормированияРасходов",
		"Организация, ВидОперации, ВидРегОперации, СуммаБазы",
		"РасходыМесяц, РазницыМесяц, ЗатратыГод, РасходыГод, РазницыГод");
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ДолиСписанияКосвенныхРасходов,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетДолей, 
		"ДолиСписанияКосвенныхРасходов",
		"Организация",
		"ДоляРасходовНаРекламу, ДоляРасходовНаДобровольноеСтрахованиеЖизни, ДоляРасходовНаДобровольноеМедицинскоеСтрахование, ДоляПредставительскихРасходов, ДоляЕНВД, ДоляТранспортныхРасходов, ДоляРасходовНаВозмещениеПроцентовРаботникам, ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев, ДоляРезервовПоСомнительнымДолгамНУ");
	
КонецПроцедуры // РасчетДолейСписанияКосвенныхРасходов()

// ТОРГОВЛЯ

Процедура РасчетТорговойНаценкиПоПроданнымТоварам(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетТорговойНаценки(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаПроводокРасчетНаценки = ЗакрытиеМесяца.ПодготовитьТаблицуРасчетТорговойНаценки(
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНаценки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияРасчетТорговойНаценки(ТаблицаПроводокРасчетНаценки,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНаценки, Движения, Отказ);
	
КонецПроцедуры // РасчетТорговойНаценкиПоПроданнымТоварам()

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО ЗАКРЫТИЮ СЧЕТОВ БУ

Процедура ЗакрытиеСчетов90_91(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыЗакрытиеСчетов90_91(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаСписанияСчетов90 = ЗакрытиеМесяца.ПодготовитьТаблицыЗакрытиеСчета90(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытие90_91,
		СтруктураШапкиДокумента.СписокОрганизаций, Отказ);
	
	ТаблицаСписанияСчетов91 = ЗакрытиеМесяца.ПодготовитьТаблицыЗакрытиеСчета91(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытие90_91,
		СтруктураШапкиДокумента.СписокОрганизаций, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(ТаблицаСписанияСчетов90,
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытие90_91, Движения, Отказ);
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(ТаблицаСписанияСчетов91,
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытие90_91, Движения, Отказ);
	
КонецПроцедуры

Процедура ОкруглениеСуммНДС(СтруктураШапкиДокумента)
	
	Если УчетНДС.ПолучитьПорядокОкругленияНДС(СтруктураШапкиДокумента.Дата) <> 2 
		ИЛИ Месяц(СтруктураШапкиДокумента.Дата) <> Месяц(КонецКвартала(СтруктураШапкиДокумента.Дата)) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыОкругленияНДС(СтруктураШапкиДокумента);
		
	ЗакрытиеМесяца.СформироватьДвиженияПоОкруглениюНДС(
		ПараметрыПроведения.ТаблицаРеквизитыОкруглениеНДС,
		СтруктураШапкиДокумента.СписокОрганизаций, Движения);
	
КонецПроцедуры	
	
Процедура СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыСписаниеУбытков(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизитыСписаниеУбытков[0];
	ТаблицаУбытков = ЗакрытиеМесяца.ПодготовитьТаблицуУбытков(
		Реквизиты.СуммаСписания, ПараметрыПроведения.ТаблицаРеквизитыСписаниеУбытков, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияСписаниеУбытков(ТаблицаУбытков,
		ПараметрыПроведения.ТаблицаРеквизитыСписаниеУбытков, Движения, Отказ);
	
КонецПроцедуры // СписаниеУбытковПрошлыхЛет()

Процедура ЗакрытиеСчета44(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыУчетЗатрат(СтруктураШапкиДокумента, Отказ);
	//Период, Организация, Регистратор
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ДанныеНаборовЗаписей = РасчетСебестоимости.СписатьРасходыНаПродажу(ПараметрыПроведения.РеквизитыРегламентнойОперации);
	
	Если ДанныеНаборовЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	РасчетСебестоимости.СформироватьДвиженияРасчетСебестоимости(
		ДанныеНаборовЗаписей.Хозрасчетный,
		ПараметрыПроведения.РеквизитыРегламентнойОперации,
		Движения, 
		Отказ);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		ДанныеНаборовЗаписей.РасчетСписанияКосвенныхРасходов,
		ПараметрыПроведения.РеквизитыРегламентнойОперации,
		"РасчетСписанияКосвенныхРасходов",
		"Организация, Подразделение, СчетУчета, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат",
		"СуммаЗатрат, СуммаЗатратНУ, СуммаЗатратПР, СуммаЗатратВР, СуммаННП, СуммаННП, СуммаННПНУ, СуммаННППР, СуммаННПВР, СуммаНеННП, СуммаНеННПНУ, СуммаНеННППР, СуммаНеННПВР");
		
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАСЧЕТУ РЕЗЕРВОВ ПО СОМНИТЕЛЬНЫМ ДОЛГАМ

Процедура РасчетРезервовПоСомнительнымДолгам(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРезервыПоСомнительнымДолгам(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	РезервыПоСомнительнымДолгам = Движения.РасчетРезервовПоСомнительнымДолгам.ВыгрузитьКолонки();
	ЗакрытиеМесяца.ПодготовитьТаблицыРачетРезервовПоСомнительнымДолгам(
		РезервыПоСомнительнымДолгам,
		ПараметрыПроведения.ТаблицаДолейКосвенныхРасходов,
		ПараметрыПроведения.ТаблицаРеквизитыРезервыПоСомнительнымДолгам, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РезервыПоСомнительнымДолгам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезервыПоСомнительнымДолгам,
		ПараметрыПроведения.ТаблицаРеквизитыРезервыПоСомнительнымДолгам, 
		"РасчетРезервовПоСомнительнымДолгам",
		"Организация,Контрагент,ДоговорКонтрагента,ДокументРасчетовСКонтрагентом,СуммаЗадолженности,ДатаВозникновенияЗадолженности,СрокЗадолженности",
		"НачисленоРанееБУ,НачисленоРанееНУ,НачисленоБУ,НачисленоНУ,ВосстановленоБУ,ВосстановленоНУ,ПрисоединеноБУ,НачисленоСНачалаГодаНУ");
		
	ЗакрытиеМесяца.СформироватьДвиженияРезервыПоСомнительнымДолгам(РезервыПоСомнительнымДолгам,
		ПараметрыПроведения.ТаблицаРеквизитыРезервыПоСомнительнымДолгам, Движения, Отказ);
		
КонецПроцедуры

// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО УСН

Процедура УчестьОстаткиНЗПприУСН(СтруктураШапкиДокумента, Отказ)
	
	КУДиР = Движения.КнигаУчетаДоходовИРасходов;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачПрошлогоПериода", ДобавитьМесяц(СтруктураШапкиДокумента.НачДата, -1));
	Запрос.УстановитьПараметр("КонПрошлогоПериода", ДобавитьМесяц(СтруктураШапкиДокумента.КонДата, -1));
	Запрос.УстановитьПараметр("НачТекПериода",      СтруктураШапкиДокумента.НачДата);
	Запрос.УстановитьПараметр("КонТекПериода",      СтруктураШапкиДокумента.КонДата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	СУММА(ВложенныйЗапрос.СуммаНУ) КАК СуммаНУ,
	|	ВложенныйЗапрос.ОтражениеВУСН
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		СУММА(ВЫБОР
	|				КОГДА ИнвентаризацияНЗПСостав.Ссылка.Дата МЕЖДУ &НачТекПериода И &КонТекПериода
	|					ТОГДА -ИнвентаризацияНЗПСостав.СуммаНУ
	|				ИНАЧЕ ИнвентаризацияНЗПСостав.СуммаНУ
	|			КОНЕЦ) КАК СуммаНУ,
	|		ИнвентаризацияНЗПСостав.ОтражениеВУСН КАК ОтражениеВУСН
	|	ИЗ
	|		Документ.ИнвентаризацияНЗП.Состав КАК ИнвентаризацияНЗПСостав
	|	ГДЕ
	|		ИнвентаризацияНЗПСостав.Ссылка.Дата МЕЖДУ &НачПрошлогоПериода И &КонТекПериода
	|		И ИнвентаризацияНЗПСостав.Ссылка.Организация = &Организация
	|		И ИнвентаризацияНЗПСостав.Ссылка.Проведен
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИнвентаризацияНЗПСостав.НоменклатурнаяГруппа,
	|		ИнвентаризацияНЗПСостав.ОтражениеВУСН
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВводНачальныхОстатковБухСправка.Субконто2,
	|		СУММА(ВЫБОР
	|				КОГДА ВводНачальныхОстатковБухСправка.Ссылка.Дата МЕЖДУ &НачТекПериода И &КонТекПериода
	|					ТОГДА -ВводНачальныхОстатковБухСправка.Сумма
	|				ИНАЧЕ ВводНачальныхОстатковБухСправка.Сумма
	|			КОНЕЦ),
	|		ВводНачальныхОстатковБухСправка.ОтражениеВУСН
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.БухСправка КАК ВводНачальныхОстатковБухСправка
	|	ГДЕ
	|		ВводНачальныхОстатковБухСправка.Ссылка.Дата МЕЖДУ &НачПрошлогоПериода И &КонТекПериода
	|		И ВводНачальныхОстатковБухСправка.Ссылка.Организация = &Организация
	|		И ВводНачальныхОстатковБухСправка.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВводНачальныхОстатковБухСправка.Субконто2,
	|		ВводНачальныхОстатковБухСправка.ОтражениеВУСН) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.ОтражениеВУСН";
	
	ТаблицаНЗП = Запрос.Выполнить().Выгрузить();
	Для Каждого НЗП Из ТаблицаНЗП Цикл
		
		Если НЗП.СуммаНУ = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЗП.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
			
			Если НЗП.СуммаНУ > 0 Тогда
				Содержание =
					"Признаны материальные расходы, ранее отраженные в составе незавершенного производства по номенклатурной группе """
					+ НЗП.НоменклатурнаяГруппа + """.";
			Иначе
				Содержание =
					"Сумма материальных расходов уменьшена на остаток незавершенного производства по номенклатурной группе """
					+ НЗП.НоменклатурнаяГруппа + """.";
			КонецЕсли;
			
			СтрокаКниги = КУДиР.Добавить();
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
			СтрокаКниги.ТабличнаяЧасть  = "";
			СтрокаКниги.Содержание      = Содержание;
			СтрокаКниги.Графа7          = НЗП.СуммаНУ;
			СтрокаКниги.НДС             = 0;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
			
		ИначеЕсли НЗП.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
			
			Если НЗП.СуммаНУ > 0 Тогда
				Содержание = "Списаны остатки НЗП";
			Иначе
				Содержание = "Расходы отражены как НЗП";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КУДиР.Записать(Ложь);
	
КонецПроцедуры

Процедура ВключитьВРасходыОС(СтруктураШапкиДокумента, ОС, Строка, СуммаОплаты, ДатаВводаВэксплуатацию, Параметры = Неопределено)
	
	КУДиР     = Движения.КнигаУчетаДоходовИРасходов;
	КУДиР_ОС  = Движения.КнигаУчетаДоходовИРасходовОС;
	ОбщПервоначальнаяСтоимостьУСН = Строка.ПервоначальнаяСтоимостьУСН;
	ОбщСуммаНачисленнойАмортизации = Строка.СуммаНачисленнойАмортизации;
	
	ПервоначальнаяСтоимостьУСН = Строка.СуммаОплатыОборот;
	СуммаНачисленнойАмортизации = ?(НЕ ОбщПервоначальнаяСтоимостьУСН = 0,
		ОбщСуммаНачисленнойАмортизации * ПервоначальнаяСтоимостьУСН / ОбщПервоначальнаяСтоимостьУСН, 0);
	ОстаточнаяСтоимость = Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
	
	СтрокаКниги = КУДиР_ОС.Добавить();
	СтрокаКниги.ОсновноеСредство = ОС;
	СтрокаКниги.Период = СтруктураШапкиДокумента.КонДата;
	СтрокаКниги.Организация = СтруктураШапкиДокумента.Организация;
	СтрокаКниги.ДатаОплаты = Строка.ДатаОплаты;
	СтрокаКниги.Графа3_ДатаВводаВЭксплуатацию = ДатаВводаВэксплуатацию;
	СтрокаКниги.Графа5_ПервоначальнаяСтоимость = Строка.СуммаОплатыОборот;
	
	ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	Если ОстатокРасходов < 0.01 Тогда
		СуммаОплаты = СуммаОплаты + ОстатокРасходов;
		ОстатокРасходов = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.ДокументМодернизации) Тогда
		СтрокаКниги.ДокументМодернизации = Строка.ДокументМодернизации
	КонецЕсли;
	
	Если НЕ (Параметры = Неопределено) Тогда
		
		Если Параметры.ПереходныйПериод Тогда
			СтрокаКниги.Графа6_ОстаточнаяСтоимость = ОстаточнаяСтоимость;
			СтрокаКниги.Графа7_СрокПолезногоИспользования   = Цел(Строка.СрокПолезногоИспользования/12)
				+ ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
			СтрокаКниги.Графа8_КолКварталовВОтчетномПериоде = Параметры.КоличествоКварталовВОтчетномПериоде;
			СтрокаКниги.Графа14_РасходыПрошлыхПериодов = Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод);
			СтрокаКниги.Графа15_ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
		КонецЕсли;
		
		СтрокаКниги.Графа9_КолКварталовВНалПериоде  = Параметры.КоличествоКварталовВНалоговомПериоде;
		СтрокаКниги.Графа10_ДоляРасходовЗаНалПериод = Параметры.ПроцентПринятияРасходов;
		СтрокаКниги.Графа11_ДоляРасходовЗаКвартал   = Параметры.ПроцентПринятияРасходовОтч;
	Иначе
		СтрокаКниги.Графа7_СрокПолезногоИспользования = Цел(Строка.СрокПолезногоИспользования/12)
			+ ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
		СтрокаКниги.Графа14_РасходыПрошлыхПериодов = Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод + СуммаОплаты);
		
	КонецЕсли;
	
	СтрокаКниги.Графа12_СуммаРасходовЗаОтчетнПериод = Строка.СуммаРасходовЗаГод + СуммаОплаты;
	СтрокаКниги.Графа13_СуммаРасходовЗаКвартал = Строка.СуммаРасходовЗаКвартал + СуммаОплаты;
	СтрокаКниги.Графа15_ОстатокРасходов = ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	
	Если СуммаОплаты > 0 Тогда
		
		СтрокаКниги  = КУДиР.Добавить();
		Если ЗначениеЗаполнено(Строка.ДокументМодернизации) Тогда
			СтрокаСодержания = "Признание расходов: основное средство """
				+ Строка(ОС) + """, " + Строка.ДокументМодернизации.СобытиеОС
				+ " от " + Формат(Строка.ДокументМодернизации.Дата, "ДФ=дд.ММ.гггг")
				+ " (дата оплаты: "+Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг")+").";
		Иначе
			СтрокаСодержания = "Признание расходов на приобретение основного средства """
				+ Строка(ОС) + """ (дата оплаты: "
				+ Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг")+").";
		КонецЕсли;
		
		СтрокаКниги.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.Период      = СтруктураШапкиДокумента.КонДата;
		СтрокаКниги.Содержание  = СтрокаСодержания;
		СтрокаКниги.Графа7      = СуммаОплаты;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
	КонецЕсли;
	
	КУДиР.Записывать    = Истина;
	КУДиР_ОС.Записывать = Истина;
	
КонецПроцедуры

Процедура ВключитьВРасходыНМА(СтруктураШапкиДокумента, НМА, Строка, СуммаОплаты, ДатаПринятияКУчету, Параметры = Неопределено)
	
	КУДиР		= Движения.КнигаУчетаДоходовИРасходов;
	КУДиР_НМА	= Движения.КнигаУчетаДоходовИРасходовНМА;
	
	ОбщПервоначальнаяСтоимостьУСН	= Строка.ПервоначальнаяСтоимостьУСН;
	ОбщСуммаНачисленнойАмортизации	= Строка.СуммаНачисленнойАмортизации;
	
	ПервоначальнаяСтоимостьУСН	= Строка.СуммаОплатыОборот;
	
	СуммаНачисленнойАмортизации	= ?(НЕ ОбщПервоначальнаяСтоимостьУСН = 0,
		ОбщСуммаНачисленнойАмортизации * ПервоначальнаяСтоимостьУСН / ОбщПервоначальнаяСтоимостьУСН, 0);
		
	ОстаточнаяСтоимость			= Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
	
	СтрокаКниги	= КУДиР_НМА.Добавить();
	
	СтрокаКниги.НематериальныйАктив	= НМА;
	СтрокаКниги.Период				= СтруктураШапкиДокумента.КонДата;
	СтрокаКниги.Организация			= СтруктураШапкиДокумента.Организация;
	СтрокаКниги.ДатаОплаты			= Строка.ДатаОплаты;
	СтрокаКниги.Графа3_ДатаПринятияКУчету		= ДатаПринятияКУчету;
	СтрокаКниги.Графа5_ПервоначальнаяСтоимость	= Строка.СуммаОплатыОборот;
	
	ОстатокРасходов	= ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
	
	Если ОстатокРасходов < 0.01 Тогда
		СуммаОплаты		= СуммаОплаты + ОстатокРасходов;
		ОстатокРасходов	= 0;
	КонецЕсли;
	
	Если НЕ (Параметры = Неопределено) Тогда
		
		Если Параметры.ПереходныйПериод Тогда
			СтрокаКниги.Графа6_ОстаточнаяСтоимость			= ОстаточнаяСтоимость;
			СтрокаКниги.Графа7_СрокПолезногоИспользования	= Цел(Строка.СрокПолезногоИспользования/12)
															+ ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
			СтрокаКниги.Графа8_КолКварталовВОтчетномПериоде	= Параметры.КоличествоКварталовВОтчетномПериоде;
			СтрокаКниги.Графа14_РасходыПрошлыхПериодов		= Строка.СуммаРасходовВсего - Строка.СуммаРасходовЗаГод;
			СтрокаКниги.Графа15_ОстатокРасходов				= ОстаточнаяСтоимость - (Строка.СуммаРасходовВсего + СуммаОплаты);
		КонецЕсли;
		
		СтрокаКниги.Графа9_КолКварталовВНалПериоде	= Параметры.КоличествоКварталовВНалоговомПериоде;
		СтрокаКниги.Графа10_ДоляРасходовЗаНалПериод	= Параметры.ПроцентПринятияРасходов;
		СтрокаКниги.Графа11_ДоляРасходовЗаКвартал	= Параметры.ПроцентПринятияРасходовОтч;
		
	Иначе
		
		СтрокаКниги.Графа7_СрокПолезногоИспользования	= Цел(Строка.СрокПолезногоИспользования/12)
														+ ?(Строка.СрокПолезногоИспользования%12 <> 0, 1, 0);
		СтрокаКниги.Графа14_РасходыПрошлыхПериодов		= Строка.СуммаРасходовВсего - (Строка.СуммаРасходовЗаГод + СуммаОплаты);
		
	КонецЕсли;
	
	СтрокаКниги.Графа12_СуммаРасходовЗаОтчетнПериод	= Строка.СуммаРасходовЗаГод + СуммаОплаты;
	СтрокаКниги.Графа13_СуммаРасходовЗаКвартал		= Строка.СуммаРасходовЗаКвартал + СуммаОплаты;
	СтрокаКниги.Графа15_ОстатокРасходов				= ОстаточнаяСтоимость - Строка.СуммаРасходовВсего + СуммаОплаты;
	
	Если СуммаОплаты > 0 Тогда
		
		Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Признание расходов на приобретение нематериального актива ""%1"" (дата оплаты: %2).'"),
			Строка(НМА), Формат(Строка.ДатаОплаты, "ДЛФ=D"));
		
		СтрокаКниги	= КУДиР.Добавить();
		
		СтрокаКниги.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.Период      = СтруктураШапкиДокумента.КонДата;
		СтрокаКниги.Содержание  = Содержание;
		СтрокаКниги.Графа7      = СуммаОплаты;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
	КонецЕсли;
	
	КУДиР.Записывать     = Истина;
	КУДиР_НМА.Записывать = Истина;
	
КонецПроцедуры

Процедура ВключитьВРасходыПрочее(СтруктураШапкиДокумента, Объект, Строка, СуммаОплаты, Параметры = Неопределено)
	
	КУДиР = Движения.КнигаУчетаДоходовИРасходов;
	
	Если СуммаОплаты > 0 Тогда
		
		СтрокаКниги  = КУДиР.Добавить();
		
		СтрокаКниги.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.Период      = СтруктураШапкиДокумента.КонДата;
		СтрокаКниги.Содержание  =
			"Признание расходов на """ + Строка(Объект) + """ (дата оплаты: "
			+ Формат(Строка.ДатаОплаты, "ДФ=дд.ММ.гггг") + ").";
		СтрокаКниги.Графа7      = СуммаОплаты;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
	КонецЕсли;
	
	КУДиР.Записывать = Истина;
	
КонецПроцедуры

Процедура ПризнаниеРасходовНаПриобретениеОСУСН(СтруктураШапкиДокумента, Отказ)
	
	КУДиР = Движения.КнигаУчетаДоходовИРасходов;
	ДатаПереходаНаУСН = УчетнаяПолитика.ДатаПереходаНаУСН(
		СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаПереходаНаУСН", ДатаПереходаНаУСН);
	Запрос.УстановитьПараметр("НачПериода",        СтруктураШапкиДокумента.НачГода);
	Запрос.УстановитьПараметр("НачКвартала",       НачалоКвартала(Дата));
	Запрос.УстановитьПараметр("КонДата",           СтруктураШапкиДокумента.КонДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ОплатыОСДляУСНОбороты.ДокументМодернизации,
	|	ОплатыОСДляУСНОбороты.ДатаОплаты КАК ДатаОплаты,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОСОбороты.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовОСОбороты.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовВсего,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОСОборотыГод.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовОСОборотыГод.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовОСОборотыКв.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовОСОборотыКв.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаКвартал,
	|	СУММА(ВЫБОР
	|			КОГДА ОплатыОСДляУСНОбороты.СуммаОплатыОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ОплатыОСДляУСНОбороты.СуммаОплатыОборот
	|		КОНЕЦ) КАК СуммаОплатыОборот,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|ИЗ
	|	РегистрНакопления.ОплатыОСДляУСН.Обороты(, &КонДата, , Организация = &Организация) КАК ОплатыОСДляУСНОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(&КонДата, ) КАК ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних
	|		ПО ОплатыОСДляУСНОбороты.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовОС.Обороты(&ДатаПереходаНаУСН, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОСОбороты
	|		ПО КнигаУчетаДоходовИРасходовОСОбороты.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство
	|			И КнигаУчетаДоходовИРасходовОСОбороты.ДатаОплаты = ОплатыОСДляУСНОбороты.ДатаОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовОС.Обороты(&НачПериода, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОСОборотыГод
	|		ПО КнигаУчетаДоходовИРасходовОСОборотыГод.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство
	|			И КнигаУчетаДоходовИРасходовОСОборотыГод.ДатаОплаты = ОплатыОСДляУСНОбороты.ДатаОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовОС.Обороты(&НачКвартала, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОСОборотыКв
	|		ПО КнигаУчетаДоходовИРасходовОСОборотыКв.ОсновноеСредство = ОплатыОСДляУСНОбороты.ОсновноеСредство
	|			И КнигаУчетаДоходовИРасходовОСОборотыКв.ДатаОплаты = ОплатыОСДляУСНОбороты.ДатаОплаты
	|ГДЕ
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ОсновноеСредство,
	|	ОплатыОСДляУСНОбороты.ДокументМодернизации,
	|	ОплатыОСДляУСНОбороты.ДатаОплаты,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ДатаОплаты";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТекОС = "";
	ТекМодернизацияОС = "";
	Для Каждого СтрокаРезультата ИЗ ТаблицаРезультата Цикл
		Если (СтрокаРезультата.ОсновноеСредство = ТекОС) И (СтрокаРезультата.ДокументМодернизации = ТекМодернизацияОС) Тогда
			//
		Иначе
			ТекОС = СтрокаРезультата.ОсновноеСредство;
			ТекМодернизацияОС = СтрокаРезультата.ДокументМодернизации;
			Если ЗначениеЗаполнено(СтрокаРезультата.ДокументМодернизации) Тогда //Модернизация
				
				ПервоначальнаяСтоимостьУСН  = 0;
				СуммаНачисленнойАмортизации = 0;
				СрокПолезногоИспользования  = 12;
				ДатаПриобретения = СтрокаРезультата.ДокументМодернизации.Дата;
				ДатаВвода = ДатаПриобретения;
				
				СтрокаРезультата.ПервоначальнаяСтоимостьУСН  = ПервоначальнаяСтоимостьУСН;
				СтрокаРезультата.СуммаНачисленнойАмортизации = СуммаНачисленнойАмортизации;
				СтрокаРезультата.СрокПолезногоИспользования  = СрокПолезногоИспользования;
				СтрокаРезультата.ДатаПриобретения = ДатаПриобретения;
				
				Если (СтрокаРезультата.ДатаОплаты < Дата("20070101")) ИЛИ (ДатаВвода < Дата("20070101")) Тогда
					ТекОС = "";
					Продолжить;
				КонецЕсли;
				
				Если Макс(СтрокаРезультата.ДатаОплаты, ДатаВвода) < Дата("20080101") Тогда
					ТекОС = "";
					Продолжить;
				КонецЕсли;
				
				Если ДатаПриобретения < ДатаПереходаНаУСН Тогда
					ТекОС = "";
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Ссылка",      СтрокаРезультата.ДокументМодернизации);
				Запрос.УстановитьПараметр("ОС",          СтрокаРезультата.ОсновноеСредство);
				Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СУММА(СобытияОСОрганизаций.СуммаЗатратБУ) КАК СуммаЗатратБУ,
				|	СУММА(СобытияОСОрганизаций.СуммаЗатратНУ) КАК СуммаЗатратНУ,
				|	СУММА(СобытияОСОрганизаций.СуммаЗатратУСН) КАК СуммаЗатратУСН,
				|	СобытияОСОрганизаций.Событие
				|ИЗ
				|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
				|ГДЕ
				|	СобытияОСОрганизаций.Регистратор = &Ссылка
				|	И СобытияОСОрганизаций.ОсновноеСредство = &ОС
				|	И СобытияОСОрганизаций.Организация = &Организация
				|
				|СГРУППИРОВАТЬ ПО
				|	СобытияОСОрганизаций.Событие";
				
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					ПервоначальнаяСтоимостьУСН = Результат.СуммаЗатратУСН;
				КонецЕсли;
				
			Иначе //ОС
				
				ПервоначальнаяСтоимостьУСН  = СтрокаРезультата.ПервоначальнаяСтоимостьУСН;
				СуммаНачисленнойАмортизации = СтрокаРезультата.СуммаНачисленнойАмортизации;
				СрокПолезногоИспользования  = СтрокаРезультата.СрокПолезногоИспользования;
				ДатаПриобретения = СтрокаРезультата.ДатаПриобретения;
				
				ДокРегистратор   = Неопределено;
				ДатаВвода        = Неопределено;
				УчетОС.ПолучитьДокументБухСостоянияОС(ТекОС,
					СтруктураШапкиДокумента.Организация, Перечисления.СостоянияОС.ПринятоКУчету, ДокРегистратор, ДатаВвода);
				
			КонецЕсли;
			
			ДокументСнятоСУчетаБУ = Неопределено;
			ДатаВыбытия           = Неопределено;
			УчетОС.ПолучитьДокументБухСостоянияОС(ТекОС,
				СтруктураШапкиДокумента.Организация, Перечисления.СостоянияОС.СнятоСУчета,  ДокументСнятоСУчетаБУ, ДатаВыбытия);
			ДатаВыбытия = ?(ДатаВыбытия > КонецДня(СтруктураШапкиДокумента.Дата), "", ДатаВыбытия);
			
			Если НЕ ЗначениеЗаполнено(ДатаВвода) Тогда
				ТекОС = "";
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПервоначальнаяСтоимостьУСН) Тогда
				ТекОС = "";
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаВыбытия) И (НЕ Год(ДатаВыбытия) = Год(СтруктураШапкиДокумента.Дата)) Тогда
				//Основное средство выбыло в предыдущие годы
				ТекОС = "";
				Продолжить;
			КонецЕсли;
			
			ОстаточнаяСтоимость = Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
			ОплаченнаяСтоимость = 0;
			ОплаченнаяОстаточнаяСтоимость = 0;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.Дата >= Дата("20060101")
			И НЕ ЗначениеЗаполнено(СтрокаРезультата.ДокументМодернизации) Тогда  
			
			Если СтрокаРезультата.ПорядокВключенияСтоимостиВСоставРасходовУСН =
				Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставРасходов Тогда
				
				Если ДатаВвода >= НачалоКвартала(Дата) Тогда
					СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
					ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						Превышение  = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты = СуммаОплаты - Превышение;
						ШаблонСообщения = "Сумма зарегистрированных оплат ОС ""%1"" превышает его первоначальную стоимость.
							|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ТекОС));
						
						ДобавитьПростоеОписаниеОшибки(ТекстСообщения,, Отказ);
						
					КонецЕсли;
					
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты);
					КонецЕсли;
				Иначе
					СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
					ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
					Если СтрокаРезультата.ДатаОплаты < НачалоКвартала(Дата) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						Превышение  = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты = СуммаОплаты - Превышение;
						ШаблонСообщения = "Сумма зарегистрированных оплат ОС ""%1"" превышает его первоначальную стоимость.
							|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ТекОС));
						
						ДобавитьПростоеОписаниеОшибки(ТекстСообщения,, Отказ);
						
					КонецЕсли;
					
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты);
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли СтрокаРезультата.ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов Тогда
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДатаПриобретения >= ДатаПереходаНаУСН Тогда
			
			Если Дата >= Дата("20060101") Тогда
				НачДатаОплат = НачалоГода(Дата);
			Иначе
				НачДатаОплат = НачалоКвартала(Дата);
			КонецЕсли;
			
			Если ДатаВвода >= НачДатаОплат Тогда
				СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
				ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					Превышение  = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты = СуммаОплаты - Превышение;
					ШаблонСообщения = "Сумма зарегистрированных оплат ОС ""%1"" превышает его первоначальную стоимость.
						|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ТекОС));
					
					ДобавитьПростоеОписаниеОшибки(ТекстСообщения,, Отказ);
					
				КонецЕсли;
				
				Параметры = Неопределено;
				Если Дата >= Дата("20060101") Тогда
					СуммаОплаты = РаспределитьОплатуПоКварталам(СуммаОплаты, СтрокаРезультата.ДатаОплаты, ДатаВвода, Параметры);
					Параметры.Вставить("ПереходныйПериод", Ложь);
				КонецЕсли;
				
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыОС(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
			Иначе
				СуммаОплаты = СтрокаРезультата.СуммаОплатыОборот;
				ОплаченнаяСтоимость = ОплаченнаяСтоимость + СуммаОплаты;
				Если СтрокаРезультата.ДатаОплаты < НачДатаОплат Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					Превышение  = ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты = СуммаОплаты - Превышение;
					ШаблонСообщения = "Сумма зарегистрированных оплат ОС ""%1"" превышает его первоначальную стоимость.
						|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ТекОС));
					
					ДобавитьПростоеОписаниеОшибки(ТекстСообщения,, Отказ);

				КонецЕсли;
				
				Параметры = Неопределено;
				Если Дата >= Дата("20060101") Тогда
					СуммаОплаты = РаспределитьОплатуПоКварталам(СуммаОплаты, СтрокаРезультата.ДатаОплаты, ДатаВвода, Параметры);
					Параметры.Вставить("ПереходныйПериод", Ложь);
				КонецЕсли;
				
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыОС(СтруктураШапкиДокумента, ТекОС, СтрокаРезультата, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ОплаченнаяСтоимость = ОплаченнаяСтоимость + СтрокаРезультата.СуммаОплатыОборот;
			ЧастьОстаточнойСтоимости = ОстаточнаяСтоимость *(ОплаченнаяСтоимость / ПервоначальнаяСтоимостьУСН)
									 - ОплаченнаяОстаточнаяСтоимость;
			ОплаченнаяОстаточнаяСтоимость = ОплаченнаяОстаточнаяСтоимость + ЧастьОстаточнойСтоимости;
			
			Если ОплаченнаяОстаточнаяСтоимость > ОстаточнаяСтоимость Тогда
				Превышение = ОплаченнаяОстаточнаяСтоимость - ОстаточнаяСтоимость;
				ОплаченнаяОстаточнаяСтоимость = ОплаченнаяОстаточнаяСтоимость - превышение;
				ЧастьОстаточнойСтоимости = ЧастьОстаточнойСтоимости - Превышение;
				ШаблонСообщения = "Сумма зарегистрированных оплат ОС ""%1"" превышает его первоначальную стоимость.
					|Проверьте суммы оплаты в документах ""Принятие к учету ОС"" и ""Регистрация оплаты ОС и НМА для УСН и ИП""";
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ТекОС));
				
				ДобавитьПростоеОписаниеОшибки(ТекстСообщения,, Отказ);

			КонецЕсли;
			
			Если ЧастьОстаточнойСтоимости > 0 Тогда
				ФормированиеРасходов(СтруктураШапкиДокумента, ТекОС, ЧастьОстаточнойСтоимости, СтрокаРезультата, ДатаВвода);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПризнаниеРасходовНаПриобретениеНМАУСН(СтруктураШапкиДокумента, Отказ)
	
	КУДиР	= Движения.КнигаУчетаДоходовИРасходов;
	
	ДатаПереходаНаУСН	= УчетнаяПолитика.ДатаПереходаНаУСН(
		СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
		
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		Возврат;
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("Организация",		СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаПереходаНаУСН",	ДатаПереходаНаУСН);
	Запрос.УстановитьПараметр("НачПериода",			СтруктураШапкиДокумента.НачГода);
	Запрос.УстановитьПараметр("НачКвартала",		НачалоКвартала(Дата));
	Запрос.УстановитьПараметр("КонДата",			СтруктураШапкиДокумента.КонДата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив) КАК НематериальныйАктивПредставление,
	|	ОплатыНМАДляУСНОбороты.ДатаОплаты КАК ДатаОплаты,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовНМАОбороты.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовНМАОбороты.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовВсего,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовНМАОборотыГод.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовНМАОборотыГод.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА КнигаУчетаДоходовИРасходовНМАОборотыКв.Графа13_СуммаРасходовЗаКварталОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ КнигаУчетаДоходовИРасходовНМАОборотыКв.Графа13_СуммаРасходовЗаКварталОборот
	|		КОНЕЦ) КАК СуммаРасходовЗаКвартал,
	|	СУММА(ВЫБОР
	|			КОГДА ОплатыНМАДляУСНОбороты.СуммаОплатыОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ОплатыНМАДляУСНОбороты.СуммаОплатыОборот
	|		КОНЕЦ) КАК СуммаОплатыОборот,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|ИЗ
	|	РегистрНакопления.ОплатыНМАДляУСН.Обороты(, &КонДата, , Организация = &Организация) КАК ОплатыНМАДляУСНОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчетУСН.СрезПоследних(&КонДата, ) КАК ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних
	|		ПО ОплатыНМАДляУСНОбороты.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовНМА.Обороты(&ДатаПереходаНаУСН, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовНМАОбороты
	|		ПО (КнигаУчетаДоходовИРасходовНМАОбороты.НематериальныйАктив = ОплатыНМАДляУСНОбороты.НематериальныйАктив)
	|			И (КнигаУчетаДоходовИРасходовНМАОбороты.ДатаОплаты = ОплатыНМАДляУСНОбороты.ДатаОплаты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовНМА.Обороты(&НачПериода, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовНМАОборотыГод
	|		ПО (КнигаУчетаДоходовИРасходовНМАОборотыГод.НематериальныйАктив = ОплатыНМАДляУСНОбороты.НематериальныйАктив)
	|			И (КнигаУчетаДоходовИРасходовНМАОборотыГод.ДатаОплаты = ОплатыНМАДляУСНОбороты.ДатаОплаты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходовНМА.Обороты(&НачКвартала, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовНМАОборотыКв
	|		ПО (КнигаУчетаДоходовИРасходовНМАОборотыКв.НематериальныйАктив = ОплатыНМАДляУСНОбороты.НематериальныйАктив)
	|			И (КнигаУчетаДоходовИРасходовНМАОборотыКв.ДатаОплаты = ОплатыНМАДляУСНОбороты.ДатаОплаты)
	|ГДЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.НематериальныйАктив,
	|	ОплатыНМАДляУСНОбороты.ДатаОплаты,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ДатаПриобретения,
	|	ПервоначальныеСведенияНМАНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	НематериальныйАктив,
	|	ДатаОплаты";
	
	Результат 	= Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонПревышениеОплаты	= НСтр("ru = 'Сумма зарегистрированных оплат НМА ""%1"" превышает его первоначальную стоимость.
		|Проверьте суммы оплаты в документах ""Принятие к учету НМА"" и ""Регистрация оплаты ОС и НМА для УСН и ИП"".'");
	
	ТекНМА	= Неопределено;
	
	Выборка	= Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.НематериальныйАктив = ТекНМА Тогда
			
			ТекНМА	= Выборка.НематериальныйАктив;
			
			ПервоначальнаяСтоимостьУСН	= Выборка.ПервоначальнаяСтоимостьУСН;
			СуммаНачисленнойАмортизации	= Выборка.СуммаНачисленнойАмортизации;
			СрокПолезногоИспользования	= Выборка.СрокПолезногоИспользования;
			ДатаПриобретения			= Выборка.ДатаПриобретения;
			
			ДокРегистратор	= Неопределено;
			ДатаВвода		= Неопределено;
			
			УчетНМА.ПолучитьДокументБухСостоянияНМА(ТекНМА, СтруктураШапкиДокумента.Организация,
				Перечисления.ВидыСостоянийНМА.ПринятКУчету, ДокРегистратор, ДатаВвода);
			
			Если НЕ ЗначениеЗаполнено(ДатаВвода) Тогда
				ТекНМА	= Неопределено;
				Продолжить;
			КонецЕсли;
			
			ДокументСнятоСУчетаБУ	= Неопределено;
			ДатаВыбытия				= Неопределено;
			
			УчетНМА.ПолучитьДокументБухСостоянияНМА(ТекНМА, СтруктураШапкиДокумента.Организация,
				Перечисления.ВидыСостоянийНМА.Списан, ДокументСнятоСУчетаБУ, ДатаВыбытия);
			
			ДатаВыбытия	= ?(ДатаВыбытия > КонецДня(СтруктураШапкиДокумента.Дата), "", ДатаВыбытия);
			
			Если ЗначениеЗаполнено(ДатаВыбытия) И (НЕ Год(ДатаВыбытия) = Год(СтруктураШапкиДокумента.Дата)) Тогда
				//НМА выбыло в предыдущие годы
				ТекНМА	= Неопределено;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПервоначальнаяСтоимостьУСН) Тогда
				ТекНМА	= Неопределено;
				Продолжить;
			КонецЕсли;
			
			ОстаточнаяСтоимость				= Макс(0, ПервоначальнаяСтоимостьУСН - СуммаНачисленнойАмортизации);
			ОплаченнаяСтоимость				= 0;
			ОплаченнаяОстаточнаяСтоимость	= 0;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.Дата >= Дата("20060101") Тогда  
			
			Если Выборка.ПорядокВключенияСтоимостиВСоставРасходовУСН =
				Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставРасходов Тогда
				
				Если ДатаВвода >= НачалоКвартала(Дата) Тогда
					
					СуммаОплаты	= Выборка.СуммаОплатыОборот;
					ОплаченнаяСтоимость	= ОплаченнаяСтоимость + СуммаОплаты;
					
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						
						Превышение	= ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты	= СуммаОплаты - Превышение;
						
						ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонПревышениеОплаты, Выборка.НематериальныйАктивПредставление);
							
						ДобавитьПростоеОписаниеОшибки(ТекстСообщения, Выборка.НематериальныйАктив, Отказ);

					КонецЕсли;
					
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекНМА, Выборка, СуммаОплаты);
					КонецЕсли;
					
				Иначе
					
					СуммаОплаты			= Выборка.СуммаОплатыОборот;
					ОплаченнаяСтоимость	= ОплаченнаяСтоимость + СуммаОплаты;
					
					Если Выборка.ДатаОплаты < НачалоКвартала(Дата) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
						
						Превышение	= ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
						СуммаОплаты	= СуммаОплаты - Превышение;
						
						ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонПревышениеОплаты, Выборка.НематериальныйАктивПредставление);
							
						ДобавитьПростоеОписаниеОшибки(ТекстСообщения, Выборка.НематериальныйАктив, Отказ);
						
					КонецЕсли;
					
					Если СуммаОплаты > 0 Тогда
						ВключитьВРасходыПрочее(СтруктураШапкиДокумента, ТекНМА, Выборка, СуммаОплаты);
					КонецЕсли;
					
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли Выборка.ПорядокВключенияСтоимостиВСоставРасходовУСН =
				Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДатаПриобретения >= ДатаПереходаНаУСН Тогда
			
			Если Дата >= Дата("20060101") Тогда
				НачДатаОплат	= НачалоГода(Дата);
			Иначе
				НачДатаОплат	= НачалоКвартала(Дата);
			КонецЕсли;
			
			Если ДатаВвода >= НачДатаОплат Тогда
				
				СуммаОплаты			= Выборка.СуммаОплатыОборот;
				ОплаченнаяСтоимость	= ОплаченнаяСтоимость + СуммаОплаты;
				
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					
					Превышение	= ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты	= СуммаОплаты - Превышение;
					
					ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонПревышениеОплаты, Выборка.НематериальныйАктивПредставление);
						
					ДобавитьПростоеОписаниеОшибки(ТекстСообщения, Выборка.НематериальныйАктив, Отказ);
					
				КонецЕсли;
				
				Параметры	= Неопределено;
				
				Если Дата >= Дата("20060101") Тогда
					СуммаОплаты	= РаспределитьОплатуПоКварталам(СуммаОплаты, Выборка.ДатаОплаты, ДатаВвода, Параметры);
					Параметры.Вставить("ПереходныйПериод", Ложь);
				КонецЕсли;
				
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыНМА(СтруктураШапкиДокумента, ТекНМА, Выборка, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
				
			Иначе
				СуммаОплаты	= Выборка.СуммаОплатыОборот;
				ОплаченнаяСтоимость	= ОплаченнаяСтоимость + СуммаОплаты;
				
				Если Выборка.ДатаОплаты < НачДатаОплат Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОплаченнаяСтоимость > ПервоначальнаяСтоимостьУСН Тогда
					
					Превышение	= ОплаченнаяСтоимость - ПервоначальнаяСтоимостьУСН;
					СуммаОплаты	= СуммаОплаты - Превышение;
					
					ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонПревышениеОплаты, Выборка.НематериальныйАктивПредставление);
						
					ДобавитьПростоеОписаниеОшибки(ТекстСообщения, Выборка.НематериальныйАктив, Отказ);
					
				КонецЕсли;
				
				Параметры	= Неопределено;
				Если Дата >= Дата("20060101") Тогда
					СуммаОплаты	= РаспределитьОплатуПоКварталам(СуммаОплаты, Выборка.ДатаОплаты, ДатаВвода, Параметры);
					Параметры.Вставить("ПереходныйПериод", Ложь);
				КонецЕсли;
				
				Если СуммаОплаты > 0 Тогда
					ВключитьВРасходыНМА(СтруктураШапкиДокумента, Выборка.НематериальныйАктив, Выборка, СуммаОплаты, ДатаВвода, Параметры);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			
			ОплаченнаяСтоимость				= ОплаченнаяСтоимость + Выборка.СуммаОплатыОборот;
			ЧастьОстаточнойСтоимости		= ОстаточнаяСтоимость*(ОплаченнаяСтоимость/ПервоначальнаяСтоимостьУСН) - ОплаченнаяОстаточнаяСтоимость;
			ОплаченнаяОстаточнаяСтоимость	= ОплаченнаяОстаточнаяСтоимость + ЧастьОстаточнойСтоимости;
			
			Если ОплаченнаяОстаточнаяСтоимость > ОстаточнаяСтоимость Тогда
				
				Превышение	= ОплаченнаяОстаточнаяСтоимость - ОстаточнаяСтоимость;
				ОплаченнаяОстаточнаяСтоимость	= ОплаченнаяОстаточнаяСтоимость - Превышение;
				ЧастьОстаточнойСтоимости		= ЧастьОстаточнойСтоимости - Превышение;
				
				ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонПревышениеОплаты, Выборка.НематериальныйАктивПредставление);
						
				ДобавитьПростоеОписаниеОшибки(ТекстСообщения, Выборка.НематериальныйАктив, Отказ);
					
			КонецЕсли;
			
			Если ЧастьОстаточнойСтоимости > 0 Тогда
				ФормированиеРасходовНМА(СтруктураШапкиДокумента, Выборка.НематериальныйАктив, ЧастьОстаточнойСтоимости, Выборка, ДатаВвода);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде, 
	
	КоличествоКварталовВНалоговомПериоде,
	ДатаВключенияСтоимостиВРасходы);
	
	НомерКвартала = Месяц(КонецКвартала(Дата)) / 3;
	Если Год(ДатаВключенияСтоимостиВРасходы) < Год(Дата) Тогда
		КоличествоКварталовВОтчетномПериоде  = НомерКвартала;
		КоличествоКварталовВНалоговомПериоде = 4;
		
	ИначеЕсли ДатаВключенияСтоимостиВРасходы <= Дата Тогда
		НомерКварталаНачалаРасчета = Месяц(КонецКвартала(ДатаВключенияСтоимостиВРасходы)) / 3;
		КоличествоКварталовВОтчетномПериоде  = НомерКвартала - НомерКварталаНачалаРасчета;
		КоличествоКварталовВНалоговомПериоде = 5 - НомерКварталаНачалаРасчета;
		
		Если Месяц(ДатаВключенияСтоимостиВРасходы) <> Месяц(КонецКвартала(ДатаВключенияСтоимостиВРасходы))
			ИЛИ (ДатаВключенияСтоимостиВРасходы >= Дата("20060101")) Тогда
			КоличествоКварталовВОтчетномПериоде = КоличествоКварталовВОтчетномПериоде + 1;
		Иначе
			КоличествоКварталовВНалоговомПериоде = КоличествоКварталовВНалоговомПериоде - 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // РассчитатьКоличествоМесяцевЭксплуатации()

Функция РаспределитьОплатуПоКварталам(СуммаОплаты, ДатаОплаты, ДатаВводаВэксплуатацию, Параметры)
	
	КоличествоКварталовВОтчетномПериоде  = 0;
	КоличествоКварталовВНалоговомПериоде = 0;
	ДатаВключенияСтоимостиВРасходы       = 0;
	
	РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде,
		КоличествоКварталовВНалоговомПериоде,
		Макс(ДатаОплаты, ДатаВводаВэксплуатацию));
	СуммаРасходов = 0;
	
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		СуммаРасходов = СуммаОплаты/КоличествоКварталовВНалоговомПериоде;
	КонецЕсли;
	
	ПроцентПринятияРасходовОтч = ?(КоличествоКварталовВНалоговомПериоде = 0, 0, Окр(100/КоличествоКварталовВНалоговомПериоде, 2));
	Параметры = Новый Структура(
		"КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов",
		0, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, 100);
	
	Возврат СуммаРасходов;
	
КонецФункции

Процедура ФормированиеРасходов(СтруктураШапкиДокумента, ОС, ОстаточнаяСтоимость, Строка, ДатаВводаВэксплуатацию)
	
	Если ОстаточнаяСтоимость <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКварталовВОтчетномПериоде  = 0;
	КоличествоКварталовВНалоговомПериоде = 0;
	ДатаВключенияСтоимостиВРасходы       = 0;
	
	ПроцентПринятияРасходов = ПроцентПринятыхРасходов(СтруктураШапкиДокумента, Строка.СрокПолезногоИспользования);
	РассчитатьКоличествоМесяцевЭксплуатации(КоличествоКварталовВОтчетномПериоде, 
	КоличествоКварталовВНалоговомПериоде,
	Макс(Строка.ДатаОплаты, ДатаВводаВэксплуатацию));
	СуммаРасходов = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		СуммаРасходов = ОстаточнаяСтоимость * КоличествоКварталовВОтчетномПериоде
						*(ПроцентПринятияРасходов / КоличествоКварталовВНалоговомПериоде) / 100;
	КонецЕсли;
	
	РасходыТекущегоКварталаСумма = 0;
	ОтнесеноНаРасходы = 0;
	ОтнесеноНаРасходы = Строка.СуммаРасходовЗаГод;
	
	СуммаРасходов = Макс(0, СуммаРасходов - ОтнесеноНаРасходы);
	
	ПроцентПринятияРасходовОтч = 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		ПроцентПринятияРасходовОтч = (ПроцентПринятияРасходов/КоличествоКварталовВНалоговомПериоде);
	КонецЕсли;
	
	Параметры = Новый Структура(
		"КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов",
		КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде,
		ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов);
	Параметры.Вставить("ПереходныйПериод", Истина);
	
	Если НЕ СуммаРасходов = 0 Тогда
		ВключитьВРасходыОС(СтруктураШапкиДокумента, ОС, Строка, СуммаРасходов, ДатаВводаВэксплуатацию, Параметры);
	КонецЕсли;
	
КонецПроцедуры // ФормированиеРасходов()

Процедура ФормированиеРасходовНМА(СтруктураШапкиДокумента, НМА, ОстаточнаяСтоимость, Строка, ДатаПринятияКУчету)
	
	Если ОстаточнаяСтоимость <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКварталовВОтчетномПериоде		= 0;
	КоличествоКварталовВНалоговомПериоде	= 0;
	ДатаВключенияСтоимостиВРасходы			= 0;
	
	ПроцентПринятияРасходов	= ПроцентПринятыхРасходов(СтруктураШапкиДокумента, Строка.СрокПолезногоИспользования);
	РассчитатьКоличествоМесяцевЭксплуатации(
		КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде, Макс(Строка.ДатаОплаты, ДатаПринятияКУчету));
		
	СуммаРасходов	= 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		СуммаРасходов	= ОстаточнаяСтоимость * КоличествоКварталовВОтчетномПериоде
						* (ПроцентПринятияРасходов / КоличествоКварталовВНалоговомПериоде) / 100;
	КонецЕсли;
	
	РасходыТекущегоКварталаСумма	= 0;
	ОтнесеноНаРасходы	= 0;
	ОтнесеноНаРасходы	= Строка.СуммаРасходовЗаГод;
	
	СуммаРасходов	= Макс(0, СуммаРасходов - ОтнесеноНаРасходы);
	
	ПроцентПринятияРасходовОтч	= 0;
	Если КоличествоКварталовВНалоговомПериоде <> 0 Тогда
		ПроцентПринятияРасходовОтч	= ПроцентПринятияРасходов / КоличествоКварталовВНалоговомПериоде;
	КонецЕсли;
	
	Параметры	= Новый Структура("
		|КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде,
		|ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов",
		КоличествоКварталовВОтчетномПериоде, КоличествоКварталовВНалоговомПериоде,
		ПроцентПринятияРасходовОтч, ПроцентПринятияРасходов);
		
	Параметры.Вставить("ПереходныйПериод", Истина);
	
	Если НЕ СуммаРасходов = 0 Тогда
		ВключитьВРасходыНМА(СтруктураШапкиДокумента, НМА, Строка, СуммаРасходов, ДатаПринятияКУчету, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроцентПринятыхРасходов(СтруктураШапкиДокумента, СрокПолезногоИспользования)
	
	ДатаПереходаНаУСН = УчетнаяПолитика.ДатаПереходаНаУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.КонДата);
	ПроцентСписания = 0;
	
	Если СрокПолезногоИспользования <= 3*12 Тогда
		
		Если Год(Дата) = Год(ДатаПереходаНаУСН) Тогда
			ПроцентСписания = 100;
		КонецЕсли;
		
	ИначеЕсли СрокПолезногоИспользования <= 15*12 Тогда
		Если Год(Дата) = Год(ДатаПереходаНаУСН) Тогда
			ПроцентСписания = 50;
			
		ИначеЕсли (Год(Дата) - 1) = Год(ДатаПереходаНаУСН) Тогда
			ПроцентСписания = 30;
			
		ИначеЕсли (Год(Дата) - 2) = Год(ДатаПереходаНаУСН) Тогда
			ПроцентСписания = 20;
		КонецЕсли;
		
	Иначе
		ПроцентСписания = 10;
	КонецЕсли;
	
	Возврат ПроцентСписания;
	
КонецФункции

Процедура СписаниеДопРасходовУСН(СтруктураШапкиДокумента, Отказ)
	
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		Возврат;
	КонецЕсли;
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(
		СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	
	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("Ссылка", Ссылка);
		Параметры.Вставить("Объект", ЭтотОбъект);
		Параметры.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		Параметры.Вставить("Дата", СтруктураШапкиДокумента.Дата);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
			
		НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "СписаниеТЗР", Параметры, 1);
	
	КонецЕсли;
	
КонецПроцедуры

// РАСПРЕДЕЛЕНИЕ РАСХОДОВ ПО ВИДАМ ДЕЯТЕЛЬНОСТИ В УСН

Процедура РаспределениеРасходовЕНВДУСН(СтруктураШапкиДокумента, Отказ)
	
	Если СтруктураШапкиДокумента.Предприниматель Тогда
		Возврат;
	КонецЕсли;
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(
		СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	
	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("Ссылка", Ссылка);
		Параметры.Вставить("Объект", ЭтотОбъект);
		Параметры.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		Параметры.Вставить("Дата", СтруктураШапкиДокумента.Дата);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
		
		НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "РаспределениеЕНВД", Параметры, 2);
	
	КонецЕсли;
	
КонецПроцедуры

// ВКЛЮЧЕНИЕ АВАНСОВ В ПРОЧИЕ ДОХОДЫ

Процедура ВключениеАвансовВПрочиеДоходыИП(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыВключениеАвансовВПрочиеДоходыИП(
		СтруктураШапкиДокумента, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаВключенияАвансовВПрочиеДоходы	= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуВключенияАвансовВПрочиеДоходы(
		ПараметрыПроведения.ТаблицаРеквизитов, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВключениеАвансовВПрочиеДоходы(
		ТаблицаВключенияАвансовВПрочиеДоходы,
		ПараметрыПроведения.ТаблицаРеквизитов, Движения, Отказ);
	
КонецПроцедуры

// РАСПРЕДЕЛЕНИЕ РАСХОДОВ ПО ВИДАМ ДЕЯТЕЛЬНОСТИ ИП

Процедура РаспределениеРасходовЕНВДИП(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРаспределениеРасходовЕНВДИП(
		СтруктураШапкиДокумента, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияРаспределениеРасходовЕНВД(
		ПараметрыПроведения.ТаблицаРеквизитов, Движения, Отказ);
	
КонецПроцедуры

// НАЧИСЛЕНИЕ СТРАХОВЫХ ВЗНОСОВ ИП ЗА СЕБЯ

Процедура НачислитьСтраховыеВзносыИП(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачисленияСтраховыхВзносовИП(
		СтруктураШапкиДокумента, Отказ);
		
	ТаблицаСтраховыхВзносов = УчетСтраховыхВзносовИП.ПодготовитьТаблицуНачисленияСтраховыхВзносов(
		ПараметрыПроведения.ТаблицаРеквизитов);
	
	ТаблицаРасходовУСН = УчетУСН.ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(
		ТаблицаСтраховыхВзносов, ПараметрыПроведения.ТаблицаРеквизитов);
	
	ТаблицаРасходовИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(
		ТаблицаСтраховыхВзносов, ПараметрыПроведения.ТаблицаРеквизитов);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетСтраховыхВзносовИП.СформироватьДвиженияНачислениеСтраховыхВзносов(
		ТаблицаСтраховыхВзносов, ПараметрыПроведения.ТаблицаРеквизитов, Движения, Отказ);
	
	// Включение страховых взносов в расходы 
	УчетУСН.СформироватьДвиженияОтражениеРасходовНаУплатуСтраховыхВзносов(
		ТаблицаРасходовУСН, ПараметрыПроведения.ТаблицаРеквизитов, ЭтотОбъект, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОтражениеРасходовНаУплатуСтраховыхВзносов(
		ТаблицаРасходовИП, ПараметрыПроведения.ТаблицаРеквизитов, Движения, Отказ);
	
КонецПроцедуры

// ПБУ 18

Процедура ВыполнитьРасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетНалога(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Период      = ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога[0].Период;
	Организация = ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога[0].Организация;
	Организации = СтруктураШапкиДокумента.СписокОрганизаций;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаДолейБазыНалогаНаПрибыль = НалоговыйУчетОбособленныхПодразделений.ПодготовитьТаблицуРасчетДолейБазыНалогаНаПрибыль(
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
		Организации);
	
	// Проводки по начислению налога на прибыль
	ОбщаяСуммаНалога = РасчетНалогаНаПрибыль.НачислитьНалогНаПрибыль(
		Движения, 
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
		ТаблицаДолейБазыНалогаНаПрибыль);
		
	// Средняя ставка налога на прибыль за месяц (имеет смысл, если налог уплачивается по разным ставкам)
	ПрименяютсяРазныеСтавкиНалогаНаПрибыль = 
		(ТаблицаДолейБазыНалогаНаПрибыль <> Неопределено                         // Налог уплачивается в разные регионы
		И ПолучитьФункциональнуюОпцию("ПрименяютсяРазныеСтавкиНалогаНаПрибыль"));// Пользователь установил, что в разных регионах могут быть разные ставки
		
	НалоговаяБазаОбщая = 0;
		
	Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль Тогда
		 // В случае признания убытков расчетная ставка определяется по предыдущему месяцу
		Если ОбщаяСуммаНалога = 0 Тогда
			НалоговаяБазаЗаМесяц = 0;
			РасчетнаяСтавкаНалогаЗаМесяц = НалоговыйУчетОбособленныхПодразделений.ПолучитьРасчетнуюСтавкуНалогаНаПрибыль(
					Организация, 
					НачалоМесяца(Период)-1);
		Иначе  
				// в случае признания прибыли расчетная ставка текущего месяца определяется по формуле:
			    //налог на прибыль НУ / прибыль по данным БУ , все показатели по данным текущего месяца

			НалоговаяБазаЗаМесяц = РасчетНалогаНаПрибыль.НалоговаяБаза(     
					НачалоМесяца(Период), 
					КонецМесяца(Период), 
					Организация);
			НалоговаяБазаЗаГод = РасчетНалогаНаПрибыль.НалоговаяБаза(
					НачалоГода(Период), 
					КонецМесяца(Период), 
					Организация);
			// если в прошлом периоде по итогам с начала года был убыток, а в текущем - прибыль,
			// то налог на прибыль по данным НУ, рассчитанный на текущий месяц, соответствует налогу на прибыль за год,
			// следовательно база берется за год
			НалоговаяБазаОбщая = ?(НалоговаяБазаЗаГод < НалоговаяБазаЗаМесяц,НалоговаяБазаЗаГод,НалоговаяБазаЗаМесяц);  	
			РасчетнаяСтавкаНалогаЗаМесяц = ?(НалоговаяБазаОбщая = 0, 0, ОбщаяСуммаНалога / НалоговаяБазаОбщая);
			
		КонецЕсли;
		
		// Эта ставка далее 
		// 1. используется в РассчитатьОНО_ОНА() и РассчитатьОНАПоУбыткамТекущегоПериода()
		СтруктураШапкиДокумента.Вставить("СтавкаНалогаНаПрибыль", РасчетнаяСтавкаНалогаЗаМесяц);
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога[0].СтавкаНалогаНаПрибыль = РасчетнаяСтавкаНалогаЗаМесяц;
		// 2. записывается в справку-расчет
		РасчетСреднейСтавки = НалоговыйУчет.ПодготовитьТаблицуРасчетСтавокНалогаНаПрибыль(Отказ);
		СтрокаРасчета = РасчетСреднейСтавки.Добавить();
		СтрокаРасчета.Ставка      = РасчетнаяСтавкаНалогаЗаМесяц * 100;
		СтрокаРасчета.СуммаНалога = ОбщаяСуммаНалога;
		СтрокаРасчета.СуммаБазы   = НалоговаяБазаОбщая;  		
	КонецЕсли;
	
	// Проводки по начислению условного дохода (расхода) по налогу на прибыль
	
	Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
		
		ТаблицаРасчетНалогаНаПрибыль = РасчетНалогаНаПрибыль.ПодготовитьТаблицуРасчетНалогаНаПрибыль(
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			СтруктураШапкиДокумента.СписокОрганизаций, 
			Отказ);
			
			
		СтруктураТаблицПостоянныхРазниц   = РасчетНалогаНаПрибыль.ПодготовитьТаблицуРасчетПостоянныхРазниц(
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			СтруктураШапкиДокумента.СписокОрганизаций, 
			Отказ);
			
		ТаблицаРасчетПостоянныхРазниц 							= СтруктураТаблицПостоянныхРазниц.ТаблицаРасчетПостоянныхРазниц;
		ТаблицаПостоянныхРазницВОценкеАктивовИОбязательств 		= СтруктураТаблицПостоянныхРазниц.ТаблицаРазницВОценкеАктивовИОбязательств;
		ТаблицаСтоимостиПостоянныхНалоговыхАктивовИОбязательств = СтруктураТаблицПостоянныхРазниц.ТаблицаСтоимостиНалоговыхАктивовИОбязательств;
		
		
		СтруктураТаблицВременныхРазниц    = РасчетНалогаНаПрибыль.РассчитатьВременныеРазницы(
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			СтруктураШапкиДокумента.СписокОрганизаций, 
			Отказ);
			
		ТаблицаРасчетВременныхРазниц 							= СтруктураТаблицВременныхРазниц.ТаблицаРасчетВременныхРазниц;
		ТаблицаВременныхРазницВОценкеАктивовИОбязательств 		= СтруктураТаблицВременныхРазниц.ТаблицаРазницВОценкеАктивовИОбязательств;
		ТаблицаСтоимостиВременныхНалоговыхАктивовИОбязательств 	= СтруктураТаблицВременныхРазниц.ТаблицаСтоимостиНалоговыхАктивовИОбязательств;
		СтруктураШапкиДокумента.СуммаПересчетаУбытков           = СтруктураТаблицВременныхРазниц.СуммаПересчетаУбытков; 
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения, 
		ТаблицаПостоянныхРазницВОценкеАктивовИОбязательств, 
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
		"РасчетРазницВОценкеАктивовИОбязательств");
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения, 
		ТаблицаСтоимостиПостоянныхНалоговыхАктивовИОбязательств, 
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
		"РасчетСтоимостиНалоговыхАктивовИОбязательств");
		
		РасчетНалогаНаПрибыль.СформироватьДвиженияРасчетНалогаНаПрибыль(
			ТаблицаРасчетПостоянныхРазниц,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога, 
			Движения, 
			Отказ);
			
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения, 
		ТаблицаВременныхРазницВОценкеАктивовИОбязательств, 
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
		"РасчетРазницВОценкеАктивовИОбязательств");
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения, 
		ТаблицаСтоимостиВременныхНалоговыхАктивовИОбязательств, 
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
		"РасчетСтоимостиНалоговыхАктивовИОбязательств");
			
		РасчетНалогаНаПрибыль.СформироватьДвиженияРасчетНалогаНаПрибыль(
			ТаблицаРасчетВременныхРазниц,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога, 
			Движения, 
			Отказ);
		
		РасчетНалогаНаПрибыль.СформироватьДвиженияРасчетНалогаНаПрибыль(
			ТаблицаРасчетНалогаНаПрибыль,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога, 
			Движения, 
			Отказ);
			
		РасчетНалогаНаПрибыль.ДобавитьПроводкуСписанияОтклоненийПриОкругленииНалогаНаПрибыль(
			ТаблицаРасчетПостоянныхРазниц,
			ТаблицаРасчетВременныхРазниц,
			ТаблицаРасчетНалогаНаПрибыль,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			ОбщаяСуммаНалога, 
			Движения, 
			Отказ);
			
	КонецЕсли;
	
	// Справки расчеты по распределению налога между налоговыми органами
	
	Если ТаблицаДолейБазыНалогаНаПрибыль <> Неопределено Тогда
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения,
			ТаблицаДолейБазыНалогаНаПрибыль,
			ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
			"РасчетДолейБазыНалогаНаПрибыль",
			"Организация, РегистрацияВНалоговомОргане, ДоляНалоговойБазы",
			"РасходыПоОплатеТруда, СтоимостьАмортизируемогоИмущества,СтоимостьОСПрошлыхМесяцев,СтоимостьОССледующегоМесяца");
			
	КонецЕсли;
	
	Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль Тогда

		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РасчетСреднейСтавки,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетНалога,
		"РасчетСтавкиНалогаНаПрибыльЗаМесяц",
		"Организация,Ставка,СуммаНалога,СуммаБазы",
		"");
			
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьРасчетНалогаНаПрибыль()

// РЕФОРМАЦИЯ БАЛАНСА И ЗАКРЫТИЕ ГОДА

Процедура ПроведениеПеречетаОНАиОНО(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыЗакрытиеГода(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаОНАОНО       = ЗакрытиеМесяца.ПодготовитьТаблицуПересчетОНАиОНО(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
		СтруктураШапкиДокумента.СписокОрганизаций, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения, ТаблицаОНАОНО, ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
	"РасчетСтоимостиНалоговыхАктивовИОбязательствПослеИзмененияСтавкиНалогаНаПрибыль");
	
	ЗакрытиеМесяца.СформироватьДвиженияуПересчетОНАиОНО(ТаблицаОНАОНО,
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода, Движения, Отказ);
	
КонецПроцедуры // ПроведениеПеречетаОНАиОНО()

Процедура ПроведениеРеформацииБаланса(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыЗакрытиеГода(СтруктураШапкиДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаЗакрытие99Реформация = ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие99Реформация(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
		Отказ);
	
	ТаблицаЗакрытие90БУ = ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие90БУ(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
		Отказ);
	
	ТаблицаЗакрытие91БУ = ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие91БУ(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
		Отказ);
	
	//ЗАКРЫТИЕ СЧЕТОВ В НУ
	
	ТаблицаЗакрытие20_23_25_26НУиНЕ = ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие20_23_25_26НУиНЕ(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
		Отказ);
	
	ТаблицаЗакрытие44НУ = ЗакрытиеМесяца.ПодготовитьТаблицуЗакрытие44НУ(
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода,
		Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеГода(ТаблицаЗакрытие99Реформация,
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода, Движения, Отказ);
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеГода(ТаблицаЗакрытие90БУ,
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода, Движения, Отказ);
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеГода(ТаблицаЗакрытие91БУ,
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода, Движения, Отказ);
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеГода(ТаблицаЗакрытие20_23_25_26НУиНЕ,
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода, Движения, Отказ);
	
	ЗакрытиеМесяца.СформироватьДвиженияЗакрытиеГода(ТаблицаЗакрытие44НУ,
		ПараметрыПроведения.ТаблицаРеквизитыЗакрытиеГода, Движения, Отказ);
			
КонецПроцедуры // ПроведениеРеформацииБаланса()

// РАСЧЕТ РАСХОДОВ, УМЕНЬШАЮЩИХ НАЛОГ УСН (ФОРМИРОВАНИЕ 4 РАЗДЕЛА КУДИР)

Процедура РассчитатьРасходыУменьшающиеНалогУСН(СтруктураШапкиДокумента, Отказ)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасходовУменьшающихНалогУСН(
		СтруктураШапкиДокумента, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
		
	ТаблицаРасходовУменьшающихНалог = УчетУСН.ПодготовитьТаблицуРасходовУменьшающихНалогУСН(
		ПараметрыПроведения.ТаблицаРеквизитыУменьшениеНалогаУСН);
		
	УчетУСН.СформироватьДвиженияКУДиРРаздел4(ТаблицаРасходовУменьшающихНалог,
		ПараметрыПроведения.ТаблицаРеквизитыУменьшениеНалогаУСН,
		Движения,
		Отказ);

КонецПроцедуры

// НАЧИСЛЕНИЕ НАЛОГА УСН

Процедура НачислитьНалогУСН(СтруктураШапкиДокумента, Отказ)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыНачисленияНалогаУСН(
		СтруктураШапкиДокумента, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
		
	ТаблицыНачислениеНалога = УчетУСН.ПодготовитьТаблицыНачисленияНалогаУСН(
		ПараметрыПроведения.ТаблицаРеквизитыНалогУСН);
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетУСН.СформироватьДвиженияНачислениеНалогаУСН(
		ТаблицыНачислениеНалога.ТаблицаПроводок,
		ТаблицыНачислениеНалога.ТаблицаСправкиРасчета,
		ПараметрыПроведения.ТаблицаРеквизитыНалогУСН,
		Движения,
		Отказ);

КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПО НАЧИСЛЕНИЮ ИМУЩЕСТВЕННЫХ НАЛОГОВ

Процедура ВыполнитьРасчетИмущественногоНалога(СтруктураШапкиДокумента, Отказ)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПараметрыПроведения = Документы.РегламентнаяОперация.ПодготовитьПараметрыРасчетИмущественныхНалогов(СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
		
	ТаблицыНачислениеНалога = РасчетИмущественныхНалогов.ПодготовитьТаблицыРасчетНалога(
		ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов, Отказ);
		
	Если ТаблицыНачислениеНалога.Свойство("Ошибки") Тогда
		Для Каждого Ошибка Из ТаблицыНачислениеНалога.Ошибки Цикл
			ДобавитьПростоеОписаниеОшибки(Ошибка.ТекстСообщения, Ошибка.СсылкаДляПерехода, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтражениеНалогаВУСН = УчетУСН.ПодготовитьТаблицуРасходовПоИмущественномуНалогу(
		ТаблицыНачислениеНалога.ТаблицаПроводок, ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	РасчетИмущественныхНалогов.СформироватьДвиженияРасчетНалога(
		ТаблицыНачислениеНалога.ТаблицаПроводок,
		ТаблицыНачислениеНалога.ТаблицаСправкиРасчета,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов,
		Движения,
		Отказ);
		
	УчетУСН.СформироватьДвиженияОтражениеРасходовПоИмущественнымНалогам(
		ТаблицаОтражениеНалогаВУСН,
		ПараметрыПроведения.ТаблицаРеквизитыРасчетИмущественныхНалогов,
		ЭтотОбъект,
		Отказ);
		
КонецПроцедуры

Процедура СписаниеТаможенныхПлатежейУСН(СтруктураШапкиДокумента, Отказ)
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(
		СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	
	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("Ссылка", Ссылка);
		Параметры.Вставить("Объект", ЭтотОбъект);
		Параметры.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		Параметры.Вставить("Дата", СтруктураШапкиДокумента.Дата);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
		Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
			
		НалоговыйУчетУСН.ОтразитьВУСН(Ссылка, "СписаниеТаможенныхПлатежей", Параметры);
	
	КонецЕсли;

КонецПроцедуры

#КонецЕсли
