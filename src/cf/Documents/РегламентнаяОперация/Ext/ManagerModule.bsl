#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// ПОДГОТОВКА ПАРАМЕТРОВ ВЫПОЛНЕНИЯ ОПЕРАЦИЙ ДОКУМЕНТА

Функция ТекстЗапросаРеквизиты()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаРеквизиты()

// АМОРТИЗАЦИЯ И ИЗНОС ОС

Функция ПодготовитьПараметрыНачислениеАмортизацииИзносаОС(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	СодержаниеАмортизация = "Начисление амортизации";
	СодержаниеИзнос       = "Начисление износа";
	
	Запрос.УстановитьПараметр("Ссылка",                СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("СодержаниеАмортизация", СодержаниеАмортизация);
	Запрос.УстановитьПараметр("СодержаниеИзнос",       СодержаниеИзнос);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыАмортизацияОС(НомераТаблиц)
				 + ТекстЗапросаРеквизитыИзносОС(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыНачислениеАмортизацииИзносаОС() 

Функция ТекстЗапросаРеквизитыАмортизацияОС(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("НачислениеАмортизацииОС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Дата КАК ДатаРасчета,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	"""" КАК ИмяСписка,
	|	&СодержаниеАмортизация КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыАмортизацияОС()

Функция ТекстЗапросаРеквизитыИзносОС(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("НачислениеИзносаОС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Дата КАК ДатаРасчета,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	"""" КАК ИмяСписка,
	|	&СодержаниеИзнос КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыИзносОС()

// АМОРТИЗАЦИЯ НМА И НИОКР

Функция ПодготовитьПараметрыНачислениеАмортизацииНМА_НИОКР(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	СодержаниеАмортизация = "Амортизация НМА";
	
	Запрос.УстановитьПараметр("Ссылка",                СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("СодержаниеАмортизация", СодержаниеАмортизация);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыАмортизацияНМА(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыАмортизацияНМА(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("НачислениеАмортизацииНМА", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	РегламентнаяОперация.Дата КАК ДатаРасчета,
	|	ИСТИНА КАК ВыдаватьСообщения,
	|	"""" КАК ИмяСписка,
	|	&СодержаниеАмортизация КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыАмортизацияНМА()

// ПОГАШЕНИЕ СТОИМОСТИ СПЕЦОДЕЖДЫ И СПЕЦОСНАСТКИ

Функция ПодготовитьПараметрыСпецодеждаИСпецоснастка(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;

	Запрос     = Новый Запрос;
	Содержание = "Погашение стоимости спецодежды (спецоснастки)";
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыСпецодеждаИСпецоснастка(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыСпецодеждаИСпецоснастка()

Функция ТекстЗапросаРеквизитыСпецодеждаИСпецоснастка(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("РеквизитыСпецодеждаИСпецоснастка", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРеквизитыСпецодеждаИСпецоснастка()


// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ

Функция ПодготовитьПараметрыПроведенияВалюнаяПереоценка(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос     = Новый Запрос;
	Содержание = "Переоценка валютных остатков";
	Запрос.УстановитьПараметр("Ссылка",                  СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("ВалютаДокументаРегУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Содержание",              Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВалюнаяПереоценка(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыПроведенияВалюнаяПереоценка() 

Функция ТекстЗапросаВалюнаяПереоценка(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("ПереоценкаВалютныхОстатков", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	&ВалютаДокументаРегУчета КАК ВалютаДокумента,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаВалюнаяПереоценка()


// РАСЧЕТ СПИСАНИЯ РБП

Функция ПодготовитьПараметрыРасчетСписанияРБП(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	
	СодержаниеШаблон = "Списание РБП за %1";
	Содержание       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		СодержаниеШаблон, ПредставлениеПериода(СтруктураШапки.НачДата, СтруктураШапки.КонДата));
	
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетСписанияРБП(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыРасчетСписанияРБП()

Функция ТекстЗапросаРасчетСписанияРБП(НомераТаблиц)

	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыРБП",      НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапросаРасчетСписанияРБП()

// РАСЧЕТ ИМУЩЕСТВЕННЫХ НАЛОГОВ

Функция ПодготовитьПараметрыРасчетИмущественныхНалогов(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;

	Если СтруктураШапки.ВидНалога = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
		
		НачалоПериода = НачалоГода(СтруктураШапки.НачДата);
		ИмяРегистраРасчетНалогов = "РасчетНалогаНаИмущество";
		
	Иначе
		НачалоПериода = ?(КонецГода(СтруктураШапки.КонДата) = КонецКвартала(СтруктураШапки.КонДата),
						НачалоГода(СтруктураШапки.НачДата),
						НачалоКвартала(СтруктураШапки.НачДата));
						
		Если СтруктураШапки.ВидНалога = Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог Тогда
			ИмяРегистраРасчетНалогов = "РасчетТранспортногоНалога";	
		ИначеЕсли СтруктураШапки.ВидНалога = Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог Тогда
			ИмяРегистраРасчетНалогов = "РасчетЗемельногоНалога";	
		КонецЕсли;
			
	КонецЕсли;
	
	Содержание       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начислен %1 за %2'"),
		Строка(СтруктураШапки.ВидНалога),
		ПредставлениеПериода(НачалоПериода, СтруктураШапки.КонДата, "ФП = Истина"));
	
	Запрос = Новый Запрос;
		
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	Запрос.УстановитьПараметр("ВидНалога", СтруктураШапки.ВидНалога);
	Запрос.УстановитьПараметр("ИмяРегистраРасчетНалогов", ИмяРегистраРасчетНалогов);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетИмущественныхНалогов(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРасчетИмущественныхНалогов(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетИмущественныхНалогов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	&ВидНалога КАК ВидНалога,
	|	&Содержание КАК Содержание,
	|	&ИмяРегистраРасчетНалогов КАК ИмяРегистраРасчетНалогов
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// РАСЧЕТ ТОРГОВОЙ НАЦЕНКИ ПО ПРОДАННЫМ ТОВАРАМ

Функция ПодготовитьПараметрыРасчетТорговойНаценки(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	СпособОценкиТоваровВРознице =
		УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапки.Организация, СтруктураШапки.КонДата);
	
	Содержание = "Торговая наценка";
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетТорговойНаценки(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыРасчетТорговойНаценки()

Функция ТекстЗапросаРасчетТорговойНаценки(НомераТаблиц)

	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетНаценки", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапросаРасчетТорговойНаценки()

// СПИСАНИЕ УБЫТКОВ ПРОШЛЫХ ЛЕТ

Функция ПодготовитьПараметрыСписаниеУбытков(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос     = Новый Запрос;
	Содержание = "Убытки прошлых лет";
	Запрос.УстановитьПараметр("Ссылка",     СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание", Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаСписаниеУбытковПрошлыхЛет(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыСписаниеУбытковПрошлыхЛет() 

Функция ТекстЗапросаСписаниеУбытковПрошлыхЛет(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("ТаблицаРеквизитыСписаниеУбытков", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&Содержание КАК Содержание,
	|	0 КАК СуммаСписания
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаСписаниеУбытковПрошлыхЛет()


// РАСЧЕТ ДОЛЕЙ СПИСАНИЯ КОСВЕННЫХ РАСХОДОВ

Функция ПодготовитьПараметрыРасчетДолей(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	Запрос.Текст = ТекстЗапросаРеквизиты();
	Результат    = Запрос.Выполнить();
	НомераТаблиц = Новый Структура;
	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетДолей", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыРасчетДолей()

// УЧЕТ ЗАТРАТ

Функция ПодготовитьПараметрыУчетЗатрат(СтруктураШапки, Отказ) Экспорт
	                
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	Запрос.Текст = ТекстЗапросаРеквизиты();
	Результат    = Запрос.Выполнить();
	НомераТаблиц = Новый Структура;
	НомераТаблиц.Вставить("РеквизитыРегламентнойОперации", НомераТаблиц.Количество());
	
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыПроизводство()

// РАСЧЕТ РЕЗЕРВОВ ПО СОМНИТЕЛЬНЫМ ДОЛГАМ
 
Функция ПодготовитьПараметрыРезервыПоСомнительнымДолгам(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	ГоловноеПодразделение = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(СтруктураШапки.Организация);
	Если ЗначениеЗаполнено(ГоловноеПодразделение) Тогда
		ОрганизацияДляУчетнойПолитики = ГоловноеПодразделение;
	Иначе
		ОрганизацияДляУчетнойПолитики = СтруктураШапки.Организация;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",              СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("НачДата",             НачалоМесяца(СтруктураШапки.Дата));
	Запрос.УстановитьПараметр("КонДата",             КонецМесяца(СтруктураШапки.Дата));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОрганизацияДляУчетнойПолитики);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ПолучитьТаблицуДолейСписанияКосвенныхРасходов(НомераТаблиц)
				 + ТекстЗапросаРезервыПоСомнительнымДолгам(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Если ПараметрыПроведения.ТаблицаДолейКосвенныхРасходов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных о долях списания косвенных расходов
			|Не обнаружена регламентная операция ""Расчет долей списания косвенных расходов""
			|Выполните указанную операцию'");
		
		БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщения, , Отказ, СтруктураШапки.Ссылка);
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыТекстЗапросаРезервыПоСомнительнымДолгам()

Функция ТекстЗапросаРезервыПоСомнительнымДолгам(НомераТаблиц)
	
	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыРезервыПоСомнительнымДолгам", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаТекстЗапросаРезервыПоСомнительнымДолгам()

Функция ПолучитьТаблицуДолейСписанияКосвенныхРасходов(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("ТаблицаДолейКосвенныхРасходов", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаРекламу,
	|	РасчетДолейСписанияКосвенныхРасходов.ДоляПредставительскихРасходов,
	|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаДобровольноеМедицинскоеСтрахование,
	|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаДобровольноеСтрахованиеЖизни,
	|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаВозмещениеПроцентовРаботникам,
	|	РасчетДолейСписанияКосвенныхРасходов.ДоляЕНВД,
	|	РасчетДолейСписанияКосвенныхРасходов.ДоляТранспортныхРасходов,
	|	РасчетДолейСписанияКосвенныхРасходов.ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев,
	|	РасчетДолейСписанияКосвенныхРасходов.ДоляРезервовПоСомнительнымДолгамНУ
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК РасчетДолейСписанияКосвенныхРасходов
	|ГДЕ
	|	РасчетДолейСписанияКосвенныхРасходов.Организация = &ГоловнаяОрганизация
	|	И РасчетДолейСписанияКосвенныхРасходов.ПериодРасчета МЕЖДУ &НачДата И &КонДата";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ПолучитьТаблицуДолейСписанияКосвенныхРасходов()

// ЗАКРЫТИЕ СЧЕТОВ 90, 91

Функция ПодготовитьПараметрыЗакрытиеСчетов90_91(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос     = Новый Запрос;
	Содержание = "Определение финансовых результатов";
	Запрос.УстановитьПараметр("Ссылка",          СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("КоэффициентЕНВД", НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапки.Организация, СтруктураШапки.КонДата));
	Запрос.УстановитьПараметр("Содержание",      Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаЗакрытиеСчетов90_91(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыЗакрытиеСчетов90_91()

Функция ТекстЗапросаЗакрытиеСчетов90_91(НомераТаблиц)
	
	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыЗакрытие90_91", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&КоэффициентЕНВД КАК КоэффициентЕНВД,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаЗакрытиеСчетов90_91()

Функция ТекстЗапросаОкруглениеНДС(НомераТаблиц)
	
	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыОкруглениеНДС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК КонДата,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаОкруглениеНДС()

Функция ПодготовитьПараметрыОкругленияНДС(СтруктураШапки) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос     = Новый Запрос;
	Содержание = "Отклонение при округлении до рублей";
	Запрос.УстановитьПараметр("Ссылка",          СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("Содержание",      Содержание);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаОкруглениеНДС(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыОкругленияНДС()

// РАСЧЕТ НАЛОГА НА ПРИБЫЛЬ

Функция ПодготовитьПараметрыРасчетНалога(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения   = Новый Структура;
	
	Запрос                = Новый Запрос;
	Содержание            = "Налог на прибыль";
	СтавкаНалогаНаПрибыль = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапки);
	СтруктураШапки.Вставить("ПоддержкаПБУ18",
		УчетнаяПолитика.ПоддержкаПБУ18(СтруктураШапки.Организация, СтруктураШапки.КонДата));
	
	Запрос.УстановитьПараметр("Ссылка",                      СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СтруктураШапки.Организация, "РегистрацияВНалоговомОргане").РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("СтавкаНалогаНаПрибыль",       СтавкаНалогаНаПрибыль);
	Запрос.УстановитьПараметр("КоэффициентЕНВД",             НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапки.Организация, СтруктураШапки.КонДата));
	Запрос.УстановитьПараметр("Содержание",                  Содержание);
	
	СтруктураШапки.Вставить("СтавкаНалогаНаПрибыль", СтавкаНалогаНаПрибыль);// Для передачи "наверх!" - в ПроведениеПересчетаОНАиОНОКаждыйМесяц()
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасчетНалога(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыРасчетНалога()

Функция ТекстЗапросаРасчетНалога(НомераТаблиц)
	
	// Временные таблицы
	НомераТаблиц.Вставить("ТаблицаРеквизитыРасчетНалога", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Дата,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, ГОД) КАК НачалоГода,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	&КоэффициентЕНВД КАК КоэффициентЕНВД,
	|	&СтавкаНалогаНаПрибыль КАК СтавкаНалогаНаПрибыль,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаРасчетНалога()

// РАСЧЕТ РАСХОДОВ, УМЕНЬШАЮЩИХ НАЛОГ УСН

Функция ПодготовитьПараметрыРасходовУменьшающихНалогУСН(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	// параметры организации
	Запрос.УстановитьПараметр("ПрименяетсяУСН",
		УчетнаяПолитика.ПрименяетсяУСН(СтруктураШапки.Организация, СтруктураШапки.КонДата));
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходы",
		УчетнаяПолитика.ПрименяетсяУСНДоходы(СтруктураШапки.Организация, СтруктураШапки.КонДата));
	Запрос.УстановитьПараметр("ПрименяетсяУСНПатент",
		УчетнаяПолитика.ПрименяетсяУСНПатент(СтруктураШапки.Организация, СтруктураШапки.КонДата));
	Запрос.УстановитьПараметр("ПлательщикЕНВД",
		УчетнаяПолитика.ПлательщикЕНВД(СтруктураШапки.Организация, СтруктураШапки.КонДата));
	Запрос.УстановитьПараметр("ИПИспользуетТрудНаемныхРаботников",
		УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(СтруктураШапки.Организация));
		
	// настройки учета зарплаты
	ВедетсяУчетБольничных = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
		И ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций");
		
	Запрос.УстановитьПараметр("ВедетсяУчетБольничных", ВедетсяУчетБольничных);
	Запрос.УстановитьПараметр("ВедетсяУчетПоРаботникам",
		ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам"));
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРасходыУменьшающиеНалогУСН(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРасходыУменьшающиеНалогУСН(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизитыУменьшениеНалогаУСН", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, ГОД) КАК НачалоГода,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК КонДата,
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИндивидуальныйПредприниматель,
	|	&ПрименяетсяУСН КАК ПрименяетсяУСН,
	|	&ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
	|	&ПрименяетсяУСНПатент КАК ПрименяетсяУСНПатент,
	|	&ПлательщикЕНВД КАК ПлательщикЕНВД,
	|	&ИПИспользуетТрудНаемныхРаботников КАК ИПИспользуетТрудНаемныхРаботников,
	|	&ВедетсяУчетБольничных КАК ВедетсяУчетБольничных,
	|	&ВедетсяУчетПоРаботникам КАК ВедетсяУчетПоРаботникам,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, ГОД) = НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНачалоГода,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, ГОД) = КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКонецГода
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперациюРасчетРасходовУменьшающихНалогУСН() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// В подчиненных узлах РИБ не выполняется, созданные рег. операции во всех узлах должны иметь одинаковые ссылки
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетнаяПолитикаОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходы";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда // нет организаций на УСН с объектом "доходы"
		Возврат;
	КонецЕсли;
	
	// При УСН-доходы доступны и выполняются только 2 операции 4-й группы
	ОперацииГруппы = Новый Массив;
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91);
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОперацииГруппы", ОперацииГруппы);
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСНДоходы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_ПериодыПримененияУСН
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РегУП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыУчетнойПолитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПериодыСозданныхОпераций
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихНалогУСН)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ЗакрытыеПериодыУСН
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПримененияУСН КАК ВТ_ПериодыПримененияУСН
	|		ПО РегламентнаяОперация.Организация = ВТ_ПериодыПримененияУСН.Организация
	|			И РегламентнаяОперация.Дата >= ВТ_ПериодыПримененияУСН.ПериодНач
	|			И РегламентнаяОперация.Дата <= ВТ_ПериодыПримененияУСН.ПериодКон
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации В(&ОперацииГруппы)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗакрытыеПериодыУСН.Организация КАК Организация,
	|	ВТ_ЗакрытыеПериодыУСН.Дата КАК Дата
	|ИЗ
	|	ВТ_ЗакрытыеПериодыУСН КАК ВТ_ЗакрытыеПериодыУСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыСозданныхОпераций КАК ВТ_ПериодыСозданныхОпераций
	|		ПО ВТ_ЗакрытыеПериодыУСН.Дата = ВТ_ПериодыСозданныхОпераций.Дата
	|			И ВТ_ЗакрытыеПериодыУСН.Организация = ВТ_ПериодыСозданныхОпераций.Организация
	|ГДЕ
	|	ВТ_ПериодыСозданныхОпераций.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Проверка необходимости регламентной операции
		Если (Месяц(Выборка.Дата)%3 <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации         = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихНалогУСН;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоваяОперация, Истина);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не создана регламентная операция ""Расчет расходов, уменьшающих налог УСН""'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// НАЧИСЛЕНИЕ НАЛОГА УСН

Функция ПодготовитьПараметрыНачисленияНалогаУСН(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	Запрос.УстановитьПараметр("ПрименяетсяУСН",
		УчетнаяПолитика.ПрименяетсяУСН(СтруктураШапки.Организация, СтруктураШапки.КонДата));
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходы",
		УчетнаяПолитика.ПрименяетсяУСНДоходы(СтруктураШапки.Организация, СтруктураШапки.КонДата));
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходыМинусРасходы",
		УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(СтруктураШапки.Организация, СтруктураШапки.КонДата));
	Запрос.УстановитьПараметр("СтавкаНалогаУСН",
		УчетнаяПолитика.СтавкаНалогаУСН(СтруктураШапки.Организация, СтруктураШапки.КонДата));
		
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНачислениеНалогаУСН(НомераТаблиц);
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаНачислениеНалогаУСН(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаРеквизитыНалогУСН", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, ГОД) КАК НачалоГода,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ) КАК КонДата,
	|	&ПрименяетсяУСН КАК ПрименяетсяУСН,
	|	&ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
	|	&ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	&СтавкаНалогаУСН,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, ГОД) = НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНачалоГода,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, ГОД) = КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКонецГода
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперациюРасчетНалогаУСН() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетнаяПолитикаОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда // нет организаций на УСН
		Возврат;
	КонецЕсли;
	
	ВидОперацииРасчетНалогаУСН	= Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН;
	ГруппаРасчетНалогаУСН		= ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперацииРасчетНалогаУСН);
	
	// При УСН доступны и выполняются только 2 операции 4-й группы
	ОперацииГруппы = Новый Массив;
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91);
	ОперацииГруппы.Добавить(Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОперацииГруппы", ОперацииГруппы);
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_ПериодыПримененияУСН
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РегУП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыУчетнойПолитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПериодыСозданныхОпераций
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаУСН)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ЗакрытыеПериодыУСН
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыПримененияУСН КАК ВТ_ПериодыПримененияУСН
	|		ПО РегламентнаяОперация.Организация = ВТ_ПериодыПримененияУСН.Организация
	|			И РегламентнаяОперация.Дата >= ВТ_ПериодыПримененияУСН.ПериодНач
	|			И РегламентнаяОперация.Дата <= ВТ_ПериодыПримененияУСН.ПериодКон
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.ВидОперации В(&ОперацииГруппы)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗакрытыеПериодыУСН.Организация КАК Организация,
	|	ВТ_ЗакрытыеПериодыУСН.Дата КАК Дата
	|ИЗ
	|	ВТ_ЗакрытыеПериодыУСН КАК ВТ_ЗакрытыеПериодыУСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыСозданныхОпераций КАК ВТ_ПериодыСозданныхОпераций
	|		ПО ВТ_ЗакрытыеПериодыУСН.Дата = ВТ_ПериодыСозданныхОпераций.Дата
	|			И ВТ_ЗакрытыеПериодыУСН.Организация = ВТ_ПериодыСозданныхОпераций.Организация
	|ГДЕ
	|	ВТ_ПериодыСозданныхОпераций.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Проверка необходимости регламентной операции
		Если (Месяц(Выборка.Дата)%3 <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации         = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
			НоваяОперация.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'Не создана регламентная операция ""Расчет налога УСН""'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

// РЕФОРМАЦИЯ БАЛАНСА И ЗАКРЫТИЕ ГОДА

Функция ПодготовитьПараметрыЗакрытиеГода(СтруктураШапки, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	СодержаниеРеформация   = "Реформация баланса";
	СодержаниеЗакрытиеГода = "Закрытие года";
	
	Период                 = СтруктураШапки.Дата;
	СтруктураШапки.Дата    = КонецМесяца(КонецДня(СтруктураШапки.Дата)) + 1;
	НоваяСтавка            = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапки) * 100;
	
	СтруктураШапки.Дата    = Период;
	СтараяСтавка           = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапки) * 100;
	
	Запрос.УстановитьПараметр("Ссылка",                 СтруктураШапки.Ссылка);
	Запрос.УстановитьПараметр("НоваяСтавка",            НоваяСтавка);
	Запрос.УстановитьПараметр("СтараяСтавка",           СтараяСтавка);
	Запрос.УстановитьПараметр("Предприниматель",        СтруктураШапки.Предприниматель);
	Запрос.УстановитьПараметр("СодержаниеРеформация",   СодержаниеРеформация);
	Запрос.УстановитьПараметр("СодержаниеЗакрытиеГода", СодержаниеЗакрытиеГода);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаЗакрытиеГода(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции // ПодготовитьПараметрыЗакрытиеГода()

Функция ТекстЗапросаЗакрытиеГода(НомераТаблиц)
	
	// Временная таблица
	НомераТаблиц.Вставить("ТаблицаРеквизитыЗакрытиеГода", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Регистратор,
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, ГОД) КАК НачалоГода,
	|	НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК НачДата,
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонДата,
	|	&НоваяСтавка КАК НоваяСтавка,
	|	&СтараяСтавка КАК СтараяСтавка,
	|	&Предприниматель КАК Предприниматель,
	|	&СодержаниеРеформация КАК СодержаниеРеформация,
	|	&СодержаниеЗакрытиеГода КАК СодержаниеЗакрытиеГода
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаЗакрытиеГода()

// ВКЛЮЧЕНИЕ АВАНСОВ В ПРОЧИЕ ДОХОДЫ ИП

Функция ПодготовитьПараметрыВключениеАвансовВПрочиеДоходыИП(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения	= Новый Структура;
	
	Запрос	= Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	Запрос.Текст	= ТекстЗапросаРеквизиты();
	Результат		= Запрос.Выполнить();
	
	НомераТаблиц	= Новый Структура;
	НомераТаблиц.Вставить("ТаблицаРеквизитов", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперацию_ВключениеАвансовВПрочиеДоходыДляИП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И НЕ УчетнаяПолитикаОрганизаций.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)";
	
	СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	Если СписокОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаВключениеАвансовВПрочиеДоходыДляИП = ЗакрытиеМесяца.ГруппаПоВидуОперации(Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП);
	
	ВышестоящиеОперации = Новый Массив;
	Для Счетчик = 1 По Перечисления.ВидыРегламентныхОпераций.Количество() Цикл
		ВидОперации = Перечисления.ВидыРегламентныхОпераций.Получить(Счетчик - 1);
		Если ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации) > ГруппаВключениеАвансовВПрочиеДоходыДляИП Тогда
			ВышестоящиеОперации.Добавить(ВидОперации);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВышестоящиеОперации", ВышестоящиеОперации);
	Запрос.УстановитьПараметр("СписокОрганизаций",   СписокОрганизаций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) = 12
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) = 12
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации В(&ВышестоящиеОперации)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗакрытыхПериодов = Результат[0].Выгрузить();
	ТаблицаЗакрытыхПериодов.Индексы.Добавить("Дата, Организация");
	Отбор = Новый Структура("Дата, Организация");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Выборка.Организация, Выборка.Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		Если ТаблицаЗакрытыхПериодов.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			// Регламентная операция введена пользователем
			Продолжить;
		КонецЕсли;
		
		Попытка;
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации         = Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			НоваяОперация.РучнаяКорректировка = Истина;
			НоваяОперация.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'Не создана регламентная операция ""Включение авансов в прочие доходы для ИП""'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// РАСПРЕДЕЛЕНИЕ РАСХОДОВ ПО ВИДАМ ДЕЯТЕЛЬНОСТИ ИП

Функция ПодготовитьПараметрыРаспределениеРасходовЕНВДИП(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения	= Новый Структура;
	
	Запрос	= Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	Запрос.Текст	= ТекстЗапросаРеквизиты();
	Результат		= Запрос.Выполнить();
	
	НомераТаблиц	= Новый Структура;
	НомераТаблиц.Вставить("ТаблицаРеквизитов", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

// НАЧИСЛЕНИЕ СТРАХОВЫХ ВЗНОСОВ ИП ЗА СЕБЯ

Функция ПодготовитьПараметрыНачисленияСтраховыхВзносовИП(СтруктураШапки, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапки.Ссылка);
	
	Запрос.Текст = ТекстЗапросаРеквизиты();
	Результат = Запрос.Выполнить();
	
	НомераТаблиц = Новый Структура;
	НомераТаблиц.Вставить("ТаблицаРеквизитов", НомераТаблиц.Количество());
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат.Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

// Процедура обновления ИБ
//
Процедура ДобавитьРегламентнуюОперацию_НачислениеСтраховыхВзносовИП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	
	СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	Если СписокОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаНачислениеСтраховыхВзносовИП = ЗакрытиеМесяца.ГруппаПоВидуОперации(Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП);
	
	ВышестоящиеОперации = Новый Массив;
	Для Счетчик = 1 По Перечисления.ВидыРегламентныхОпераций.Количество() Цикл
		ВидОперации = Перечисления.ВидыРегламентныхОпераций.Получить(Счетчик - 1);
		Если ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации) > ГруппаНачислениеСтраховыхВзносовИП Тогда
			ВышестоящиеОперации.Добавить(ВидОперации);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВышестоящиеОперации", ВышестоящиеОперации);
	Запрос.УстановитьПараметр("СписокОрганизаций",   СписокОрганизаций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	МЕСЯЦ(РегламентнаяОперация.Дата) В (3, 6, 9, 12)
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.ВидОперации В(&ВышестоящиеОперации)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗакрытыхПериодов = Результат[0].Выгрузить();
	ТаблицаЗакрытыхПериодов.Индексы.Добавить("Дата, Организация");
	Отбор = Новый Структура("Дата, Организация");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Проверка необходимости регламентной операции
		Если УчетнаяПолитика.ПлательщикНДФЛ(Выборка.Организация, Выборка.Дата) И Месяц(Выборка.Дата) <> 12 Тогда
			Продолжить;
		ИначеЕсли (Месяц(Выборка.Дата)%3 <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		Если ТаблицаЗакрытыхПериодов.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			// Регламентная операция введена пользователем
			Продолжить;
		КонецЕсли;
		
		Попытка;
			НоваяОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяОперация, Выборка);
			НоваяОперация.ВидОперации         = Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП;
			НоваяОперация.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			НоваяОперация.РучнаяКорректировка = Истина;
			НоваяОперация.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'Не создана регламентная операция ""Начисление страховых взносов ИП""'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОНОВОГО ВЫПОЛНЕНИЯ

// Находит регламентную операцию по виду операции.
// Возвращает ссылку на регламентную операцию.
Функция НайтиДокумент(Период, Организация, ВидОперации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ВидОперации",   ВидОперации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентнаяОперация.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Организация = &Организация
	|	И РегламентнаяОперация.ВидОперации = &ВидОперации
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	РегламентнаяОперация.Ссылка,
	|	РегламентнаяОперация.Состояние";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.РегламентнаяОперация.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

// Находит "активные" регламентные операции, которые совпадают по составу ключевых реквизитов с переданной.
// Возвращает результат запроса, содержащий ссылки на "дубли".
Функция НайтиДубли(Период, Организация, ВидОперации, Ссылка) Экспорт
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН Тогда
		// Списание доп. расходов в учете УСН допустимо проводить не более одного раза за квартал
		НачалоПериода 	= НачалоКвартала(Период);
		КонецПериода	= КонецКвартала(Период);
	Иначе
		НачалоПериода 	= НачалоМесяца(Период);
		КонецПериода	= КонецМесяца(Период);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ВидОперации",   ВидОперации);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегламентнаяОперация.ВидОперации = &ВидОперации
	|	И РегламентнаяОперация.Организация = &Организация
	|	И РегламентнаяОперация.Ссылка <> &Ссылка
	|	И РегламентнаяОперация.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)";
	Возврат Запрос.Выполнить();
	
КонецФункции

// Возвращает упорядоченный массив рег.операций
// упорядочивание происходит в соотвествии с логикой бизнес-процесса Закрытие месяца
//
// Параметры:
//  МассивРегОпераций - Массив типа ДокументСсылка.РегламентнаяОперация - входящий списко рег.операций
//
// Возвращаемое значение:
//  Массив значений типа ДокументСсылка.РегламентнаяОперация
//
Функция УпорядочитьСписокРегОпераций(МассивРегОпераций) Экспорт
	Если ТипЗнч(МассивРегОпераций) <> Тип("Массив") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	СписокРегОпераций = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РегламентнаяОперация.Организация
	|		ИНАЧЕ РегламентнаяОперация.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	РегламентнаяОперация.Ссылка КАК Ссылка,
	|	ГОД(РегламентнаяОперация.Дата) КАК Год,
	|	МЕСЯЦ(РегламентнаяОперация.Дата) КАК Месяц,
	|	ВЫБОР РегламентнаяОперация.ВидОперации
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов)
	|			ТОГДА 2
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26)
	|			ТОГДА 3
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчета44)
	|			ТОГДА 3
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам)
	|			ТОГДА 3
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН)
	|			ТОГДА 3
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляИП)
	|			ТОГДА 3
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП)
	|			ТОГДА 3
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91)
	|			ТОГДА 4
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет)
	|			ТОГДА 4
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль)
	|			ТОГДА 4
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РеформацияБаланса)
	|			ТОГДА 4
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Группа,
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ИЛИ РегламентнаяОперация.Организация.ГоловнаяОрганизация = РегламентнаяОперация.Организация
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПриоритетГоловной
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Ссылка В(&СписокРегОпераций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год,
	|	Месяц,
	|	Группа,
	|	ГоловнаяОрганизация,
	|	ПриоритетГоловной";
	
	Запрос.УстановитьПараметр("СписокРегОпераций", МассивРегОпераций);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокРегОпераций.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокРегОпераций;
	
КонецФункции

Процедура ЗапуститьВыполнениеИзФормы(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура("ВыполненоУспешно, РегламентнаяОперация", Истина, СтруктураПараметров.РегламентнаяОперация);
	
	РегламентнаяОперацияОбъект = СтруктураПараметров.РегламентнаяОперация.ПолучитьОбъект();
	ДанныеДляЗаполнения.ВыполненоУспешно = РегламентнаяОперацияОбъект.ВыполнитьОперацию(Истина);
	ДанныеДляЗаполнения.Вставить("Состояние", РегламентнаяОперацияОбъект.Состояние);
	ДанныеДляЗаполнения.Вставить("ВидОперации", РегламентнаяОперацияОбъект.ВидОперации);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ВыполнитьУпорядоченныйСписокРегОпераций(СтруктураПараметров, АдресХранилища, МассивРегОпераций = Неопределено) Экспорт
	
	Если СтруктураПараметров.Свойство("МассивРегОпераций") Тогда
		МассивРегОпераций = СтруктураПараметров.МассивРегОпераций;
	КонецЕсли;
	
	Если МассивРегОпераций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСообщений            = Новый Массив();
	МассивОшибочныхРегОпераций = Новый Массив();
	ДанныеДляЗаполнения        = Новый Структура();
	
	КоличествоРегОпераций = МассивРегОпераций.Количество();
	Если КоличествоРегОпераций = 0 Тогда
		Возврат;
	Иначе
		// Если рег.операций больше одной, то упорядочим их для правильного выполнению
		Если КоличествоРегОпераций > 1 Тогда
			МассивРегОпераций = УпорядочитьСписокРегОпераций(МассивРегОпераций);
		КонецЕсли;
		
		УспешноВыполнена = ВыполнитьСписокРегОпераций(МассивРегОпераций, МассивОшибочныхРегОпераций);
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("МассивРегОпераций",          МассивРегОпераций);
	ДанныеДляЗаполнения.Вставить("МассивОшибочныхРегОпераций", МассивОшибочныхРегОпераций);
	ДанныеДляЗаполнения.Вставить("МассивСообщений",            МассивСообщений);
	ДанныеДляЗаполнения.Вставить("УспешноВыполнена",           УспешноВыполнена);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения,         АдресХранилища);

КонецПроцедуры

Функция ВыполнитьСписокРегОпераций(МассивРегОпераций, МассивОшибочныхРегОпераций)
	
	КоличествоРегОпераций = МассивРегОпераций.Количество();
	УспешноВыполненСписокОпераций = Истина;
	Для инд = 0 По КоличествоРегОпераций - 1 Цикл
		РегОперация    = МассивРегОпераций[инд];
		ДокументОбъект = РегОперация.ПолучитьОбъект();
		ВидРегОперации = ДокументОбъект.ВидОперации;
		ДокументОбъект.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		
		УспешноВыполнена = ДокументОбъект.ВыполнитьОперацию();
		
		Если ДокументОбъект.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
			МассивОшибочныхРегОпераций.Добавить();
			МассивОшибочныхРегОпераций[МассивОшибочныхРегОпераций.Количество() - 1] = 
				Новый Структура("Организация, Дата, РегламентнаяОперация, ВидОперации",
				ДокументОбъект.Организация, ДокументОбъект.Дата, РегОперация, ВидРегОперации);
		КонецЕсли;
		
		УспешноВыполненСписокОпераций = УспешноВыполненСписокОпераций И УспешноВыполнена;
	КонецЦикла;
	
	Возврат УспешноВыполненСписокОпераций;
	
Конецфункции

//////////////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СЛУЖЕБНЫМИ СООБЩЕНИЯМИ

Процедура ЗаполнитьОписаниеОшибок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка,
	|	Ошибки.НомерСтроки КАК НомерСтроки,
	|	Ошибки.Описание,
	|	Ошибки.СсылкаНаОшибочныйОбъект
	|ИЗ
	|	Документ.РегламентнаяОперация.УдалитьОшибки КАК Ошибки
	|ГДЕ
	|	НЕ Ошибки.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаСсылка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		Объект = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		Ошибки = ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках();
		
		Выборка = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(
				Ошибки,
				Выборка.Описание, 
				Выборка.СсылкаНаОшибочныйОбъект);
			
		КонецЦикла;
		
		Объект.ОписаниеОшибок = ЗакрытиеМесяцаСообщенияОбОшибках.ОписаниеОшибок(
			Ошибки,
			Объект.Дата,
			Объект.Организация,
			Объект.ВидОперации);
			
		Объект.УдалитьОшибки.Очистить();
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли
