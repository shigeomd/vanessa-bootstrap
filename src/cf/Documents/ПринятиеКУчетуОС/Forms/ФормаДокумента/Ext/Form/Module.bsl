////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		УстановитьСчетУчетаВнеоборотногоАктива(ЭтаФорма);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПринятиеКУчетуОС";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ТекущийОбъект.ОбъектСтроительства = Неопределено;
	ИначеЕсли ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ТекущийОбъект.Номенклатура = Неопределено;
	КонецЕсли;

	// Если порядок погашения стоимости (БУ) отличается от амортизации, очищаются некоторые параметры амортизации (БУ)
	Если ТекущийОбъект.ПорядокПогашенияСтоимостиБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		ТекущийОбъект.ПредполагаемыйОбъемПродукцииБУ = 0;
		ТекущийОбъект.ПараметрВыработкиБУ = Неопределено;
		ТекущийОбъект.КоэффициентУскоренияБУ = 0;
		ТекущийОбъект.ГрафикАмортизацииПоГодуБУ = Неопределено;
		ТекущийОбъект.СпособНачисленияАмортизацииБУ = Неопределено;
	КонецЕсли;

	// Если порядок погашения стоимости (БУ) не подразумевает начисление амортизации (износа), очищаются все параметры амортизации (БУ)
	Если ТекущийОбъект.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету
			ИЛИ ТекущийОбъект.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		ТекущийОбъект.СрокПолезногоИспользованияБУ = 0;
		ТекущийОбъект.ГодоваяНормаАмортизацииБУ = 0;
		ТекущийОбъект.НачислятьАмортизациюБУ = 0;
		ТекущийОбъект.СчетНачисленияАмортизации = Неопределено;
	КонецЕсли;

	// В зависимости от выбранного способа амортизации (БУ) нужно очистить неиспользуемые параметры амортизации (БУ)
	Если ЗначениеЗаполнено(ТекущийОбъект.СпособНачисленияАмортизацииБУ) Тогда

		// зависимость объема работ от способа амортизации
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			ТекущийОбъект.ПредполагаемыйОбъемПродукцииБУ = 0;
			ТекущийОбъект.ПараметрВыработкиБУ = Неопределено;
		КонецЕсли;

		// зависимость коэффициента ускорения от способа амортизации
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			ТекущийОбъект.КоэффициентУскоренияБУ = 0;
		КонецЕсли;

		// зависимость годовой нормы амортизации от способа амортизации
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			ТекущийОбъект.ГодоваяНормаАмортизацииБУ = 0;
		КонецЕсли;

		// зависимость годового графика амортизации от способа амортизации
		Если ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования
				И ТекущийОбъект.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			ТекущийОбъект.ГрафикАмортизацииПоГодуБУ = Неопределено;
		КонецЕсли;

	КонецЕсли;

	// Если вариант включения в состав расходов (НУ) отличается от амортизации, параметры амортизации (НУ) очищаются
	Если ТекущийОбъект.ПорядокВключенияСтоимостиВСоставРасходовНУ <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		ТекущийОбъект.НачислятьАмортизациюНУ        = Ложь;
		ТекущийОбъект.СпособНачисленияАмортизацииНУ = Неопределено;
		ТекущийОбъект.СрокПолезногоИспользованияНУ  = 0;
		ТекущийОбъект.СпециальныйКоэффициентНУ      = 0;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
	Справочники.ВидыНалоговИПлатежейВБюджет.СоздатьПоставляемыеЭлементы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма")
			И ВладелецФормы.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаЭлемента" Тогда
		Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
			Оповестить("ИзмененаИнформацияОС", ВладелецФормы.Параметры.Ключ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		УстановитьВидимостьПоВидуОперации(ЭтаФорма);
		УстановитьВидимостьПорядкаПогашенияСтоимостиБУ(ЭтаФорма);
		УстановитьСчетУчетаВнеоборотногоАктива(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ТекущаяСтраница = Элементы.ГруппаНалоговыйУчетУСН Тогда
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Объект.СчетУчетаВнеоборотногоАктива = ПолучитьСчетУчетаНоменклатуры(Объект.Организация, Объект.Номенклатура, Объект.Склад);
	Иначе
		Объект.СчетУчетаВнеоборотногоАктива = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаВнеоборотногоАктиваПриИзменении(Элемент)
	
	Если НЕ Объект.СчетУчетаВнеоборотногоАктива = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств") Тогда
		
		Объект.УказатьПервоначальнуюСтоимость = Истина;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокПогашенияСтоимостиБУПриИзменении(Элемент)

	Если Объект.ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации") Тогда
		Объект.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОСвОрганизации");
		Объект.СчетНачисленияАмортизации = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АмортизацияОС_01");
	Иначе
		Объект.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОСвОрганизации");
		Объект.СчетНачисленияАмортизации = Неопределено;
	КонецЕсли;

	ПроверитьУстановитьПорядокВключенияСтоимостиВСоставРасходов(ЭтаФорма);

	УстановитьВидимостьПорядкаПогашенияСтоимостиБУ(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)

	УстановитьВидимостьПараметровАмортизацииБУ(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияБУПриИзменении(Элемент)

	РасшифровкаСрокаПолезногоИспользованияБУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияБУ);

КонецПроцедуры

&НаКлиенте
Процедура ГодоваяНормаАмортизацииБУПоЕНАОФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Список     = Новый СписокЗначений();
	СписокНорм = ПолучитьСписокВыбораГодовыхНормАмортизации();
	Список.ЗагрузитьЗначения(СписокНорм);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИзСпискаГодоваяНормаАмортизацииЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзСписка(Оповещение, Список, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГодоваяНормаАмортизацииБУПоЕНАОФНа1000КмНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Список     = Новый СписокЗначений();
	СписокНорм = ПолучитьСписокВыбораГодовыхНормАмортизации(Истина);
	Список.ЗагрузитьЗначения(СписокНорм);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИзСпискаГодоваяНормаАмортизацииЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзСписка(Оповещение, Список, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(Элемент)

	Объект.СпециальныйКоэффициентНУ = 1;
	УстановитьВидимостьПорядкаВключенияВСтоимостьНУ(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УказатьПервоначальнуюСтоимостьПриИзменении(Элемент)
	
	Если НЕ Объект.УказатьПервоначальнуюСтоимость Тогда
		Объект.ПервоначальнаяСтоимостьНУ	= 0;
		Объект.РеквизитыДокументаОплаты		= "";
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачислятьАмортизациюНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)

	РасшифровкаСрокаПолезногоИспользованияНУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияНУ);

КонецПроцедуры

&НаКлиенте
Процедура ВключитьАмортизационнуюПремиюВСоставРасходовПриИзменении(Элемент)

	Если НЕ ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
		Если ПараметрыАмортизационнойПремииЗаполнены(Объект) Тогда
			ТекстВопроса = НСтр("ru = 'Установленные параметры амортизационной премии будут очищены.
				|Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ВопросВключитьАмортизацоннуюПремиюВСоставРасходовЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			УстановитьВидимостьПараметровАмортизационнойПремии(ЭтаФорма);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.СпособыОтраженияРасходовПоАмортизации) Тогда
			СтруктураПараметровАмортизационнойПремии = УчетОСВызовСервера.ПолучитьПараметрыНачисленияАмортизационнойПремии(Объект.СпособыОтраженияРасходовПоАмортизации);
			ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметровАмортизационнойПремии);
			СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элементы.СчетУчетаЗатратПоАмортизационнойПремии);
		КонецЕсли;
		УстановитьВидимостьПараметровАмортизационнойПремии(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элемент)

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаЗатратПоАмортизационнойПремии);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Подразделение, Организация, ПодразделениеПоУмолчанию",
		"СубконтоПоАмортизационнойПремии1", "СубконтоПоАмортизационнойПремии2", "СубконтоПоАмортизационнойПремии3",
		"ПодразделениеОрганизацииПоАмортизационнойПремии", Объект.Организация, Неопределено);
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаЗатратПоАмортизационнойПремии, Объект, ПоляОбъекта,,ЗначенияСубконто);

КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииНУПриИзменении(Элемент)
	
	Если НЕ Объект.СпособНачисленияАмортизацииНУ = ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.ПоЕНАОФ") Тогда
		Объект.КоэффициентАмортизацииНУ	= 0;
		Объект.СпециальныйКоэффициентНУ	= 0;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияУСНПриИзменении(Элемент)

	РасшифровкаСрокаПолезногоИспользованияУСН =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияУСН);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОС

&НаКлиенте
Процедура ОСПередУдалением(Элемент, Отказ)

	// Есть ли оплаты для этого ОС?
	МассивОплат = Объект.Оплата.НайтиСтроки(Новый Структура("ОсновноеСредство", Элемент.ТекущиеДанные.ОсновноеСредство));
	Если МассивОплат.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='При удалении основного средства, на закладке ""Налоговый учет УСН"" будет очищена информация о его оплатах.
			|Продолжить?'");
			
		// Удалим строку в описании оповещения
		Отказ = Истина;
		
		ЭлементКоллекции = Объект.ОС.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		ИндексСтроки = Объект.ОС.Индекс(ЭлементКоллекции);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивОплат", МассивОплат);
		ДополнительныеПараметры.Вставить("ИндексСтроки", ИндексСтроки);
		Оповещение = Новый ОписаниеОповещения("ВопросОСПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСПриИзменении(Элемент)

	СписокОСИзменен = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)

	ЭлементКоллекции = Элементы.ОС.ТекущиеДанные;
	Если ЗначениеЗаполнено(ЭлементКоллекции.ОсновноеСредство) Тогда
		ЭлементКоллекции.ИнвентарныйНомер = ПолучитьКод(ЭлементКоллекции.ОсновноеСредство);
		ЭлементКоллекции.СпособУчетаНДС = ПредопределенноеЗначение("Перечисление.СпособыУчетаНДС.Распределяется"); 
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Оплата

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если СписокОСИзменен = Истина Тогда
		ЗаполнитьПараметрыВыбораОСДляОплатУСН();
	КонецЕсли;

КонецПроцедуры    

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)

	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма));

	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьПоНаименованиюСервер(ОсновноеСредство);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;

	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыПоОбъектуСтроительства(Команда)

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Заполнение возможно только в непроведенном документе'"), 60);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Объект строительства'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ОбъектСтроительства", , Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаВнеоборотногоАктива) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Счет учета внеоборотного актива'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.СчетУчетаВнеоборотногоАктива", , Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	СтруктураСтоимости = УчетОСВызовСервера.РассчитатьСтоимостьОбъектаСтроительства(Объект.Организация,
		Объект.ПодразделениеОрганизации, КонецМесяца(Объект.Дата), Объект.СчетУчетаВнеоборотногоАктива,
		Объект.ОбъектСтроительства);

	ЗаполнитьЗначенияСвойств(Объект, СтруктураСтоимости);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СчетУчетаЗатратПоАмортизационнойПремии

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаЗатратПоАмортизационнойПремии");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();

	ТекущаяДатаДокумента = Объект.Дата;

	УстановитьСчетУчетаИСчетНачисленияАмортизацииБУ(ЭтаФорма);
	
	ЭтаФорма.Элементы.ПорядокПогашенияСтоимостиБУ.СписокВыбора.Очистить();
	ЭтаФорма.Элементы.ПорядокПогашенияСтоимостиБУ.СписокВыбора.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);
	ЭтаФорма.Элементы.ПорядокПогашенияСтоимостиБУ.СписокВыбора.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается);

	ВключитьАмортизационнуюПремиюВСоставРасходов = ПараметрыАмортизационнойПремииЗаполнены(Объект);
	
	УстановитьВидимостьАмортизационнойПремии();

	РасшифровкаСрокаПолезногоИспользованияБУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияБУ);
	РасшифровкаСрокаПолезногоИспользованияНУ =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияНУ);
	РасшифровкаСрокаПолезногоИспользованияУСН =
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Объект.СрокПолезногоИспользованияУСН);

	ПроверитьУстановитьПорядокВключенияСтоимостиВСоставРасходов(ЭтаФорма);

	УправлениеФормой(ЭтаФорма);

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаЗатратПоАмортизационнойПремии);

	ЗаполнитьПараметрыВыбораОСДляОплатУСН();
	
	Элементы.РасшифровкаСрокаПолезногоИспользованияНУ.Видимость = ЭтаФорма.ПлательщикНалогаНаПрибыль ИЛИ ЭтаФорма.ПлательщикНДФЛ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры
	
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПлательщикНДФЛ 			  = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);

КонецПроцедуры        

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	//Заполнение по умолчанию реквизитов объекта - начисление амортизации, линейный способ
	Если НЕ ЗначениеЗаполнено(Форма.Объект.ПорядокПогашенияСтоимостиБУ) Тогда
		Форма.Объект.ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации");
		Форма.Объект.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
		Форма.Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
	КонецЕсли;
	
	УстановитьВидимостьПоВидуОперации(Форма);
	УстановитьВидимостьПараметровАмортизацииБУ(Форма);
	УстановитьВидимостьПорядкаПогашенияСтоимостиБУ(Форма);
	УстановитьВидимостьПорядкаВключенияВСтоимостьНУ(Форма);
	УстановитьВидимостьПараметровАмортизационнойПремии(Форма);
	
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Элементы.УказатьПервоначальнуюСтоимость.Доступность	= Объект.СчетУчетаВнеоборотногоАктива = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств");
	
	Элементы.ПервоначальнаяСтоимостьНУ.Доступность	= Объект.УказатьПервоначальнуюСтоимость;
	Элементы.РеквизитыДокументаОплаты.Доступность	= Объект.УказатьПервоначальнуюСтоимость;
	
	СпособНачисленияЛинейный	= Объект.СпособНачисленияАмортизацииНУ = ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.Линейный");
	
	Элементы.КоэффициентАмортизацииНУ.Доступность		= Объект.НачислятьАмортизациюНУ И НЕ СпособНачисленияЛинейный;
	Элементы.СпециальныйКоэффициентНУ.Доступность		= Объект.НачислятьАмортизациюНУ И НЕ СпособНачисленияЛинейный;

	Если Форма.Объект.ОС.Количество() = 0 Тогда
		Форма.Элементы.Оплата.ТолькоПросмотр = Истина;
	Иначе
		Форма.Элементы.Оплата.ТолькоПросмотр = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораГодовыхНормАмортизации(Знач На1000КмПробега = Ложь)

	Если На1000КмПробега Тогда
		ИмяРеквизита = "ПроцентОтСтоимостиМашины";
	Иначе
		ИмяРеквизита = "НормаАмортизационныхОтчислений";
	КонецЕсли;
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "ОсновноеСредство");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОС.ОсновноеСредство.ШифрПоЕНАОФ." + ИмяРеквизита + " КАК Норма
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|ГДЕ
	|	(НЕ ТаблицаОС.ОсновноеСредство.ШифрПоЕНАОФ.Ссылка ЕСТЬ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Норма";
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Норма");

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыАмортизационнойПремииЗаполнены(Знач Объект)

	Если Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0
			И НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗатратПоАмортизационнойПремии)
			И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии1)
			И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии2)
			И НЕ ЗначениеЗаполнено(Объект.СубконтоПоАмортизационнойПремии3) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьУстановитьПорядокВключенияСтоимостиВСоставРасходов(Форма)

	Если Форма.Объект.ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается")
			И Форма.Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ <> ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы") Тогда

		Форма.Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
		Форма.Модифицированность = Истина;

		ШаблонСообщения = НСтр("ru = 'В поле ""Порядок включения стоимости в состав расходов:"" на закладке ""Налоговый учет"" установлено значение ""%1""'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы"));
		#Если Клиент Тогда
		ПоказатьОповещениеПользователя(ТекстСообщения);
		#Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		#КонецЕсли

		УстановитьВидимостьПорядкаВключенияВСтоимостьНУ(Форма);

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)

	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);
	Результат.Вставить("ИмяТабличнойЧасти", "ОС");
	Результат.Вставить("ПолучатьИнвентарныйНомерИзКода", Истина);

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоНаименованиюСервер(Знач ОсновноеСредство)

	УчетОС.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма), ОсновноеСредство);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3, Подразделение",
		"СубконтоПоАмортизационнойПремии1", "СубконтоПоАмортизационнойПремии2", "СубконтоПоАмортизационнойПремии3", "ПодразделениеОрганизацииПоАмортизационнойПремии");

	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3, Подразделение",
		"ЗаголовокСубконто1", "ЗаголовокСубконто2", "ЗаголовокСубконто3", "ЗаголовокПодразделение");

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПоВидуОперации(Форма)

	ВидОперации = Форма.Объект.ВидОперации;
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование") Тогда
		Форма.Элементы.ГруппаСтраницыВнеоборотныеАктивы.ТекущаяСтраница = Форма.Элементы.ГруппаОсновныеСредстваСоСклада;
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства") Тогда
		Форма.Элементы.ГруппаСтраницыВнеоборотныеАктивы.ТекущаяСтраница = Форма.Элементы.ГруппаОбъектыСтроительства;
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации") Тогда
		Форма.Элементы.ГруппаСтраницыВнеоборотныеАктивы.ТекущаяСтраница = Форма.Элементы.ГруппаПоРезультатамИнвентаризации;
	КонецЕсли;

	Форма.Элементы.ГруппаСтраницыАмортизационнаяПремия.ТекущаяСтраница =
		?(ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации"),
			Форма.Элементы.ГруппаСтраницаАмортизационнаяПремияНеДоступна,
			Форма.Элементы.ГруппаСтраницаАмортизационнаяПремия);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПараметровАмортизацииБУ(Форма)

	СпособНачисленияАмортизацииБУ = Форма.Объект.СпособНачисленияАмортизацииБУ;
	Если СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный") Тогда
		Форма.Элементы.ГруппаСтраницыПараметрыАмортизацииБУ.ТекущаяСтраница = Форма.Элементы.ГруппаЛинейный;
	ИначеЕсли СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования") Тогда
		Форма.Элементы.ГруппаСтраницыПараметрыАмортизацииБУ.ТекущаяСтраница = Форма.Элементы.ГруппаПоСуммеЧиселЛетИспользования;
	ИначеЕсли СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка") Тогда
		Форма.Элементы.ГруппаСтраницыПараметрыАмортизацииБУ.ТекущаяСтраница = Форма.Элементы.ГруппаУменьшаемогоОстатка;
	ИначеЕсли СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции") Тогда
		Форма.Элементы.ГруппаСтраницыПараметрыАмортизацииБУ.ТекущаяСтраница = Форма.Элементы.ГруппаПропорциональноОбъемуПродукции;
	ИначеЕсли СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФ") Тогда
		Форма.Элементы.ГруппаСтраницыПараметрыАмортизацииБУ.ТекущаяСтраница = Форма.Элементы.ГруппаПоЕНАОФ;
	ИначеЕсли СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега") Тогда
		Форма.Элементы.ГруппаСтраницыПараметрыАмортизацииБУ.ТекущаяСтраница = Форма.Элементы.ГруппаПоЕНАОФНа1000кмПробега;
	Иначе
		Форма.Элементы.ГруппаСтраницыПараметрыАмортизацииБУ.ТекущаяСтраница = Форма.Элементы.ГруппаСпособНачисленияАмортизацииБУНеУказан;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСчетУчетаВнеоборотногоАктива(Форма)
	
	ВидОперации = Форма.Объект.ВидОперации;
	
	СчетПриобретениеОбъектовОсновныхСредств = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств");
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование") Тогда 
		
		СвойстваСчетаПриобретения = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетПриобретениеОбъектовОсновныхСредств);
		
		СчетУчетаВнеоборотногоАктива = ?(СвойстваСчетаПриобретения.ЗапретитьИспользоватьВПроводках,
										 Неопределено,
										 СчетПриобретениеОбъектовОсновныхСредств);
		Форма.Объект.СчетУчетаВнеоборотногоАктива = СчетУчетаВнеоборотногоАктива;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства") Тогда
		
		СчетСтроительствоОбъектовОсновныхСредств = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств");
   		СвойстваСчетаСтроительства = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетСтроительствоОбъектовОсновныхСредств);
		
		СчетУчетаВнеоборотногоАктива = ?(СвойстваСчетаСтроительства.ЗапретитьИспользоватьВПроводках,
										 Неопределено,
										 СчетСтроительствоОбъектовОсновныхСредств);
		Форма.Объект.СчетУчетаВнеоборотногоАктива = СчетУчетаВнеоборотногоАктива;
		
	КонецЕсли;

	Форма.Элементы.УказатьПервоначальнуюСтоимость.Доступность = (Форма.Объект.СчетУчетаВнеоборотногоАктива = СчетПриобретениеОбъектовОсновныхСредств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСчетУчетаИСчетНачисленияАмортизацииБУ(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.Объект.СчетУчета) Тогда
		Форма.Объект.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОСвОрганизации");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.СчетНачисленияАмортизации) Тогда
		Форма.Объект.СчетНачисленияАмортизации = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АмортизацияОС_01");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПорядкаПогашенияСтоимостиБУ(Форма)

	ПорядокПогашенияСтоимостиБУ = Форма.Объект.ПорядокПогашенияСтоимостиБУ;
	Если ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации") Тогда
		Форма.Элементы.ГруппаСтраницыПогашениеСтоимости.ТекущаяСтраница = Форма.Элементы.ГруппаБУНачислениеАмортизации;
	ИначеЕсли ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается") Тогда
		Форма.Элементы.ГруппаСтраницыПогашениеСтоимости.ТекущаяСтраница = Форма.Элементы.ГруппаБУСтоимостьНеПогашается;
	Иначе
		Форма.Элементы.ГруппаСтраницыПогашениеСтоимости.ТекущаяСтраница = Форма.Элементы.ГруппаБУПорядокПогашенияСтоимостиНеУказан;
	КонецЕсли;

	Форма.Элементы.ГруппаСтраницыПорядокВключенияСтоимостиВСоставРасходовНУ.ТекущаяСтраница =
		?(ПорядокПогашенияСтоимостиБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается"),
	    	Форма.Элементы.ГруппаПорядокВключенияСтоимостиВСоставРасходовНУТолькоПросмотр,
			Форма.Элементы.ГруппаПорядокВключенияСтоимостиВСоставРасходовНУ);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьАмортизационнойПремии()

	Элементы.ГруппаАмортизационнаяПремия.Видимость = ЭтаФорма.ПлательщикНалогаНаПрибыль;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПараметровАмортизационнойПремии(Форма)

	Форма.Элементы.ГруппаСтраницыПараметрыАмортизационнойПремии.ТекущаяСтраница =
		?(Форма.ВключитьАмортизационнуюПремиюВСоставРасходов,
			Форма.Элементы.ГруппаПараметрыАмортизационнойПремии,
			Форма.Элементы.ГруппаАмортизационнаяПремияНеИспользуется);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПорядкаВключенияВСтоимостьНУ(Форма)

	ПорядокВключенияСтоимостиВСоставРасходовНУ = Форма.Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ;
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации") Тогда
		Форма.Элементы.ГруппаСтраницыВключениеСтоимостиВСоставРасходов.ТекущаяСтраница = Форма.Элементы.ГруппаНУНачислениеАмортизации;
		Форма.Элементы.ГруппаСтраницыАмортизационнаяПремия.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаАмортизационнаяПремия;
	ИначеЕсли ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
		Форма.Элементы.ГруппаСтраницыВключениеСтоимостиВСоставРасходов.ТекущаяСтраница = Форма.Элементы.ГруппаНУВключениеВРасходыПриПринятииКУчету;
		Форма.Элементы.ГруппаСтраницыАмортизационнаяПремия.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаАмортизационнаяПремияНеДоступна;
	ИначеЕсли ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы") Тогда
		Форма.Элементы.ГруппаСтраницыВключениеСтоимостиВСоставРасходов.ТекущаяСтраница = Форма.Элементы.ГруппаНУСтоимостьНеВключаетсяВРасходы;
		Форма.Элементы.ГруппаСтраницыАмортизационнаяПремия.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаАмортизационнаяПремияНеДоступна;	
	Иначе
		Форма.Элементы.ГруппаСтраницыВключениеСтоимостиВСоставРасходов.ТекущаяСтраница = Форма.Элементы.ГруппаНУПорядокВключенияСтоимостиВСоставРасходовНеУказан;
		Форма.Элементы.ГруппаСтраницыАмортизационнаяПремия.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаАмортизационнаяПремияНеДоступна;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПоместитьОСВХранилище()

	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(Знач ВыбранноеЗначение)

	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	
	МассивОсновныхСредств = Объект.ОС.Выгрузить(ДобавленныеСтроки, "ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство");	
	ОсновныеСредстваКоды = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОсновныхСредств, "Код");
	
	Для каждого Строка Из ДобавленныеСтроки Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ИнвентарныйНомер) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураКоды = ОсновныеСредстваКоды.Получить(Строка.ОсновноеСредство);
		Если СтруктураКоды <> Неопределено Тогда 
			Строка.ИнвентарныйНомер = СтруктураКоды.Код;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаНоменклатуры(Знач Организация, Знач Номенклатура, Знач Склад)

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад);
	Возврат СчетаУчета.СчетУчета;

КонецФункции

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьВидимостьАмортизационнойПремии();
	
	ПроверитьУстановитьПорядокВключенияСтоимостиВСоставРасходов(ЭтаФорма);
	
	Элементы.РасшифровкаСрокаПолезногоИспользованияНУ.Видимость = ЭтаФорма.ПлательщикНалогаНаПрибыль ИЛИ ЭтаФорма.ПлательщикНДФЛ;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьВидимостьАмортизационнойПремии();
	
	ПроверитьУстановитьПорядокВключенияСтоимостиВСоставРасходов(ЭтаФорма);
	
	Элементы.РасшифровкаСрокаПолезногоИспользованияНУ.Видимость = ЭтаФорма.ПлательщикНалогаНаПрибыль ИЛИ ЭтаФорма.ПлательщикНДФЛ;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКод(Знач ОС)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОС, "Код");
	
КонецФункции

&НаКлиенте
Процедура ВыбратьИзСпискаГодоваяНормаАмортизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ГодоваяНормаАмортизацииБУ = Результат.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВыбораОСДляОплатУСН()

	СписокОС.ЗагрузитьЗначения(Объект.ОС.Выгрузить(, "ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство"));
	Если СписокОС.Количество() = 0 Тогда
		ПараметрыВыбора = Новый Массив;
	Иначе
		ПараметрВыбораПоОС = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СписокОС.ВыгрузитьЗначения()));
		ПараметрыВыбора = Новый Массив;
		ПараметрыВыбора.Добавить(ПараметрВыбораПоОС);
	КонецЕсли;
	Элементы.ОплатаОсновноеСредство.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	СписокОСИзменен = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)

	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)

	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);

КонецПроцедуры

&НаКлиенте
Процедура ВопросОСПередУдалениемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаОплат Из ДополнительныеПараметры.МассивОплат Цикл
			Объект.Оплата.Удалить(СтрокаОплат);
		КонецЦикла;
		Объект.ОС.Удалить(ДополнительныеПараметры.ИндексСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВключитьАмортизацоннуюПремиюВСоставРасходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0;
		Объект.СчетУчетаЗатратПоАмортизационнойПремии = Неопределено;
		Объект.ПодразделениеОрганизацииПоАмортизационнойПремии = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии1 = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии2 = Неопределено;
		Объект.СубконтоПоАмортизационнойПремии3 = Неопределено;
		СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элементы.СчетУчетаЗатратПоАмортизационнойПремии);
	Иначе
		ВключитьАмортизационнуюПремиюВСоставРасходов = Истина;
	КонецЕсли;
	УстановитьВидимостьПараметровАмортизационнойПремии(ЭтаФорма);
	
КонецПроцедуры
