////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма,Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
		
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПринятиеКУчетуНМА";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ВидОбъектаУчета) Тогда
		ВидОперацииПриИзмененииСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

// Закладка "Нематериальный актив"

&НаКлиенте
Процедура НематериальныйАктивНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеВнеоборотнымиАктивамиКлиент.ОткрытьФормуВыбораНМА(Объект.ВидОбъектаУчета, СтандартнаяОбработка, Элемент, "ПринятиеКУчетуНМА");
	
КонецПроцедуры

// Закладка "Бухгалтерский учет"

&НаКлиенте
Процедура НачислятьАмортизациюБУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	Если Объект.СпособНачисленияАмортизацииБУ
			<> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции") Тогда
		Объект.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
	КонецЕсли;
	
	Если Объект.СпособНачисленияАмортизацииБУ
			<> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка") Тогда
		Объект.КоэффициентБУ = 0;
	Иначе
		Объект.КоэффициентБУ = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияБУПриИзменении(Элемент)
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(ЭтаФорма);
	
КонецПроцедуры

// Закладка "Налоговый учет"

&НаКлиенте
Процедура НачислятьАмортизациюНУПриИзменении(Элемент)
	
	Объект.ПорядокСписанияНИОКРНаРасходыНУ = ?(Объект.НачислятьАмортизациюНУ, 
		ПредопределенноеЗначение("Перечисление.ПорядокСписанияНИОКРНУ.Равномерно"),
		ПредопределенноеЗначение("Перечисление.ПорядокСписанияНИОКРНУ.ПриПринятииКУчету"));
		
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСписанияНИОКРНаРасходыНУПриИзменении(Элемент)
	
	Объект.НачислятьАмортизациюНУ = (Объект.ПорядокСписанияНИОКРНаРасходыНУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокСписанияНИОКРНУ.Равномерно"));
		
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
	
КонецПроцедуры

// Закладка "Налоговый учет УСН"

&НаКлиенте
Процедура СрокПолезногоИспользованияУСНПриИзменении(Элемент)
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура РассчитатьСтоимостьНУ(Команда)
	
	СтоимостьНМА_НУ = СтоимостьНМА_НУ(Объект.СчетУчетаВнеоборотногоАктива);
	
	Объект.СтоимостьНУ = СтоимостьНМА_НУ.СтоимостьНУ;
	Объект.СтоимостьПР = СтоимостьНМА_НУ.СтоимостьПР;
	Объект.СтоимостьВР = СтоимостьНМА_НУ.СтоимостьВР;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьБУ(Команда)
	
	Объект.СтоимостьБУ = СтоимостьНМА_БУ(Объект.СчетУчетаВнеоборотногоАктива);
	
	Если ЭтаФорма.Предприниматель Тогда
		Объект.СтоимостьНУ = Объект.СтоимостьБУ;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СпособОтраженияРасходов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособОтраженияРасходов");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НачислятьАмортизациюБУ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НачислятьАмортизациюНУ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьСчетаУчета();
	КонецЕсли;
	
	ЗаполнитьСписокВыбораДляСпособаНачисленияАмортизацииБУ(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПрименениеУСН       = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименениеУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	Предприниматель     = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	ПоддержкаПБУ18      = УчетнаяПолитика.ПоддержкаПБУ18(Объект.Организация, Объект.Дата);
	ОСНЮрЛицо 			= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	ЮрЛицо = (НЕ Форма.Предприниматель И НЕ Форма.ПрименениеУСН);
	
	// Зависимость видимости полей от ВидОбъектаУчета
	Если Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив") Тогда
		Элементы.НематериальныйАктив.Заголовок             = "Нематериальный актив";
		Элементы.ГруппаПараметрыАмортизации.Заголовок      = "Параметры амортизации";
		Элементы.ГруппаБУНачислениеАмортизации.Заголовок   = "Параметры амортизации";
		Элементы.СпособОтраженияРасходов.Заголовок         = "Способ отражения расходов по амортизации";
		Элементы.СпособНачисленияАмортизацииБУ.Заголовок   = "Способ начисления амортизации";
		Элементы.СрокПолезногоИспользованияБУ.Заголовок    = "Срок полезного использования";
		Элементы.НачислятьАмортизациюБУ.Заголовок          = "Начислять амортизацию";
		Элементы.СрокПолезногоИспользованияНУ.Заголовок    = "Срок полезного использования (НУ)";
		
		Элементы.СпециальныйКоэффициентНУ.Видимость        = Объект.НачислятьАмортизациюНУ И ЮрЛицо;
		Элементы.СчетНачисленияАмортизацииНУ.Видимость     = Объект.НачислятьАмортизациюНУ И ЮрЛицо 
			И НЕ Объект.НачислятьАмортизациюБУ;
		Элементы.СпособПоступления.Видимость               = Истина;
		Элементы.СчетНачисленияАмортизации.Видимость       = Истина;
		
		Элементы.ГруппаНачислятьАмортизациюНУ.ТекущаяСтраница = Элементы.ГруппаНачислятьАмортизациюНУНМА;
		
		Элементы.ГруппаПараметрыАмортизации.Подсказка 				 = "";	
		Элементы.ГруппаСрокПолезногоИспользованияНУ_НИОКР.Подсказка  = "";
		
		// Зависимость видимости полей от НачислятьАмортизациюНУ
		Если Объект.НачислятьАмортизациюНУ Тогда
			Элементы.СтраницыНУНачислениеАмортизации.ТекущаяСтраница = Элементы.СтраницаНУНачислениеАмортизацииНМА;
		Иначе
			Элементы.СтраницыНУНачислениеАмортизации.ТекущаяСтраница = Элементы.СтраницаНУНачислениеАмортизацииЧистая;
		КонецЕсли;
	Иначе
		
		Элементы.НематериальныйАктив.Заголовок             = "НИОКР";
		Элементы.ГруппаПараметрыАмортизации.Заголовок      = "Параметры списания расходов";
		Элементы.ГруппаБУНачислениеАмортизации.Заголовок   = "Параметры списания расходов";
		Элементы.СпособОтраженияРасходов.Заголовок         = "Способ отражения расходов в учете";
		Элементы.СпособНачисленияАмортизацииБУ.Заголовок   = "Способ списания расходов";
		Элементы.СрокПолезногоИспользованияБУ.Заголовок    = "Срок списания";
		Элементы.НачислятьАмортизациюБУ.Заголовок          = "Списывать расходы";
		Элементы.СрокПолезногоИспользованияНУ.Заголовок    = "Срок списания";
		
		Элементы.СпециальныйКоэффициентНУ.Видимость        = Ложь;
		Элементы.СчетНачисленияАмортизацииНУ.Видимость     = Ложь;
		Элементы.СпособПоступления.Видимость               = Ложь;
		Элементы.СчетНачисленияАмортизации.Видимость       = Ложь;
		
		Элементы.ГруппаНачислятьАмортизациюНУ.ТекущаяСтраница = Элементы.ГруппаНачислятьАмортизациюНУНИОКР;
		
		Если Форма.ОСНЮрЛицо Тогда
			Элементы.ГруппаПараметрыАмортизации.Подсказка  = НСтр("ru = 'Для расходов, включаемых в состав прочих расходов НУ с коэффициентом 1.5, в способе отражения расходов указывается статья затрат с видом ""НИОКР по перечню Правительства РФ"".
			|Для прочих расходов указывается статья затрат с видом ""НИОКР"".'");
			Элементы.ГруппаСрокПолезногоИспользованияНУ_НИОКР.Подсказка = НСтр("ru = 'Заполняется только для равномерного списания стоимости НИОКР на расходы'");
		Иначе
			Элементы.ГруппаПараметрыАмортизации.Подсказка  = "";
			Элементы.ГруппаСрокПолезногоИспользованияНУ_НИОКР.Подсказка = "";
		КонецЕсли;
		
				
		
		Элементы.СтраницыНУНачислениеАмортизации.ТекущаяСтраница = Элементы.СтраницаНУНачислениеАмортизацииНИОКР;
		// Зависимость видимости полей от НачислятьАмортизациюНУ
		Элементы.СрокПолезногоИспользованияНУ_НИОКР.Доступность = 
			Объект.ПорядокСписанияНИОКРНаРасходыНУ = ПредопределенноеЗначение("Перечисление.ПорядокСписанияНИОКРНУ.Равномерно");
		// для корректного отображения доступности срока списания для ИП	
		Если НЕ Форма.ОСНЮрЛицо И Объект.НачислятьАмортизациюНУ Тогда
			Элементы.СрокПолезногоИспользованияНУ_НИОКР.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
			
	// Зависимость видимости полей от СпособНачисленияАмортизацииБУ
	Элементы.КоэффициентБУ.Видимость = 
		Объект.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение(
		"Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка");
	Элементы.ОбъемПродукцииРаботДляВычисленияАмортизации.Видимость = 
		Объект.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение(
		"Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции");
	
	// Зависимость видимости полей от НачислятьАмортизациюБУ
	Если Объект.НачислятьАмортизациюБУ Тогда
		Элементы.СтраницыБУНачислениеАмортизации.ТекущаяСтраница = Элементы.СтраницаБУНачислениеАмортизации;
	Иначе
		Элементы.СтраницыБУНачислениеАмортизации.ТекущаяСтраница = Элементы.СтраницаБУНачислениеАмортизацииЧистая;
	КонецЕсли;
	
	// Зависимость видимости страниц от учетной политики
	ЭтоРасходыУСН = Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы;
	
	Элементы.ГруппаНалоговыйУчет.Видимость                  = НЕ Форма.ПрименениеУСН;
	Элементы.ГруппаНалоговыйУчетУСН.Видимость               = ЭтоРасходыУСН;
	Элементы.СтраницаРассчитатьСтоимостьНУ.Видимость        = ЮрЛицо;
	Элементы.СтраницаРеквизитыДокументаОплаты.Видимость     = Форма.Предприниматель;
	Элементы.ДатаПриобретенияИП.Видимость                   = Форма.Предприниматель;
	
	Если ЭтоРасходыУСН Тогда
		Элементы.ГруппаОплата.Видимость                                = НЕ (Объект.Дата < Дата("20060101"));
		Элементы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость = НЕ (Объект.Дата < Дата("20060101"));
	КонецЕсли;
	
	// Установка видимости полей ввода временных и постоянных разниц в зависимости
	// от поддержки положений ПБУ 18/02.
	Элементы.СтоимостьПР.Видимость                          = ЮрЛицо И Форма.ПоддержкаПБУ18;
	Элементы.СтоимостьВР.Видимость                          = ЮрЛицо И Форма.ПоддержкаПБУ18;
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(Форма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(Форма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(Форма);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчета()
	
	ВидОбъектаУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.НематериальныйАктив, "ВидОбъектаУчета");
	
	Если ВидОбъектаУчета <> Объект.ВидОбъектаУчета Тогда
		Объект.НематериальныйАктив = Неопределено;
	КонецЕсли;
	
	Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		Объект.СчетНачисленияАмортизации    = ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов;
		Объект.СчетУчета                    = ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации;
		Объект.СчетУчетаВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов;
		
	Иначе
		Объект.СчетНачисленияАмортизации    = Неопределено;
		Объект.СчетУчета                    = ПланыСчетов.Хозрасчетный.РасходыНаНИОКР;
		Объект.СчетУчетаВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтоимостьНМА_БУ(СчетУчета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НМА",             Объект.НематериальныйАктив);
	Запрос.УстановитьПараметр("Счет",            СчетУчета);
	Запрос.УстановитьПараметр("Дата",            Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ДатаКонецМесяца", Новый Граница(КонецМесяца(Объект.Дата), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",     Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение",   Объект.ПодразделениеОрганизации);
	Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	ИначеЕсли Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет = &Счет,
	|			&ВидСубконто,
	|			Субконто1 = &НМА
	|				И Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&Дата,
	|			&ДатаКонецМесяца,
	|			,
	|			Счет = &Счет,
	|			&ВидСубконто,
	|			Субконто1 = &НМА
	|				И Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)) КАК ХозрасчетныйОбороты";
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаОстатков.Количество() > 0 Тогда
		Возврат ТаблицаОстатков.Итог("СуммаОстатокДт");
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СтоимостьНМА_НУ(СчетУчета);
	
	СтруктураСтоимость = Новый Структура;
	СтруктураСтоимость.Вставить("СтоимостьНУ", 0);
	СтруктураСтоимость.Вставить("СтоимостьПР", 0);
	СтруктураСтоимость.Вставить("СтоимостьВР", 0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НМА",             Объект.НематериальныйАктив);
	Запрос.УстановитьПараметр("Счет",            СчетУчета);
	Запрос.УстановитьПараметр("Дата",            Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ДатаКонецМесяца", Новый Граница(КонецМесяца(Объект.Дата), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",     Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение",   Объект.ПодразделениеОрганизации);
	Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	ИначеЕсли Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	КонецЕсли;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СтоимостьНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СтоимостьПР,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СтоимостьВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет = &Счет,
	|			&ВидСубконто,
	|			Субконто1 = &НМА
	|				И Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотДт КАК СтоимостьНУ,
	|	ХозрасчетныйОбороты.СуммаПРОборотДт КАК СтоимостьПР,
	|	ХозрасчетныйОбороты.СуммаВРОборотДт КАК СтоимостьВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&Дата,
	|			&ДатаКонецМесяца,
	|			,
	|			Счет = &Счет,
	|			&ВидСубконто,
	|			Субконто1 = &НМА
	|				И Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)) КАК ХозрасчетныйОбороты";
				   
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда

		СтруктураСтоимость.СтоимостьНУ = ТЗ.Итог("СтоимостьНУ");
		СтруктураСтоимость.СтоимостьПР = ТЗ.Итог("СтоимостьПР");
		СтруктураСтоимость.СтоимостьВР = ТЗ.Итог("СтоимостьВР");

	КонецЕсли;

	Возврат СтруктураСтоимость;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();
   	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ЗаполнитьСчетаУчета();
	
	ЗаполнитьСписокВыбораДляСпособаНачисленияАмортизацииБУ(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораДляСпособаНачисленияАмортизацииБУ(Форма)
	
	Форма.Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора.Очистить();
	Форма.Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный"));
	Форма.Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции"));

	Если Форма.Объект.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив") Тогда
		Форма.Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(Форма)
	
	Форма.РасшифровкаСрокаПолезногоИспользованияБУ = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(
		Форма.Объект.СрокПолезногоИспользованияБУ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(Форма)
	
	Форма.РасшифровкаСрокаПолезногоИспользованияНУ = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(
		Форма.Объект.СрокПолезногоИспользованияНУ);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(Форма)
	
	Форма.РасшифровкаСрокаПолезногоИспользованияУСН = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(
		Форма.Объект.СрокПолезногоИспользованияУСН);
	
КонецПроцедуры
