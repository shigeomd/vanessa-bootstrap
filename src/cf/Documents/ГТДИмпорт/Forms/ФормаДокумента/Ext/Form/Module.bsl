////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// Уведомим о появлении функционала включения НДС в стоимость
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("ТаможенныйНДСВСтоимости");
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("УведомитьОбИзмененияхНДСВключатьВСтоимость", 0.60, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеГТДИмпорт";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ГТДИмпорт", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы, Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// В валютных расчетов также используется ВалютаРасчетов
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ВалютаРасчетов <> ВалютаРегламентированногоУчета;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОбработки = ОрганизацияПриИзмененииСервер();
		ПриИзмененииПараметровДокумента(ПараметрыОбработки);
		УведомитьОбИзмененияхНДСВключатьВСтоимость();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыОбработки = КонтрагентПриИзмененииСервер();
		ПриИзмененииПараметровДокумента(ПараметрыОбработки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПараметрыОбработки = ДоговорКонтрагентаПриИзмененииСервер();
	ПриИзмененииПараметровДокумента(ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаРеглПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагентаРегл) Тогда
		ПараметрыОбработки = ДоговорКонтрагентаРеглПриИзмененииСервер();
		ПриИзмененииПараметровДокумента(ПараметрыОбработки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаможенныйШтрафВалПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТаможенныйШтрафПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РАЗДЕЛЫ

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)

	Если Элементы.Разделы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;

	Элементы.Разделы.ТекущаяСтрока = Объект.Разделы[НомерРаздела - 1].ПолучитьИдентификатор();

	ФиксированныйОтбор = Новый ФиксированнаяСтруктура("НомерРаздела",НомерРаздела);
	Элементы.Товары.ОтборСтрок = ФиксированныйОтбор;
	
	Элементы.ГруппаТоварыПоРазделу.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Товары по разделу (%1)'"),
		НомерРаздела);

КонецПроцедуры

&НаКлиенте
Процедура РазделыПередУдалением(Элемент, Отказ)

	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	УдалитьТоварыРаздела(НомерРаздела);

КонецПроцедуры

&НаКлиенте
Процедура РазделыПриИзменении(Элемент)

	Если Объект.Разделы.Количество() = 0 Тогда
		Объект.Разделы.Добавить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазделыТаможеннаяСтоимостьПриИзменении(Элемент)

	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	ПриИзмененииСтоимостиСтавкиПошлины(НомерРаздела);

КонецПроцедуры

&НаКлиенте
Процедура РазделыПошлинаВВалютеПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Разделы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ДанныеСтроки.СуммаНДС) Тогда
		ТекстВопроса = НСтр("ru = 'Пересчитать сумму пошлины и сумму НДС?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПересчитатьСуммуПошлиныНДСЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазделыСтавкаПошлиныПриИзменении(Элемент)

	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	ПриИзмененииСтоимостиСтавкиПошлины(НомерРаздела);

КонецПроцедуры

&НаКлиенте
Процедура РазделыСуммаПошлиныПриИзменении(Элемент)

	ПриИзмененииСуммыПошлиныСтавкиНДС(Элементы.Разделы.ТекущиеДанные);

КонецПроцедуры


&НаКлиенте
Процедура РазделыНДСВВалютеПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Разделы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ДанныеСтроки.СуммаНДС) Тогда
		ТекстВопроса = НСтр("ru = 'Пересчитать сумму НДС?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПересчитатьСуммуНДСЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазделыСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСуммыПошлиныСтавкиНДС(Элементы.Разделы.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РазделыСуммаНДСПриИзменении(Элемент)

	РаспределитьНДСИПошлинуПоРазделуСервер(Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
		Если НЕ Копирование Тогда
			Элемент.ТекущиеДанные.ОтражениеВУСН = ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.Принимаются");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ПересчитатьИтогиРаздела(Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, СтавкаНДС, СпособУчетаНДС, ДокументПартии,
		|СчетУчета, СчетУчетаНДС, СчетУчетаНУ, СтатьяЗатратНУ, СтранаПроисхождения");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииСервер(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПартииПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ДокументПартии, СчетУчета, СчетУчетаНДС, СчетУчетаНУ, СтатьяЗатратНУ, СпособУчетаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыДокументПартииПриИзмененииСервер(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)

	Элементы.Товары.ТекущиеДанные.СчетУчетаНУ = Элементы.Товары.ТекущиеДанные.СчетУчета;
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект.Товары.Индекс(Элементы.Товары.ТекущиеДанные));

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)

	ЗаполнитьДобавленныеКолонкиТаблиц(Объект.Товары.Индекс(Элементы.Товары.ТекущиеДанные));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДействиеПодбор(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора(),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура Распределить(Команда)

	РаспределитьНДСИПошлинуПоРазделуСервер(Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)
	
	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НомерРаздела", НомерРаздела);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьИзПоступленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора",
		ПараметрыФормы,
		ЭтаФорма,,,,ОповещениеОЗакрытии);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	НомерРаздела = ДополнительныеПараметры.НомерРаздела;
	
	ДокументПоступления = РезультатЗакрытия;
	
	Если ДокументПоступления <> Неопределено Тогда
		ЗаполнитьПоПоступлению(ДокументПоступления, НомерРаздела);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ГлавноеПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаГлавное Тогда

		Форма.УстановитьУсловноеОформлениеГлавное();
	
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("РазделыГТДПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРазделыГТД Тогда
		
		Форма.УстановитьУсловноеОформлениеРазделыГТД();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеГлавное() Экспорт

	НастройкиУсловногоОформления.Вставить("ГлавноеПроинициализировано", Истина);


	// СчетУчетаРасчетовСКонтрагентомВал

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовСКонтрагентомВал");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДоговорКонтрагента", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРазделыГТД() Экспорт

	НастройкиУсловногоОформления.Вставить("РазделыГТДПроинициализировано", Истина);

	// ТоварыСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыСтатьяЗатратНУ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтатьяЗатратНУ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтатьяЗатратНУДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.BorderColor);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСтатьяЗатратНУ
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтатьяЗатратНУ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// РазделыСуммаНДС, ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РазделыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Разделы.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Разделы.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.НеРавно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();

	// Заполнение реквизитов формы

	ТекущаяДатаДокумента			= Объект.Дата;

	ВалютаРегламентированногоУчета  = Константы.ВалютаРегламентированногоУчета.Получить();

	ПоказыватьВДокументахСчетаУчета = Истина;

	ВалютаРасчетов = ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента), 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов"), ВалютаРегламентированногоУчета);

	// Управление внешним видом формы

	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВалютаДокумента, Курс, Кратность, ВалютаРегламентированногоУчета",
		Объект.ВалютаДокумента,
		Объект.КурсДокумента,
		Объект.КратностьДокумента,
		ВалютаРегламентированногоУчета);
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		СтруктураНадписи.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	КонецЕсли;
	ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);

	УправлениеВидимостьюЗакладок();

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИндексСтрокиТаблицы = Неопределено)

	Если НЕ ПлательщикНДФЛ Тогда
	
		Запрос = Новый Запрос;
		Если ИндексСтрокиТаблицы = Неопределено Тогда
			Запрос.УстановитьПараметр("СчетаНУ", Объект.Товары.Выгрузить(, "СчетУчетаНУ").ВыгрузитьКолонку("СчетУчетаНУ"));
			МассивСтрок = Объект.Товары;
		Иначе
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Объект.Товары.Получить(ИндексСтрокиТаблицы));
			Запрос.УстановитьПараметр("СчетаНУ", Объект.Товары.Выгрузить(МассивСтрок, "СчетУчетаНУ").ВыгрузитьКолонку("СчетУчетаНУ"));
		КонецЕсли;
		МассивОписаний = Новый Массив;
		МассивОписаний.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		МассивОписаний.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
		Запрос.УстановитьПараметр("ВидыСубконтоСтатейНУ", МассивОписаний);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	счета.Ссылка КАК Счет,
		|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
		|				КОГДА СчетаВидыСубконто.ВидСубконто В (&ВидыСубконтоСтатейНУ)
		|					ТОГДА СчетаВидыСубконто.ВидСубконто
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ, НЕОПРЕДЕЛЕНО)) КАК ВидСубконто,
		|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
		|				КОГДА СчетаВидыСубконто.ВидСубконто В (&ВидыСубконтоСтатейНУ)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ, ЛОЖЬ)) КАК СтатьяНУОбязательна
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК счета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаВидыСубконто
		|		ПО счета.Ссылка = СчетаВидыСубконто.Ссылка
		|ГДЕ
		|	счета.Ссылка В(&СчетаНУ)
		|
		|СГРУППИРОВАТЬ ПО
		|	счета.Ссылка";

		ТаблицаСчетов = Запрос.Выполнить().Выгрузить();

		Для Каждого СтрокаТовара Из МассивСтрок Цикл

			СтрокаСчета = ТаблицаСчетов.Найти(СтрокаТовара.СчетУчетаНУ, "Счет");
			Если СтрокаСчета = Неопределено Тогда
				СтрокаТовара.СтатьяЗатратНУДоступность = Ложь;
				СтрокаТовара.СтатьяЗатратНУТипЗначения = Неопределено;
			Иначе
				СтрокаТовара.СтатьяЗатратНУДоступность = СтрокаСчета.СтатьяНУОбязательна;
				СтрокаТовара.СтатьяЗатратНУТипЗначения = ?(СтрокаСчета.ВидСубконто = Неопределено,
														Неопределено, СтрокаСчета.ВидСубконто.ТипЗначения);
			КонецЕсли;

			Если СтрокаТовара.СтатьяЗатратНУТипЗначения = Неопределено Тогда
				СтрокаТовара.СтатьяЗатратНУ = Неопределено;
			Иначе
				СтрокаТовара.СтатьяЗатратНУ = СтрокаТовара.СтатьяЗатратНУТипЗначения.привестиЗначение(СтрокаТовара.СтатьяЗатратНУ);
			КонецЕсли;

		КонецЦикла;
		
	Иначе
		
		Если ИндексСтрокиТаблицы = Неопределено Тогда
			МассивСтрок = Объект.Товары;
		Иначе
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Объект.Товары.Получить(ИндексСтрокиТаблицы));
		КонецЕсли;
		
		МассивОписаний = Новый Массив;
		МассивОписаний.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		МассивОписаний.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
		
		СтатьяЗатратНУТипЗначения	= Новый ОписаниеТипов(МассивОписаний);
		
		Для Каждого СтрокаТовара Из МассивСтрок Цикл
		
			СтрокаТовара.СтатьяЗатратНУДоступность	= Истина;
			СтрокаТовара.СтатьяЗатратНУТипЗначения	= СтатьяЗатратНУТипЗначения;
			
			СтрокаТовара.СтатьяЗатратНУ	= СтрокаТовара.СтатьяЗатратНУТипЗначения.ПривестиЗначение(СтрокаТовара.СтатьяЗатратНУ);
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	ВозможныВалютныеРасчеты = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);

	Элементы.ГруппаСуммыИВалютаСбора.Доступность           = ВозможныВалютныеРасчеты;
	Элементы.ГруппаСуммыИВалютаШтрафа.Доступность          = ВозможныВалютныеРасчеты;

	Элементы.РазделыПошлинаВВалюте.ТолькоПросмотр = НЕ ВозможныВалютныеРасчеты;
	Элементы.РазделыНДСВВалюте.ТолькоПросмотр     = НЕ ВозможныВалютныеРасчеты;
	
	Элементы.СчетУчетаРасчетовСКонтрагентомВал.Доступность = ВозможныВалютныеРасчеты;
	
	Элементы.НДСПредъявленКВычету.Доступность = НЕ Объект.НДСВключенВСтоимость;
	
	Если ВозможныВалютныеРасчеты Тогда
		Форма.НазваниеВалютыДепозита = СокрЛП(Форма.ВалютаРасчетов);
	Иначе
		Форма.НазваниеВалютыДепозита = "";
	КонецЕсли;

	ФорматнаяСтрока = "БЛ='" + СокрЛП(Форма.ВалютаРегламентированногоУчета) + "'; БИ='" + Форма.НазваниеВалютыДепозита + "'";	
	Элементы.РазделыПошлинаВВалюте.Формат                  = ФорматнаяСтрока;
	Элементы.РазделыПошлинаВВалюте.ФорматРедактирования    = ФорматнаяСтрока;
	Элементы.РазделыНДСВВалюте.Формат                      = ФорматнаяСтрока;
	Элементы.РазделыНДСВВалюте.ФорматРедактирования        = ФорматнаяСтрока;
	
	Элементы.РазделыСуммаПошлины.ОтметкаНезаполненного     = Ложь;
	Элементы.РазделыСуммаПошлины.АвтоОтметкаНезаполненного = Ложь;
	
	Если Форма.ПлательщикНДФЛ Тогда
		Элементы.ТоварыСтатьяЗатратНУ.Заголовок	= НСтр("ru = 'Статья затрат'");
	Иначе	
		Элементы.ТоварыСтатьяЗатратНУ.Заголовок	= "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ПлательщикНДФЛ	= УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтогиРаздела(НомерРаздела)

	Если НомерРаздела = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = Объект.Разделы.Получить(НомерРаздела - 1);
	СтараяТаможеннаяСтоимость = ДанныеРаздела.ТаможеннаяСтоимость;

	ДанныеРаздела.СуммаПошлины = 0;
	ДанныеРаздела.СуммаНДС     = 0;
	ДанныеРаздела.ТаможеннаяСтоимость = 0;

	ТоварыРаздела = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для Каждого СтрокаТаблицы Из ТоварыРаздела Цикл

		ДанныеРаздела.СуммаПошлины = ДанныеРаздела.СуммаПошлины + СтрокаТаблицы.СуммаПошлины;
		ДанныеРаздела.СуммаНДС     = ДанныеРаздела.СуммаНДС     + СтрокаТаблицы.СуммаНДС;

		ДанныеРаздела.ТаможеннаяСтоимость = ДанныеРаздела.ТаможеннаяСтоимость + СтрокаТаблицы.ФактурнаяСтоимость;

	КонецЦикла;
	
	Если СтараяТаможеннаяСтоимость <> ДанныеРаздела.ТаможеннаяСтоимость Тогда
		ПриИзмененииСтоимостиСтавкиПошлины(НомерРаздела);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПоступлению(ДокументПоступления, НомерРаздела) Экспорт
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыПоДаннымПоступления = Документы.ГТДИмпорт.ТоварыПоДаннымПоступления(ДанныеОбъекта, ДокументПоступления, НомерРаздела);
	Для каждого ДанныеНовойСтроки Из ТоварыПоДаннымПоступления Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНовойСтроки);
	КонецЦикла;
	
	ПересчитатьИтогиРаздела(НомерРаздела);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

// Облуживание типа цен - валюты - НДС:

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсДокумента);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьДокумента);
	СтруктураПараметров.Вставить("КурсДокумента",        Объект.КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента",   Объект.КратностьДокумента);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	СтруктураПараметров.Вставить("ТолькоПросмотр",       ТолькоПросмотр);

	// 2. Открываем форму "Цены и Валюта".
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПараметрыОбработки   = Новый Структура("СтруктураЦеныИВалюта", РезультатЗакрытия);

	ВалютаДокументаДоИзменения = Объект.ВалютаДокумента;

	Если ТипЗнч(ПараметрыОбработки.СтруктураЦеныИВалюта) = Тип("Структура") И ПараметрыОбработки.СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		Объект.ВалютаДокумента         = ПараметрыОбработки.СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсДокумента           = ПараметрыОбработки.СтруктураЦеныИВалюта.Курс;
		Объект.КратностьДокумента      = ПараметрыОбработки.СтруктураЦеныИВалюта.Кратность;
		Объект.НДСВключенВСтоимость    = ПараметрыОбработки.СтруктураЦеныИВалюта.НДСВключенВСтоимость;
		
		Если Объект.НДСВключенВСтоимость Тогда
			Объект.НДСПредъявленКВычету = Ложь;
		КонецЕсли;
		
		ВалютаРасчетов = ПараметрыОбработки.СтруктураЦеныИВалюта.ВалютаРасчетов;
		
		Модифицированность = Истина;
		
		ПараметрыОбработки.Вставить("ВалютаДокументаДоИзменения", ВалютаДокументаДоИзменения);

		ПриИзмененииПараметровДокументаНаСервере(ПараметрыОбработки);

	КонецЕсли;	
		 	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, УчитыватьНДС = Истина, СуммаВключаетНДС = Ложь) Экспорт

	ДанныеОбъекта = Новый Структура("ВалютаДокумента,КурсДокумента,КратностьДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("Ссылка", Объект.Ссылка);
	ДанныеОбъекта.Вставить("ВалютаРасчетов", ВалютаРасчетов);

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаПошлины) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда

		ДанныеСтроки = Новый СТруктура("ТаможеннаяСтоимость, ПошлинаВВалюте, СтавкаПошлины, СуммаПошлины, НДСВВалюте, СтавкаНДС, СуммаНДС, НомерСтроки");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
		СтрокаТабличнойЧасти.СуммаНДС = РассчитатьСуммуНДСГТД(ДанныеСтроки, ДанныеОбъекта, ВалютаРегламентированногоУчета);

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуНДСГТД(Знач ДанныеСтроки, Знач ДанныеОбъекта, Знач ВалютаРеглУчета)

	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ВалютаДокумента) Тогда

		БазаНДС = 0;

	ИначеЕсли ДанныеСтроки.НДСВВалюте Тогда  // Надо все пересчитать в валюту расчетов с таможней.

		Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ВалютаРасчетов) Тогда
			ТаможеннаяСтоимостьВал = ДанныеСтроки.ТаможеннаяСтоимость;
		Иначе
			ТаможеннаяСтоимостьВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДанныеСтроки.ТаможеннаяСтоимость,
									ДанныеОбъекта.ВалютаДокумента, ДанныеОбъекта.ВалютаРасчетов,
									ДанныеОбъекта.КурсДокумента,
									ДанныеОбъекта.КурсВзаиморасчетов,
									ДанныеОбъекта.КратностьДокумента,
									ДанныеОбъекта.КратностьВзаиморасчетов);
		КонецЕсли;

		Если ДанныеСтроки.ПошлинаВВалюте Тогда
			СуммаПошлиныВал = ДанныеСтроки.СуммаПошлины;
		Иначе
			Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ВалютаРасчетов) Тогда
				СуммаПошлиныВал = ДанныеОбъекта.СуммаПошлины;
			Иначе
				СуммаПошлиныВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДанныеСтроки.СуммаПошлины,
					ДанныеОбъекта.ВалютаРегламентированногоУчета, ДанныеОбъекта.ВалютаРасчетов,
					1, ДанныеОбъекта.КурсВзаиморасчетов, 1, ДанныеОбъекта.КратностьВзаиморасчетов);
			КонецЕсли;
		КонецЕсли;

		БазаНДС = ТаможеннаяСтоимостьВал + СуммаПошлиныВал;

	Иначе // Надо все пересчитать в валюту регл. учета.

		ТаможеннаяСтоимостьВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДанныеСтроки.ТаможеннаяСтоимость,
								ДанныеОбъекта.ВалютаДокумента, ВалютаРеглУчета,
								ДанныеОбъекта.КурсДокумента, 1,
								ДанныеОбъекта.КратностьДокумента, 1);

		Если ДанныеСтроки.ПошлинаВВалюте Тогда

			Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ВалютаРасчетов) Тогда
				СуммаПошлиныВал = ДанныеСтроки.СуммаПошлины;
			Иначе
				СуммаПошлиныВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДанныеСтроки.СуммаПошлины,
									ДанныеОбъекта.ВалютаРасчетов, ВалютаРеглУчета,
									ДанныеОбъекта.КурсВзаиморасчетов, 1, ДанныеОбъекта.КратностьВзаиморасчетов, 1);
			КонецЕсли;

		Иначе
			СуммаПошлиныВал = ДанныеСтроки.СуммаПошлины;
		КонецЕсли;

		БазаНДС = ТаможеннаяСтоимостьВал + СуммаПошлиныВал;

	КонецЕсли;

	Возврат УчетНДСКлиентСервер.РассчитатьСуммуНДС(БазаНДС, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеСтроки.СтавкаНДС));

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуПошлиныГТД(Знач ДанныеСтроки, Знач ДанныеОбъекта, Знач ВалютаРеглУчета)

	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ВалютаДокумента) Тогда
		ТаможеннаяСтоимостьВал = ДанныеСтроки.ТаможеннаяСтоимость;
	ИначеЕсли ДанныеСтроки.ПошлинаВВалюте Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ВалютаРасчетов) Тогда
			ТаможеннаяСтоимостьВал = ДанныеСтроки.ТаможеннаяСтоимость;
		Иначе
			ТаможеннаяСтоимостьВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДанныеСтроки.ТаможеннаяСтоимость,
				ДанныеОбъекта.ВалютаДокумента, ДанныеОбъекта.ВалютаРасчетов,
				ДанныеОбъекта.КурсДокумента,
				ДанныеОбъекта.КурсВзаиморасчетов,
				ДанныеОбъекта.КратностьДокумента,
				ДанныеОбъекта.КратностьВзаиморасчетов);
		КонецЕсли;
	Иначе
		ТаможеннаяСтоимостьВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДанныеСтроки.ТаможеннаяСтоимость,
			ДанныеОбъекта.ВалютаДокумента, ДанныеОбъекта.ВалютаРегламентированногоУчета,
			ДанныеОбъекта.КурсДокумента, 1,
			ДанныеОбъекта.КратностьДокумента, 1);
	КонецЕсли;

	Возврат ТаможеннаяСтоимостьВал * ДанныеСтроки.СтавкаПошлины / 100;

КонецФункции

&НаСервере
Процедура РаспределитьНДСИПошлинуПоРазделуСервер(НомерРаздела)

	// Проверим, есть ли что распределять.
	СтрокаРаздела = Объект.Разделы.Получить(НомерРаздела - 1);
	ТаможеннаяСтоимость = СтрокаРаздела.ТаможеннаяСтоимость;
	СуммаПошлины        = СтрокаРаздела.СуммаПошлины;
	СуммаНДС            = СтрокаРаздела.СуммаНДС;

	МассивСтрок  = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	БазисРаспределения = Новый Массив();

	ВсегоСтоимость = 0;
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
		БазисРаспределения.Добавить(ЭлементМассива.ФактурнаяСтоимость);
	КонецЦикла;

	Всего        = ВсегоСтоимость;
	ВсегоПошлина = СуммаПошлины;
	ВсегоНДС     = СуммаНДС;

	Если ВсегоСтоимость = 0 Тогда

		Если МассивСтрок.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru='Общая сумма фактурной стоимости раздела %1 нулевая!
				|Распределение невозможно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерРаздела);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары", "Объект");
		КонецЕсли;

		Возврат;

	КонецЕсли;

	Если не СуммаПошлины = 0 Тогда
		МассивРезультатаРаспределения_Пошлина = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаПошлины, БазисРаспределения);
	КонецЕсли;
	Если не СуммаНДС = 0 Тогда
		МассивРезультатаРаспределения_НДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаНДС, БазисРаспределения);
	КонецЕсли;

	Для ИндексСтроки = 0 по МассивСтрок.Количество()-1 Цикл
		Если не СуммаПошлины = 0 Тогда
			МассивСтрок[ИндексСтроки].СуммаПошлины = МассивРезультатаРаспределения_Пошлина[ИндексСтроки];
		Иначе
			МассивСтрок[ИндексСтроки].СуммаПошлины = 0;
		КонецЕсли;
		Если не СуммаНДС = 0 Тогда
			МассивСтрок[ИндексСтроки].СуммаНДС = МассивРезультатаРаспределения_НДС[ИндексСтроки];
		Иначе
			МассивСтрок[ИндексСтроки].СуммаНДС = 0;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Обслуживание процедур подбора

&НаКлиенте
Функция ПолучитьПараметрыПодбора()

	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в документ %1 (Товары)'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка);

	СписокПодборов = Новый СписокЗначений();
	СписокПодборов.Добавить("", НСтр("ru = 'По справочнику'"));

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("Валюта"        , ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("ЕстьЦена"      , Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ЕстьСерия"     , Истина);
	ПараметрыФормы.Вставить("Услуги"        , Ложь);
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("СписокПодборов", СписокПодборов);
	ПараметрыФормы.Вставить("ИмяТаблицы"    , "Товары");

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы, НомерРаздела)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
		
		СтрокаТабличнойЧасти.НомерРаздела = НомерРаздела;
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
		
		Документы.ГТДИмпорт.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
		
	КонецЦикла;
	
	ПересчитатьИтогиРаздела(НомерРаздела);
	
КонецПроцедуры

// Изменение связанных реквизитов

&НаСервереБезКонтекста
Функция ПолучитьПараметрыДляДоговоров(ВалютаРеглУчета)

	ПараметрыОтбора = Новый СТруктура;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ПараметрыОтбора.Вставить("ВидыДоговоров", СписокВидовДоговоров);

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЗначениеОтбора",     ВалютаРеглУчета);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.НеРавно);
	СтруктураДополнительныхПараметров = Новый Структура("ВалютаВзаиморасчетов", СтруктураОтбора);
	ПараметрыОтбора.Вставить("СтруктураДополнительныхПараметров", СтруктураДополнительныхПараметров);

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЗначениеОтбора",     ВалютаРеглУчета);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.Равно);
	СтруктураДополнительныхПараметровРегл = Новый Структура("ВалютаВзаиморасчетов", СтруктураОтбора);
	ПараметрыОтбора.Вставить("СтруктураДополнительныхПараметровРегл", СтруктураДополнительныхПараметровРегл);

	Возврат ПараметрыОтбора;

КонецФункции

&НаСервере
Функция ДатаПриИзмененииСервер()

	ПараметрыОбработки = Новый Структура;

	// При изменении даты могут меняться курсы, поэтому запомним предыдущую валюту.
	ПараметрыОбработки.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетов);

	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетов, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	
	СтруктураКурсаДокумента  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;

	УстановитьФункциональныеОпцииФормы();

	УстановитьПорядокУчетаНДСПоУмолчанию();
	
	УправлениеВидимостьюЗакладок();

	ПриИзмененииПараметровДокументаНаСервере(ПараметрыОбработки);

КонецФункции

&НаСервере
Функция ОрганизацияПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
			Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеВидимостьюЗакладок();
	
	УстановитьПорядокУчетаНДСПоУмолчанию();
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	Возврат КонтрагентПриИзмененииСервер();

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ГТДИмпорт.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция КонтрагентПриИзмененииСервер()

	ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров(ВалютаРегламентированногоУчета);

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация,
			ПараметрыОтбораДоговора.ВидыДоговоров, ПараметрыОтбораДоговора.СтруктураДополнительныхПараметров);

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагентаРегл, Объект.Контрагент, Объект.Организация,
			ПараметрыОтбораДоговора.ВидыДоговоров, ПараметрыОтбораДоговора.СтруктураДополнительныхПараметровРегл);

	Возврат ДоговорКонтрагентаПриИзмененииСервер(Истина);

КонецФункции

&НаСервере
Функция ДоговорКонтрагентаПриИзмененииСервер(ИзменятьДоговорРегл = Ложь)

	ПараметрыОбработки = Новый Структура;

	ПараметрыОбработки.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетов);
	ПараметрыОбработки.Вставить("ВалютаЗадаватьВопрос", Ложь);
	ПараметрыОбработки.Вставить("ПересчитатьНДС", Ложь);

	КурсДоИзменения = Объект.КурсВзаиморасчетов;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов,Владелец,ТипЦен,ВидДоговора");

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда

		ВалютаРасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;

		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;

	Иначе
		ВалютаРасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если ПараметрыОбработки.ВалютаРасчетовПередИзменением <> ВалютаРасчетов Тогда

		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРасчетов, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

	КонецЕсли;

	ЕстьСтроки = Объект.Товары.Количество() > 0;
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);

	Если ВалютаРасчетов <> ПараметрыОбработки.ВалютаРасчетовПередИзменением
			ИЛИ КурсДоИзменения <> Объект.КурсВзаиморасчетов Тогда
		ПараметрыОбработки.ВалютаЗадаватьВопрос = ЕстьСтроки И ДоговорУказан;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		Объект.СчетУчетаРасчетовСКонтрагентомВал = СчетаУчета.СчетРасчетов;
	КонецЕсли;

	Если ИзменятьДоговорРегл Тогда
		ДоговорКонтрагентаРеглПриИзмененииСервер();
	КонецЕсли;

	Возврат ПараметрыОбработки;

КонецФункции

&НаСервере
Функция ДоговорКонтрагентаРеглПриИзмененииСервер()

	ПараметрыОбработки = Новый Структура;

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагентаРегл) Тогда
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагентаРегл);
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;

	Возврат ПараметрыОбработки;

КонецФункции

&НаСервере
Процедура ПриИзмененииПараметровДокументаНаСервере(ПараметрыОбработки)

	НуженПересчетРазделов = Ложь;
	НуженПересчетПошлины = Ложь;

	Если ПараметрыОбработки.Свойство("СтруктураЦеныИВалюта") Тогда

		СтруктураЦеныИВалюта = ПараметрыОбработки.СтруктураЦеныИВалюта;

		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыОбработки.ВалютаДокументаДоИзменения, Объект.Дата);

		// Пересчитываем табличные части.
		Если СтруктураЦеныИВалюта.ПересчитатьЦены Тогда
			НуженПересчетРазделов = Истина;

			Для Каждого Строка Из Объект.Товары Цикл
				Строка.ФактурнаяСтоимость = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					Строка.ФактурнаяСтоимость,
					ПараметрыОбработки.ВалютаДокументаДоИзменения,
					СтруктураЦеныИВалюта.ВалютаДокумента,
					СтруктураКурса.Курс,
					СтруктураЦеныИВалюта.Курс,
					СтруктураКурса.Кратность,
					СтруктураЦеныИВалюта.Кратность);
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

	Если ПараметрыОбработки.Свойство("ВалютаРасчетовПередИзменением") Тогда
		
		// Если изменилась валюта валютного договора, то пересчитаем зависящие суммы.
	
		Если НЕ (ПараметрыОбработки.ВалютаРасчетовПередИзменением = ВалютаРегламентированногоУчета
		 	  	  И ВалютаРасчетов = ВалютаРегламентированногоУчета) Тогда

			НуженПересчетПошлины = Объект.Разделы.НайтиСтроки(Новый Структура ("НДСВВалюте", Истина)).Количество() > 0
				ИЛИ Объект.Разделы.НайтиСтроки(Новый Структура ("ПошлинаВВалюте", Истина)).Количество() > 0;

			// Если очистили валютный договор, то обнулим валютный сбор и штраф, 
			// а пошлину и НДС пересчитаем в рубли.
			Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда

				Объект.ТаможенныйСборВал 	= 0;
				Объект.ТаможенныйШтрафВал 	= 0;
				
				// Во всех разделах проставим валюту пошлины и НДС = рубли и потом ниже пересчитаем разделы.
				Для Каждого Раздел Из Объект.Разделы Цикл
					
					Раздел.ПошлинаВВалюте 	= Ложь;
					Раздел.НДСВВалюте 		= Ложь;
				
				КонецЦикла;

			Иначе

				// Изменился валютный договор, пересчитаем по новому курсу все валютные суммы.
					
				СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыОбработки.ВалютаРасчетовПередИзменением, Объект.Дата);
				
				Объект.ТаможенныйСборВал 	= РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.ТаможенныйСборВал, 
				ПараметрыОбработки.ВалютаРасчетовПередИзменением, ВалютаРасчетов,
				СтруктураКурсаДокумента.Курс, Объект.КурсВзаиморасчетов, СтруктураКурсаДокумента.Кратность, Объект.КратностьВзаиморасчетов);
				
				Объект.ТаможенныйШтрафВал 	= РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.ТаможенныйШтрафВал,
				ПараметрыОбработки.ВалютаРасчетовПередИзменением, ВалютаРасчетов,
				СтруктураКурсаДокумента.Курс, Объект.КурсВзаиморасчетов, СтруктураКурсаДокумента.Кратность, Объект.КратностьВзаиморасчетов);

			КонецЕсли;

		КонецЕсли;

    КонецЕсли;

	Если НуженПересчетПошлины ИЛИ НуженПересчетРазделов Тогда

		Для каждого Раздел Из Объект.Разделы Цикл
			Если НуженПересчетРазделов Тогда
				ПересчитатьИтогиРаздела(Раздел.НомерСтроки);
			Иначе
				ПриИзмененииСтоимостиСтавкиПошлины(Раздел.НомерСтроки);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВалютаДокумента, Курс, Кратность, ВалютаРегламентированногоУчета",
		Объект.ВалютаДокумента,
		Объект.КурсДокумента,
		Объект.КратностьДокумента,
		ВалютаРегламентированногоУчета);
	ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровДокумента(ПараметрыОбработки)

	ВалютаЗадаватьВопрос = Ложь;
	Если НЕ ПараметрыОбработки.Свойство("ВалютаЗадаватьВопрос", ВалютаЗадаватьВопрос) Тогда
		ВалютаЗадаватьВопрос = Ложь;
	КонецЕсли;
	
	Если ВалютаЗадаватьВопрос Тогда
		ТекстВопроса = НСтр("ru = 'Изменилась валюта таможенных платежей. Пересчитать суммы таможенного сбора, штрафа, пошлины и НДС?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПересчитатьСуммыТаможенногоСбораЗавершение", ЭтотОбъект, ПараметрыОбработки);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПриИзмененииПараметровДокументаНаСервере(ПараметрыОбработки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтоимостиСтавкиПошлины(НомерРаздела)
	
	СтрокаРаздела = Объект.Разделы.Получить(НомерРаздела - 1);
	
	ДанныеОбъекта = Новый Структура("ВалютаДокумента,КурсДокумента,КратностьДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("Ссылка", Объект.Ссылка);
	ДанныеОбъекта.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	ДанныеОбъекта.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	ДанныеСтроки = Новый СТруктура("ТаможеннаяСтоимость, ПошлинаВВалюте, СтавкаПошлины, СуммаПошлины, НДСВВалюте, СтавкаНДС, СуммаНДС, НомерСтроки");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаРаздела);
	
	СтрокаРаздела.СуммаПошлины = РассчитатьСуммуПошлиныГТД(ДанныеСтроки, ДанныеОбъекта, ВалютаРегламентированногоУчета);
	ДанныеСтроки.СуммаПошлины  = СтрокаРаздела.СуммаПошлины;
	СтрокаРаздела.СуммаНДС     = РассчитатьСуммуНДСГТД(ДанныеСтроки, ДанныеОбъекта, ВалютаРегламентированногоУчета);
	
	РаспределитьНДСИПошлинуПоРазделуСервер(НомерРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыПошлиныСтавкиНДС(СтрокаРаздела)

	ДанныеОбъекта = Новый Структура("ВалютаДокумента,КурсДокумента,КратностьДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("Ссылка", Объект.Ссылка);
	ДанныеОбъекта.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	ДанныеОбъекта.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);

	ДанныеСтроки = Новый Структура("ТаможеннаяСтоимость, ПошлинаВВалюте, СтавкаПошлины, СуммаПошлины, НДСВВалюте, СтавкаНДС, СуммаНДС, НомерСтроки");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаРаздела);

	СтрокаРаздела.СуммаНДС = РассчитатьСуммуНДСГТД(ДанныеСтроки, ДанныеОбъекта, ВалютаРегламентированногоУчета);

	РаспределитьНДСИПошлинуПоРазделуСервер(Объект.Разделы.Индекс(СтрокаРаздела) + 1);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииСервер(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументПартии) Тогда
		ДанныеОбъекта.Вставить("Склад", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДокументПартии, "Склад"));
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СтавкаНДС           = СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
	
	Документы.ГТДИмпорт.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыДокументПартииПриИзмененииСервер(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументПартии) Тогда
		ДанныеОбъекта.Вставить("Склад", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДокументПартии, "Склад"));
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Документы.ГТДИмпорт.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервере
Процедура УдалитьТоварыРаздела(НомерРаздела)

	МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для Каждого СтрокаРаздела Из МассивСтрок Цикл
		Объект.Товары.Удалить(СтрокаРаздела);
	КонецЦикла;

	Если Объект.Разделы.Количество() > НомерРаздела Тогда
		ПересчитатьНомераРазделов(НомерРаздела);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьНомераРазделов(НомерУдаленногоРаздела)

	Для каждого СтрокаТовары Из Объект.Товары Цикл
		Если СтрокаТовары.НомерРаздела > НомерУдаленногоРаздела Тогда
			СтрокаТовары.НомерРаздела = СтрокаТовары.НомерРаздела - 1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюЗакладок()

	УпрощенныйУчетНДС	= УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	ВерсияУчетаНДС		= УчетНДСКлиентСервер.Версия(Объект.Дата);

	Элементы.ГруппаНДС.Видимость = НЕ РаздельныйУчетНДСНаСчете19 И (УпрощенныйУчетНДС ИЛИ ВерсияУчетаНДС = 2);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПересчитатьСуммуПошлиныНДСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриИзмененииСтоимостиСтавкиПошлины(Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПересчитатьСуммуНДСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриИзмененииСуммыПошлиныСтавкиНДС(Элементы.Разделы.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПересчитатьСуммыТаможенногоСбораЗавершение(Результат, ПараметрыОбработки) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриИзмененииПараметровДокументаНаСервере(ПараметрыОбработки);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПорядокУчетаНДСПоУмолчанию()
	
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, Объект.Дата);
	
	ВключитьНДСВСтоимость = НЕ УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	
	ОтразитьВычетНДСПриРегистрацииСчетаФактуры = Объект.Дата > '20120101'
		И НЕ РаздельныйУчетНДС И НЕ ВключитьНДСВСтоимость;
		
	Объект.НДСВключенВСтоимость = ВключитьНДСВСтоимость;
	Объект.НДСПредъявленКВычету = УпрощенныйУчетНДС ИЛИ ОтразитьВычетНДСПриРегистрацииСчетаФактуры;
    		
КонецПроцедуры

&НаКлиенте
Процедура УведомитьОбИзмененияхНДСВключатьВСтоимость()

	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ТаможенныйНДСВСтоимости", , НастройкиПредупреждений);
	КонецЕсли;

КонецПроцедуры

