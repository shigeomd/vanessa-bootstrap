#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА
//

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Ссылка
	|ИЗ
	|	Документ.ВыдачаДенежныхДокументов КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("ВалютаРеглУчета, ВалютаДокумента, ВалютаВзаиморасчетов, ДоговорКонтрагента, ВидДоговора, Ссылка,
		|СуммаВключаетНДС, Организация, Период, ВидОперации, КурсВзаиморасчетов, КратностьВзаиморасчетов, КурсДокумента,
		|КратностьДокумента, РасчетыВУсловныхЕдиницах, ОрганизацияПрименяетУСН, НачислятьНДСПоОтгрузке");
	
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	Если НЕ УчетнаяПолитика.Существует(Выборка.Организация, Выборка.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	// Коэффициенты пересчета сумм
	// - из валюты документа в валюту взаиморасчетов 
	// - из валюты взаиморасчетов в рубли
	Реквизиты.ОрганизацияПрименяетУСН =
		УчетнаяПолитика.СистемаНалогообложения(Выборка.Организация, Выборка.Период) = Перечисления.СистемыНалогообложения.Упрощенная;
	Реквизиты.НачислятьНДСПоОтгрузке  = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Выборка.Организация, Выборка.Период);
	
	Реквизиты.ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Реквизиты.ВалютаДокумента = Реквизиты.ВалютаРеглУчета Тогда
		Реквизиты.КурсДокумента      = 1;
		Реквизиты.КратностьДокумента = 1;
		КоэффициентРуб               = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			Реквизиты.ВалютаДокумента, Выборка.Период);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ = Истина;	
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ДокументСсылка, Выборка.ВалютаДокумента, Формат(Выборка.Период, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументСсылка);
			Возврат ПараметрыПроведения;
		КонецЕсли;
		
		Реквизиты.КурсДокумента = СтруктураКурсаДокумента.Курс;
		Реквизиты.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		КоэффициентРуб = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
		Если Реквизиты.ВалютаВзаиморасчетов = Реквизиты.ВалютаДокумента Тогда
			Реквизиты.КурсВзаиморасчетов      = 1;
			Реквизиты.КратностьВзаиморасчетов = 1;
			КоэффициентВзаиморасчетов         = 1;
		Иначе
			СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				Реквизиты.ВалютаВзаиморасчетов, Выборка.Период);
			
			Если СтруктураКурсаВзаиморасчетов.Кратность = 0 Тогда
				Отказ = Истина;	
				ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
					|Не задана кратность валюты %2 на дату %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, ДокументСсылка, Выборка.ВалютаДокумента, Формат(Выборка.Период, "ДФ=dd.MM.yy"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументСсылка);
				Возврат ПараметрыПроведения;
			КонецЕсли;
			
			Реквизиты.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс; 
			Реквизиты.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			КоэффициентВзаиморасчетов = (СтруктураКурсаВзаиморасчетов.Курс / СтруктураКурсаВзаиморасчетов.Кратность) / КоэффициентРуб;
		КонецЕсли;
	Иначе
		Реквизиты.КурсВзаиморасчетов      = 1;
		Реквизиты.КратностьВзаиморасчетов = 1;
		КоэффициентВзаиморасчетов         = 1;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Реквизиты.ВалютаРеглУчета);
	Запрос.УстановитьПараметр("КоэффициентВзаиморасчетов",      КоэффициентВзаиморасчетов);
	Запрос.УстановитьПараметр("КоэффициентРуб",                 КоэффициентРуб);
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСН",        Ложь);
	
	Запрос.УстановитьПараметр("СинонимДенежныеДокументы",       НСтр("ru = 'Денежные документы'"));
	
	Запрос.УстановитьПараметр("ВестиУчетПоВидамДеятельностиИП", УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Выборка.Организация, Выборка.Период));
	Запрос.УстановитьПараметр("ОсновнаяНоменклатурнаяГруппа",   УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Выборка.Организация, Выборка.Период));
	
	ПодготовитьТаблицыДокументаДляЦелейПриобретенияРеализации(Запрос, Реквизиты);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
				 + ТекстЗапросаТаблицыДокумента(НомераТаблиц, Выборка.ВидОперации)
				 + ТекстЗапросаЗачетАвансов(НомераТаблиц)
				 + ТекстЗапросаВыдачаДенежныхДокументов(НомераТаблиц)
				 + ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Процедура ПодготовитьТаблицыДокументаДляЦелейПриобретенияРеализации(Запрос, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику Тогда
		Сумма = "Сумма";
	Иначе
		Сумма = "Стоимость";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДенежныеДокументы.Ссылка,
	|	ДенежныеДокументы.НомерСтроки,
	|	ДенежныеДокументы.Количество,
	|	ДенежныеДокументы.Стоимость,
	|	ДенежныеДокументы." + Сумма + " КАК Сумма,
	|	ДенежныеДокументы.ДенежныйДокумент,
	|	0 КАК СтавкаНДС,
	|	0 КАК НДС
	|ИЗ
	|	Документ.ВыдачаДенежныхДокументов.ДенежныеДокументы КАК ДенежныеДокументы
	|ГДЕ
	|	ДенежныеДокументы.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДенежныеДокументы = РезультатЗапроса[0].Выгрузить();
	УчетВзаиморасчетов.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ДенежныеДокументы, Реквизиты);
	Запрос.УстановитьПараметр("ДенежныеДокументы",ДенежныеДокументы);
	
КонецПроцедуры

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Контрагент,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.Номер,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СтатьяДоходовИРасходов,
	|	Реквизиты.СубконтоДт1,
	|	Реквизиты.СубконтоДт2,
	|	Реквизиты.СубконтоДт3,
	|	Реквизиты.СчетУчетаДенежныхДокументов,
	|	Реквизиты.СчетУчетаДоходов КАК СчетУчетаДоходов,
	|	Реквизиты.СчетУчетаРасходов КАК СчетУчетаРасходов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.Ссылка,
	|	&ОрганизацияПрименяетУСН КАК ОрганизацияПрименяетУСН,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВидОперации
	|ИЗ
	|	Документ.ВыдачаДенежныхДокументов КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц, ВидОперации)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаДенежныеДокументы", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДенежныеДокументы.Ссылка,
	|	ДенежныеДокументы.НомерСтроки,
	|	ДенежныеДокументы.ДенежныйДокумент,
	|	ДенежныеДокументы.Количество,
	|	ДенежныеДокументы.Сумма КАК СуммаРуб,
	|	ДенежныеДокументы.СуммаВал КАК Сумма,
	|	ДенежныеДокументы.Стоимость,
	|	ДенежныеДокументы.СуммаВал КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ДенежныеДокументы
	|ИЗ
	|	&ДенежныеДокументы КАК ДенежныеДокументы";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц)
	
	//	ДокументАванса, СуммаЗачета
	
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДенежныхДокументов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента",       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаАвансов",         НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ИСТИНА КАК ЭтоВозврат,
	|	ИСТИНА КАК НДСВключенВСтоимость
	|ИЗ
	|	Документ.ВыдачаДенежныхДокументов КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеДокументы.Ссылка КАК Ссылка,
	|	ДенежныеДокументы.Сумма КАК СуммаВзаиморасчетов,
	|	ДенежныеДокументы.Сумма КАК СуммаРуб
	|ПОМЕСТИТЬ ВременнаяТаблицаДенежныхДокументов
	|ИЗ
	|	ДенежныеДокументы КАК ДенежныеДокументы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ДоговорыКонтрагентов.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	СУММА(ТаблицыДокумента.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицыДокумента.СуммаРуб) КАК СуммаРуб,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	0 КАК СуммаВзаиморасчетовЕНВД,
	|	0 КАК СуммаВзаиморасчетовПатент
	|ИЗ
	|	Документ.ВыдачаДенежныхДокументов КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Реквизиты.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДенежныхДокументов КАК ТаблицыДокумента
	|		ПО Реквизиты.Ссылка = ТаблицыДокумента.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|	И Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику)
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.Ссылка,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах,
	|	ДоговорыКонтрагентов.УчетАгентскогоНДС,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗачетАвансов.НомерСтроки,
	|	Реквизиты.СчетУчетаДенежныхДокументов КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	ТаблицаЗачетАвансов.ДенежныйДокумент КАК ДокументАванса,
	|	ТаблицаЗачетАвансов.Сумма КАК СуммаЗачета
	|ИЗ
	|	Документ.ВыдачаДенежныхДокументов.ДенежныеДокументы КАК ТаблицаЗачетАвансов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыдачаДенежныхДокументов КАК Реквизиты
	|		ПО ТаблицаЗачетАвансов.Ссылка = Реквизиты.Ссылка
	|ГДЕ
	|	ТаблицаЗачетАвансов.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗачетАвансов.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВыдачаДенежныхДокументов(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВыдачаДенежныхДокументов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДенежныеДокументы.НомерСтроки,
	|	ДенежныеДокументы.ДенежныйДокумент,
	|	ДенежныеДокументы.Количество,
	|	ДенежныеДокументы.Сумма,
	|	ДенежныеДокументы.СуммаРуб КАК СуммаБУ,
	|	ДенежныеДокументы.Сумма КАК СуммаВал,
	|	ДенежныеДокументы.СуммаРуб КАК СуммаНУ,
	|	ДенежныеДокументы.Стоимость
	|ИЗ
	|	ДенежныеДокументы КАК ДенежныеДокументы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДенежныеДокументы.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПоступлениеМПЗИПРеквизиты",             НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаПрочее",         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ПоступлениеТоваровУслуг"" КАК ТипПоступления,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	НЕОПРЕДЕЛЕНО КАК ТипСклада,
	|	ИСТИНА КАК НДСВключенВСтоимость,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	Реквизиты.ВидОперации КАК ВидОперации
	|ИЗ
	|	Документ.ВыдачаДенежныхДокументов КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ДенежныеДокументы"" КАК ИмяСписка,
	|	&СинонимДенежныеДокументы КАК СинонимСписка,
	|	ПрочаяВыдача.НомерСтроки КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	ПрочаяВыдача.СуммаРуб КАК Сумма,
	|	0 КАК НДС,
	|	ПрочаяВыдача.Количество КАК Количество,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
	|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.СубконтоДт1
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.СубконтоДт2
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.СубконтоДт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.СубконтоДт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.СубконтоДт1
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.СубконтоДт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.СубконтоДт2
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.СубконтоДт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.СубконтоДт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидРасходовНУ,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПринятиеКналоговомуУчету,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	НЕОПРЕДЕЛЕНО КАК Партия
	|ИЗ
	|	ДенежныеДокументы КАК ПрочаяВыдача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыдачаДенежныхДокументов КАК Реквизиты
	|		ПО (Реквизиты.Ссылка = ПрочаяВыдача.Ссылка)
	|ГДЕ
	|	Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Реквизиты.ДенежныеДокументы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочаяВыдача.Ссылка КАК ДокументРасчетов,
	|	СУММА(ПрочаяВыдача.СуммаРуб) КАК СуммаРуб
	|ИЗ
	|	ДенежныеДокументы КАК ПрочаяВыдача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыдачаДенежныхДокументов КАК Реквизиты
	|		ПО (Реквизиты.Ссылка = ПрочаяВыдача.Ссылка)
	|ГДЕ
	|	Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочаяВыдача.Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ
//

Процедура СформироватьДвиженияВыдачаДенежныхДокументов(ТаблицаДокумента, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВыдачаДенежныхДокументов(ТаблицаДокумента, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Проводки по выдаче денежных документов
	СодержаниеПроводок = "Выдача денежных документов";
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаДокумента Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Дата;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержаниеПроводок;
		
		Проводка.СчетКт      = Реквизиты.СчетУчетаДенежныхДокументов;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеДокументы", СтрокаТаблицы.ДенежныйДокумент);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.ПодразделениеОрганизации;
		КонецЕсли;
		
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику Тогда
			
			Проводка.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Стоимость,
				Реквизиты.ВалютаДокумента, ВалютаРегламентированногоУчета,
				Реквизиты.КурсВзаиморасчетов, 1,
				Реквизиты.КратностьВзаиморасчетов, 1);
			
			Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Ссылка);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт        = Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.Стоимость;
			КонецЕсли;
			
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт        = Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.Стоимость;
			КонецЕсли;
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеОрганизации;
			КонецЕсли;
			
		ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВыдачаПодотчетномуЛицу Тогда
			
			Проводка.Сумма = СтрокаТаблицы.СуммаБУ;
			
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
			КонецЕсли;
			
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", Реквизиты.Контрагент);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт        = Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;
			КонецЕсли;
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеОрганизации;
			КонецЕсли;
			
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт        = Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
			КонецЕсли;
			
		Иначе
			
			Проводка.Сумма = СтрокаТаблицы.СуммаБУ;
			
			Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Реквизиты.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Реквизиты.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Реквизиты.СубконтоДт3);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт        = Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;
			КонецЕсли;
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеОрганизации;
			КонецЕсли;
			
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт        = Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
			КонецЕсли;
			
		КонецЕсли;
		
		// Отклонение суммы возврата поставщику от учетной стоимости денежных документов
		
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику 
			И СтрокаТаблицы.Стоимость <> СтрокаТаблицы.СуммаВал Тогда
			
			Если Реквизиты.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
				СуммаОтклонения = СтрокаТаблицы.Стоимость - СтрокаТаблицы.СуммаБУ;
			Иначе
				СуммаОтклоненияВал = СтрокаТаблицы.Стоимость - СтрокаТаблицы.СуммаВал;
				СтоимостьРуб = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТаблицы.Стоимость,
					Реквизиты.ВалютаДокумента, ВалютаРегламентированногоУчета,
					Реквизиты.КурсВзаиморасчетов, 1,
					Реквизиты.КратностьВзаиморасчетов, 1);
				СуммаОтклонения    = СтоимостьРуб - СтрокаТаблицы.СуммаБУ;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = Реквизиты.Дата;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = СодержаниеПроводок;
			
			Если СуммаОтклонения > 0 Тогда
				
				Проводка.Сумма = СуммаОтклонения;
				
				Проводка.СчетДт      = Реквизиты.СчетУчетаРасходов;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяДоходовИРасходов);
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				
				Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Ссылка);
				
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				Если СвойстваСчетаКт.Валютный Тогда
					Проводка.ВалютаКт        = Реквизиты.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СуммаОтклоненияВал;
				КонецЕсли;
				
			Иначе
				
				Проводка.Сумма = - СуммаОтклонения;
				
				Проводка.СчетКт = Реквизиты.СчетУчетаДоходов;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяДоходовИРасходов);
				
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				
				Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Ссылка);
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				Если СвойстваСчетаДт.Валютный Тогда
					Проводка.ВалютаДт        = Реквизиты.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = -СуммаОтклоненияВал;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеОрганизации;
			КонецЕсли;
			
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.ПодразделениеОрганизации;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыдачаДенежныхДокументов(ТаблицаДокумента, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаДокумента
	
	СписокОбязательныхКолонок = ""
		+ "НомерСтроки,"
		+ "ДенежныйДокумент,"
		+ "Количество,"
		+ "Сумма,"
		+ "СуммаБУ,"
		+ "СуммаВал,"
		+ "СуммаНУ,"
		+ "Стоимость";
	
	Параметры.Вставить("ТаблицаДокумента", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДокумента, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Дата,"
		+ "Период,"
		+ "Организация,"
		+ "ВалютаДокумента,"
		+ "ДоговорКонтрагента,"
		+ "Контрагент,"
		+ "КратностьВзаиморасчетов,"
		+ "КурсВзаиморасчетов,"
		+ "Номер,"
		+ "ПодразделениеОрганизации,"
		+ "СтатьяДоходовИРасходов,"
		+ "СубконтоДт1,"
		+ "СубконтоДт2,"
		+ "СубконтоДт3,"
		+ "СчетУчетаДенежныхДокументов,"
		+ "СчетУчетаДоходов,"
		+ "СчетУчетаРасходов,"
		+ "СчетУчетаРасчетовСКонтрагентом,"
		+ "Ссылка,"
		+ "ОрганизацияПрименяетУСН,"
		+ "ВалютаРегламентированногоУчета,"
		+ "ВалютаВзаиморасчетов,"
		+ "РасчетыВУсловныхЕдиницах,"
		+ "Регистратор,"
		+ "ВидОперации";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расходный ордер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РасходныйОрдер";
	КомандаПечати.Представление = НСтр("ru = 'Расходный ордер'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Выдача денежных документов""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ТекстЗапросаДляФормированияПечатнойФормыРасходногоОрдера()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Номер,
	|	Док.ВидОперации,
	|	Док.Дата,
	|	Док.Выдано КАК ПредставлениеПолучателя,
	|	Док.Организация,
	|	Док.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА Док.ПодразделениеОрганизации.ОбособленноеПодразделение
	|				И Док.ПодразделениеОрганизации.НаименованиеПолное <> """"
	|			ТОГДА Док.ПодразделениеОрганизации.НаименованиеПолное
	|		ИНАЧЕ Док.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	Док.СуммаДокумента,
	|	Док.ВалютаДокумента,
	|	Док.ДенежныеДокументы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ДенежныйДокумент КАК ДенежныйДокумент,
	|		ПРЕДСТАВЛЕНИЕ(Док.ДенежныеДокументы.ДенежныйДокумент) КАК ДенежныйДокументПредставление,
	|		Количество КАК Количество,
	|		Стоимость,
	|		ВЫБОР
	|			КОГДА Док.ДенежныеДокументы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику)
	|				ТОГДА Док.ДенежныеДокументы.Сумма
	|			ИНАЧЕ Док.ДенежныеДокументы.Стоимость
	|		КОНЕЦ КАК Сумма
	|	)
	|ИЗ
	|	Документ.ВыдачаДенежныхДокументов КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Дата,
	|	Док.Ссылка,
	|	Док.ДенежныеДокументы.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует табличный документ с печатной формой расходного ордера на выдачу денежных документов
//
// Возвращаемое значение:
//  Табличный документ - печатная форма расходного ордера
//
Функция ПечатьВыдачаДенежныхДокументов(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВыдачаДенежныхДокументов_РасходныйОрдер";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаДляФормированияПечатнойФормыРасходногоОрдера();
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВыдачаДенежныхДокументов.ПФ_MXL_РасходныйОрдер");
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку 
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, "Расходный ордер");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Организация");
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подразделение");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("КомуВыдано");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		Если Шапка.ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику Тогда
			ИмяОперации = "Возврат";
		Иначе
			ИмяОперации = "";
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + ИмяОперации);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка" + ИмяОперации);
		
		ТаблицаДенежныхДокументов = Шапка.ДенежныеДокументы.Выгрузить();
		Для Каждого СтрокаДенежногоДокумента Из ТаблицаДенежныхДокументов Цикл
			ОбластьМакета.Параметры.Заполнить(СтрокаДенежногоДокумента);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого" + ИмяОперации);
		ОбластьМакета.Параметры.Сумма     = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ТаблицаДенежныхДокументов.Итог("Сумма"));
		Если ИмяОперации = "Возврат" Тогда
			ОбластьМакета.Параметры.Стоимость = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ТаблицаДенежныхДокументов.Итог("Стоимость"));
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ТаблицаДенежныхДокументов.Количество()
			+ ?(ИмяОперации = "Возврат", 
				" стоимостью " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(ТаблицаДенежныхДокументов.Итог("Стоимость"), Шапка.ВалютаДокумента), 
				"")
			+ ", на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(ТаблицаДенежныхДокументов.Итог("Сумма"), Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью = 
			ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ТаблицаДенежныхДокументов.Итог("Сумма"), Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьВыдачаДенежныхДокументов

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Проверяем, нужно ли для макета ПлатежноеПоручение формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасходныйОрдер") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасходныйОрдер", "Расходный ордер",
			ПечатьВыдачаДенежныхДокументов(МассивОбъектов, ОбъектыПечати), , "Документ.ВыдачаДенежныхДокументов.ПФ_MXL_РасходныйОрдер");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ ИБ

// Для документов, в которых настройка УСН отредактирована пользователем вручную, устанавливается признак ручной корректировки движений
//
Процедура ОбработатьРучнуюНастройкуКУДиР() Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаДенежныхДокументов.Ссылка
	|ИЗ
	|	Документ.ВыдачаДенежныхДокументов КАК ВыдачаДенежныхДокументов
	|ГДЕ
	|	ВыдачаДенежныхДокументов.УдалитьРучнаяНастройка_УСН"	
	;	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДокументы = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДокументы.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				ДокументОбъект = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
				ДокументОбъект.РучнаяКорректировка = Истина;
				ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
				
				// Запись обработанного объекта.
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось установить признак ручной корректировки движений у документа: %1 по причине:
						|%2'"),
						ВыборкаДокументы.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Документы.ВыдачаДенежныхДокументов, ВыборкаДокументы.Ссылка, ТекстСообщения);
					
				ОтменитьТранзакцию();	
				
			КонецПопытки;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли