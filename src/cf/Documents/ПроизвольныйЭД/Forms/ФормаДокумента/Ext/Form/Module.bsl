////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Объект") Тогда
		ЗначениеВРеквизитФормы(Параметры.Объект.ПолучитьОбъект(), "Объект");
	КонецЕсли;
		
	Если Параметры.Ключ.Пустая() Тогда
		Объект.СтатусДокумента = Перечисления.СтатусыЭД.Сформирован;
		Объект.Направление     = Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Если НЕ Объект.Прочитан И НЕ Объект.Ссылка.Пустая()
		И Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
		Документ = РеквизитФормыВЗначение("Объект");
		Документ.Прочитан = Истина;
		Документ.Записать();
		ЗначениеВРеквизитФормы(Документ, "Объект");
		ИзмененСтатус = Истина;
	КонецЕсли;
	
	ОбновитьТаблицуВложений();
	
	ОбновитьИнформациюПодвала();
	УстановитьДоступностьЭлементов();
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьЗаголовокФормы();
	УстановитьДоступностьЭлементов();
	ОбновитьИнформациюПодвала();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЕстьСоглашение(ТекущийОбъект) Тогда
		Отказ = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьТребуетсяПодтверждениеПоСоглашению(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ВыполнитьОбработкуОповещенияНаСервере();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("ЗакончитьДобавлениеФайла", ЭтотОбъект);
	ПроверитьЗаписьДокумента(ОбработкаПродолжения);
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПослеУдаления(Элемент)
	
	ОбработатьУдалениеВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУдалениеВложения()
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
		УдалитьЛишниеПрисоединенныеФайлы();
		УстановитьДоступностьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// Ограничение - в таблице Вложения не может быть больше одной строки.
	ЭД = Вложения[0].Ссылка;
	// Откроем вложение по стандартному механизму
	ДанныеФайла = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеФайла(ЭД, УникальныйИдентификатор);
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Если НЕ (Объект.СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЭД.ПодготовленКОтправке")
		ИЛИ Объект.СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Сформирован")) Тогда
		Отказ = Истина;
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить вложение из документа?'");
		Если ЭП.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'При удалении вложения будут удалены установленные подписи.'") + Символы.ПС + ТекстВопроса;
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросУдаленияВложения", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПодтверждениеПриИзменении(Элемент)
	
	ОбновитьСтатусСостояниеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(Поле.Имя, "ЭПКомуВыданСертификат")>0 Тогда
		ДобавитьСертификатВДоверенные(Элемент.ТекущиеДанные);
		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ОтсутствуетВСписке Тогда
			ПоказатьСертификат(Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Отпечаток);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭППриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЭП.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДоверятьСертификату.Доступность = Элементы.ЭП.ТекущиеДанные.ОтсутствуетВСписке;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОтменитьОтклонение(Команда)
	
	Если ЭДОтклонен Тогда
		ОбработкаПродолжения = Новый ОписаниеОповещения("ОбработатьОтменуОтклоненияЭД", ЭтотОбъект);
		ПроверитьЗаписьДокумента(ОбработкаПродолжения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		
		Отказ = Ложь;
		ПараметрыДокумента = ПолучитьМассивЭДДляОтправки(Отказ);
		Если Не Отказ Тогда
			ОбработатьВыбранныеДокументы(ПараметрыДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	// Ограничение - в таблице Вложения не может быть больше одной строки.
	Если Вложения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("ЗакончитьПодписаниеДокумента", ЭтотОбъект);
	ПроверитьЗаписьДокумента(ОбработкаПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПодписаниеДокумента(Неопределен, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивПодписей", МассивОтпечатков());
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗакончитьПодписаниеОповещение", ЭтотОбъект, ДополнительныеПараметры);
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(Вложения[0].Ссылка);
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(Новый Массив, "УтвердитьПодписать", , МассивЭД, ОбработчикОповещения);
	
КонецПроцедуры

&НаСервере
Функция МассивОтпечатков()
	
	Подписи = РеквизитФормыВЗначение("ЭП");
	МассивОтпечатков = Подписи.ВыгрузитьКолонку("Отпечаток");
	
	Возврат МассивОтпечатков;
	
КонецФункции

&НаКлиенте
Функция СравнитьПодписи(МассивОтпечатковДо)
	
	ДокументПодписан = Ложь;
	
	МассивОтпечатковПосле = МассивОтпечатков();
	
	Для Каждого Отпечаток Из МассивОтпечатковПосле Цикл
		
		Если МассивОтпечатковДо.Найти(Отпечаток) = Неопределено Тогда
			ДокументПодписан = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументПодписан;
	
КонецФункции

&НаКлиенте
Процедура ЗакончитьПодписаниеОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Подписан = СравнитьПодписи(ДополнительныеПараметры.МассивПодписей);
	
	Прочитать();
	ПоказатьРезультатПодписи(Подписан);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатПодписи(Подписан)
	
	ТекстСостояния = НСтр("ru = 'Подписано: (0)'");
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	Если Подписан Тогда
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Подписан", Истина);
		
		ОбновитьСтатусДокумента(ПараметрыДокумента);
		
		Прочитать();
		УстановитьДоступностьЭлементов();
		
		ТекстСостояния = НСтр("ru = 'Подписано: (1)'");
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеЭД");
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостояния);
	
КонецПроцедуры


&НаКлиенте
Процедура Отклонить(Команда)
	
	Если НЕ ЭДОтклонен И Вложения.Количество() > 0 Тогда
		ОбработкаПродолжения = Новый ОписаниеОповещения("ОтклонитьАннулироватьЭД", ЭтотОбъект, Истина);
		ПроверитьЗаписьДокумента(ОбработкаПродолжения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	
	Если Вложения.Количество() > 0 Тогда
		ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписей(Вложения[0].Ссылка);
		ОбновитьОтображениеДанных();
		ЗаполнитьТаблицуЭП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если Элементы.ЭП.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСертификат(Элементы.ЭП.ТекущиеДанные.НомерСтроки, Элементы.ЭП.ТекущиеДанные.Отпечаток);
	Иначе
		ОчиститьСообщения();
		ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверятьЭтомуСертификату(Команда)
	
	ДобавитьСертификатВДоверенные(Элементы.ЭП.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	НаправлениеИсходящий = (Объект.Направление = Перечисления.НаправленияЭД.Исходящий);
	
	СтатусГотов = Документы.ПроизвольныйЭД.СтатусОбъектаГотов(Объект);
	
	СтатусНеГотов = Документы.ПроизвольныйЭД.СтатусОбъектаНеГотов(Объект);
	
	СтатусПередан = Документы.ПроизвольныйЭД.СтатусОбъектаПередан(Объект);
	
	ЭДОтклонен = (Объект.СтатусДокумента = Перечисления.СтатусыЭД.Отклонен
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ОтклоненПолучателем
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ОшибкаПередачи);
		
	ДОЗакрыт = ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(Объект.Ссылка);
		
	ЕстьВложения = (Вложения.Количество() > 0);
	ТребуетсяПодтверждение = Объект.ТребуетсяПодтверждение;
	
	Элементы.Вложения.ТолькоПросмотр  = НЕ НаправлениеИсходящий;
	Элементы.Сообщение.ТолькоПросмотр = НЕ НаправлениеИсходящий;
	
	Элементы.Вложения.КоманднаяПанель.ПодчиненныеЭлементы.Добавить.Видимость = НаправлениеИсходящий;
	Элементы.Вложения.КоманднаяПанель.ПодчиненныеЭлементы.Удалить.Видимость  = НаправлениеИсходящий;
	
	Элементы.Подписать.Доступность             = (НЕ (СтатусПередан ИЛИ ЭДОтклонен Или ДОЗакрыт) И ЕстьВложения И (НаправлениеИсходящий ИЛИ ТребуетсяПодтверждение));
	Элементы.ПодписатьИОтправитьЭД.Доступность = (СтатусГотов И ЕстьВложения И (НаправлениеИсходящий ИЛИ ТребуетсяПодтверждение));
	
	КоманднаяПанель.ПодчиненныеЭлементы.ПодписатьИОтправитьЭД.Заголовок = НСтр(
		?(НаправлениеИсходящий, "ru = 'Отправить документ'", "ru = 'Отправить ответную подпись'"));
	
	Если НЕ (СтатусГотов ИЛИ СтатусНеГотов) Тогда
		Элементы.Добавить.Доступность  = Ложь;
		Элементы.Удалить.Доступность   = Ложь;
		Элементы.Сообщение.Доступность = Ложь;
		Элементы.ВложенияКонтекстноеМенюДобавить.Доступность = Ложь;
		Элементы.ВложенияКонтекстноеМенюУдалить.Доступность = Ложь;
	Иначе
		Элементы.Добавить.Доступность  = НЕ ЕстьВложения;
		Элементы.Удалить.Доступность   = ЕстьВложения;
		Элементы.ВложенияКонтекстноеМенюДобавить.Доступность = НЕ ЕстьВложения;
		Элементы.ВложенияКонтекстноеМенюУдалить.Доступность = ЕстьВложения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НаправлениеИсходящий
		И (Объект.СтатусДокумента = Перечисления.СтатусыЭД.Сформирован
			ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.Подписан
			ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленКОтправке) И НЕ ЭДОтклонен Тогда
		Элементы.ТребуетсяПодтверждение.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ТребуетсяПодтверждение.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ФормаОтменитьОтклонение.Видимость = НаправлениеИсходящий;
	
	Если ЭДОтклонен Тогда
		
		Если Вложения.Количество() Тогда
			ПричиныОтклонения.Очистить();
			НовСтрока = ПричиныОтклонения.Добавить();
			ПричинаОтклонения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вложения[0].Ссылка, "ПричинаОтклонения");
			НовСтрока.ПричинаОтклонения = ПричинаОтклонения;
		КонецЕсли;
		Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтраницыПодвала.ПодчиненныеЭлементы.ГруппаСтраницаОтклонение;
		Элементы.ФормаОтклонить.Доступность = Ложь;
		Элементы.ФормаОтменитьОтклонение.Доступность = (Объект.СтатусДокумента = Перечисления.СтатусыЭД.Отклонен);
	Иначе
		
		ПричиныОтклонения.Очистить();
		Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтраницыПодвала.ПодчиненныеЭлементы.ГруппаСтатусовИСостояния;
		Элементы.ФормаОтклонить.Доступность = ?((СтатусПередан ИЛИ НЕ ЕстьВложения Или ДОЗакрыт), Ложь, Истина);
		Элементы.ФормаОтменитьОтклонение.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.Организация.ТолькоПросмотр = ЕстьВложения;
	Элементы.Контрагент.ТолькоПросмотр = ЕстьВложения;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		ТекстЗаголовка = НСтр("ru = 'Исходящий документ %1 от %2'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗаголовка, Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Входящий документ %1 от %2'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗаголовка, Объект.Номер, Объект.Дата);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНовыйДокумент(ФлагЗаписи)
	
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	Если ЕстьСоглашение(ОбъектДокумент) Тогда
		ОбъектДокумент.Дата = ТекущаяДатаСеанса();
		ОбъектДокумент.Записать();
		ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
		ОбновитьИнформациюПодвала();
		
		ФлагЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПрисоединенныеФайлыКСообщению(МассивСтруктур)
	
	МассивВозврата = Новый Массив;
	ПараметрыСоглашения = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Объект.Ссылка);
	Если ЗначениеЗаполнено(ПараметрыСоглашения) Тогда
		ИдентификаторОрганизации = ПараметрыСоглашения.ИдентификаторОрганизации;
		ИдентификаторКонтрагента = ПараметрыСоглашения.ИдентификаторКонтрагента;
		СоглашениеЭД             = ПараметрыСоглашения.СоглашениеЭД;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения) И НЕ ЗначениеЗаполнено(СоглашениеЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураФайла Из МассивСтруктур Цикл
		ФайлБезРасширения = Неопределено;
		ФайлРасширение = Неопределено;
		АдресВоВременномХранилище = Неопределено;
		Если НЕ СтруктураФайла.Свойство("ФайлБезРасширения", ФайлБезРасширения)
			ИЛИ НЕ СтруктураФайла.Свойство("ФайлРасширение", ФайлРасширение)
			ИЛИ НЕ СтруктураФайла.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
			Продолжить;
		КонецЕсли;
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(Объект.Ссылка,
														   ФайлБезРасширения,
														   ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ФайлРасширение),
														   ТекущаяДатаСеанса(),
														   ТекущаяДатаСеанса(),
														   АдресВоВременномХранилище,
														   ,
														   ,
														   Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			
		МассивВозврата.Добавить(ДобавленныйФайл);
		
		НомерДокумента = ЭлектронныеДокументыВнутренний.ВернутьИдЭД(
			ДобавленныйФайл, ИдентификаторОрганизации, Неопределено);
		
		СтруктураДокумента =  Новый Структура(
			"Автор, ВладелецЭД, Организация, Контрагент,
			|ВидЭД, НаправлениеЭД, НомерЭД, УникальныйИД,
			|Отправитель, Получатель, НомерДокументаОтправителя, ДатаДокументаОтправителя, НомерВерсииЭД, ПрофильНастроекЭДО, СоглашениеЭД,
			|ТипЭлементаВерсииЭД, СтатусЭД, НаименованиеФайла",
			Пользователи.АвторизованныйПользователь(), Объект.Ссылка, Объект.Организация, Объект.Контрагент,
			Перечисления.ВидыЭД.ПроизвольныйЭД, Перечисления.НаправленияЭД.Исходящий, НомерДокумента, НомерДокумента,
			ИдентификаторОрганизации, ИдентификаторКонтрагента, Объект.Номер, Объект.Дата, 0, ПрофильНастроекЭДО, СоглашениеЭД,
			Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД, Перечисления.СтатусыЭД.Сформирован, ФайлБезРасширения);
			
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураДокумента);
	КонецЦикла;
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуВложений()
	
	ЗапросВложений = Новый Запрос;
	ЗапросВложений.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	ЗапросВложений.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ЭДПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	ЭДПрисоединенныеФайлы.Расширение КАК Расширение
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	Результат = ЗапросВложений.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("ИндексКартинки");
	Результат.Колонки.Добавить("НаименованиеФайла");
	
	Для Каждого ЭлементРезультат Из Результат Цикл
		
		ЭлементРезультат.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(
			ЭлементРезультат.Расширение);
		ЭлементРезультат.НаименованиеФайла = ЭлементРезультат.ИмяФайла + "." + ЭлементРезультат.Расширение;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Результат, "Вложения");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусДокумента(ПараметрыДокумента)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ПараметрыДокумента.Свойство("МассивНаОтправку") И ПараметрыДокумента.МассивНаОтправку.Количество() > 0 Тогда
		ЭД = ПараметрыДокумента.МассивНаОтправку[0];
		ДокументОбъект.СтатусДокумента = ЭД.СтатусЭД;
	КонецЕсли;
	
	Если ПараметрыДокумента.Свойство("Подписан") И ПараметрыДокумента.Подписан Тогда
		Если ДокументОбъект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
			ДокументОбъект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленоПодтверждение;
		Иначе
			ДокументОбъект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленКОтправке;
		КонецЕсли;
	КонецЕсли;
	
	Если (СоглашениеОпределялось И ЗначениеЗаполнено(СоглашениеЭД))
		ИЛИ (НЕ СоглашениеОпределялось И ЕстьСоглашение(ДокументОбъект)) Тогда
		ДокументОбъект.Записать();
		ОбновитьИнформациюПодвала();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		Прочитать();
		ОбновитьЗаголовокФормы();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьМассивЭДДляОтправки(Отказ)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если Модифицированность И ЕстьСоглашение(ДокументОбъект) Тогда
		ДокументОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли;
	
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(ПрофильНастроекЭДО.СпособОбменаЭД)
		И ЭП.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Операция отменена. Необходимо подписать вложение.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	СтруктураВозврата = "";
	Если Не Отказ Тогда
		ТаблицаВложений = РеквизитФормыВЗначение("Вложения");

		МассивВложений = ТаблицаВложений.ВыгрузитьКолонку("Ссылка");
		ЭтоИсходящийДокумент = Объект.Направление = Перечисления.НаправленияЭД.Исходящий;
		
		СтруктураВозврата = Новый Структура("МассивНаОтправку, ЭтоИсходящийДокумент", МассивВложений, ЭтоИсходящийДокумент);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыбранныеДокументы(ПараметрыПодписи)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыПодписи", ПараметрыПодписи);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтправкиПЭД", ЭтотОбъект, ПараметрыПодписи);
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(Неопределено, "Отправить", , ПараметрыПодписи.МассивНаОтправку, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиПЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
	Количество = 0;
	КолПодготовленных = 0;
	КолОтправленных = 0;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("КолОтправленных", КолОтправленных)
			И ТипЗнч(КолОтправленных) = Тип("Число")
			И КолОтправленных > 0 Тогда
			
			ТекстСостояния = НСтр("ru = 'Отправлено: (%1)'");
			Количество = КолОтправленных;
		ИначеЕсли Результат.Свойство("КолПодготовленных", КолПодготовленных)
			И ТипЗнч(КолПодготовленных) = Тип("Число")
			И КолПодготовленных > 0 Тогда
			
			ТекстСостояния = НСтр("ru = 'Подготовлено к отправке: (%1)'");
			Количество = КолПодготовленных;
		КонецЕсли;
	КонецЕсли;
	
	Если Количество > 0 Тогда
		ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния, Количество);
		ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостояния);
	КонецЕсли;
	
	ОбновитьСтатусДокумента(ДополнительныеПараметры);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры


&НаСервере
Процедура УдалитьЛишниеПрисоединенныеФайлы()
	
	ПараметрыВыборки = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ВыборкаПрисоединенныхФайлов = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(ПараметрыВыборки);
	
	Пока ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) И ВыборкаПрисоединенныхФайлов.Следующий() Цикл
		МассивФайлов = Вложения.Выгрузить().ВыгрузитьКолонку("Ссылка");
		Если МассивФайлов.Найти(ВыборкаПрисоединенныхФайлов.Ссылка) = Неопределено Тогда
			ВыборкаПрисоединенныхФайлов.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Истина);
		КонецЕсли;
	КонецЦикла;
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	Если ЕстьСоглашение(ОбъектДокумент) Тогда
		ОбновитьСтатусСостояниеЭД();
		ЗаполнитьТаблицуЭП();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьСоглашение(ОбъектДокумент)
	
	ВыводитьСообщение = НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность;
	НастройкиЭД = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДокумент, ВыводитьСообщение);
	СоглашениеОпределялось = Истина;
	Если ЗначениеЗаполнено(НастройкиЭД) Тогда
		ОбъектДокумент.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		СоглашениеЭД = НастройкиЭД.СоглашениеЭД;
		ПрофильНастроекЭДО = НастройкиЭД.ПрофильНастроекЭДО;
		Возврат Истина;
	Иначе
		СоглашениеЭД = Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка();
		ПрофильНастроекЭДО = Справочники.ПрофилиНастроекЭДО.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьТребуетсяПодтверждениеПоСоглашению(ТекущийОбъект)
	
	Требуется = Ложь;
	СпособОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "СпособОбменаЭД");
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(ПрофильНастроекЭДО.СпособОбменаЭД) Тогда
		Требуется = Истина;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|ГДЕ
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
		|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД";
		
		Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Требуется = Выборка.ИспользоватьЭП;
		КонецЕсли;
	КонецЕсли;
	ТекущийОбъект.ТребуетсяПодтверждение = Требуется;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭП()
	
	Если НЕ ЗначениеЗаполнено(СоглашениеЭД)
		ИЛИ НЕ СоглашениеЭД.ПроверятьСертификатыПодписей Тогда
		
		ТаблицаЭП = РеквизитФормыВЗначение("ЭП");
		ТаблицаЭП.Очистить();
		Для Каждого Вложение Из Вложения Цикл
			Для Каждого ТекСтрока Из Вложение.Ссылка.ЭлектронныеПодписи Цикл
				НоваяСтрока = ТаблицаЭП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
			КонецЦикла;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ТаблицаЭП, "ЭП");
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковОжидаемыхСертификатов = ЭлектронныеДокументыСлужебный.ОтпечаткиОжидаемыхСертификатов(Вложения[0].Ссылка);
	
	ТаблицаЭП = РеквизитФормыВЗначение("ЭП");
	ТаблицаЭП.Очистить();
	
	Для Каждого Вложение Из Вложения Цикл
		Для Каждого ТекСтрока Из Вложение.Ссылка.ЭлектронныеПодписи Цикл
			НоваяСтрока = ТаблицаЭП.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если МассивОтпечатковОжидаемыхСертификатов.Найти(ТекСтрока.Отпечаток) = Неопределено Тогда
				НоваяСтрока.ОтсутствуетВСписке = Истина;
				НоваяСтрока.ВыводКартинки = 1;
			Иначе
				НоваяСтрока.ВыводКартинки = 0;
			КонецЕсли;
			ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
		КонецЦикла;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаЭП, "ЭП");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВерна = ?(ТекСтрока.ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВерна = НСтр("ru = 'Не проверена'");
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусСостояниеЭД()
	
	ТаблицаСтатусов = ПолучитьТаблицуСтатусовЭД(Объект.Ссылка);
	Если ЗначениеЗаполнено(ТаблицаСтатусов) Тогда
		ЗначениеВРеквизитФормы(ТаблицаСтатусов, "СтатусыЭД");
	КонецЕсли;
	
	// Отображаем только статус "Закрыт принудительно".
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(Объект.Ссылка) Тогда
		Элементы.СостояниеЭД.Заголовок = НСтр("ru = 'Состояние'");
		ТекстСостояния = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка);
	Иначе
		// Если документ не "Закрыть принудительно" отображаем заголовок т.ч. Статусы.
		Элементы.СостояниеЭД.Заголовок = НСтр("ru = 'Статусы'");
		ТекстСостояния = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуСтатусовЭД(ЭД)
	
	КартаСтатусовЭД = Новый ТаблицаЗначений;
	КартаСтатусовЭД.Колонки.Добавить("Статус");
	КартаСтатусовЭД.Колонки.Добавить("Пройден");
	
	ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД);
	ПризнакПройден = Истина;
	Для Каждого ТекСтрока Из КартаСтатусовЭД Цикл
		ТекСтрока.Пройден = ПризнакПройден;
		Если ТекСтрока.Статус = Перечисления.СтатусыЭД.Утвержден
			И (ЭД.СтатусДокумента = Перечисления.СтатусыЭД.Отклонен ИЛИ ЭД.СтатусДокумента = Перечисления.СтатусыЭД.ОтклоненПолучателем) Тогда
			ТекСтрока.Статус = Перечисления.СтатусыЭД.Отклонен;
			Прервать;
		КонецЕсли;
		Если ЭД.СтатусДокумента = ТекСтрока.Статус Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КартаСтатусовЭД;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтатус(КартаСтатусовЭД, Статус, Значение = Ложь)
	
	НовСтрока = КартаСтатусовЭД.Добавить();
	НовСтрока.Статус = Статус;
	НовСтрока.Пройден = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД)
	
	ПараметрыЭД = Новый Структура("ВидЭД, НаправлениеЭД, ВерсияРегламентаЭДО, Организация, Контрагент, СоглашениеЭД",
		Перечисления.ВидыЭД.ПроизвольныйЭД, Объект.Направление, Перечисления.ВерсииРегламентаОбмена1С.Версия20,
		Объект.Организация, Объект.Контрагент, СоглашениеЭД);
	
	НастройкиСтатусов = Новый ТаблицаЗначений;
	НастройкиСтатусов.Колонки.Добавить("СпособОбмена");
	НастройкиСтатусов.Колонки.Добавить("Направление");
	НастройкиСтатусов.Колонки.Добавить("ВидЭД");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьПодпись");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьКвитанции");
	НастройкиСтатусов.Колонки.Добавить("ИспользуетсяНесколькоПодписей");
	НастройкиСтатусов.Колонки.Добавить("ВерсияРегламентаЭДО");
	НастройкиСтатусов.Колонки.Добавить("ПрограммаБанка");
	НастройкиСтатусов.Колонки.Добавить("ТребоватьПодтверждения");
	ИспользуетсяЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
															"ИспользоватьЭлектронныеПодписиЭД");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЭД",           ПараметрыЭД.ВидЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД",   ПараметрыЭД.НаправлениеЭД);
	Запрос.УстановитьПараметр("Контрагент",      ПараметрыЭД.Контрагент);
	Запрос.УстановитьПараметр("Организация",     ПараметрыЭД.Организация);
	Запрос.УстановитьПараметр("ИспользуетсяЭП", ИспользуетсяЭП);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ИспользуетсяЭП
		|			ТОГДА Соглашение.ИспользоватьПодпись
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИспользоватьПодпись,
		|	Соглашение.ИспользоватьКвитанции,
		|	Соглашение.ВидЭД,
		|	Соглашение.Направление,
		|	Соглашение.СпособОбмена,
		|	Соглашение.ВерсияФорматаПакета,
		|	Соглашение.ПрограммаБанка
		|ИЗ
		|	(ВЫБРАТЬ
		|		Истина КАК ИспользоватьПодпись,
		|		Истина КАК ИспользоватьКвитанции,
		|		ВЫБОР
		|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|		КОНЕЦ КАК Направление,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбмена,
		|		0 КАК Приоритет,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПрограммаБанка КАК ПрограммаБанка
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
		|		И Не СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления) КАК Соглашение";
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		НоваяСтрока = НастройкиСтатусов.Добавить();
		НоваяСтрока.СпособОбмена          = Результат.СпособОбмена;
		НоваяСтрока.Направление           = Результат.Направление;
		НоваяСтрока.ВидЭД                 = Результат.ВидЭД;
		НоваяСтрока.ИспользоватьПодпись   = Результат.ИспользоватьПодпись;
		НоваяСтрока.ИспользоватьКвитанции = Результат.ИспользоватьКвитанции;
		НоваяСтрока.ТребоватьПодтверждения = Объект.ТребуетсяПодтверждение;

		НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
		НоваяСтрока.ПрограммаБанка        = Результат.ПрограммаБанка;
	КонецЕсли;
	
	Если НастройкиСтатусов.Количество() > 0 Тогда
		УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов)
	
	МассивСтатусов = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(НастройкиСтатусов);
	Для Каждого Элемент Из МассивСтатусов Цикл
		ДобавитьСтатус(КартаСтатусовЭД, Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПодвала()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ (СоглашениеОпределялось И ЗначениеЗаполнено(СоглашениеЭД)) Тогда
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ЕстьСоглашение = ЕстьСоглашение(ДокументОбъект);
		Иначе
			ЕстьСоглашение = Истина;
		КонецЕсли;
		Если ЕстьСоглашение Тогда
			ОбновитьСтатусСостояниеЭД();
			ЗаполнитьТаблицуЭП();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусОтклонить()
	
	ТекущийСтатус = ?(ЭДОтклонен, Перечисления.СтатусыЭД.Отклонен, Перечисления.СтатусыЭД.Сформирован);
	СтруктураПараметров = Новый Структура("СтатусЭД", ТекущийСтатус);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Вложения[0].Ссылка, СтруктураПараметров, Ложь);
	Объект.СтатусДокумента = ТекущийСтатус;
	
КонецПроцедуры

&НаСервере
Функция ОтменитьОтклонениеНаСервере()
	
	ЭДОтклонен = Ложь;
	ЭлектронныйДокумент = Вложения[0].Ссылка.ПолучитьОбъект();
	ЭлектронныйДокумент.ПричинаОтклонения = "";
	Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		ЭлектронныйДокумент.ЭлектронныеПодписи.Очистить();
	КонецЕсли;
	ЭлектронныйДокумент.Записать();
	ИзменитьСтатусОтклонить();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
	КонецЕсли;
	
	ЗаполнитьТаблицуЭП();
	ОбновитьСтатусСостояниеЭД();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	СсылкаНаХранилищеДанныхСертификата = Неопределено;
	Если Вложения.Количество() > 0 Тогда
		ДвоичныеДанныеСертификата = Вложения[0].Ссылка.ЭлектронныеПодписи[НомерСтроки-1].Сертификат.Получить();
		СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСертификат(НомерСтроки, Отпечаток)
	
	АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(АдресДанныхСертификата);
	
	ВыбранныйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Если ВыбранныйСертификат=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сертификат не найден.'"));
		Возврат;
	КонецЕсли;
	
	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат);
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
		ОткрытьФорму("ОбщаяФорма.Сертификат", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатПодписиВСоглашение(Отпечаток, СертификатДобавлен)
	
	Если НЕ (СоглашениеОпределялось И ЗначениеЗаполнено(СоглашениеЭД)) ИЛИ Вложения.Количество() = 0 Тогда
		Возврат ;
	КонецЕсли;
	
	НайденнаяСтрока = Вложения[0].Ссылка.ЭлектронныеПодписи.Найти(Отпечаток, "Отпечаток");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		СоглашениеОбъект = СоглашениеЭД.ПолучитьОбъект();
		
		НоваяСтрока = СоглашениеОбъект.СертификатыПодписейКонтрагента.Добавить();
		НоваяСтрока.Сертификат = НайденнаяСтрока.Сертификат;
		НоваяСтрока.Отпечаток  = Отпечаток;
		СоглашениеОбъект.Записать();
		
		СертификатДобавлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВДоверенные(ДанныеПодписи)
	
	Если ДанныеПодписи <> Неопределено И ДанныеПодписи.ОтсутствуетВСписке Тогда
		Текст = НСтр("ru = 'Добавить сертификат %1 в список ожидаемых сертификатов контрагента?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеПодписи.КомуВыданСертификат);
		ДопПараметры = Новый Структура("ТекущиеДанные, ДанныеПодписи", Элементы.ЭП.ТекущиеДанные, ДанныеПодписи);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросПоСертификату", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтклонитьАннулироватьЭД(Результат, Отклонить = Ложь) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействияПослеОтклоненияЭД", ЭтотОбъект);
	ПараметрыЭД = Новый Структура("Организация, Отклонить, ОписаниеОповещения",
		Объект.Организация, Отклонить, ОписаниеОповещения);
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(Вложения[0].Ссылка, ПараметрыЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеОтклоненияЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ЭДОтклонен = Истина;
		ИзменитьСтатусОтклонить();
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьОтветНаВопросПоСертификату(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		ПоказатьСертификат(ТекущиеДанные.НомерСтроки,ТекущиеДанные.Отпечаток);
	Иначе
		// Добавим сертификат в Соглашение.
		ДанныеПодписи = ДополнительныеПараметры.ДанныеПодписи;
		СертификатДобавлен = Ложь;
		ДобавитьСертификатПодписиВСоглашение(ДанныеПодписи.Отпечаток, СертификатДобавлен);
		Если НЕ СертификатДобавлен Тогда 
			ТекстСообщения = НСтр("ru = 'Ошибка добавления сертификата подписи в список ожидаемых сертификатов!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ЗаполнитьТаблицуЭП();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросУдаленияВложения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Вложения.Очистить();
		ОбработатьУдалениеВложения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложение(ФайлПомещен, АдресВХранилище, ВыбранныйФайл, ДополнительныеПараметры) Экспорт
	
	СтруктураФайла  = Новый Структура;
	МассивСтруктур  = Новый Массив;
	Если ФайлПомещен Тогда
		СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныйФайл);
		СтруктураФайла.Вставить("ФайлБезРасширения",         СтруктураФайла.ИмяБезРасширения);
		СтруктураФайла.Вставить("ФайлРасширение",            СтруктураФайла.Расширение);
		СтруктураФайла.Вставить("АдресВоВременномХранилище", АдресВХранилище);
		МассивСтруктур.Добавить(СтруктураФайла);
		ДобавитьПрисоединенныеФайлыКСообщению(МассивСтруктур);
	КонецЕсли;
	ОбновитьТаблицуВложений();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПроверкуЗаписиДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ФлагЗаписи = Ложь;
		ЗаписатьНовыйДокумент(ФлагЗаписи);
		Если ФлагЗаписи Тогда
			ОбработкаПродолжения = "";
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
				И ДополнительныеПараметры.Свойство("ИмяПроцедуры", ОбработкаПродолжения)
				И ТипЗнч(ОбработкаПродолжения) = Тип("ОписаниеОповещения") Тогда
				ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаписьДокумента(ОбработкаПродолжения)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения операции необходимо записать документ.
			|Записать документ?'");
		ДопПараметры = Новый Структура("ИмяПроцедуры", ОбработкаПродолжения);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьПроверкуЗаписиДокумента", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтменуОтклоненияЭД(Неопределен, ДополнительныеПараметры) Экспорт
	
	Если ОтменитьОтклонениеНаСервере() Тогда
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьДобавлениеФайла(Неопределен, ДополнительныеПараметры) Экспорт
	
	// Ограничение оператора Такском на количество пересылаемых вложений.
	Если Вложения.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Операция отменена. Добавить возможно только одно вложение.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = Неопределено;
	ВыбранныйФайл   = "";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, АдресВХранилище, ВыбранныйФайл, Истина, УникальныйИдентификатор);
	
КонецПроцедуры
