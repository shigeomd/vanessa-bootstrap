////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Реквизиты шапки

	УстановитьУсловноеОформлениеШапкаИВидимость();
	
	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()

	// КорректируемыйПериод

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КорректируемыйПериод");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЗаписьДополнительногоЛиста", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// РасчетныйДокумент

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасчетныйДокумент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИспользоватьДокументРасчетовКакСчетФактуру", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	// ТоварыУслугиВидЦенности, ТоварыУслугиСобытие

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиВидЦенности");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиСобытие");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПрямаяЗаписьВКнигу", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	
	// Субконто
	Для Сч = 1 По 3 Цикл

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиСубконто" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ТоварыИУслуги.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	КонецЦикла;
	
	// Субконто
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиСубконто1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыИУслуги.Субконто1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыИУслуги.Субконто2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТоварыИУслуги.Субконто3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Не используются при прямой записи в книгу

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиНоменклатураКод");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиНоменклатураАртикул");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиЦена");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиСчетЗатрат");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиСубконто1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиСубконто2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиСубконто3");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПрямаяЗаписьВКнигу", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТоварыУслуги Тогда
		
		НадоИнициализировать = Ложь;
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыУслугиОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если Форма.ПрименяютсяСтавки4и2
			И НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыУслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			Форма.УстановитьУсловноеОформлениеТоварыУслуги();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыУслуги() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("ТоварыУслугиОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеТоварыУслугиОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("ТоварыУслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеТоварыУслугиПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыУслугиОбщее()

	НастройкиУсловногоОформления.Вставить("ТоварыУслугиОбщееПроинициализировано", Истина);


	// ТоварыУслугиСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ПрямаяЗаписьВКнигу", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ФормироватьПроводки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Субконто
	Для Сч = 1 По 3 Цикл

		// Незаполненное субконто

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиСубконто" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ТоварыИУслуги.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ТоварыИУслуги.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));

	КонецЦикла;


	// ТоварыУслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ТоварыИУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ТоварыИУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыУслугиПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("ТоварыУслугиПрименяютсяСтавки4и2Проинициализировано", Истина);


	// ТоварыУслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.ТоварыИУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.ТоварыИУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// ТоварыУслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыУслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.ТоварыИУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.ТоварыИУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуру(Форма, РеквизитыСФ = Неопределено)

	ИмяРеквизитаСсылка = ?(Форма.Объект.ИспользоватьДокументРасчетовКакСчетФактуру, "РасчетныйДокумент", "Ссылка");
	
	ИсходныеДанные = Форма.Объект[ИмяРеквизитаСсылка];
	
	Если ТипЗнч(ИсходныеДанные) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		РеквизитыСФ = ИсходныеДанные;	
		УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруВыданный(
			Форма, 
			РеквизитыСФ, 
			Истина, // ТребуетсяСчетФактура
			,		// СтруктураОтбора
			, 		// ИмяРеквизитаСчетФактура
			ИмяРеквизитаСсылка);
			
		Возврат;
		
	ИначеЕсли ТипЗнч(ИсходныеДанные) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		РеквизитыСФ = ИсходныеДанные;
	КонецЕсли; 
	
	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруПолученный(
		Форма, 
		РеквизитыСФ, 
		Форма.ТребуетсяСчетФактура, // ТребуетсяСчетФактура
		,       // СтруктураОтбора
		, 		// ИмяРеквизитаСчетФактура
		ИмяРеквизитаСсылка);
		
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеСчетФактуру()

	УчетНДСПереопределяемый.ПометитьНаУдалениеСчетФактуру(СчетФактура);

КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПодчиненныйСчетФактуруПолученный(ДокументОснование)

	Возврат УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(ДокументОснование);
	
КонецФункции 

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаДокумента = Неопределено)

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ВалютаДокумента",      ?(ВалютаДокумента <> Неопределено, ВалютаДокумента, Объект.ВалютаДокумента));
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ТолькоПросмотр",       ТолькоПросмотр);

	// 2. Открвыаем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры
		ИЛИ (ЕстьВалютныйУчет И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета)
		ИЛИ РасчетыВУЕ Тогда 
		
		ОткрыватьИзМеню = Ложь;
		
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
			
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	// Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения 		= Объект.ВалютаДокумента;
		КурсДоИзменения 		= Объект.КурсВзаиморасчетов;
		КратностьДоИзменения 	= Объект.КратностьВзаиморасчетов;
		
		Объект.СуммаВключаетНДС  		= СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ВалютаДокумента   		= СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов		= СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов 	= СтруктураЦеныИВалюта.Кратность;
		Объект.ТипЦен             		= СтруктураЦеныИВалюта.ТипЦен;

		Модифицированность = Истина;

		// Пересчитываем табличные части.
			
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения,
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;	

		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
				
	КонецЕсли;
		 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)
	
	ТаблицаЦенНоменклатуры = Неопределено;

	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.ТоварыИУслуги, "Номенклатура", Истина);
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
		
	Иначе
		
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;

	Для Каждого Строка Из Объект.ТоварыИУслуги Цикл
		
		ЦенаВключаетНДС = НЕ Объект.СуммаВключаетНДС;

		Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
			
			НайденнаяСтрока = ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
			
			Если НайденнаяСтрока <> Неопределено Тогда
				
				Строка.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
					Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
					ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
				
			КонецЕсли;
			
		ИначеЕсли ПересчитатьЦены Тогда
			
			Строка.Цена	= РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена,
				ВалютаДоИзменения, Объект.ВалютаДокумента,
				СтруктураКурса.Курс, Объект.КурсВзаиморасчетов,
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
		КонецЕсли;

		Если ПересчитатьНДС Тогда
			Строка.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Строка.Цена,
				ЦенаВключаетНДС,
				Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС, ПрименяютсяСтавки4и2));
		КонецЕсли;

		Строка.Сумма 	= Строка.Цена * ?(Строка.Количество = 0, 1, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС, ПрименяютсяСтавки4и2));

		ПересчитатьВсегоНаСервере(Строка, Объект.СуммаВключаетНДС);

	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	ПрямаяЗаписьВКнигу = ЭтаФорма.УпрощенныйУчетНДС;
	Если ПрямаяЗаписьВКнигу Тогда
		Объект.ПрямаяЗаписьВКнигу = Истина;
	КонецЕсли;

	Если ТекущаяДатаДокумента < '20150101'
		И Объект.Дата >= '20150101' Тогда 
		ЗаполнитьСписокКодовОпераций();
	КонецЕсли;
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКодовОпераций()
	
	ИспользоватьКоды2015 = Ложь;
	ИспользоватьДополнительныеКоды = Ложь;
	Если ТекущаяДатаДокумента >= '20150101' Тогда 
		ИспользоватьКоды2015 = Истина;
		ИспользоватьДополнительныеКоды = Истина;	
	КонецЕсли;
	
	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры, 
		Элементы.КодВидаОперации.СписокВыбора, 
		ИспользоватьКоды2015, 
		ИспользоватьДополнительныеКоды);
		
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ОрганизацияОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();
	
	Объект.ПрямаяЗаписьВКнигу  = ЭтаФорма.УпрощенныйУчетНДС;
	
	КонтрагентОбработатьИзменение();

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация,
		Неопределено);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ДоговорКонтрагентаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()

	ВалютаДоИзменения 	= Объект.ВалютаДокумента;
	КурсДоИзменения   	= Объект.КурсВзаиморасчетов;
	КратностьДоИзменения= Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения = Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(Объект.ДоговорКонтрагента);

	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

	Если ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		 Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		 Объект.СуммаВключаетНДС = РеквизитыДоговора.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	
	Если Объект.ТоварыИУслуги.Количество() > 0 И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	КонецЕсли;
	
	ЭтоКомиссия = БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентом(РеквизитыДоговора.ВидДоговора);
	
	ЭтоКомиссияНаЗакупку = БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомиссионеромНаЗакупку(РеквизитыДоговора.ВидДоговора);
	
	ПрименяютсяСтавки4и2 = РеквизитыДоговора.НДСПоСтавкам4и2;
	
	РасчетыВУЕ = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	
	ТребуетсяСчетФактура = НЕ ЭтоКомиссия И ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	Элементы.ПрямаяЗаписьВКнигу.Доступность   = НЕ Форма.УпрощенныйУчетНДС;
	
	Элементы.ФормироватьПроводки.Доступность  = Объект.ПрямаяЗаписьВКнигу;
	Элементы.ЗаписьДопЛиста.Доступность       = Объект.ПрямаяЗаписьВКнигу;
	Элементы.КорректируемыйПериод.Доступность = Объект.ПрямаяЗаписьВКнигу;

	Элементы.ГруппаКодВидаОперации.Видимость		= Объект.Дата >= '20150101';
	ТекущийКод = Элементы.КодВидаОперации.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда 
		Форма.НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		Форма.НадписьВидОперации = "";
	КонецЕсли;
	
	// Счет-фактура
	Если НЕ ЗначениеЗаполнено(Форма.СчетФактура) И Форма.ТребуетсяСчетФактура Тогда
		Если Форма.ЭтоКомиссияНаЗакупку Тогда
			Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница = Элементы.ГруппаЗарегистрироватьСчетФактуруОтКомиссионера;
		Иначе
			Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница = Элементы.ГруппаЗарегистрироватьСчетФактуру;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница = Элементы.ГруппаСчетФактураСсылка;
	КонецЕсли;

	Элементы.НадписьСчетФактура.Гиперссылка = Форма.ТребуетсяСчетФактура;
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.РасчетныйДокумент.Доступность  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента); 
	
	ЗаполнитьСписокВыбораСтавокНДС(Форма);

	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавокНДС(Форма)

	Элементы = Форма.Элементы;
	
	СписокВыбораСтавок = Элементы.ТоварыУслугиСтавкаНДС.СписокВыбора;
	СписокВыбораСтавок.Очистить();
	
	Если Форма.ПрименяютсяСтавки4и2 Тогда
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"), "4%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"), "2%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		
	Иначе
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"));
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогиВсего = Форма.Объект.ТоварыИУслуги.Итог("Всего");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Постфикс = "", ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"ТоварыУслугиСубконто" + Постфикс + "1",
								"ТоварыУслугиСубконто" + Постфикс + "2",
								"ТоварыУслугиСубконто" + Постфикс + "3");

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, ЭтоТаблица);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ВалютаРегламентированногоУчета",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета);
		
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;

	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	УпрощенныйУчетНДС	= УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры	 = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	ЕстьВалютныйУчет 				 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();

КонецПроцедуры 

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента			= Объект.Дата;

	ВалютаРегламентированногоУчета 	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	Если ТекущаяДатаДокумента > '20150101' Тогда
		ЗаполнитьСписокКодовОпераций();
	КонецЕсли;

	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		РеквизитыДоговора    = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(Объект.ДоговорКонтрагента);
		ЭтоКомиссия          = БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентом(РеквизитыДоговора.ВидДоговора);
		ЭтоКомиссияНаЗакупку = БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомиссионеромНаЗакупку(РеквизитыДоговора.ВидДоговора);
		ПрименяютсяСтавки4и2 = РеквизитыДоговора.НДСПоСтавкам4и2;
		РасчетыВУЕ           = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	Иначе
		ЭтоКомиссия          = Ложь;
		ЭтоКомиссияНаЗакупку = Ложь;
		ПрименяютсяСтавки4и2 = Ложь;
		РасчетыВУЕ           = Ложь;
	КонецЕсли;
	
	ТребуетсяСчетФактура = НЕ ЭтоКомиссия И ДоговорУказан;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьДоступностьСубконто();
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетаУчетаВСтрокеТоваров(СтрокаТЧ, СчетаУчета)

	СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
	СтрокаТЧ.СчетЗатрат   = СчетаУчета.СчетРасходов;
	ТоварыУслугиСчетЗатратПриИзменении(Неопределено);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ПараметрыКонтекста = Новый Структура();
	ПараметрыКонтекста.Вставить("Организация", 	Объект.Организация);
	ПараметрыКонтекста.Вставить("Дата", 		Объект.Дата);

	Для каждого СтрокаТаблицы Из Объект.ТоварыИУслуги Цикл

		КоличествоСубконто = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат).КоличествоСубконто;
		СтрокаТаблицы["Субконто1Доступность"] = КоличествоСубконто > 0;
		СтрокаТаблицы["Субконто2Доступность"] = КоличествоСубконто > 1;
		СтрокаТаблицы["Субконто3Доступность"] = КоличествоСубконто > 2;
		
		ПересчитатьВсегоНаСервере(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		
		Если СтрокаТаблицы.Номенклатура = Неопределено Тогда
			СтрокаТаблицы.НоменклатураКод = "";
			СтрокаТаблицы.НоменклатураАртикул = "";
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			РеквизитыНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТаблицы.Номенклатура, ПараметрыКонтекста);
			СтрокаТаблицы.НоменклатураКод = РеквизитыНоменклатуры.Код;
			СтрокаТаблицы.НоменклатураАртикул = РеквизитыНоменклатуры.Артикул;
		Иначе
			СтрокаТаблицы.НоменклатураКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "Код");
			СтрокаТаблицы.НоменклатураАртикул = "";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДокументОплатыПриИзменении(ДокументОплаты)

	СтруктураПараметров = Новый Структура("ДатаОплаты, СуммаОплаты");
	СтруктураПараметров.ДатаОплаты  = ДокументОплаты.Дата;
	СтруктураПараметров.СуммаОплаты = 0;

	Если ДокументОплаты.Метаданные().Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда

		СуммаДокументаОплаты = ДокументОплаты.СуммаДокумента;
		Если ДокументОплаты.Метаданные().Реквизиты.Найти("ВалютаДокумента") <> Неопределено
			И ДокументОплаты.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда

			КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОплаты.ВалютаДокумента, ДокументОплаты.Дата);

			СуммаДокументаОплаты = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СуммаДокументаОплаты, 
				ДокументОплаты.ВалютаДокумента, ВалютаРегламентированногоУчета,
				КурсВалюты.Курс, 1, 
				КурсВалюты.Кратность, 1);

		КонецЕсли;

		СуммаДокументаТекущая =
			Объект.ТоварыИУслуги.Итог("Сумма") + ?(НЕ Объект.СуммаВключаетНДС, Объект.ТоварыИУслуги.Итог("СуммаНДС"), 0);
		Если Объект.ДокументыОплаты.Итог("СуммаОплаты") + СуммаДокументаОплаты > СуммаДокументаТекущая Тогда
			СуммаДокументаОплаты = СуммаДокументаТекущая - Объект.ДокументыОплаты.Итог("СуммаОплаты");
			СуммаДокументаОплаты = ?(СуммаДокументаОплаты < 0, 0, СуммаДокументаОплаты);
		КонецЕсли;

		СтруктураПараметров.СуммаОплаты = СуммаДокументаОплаты;

	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоРасчетномуДокументуНаСервере(РежимДобавления)

	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	ОбъектФормы.ЗаполнитьПоРасчетномуДокументу(РежимДобавления);
	ЗначениеВРеквизитФормы(ОбъектФормы, "Объект");
	
	Для каждого СтрокаТаблицы Из Объект.ТоварыИУслуги Цикл
		
		ПересчитатьВсегоНаСервере(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьВсегоНаСервере(СтрокаТаблицы, СуммаВключаетНДС)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокПараметров(Форма, Объект, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСведенияОНоменклатуре(Знач Номенклатура, Знач СтруктураПараметров)
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.ТипЦен) Тогда
		СтруктураПараметров.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;

	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Номенклатура, СтруктураПараметров);

КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьКодСправочника(Элемент)
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "Код");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимость()
	
	ПоказыватьКонтрагентаСчетаФактуры = (НЕ ЗначениеЗаполнено(ЭтаФорма.СчетФактура)) И ЭтоКомиссияНаЗакупку;
	Если Элементы.Продавец.Видимость <> ПоказыватьКонтрагентаСчетаФактуры Тогда
		Элементы.Продавец.Видимость = ПоказыватьКонтрагентаСчетаФактуры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьПоРасчетномуДокументуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ТоварыИУслуги.Очистить();
		ЗаполнитьПоРасчетномуДокументуНаСервере(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИспользоватьДокументРасчетовКакСФЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПометитьНаУдалениеСчетФактуру();
		СчетФактура = Неопределено;
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	Иначе
		Объект.ИспользоватьДокументРасчетовКакСчетФактуру = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для каждого СтрокаТаблицы Из Объект.ТоварыИУслуги Цикл
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТаблицы.СчетЗатрат, СтрокаТаблицы, ПоляОбъекта);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ
//

&НаКлиенте
Процедура ЗаполнитьПоРасчетномуДокументу(Команда)

	Если Объект.ТоварыИУслуги.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьПоРасчетномуДокументуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПоРасчетномуДокументуНаСервере(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзРасчетногоДокумента(Команда)

	ЗаполнитьПоРасчетномуДокументуНаСервере(Истина);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ
//

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйДокументПриИзменении(Элемент)

	Если Объект.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		СчетФактура = Неопределено;
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПрямаяЗаписьВКнигуПриИзменении(Элемент)

	Если НЕ Объект.ПрямаяЗаписьВКнигу Тогда
		Объект.ФормироватьПроводки        = Ложь;
		Объект.ЗаписьДополнительногоЛиста = Ложь;
		Объект.КорректируемыйПериод       = '00010101';
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьДопЛистаПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КорректируемыйПериодПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДокументРасчетовКакСчетФактуруПриИзменении(Элемент)

	Если ЗначениеЗаполнено(СчетФактура) Тогда
		
		Если Объект.ИспользоватьДокументРасчетовКакСчетФактуру Тогда

			// Определим, является ли текущий счет-фактура собственным или от расчетного документ
			СобственныйСчетФактура = НайтиПодчиненныйСчетФактуруПолученный(Объект.Ссылка);
		
			Если СчетФактура = СобственныйСчетФактура Тогда
				ТекстВопроса = НСтр("ru = 'Требуется пометить на удаление подчиненный документ %1. Продолжить?'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, Строка(СчетФактура));
				Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьДокументРасчетовКакСФЗавершение", ЭтотОбъект);
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Иначе
				ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
				УправлениеФормой(ЭтаФорма);
			КонецЕсли;
		Иначе
			СчетФактура = Неопределено;
			ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
			УправлениеФормой(ЭтаФорма);
		КонецЕсли;
	Иначе
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(
		ЭтаФорма, СчетФактура, ?(ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный"), "СчетФактураВыданный", "СчетФактураПолученный"));

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтаФорма, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		Объект.КодВидаОперации = ВыбранныйКод.Значение;
		НадписьВидОперации = Сред(ВыбранныйКод.Представление, 5);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение",ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперации = "";
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "ТОВАРЫ И УСЛУГИ"
//

&НаКлиенте
Процедура ТоварыУслугиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;
	
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, ТекущиеДанные, "Субконто%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		ЭтаФорма,
		ТекущиеДанные,
		"Субконто%Индекс%",
		"ТоварыУслугиСубконто%Индекс%",
		ПараметрыДокумента);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ТекущиеДанные.СчетЗатрат, "", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда

		ТекущиеДанные.НоменклатураКод = "";
		ТекущиеДанные.НоменклатураАртикул = "";

	ИначеЕсли ТипЗнч(ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда

		ПараметрыКонтекста = Новый Структура();
		ПараметрыКонтекста.Вставить("Дата",                    Объект.Дата);
		ПараметрыКонтекста.Вставить("Организация",             Объект.Организация);
		ПараметрыКонтекста.Вставить("ТипЦен",                  Объект.ТипЦен);
		ПараметрыКонтекста.Вставить("ВалютаДокумента",         Объект.ВалютаДокумента);
		ПараметрыКонтекста.Вставить("КурсВзаиморасчетов",      Объект.КурсВзаиморасчетов);
		ПараметрыКонтекста.Вставить("КратностьВзаиморасчетов", Объект.КратностьВзаиморасчетов);
		ПараметрыКонтекста.Вставить("СуммаВключаетНДС",        Объект.СуммаВключаетНДС);
		ПараметрыКонтекста.Вставить("СтавкаНДС",               ТекущиеДанные.СтавкаНДС);

		ПараметрыНоменклатуры = ПолучитьСведенияОНоменклатуре(ТекущиеДанные.Номенклатура, ПараметрыКонтекста);

		Если ЗначениеЗаполнено(ПараметрыНоменклатуры.Цена) Тогда
			ТекущиеДанные.Цена  = ПараметрыНоменклатуры.Цена;
			ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
		КонецЕсли;

		ТекущиеДанные.СтавкаНДС = ПараметрыНоменклатуры.СтавкаНДС;
		ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(ТекущиеДанные, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);

		ЗаполнитьСчетаУчетаВСтрокеТоваров(ТекущиеДанные, ПараметрыНоменклатуры.СчетаУчета);

		ТекущиеДанные.НоменклатураКод = ПараметрыНоменклатуры.Код;
		ТекущиеДанные.НоменклатураАртикул = ПараметрыНоменклатуры.Артикул;

	Иначе

		ТекущиеДанные.НоменклатураКод = ПолучитьКодСправочника(ТекущиеДанные.Номенклатура);
		ТекущиеДанные.НоменклатураАртикул = "";

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиСуммаНДСПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;
	ТекущиеДанные.Всего = ТекущиеДанные.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиСчетЗатратПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;

	КоличествоСубконто = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетЗатрат).КоличествоСубконто;
	Если КоличествоСубконто > 0 Тогда
		ТекущиеДанные.Субконто1Доступность = Истина;
	КонецЕсли;
	Если КоличествоСубконто > 1 Тогда
		ТекущиеДанные.Субконто2Доступность = Истина;
	КонецЕсли;
	Если КоличествоСубконто > 2 Тогда
		ТекущиеДанные.Субконто2Доступность = Истина;
	КонецЕсли;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, ТекущиеДанные.СчетЗатрат, "", Истина);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто1",
		"Субконто2",
		"Субконто3");

	ПоляОбъекта.Вставить("Организация", Объект.Организация);

	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ТекущиеДанные.СчетЗатрат, ТекущиеДанные, ПоляОбъекта, Истина, ЗначенияСубконто);

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, ТекущиеДанные, "Субконто%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		ЭтаФорма,
		ТекущиеДанные,
		"Субконто%Индекс%",
		"ТоварыУслугиСубконто%Индекс%",
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиСубконто1ПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, ТекущиеДанные, "Субконто%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		ЭтаФорма,
		ТекущиеДанные,
		"Субконто%Индекс%",
		"ТоварыУслугиСубконто%Индекс%",
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиСубконто2ПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, ТекущиеДанные, "Субконто%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		ЭтаФорма,
		ТекущиеДанные,
		"Субконто%Индекс%",
		"ТоварыУслугиСубконто%Индекс%",
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиСубконто3ПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, ТекущиеДанные, "Субконто%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		ЭтаФорма,
		ТекущиеДанные,
		"Субконто%Индекс%",
		"ТоварыУслугиСубконто%Индекс%",
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ТекущиеДанные, Объект.СуммаВключаетНДС,, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиЦенаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ТекущиеДанные, Объект.СуммаВключаетНДС,, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;
	ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ?(ТекущиеДанные.Количество = 0, 1, ТекущиеДанные.Количество);
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(ТекущиеДанные, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиСтавкаНДСПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТоварыУслуги.ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(ТекущиеДанные, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "ДОКУМЕНТЫ ОПЛАТЫ"
//

&НаКлиенте
Процедура ДокументыОплатыДокументОплатыПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДокументыОплаты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОплаты) Тогда
		СтруктураПараметров = ПолучитьДанныеДокументОплатыПриИзменении(ТекущиеДанные.ДокументОплаты);
		ТекущиеДанные.ДатаОплаты  = СтруктураПараметров.ДатаОплаты;
		ТекущиеДанные.СуммаОплаты = СтруктураПараметров.СуммаОплаты;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Объект.Дата >= '20150101' Тогда
			Объект.КодВидаОперации = "01";
		КонецЕсли;	
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление(); // Вызываем после инициализации реквизитов формы. 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураПолученный"
		И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеОтражениеНДСКВычету";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерСчетаФактурыПолученного) И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Номер счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НомерСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) И ЗначениеЗаполнено(НомерСчетаФактурыПолученного)  Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДатаСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
	Если ЭтоКомиссияНаЗакупку И НЕ ЗначениеЗаполнено(Продавец) 
		И (ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) ИЛИ ЗначениеЗаполнено(НомерСчетаФактурыПолученного)) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Составлен от имени'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Продавец",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьДоступностьСубконто();
	
	Если ЗначениеЗаполнено(НомерСчетаФактурыПолученного)
		И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		
		Если ТекущийОбъект.ИспользоватьДокументРасчетовКакСчетФактуру
			И НЕ ЗначениеЗаполнено(ТекущийОбъект.РасчетныйДокумент) Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭтоКомиссияНаЗакупку И НЕ ЗначениеЗаполнено(Продавец) Тогда
			Возврат;
		КонецЕсли;
		
		Основание = ?(ТекущийОбъект.ИспользоватьДокументРасчетовКакСчетФактуру,
			ТекущийОбъект.РасчетныйДокумент,
			ТекущийОбъект.Ссылка);
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(Основание, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного, ?(ЭтоКомиссияНаЗакупку, Продавец, Неопределено));
		
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Результат);
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
		
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруПолученный(ЭтаФорма, ЭтоКомиссияНаЗакупку);
	
	Если РеквизитыСФ <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыДокументОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДокументыОплаты.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.ОтражениеНДСКВычету.ТабличныеЧасти.ДокументыОплаты.Реквизиты.ДокументОплаты.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры
