&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// Уведомим о появлении нового функционала
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("НумерацияСчетовФактур");
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтотОбъект, Элементы.ИнформационныеСсылки);

	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если  Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАванс") Тогда
		ПодключитьОбработчикОжидания("ПоказатьПредупреждениеОНумерацииСчетовФактур", 0.5, Истина);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриОткрытии();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) 	= 	Тип("УправляемаяФорма")
		И ИсточникВыбора.ИмяФормы 	= 	"Обработка.ПодборОснованийСчетаФактуры.Форма.ФормаВыбораОснованияСчетаФактуры" Тогда 
		Объект.ДоговорКонтрагента 	= ВыбранноеЗначение.Договор;
		Модифицированность = Истина;
		ДоговорКонтрагентаОбработатьИзменениеНаСервере();
		Объект.ДокументОснование 	= ВыбранноеЗначение.Документ;	
		ПриИзмененииДокументаОснования();
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ЗаполнитьНоменклатуруПоСчетуНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСчетФактураВыданныйНаАванс";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	ПредставлениеДокумента = Документы.СчетФактураВыданный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	
	УстановитьЗаголовокФормы(ЭтотОбъект, ПредставлениеДокумента);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СчетФактураВыданный", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидСчетаФактурыПриИзменении(Элемент)

	ВидСчетаФактурыПриИзмененииНаСервере();
	ЗапуститьПроверкуКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	Если Объект.Дата < '20150101'
		И Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку") 
		И Объект.СводныйКомиссионный Тогда
		ТекстСообщения = НСтр("ru='До 2015 года счета-фактуры на авансы комитента на закупку
		|создаются только на основании счета-фактуры полученного.'");
		Объект.Дата = ТекущаяДатаДокумента;
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗапуститьПроверкуКонтрагентов();

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Проверка на изменение ответственных лиц.
	Если НЕ ТребуетсяВызовСервера Тогда
		Если ТипЗнч(ДатыИзмененияОтветственныхЛиц) = Тип("ФиксированныйМассив") Тогда
			ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиентСервер.ДатыПринадлежатРазнымИнтервалам(Объект.Дата, 
				ТекущаяДатаДокумента, ДатыИзмененияОтветственныхЛиц);
		КонецЕсли;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	КонтрагентПриИзмененииНаСервере();
	ЗапуститьПроверкуКонтрагентов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленПриИзменении(Элемент)
	
	ПриИзмененииПризнакаВыставления();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПризнакаВыставления()
	
	Если НЕ Объект.Выставлен Тогда
		Объект.ДатаВыставления	= '00010101';
	Иначе
		Объект.ДатаВыставления	= Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура КодСпособаВыставленияПриИзменении(Элемент)
	
	Если Объект.КодСпособаВыставления = 2 Тогда
		Объект.Выставлен = Ложь;
		Объект.ДатаВыставления = '00010101';
	Иначе
		Объект.Выставлен = Истина;
		ПриИзмененииПризнакаВыставления();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)
	
	ЗапуститьПроверкуКонтрагентов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомитентПриИзменении(Элемент)
	
	ЗапуститьПроверкуКонтрагентов(Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Авансы>

&НаКлиенте
Процедура АвансыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку") Тогда
		СводноПоПолученным = Объект.Авансы.Количество() = 2;
		Если СводноПоПолученным Тогда 
			Объект.КодВидаОперации = ПолучитьКодВидаОперации(Объект.ВидСчетаФактуры, СводноПоПолученным);
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные  = Элементы.Авансы.ТекущиеДанные;
	НовыеПараметры = ПолучитьДанныеНоменклатураПриИзменении(ТекущиеДанные.Номенклатура);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, НовыеПараметры);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Авансы.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Авансы.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекущиеДанные, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДобавитьНоменклатуруПоСчетуНаОплату(Команда)
	
	Если Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку") Тогда
		Возврат;
	КонецЕсли;
	ПерезаполнятьТоварыУслугиПоСчету = Ложь;
	Отбор = Новый Структура("Организация,Контрагент,ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(Отбор, Объект);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоСчетуНаОплату(Команда)
	
	Если Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку") Тогда
		Возврат;
	КонецЕсли;
	ПерезаполнятьТоварыУслугиПоСчету = Истина;
	Отбор = Новый Структура("Организация,Контрагент,ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(Отбор, Объект);
	ПараметрыФорммы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаВыбора", ПараметрыФорммы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПолученнымСчетамФактурам(Команда)
	
	Если Объект.ВидСчетаФактуры <> ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку") Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru='Поле ""Контрагент"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", , Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстСообщения = НСтр("ru='Поле ""Договор"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДоговорКонтрагента", , Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоПолученнымСчетамФактурамНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	Элементы.ГруппаСостояниеЭД.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	ПредставлениеДокумента = Документы.СчетФактураВыданный.ПолучитьПредставлениеДокумента(
		Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтотОбъект, ПредставлениеДокумента);
	
	ТекущаяДатаДокумента 			= Объект.Дата;
	ТекущийНомерДокумента			= Объект.Номер;
	
	ЗаполнитьСписокКодовОпераций();
	
	ДатыИзмененияОтветственныхЛиц 	= Новый ФиксированныйМассив(
		ОтветственныеЛицаБППовтИсп.ДатыИзмененияОтветственныхЛицОрганизаций(Объект.Организация));	
	
	КомиссияЗакупка = Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку;
	СписокТиповДляВыбора.ЗагрузитьЗначения(УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(
		Объект.ВидСчетаФактуры, Объект.Исправление, КомиссияЗакупка));
			
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Объект.КодВидаОперации = ПолучитьКодВидаОперации(Объект.ВидСчетаФактуры);
	КонецЕсли;
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	Если Объект.Ссылка = Объект.ИсправляемыйСчетФактура Тогда
		СостояниеДокумента = 1;
	Иначе
		СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Объект.Дата);
	ВедетсяУчетНДСПоФЗ81 = УчетНДС.ВедетсяУчетНДСПоФЗ81(Объект.Дата);
	ОтражатьСуммыВЖурнале = Объект.Дата >= '20150101' 
		И (Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ЭтоЮрЛицо	= ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);
	
	Элементы.ГлавныйБухгалтер.Видимость = ЭтоЮрЛицо;
	Элементы.ГруппаРуководитель.Видимость = ЭтоЮрЛицо ИЛИ ВедетсяУчетНДСПоФЗ81;
	Элементы.ДекорацияИП.Видимость = ВедетсяУчетНДСПоФЗ81;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Если Объект.СформированПриВводеНачальныхОстатковНДС Тогда
		Форма.ТолькоПросмотр	= Истина;
	КонецЕсли;
	
	ПоОтчетуКомиссионера	= ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах");
	
	Элементы.НомерИсправленияСистемный.Доступность	= Форма.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление;
	Элементы.НомерИсходногоДокумента.Доступность	= Форма.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление;
	Элементы.ДатаИсходногоДокумента.Доступность		= Форма.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление;
	
	Если Форма.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление Тогда
		Элементы.ГруппаТекущиеНомераИДаты.ТекущаяСтраница 	= Элементы.ГруппаИсправляемый;  
		Элементы.ГруппаРеквизитыИсправления.Видимость = Истина;  
		Форма.НадписьСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерИсходногоДокумента,Формат(Объект.ДатаИсходногоДокумента,"ДЛФ=Д"));
	Иначе
		Элементы.ГруппаТекущиеНомераИДаты.ТекущаяСтраница 	= Элементы.ГруппаТекущий;
		Элементы.ГруппаРеквизитыИсправления.Видимость = Ложь;  
	КонецЕсли;
	
	Элементы.ГруппаВидаОперации.Видимость	= Форма.ИспользуетсяПостановлениеНДС1137;
	ТекущийКод = Элементы.КодВидаОперации.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда 
		Форма.НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		Форма.НадписьВидОперации = "";
	КонецЕсли;
	
	Элементы.Выставлен.Доступность = Форма.ИспользуетсяПостановлениеНДС1137 
		И НЕ Объект.СчетФактураНеВыставляется;
	Элементы.ДатаВыставления.Доступность = Форма.ИспользуетсяПостановлениеНДС1137 
		И НЕ Объект.СчетФактураНеВыставляется И Объект.Выставлен;
	Элементы.ГруппаСпособВыставления.Видимость   = Форма.ИспользуетсяПостановлениеНДС1137; 
	Элементы.ГруппаСпособВыставления.Доступность = НЕ Объект.СчетФактураНеВыставляется;
	
	НаАвансКомитента = Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитента");
	НаАвансКомитентаНаЗакупку = Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку");
	
	Элементы.ВидСчетаФактуры.Видимость = Форма.ИспользуетсяПостановлениеНДС1137 И НЕ НаАвансКомитентаНаЗакупку;
	
	Элементы.Комитент.Видимость = Форма.ИспользуетсяПостановлениеНДС1137 И НаАвансКомитента;
		
	Элементы.Продавец.Видимость = Форма.ИспользуетсяПостановлениеНДС1137 
		И НаАвансКомитентаНаЗакупку И НЕ Объект.СводныйКомиссионный;
	Элементы.ГруппаДатаНомерДокументаАвансаКомитента.Видимость = Форма.ИспользуетсяПостановлениеНДС1137 
		И НаАвансКомитентаНаЗакупку;
	Элементы.РеквизитыПлатежноРасчетногоДокумента.Видимость = НЕ (Форма.ИспользуетсяПостановлениеНДС1137 
		И НаАвансКомитентаНаЗакупку И Объект.СводныйКомиссионный);

	Элементы.ДоговорКонтрагента.Видимость = НЕ НаАвансКомитентаНаЗакупку;
	Элементы.ДоговорКомитента.Видимость   = НаАвансКомитентаНаЗакупку;
		
	Элементы.ДокументОснование.Видимость = НЕ НаАвансКомитентаНаЗакупку;
	Элементы.ДокументОснованиеВыданныйАвансКомитента.Видимость = НаАвансКомитентаНаЗакупку И НЕ Объект.СводныйКомиссионный;
	
	Элементы.АвансыЗаполнитьНоменклатуруПоСчетуНаОплату.Видимость = НЕ НаАвансКомитентаНаЗакупку;
	Элементы.АвансыДобавитьНоменклатуруПоСчетуНаОплату.Видимость  = НЕ НаАвансКомитентаНаЗакупку;
	Элементы.АвансыЗаполнитьПоПолученнымСчетамФактурам.Видимость  = НаАвансКомитентаНаЗакупку И Объект.СводныйКомиссионный;
	
	Если НаАвансКомитентаНаЗакупку Тогда
		Элементы.АвансыКонтрагент.Заголовок = НСтр("ru='Составлен от имени'");
	КонецЕсли;
		
	Если Форма.ОтражатьСуммыВЖурнале Тогда
		Элементы.ГруппаИтоги.ТекущаяСтраница = Элементы.ГруппаЕстьКомиссия;
	Иначе
		Элементы.ГруппаИтоги.ТекущаяСтраница = Элементы.ГруппаНетКомиссии;
	КонецЕсли;
	
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);

	Если ЭтоЮрЛицо Тогда
		Элементы.ГруппаГлБухгалтерОтветственный.ТекущаяСтраница = Элементы.ГруппаЮрЛицо;
		Элементы.НадписьРуководитель.Заголовок = "Руководитель:";
	ИначеЕсли Форма.ВедетсяУчетНДСПоФЗ81 Тогда
		Элементы.ГруппаГлБухгалтерОтветственный.ТекущаяСтраница = Элементы.ГруппаИП;
		Элементы.НадписьРуководитель.Заголовок = "Предприниматель:";
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма, ПредставлениеДокумента)
	
	Форма.Заголовок = ПредставлениеДокумента.СчетФактураПредставление;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетФактуруНаАвансНаСервере(Знач ДокументОснование)
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьСчетФактуруНаАванс(ДокументОснование, ДокументОбъект.Ссылка, Объект.ДоговорКонтрагента);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Функция ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		Объект.КодВидаОперации	= ПолучитьКодВидаОперации(Объект.ВидСчетаФактуры);
	Иначе
		
		Объект.КодВидаОперации	= "";
		
		Объект.Исправление				= Ложь;
		Объект.НомерИсправления			= 0;
		Объект.НомерИсходногоДокумента	= "";
		Объект.ДатаИсходногоДокумента	= '00010101';
		
		Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
		
		Объект.Продавец	= Неопределено;
		Объект.НомерДокументаАвансаКомитента	= "";
		Объект.ДатаДокументаАвансаКомитента	= '00010101';
		
	КонецЕсли;
	
	Если ТекущаяДатаДокумента < '20150101'
		И Объект.Дата >= '20150101' Тогда 
		ЗаполнитьСписокКодовОпераций();
	КонецЕсли;
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьВидимость();

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокКодовОпераций()
	
	СписокВыбораКодов = Элементы.КодВидаОперации.СписокВыбора;
	
	ИспользоватьКоды2015 = Ложь;
	Если Объект.Дата >= '20150101' Тогда 
		ИспользоватьКоды2015 = Истина;
	КонецЕсли;

	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры, 
		СписокВыбораКодов,
		ИспользоватьКоды2015);
		
КонецПроцедуры

&НаСервере
Процедура ВидСчетаФактурыПриИзмененииНаСервере()

	Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		Объект.Комитент	= Неопределено;
		Объект.Продавец	= Неопределено;
		Объект.ДатаДокументаАвансаКомитента	 = '00010101';
		Объект.НомерДокументаАвансаКомитента = "";
		Объект.СуммаДокументаКомиссия		 = 0;
		Объект.СуммаНДСДокументаКомиссия	 = 0;
	Иначе
		Если ОтражатьСуммыВЖурнале Тогда 
			Объект.СуммаДокументаКомиссия		= Объект.Авансы.Итог("Сумма");
			Объект.СуммаНДСДокументаКомиссия	= Объект.Авансы.Итог("СуммаНДС");
		Иначе
			Объект.СуммаДокументаКомиссия		= 0;
			Объект.СуммаНДСДокументаКомиссия	= 0;
		КонецЕсли;
	КонецЕсли;
	
	КомиссияЗакупка = Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку;
		
	СписокТиповДляВыбора.ЗагрузитьЗначения(УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(Объект.ВидСчетаФактуры, Объект.Исправление, КомиссияЗакупка));	
		
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		Объект.КодВидаОперации	= ПолучитьКодВидаОперации(Объект.ВидСчетаФактуры);
	КонецЕсли;
	
	ПредставлениеДокумента = Документы.СчетФактураВыданный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтотОбъект, ПредставлениеДокумента);
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	Объект.ДокументОснование	= Неопределено;
	Объект.ДокументыОснования.Очистить();
	Объект.ПлатежноРасчетныеДокументы.Очистить();
	
	УстановитьФункциональныеОпцииФормы();
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
	ДатыИзмененияОтветственныхЛиц = Новый ФиксированныйМассив(ОтветственныеЛицаБППовтИсп.ДатыИзмененияОтветственныхЛицОрганизаций(Объект.Организация));		
	
	Объект.СуммаДокумента		= 0;
	Объект.СуммаНДСДокумента	= 0;
	
	Объект.ДатаПлатежноРасчетногоДокумента	= '00010101';
	Объект.НомерПлатежноРасчетногоДокумента	= "";
	Объект.ПлатежноРасчетныеДокументы.Очистить();
	
	Объект.НомерДокументаАвансаКомитента	= "";
	Объект.ДатаДокументаАвансаКомитента		= '00010101';
	
	ЗаполнитьПорядокВыставленияСчетаФактуры();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()

	Объект.ДокументОснование	= Неопределено;
	Объект.ДоГоворКонтрагента	= Неопределено;
	Объект.ДокументыОснования.Очистить();
	Объект.ПлатежноРасчетныеДокументы.Очистить();
	
	ЗаполнитьПорядокВыставленияСчетаФактуры();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокВыставленияСчетаФактуры()
	
	СтруктураПараметров = Новый Структура("СчетФактураНеВыставляется, ДокументОснование, ВидСчетаФактуры, Дата");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	
	ПараметрыВыставления = Документы.СчетФактураВыданный.ОпределитьПорядокВыставленияСчетаФактуры(СтруктураПараметров);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыВыставления);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменениеНаСервере()

	Объект.ДокументОснование	= Неопределено;
	Объект.ДокументыОснования.Очистить();
	Объект.ПлатежноРасчетныеДокументы.Очистить();
	
	СвойстваДоговора	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, ВидДоговора");
	
	Объект.ВалютаДокумента	= СвойстваДоговора.ВалютаВзаиморасчетов;
	
	ВидДоговораКонтрагента	= СвойстваДоговора.ВидДоговора;
	Если НЕ ВидДоговораКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку") Тогда
		Объект.Продавец	= Неопределено;
		Объект.ДатаДокументаАвансаКомитента		= '00010101';
		Объект.НомерДокументаАвансаКомитента	= "";
	КонецЕсли;
	
	НаАвансДляКомитентаНаЗакупку = ИспользуетсяПостановлениеНДС1137
		И Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента 
		И ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;
		
	ПредставлениеДокумента = Документы.СчетФактураВыданный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтотОбъект, ПредставлениеДокумента);
	
	Объект.СуммаДокумента		= 0;
	Объект.СуммаНДСДокумента	= 0;
	
	Объект.ДокументОснование	= Неопределено;
	Объект.ДокументыОснования.Очистить();
	
	Объект.ДатаПлатежноРасчетногоДокумента	= '00010101';
	Объект.НомерПлатежноРасчетногоДокумента	= "";
	Объект.ПлатежноРасчетныеДокументы.Очистить();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(Знач Номенклатура)
	
	НовыеПараметры = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат НовыеПараметры;
	КонецЕсли;
	
	ПараметрыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "Услуга,НаименованиеПолное,СтавкаНДС");
	
	Если ПараметрыНоменклатуры.Услуга Тогда
		НовыеПараметры.Вставить("Содержание", ПараметрыНоменклатуры.НаименованиеПолное);
	КонецЕсли;
	// Ставка НДС в счете-фактуре на аванс должна быть расчетная
	Если ПараметрыНоменклатуры.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		НовыеПараметры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС18_118);
	ИначеЕсли ПараметрыНоменклатуры.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		НовыеПараметры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС10_110);
	ИначеЕсли ПараметрыНоменклатуры.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
		ИЛИ ПараметрыНоменклатуры.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС 
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыНоменклатуры.СтавкаНДС) Тогда
		НовыеПараметры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС18_118);
	Иначе
		НовыеПараметры.Вставить("СтавкаНДС", ПараметрыНоменклатуры.СтавкаНДС);
	КонецЕсли;
	
	Возврат НовыеПараметры;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьНоменклатуруПоСчетуНаСервере(СчетНаОплату)
	
	// Заполняем табличную часть номенклатурой из выбранного счета на оплату
	
	НоменклатураСчетаНаОплату = Документы.СчетФактураВыданный.НоменклатураСчетаНаОплату(СчетНаОплату);
	ВалютаСчетаНаОплату       = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетНаОплату, "ВалютаДокумента");
	
	Если ПерезаполнятьТоварыУслугиПоСчету Тогда
		
		// Очистить табличную часть и заполнить заново номенклатурой из счета на оплату
		// так, чтобы рублевая сумма указанных до очистки авансов не превышала бы рублевую сумму счета
		
		АвансыПоСтавкамНДС = Объект.Авансы.Выгрузить();
		АвансыПоСтавкамНДС.Свернуть("СтавкаНДС", "Сумма");
		АвансыПоСтавкамНДС.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"));
		АвансыПоСтавкамНДС.ЗаполнитьЗначения(СчетНаОплату, "СчетНаОплату");
		АвансыПоСтавкамНДС.Колонки.Добавить("ВалютаСчетаНаОплату", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		АвансыПоСтавкамНДС.ЗаполнитьЗначения(ВалютаСчетаНаОплату, "ВалютаСчетаНаОплату");
		
		ВалютаРегламентированногоУчета	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();	
		
		НоменклатураСчетаФактуры = Документы.СчетФактураВыданный.РаспределитьСуммыАвансовПоНоменклатуреСчетовНаОплату(
			АвансыПоСтавкамНДС, НоменклатураСчетаНаОплату, ВалютаРегламентированногоУчета);
		
		Объект.Авансы.Очистить();
		
	Иначе
		
		// Добавить строки номенклатуры из счета на оплату на полную сумму счета
		
		Если ВалютаСчетаНаОплату <> ВалютаРегламентированногоУчета Тогда
			// Пересчитываем суммы счета в рубли
			КурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаСчетаНаОплату, Объект.Дата);
			КурсКратность.Кратность = ?(КурсКратность.Кратность = 0, 1, КурсКратность.Кратность);
			Для каждого СтрокаНоменклатуры Из НоменклатураСчетаНаОплату Цикл
				СтрокаНоменклатуры.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаНоменклатуры.Сумма,
					ВалютаСчетаНаОплату, ВалютаРегламентированногоУчета,
					КурсКратность.Курс, 1,
					КурсКратность.Кратность, 1);
			КонецЦикла;
		КонецЕсли;
		
		НоменклатураСчетаФактуры = НоменклатураСчетаНаОплату;
		
	КонецЕсли;
	
	Для каждого СтрокаНоменклатуры Из НоменклатураСчетаФактуры Цикл
		НоваяСтрока = Объект.Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатуры);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодВидаОперации(ВидСчетаФактуры, СводноПоПолученным = Ложь)

	КодВидаОперации	= "";
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		
		КодВидаОперации = "02";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
		КодВидаОперации = "05";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		
		Если СводноПоПолученным Тогда
			КодВидаОперации = "28";	
		Иначе
			КодВидаОперации = "05";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КодВидаОперации;

КонецФункции

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы()
	
	СтруктураПараметров = Новый Структура;
	
	ЗначенияЗаполнения = Новый Структура();
	
	ЗначенияЗаполнения.Вставить("ТипСчетаФактуры", "Выданный");
	ЗначенияЗаполнения.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ЗначенияЗаполнения.Вставить("Исправление", Объект.Исправление);
	ЗначенияЗаполнения.Вставить("СчетФактура", Объект.Ссылка);
	
	ЗначениеОтбора = Новый Структура();
	
	ЗначениеОтбора.Вставить("Организация", Объект.Организация);
	ЗначениеОтбора.Вставить("Контрагент", Объект.Контрагент);
	
	СтруктураПараметров.Вставить("Документ", Объект.ДокументОснование);
	СтруктураПараметров.Вставить("Договор", Объект.ДоговорКонтрагента);
    СтруктураПараметров.Вставить("Отбор", ЗначениеОтбора);
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения); 
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// АвансыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Авансы.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Авансы.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// АвансыСодержание

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыСодержание");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Авансы.Содержание", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Авансы.Номенклатура", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Предварительная оплата'"));

	// Авансы сводный комиссионный по закупке
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыДокументОснование");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыНомерПлатежноРасчетногоДокумента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыДатаПлатежноРасчетногоДокумента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СводныйКомиссионный", ВидСравненияКомпоновкиДанных.НеРавно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Авансы сводный комиссионный по продаже
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыДокументОснование");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыНомерПлатежноРасчетногоДокумента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыДатаПлатежноРасчетногоДокумента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидСчетаФактуры", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОЛЕЗНАЯ ИНФОРМАЦИЯ

&НаКлиенте
Процедура ПоказатьПредупреждениеОНумерацииСчетовФактур()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("НумерацияСчетовФактур", , НастройкиПредупреждений);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтотОбъект.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДокументаОснования()
	
	Если Объект.ВидСчетаФактуры <> ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку") Тогда
		ЗаполнитьСчетФактуруНаАвансНаСервере(Объект.ДокументОснование);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснование()
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьСтруктуруПараметровФормы();
		
	ОткрытьФорму("Обработка.ПодборОснованийСчетаФактуры.Форма.ФормаВыбораОснованияСчетаФактуры", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
					
КонецПроцедуры 

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыставленияПриИзменении(Элемент)
	
	Если Объект.ДатаВыставления < Объект.Дата Тогда 
		Объект.ДатаВыставления = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		Объект.КодВидаОперации = ВыбранныйКод.Значение;
		НадписьВидОперации = Сред(ВыбранныйКод.Представление, 5);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПолученнымСчетамФактурамНаСервере()

	Объект.Авансы.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйАвансы.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ОснованияДругихСчетовФактур
	|ИЗ
	|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО СчетФактураВыданныйАвансы.Ссылка = СчетФактураВыданный.Ссылка
	|ГДЕ
	|	СчетФактураВыданный.Дата >= &ДатаСчетаФактуры
	|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку)
	|	И СчетФактураВыданный.Контрагент = &Комитент
	|	И СчетФактураВыданный.ДоговорКонтрагента = &ДоговорКомитента
	|	И СчетФактураВыданныйАвансы.Ссылка <> &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата КАК Дата,
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Контрагент КАК Контрагент,
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСчетаФактурыПродавца,
	|	ДанныеПервичныхДокументов.Номер КАК НомерПлатежноРасчетногоДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаПлатежноРасчетногоДокумента,
	|	СчетФактураПолученныйАвансы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(СчетФактураПолученныйАвансы.Сумма) КАК Сумма,
	|	СУММА(СчетФактураПолученныйАвансы.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.СчетФактураПолученный.Авансы КАК СчетФактураПолученныйАвансы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО СчетФактураПолученныйАвансы.Ссылка = СчетФактураПолученный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (СчетФактураПолученный.Организация = ДанныеПервичныхДокументов.Организация)
	|			И (СчетФактураПолученный.ДокументОснование = ДанныеПервичныхДокументов.Документ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОснованияДругихСчетовФактур КАК ОснованияДругихСчетовФактур
	|		ПО (СчетФактураПолученный.ДокументОснование = ОснованияДругихСчетовФактур.ДокументОснование)
	|ГДЕ
	|	СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАвансКомитента)
	|	И СчетФактураПолученный.Дата >= &ДатаСчетаФактуры
	|	И СчетФактураПолученный.ДатаВходящегоДокумента = &ДатаСчетаФактуры
	|	И СчетФактураПолученный.Комитент = &Комитент
	|	И СчетФактураПолученный.ДоговорКомитента = &ДоговорКомитента
	|	И ОснованияДругихСчетовФактур.ДокументОснование ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Контрагент,
	|	СчетФактураПолученный.ДокументОснование,
	|	СчетФактураПолученный.НомерВходящегоДокумента,
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.Дата,
	|	СчетФактураПолученныйАвансы.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",           Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСчетаФактуры", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("Комитент",         Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКомитента", Объект.ДоговорКонтрагента);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;

	СводноПоПолученным = Объект.Авансы.Количество() > 1;
	Объект.КодВидаОперации = ПолучитьКодВидаОперации(Объект.ВидСчетаФактуры, СводноПоПолученным);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтотОбъект);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтотОбъект, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтотОбъект, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтотОбъект, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти