&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Уведомим о появлении нового функционала
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("УниверсальныеПередаточныйДокумент");
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);

	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокументыОснования" Тогда
		Модифицированность	= Истина;
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Модифицированность	= Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСчетФактураВыданныйНаРеализацию";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	ПредставлениеДокумента = Документы.СчетФактураВыданный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);

	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	УчетНДСКлиентСервер.ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи);
	ПараметрыЗаписи.ДокументыОснования = ОбщегоНазначения.ВыгрузитьКолонку(ТекущийОбъект.ДокументыОснования, "ДокументОснование", Истина);
	ПараметрыЗаписи.РеквизитыСФ        = УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреВыданном(ТекущийОбъект.Ссылка);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УчетНДСКлиентСервер.ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи); // На 8.2 в web-клиенте ПараметрыЗаписи могут быть не инициализированы
	
	// Обновляем информацию о счете-фактуре в открытых формах документов-оснований
	Оповестить("Запись_СчетФактураВыданный", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьКонтрагентовПриОткрытии();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	ЗапуститьПроверкуКонтрагентов();

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Проверка на изменение ответственных лиц.
	Если НЕ ТребуетсяВызовСервера Тогда
		Если ТипЗнч(ДатыИзмененияОтветственныхЛиц) = Тип("ФиксированныйМассив") Тогда
		 	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиентСервер.ДатыПринадлежатРазнымИнтервалам(Объект.Дата, 
		 		ТекущаяДатаДокумента, ДатыИзмененияОтветственныхЛиц);
		КонецЕсли;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	КонтрагентПриИзмененииНаСервере();
	ЗапуститьПроверкуКонтрагентов(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКППКонтрагентаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров	= Новый Структура("Контрагент, КППКонтрагента, РольКонтрагента");
	СтруктураПараметров.РольКонтрагента	= "Покупатель";
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКПП", СтруктураПараметров, ЭтаФорма)

КонецПроцедуры

&НаКлиенте
Процедура ВыставленПриИзменении(Элемент)
	
	ПриИзмененииПризнакаВыставления();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПризнакаВыставления()
	
	Если НЕ Объект.Выставлен Тогда
		Объект.ДатаВыставления	= '00010101';
	Иначе
		Объект.ДатаВыставления	= Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНеВыставляетсяПриИзменении(Элемент)

	СчетФактураНеВыставляетсяПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение",ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура КодСпособаВыставленияПриИзменении(Элемент)
	
	Если Объект.КодСпособаВыставления = 2 Тогда
		Объект.Выставлен = Ложь;
		Объект.ДатаВыставления = '00010101';
	Иначе
		Объект.Выставлен = Истина;
		ПриИзмененииПризнакаВыставления();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)
	ЗапуститьПроверкуКонтрагентов(Элемент);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
	Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
		ОписаниеКоманды = УправлениеПечатьюКлиентПовтИсп.ОписаниеКомандыПечати(Команда.Имя, ЭтаФорма.Команды.Найти("АдресКомандПечатиВоВременномХранилище").Действие);
		Если ОписаниеКоманды.Идентификатор = "СчетФактура" Тогда
			ПодключитьОбработчикОжидания("ПоказатьПредупреждениеОбИзменениях_УПД", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента	= Объект.Дата;
	
	ДатыИзмененияОтветственныхЛиц	= Новый ФиксированныйМассив(ОтветственныеЛицаБППовтИсп.ДатыИзмененияОтветственныхЛицОрганизаций(Объект.Организация));	
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	Элементы.ГруппаСостояниеЭД.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	ЗаполнитьСписокКодовОпераций();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КППКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
	Иначе
		КППКонтрагента	= "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ВидДоговораКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	Иначе
		ВидДоговораКонтрагента	= Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	// Продавец, от имени которого составлен счет-фактура, не изменяется при работе с формой,
	// заполняется только при создании на основании документа "Отчет комитенту" (вид операции "Отчет о закупках").
	Элементы.ГруппаПродавец.Видимость = ЗначениеЗаполнено(Объект.Продавец) И НЕ (Объект.СводныйКомиссионный И ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	
	Для каждого СтрокаОснования Из Объект.ДокументыОснования Цикл
		Если ЗначениеЗаполнено(СтрокаОснования.ДокументОснование) Тогда
			НаОснованииОтчетаКомиссионера	= ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах");
			НаОснованииНачислениеНДСпоСМР	= ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимость();
	
	ПредставлениеДокумента = Документы.СчетФактураВыданный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	ДекорацияОрганизация = НСтр("ru = 'Организация:'");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Объект.Дата);
	ВедетсяУчетНДСПоФЗ81 = УчетНДС.ВедетсяУчетНДСПоФЗ81(Объект.Дата);
	ОтражатьСуммыВЖурнале = Объект.Дата >= '20150101' И (ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаПродавец.Видимость = ЗначениеЗаполнено(Объект.Продавец) И НЕ (Объект.СводныйКомиссионный И ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	
	Элементы.ПредставлениеКППКонтрагента.Видимость	= ИспользуетсяПостановлениеНДС1137 И
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮридическоеФизическоеЛицо") <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);
	
	Элементы.ГлавныйБухгалтер.Видимость = ЭтоЮрЛицо;
	Элементы.ГруппаРуководитель.Видимость = ЭтоЮрЛицо ИЛИ ВедетсяУчетНДСПоФЗ81;
	Элементы.ДекорацияИП.Видимость = ВедетсяУчетНДСПоФЗ81;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Если Объект.СформированПриВводеНачальныхОстатковНДС Тогда
		Форма.ТолькоПросмотр	= Истина;
	КонецЕсли;
	
	УказанДокументОснование = Объект.ДокументыОснования.Количество() > 0;
	
	Элементы.ГруппаКонтрагентКППКонтрагента.Доступность				= НЕ Форма.НаОснованииНачислениеНДСпоСМР;
			
	Элементы.НомерИсправленияСистемный.Доступность	= Форма.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление;
	Элементы.НомерИсходногоДокумента.Доступность	= Форма.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление;
	Элементы.ДатаИсходногоДокумента.Доступность		= Форма.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление;
	
	Если Форма.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление Тогда
		Элементы.ГруппаТекущиеНомераИДаты.ТекущаяСтраница 	= Элементы.ГруппаИсправляемый;  
		Элементы.ГруппаРеквизитыИсправления.Видимость		= Истина;  
		Форма.НадписьСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерИсходногоДокумента,Формат(Объект.ДатаИсходногоДокумента,"ДЛФ=Д"));
	Иначе
		Элементы.ГруппаТекущиеНомераИДаты.ТекущаяСтраница 	= Элементы.ГруппаТекущий;
		Элементы.ГруппаРеквизитыИсправления.Видимость 		= Ложь;  
	КонецЕсли;
	
	Если Форма.ОтражатьСуммыВЖурнале Тогда
		Элементы.СтраницыКомиссия.ТекущаяСтраница = Элементы.ГруппаЕстьКомиссия;
	Иначе
		Элементы.СтраницыКомиссия.ТекущаяСтраница = Элементы.ГруппаНетКомиссии;
	КонецЕсли;
	
	КоличествоОснований = Объект.ДокументыОснования.Количество();
	
	Если КоличествоОснований = 0 Тогда
		Форма.НадписьВыбор = НСтр("ru = 'Выбор'");
		Элементы.СтраницыОснования.ТекущаяСтраница 	= Элементы.СтраницаВыбора;
	ИначеЕсли КоличествоОснований = 1 Тогда 
		Элементы.СтраницыОснования.ТекущаяСтраница 	= Элементы.СтраницаОснования;
	Иначе 		
		
		Элементы.СтраницыОснования.ТекущаяСтраница 	= Элементы.СтраницаОснований;
		
		ФормСтрока 		= "Л = ru_RU; ЧДЦ=0";
		ПарПредмета		= "документ,документа,документов,м,,,,0";
		ПрописьЧисла 	= ЧислоПрописью(КоличествоОснований, ФормСтрока, ПарПредмета);
		ИндексПредмета 	= Найти(ПрописьЧисла, "док");
		ТекстДокументы 	= Строка(КоличествоОснований) + " " + Сред(ПрописьЧисла, ИндексПредмета, СтрДлина(ПрописьЧисла)- ИндексПредмета - 3);
		ТекстНадписи 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2 и еще %3)'"), ТекстДокументы, Строка(Объект.ДокументыОснования[0].ДокументОснование), КоличествоОснований-1);	
		
		Форма.НадписьДокументыОснования	= ТекстНадписи;
		
	КонецЕсли;
	
	Элементы.ГруппаКодВидаОперации.Видимость		= Форма.ИспользуетсяПостановлениеНДС1137;
	Элементы.СчетФактураНеВыставляется.Доступность	= Форма.ИспользуетсяПостановлениеНДС1137;
	
	ТекущийКод = Элементы.КодВидаОперации.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда 
		Форма.НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		Форма.НадписьВидОперации = "";
	КонецЕсли;
	
	Элементы.Выставлен.Доступность					= Форма.ИспользуетсяПостановлениеНДС1137 И НЕ Объект.СчетФактураНеВыставляется;
	Элементы.ДатаВыставления.Доступность			= Форма.ИспользуетсяПостановлениеНДС1137 И НЕ Объект.СчетФактураНеВыставляется И Объект.Выставлен;
	Элементы.ГруппаСпособВыставления.Видимость		= Форма.ИспользуетсяПостановлениеНДС1137;
	Элементы.ГруппаСпособВыставления.Доступность	= НЕ Объект.СчетФактураНеВыставляется;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ПустаяСтрока(Объект.КППКонтрагента) Тогда
			ЗначениеКППКонтрагента = Объект.КППКонтрагента;
		Иначе
			ЗначениеКППКонтрагента = Форма.КППКонтрагента;
		КонецЕсли;
		
		Форма.ПредставлениеКППКонтрагента	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'КПП %1'"), ?(ПустаяСтрока(ЗначениеКППКонтрагента), "<не задан>", ЗначениеКППКонтрагента));
	Иначе
		Форма.ПредставлениеКППКонтрагента = "";
	КонецЕсли;
	
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);
	
	Если ЭтоЮрЛицо Тогда
		Элементы.ГруппаГлБухгалтерОтветственный.ТекущаяСтраница = Элементы.ГруппаЮрЛицо;
		Элементы.НадписьРуководитель.Заголовок = "Руководитель:";
	ИначеЕсли Форма.ВедетсяУчетНДСПоФЗ81 Тогда
		Элементы.ГруппаГлБухгалтерОтветственный.ТекущаяСтраница = Элементы.ГруппаИП;
		Элементы.НадписьРуководитель.Заголовок = "Предприниматель:";
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьКодВидаОперацииНаСервере();
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);

	Если НЕ ИспользуетсяПостановлениеНДС1137 Тогда
		
		Объект.Исправление				= Ложь;
		Объект.НомерИсправления			= 0;
		Объект.НомерИсходногоДокумента	= "";
		Объект.ДатаИсходногоДокумента	= '00010101';
		
		Объект.Продавец	= Неопределено;

	ИначеЕсли Объект.Выставлен Тогда
		Объект.ДатаВыставления = Объект.Дата;
	КонецЕсли;
	
	Если ТекущаяДатаДокумента < '20150101'
		И Объект.Дата >= '20150101' Тогда 
		ЗаполнитьСписокКодовОпераций();
	КонецЕсли;
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКодовОпераций()
	
	СписокВыбораКодов = Элементы.КодВидаОперации.СписокВыбора;
	
	ИспользоватьКоды2015 = Ложь;
	Если Объект.Дата >= '20150101' Тогда 
		ИспользоватьКоды2015 = Истина;
	КонецЕсли;

	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры, 
		СписокВыбораКодов,
		ИспользоватьКоды2015);
		
КонецПроцедуры
	
&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	Объект.ДокументОснование	= Неопределено;
	Объект.ДокументыОснования.Очистить();
	Объект.ПлатежноРасчетныеДокументы.Очистить();
	
	УстановитьФункциональныеОпцииФормы();
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
	ДатыИзмененияОтветственныхЛиц = Новый ФиксированныйМассив(ОтветственныеЛицаБППовтИсп.ДатыИзмененияОтветственныхЛицОрганизаций(Объект.Организация));	
	
	ЗаполнитьПорядокВыставленияСчетаФактуры();
	
	Объект.СуммаДокумента		= 0;
	Объект.СуммаНДСДокумента	= 0;
	Объект.СуммаУвеличение		= 0;
	Объект.СуммаУменьшение		= 0;
	Объект.СуммаНДСУвеличение	= 0;
	Объект.СуммаНДСУменьшение	= 0;
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()

	Объект.ДокументОснование	= Неопределено;
	Объект.ДоговорКонтрагента	= Неопределено;
	ВидДоговораКонтрагента 		= Неопределено;
	Объект.СуммаДокумента 		= 0;
	Объект.СуммаНДСДокумента 	= 0;
	Объект.ДокументыОснования.Очистить();
	Объект.ПлатежноРасчетныеДокументы.Очистить();
	
	ЗаполнитьПорядокВыставленияСчетаФактуры();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокВыставленияСчетаФактуры()
	
	СтруктураПараметров = Новый Структура("СчетФактураНеВыставляется, ДокументОснование, ВидСчетаФактуры, Дата");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	
	ПараметрыВыставления = Документы.СчетФактураВыданный.ОпределитьПорядокВыставленияСчетаФактуры(СтруктураПараметров);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыВыставления);
	
КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
КонецПроцедуры

&НаСервере
Процедура СчетФактураНеВыставляетсяПриИзмененииНаСервере()

	Если Объект.СчетФактураНеВыставляется Тогда
		Объект.Выставлен				= Ложь;
		Объект.ДатаВыставления			= '00010101';
		Объект.КодСпособаВыставления	= 1;
	КонецЕсли;
	
	УстановитьКодВидаОперацииНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатыНомераПлатежноРасчетныхДокументов()

	МассивОснований	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.ДокументыОснования, "ДокументОснование", Истина);
	Объект.ПлатежноРасчетныеДокументы.Загрузить(
		Документы.СчетФактураВыданный.ДатыНомераПлатежноРасчетныхДокументов(МассивОснований));

КонецПроцедуры

&НаСервере
Процедура ОпределениеПараметровСчетаФактурыНаРеализациюСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОпределениеПараметровСчетаФактурыНаРеализацию();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодВидаОперацииНаСервере(КодВидаОперацииОснования = Неопределено)
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Дата",						Объект.Дата);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",				Объект.ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",					Объект.Исправление);
	СтруктураПараметров.Вставить("Контрагент",					Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",			Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Продавец",					Объект.Продавец);
	СтруктураПараметров.Вставить("СчетФактураНеВыставляется",	Объект.СчетФактураНеВыставляется);
	СтруктураПараметров.Вставить("СчетФактураБезНДС",			Объект.СчетФактураБезНДС);
	СтруктураПараметров.Вставить("КодВидаОперации",				Объект.КодВидаОперации);
	СтруктураПараметров.Вставить("ДокументыОснования",			Объект.ДокументыОснования.Выгрузить(,"ДокументОснование"));
	
	Объект.КодВидаОперации	= Документы.СчетФактураВыданный.ПолучитьКодВидаОперации(СтруктураПараметров, КодВидаОперацииОснования);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма, ПредставлениеДокумента)
	
	Форма.Заголовок = ПредставлениеДокумента.СчетФактураПредставление;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснование()
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьСтруктуруПараметровФормы();
		
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаДокументыОснования",
			ПараметрыФормы,
			ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы()
	
	СтруктураПараметров = Новый Структура();
	ЗначенияЗаполнения 	= Новый Структура();
	ЗначениеОтбора 		= Новый Структура();
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда 
		ЗначенияЗаполнения.Вставить("СписокДокументовОснований", Новый СписокЗначений);
		Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
			ЗначенияЗаполнения.СписокДокументовОснований.Добавить(СтрокаТаблицы.ДокументОснование)
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("ТипСчетаФактуры", "Выданный");
	ЗначенияЗаполнения.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ЗначенияЗаполнения.Вставить("Исправление", Объект.Исправление);
	ЗначенияЗаполнения.Вставить("СчетФактура", Объект.Ссылка);
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения); 
	
	ЗначениеОтбора.Вставить("Организация", Объект.Организация);
	ЗначениеОтбора.Вставить("Контрагент", Объект.Контрагент);
	ЗначениеОтбора.Вставить("Договор", Объект.ДоговорКонтрагента);
	ЗначениеОтбора.Вставить("Валюта", Объект.ВалютаДокумента);
		
	СтруктураПараметров.Вставить("Отбор", ЗначениеОтбора);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	Объект.ДокументыОснования.Очистить();
	
	Если ВыбранноеЗначение.Количество() = 0 Тогда
		
		Объект.ДоговорКонтрагента 	= Неопределено;
		Объект.СуммаДокумента 		= 0;
		Объект.СуммаНДСДокумента 	= 0;
		Объект.ПлатежноРасчетныеДокументы.Очистить();
		
	Иначе
		
		Для Каждого СтрокаСписка Из ВыбранноеЗначение Цикл
			Если СтрокаСписка.Значение.Пустая() Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТаблицы = Объект.ДокументыОснования.Добавить();
			СтрокаТаблицы.ДокументОснование = СтрокаСписка.Значение;
		КонецЦикла;
		ОпределениеПараметровСчетаФактурыНаРеализациюСервер();
		ВидДоговораКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
		Если НЕ ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
			Объект.Продавец	= Неопределено;
		КонецЕсли;
		ЗаполнитьДатыНомераПлатежноРасчетныхДокументов();
		
	КонецЕсли;    	
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументыОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПолучитьРежимЗаписи();
	
	Если ЭтаФорма.Записать(Новый Структура("РежимЗаписи", РежимЗаписи)) Тогда 
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперации = "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьРежимЗаписи()
	
	Проводить = Истина;
	
	Для Каждого Стр из Объект.ДокументыОснования Цикл
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ДокументОснование, "Проведен") Тогда
			Проводить = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Проводить Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДатаВыставленияПриИзменении(Элемент)
	
	Если Объект.ДатаВыставления < Объект.Дата Тогда 
		Объект.ДатаВыставления = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьНажатие(Элемент)
	
	ВыбратьОснование();

КонецПроцедуры

&НаКлиенте
Процедура НадписьВыборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОбИзменениях_УПД()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("УниверсальныеПередаточныйДокумент", , НастройкиПредупреждений);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		Объект.КодВидаОперации = ВыбранныйКод.Значение;
		НадписьВидОперации = Сред(ВыбранныйКод.Представление, 5);
	КонецЕсли;

КонецПроцедуры

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтотОбъект);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтотОбъект, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтотОбъект, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтотОбъект, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти