#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		Если ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			СсылкаНаДокументОснование = ДанныеЗаполнения;
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура")
			И ДанныеЗаполнения.Свойство("Основание")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Основание.Метаданные()) Тогда
			СсылкаНаДокументОснование = ДанныеЗаполнения.Основание;
		КонецЕсли;

		Если СсылкаНаДокументОснование <> Неопределено Тогда
			ЗаполнитьПоДокументуОснованию(СсылкаНаДокументОснование);
		КонецЕсли;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
			Руководитель = ДанныеЗаполнения.Руководитель;
			ГлавныйБухгалтер = ДанныеЗаполнения.ГлавныйБухгалтер;
		ИначеЕсли УчетНДС.ВедетсяУчетНДСПоФЗ81(Дата) Тогда
			Руководитель = ДанныеЗаполнения.Руководитель;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
		ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	КонецЕсли;
		
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		ВалютаДокумента	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
		
	СтруктураПараметров = Новый Структура("СчетФактураНеВыставляется,ДокументОснование,ВидСчетаФактуры,Дата");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
	
	ПараметрыВыставления = Документы.СчетФактураВыданный.ОпределитьПорядокВыставленияСчетаФактуры(СтруктураПараметров);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыВыставления);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
		И ТипДанныхЗаполнения <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Если Дата < '20150101' Тогда
			Дата = '20150101';
		КонецЕсли;
		СводныйКомиссионный = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата          = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	НомерСчетаФактурыПродавца = "";

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		Если Дата < '20150101' Тогда
			Дата = '20150101';
		КонецЕсли;
		СводныйКомиссионный = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив();

	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Дата);
	
	ВидДоговораКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	
	Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда

		МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("Комитент");
		МассивНепроверяемыхРеквизитов.Добавить("Продавец");

		Если Дата < '20111001' И ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда

			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Дата документа'"), , ,
				НСтр("ru = 'Корректировочные счета-фактуры не выписываются до 01.10.2011 г.'"));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Дата", "Объект", Отказ);

		КонецЕсли;

		Если ДокументыОснования.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Документы-основания счета-фактуры""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьВыбор",, Отказ);			
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из ДокументыОснования Цикл

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование)
				ИЛИ ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
				Продолжить;
			КонецЕсли;

			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.ДокументОснование, "Проведен") <> Истина Тогда

				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Документ-основание'"),
					СтрокаТЧ.НомерСтроки, НСтр("ru = 'Документы-основания'"),
					НСтр("ru = 'Счет-фактуру можно провести только на основании проведенного документа.'"));

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НадписьДокументыОснования", , Отказ);
			
			КонецЕсли;

		КонецЦикла;
		
		ДокументыОснованияПроверка	= Новый ТаблицаЗначений;
		ДокументыОснованияПроверка.Колонки.Добавить("ДокументОснование");
		ДокументыОснованияПроверка.Колонки.Добавить("Количество");
		
		Для Каждого СтрокаДокументОснование Из ДокументыОснования Цикл
			
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда 
				
				Если ИспользуетсяПостановлениеНДС1137 И СтрокаДокументОснование.УчитыватьИсправлениеИсходногоДокумента Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаДокументОснование.НомерИсправленияИсходногоДокумента)
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаДокументОснование.ДатаИсправленияИсходногоДокумента) Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру для документа-основания в строке %1 списка ""Документы-основания счета-фактуры""'"), СтрокаДокументОснование.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
				Если Дата > '20111001' И НЕ СформированПриВводеНачальныхОстатковНДС Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаДокументОснование.НомерИсходногоДокумента)
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаДокументОснование.ДатаИсходногоДокумента) Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру для документа-основания в строке %1 списка ""Документы-основания счета-фактуры""'"), СтрокаДокументОснование.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			СтрокаПроверки = ДокументыОснованияПроверка.Добавить();
			СтрокаПроверки.ДокументОснование = СтрокаДокументОснование.ДокументОснование;
			СтрокаПроверки.Количество = 1;
			
		КонецЦикла;
		
		ДокументыОснованияПроверка.Свернуть("ДокументОснование", "Количество");
		
		Для Каждого СтрокаПроверки Из ДокументыОснованияПроверка Цикл
			
			Если ЗначениеЗаполнено(СтрокаПроверки.ДокументОснование)
				И СтрокаПроверки.Количество > 1 Тогда
				
				Отбор	= Новый Структура("ДокументОснование", СтрокаПроверки.ДокументОснование);
				
				СтрокиТЧ	= ДокументыОснования.НайтиСтроки(Отбор);
				Если СтрокиТЧ.Количество() < 2 Тогда 
					Продолжить;
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 уже выбран в строке %2. Повторный выбор не допускается.'"),
					СтрокаПроверки.ДокументОснование,
					СтрокиТЧ[0].НомерСтроки);
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", 
					"Корректность", 
					"Документ - основание для выписки счета-фактуры", 
					СтрокиТЧ[1].НомерСтроки, 
					"Документы-основания счета-фактуры", 
					ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		КонецЕсли;

	Иначе

		МассивНепроверяемыхРеквизитов.Добавить("ДокументыОснования");
		МассивНепроверяемыхРеквизитов.Добавить("ДокументыОснования.ДокументОснование");

		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДС");
		КонецЕсли;

		Если ЗначениеЗаполнено(ДокументОснование)
			И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда

			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Проведен") <> Истина Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Корректность", НСтр("ru = 'Документ-основание'"), , , НСтр("ru = 'Счет-фактуру можно провести только на основании проведенного документа.'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование", "Объект", Отказ);
			КонецЕсли;

		КонецЕсли;
		
		Если НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Комитент");
		КонецЕсли;

		Если НЕ ИспользуетсяПостановлениеНДС1137
			ИЛИ ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Продавец");
			МассивНепроверяемыхРеквизитов.Добавить("Авансы.ДокументОснование");
		КонецЕсли;
		
		Если СводныйКомиссионный Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Продавец");
			МассивНепроверяемыхРеквизитов.Добавить("Комитент");
			Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");
			КонецЕсли;
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("Авансы.Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("Авансы.ДокументОснование");
		КонецЕсли;

	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;	
	
	Если НЕ ИспользуетсяПостановлениеНДС1137 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КодВидаОперации");
	КонецЕсли;

	Если НЕ ИспользуетсяПостановлениеНДС1137 ИЛИ (НЕ Исправление) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
	КонецЕсли;

	Если НЕ ИспользуетсяПостановлениеНДС1137 ИЛИ СформированПриВводеНачальныхОстатковНДС
			ИЛИ НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
			ИЛИ НЕ Исправление Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправляемогоКорректировочногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаИсправляемогоКорректировочногоДокумента");
	КонецЕсли;

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсходногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаИсходногоДокумента");
		
	Иначе
		
		Если Дата < '20111001' ИЛИ СформированПриВводеНачальныхОстатковНДС ИЛИ НЕ Исправление Тогда
			МассивНепроверяемыхРеквизитов.Добавить("НомерИсходногоДокумента");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаИсходногоДокумента");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ИспользуетсяПостановлениеНДС1137 ИЛИ (НЕ Выставлен) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВыставления");
		МассивНепроверяемыхРеквизитов.Добавить("КодСпособаВыставления");
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)

	Если Исправление Тогда
		Префикс = "И";
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		Если Константы.ОтдельнаяНумерацияСчетовФактурНаАванс.Получить() Тогда
			Префикс = "А";
		Иначе
			Префикс = "0";
		КонецЕсли;	
	Иначе
		Префикс = "0";
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	УстановитьПредставлениеНомера();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьДублиСчетаФактуры() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ОбновитьРеквизитыСвязанныхСчетовФактур(ЭтотОбъект, "СчетФактураВыданный", Отказ);
		
	ОбновлятьРеквизитыПриЗаписи = ?(ДополнительныеСвойства.Свойство("ОбновлятьРеквизитыПриЗаписи"), ДополнительныеСвойства.ОбновлятьРеквизитыПриЗаписи, Истина);
	Если НЕ ОбновлятьРеквизитыПриЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаРеквизитовСчетаФактурыПоВиду();
	
	РассчитатьСуммуДокумента();
	
	Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка ИЛИ СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.СчетФактураВыданный.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	ТаблицаСторноНачисленияНДС = Документы.СчетФактураВыданный.ПодготовитьТаблицуСторноНачисленияНДС(ПараметрыПроведения.РеквизитыШапки);

	ЗаписьЖурналаУчетаСчетовФактур = УчетНДС.ПодготовитьЗаписьЖурналаУчетаСчетовФактур(
		ПараметрыПроведения.ЗаписьЖурналаУчетаСчетовФактур);

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ДОКУМЕНТА

	УчетНДС.СформироватьДвиженияСторноНачисленияНДС(ПараметрыПроведения.РеквизитыШапки, ТаблицаСторноНачисленияНДС, Движения, Отказ);

	УчетНДС.СформироватьДвиженияВыписанСчетФактураНаПолученныйАванс(
		ПараметрыПроведения.РеквизитыШапки, ПараметрыПроведения.ТаблицаАвансов, Движения, Отказ);

	УчетНДС.СформироватьДвиженияВыписанСчетФактураНалоговогоАгента(
		ПараметрыПроведения.РеквизитыШапки, ПараметрыПроведения.ТаблицаАвансов, Движения, Отказ);

	УчетНДС.СформироватьДвиженияНДСНомераДокументовОплаты(
		ПараметрыПроведения.ТаблицаНомеровДокументовОплаты, Движения, Отказ);
	
	// Запись журнала счетов-фактур
	УчетНДС.СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(
		ЗаписьЖурналаУчетаСчетовФактур, Движения, Отказ);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО") 
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяНДФЛИП")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ВыписыватьСчетаФактурыСпецРежимы")) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ВыписыватьСчетаФактурыСпецРежимы.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		РеквизитыОснования	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Организация, ВидОперации");
		Если РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности
			И НЕ УчетнаяПолитика.НачислятьНДСПоОтгрузке(РеквизитыОснования.Организация, РеквизитыОснования.Дата) Тогда
			
			ВызватьИсключение НСтр("ru = 'При отгрузке без перехода права собственности выписка счета-фактуры не требуется'");
			
		Иначе
			ВидДоговораСКонтрагентом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.ДоговорКонтрагента, "ВидДоговора");
			Если ВидДоговораСКонтрагентом = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ВызватьИсключение НСтр("ru = 'При передаче на комиссию выписка счета-фактуры не требуется'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ЗаполнитьНаОснованииСчетаФактуры(Основание.Ссылка);
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			ЗаполнитьНаОснованииСчетаФактурыПолученного(Основание.Ссылка);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

	СписокТиповНаАванс = УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(
		Перечисления.ВидСчетаФактурыВыставленного.НаАванс);

	СписокТиповНалоговыйАгент = УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(
		Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);

	СписокТиповКорректировочный = УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(
		Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);

	Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено 
		И ТипЗнч(Основание) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
		// СФ на аванс по корректировкам создаются обработкой "Регистрация счетов-фактур на аванс"
		ЗаполнитьСчетФактуруНаАванс(Основание);
	ИначеЕсли СписокТиповНалоговыйАгент.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		ЗаполнитьСчетФактуруНалоговыйАгент(Основание);
	ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
		ЗаполнитьСчетФактуруКорректировочный(Основание);
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		И Основание.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		ВызватьИсключение НСтр("ru = 'При возврате из переработки выписка счета-фактуры не требуется'");	
	Иначе
		ЗаполнитьСчетФактуруНаРеализацию(Основание);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНаОснованииСчетаФактуры(Основание)

	Если Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		ИЛИ Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Исправленные счета-фактуры с видом ""%1"" вводятся на основании документа ""Корректировка реализации"".'"),
			Основание.ВидСчетаФактуры);
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		ТекстСообщения = НСтр("ru='Исправленные счета-фактуры с видом ""На суммовую разницу"" не поддерживаются.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, , "Номер, Дата, СформированПриВводеНачальныхОстатковНДС, Проведен, ПометкаУдаления");
	
	СтрокаОснования = ДокументыОснования.Добавить();
	СтрокаОснования.ДокументОснование = ДокументОснование;
	
	Для Каждого СтрокаАванса Из Основание.Авансы Цикл
		НоваяСтрока = Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
	КонецЦикла;
	
	Исправление      = Истина;
	НомерИсправления = ЭтотОбъект.НомерИсправления + 1;
	Выставлен        = Ложь;
	ДатаВыставления  = '00010101';

	Если Основание.Исправление Тогда
		ИсправляемыйСчетФактура = Основание.ИсправляемыйСчетФактура;
	Иначе
		ИсправляемыйСчетФактура = Основание;
		НомерИсходногоДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Основание.Номер, Истина, Ложь);
		ДатаИсходногоДокумента  = Основание.Дата;
	КонецЕсли;

	Если Основание.ПлатежноРасчетныеДокументы.Количество() > 0 Тогда
		НоваяСтрока = ПлатежноРасчетныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Основание.ПлатежноРасчетныеДокументы[0]);
	КонецЕсли;

	КодВидаОперации = ПолучитьКодВидаОперации();

КонецПроцедуры

Процедура ЗаполнитьНаОснованииСчетаФактурыПолученного(Основание)
	
	Если НЕ Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		ТекстСообщения =НСтр("ru = 'Счет-фактуру выданный на аванс комитента на закупку можно создать только на основании 
			|счета-фактуры полученного на аванс комитентана закупку.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Основание.ДоговорКомитента)
		ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.ДоговорКомитента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Счета-фактуры на аванс комитента на закупку вводятся только по договорам ""%1"".'"),
			Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
		ВызватьИсключение ТекстСообщения;
			
	КонецЕсли;
	
	ВидСчетаФактуры    = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку;
	Организация        = Основание.Организация;
	Дата               = ?(Основание.Исправление, Основание.ДатаИсправления, Основание.ДатаВходящегоДокумента);
	ДокументОснование  = Основание.ДокументОснование;
	Контрагент         = Основание.Комитент;
	ДоговорКонтрагента = Основание.ДоговорКомитента;
	Продавец           = Основание.Контрагент;
	ВалютаДокумента    = Основание.ВалютаДокумента;
	СуммаДокумента     = Основание.СуммаДокумента;
	СуммаНДСДокумента  = Основание.СуммаНДСДокумента;
	НомерСчетаФактурыПродавца = Основание.НомерВходящегоДокумента;
	СуммаДокументаКомиссия    = ?(Дата >= '20150101', Основание.СуммаДокумента, 0);
	СуммаНДСДокументаКомиссия = ?(Дата >= '20150101', Основание.СуммаНДСДокумента, 0);
	
	Для каждого СтрокаАванса Из Основание.Авансы Цикл 
		НоваяСтрока = Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
	КонецЦикла;
	
	Если Основание.ДокументыОснования.Количество() > 0 Тогда
		
		НоваяСтрокаОснования = ДокументыОснования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОснования, Основание.ДокументыОснования[0]);
		
		Если ТипЗнч(НоваяСтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			
			СвойстваДокументаОснования	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрокаОснования.ДокументОснование, "НомерВходящегоДокумента, ДатаВходящегоДокумента");
			
			СтрокаПРД = ПлатежноРасчетныеДокументы.Добавить();
			СтрокаПРД.НомерДокумента	= СвойстваДокументаОснования.НомерВходящегоДокумента;
			СтрокаПРД.ДатаДокумента		= СвойстваДокументаОснования.ДатаВходящегоДокумента;
			
			НомерПлатежноРасчетногоДокумента	= СтрокаПРД.НомерДокумента;
			ДатаПлатежноРасчетногоДокумента		= СтрокаПРД.ДатаДокумента;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаОснования.ДокументОснование) Тогда
			
			СвойстваДокументаОснования	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрокаОснования.ДокументОснование, "Номер, Дата");
			
			СтрокаПРД = ПлатежноРасчетныеДокументы.Добавить();
			СтрокаПРД.НомерДокумента	= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СвойстваДокументаОснования.Номер, Истина, Ложь);
			СтрокаПРД.ДатаДокумента		= СвойстваДокументаОснования.Дата;
			
			НомерПлатежноРасчетногоДокумента	= СтрокаПРД.НомерДокумента;
			ДатаПлатежноРасчетногоДокумента		= СтрокаПРД.ДатаДокумента;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КодВидаОперации = ПолучитьКодВидаОперации();
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНаРеализацию(Основание)

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Продавец", Справочники.Контрагенты.ПустаяСсылка());

	СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Основание, Ложь, , СтруктураОтбора);
	Если ЗначениеЗаполнено(СуществующийСФ) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='На основании документа %1 был введен %2'"),
			Основание,
			СуществующийСФ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Дата = Основание.Дата;
	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	ДокументыОснования.Добавить().ДокументОснование = Основание;

	ПлатежноРасчетныеДокументы.Очистить();
	ДатыНомераПРД = Документы.СчетФактураВыданный.ДатыНомераПлатежноРасчетныхДокументов(
		ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	Для каждого СтрокаТаблицы Из ДатыНомераПРД Цикл
		НоваяСтрока = ПлатежноРасчетныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;

	ОпределениеПараметровСчетаФактурыНаРеализацию();

	КодВидаОперации = ПолучитьКодВидаОперации();

КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНаАванс(Основание, СчетФактура = Неопределено, ДоговорКонтрагента = Неопределено) Экспорт

	Отказ = Ложь;
	
	Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		
		ПараметрыЗаполнения = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияСуммовыеРазницы(Основание, СчетФактура, Отказ);
		
		ТекстСообщения = НСтр("ru='Нет данных для счета-фактуры на суммовую разницу.'");
		
		Если Отказ Тогда
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ЗаполнитьСчетФактуруНасуммовуюРазницу(Основание, ПараметрыЗаполнения);
		
	Иначе	
		
		ПараметрыЗаполнения = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияАванс(Основание, СчетФактура, ДоговорКонтрагента, Отказ);
		
		Если Отказ Тогда
			
			Отказ = Ложь;
			ПараметрыЗаполнения = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияСуммовыеРазницы(Основание, СчетФактура, Отказ);	
			
			ТекстСообщения = НСтр("ru='Нет данных для счета-фактуры на аванс или на суммовую разницу.'");
			
			Если Отказ Тогда
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			ЗаполнитьСчетФактуруНасуммовуюРазницу(Основание, ПараметрыЗаполнения);
			
		Иначе
			
			Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
				И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
				
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
				
			КонецЕсли;	
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаполнения.Реквизиты);
			
			Авансы.Очистить();
			
			Для каждого СтрокаСФ Из ПараметрыЗаполнения.Авансы Цикл
				НоваяСтрока = Авансы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСФ);
			КонецЦикла;
			
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
				И Дата >= '20150101' Тогда  
				СуммаДокументаКомиссия 		= Авансы.Итог("Сумма");
				СуммаНДСДокументаКомиссия 	= Авансы.Итог("СуммаНДС");
			Иначе
				СуммаДокументаКомиссия 		= 0;
				СуммаНДСДокументаКомиссия 	= 0;
			КонецЕсли;

	        ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(Основание);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДатаНомер);
			ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда

		Отказ = Ложь;
		ПараметрыЗаполнения = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияСуммовыеРазницы(Основание, СчетФактура, Отказ);
				
		ТекстСообщения = НСтр("ru='Нет данных для счета-фактуры на аванс или на суммовую разницу.'");
		
		Если Отказ Тогда
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу;

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаполнения.Реквизиты);

		Авансы.Очистить();

		Для каждого СтрокаСФ Из ПараметрыЗаполнения.СуммовыеРазницы Цикл
			НоваяСтрока = Авансы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСФ);
		КонецЦикла;

		ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(Основание);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДатаНомер);
		ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		
		СчетФактураНеВыставляется = Истина;

		КодВидаОперации	= ПолучитьКодВидаОперации();
    
	Иначе

		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
			ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
			
		КонецЕсли;	

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаполнения.Реквизиты);

		Авансы.Очистить();

		Для каждого СтрокаСФ Из ПараметрыЗаполнения.Авансы Цикл
			НоваяСтрока = Авансы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСФ);
		КонецЦикла;

		ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(Основание);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДатаНомер);
		ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();

	КонецЕсли;

	КодВидаОперации	= ПолучитьКодВидаОперации();

КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНасуммовуюРазницу(Основание, ПараметрыЗаполнения)
	
	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаполнения.Реквизиты);
	
	Авансы.Очистить();
	
	Для каждого СтрокаСФ Из ПараметрыЗаполнения.СуммовыеРазницы Цикл
		НоваяСтрока = Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСФ);
	КонецЦикла;
	
	ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(Основание);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДатаНомер);
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СчетФактураНеВыставляется = Истина;
	
	КодВидаОперации	= ПолучитьКодВидаОперации();
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНалоговыйАгент(Основание, СчетФактура = Неопределено, ДоговорКонтрагента = Неопределено) Экспорт

	Отказ = Ложь;
	ПараметрыЗаполнения = Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияНалоговыйАгент(
		Основание, СчетФактура, ДоговорКонтрагента, Отказ);

	Если Отказ Тогда
		ТекстСообщения = ?(ТипЗнч(ПараметрыЗаполнения) = Тип("Строка"),
			ПараметрыЗаполнения,
			НСтр("ru='Нет данных для счета-фактуры налогового агента.'"));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаполнения.Реквизиты);

	Авансы.Очистить();

	Для каждого СтрокаСФ Из ПараметрыЗаполнения.ТаблицаОплат Цикл
		НоваяСтрока = Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСФ);
	КонецЦикла;

	ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(Основание);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДатаНомер);
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();

	СчетФактураНеВыставляется = Истина;

	КодВидаОперации	= ПолучитьКодВидаОперации();

КонецПроцедуры

Процедура ЗаполнитьСчетФактуруКорректировочный(Основание, Перезаполнить = Ложь)

	СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Основание, Ложь);

	Если ЗначениеЗаполнено(СуществующийСФ) И Не Перезаполнить Тогда

		ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='На основании документа %1 был введен %2'"),
			Основание,
			СуществующийСФ);

		ВызватьИсключение ТекстСообщения;

	КонецЕсли;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ДокументРеализации, ВидОперации");
		Если ТипЗнч(РеквизитыОснования.ДокументРеализации) <> Тип("ДокументСсылка.СчетФактураВыданный")
			И Не ЗначениеЗаполнено(УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(РеквизитыОснования.ДокументРеализации)) Тогда 
			Если РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
				ВызватьИсключение НСтр("ru = 'Перед добавлением исправления счета-фактуры создайте счет-фактуру у документа-основания'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у документа-основания'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Отказ = Ложь;
	
	ПараметрыЗаполнения	= Документы.СчетФактураВыданный.ПодготовитьПараметрыЗаполненияКорректировочный(Основание, Отказ);

	Если Отказ Тогда

		ТекстСообщения = ?(ТипЗнч(ПараметрыЗаполнения) = Тип("Строка"),
			ПараметрыЗаполнения,
			НСтр("ru='Нет данных для заполнения счета-фактуры.'"));

		ВызватьИсключение ТекстСообщения;

	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаполнения.Реквизиты);

	ДокументыОснования.Очистить();
	Для каждого СтрокаДокументыОснования Из ПараметрыЗаполнения.ДокументыОснования Цикл
		НоваяСтрока = ДокументыОснования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокументыОснования);
	КонецЦикла;
	
	Если ПустаяСтрока(КППКонтрагента) Тогда
		КППКонтрагента	= УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(ДокументыОснования[0].ДокументОснование, "Грузополучатель");
	КонецЕсли;
	
	ОпределениеПараметровСчетаФактурыНаРеализацию();

	КодВидаОперации	= ПолучитьКодВидаОперации(ПараметрыЗаполнения.Реквизиты.КодВидаОперацииОснования);

КонецПроцедуры

Процедура ОпределениеПараметровСчетаФактурыНаРеализацию() Экспорт
	Перем ПараметрыСФ;

	Если ДокументыОснования.Количество() = 0
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОбновлены	= Ложь;
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Дата);
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ДокументОснование <> ДокументыОснования[0].ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	ВидСчетаФактурыПоОснованию = УчетНДСПереопределяемый.ОпределитьВидСчетаФактурыВыданногоПоТипуОснования(ДокументОснование);
	Если ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		ИЛИ ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		Перезаполнить = Ложь;
		Если НЕ ВидСчетаФактуры = ВидСчетаФактурыПоОснованию Тогда
			ВидСчетаФактуры = ВидСчетаФактурыПоОснованию;
			Перезаполнить	= Истина;
		КонецЕсли;	

		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
			ИсправлениеОснования = ДокументОснование.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
			СменаПризнакаИсправление = Исправление <> ИсправлениеОснования;
			Если Перезаполнить ИЛИ СменаПризнакаИсправление Тогда
				Если СменаПризнакаИсправление Тогда
					Номер = "";
				КонецЕсли;
				ЗаполнитьСчетФактуруКорректировочный(ДокументОснование, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыСФ = УчетНДСПереопределяемый.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект);
	
	Если НЕ ПараметрыСФ.Организация = Неопределено
		И НЕ ПараметрыСФ.Организация = Организация Тогда
		Номер		= "";
		Организация	= ПараметрыСФ.Организация;
		РеквизитыОбновлены	= Истина;
	КонецЕсли;

	Если НЕ ПараметрыСФ.Контрагент = Неопределено
		И НЕ ПараметрыСФ.Контрагент = Контрагент Тогда
		Контрагент			= ПараметрыСФ.Контрагент;
		КППКонтрагента		= "";
		РеквизитыОбновлены	= Истина;
	КонецЕсли;

	Если НЕ ПараметрыСФ.Договор = Неопределено
		И НЕ ПараметрыСФ.Договор = ДоговорКонтрагента Тогда
		ДоговорКонтрагента	= ПараметрыСФ.Договор;
		РеквизитыОбновлены	= Истина;
	КонецЕсли;

	Если НЕ ПараметрыСФ.Продавец = Неопределено
		И НЕ ПараметрыСФ.Продавец = Продавец Тогда
		Продавец = ПараметрыСФ.Продавец;
		РеквизитыОбновлены = Истина;
	КонецЕсли;

	Если НЕ СуммаДокумента = ПараметрыСФ.СуммаДокумента Тогда
		СуммаДокумента	= ПараметрыСФ.СуммаДокумента;
		РеквизитыОбновлены	= Истина;
	КонецЕсли;

	Если НЕ СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента Тогда
		СуммаНДСДокумента	= ПараметрыСФ.СуммаНДСДокумента;
		РеквизитыОбновлены	= Истина;
	КонецЕсли;

	Если НЕ СуммаУвеличение = ПараметрыСФ.СуммаУвеличение Тогда
		СуммаУвеличение		= ПараметрыСФ.СуммаУвеличение;
		РеквизитыОбновлены	= Истина;
	КонецЕсли;

	Если НЕ СуммаУменьшение = ПараметрыСФ.СуммаУменьшение Тогда
		СуммаУменьшение	= ПараметрыСФ.СуммаУменьшение;
		РеквизитыОбновлены	= Истина;
	КонецЕсли;

	Если НЕ СуммаНДСУвеличение = ПараметрыСФ.СуммаНДСУвеличение Тогда
		СуммаНДСУвеличение	= ПараметрыСФ.СуммаНДСУвеличение;
		РеквизитыОбновлены	= Истина;
	КонецЕсли;

	Если НЕ СуммаНДСУменьшение = ПараметрыСФ.СуммаНДСУменьшение Тогда
		СуммаНДСУменьшение	= ПараметрыСФ.СуммаНДСУменьшение;
		РеквизитыОбновлены	= Истина;
	КонецЕсли;
	
	Если Дата >= '20150101' Тогда
		Если СуммаУвеличениеКомиссия <> ПараметрыСФ.СуммаУвеличениеКомиссия Тогда
			СуммаУвеличениеКомиссия = ПараметрыСФ.СуммаУвеличениеКомиссия;
		КонецЕсли;
		Если СуммаУменьшениеКомиссия <> ПараметрыСФ.СуммаУменьшениеКомиссия Тогда
			СуммаУменьшениеКомиссия = ПараметрыСФ.СуммаУменьшениеКомиссия;
		КонецЕсли;
		Если СуммаДокументаКомиссия <> ПараметрыСФ.СуммаДокументаКомиссия Тогда
			СуммаДокументаКомиссия = ПараметрыСФ.СуммаДокументаКомиссия;
		КонецЕсли;
		Если СуммаНДСДокументаКомиссия <> ПараметрыСФ.СуммаНДСДокументаКомиссия Тогда
			СуммаНДСДокументаКомиссия = ПараметрыСФ.СуммаНДСДокументаКомиссия;
		КонецЕсли;
		Если СуммаНДСУвеличениеКомиссия <> ПараметрыСФ.СуммаНДСУвеличениеКомиссия Тогда
			СуммаНДСУвеличениеКомиссия = ПараметрыСФ.СуммаНДСУвеличениеКомиссия;
		КонецЕсли; 
		Если СуммаНДСУменьшениеКомиссия <> ПараметрыСФ.СуммаНДСУменьшениеКомиссия Тогда
			СуммаНДСУменьшениеКомиссия = ПараметрыСФ.СуммаНДСУменьшениеКомиссия;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ПараметрыСФ.ВалютаДокумента = Неопределено
		И НЕ ВалютаДокумента = ПараметрыСФ.ВалютаДокумента Тогда
		ВалютаДокумента	= ПараметрыСФ.ВалютаДокумента;
		РеквизитыОбновлены	= Истина;
	КонецЕсли;
	
	Если НЕ ПараметрыСФ.НомерСчетаФактурыПродавца = Неопределено 
		И НЕ НомерСчетаФактурыПродавца = ПараметрыСФ.НомерСчетаФактурыПродавца Тогда 
		НомерСчетаФактурыПродавца = ПараметрыСФ.НомерСчетаФактурыПродавца;
		РеквизитыОбновлены	= Истина;
	КонецЕсли;

	Если ИспользуетсяПостановлениеНДС1137 И НЕ ЗначениеЗаполнено(КодВидаОперации) Тогда
		Если НЕ ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			КодВидаОперации = ПолучитьКодВидаОперации();
		КонецЕсли;
	КонецЕсли;

	Если ИспользуетсяПостановлениеНДС1137 Тогда
		Если СчетФактураБезНДС <> ПараметрыСФ.СчетФактураБезНДС Тогда
			СчетФактураБезНДС  = ПараметрыСФ.СчетФактураБезНДС;
			РеквизитыОбновлены = Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		РезультатПоискаИсправляемыйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументыОснования[0].ДокументОснование, "ИсправляемыйДокументРеализации"));
		Если РезультатПоискаИсправляемыйСчетФактура = Неопределено Тогда
			РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		
	КонецЕсли;

	Если НЕ ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура Тогда
		ИсправляемыйСчетФактура	= РезультатПоискаИсправляемыйСчетФактура;
		РеквизитыИсправляемогоСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсправляемыйСчетФактура, "Дата, Номер");
		Если ВидСчетаФактуры =  Перечисления.ВидСчетаФактурыВыставленного.Корректировочный И Исправление Тогда
			НомерИсправляемогоКорректировочногоДокумента 	= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыИсправляемогоСчетаФактуры.Номер, Истина, Ложь);
			ДатаИсправляемогоКорректировочногоДокумента 	= РеквизитыИсправляемогоСчетаФактуры.Дата;
			НомерИсходногоДокумента = "";
			ДатаИсходногоДокумента 	= '00010101';
		ИначеЕсли Исправление Тогда
			НомерИсходногоДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыИсправляемогоСчетаФактуры.Номер, Истина, Ложь);
			ДатаИсходногоДокумента 	= РеквизитыИсправляемогоСчетаФактуры.Дата;
			НомерИсправляемогоКорректировочногоДокумента 	= "";
			ДатаИсправляемогоКорректировочногоДокумента 	= '00010101';
		КонецЕсли;
		РеквизитыОбновлены	= Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") 
		И ИспользуетсяПостановлениеНДС1137 Тогда
		
		СчетФактураНеВыставляется = Истина;
		
	КонецЕсли;
	
	Если ПустаяСтрока(КППКонтрагента) Тогда
		КППКонтрагента	= УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(ДокументыОснования[0].ДокументОснование, "Грузополучатель");
		Если НЕ ПустаяСтрока(КППКонтрагента) Тогда
			РеквизитыОбновлены	= Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный И ПараметрыСФ.РеквизитыОснований.Количество() <> 0 Тогда
		
		Для Каждого Основание Из ДокументыОснования Цикл
			
			СтрокаСРеквизитами = ПараметрыСФ.РеквизитыОснований.Найти(Основание.ДокументОснование, "ДокументОснование");	
			Если СтрокаСРеквизитами <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Основание, СтрокаСРеквизитами); 
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаОснований = ПараметрыСФ.РеквизитыОснований;
		ТаблицаОснований.Свернуть("ДокументОснование");
		
		Если ТаблицаОснований.Количество() > 1 Тогда
			ПараметрСводныйКорректировочный = Истина;
		Иначе
			ПараметрСводныйКорректировочный = Ложь;
		КонецЕсли; 
	Иначе
		ПараметрСводныйКорректировочный = Ложь;
	КонецЕсли;
	
	Если СводныйКорректировочный <> ПараметрСводныйКорректировочный Тогда
		СводныйКорректировочный = ПараметрСводныйКорректировочный;
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьКодВидаОперации(КодВидаОперацииОснования = Неопределено)

	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Дата",						Дата);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",				ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",					Исправление);
	СтруктураПараметров.Вставить("Контрагент",					Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",			ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Продавец",					Продавец);
	СтруктураПараметров.Вставить("СчетФактураНеВыставляется",	СчетФактураНеВыставляется);
	СтруктураПараметров.Вставить("СчетФактураБезНДС",			СчетФактураБезНДС);
	СтруктураПараметров.Вставить("КодВидаОперации",				КодВидаОперации);
	СтруктураПараметров.Вставить("ДокументыОснования",			ДокументыОснования.Выгрузить(,"ДокументОснование"));

	Возврат Документы.СчетФактураВыданный.ПолучитьКодВидаОперации(СтруктураПараметров, КодВидаОперацииОснования);

КонецФункции

Процедура ПроверкаРеквизитовСчетаФактурыПоВиду()

	Если СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;

	// Проверка табличной части ДокументыОснования, ПлатежноРасчетныеДокументы

	Если НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда

		Если ЗначениеЗаполнено(ДокументОснование)
			И ДокументыОснования.Количество() = 0 Тогда

			НоваяСтрока	= ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование	= ДокументОснование;

		ИначеЕсли ЗначениеЗаполнено(ДокументОснование)
			И ДокументыОснования.Количество() = 1 Тогда
			
			Если ДокументОснование <> ДокументыОснования[0].ДокументОснование Тогда 
				ДокументыОснования[0].ДокументОснование = ДокументОснование;	
			КонецЕсли;	
			
		ИначеЕсли ДокументыОснования.Количество() > 1 Тогда

			ДокументОснованиеПервый = ДокументыОснования[0].ДокументОснование;

			ДокументыОснования.Очистить();
			НоваяСтрока	= ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = ДокументОснованиеПервый;

		КонецЕсли;

		Если ЗначениеЗаполнено(ДатаПлатежноРасчетногоДокумента) 
			ИЛИ ЗначениеЗаполнено(НомерПлатежноРасчетногоДокумента) Тогда
			
			Если ПлатежноРасчетныеДокументы.Количество() = 0 Тогда
				НоваяСтрока	= ПлатежноРасчетныеДокументы.Добавить();
				НоваяСтрока.ДатаДокумента	= ДатаПлатежноРасчетногоДокумента;
				НоваяСтрока.НомерДокумента	= НомерПлатежноРасчетногоДокумента;
			Иначе
				ДатаДокументаПервый		= ПлатежноРасчетныеДокументы[0].ДатаДокумента;
				НомерДокументаПервый	= ПлатежноРасчетныеДокументы[0].НомерДокумента;
				
				Если ПлатежноРасчетныеДокументы.Количество() > 1  
					ИЛИ ДатаПлатежноРасчетногоДокумента <> ДатаДокументаПервый 
					ИЛИ НомерПлатежноРасчетногоДокумента <> НомерДокументаПервый Тогда 
					ПлатежноРасчетныеДокументы.Очистить();
					НоваяСтрока	= ПлатежноРасчетныеДокументы.Добавить();
					НоваяСтрока.ДатаДокумента 	= ДатаПлатежноРасчетногоДокумента;
					НоваяСтрока.НомерДокумента	= НомерПлатежноРасчетногоДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ПлатежноРасчетныеДокументы.Очистить(); 		
		КонецЕсли;

	КонецЕсли;

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда

		ДатаПлатежноРасчетногоДокумента		= '00010101';
		НомерПлатежноРасчетногоДокумента	= "";
		ПлатежноРасчетныеДокументы.Очистить();

	КонецЕсли;

	// Проверка табличной части Авансы

	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
		И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		Авансы.Очистить();
	Иначе
		Если НЕ СводныйКомиссионный Тогда
			РеквизитыДляОчистки = "Контрагент,ДокументОснование,ДатаПлатежноРасчетногоДокумента,НомерПлатежноРасчетногоДокумента";
		ИначеЕсли ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
			РеквизитыДляОчистки = "ДокументОснование,ДатаПлатежноРасчетногоДокумента,НомерПлатежноРасчетногоДокумента";
		Иначе
			РеквизитыДляОчистки = "";
		КонецЕсли;
		Если НЕ ПустаяСтрока(РеквизитыДляОчистки) Тогда
			ТаблицаАвансы = Авансы.Выгрузить();
			ТаблицаАвансы.ЗаполнитьЗначения(Неопределено, РеквизитыДляОчистки);
			Авансы.Загрузить(ТаблицаАвансы);
		КонецЕсли;
	КонецЕсли;

	// Проверка реквизитов шапки

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		СчетФактураНеВыставляется = Истина;
		Выставлен		= Ложь;
		ДатаВыставления	= '00010101';
	КонецЕсли;
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		СчетФактураНеВыставляется = Ложь;
	ИначеЕсли НЕ (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		И ДокументыОснования.Количество() > 0
		И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование)
		И (ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"))
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументыОснования[0].ДокументОснование, "ВыписыватьСчетаФактурыСводно")) Тогда
		СводныйКомиссионный = Ложь;
	КонецЕсли;

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда

		ВалютаРегламентированногоУчета	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Если НЕ ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			ВалютаДокумента = ВалютаРегламентированногоУчета;
		КонецЕсли;

		ДоговорКонтрагента = Неопределено;

		Исправление	= Ложь;

	КонецЕсли;

	Если НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда

		НомерИсправляемогоКорректировочногоДокумента = 0;
		ДатаИсправляемогоКорректировочногоДокумента	 = '00010101';

		Если НЕ Исправление Тогда
			НомерИсходногоДокумента	= "";
			ДатаИсходногоДокумента	= '00010101';
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьСуммуДокумента()

	Если СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда

		ОпределениеПараметровСчетаФактурыНаРеализацию();

	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
			
		Сумма	 = Авансы.Итог("Сумма");
		СуммаНДС = Авансы.Итог("СуммаНДС");
		
		ВалютаРегламентированногоУчета	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда

			СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			СуммаДокумента	= РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма,
										ВалютаРегламентированногоУчета, ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс,
										1, СтруктураКурсаВзаиморасчетов.Кратность);
			СуммаНДСДокумента	= РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаНДС,
										ВалютаРегламентированногоУчета, ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс,
										1, СтруктураКурсаВзаиморасчетов.Кратность);
		Иначе

			СуммаДокумента    = Сумма;
			СуммаНДСДокумента = СуммаНДС;

		КонецЕсли;
		
		Если (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента)
			И Дата >= '20150101' Тогда
			СуммаДокументаКомиссия    = СуммаДокумента;
			СуммаНДСДокументаКомиссия = СуммаНДСДокумента;
		Иначе
			СуммаДокументаКомиссия    = 0;
			СуммаНДСДокументаКомиссия = 0;
		КонецЕсли;
		
		Если СводныйКорректировочный Тогда
			СводныйКорректировочный = Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		
		СуммаДокумента    = Сумма;
		СуммаНДСДокумента = СуммаНДС;
		
		Если СводныйКорректировочный Тогда
			СводныйКорректировочный = Ложь;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ЕстьДублиСчетаФактуры()
	
	ЕстьДубли = Ложь;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Продавец", Справочники.Контрагенты.ПустаяСсылка());
		
		Для каждого СтрокаОснования Из ДокументыОснования Цикл
			
			Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг")
				ИЛИ ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
				ИЛИ ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ПодтверждениеНулевойСтавкиНДС")
				ИЛИ (ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
					И ЗначениеЗаполнено(Продавец)) Тогда
				Продолжить;
			КонецЕсли;
			
			СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(
				СтрокаОснования.ДокументОснование, Ссылка, , СтруктураОтбора);
			Если ЗначениеЗаполнено(СуществующийСФ) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='На основании документа %1 был введен %2'"),
					СтрокаОснования.ДокументОснование,
					СуществующийСФ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
				ЕстьДубли = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПодтверждениеНулевойСтавкиНДС") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СуществующийСФ = Неопределено;
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаАванс(
				ДокументОснование, Ссылка, ДоговорКонтрагента, НомерИсправления);
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
			СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНалоговыйАгент(
				ДокументОснование, Ссылка, ДоговорКонтрагента, НомерИсправления);
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
			СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаСуммовуюРазницу(
				ДокументОснование, Ссылка, ДоговорКонтрагента);
		КонецЕсли;
		Если ЗначениеЗаполнено(СуществующийСФ) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='На основании документа %1 был введен %2'"),
				ДокументОснование,
				СуществующийСФ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
			ЕстьДубли = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьДубли;

КонецФункции

Процедура УстановитьПредставлениеНомера()
	
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		ЭтотОбъект.УстановитьНовыйНомер();	
	КонецЕсли;
	
	Если Исправление Тогда
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ПредставлениеНомера = НомерИсправляемогоКорректировочногоДокумента + " (испр. "+ НомерИсправления+")";
		Иначе
			ПредставлениеНомера = НомерИсходногоДокумента + " (испр. "+ НомерИсправления+")";
		КонецЕсли;
	Иначе
		ПредставлениеНомера = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Номер, Истина, Ложь);		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли