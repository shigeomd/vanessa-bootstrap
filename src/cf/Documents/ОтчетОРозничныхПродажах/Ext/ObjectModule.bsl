#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			ДокументОснование = ДанныеЗаполнения;
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура")
			И ДанныеЗаполнения.Свойство("Основание")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Основание.Метаданные()) Тогда
			ДокументОснование = ДанныеЗаполнения.Основание;
		КонецЕсли;

		Если ДокументОснование <> Неопределено Тогда
			ЗаполнитьПоДокументуОснованию(ДокументОснование);
		Иначе
			СуммаВключаетНДС = Истина;
		КонецЕсли;
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ТипСклада, ТипЦенРозничнойТорговли");

	// Склад может заполниться по умолчанию значением, которое не должно выбираться
	Если ЗначениеЗаполнено(Склад) Тогда
		Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			Если РеквизитыСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Если РеквизитыСклада.ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТипЦен = РеквизитыСклада.ТипЦенРозничнойТорговли;
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьДокумента = СтруктураКурсаВзаиморасчетов.Кратность;
	
	ЭтоОтчетПоНТТ = 
		ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;
	ЕстьСтрокиВТаблицеОплата = Оплата.Количество() > 0;
	
	Если ЭтоОтчетПоНТТ 
		и ЕстьСтрокиВТаблицеОплата Тогда
		Оплата.Очистить();
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПлательщикНДФЛ	= УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ ДеятельностьНаПатенте Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Патент");
	КонецЕсли;
	
	// Реквизиты с проверкой по различным условиям
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчета");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНДСПоРеализации");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетДоходов");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Субконто");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СтранаПроисхождения");

	ТребуетсяСчетРасходовПоОказаниюУслуг = РегистрыНакопления.РеализацияУслуг.ТребуетсяСчетРасходовПоОказаниюУслуг(Дата, Организация);
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата);
	УчетПоПродажнойСтоимости    = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	ТипСклада	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	
	НТТПоПродажнойСтоимости = УчетПоПродажнойСтоимости
		И ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;

	// Проверка: сумма безналичных оплат не должна превышать сумму по реализации товаров и услуг
	СуммаВыручки = Товары.Итог("Сумма") + ?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДС"))
				   + АгентскиеУслуги.Итог("Сумма") + ?(СуммаВключаетНДС, 0, АгентскиеУслуги.Итог("СуммаНДС"));
				 
	Если Оплата.Итог("СуммаОплаты") > СуммаВыручки  Тогда
					   
		ТекстОписаниеОшибки = НСтр("ru = 'Сумма оплат по платежным картам и банковским кредитам превышает сумму выручки от реализации!'"); 
		ТекстСообщения      = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Корректность",,, НСтр("ru = 'Оплата'"), ТекстОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Оплата", "Объект", Отказ);
		
	КонецЕсли;		
			
	// Проверка ТЧ Товары

	МассивНоменклатуры 		= Товары.ВыгрузитьКолонку("Номенклатура");
	РеквизитыНоменклатуры 	= ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатуры, "Услуга");

	ИменаПолей = Новый Структура;
	ИменаПолей.Вставить("СчетРасходов", НСтр("ru = 'Счет расходов'"));
	ИменаПолей.Вставить("СчетУчета",    НСтр("ru = 'Счет учета'"));
	ИменаПолей.Вставить("Номенклатура", НСтр("ru = 'Номенклатура'"));
	ИменаПолей.Вставить("СчетДоходов",  НСтр("ru = 'Счет доходов'"));
	ИменаПолей.Вставить("СчетРасходов", НСтр("ru = 'Счет расходов'"));
	ИменаПолей.Вставить("СтранаПроисхождения", НСтр("ru = 'Страна происхождения'"));
	ИменаПолей.Вставить("СчетУчетаНДСПоРеализации", НСтр("ru = 'Счет учета НДС'"));

	Для каждого СтрокаТаблицы Из Товары Цикл

		СвойстваСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		
		ЭтоУслуга = Ложь;
		СвойстваНоменклатуры = РеквизитыНоменклатуры[СтрокаТаблицы.Номенклатура];
		Если СвойстваНоменклатуры <> Неопределено Тогда
			ЭтоУслуга = СвойстваНоменклатуры.Услуга;
		КонецЕсли;

		Если НТТПоПродажнойСТоимости
				И ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
				И НЕ СвойстваСчетаУчета.Забалансовый Тогда
			ТекстОшибки = НСтр("ru = 'Продажи собственных товаров в НТТ при учете по продажной стоимости
			|должны отражаться документом ""Поступление наличных""!'");
			СообщитьОНекорректномЗначенииТаблицыТовары(СтрокаТаблицы.НомерСтроки, "Номенклатура", ИменаПолей.Номенклатура, ТекстОшибки, Отказ);
		КонецЕсли;

		Если НЕ ЭтоУслуга
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СообщитьОНезаполненномПолеТаблицыТовары(СтрокаТаблицы.НомерСтроки, "СчетУчета", ИменаПолей.СчетУчета, Отказ);
		КонецЕсли;

		Если НЕ НТТПоПродажнойСТоимости
				И НЕ СвойстваСчетаУчета.Забалансовый Тогда
			
			Если СтрокаТаблицы.СуммаНДС <> 0 И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПоРеализации) Тогда
				СообщитьОНезаполненномПолеТаблицыТовары(СтрокаТаблицы.НомерСтроки, "СчетУчетаНДСПоРеализации", ИменаПолей.СчетУчетаНДСПоРеализации, Отказ);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов) Тогда
				СообщитьОНезаполненномПолеТаблицыТовары(СтрокаТаблицы.НомерСтроки, "СчетДоходов", ИменаПолей.СчетДоходов, Отказ);
			КонецЕсли;
			Если НЕ ЭтоУслуга
					И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов) Тогда
				СообщитьОНезаполненномПолеТаблицыТовары(СтрокаТаблицы.НомерСтроки, "СчетРасходов", ИменаПолей.СчетРасходов, Отказ);
			КонецЕсли;
		КонецЕсли;

		Если ЭтоУслуга
			И ТребуетсяСчетРасходовПоОказаниюУслуг
			И Не ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов) Тогда
			СообщитьОНезаполненномПолеТаблицыТовары(СтрокаТаблицы.НомерСтроки, "СчетРасходов", ИменаПолей.СчетРасходов, Отказ);
		КонецЕсли;
		
		// Проверка страны происхождения
		Если УчетТоваров.НеУказанаСтранаПроисхождения(СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
			СообщитьОНезаполненномПолеТаблицыТовары(СтрокаТаблицы.НомерСтроки, "СтранаПроисхождения", ИменаПолей.СтранаПроисхождения, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПлательщикНДФЛ Тогда
		
		УчетДоходовИРасходовПредпринимателя.ПроверитьЗаполнениеСубконтоНоменклатурныеГруппы(
			ЭтотОбъект, "СчетДоходов", "Субконто", НСтр("ru = 'Субконто'"), "Товары", НСтр("ru = 'Товары'"), Отказ);
		
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") 
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ОтчетОРозничныхПродажах.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.Товары,
		ПараметрыПроведения.Реквизиты, Отказ);

	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(ПараметрыПроведения.Реализация,
		Неопределено, ТаблицаСписанныеТовары, ПараметрыПроведения.Реквизиты, Отказ);

	ТаблицаТоварыУслугиКомитентов = ТаблицыРеализация.ТоварыУслугиКомитентов;
	
	СтруктураТаблицВыручкиЗаМесяц = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиЗаМесяц(ПараметрыПроведения.РеквизитыВыручки, Отказ);
	
	// Сводная таблица выручки
	ТаблицаВыручкиЗаМесяц = СтруктураТаблицВыручкиЗаМесяц.ТаблицаВыручкиЗаМесяц;
	// Выручка по документам и отражению в НУ при УСН
	ТаблицаВыручкиПоДокументамПлатежа = СтруктураТаблицВыручкиЗаМесяц.ТаблицаВыручкиПоДокументамПлатежа;
	
	СтруктураТаблицБезналичнойВыручки = Документы.ОтчетОРозничныхПродажах.ПодготовитьСтруктуруТаблицБезналичнойВыручки(
		ПараметрыПроведения.РеквизитыВыручки, ТаблицаВыручкиЗаМесяц, Отказ);
	
	ТаблицаПрочихРасчетовУСН				= СтруктураТаблицБезналичнойВыручки.ТаблицаПрочихРасчетовУСН;
	ТаблицаНеоплаченнойБезналичнойВыручки	= СтруктураТаблицБезналичнойВыручки.ТаблицаНеоплаченнойБезналичнойВыручки;
	
	// Таблица оплаченной выручки за месяц при учете в НТТ в ценах продажи, 
	ТаблицаОплаченнойВыручкиУСН = УчетДоходовРасходов.ПодготовитьТаблицуОплаченнойВыручкиЗаМесяц(
		ПараметрыПроведения.РеквизитыВыручки, ТаблицаВыручкиПоДокументамПлатежа, ТаблицаНеоплаченнойБезналичнойВыручки, Отказ);
		
	// Таблица для сторнирования ранее отраженной документами ПКО выручки НТТ при учете по продажной стоимости 
	// в случае реализации товаров комитента
	ТаблицаСторноВыручки = УчетДоходовРасходов.ПодготовитьТаблицуСторноВыручкиНТТ(ПараметрыПроведения.Выручка,
		ПараметрыПроведения.РеквизитыВыручки, ТаблицаВыручкиЗаМесяц, Отказ);
	ТаблицаСторноВыручкиНДС = Документы.ОтчетОРозничныхПродажах.ПодготовитьТаблицуНДСДокументаСторноВыручки(
		ТаблицаСторноВыручки, ПараметрыПроведения.РеквизитыВыручки, Ссылка);

	Документы.РеализацияТоваровУслуг.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура();
	СтруктураТаблицУСН.Вставить("ТаблицаТМЦ",				ТаблицаСписанныеТовары);
	СтруктураТаблицУСН.Вставить("ТаблицаРасчетов",			ТаблицаПрочихРасчетовУСН);
	СтруктураТаблицУСН.Вставить("ТаблицаОплаченнойВыручки", ТаблицаОплаченнойВыручкиУСН); // только при НТТ в ценах продажи
	
	// Учет доходов и расходов ИП
	СписанныеМПЗ = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуСписанныеМПЗ(
		ТаблицаСписанныеТовары, ПараметрыПроведения.Реализация, ПараметрыПроведения.Реквизиты);
	
	ТаблицыСписанияТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		СписанныеМПЗ, ПараметрыПроведения.Реквизиты, Отказ);
	
	ТаблицаОказаниеУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОказаниеУслуг(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты);
		
	СтруктураТаблицИП = Документы.ОтчетОРозничныхПродажах.ПодготовитьСтруктруТаблицИП(
		ПараметрыПроведения.Реализация, ПараметрыПроведения.БезналичныеОплаты, 
		ПараметрыПроведения.Реквизиты, ТаблицаВыручкиЗаМесяц);
		
	ТаблицаВзаиморасчетовИП = СтруктураТаблицИП.ТаблицаВзаиморасчетовИП;
	ТаблицаПрочихРасчетовИП = СтруктураТаблицИП.ТаблицаПрочихРасчетовИП;
	
	ЕдинаяТаблицаДляРегистраПрочихРасчетов = ТаблицаПрочихРасчетовУСН.Скопировать();
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
		ТаблицаПрочихРасчетовИП, 
		ЕдинаяТаблицаДляРегистраПрочихРасчетов);
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетВзаиморасчетов.СформироватьДвиженияПоПрочимРасчетам(ЕдинаяТаблицаДляРегистраПрочихРасчетов, Движения, Отказ);
	
	Документы.ОтчетОРозничныхПродажах.СформироватьДвиженияПоСчетамУСН(ПараметрыПроведения.Реквизиты, 
		ПараметрыПроведения.ВыручкаДляРаспределенияОплаты, ТаблицаПрочихРасчетовУСН, Движения, Отказ);

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансовКомитентов(ТаблицыРеализация.ТоварыУслугиКомитентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияРеализация(ТаблицыРеализация.СобственныеТоварыУслуги,
		ТаблицыРеализация.ТоварыУслугиКомитентов, ТаблицыРеализация.РеализованныеТоварыКомитентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаТоваровВРознице(ПараметрыПроведения.Переоценка,
		ТаблицаСписанныеТовары, ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияРаспределениеРозничнойВыручки(ПараметрыПроведения.Выручка,
		ПараметрыПроведения.РеквизитыВыручки, ТаблицаВыручкиЗаМесяц, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияСторноРозничнойВыручки(ТаблицаСторноВыручки,
		ПараметрыПроведения.РеквизитыВыручки, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияРаспределениеБезналичнойОплаты(ПараметрыПроведения.БезналичныеОплаты,
		ПараметрыПроведения.ВыручкаДляРаспределенияОплаты, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	РегистрыНакопления.РеализацияУслуг.ДобавитьДвижения(
		Движения.РеализацияУслуг,
		ПараметрыПроведения.ТаблицаРеализацияУслуг,
		Неопределено, // Не надо пересчитывать по курсу аванса
		ПараметрыПроведения.Реквизиты);
		
	// Учет НДС
	УчетНДС.СформироватьДвиженияРозничнаяРеализацияТоваровУслуг(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.ТоварыНДС, ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	// Сторнирование ранее начисленного НДС в НТТ при учете по продажной стоимости в случае реализации товаров комитента
	УчетНДС.СформироватьДвиженияРозничнаяВыручка(ТаблицаСторноВыручкиНДС, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетНДС.СформироватьДвиженияРеализацияТоваровУслугКомитентаНерезидента(
		ТаблицаТоварыУслугиКомитентов, ПараметрыПроведения.Реквизиты, Движения, Отказ);	
		
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	ТаблицаИПМПЗОтгруженные	= УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияТоваровИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	ТаблицаИПМПЗОтгруженныеУслуги	= УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОказаниеУслуг(
		ТаблицаОказаниеУслугИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаИПМПЗОтгруженныеУслуги, ТаблицаИПМПЗОтгруженные);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные,
		ТаблицаВзаиморасчетовИП, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СообщитьОНезаполненномПолеТаблицыТовары(НомерСтроки, ИмяПоля, ЗначениеПоля, Отказ)

	ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
		ЗначениеПоля, НомерСтроки, НСтр("ru = 'Товары'"));

	Поле = "Товары[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=") + "]." + ИмяПоля;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

КонецПроцедуры

Процедура СообщитьОНекорректномЗначенииТаблицыТовары(НомерСтроки, ИмяПоля, ЗначениеПоля, ТекстОшибки, Отказ)

	ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
		ЗначениеПоля, НомерСтроки, НСтр("ru = 'Товары'"), ТекстОшибки);

	Поле = "Товары[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=") + "]." + ИмяПоля;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

КонецПроцедуры
 
// Заполнение документа по инвентаризации товаров на розничном складе
//
Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, "Организация,Склад");

		ИнвентаризацияТоваровНаСкладе = Основание;
		
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ТипЦенРозничнойТорговли, ТипСклада");

		Если ЗначениеЗаполнено(РеквизитыСклада.ТипЦенРозничнойТорговли) Тогда
			ТипЦен = РеквизитыСклада.ТипЦенРозничнойТорговли;
		КонецЕсли;

		СуммаВключаетНДС = Истина;

		Если РеквизитыСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;
		КонецЕсли;

		// Заполнение ТЧ Товары
		Документы.ОтчетОРозничныхПродажах.ЗаполнитьТоварыПоИнвентаризацииТоваров(ЭтотОбъект, Основание);

	КонецЕсли;

КонецПроцедуры

#КонецЕсли