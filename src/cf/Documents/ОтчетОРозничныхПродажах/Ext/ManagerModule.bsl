#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьСчетРасчетовВСтрокеАгентскойУслуги(Объект, СтрокаТаблицы) Экспорт

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация,  СтрокаТаблицы.Контрагент,  СтрокаТаблицы.ДоговорКонтрагента);

	СтрокаТаблицы.СчетРасчетов = СчетаУчета.СчетРасчетовСКомитентом;

КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, ДеятельностьНаПатенте, Склад, Реализация, АТТПоПродажнойСтоимости");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	ДанныеОбъекта.АТТПоПродажнойСтоимости = 
		ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах
		И (УчетнаяПолитика.СпособОценкиТоваровВРознице(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
		И НЕ  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.Склад, "ТипСклада") = Перечисления.ТипыСкладов.ОптовыйСклад;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре);
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажахТовары.Номенклатура КАК Номенклатура,
	|	ОтчетОРозничныхПродажахТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажахАгентскиеУслуги.Номенклатура,
	|	ОтчетОРозничныхПродажахАгентскиеУслуги.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК ОтчетОРозничныхПродажахАгентскиеУслуги
	|ГДЕ
	|	ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// При вводе на основании счета на оплату и поступления товаров и услуг, 
	// открывается форма, содержащая только ТЧ Товары или только ТЧ Услуги, если
	// у документа-основания заполнена только соответствующая таблица.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыДокумента = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыДокумента[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах, "ФормаДокументаОбщая");
	
	Возврат ФормыДокумента;

КонецФункции

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Основание);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИнвентаризацияТоваровНаСкладе.Склад.ТипСклада КАК ТипСклада
			|ИЗ
			|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
			|ГДЕ
			|	ИнвентаризацияТоваровНаСкладе.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И Выборка.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидОперации;

КонецФункции

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчета") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		Если ДанныеОбъекта.АТТПоПродажнойСтоимости И НЕ СчетаУчета.СчетУчетаЯвляетсяЗабалансовым Тогда
			СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		ИначеЕсли ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда 
			СтрокаТабличнойЧасти.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетДоходов) Тогда
			СтрокаТабличнойЧасти.СчетДоходов = СчетаУчета.СчетДоходов;
		КонецЕсли;
		
		Если СведенияОНоменклатуре.Свойство("Субконто")
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Субконто) Тогда
			
			СтрокаТабличнойЧасти.Субконто = СведенияОНоменклатуре.Субконто;
			
		ИначеЕсли СведенияОНоменклатуре.Свойство("ВидСубконтоТипЗначения")
			И ЗначениеЗаполнено(СведенияОНоменклатуре.ВидСубконтоТипЗначения) Тогда
			
			СтрокаТабличнойЧасти.Субконто =
				СведенияОНоменклатуре.ВидСубконтоТипЗначения.ПривестиЗначение(СтрокаТабличнойЧасти.Субконто);
			
		Иначе
			СтрокаТабличнойЧасти.Субконто = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетРасходов) Тогда
			СтрокаТабличнойЧасти.СчетРасходов = СчетаУчета.СчетРасходов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПродажи) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Заполнение табличной части проданными товарами по инвентаризации товаров на розничном складе
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОбъект, ДокументОснование) Экспорт

	РеквизитыИнвентаризацииТоваров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументОснование, "Склад");
	
	Если ЗначениеЗаполнено(РеквизитыИнвентаризацииТоваров.Склад) Тогда
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыИнвентаризацииТоваров.Склад, "ТипСклада");
	Иначе
		РеквизитыСклада = Новый Структура;
		РеквизитыСклада.Вставить("ТипСклада");
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка"         , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТипСклада"			   , РеквизитыСклада.ТипСклада);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокСписание.Номенклатура КАК Номенклатура,
	|	ДокСписание.СчетУчета КАК СчетУчета,
	|	ДокСписание.Ссылка.Склад КАК Склад,
	|	ДокСписание.Количество КАК Количество,
	|	ДокСписание.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ВложенныйЗапрос
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК ДокСписание
	|ГДЕ
	|	ДокСписание.Ссылка.Проведен
	|	И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокОтчетККМ.Номенклатура,
	|	ДокОтчетККМ.СчетУчета,
	|	ДокОтчетККМ.Ссылка.Склад,
	|	ДокОтчетККМ.Количество,
	|	ДокОтчетККМ.Цена
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|ГДЕ
	|	ДокОтчетККМ.Ссылка <> &ДокументСсылка
	|	И ДокОтчетККМ.Ссылка.Проведен
	|	И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетУчета,
	|	Склад,
	|	Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.СчетУчета КАК СчетУчета,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	ЕСТЬNULL(СУММА(ВТ_ВложенныйЗапрос.Количество), 0) КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВложенныйЗапрос КАК ВТ_ВложенныйЗапрос
	|		ПО Док.Номенклатура = ВТ_ВложенныйЗапрос.Номенклатура
	|			И Док.СчетУчета = ВТ_ВложенныйЗапрос.СчетУчета
	|			И Док.Ссылка.Склад = ВТ_ВложенныйЗапрос.Склад
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.КоличествоУчет - Док.Количество > 0
	|	И &ТипСклада <> ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.ЦенаВРознице
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество),
	|	МИНИМУМ(Док.НомерСтроки),
	|	ЕСТЬNULL(СУММА(ВТ_ВложенныйЗапрос.Количество), 0),
	|	Док.ЦенаВРознице
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВложенныйЗапрос КАК ВТ_ВложенныйЗапрос
	|		ПО Док.Номенклатура = ВТ_ВложенныйЗапрос.Номенклатура
	|			И Док.СчетУчета = ВТ_ВложенныйЗапрос.СчетУчета
	|			И Док.Ссылка.Склад = ВТ_ВложенныйЗапрос.Склад
	|			И Док.ЦенаВРознице = ВТ_ВложенныйЗапрос.Цена
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.КоличествоУчет - Док.Количество > 0
	|	И &ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.ЦенаВРознице
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В документе ""%1"" № %2 отсутствуют товары, учетное количество которых превышает фактическое.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			ДокументОснование.Метаданные().Представление(),
			ДокументОснование.Номер);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата);
	Комиссия = (ДокументОбъект.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
		И (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	ТипСклада	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Склад, "ТипСклада");
	СпособОценкиТоваровВРознице	= УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата);
	
	АТТПоПродажнойСтоимости	= (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
		И ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах
		И НЕ ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	
	ТаблицаТоваров	= РезультатЗапроса.Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ДеятельностьНаПатенте, Склад,
		|ТипЦен, ВалютаДокумента, КурсДокумента, КратностьДокумента,
		|СуммаВключаетНДС, Реализация, АТТПоПродажнойСтоимости");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
	ДанныеОбъекта.АТТПоПродажнойСтоимости = АТТПоПродажнойСтоимости;
	ДанныеОбъекта.Реализация = Истина;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		КоличествоСписать = СтрокаТоваров.КоличествоОтклонение - СтрокаТоваров.КоличествоСписанное;
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура	= СтрокаТоваров.Номенклатура;
		СтрокаТабличнойЧасти.Количество		= КоличествоСписать;
		
		СведенияОНоменклатуре	= СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура);
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
			
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			
		КонецЕсли;
		
		Если РеквизитыСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТоваров.Цена;
		ИначеЕсли СведенияОНоменклатуре <> Неопределено Тогда
			СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект.СуммаВключаетНДС);
		
	КонецЦикла;

КонецПроцедуры

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	
	Возврат МассивРеквизитов;
	
КонецФункции

Функция ЕстьОплатаПлатежнойКартойНТТ(Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		Возврат Ложь;
	КонецЕсли; 

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Склад", Реквизиты.Склад);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	Если Реквизиты.УчетПоПродажнойСтоимости Тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
						|	ОплатаПлатежнойКартой.Ссылка
						|ИЗ
						|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
						|ГДЕ
						|	ОплатаПлатежнойКартой.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И &Период
						|	И ОплатаПлатежнойКартой.Организация = &Организация
						|	И ЕСТЬNULL(ОплатаПлатежнойКартой.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &ПодразделениеОрганизации
						|	И ОплатаПлатежнойКартой.Контрагент = &Склад
						|	И ОплатаПлатежнойКартой.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)";
	
	Иначе
	
		Запрос.Текст = "ВЫБРАТЬ
						|	ХозрасчетныйОстатки.СуммаОстаток
						|ИЗ
						|	РегистрБухгалтерии.Хозрасчетный.Остатки(
						|			&Период,
						|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручкаБН),
						|			&ВидыСубконто,
						|			Организация = &Организация
						|				И ЕСТЬNULL(Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &ПодразделениеОрганизации
						|				И Субконто1 = &Склад) КАК ХозрасчетныйОстатки
						|ГДЕ
						|	ХозрасчетныйОстатки.СуммаОстаток > 0";
						
	КонецЕсли;
					
	Возврат НЕ Запрос.Выполнить().Пустой();	

КонецФункции 

Функция ПодготовитьТаблицуНДСДокументаСторноВыручки(ТаблицаСторноВыручки, ТаблицаРеквизиты, ДокументСсылка) Экспорт

	Если ТаблицаСторноВыручки = Неопределено ИЛИ ТаблицаСторноВыручки.Количество() = 0 
		ИЛИ ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ ПлательщикНДС
		И НЕ УчетНДС.ВедетсяУчетНДСПоФЗ134(Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаНДС = Новый ТаблицаЗначений;
	ТаблицаНДС.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов("ДокументСсылка.ОтчетОРозничныхПродажах"));
	ТаблицаНДС.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаНДС.Колонки.Добавить("Организация", 	 Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНДС.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаНДС.Колонки.Добавить("СчетДоходов", 	 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНДС.Колонки.Добавить("СтавкаНДС", 	 Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаНДС.Колонки.Добавить("СчетУчетаНДС",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНДС.Колонки.Добавить("Содержание", 	 ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаНДС.Колонки.Добавить("Субконто", 	 Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаНДС.Колонки.Добавить("СуммаБезНДС", 	 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаНДС.Колонки.Добавить("НДС", 			 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для Каждого СтрокаСторноВыручки ИЗ ТаблицаСторноВыручки Цикл
		
		Если НЕ ПлательщикНДС Тогда
			Если СтрокаСторноВыручки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС
				ИЛИ СтрокаСторноВыручки.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		НоваяСтрокаНДС = ТаблицаНДС.Добавить();
		НоваяСтрокаНДС.СчетДоходов 	= СтрокаСторноВыручки.СчетДоходов;
		НоваяСтрокаНДС.СтавкаНДС 	= СтрокаСторноВыручки.СтавкаНДС;
		НоваяСтрокаНДС.СуммаБезНДС 	= СтрокаСторноВыручки.СуммаРуб - СтрокаСторноВыручки.СуммаНДСРуб;
		НоваяСтрокаНДС.НДС 			= СтрокаСторноВыручки.СуммаНДСРуб;
	КонецЦикла;
	
	ТаблицаНДС.Свернуть("ДокументОснование, Период, Организация, Подразделение, СчетДоходов, СтавкаНДС,
		|СчетУчетаНДС, Содержание, Субконто", "СуммаБезНДС, НДС");
	
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.Регистратор,					"ДокументОснование");
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.Период, 						"Период");
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.Организация, 				"Организация");
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.Подразделение, 				"Подразделение");
	ТаблицаНДС.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.Продажи_НДС, 	"СчетУчетаНДС");
	ТаблицаНДС.ЗаполнитьЗначения("Реализация товаров в розницу", 		"Содержание");
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.НоменклатурнаяГруппаВыручки, "Субконто");
	
	Возврат ТаблицаНДС;
	
КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений) Экспорт

	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		Если СтрокаТаблицы.ЭтоУслуга Тогда
			СтрокаТаблицы.Содержание = "Реализация услуг";
		Иначе
			СтрокаТаблицы.Содержание = "Реализация товаров";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

функция ПодготовитьСтруктруТаблицИП(ТаблицаВыручка, ТаблицаБезналичныеОплаты, ТаблицаРеквизиты, ТаблицаВыручкиЗаМесяц) Экспорт
	
	ТаблицаПрочихРасчетовИП = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	ТаблицаВзаиморасчетовИП = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетовИП.Колонки.Добавить("Контрагент",            Справочники.ТипВсеСсылки());
	ТаблицаВзаиморасчетовИП.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ТаблицаВзаиморасчетовИП.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаВзаиморасчетовИП.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	СтруктураВозврата = Новый Структура("ТаблицаПрочихРасчетовИП, ТаблицаВзаиморасчетовИП", ТаблицаПрочихРасчетовИП, ТаблицаВзаиморасчетовИП);
	
	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		
		СуммаДокумента = ?(ТаблицаВыручка = Неопределено, 0, ТаблицаВыручка.Итог("СуммаРуб"));
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Реквизиты.Период));
		Запрос.УстановитьПараметр("КонецПериода",  Реквизиты.Период);
		Запрос.УстановитьПараметр("Склад",         Реквизиты.Склад);
		Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
		Запрос.Текст = ТекстЗапросаПоДокументамОплатаПлатежнойКартой();
		
		Результат = Запрос.ВыполнитьПакет();
		
		ТаблицаДокументовОплатаПлатежнойКартой = Результат[1].Выгрузить();
		
		// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.ИсточникДанных = ТаблицаДокументовОплатаПлатежнойКартой;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент",         "Эквайер");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетУчета",          "СчетКасса");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДоговорКонтрагента", "ДоговорЭквайринга");
			
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Контрагент",  Реквизиты.Склад);
		
		Блокировка.Заблокировать();
		
		Контрагенты = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("Эквайер");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Контрагенты);
		
		ДоговорыКонтрагентов = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("ДоговорЭквайринга");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДоговорыКонтрагентов);
		
		СписокДокументовПоПлатежнымКартам = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("Ссылка");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовПоПлатежнымКартам);
		
		Запрос.УстановитьПараметр("Контрагенты",                       Контрагенты);
		Запрос.УстановитьПараметр("ДоговорыКонтрагентов",              ДоговорыКонтрагентов);
		Запрос.УстановитьПараметр("СписокДокументовПоПлатежнымКартам", СписокДокументовПоПлатежнымКартам);
		Запрос.УстановитьПараметр("ДатаОстатка", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
		Запрос.Текст = ТекстЗапросаДляСтруктурыТаблицИП();
		
		ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
		
		ТаблицаНеоплаченнойБезналичнойВыручки = ТаблицаРезультатаЗапроса.Скопировать(Новый Структура("ВзаиморасчетыИП", Ложь));
		
		СуммаБезналичнойВыручки = ТаблицаНеоплаченнойБезналичнойВыручки.Итог("СуммаРуб");
		СуммаНаличнойВыручки    = Макс(?(ТаблицаВыручка = Неопределено, 0, ТаблицаВыручка.Итог("СуммаРуб")) - СуммаБезналичнойВыручки, 0);
		
		Если СуммаНаличнойВыручки > 0 Тогда
			
			Для Каждого СтрокаРезультата Из ТаблицаРезультатаЗапроса Цикл
				
				Если Не СтрокаРезультата.ВзаиморасчетыИП Или СтрокаРезультата.СуммаРуб = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаРуб = Мин(СуммаНаличнойВыручки, СтрокаРезультата.СуммаРуб);
				
				Платеж = ТаблицаВзаиморасчетовИП.Добавить();
				ЗаполнитьЗначенияСвойств(Платеж, СтрокаРезультата);
				Платеж.СуммаРуб =  СуммаРуб;
				
				СуммаНаличнойВыручки =  СуммаНаличнойВыручки - СуммаРуб;
				Если СуммаНаличнойВыручки = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СуммаБезналичнойВыручки > 0 Тогда
			
			ТаблицаНеоплаченнойБезналичнойВыручки.Колонки["ДокументРасчетов"].Имя = "РасчетныйДокумент";
			ТаблицаНеоплаченнойБезналичнойВыручки.Колонки["СуммаРуб"].Имя         = "СуммаОстаток";
			
			СтруктураВозврата.ТаблицаПрочихРасчетовИП = ПодготовитьТаблицуПрочихРасчетов(
				Реквизиты, СуммаДокумента, ТаблицаНеоплаченнойБезналичнойВыручки, ТаблицаВыручкиЗаМесяц, ТаблицаПрочихРасчетовИП);
			
		КонецЕсли;
		
	Иначе
		
		СуммаБезналичнойВыручки = ?(ТаблицаБезналичныеОплаты = Неопределено, 0, ТаблицаБезналичныеОплаты.Итог("СуммаРуб"));
		СуммаНаличнойВыручки    = Макс(?(ТаблицаВыручка = Неопределено, 0, ТаблицаВыручка.Итог("СуммаРуб")) - СуммаБезналичнойВыручки, 0);
		
		Если СуммаНаличнойВыручки > 0 Тогда
			Платеж = ТаблицаВзаиморасчетовИП.Добавить();
			Платеж.Контрагент            = Реквизиты.Склад;
			Платеж.ДокументРасчетов      = Реквизиты.Регистратор;
			Платеж.ДатаДокументаРасчетов = Реквизиты.Период;
			Платеж.СуммаРуб              = СуммаНаличнойВыручки;
		КонецЕсли;
		
		Если СуммаБезналичнойВыручки > 0 Тогда
			
			Для Каждого СтрокаТаблицы Из ТаблицаБезналичныеОплаты Цикл
				
				НоваяСтрока = ТаблицаПрочихРасчетовИП.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				НоваяСтрока.ВидДвижения       = ВидДвиженияНакопления.Приход;
				НоваяСтрока.РасчетныйДокумент = Реквизиты.Регистратор;
				НоваяСтрока.Сумма             = СтрокаТаблицы.СуммаРуб;
				НоваяСтрока.СчетУчета         = СтрокаТаблицы.СчетУчетаРасчетов;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураВозврата.ТаблицаВзаиморасчетовИП = ТаблицаВзаиморасчетовИП;
	СтруктураВозврата.ТаблицаПрочихРасчетовИП = ТаблицаПрочихРасчетовИП;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ТекстЗапросаДляСтруктурыТаблицИП()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ТаблицаПрочихРасчетовПоПлатежнымКартам
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Контрагент В (&Контрагенты)
	|				И ДоговорКонтрагента В (&ДоговорыКонтрагентов)
	|				И РасчетныйДокумент В (&СписокДокументовПоПлатежнымКартам)) КАК ПрочиеРасчетыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ВзаиморасчетыИП,
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	NULL КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток,
	|	NULL КАК СчетУчета
	|ПОМЕСТИТЬ ВТПрочиеРасчетыОстатки
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Контрагент = &Склад) КАК ПрочиеРасчетыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.Организация,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.Контрагент,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.РасчетныйДокумент,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.ДоговорКонтрагента,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.СуммаОстаток,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.СчетУчета
	|ИЗ
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам КАК ТаблицаПрочихРасчетовПоПлатежнымКартам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПрочиеРасчетыОстатки.ВзаиморасчетыИП,
	|	ВТПрочиеРасчетыОстатки.Организация,
	|	ВТПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ВТПрочиеРасчетыОстатки.РасчетныйДокумент КАК ДокументРасчетов,
	|	РеквизитыДокументовРасчетов.Дата КАК ДатаПервичногоДокумента,
	|	РеквизитыДокументовРасчетов.ДатаРегистратора КАК ДатаДокументаРасчетов,
	|	ВТПрочиеРасчетыОстатки.ДоговорКонтрагента,
	|	ВТПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаРуб,
	|	ВТПрочиеРасчетыОстатки.СчетУчета
	|ИЗ
	|	ВТПрочиеРасчетыОстатки КАК ВТПрочиеРасчетыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО ВТПрочиеРасчетыОстатки.Организация = РеквизитыДокументовРасчетов.Организация
	|			И ВТПрочиеРасчетыОстатки.РасчетныйДокумент = РеквизитыДокументовРасчетов.Документ
	|ГДЕ
	|	РеквизитыДокументовРасчетов.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПервичногоДокумента";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Процедура СформироватьДвиженияПоСчетамУСН(ТаблицаРеквизиты, ТаблицаВыручки, ТаблицаПоПрочимРасчетам, Движения, Отказ) Экспорт
	
	Перем СуммаОплатыНаличными;
	
	Если ТаблицаПоПрочимРасчетам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаВыручки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуммаОплатыНаличными = ТаблицаВыручки.Итог("СуммаРуб");
	
	Реквизиты = ТаблицаРеквизиты[0];
	Организация                     = Реквизиты.Организация;
	Период                          = Реквизиты.Период;
	Регистратор                     = Реквизиты.Регистратор;
	Подразделение                   = Реквизиты.Подразделение;
	УчитыватьЗадолженностьУСН       = Реквизиты.УчитыватьЗадолженностьУСН;
	УчитыватьЗадолженностьУСНПатент = Реквизиты.УчитыватьЗадолженностьУСНПатент;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
	
	СвойстваСчетаРасчетыСКомитентомУСН =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент);
	
	СвойстваСчетаРасчетыПатентУСН =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент);
	
	СвойстваСчетаРасчетыЕНВДУСН =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД);
	
	Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		
		Отбор = Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход);
		
		ТаблицаТолькоРасходаПоПрочимРасчетам = ТаблицаПоПрочимРасчетам.Скопировать(Отбор); 
		
		СуммаПодлежащаяПоследующейОплате = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("Сумма");
		
		Если ТаблицаТолькоРасходаПоПрочимРасчетам.Количество() > 0 Тогда
			
			ВсегоКомитенту = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("СуммаРубКомитент");
			ВсегоЕНВД      = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("СуммаРубЕНВД");
			ВсегоПатент    = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("СуммаРубПатент");
			
			Если (СуммаПодлежащаяПоследующейОплате - ВсегоКомитенту - ВсегоЕНВД - ВсегоПатент) > 0 Тогда
			
				СтрокаТаблицы = ТаблицаТолькоРасходаПоПрочимРасчетам[0];
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СуммаПодлежащаяПоследующейОплате - ВсегоКомитенту - ВсегоЕНВД - ВсегоПатент;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Для Каждого СтрокаТаблицы Из ТаблицаТолькоРасходаПоПрочимРасчетам Цикл
			
			Если СтрокаТаблицы.СуммаРубКомитент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СтрокаТаблицы.СуммаРубКомитент;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				
				Проводка.СубконтоКт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоКт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.РасчетныйДокумент;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаРубЕНВД <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СтрокаТаблицы.СуммаРубЕНВД;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				
				Проводка.СубконтоКт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоКт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.РасчетныйДокумент;
				Если СвойстваСчетаРасчетыЕНВДУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаРубПатент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на патенте";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СтрокаТаблицы.СуммаРубПатент;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				
				Проводка.СубконтоКт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоКт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.РасчетныйДокумент;
				Если СвойстваСчетаРасчетыПатентУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Отбор = Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход);
		
		ТаблицаБезналичнойОплаты = ТаблицаПоПрочимРасчетам.Скопировать(Отбор);
		
		СуммаБезналичнойОплаты = ТаблицаБезналичнойОплаты.Итог("Сумма");
		
		УчитыватьЗадолженностьУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, Период);
		
		Если УчитыватьЗадолженностьУСН Тогда
			КоэффициентБезналичнойОплаты = ?(СуммаОплатыНаличными = 0, 0, СуммаБезналичнойОплаты / СуммаОплатыНаличными);
			ТаблицаБезналичнойОплаты.Колонки.Добавить("СуммаРубЕНВДДебет",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			ТаблицаБезналичнойОплаты.Колонки.Добавить("СуммаРубКомитентДебет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				Окр(ТаблицаВыручки.Итог("СуммаРубЕНВД") * КоэффициентБезналичнойОплаты, 2),
				ТаблицаБезналичнойОплаты,
				"СуммаРубЕНВДДебет",
				"Сумма");
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				Окр(ТаблицаВыручки.Итог("СуммаРубКомитента") * КоэффициентБезналичнойОплаты, 2),
				ТаблицаБезналичнойОплаты,
				"СуммаРубКомитентДебет",
				"Сумма");
		КонецЕсли;
		Если УчитыватьЗадолженностьУСНПатент Тогда
			КоэффициентБезналичнойОплаты = ?(СуммаОплатыНаличными = 0, 0, СуммаБезналичнойОплаты / СуммаОплатыНаличными);
			ТаблицаБезналичнойОплаты.Колонки.Добавить("СуммаРубПатентДебет",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				Окр(ТаблицаВыручки.Итог("СуммаРубПатент") * КоэффициентБезналичнойОплаты, 2),
				ТаблицаБезналичнойОплаты,
				"СуммаРубПатентДебет",
				"Сумма");
		КонецЕсли;
		
		Для каждого СтрокаБезналичнойОплаты Из ТаблицаБезналичнойОплаты Цикл
			
			// Проводка Кт УСН.01
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубЕНВД <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности ЕНВД";
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"ДокументыРасчетовСКонтрагентами", СтрокаБезналичнойОплаты.РасчетныйДокумент);
				
				Если СвойстваСчетаРасчетыЕНВДУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубЕНВД;
				
			КонецЕсли;
			
			// Проводка Дт УСН.01
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубЕНВДДебет <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности ЕНВД";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"ДокументыРасчетовСКонтрагентами", Регистратор);
				
				Если СвойстваСчетаРасчетыЕНВДУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубЕНВДДебет;
				
			КонецЕсли;
			
			// Проводка Кт УСН.02
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубКомитент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"ДокументыРасчетовСКонтрагентами", СтрокаБезналичнойОплаты.РасчетныйДокумент);
				
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубКомитент;
				
			КонецЕсли;
			
			// Проводка Дт УСН.02
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубКомитентДебет <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"ДокументыРасчетовСКонтрагентами", Регистратор);
				
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубКомитентДебет;
				
			КонецЕсли;
			
			// Проводка Кт УСН.03
			Если УчитыватьЗадолженностьУСНПатент И СтрокаБезналичнойОплаты.СуммаРубПатент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на патенте";
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"ДокументыРасчетовСКонтрагентами", СтрокаБезналичнойОплаты.РасчетныйДокумент);
				
				Если СвойстваСчетаРасчетыПатентУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубПатент;
				
			КонецЕсли;
			
			// Проводка Дт УСН.03
			Если УчитыватьЗадолженностьУСНПатент И СтрокаБезналичнойОплаты.СуммаРубПатентДебет <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на патенте";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"ДокументыРасчетовСКонтрагентами", Регистратор);
				
				Если СвойстваСчетаРасчетыПатентУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубПатентДебет;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры	

Функция ПодготовитьСтруктуруТаблицБезналичнойВыручки(ТаблицаРеквизиты, ТаблицаВыручкиЗаМесяц, Отказ) Экспорт
	
	Перем ТаблицаПрочихРасчетов, ТаблицаНеоплаченнойБезналичнойВыручки;
	
	ТаблицаПрочихРасчетовУСН = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	СтруктураВозврата = Новый Структура("ТаблицаПрочихРасчетовУСН, ТаблицаНеоплаченнойБезналичнойВыручки",
										ТаблицаПрочихРасчетовУСН, ТаблицаНеоплаченнойБезналичнойВыручки);
	
	Если ТаблицаРеквизиты = Неопределено
		ИЛИ ТаблицаРеквизиты.Количество() = 0 
		ИЛИ ТаблицаВыручкиЗаМесяц = Неопределено Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;	
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ Реквизиты.ПрименяетсяУСН Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Организация		= Реквизиты.Организация;
	Период			= Реквизиты.Период;
	Регистратор		= Реквизиты.Регистратор;
	Подразделение	= Реквизиты.Подразделение;
	
	СуммаДокумента = Реквизиты.СуммаОплатыНаличными;
	
	ГраницаОстатка = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
	
	СписокСчетовУСН = Новый Массив;
	
	СписокСчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД);
	СписокСчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент);
	СписокСчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент);
	СписокСчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД);
	СписокСчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент);
	СписокСчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Склад", Реквизиты.Склад);
	Запрос.Текст = ТекстЗапросаПоДокументамОплатаПлатежнойКартой();
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДокументовОплатаПлатежнойКартой = Результат[1].Выгрузить();
	
	// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
	СтруктураПараметров	= Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПрочиеРасчеты");
	
	ЗначенияБлокировки	= Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период",		Новый Диапазон(, Реквизиты.Период)); 
	ЗначенияБлокировки.Вставить("Организация",	Реквизиты.Организация);
	
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("Контрагент",			"Эквайер");
	ОписаниеИсточника.Вставить("ДоговорКонтрагента",	"ДоговорЭквайринга");
	ОписаниеИсточника.Вставить("СчетУчета",				"СчетКасса");
	
	СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаДокументовОплатаПлатежнойКартой);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	
	Блокировка = Новый БлокировкаДанных;
	
	// Дополнительные блокировки по вспомогательным счетам задолженности УСН
	ВыборкаСчетовУСН = ПланыСчетов.Хозрасчетный.Выбрать(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета);
	Пока ВыборкаСчетовУСН.Следующий() Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Период",		Новый Диапазон(, Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировки.УстановитьЗначение("Счет",		ВыборкаСчетовУСН.Ссылка);
		ЭлементБлокировки.ИсточникДанных = ТаблицаДокументовОплатаПлатежнойКартой;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Эквайер");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ДоговорЭквайринга");
	КонецЦикла;
		
	Блокировка.Заблокировать();
	
	Контрагенты = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("Эквайер");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Контрагенты);
	
	ДоговорыКонтрагентов = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("ДоговорЭквайринга");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДоговорыКонтрагентов);
	
	СписокДокументовПоПлатежнымКартам = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("Ссылка");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовПоПлатежнымКартам);
	
	Запрос.УстановитьПараметр("ДатаОстатка", ГраницаОстатка);
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.УстановитьПараметр("ДоговорыКонтрагентов", ДоговорыКонтрагентов);
	Запрос.УстановитьПараметр("СписокДокументовПоПлатежнымКартам", СписокДокументовПоПлатежнымКартам);
	Запрос.УстановитьПараметр("СписокСчетовУСН", СписокСчетовУСН);
	
	ВидыСубконто = Новый Массив;
	
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст = ТекстЗапросаДляСтруктурыТаблицУСН();
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНеоплаченнойБезналичнойВыручки	= РезультатЗапроса[1].Выгрузить();
	ОстаткиПоСчетамУСН						= РезультатЗапроса[2].Выгрузить();
	
	Если ТаблицаНеоплаченнойБезналичнойВыручки.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТаблицаПрочихРасчетовУСН.Колонки.Добавить("СуммаРубЕНВД",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПрочихРасчетовУСН.Колонки.Добавить("СуммаРубКомитент",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПрочихРасчетовУСН.Колонки.Добавить("СуммаРубПатент",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
		
	СтруктураВозврата.ТаблицаНеоплаченнойБезналичнойВыручки = ТаблицаНеоплаченнойБезналичнойВыручки;
	СтруктураВозврата.ТаблицаПрочихРасчетовУСН = ПодготовитьТаблицуПрочихРасчетов(
													Реквизиты,
													СуммаДокумента,
													ТаблицаНеоплаченнойБезналичнойВыручки, 
													ТаблицаВыручкиЗаМесяц, 
													ТаблицаПрочихРасчетовУСН, 
													ОстаткиПоСчетамУСН);
		
	Возврат СтруктураВозврата;
	
КонецФункции

функция ТекстЗапросаПоДокументамОплатаПлатежнойКартой()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОплатаПлатежнойКартой.Ссылка КАК Ссылка,
	|	ОплатаПлатежнойКартой.Эквайер КАК Эквайер,
	|	ОплатаПлатежнойКартой.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	ОплатаПлатежнойКартой.СчетКасса
	|ПОМЕСТИТЬ ТаблицаДокументовОплатаПлатежнойКартой
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|ГДЕ
	|	ОплатаПлатежнойКартой.Организация = &Организация
	|	И ОплатаПлатежнойКартой.Контрагент = &Склад
	|	И ОплатаПлатежнойКартой.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)
	|	И ОплатаПлатежнойКартой.Дата >= &НачалоПериода
	|	И ОплатаПлатежнойКартой.Дата <= &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументовОплатаПлатежнойКартой.Ссылка,
	|	ТаблицаДокументовОплатаПлатежнойКартой.Эквайер,
	|	ТаблицаДокументовОплатаПлатежнойКартой.ДоговорЭквайринга,
	|	ТаблицаДокументовОплатаПлатежнойКартой.СчетКасса
	|ИЗ
	|	ТаблицаДокументовОплатаПлатежнойКартой КАК ТаблицаДокументовОплатаПлатежнойКартой";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаДляСтруктурыТаблицУСН()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ВТОстаткиПрочихРасчетов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И Контрагент В (&Контрагенты)
	|				И ДоговорКонтрагента В (&ДоговорыКонтрагентов)
	|				И РасчетныйДокумент В (&СписокДокументовПоПлатежнымКартам)) КАК ПрочиеРасчетыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстаткиПрочихРасчетов.Контрагент,
	|	ВТОстаткиПрочихРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВТОстаткиПрочихРасчетов.ДоговорКонтрагента,
	|	ВТОстаткиПрочихРасчетов.СуммаОстаток,
	|	ВТОстаткиПрочихРасчетов.СчетУчета,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервичногоДокумента
	|ИЗ
	|	ВТОстаткиПрочихРасчетов КАК ВТОстаткиПрочихРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТОстаткиПрочихРасчетов.РасчетныйДокумент = ДанныеПервичныхДокументов.Документ
	|			И ВТОстаткиПрочихРасчетов.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПервичногоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
	|	ХозрасчетныйОстатки.Субконто3 КАК РасчетныйДокумент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовКомитент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент)
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовПатент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД)
	|					ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБУ_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент)
	|					ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБУ_Комитент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент)
	|					ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБУ_Патент
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатка,
	|			Счет В (&СписокСчетовУСН),
	|			&ВидыСубконто,
	|			Субконто1 В (&Контрагенты)
	|				И Субконто2 В (&ДоговорыКонтрагентов)
	|				И Субконто3 В (&СписокДокументовПоПлатежнымКартам)
	|				И Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйДокумент";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПодготовитьТаблицуПрочихРасчетов(Реквизиты, СуммаДокумента, ТаблицаНеоплаченнойБезналичнойВыручки, ТаблицаВыручкиЗаМесяц, ТаблицаПрочихРасчетов, ОстаткиПоСчетамУСН = Неопределено)
	
	Регистратор = Реквизиты.Регистратор;
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("НаличнаяВыручка", Ложь);
	
	ТаблицаБезналичнойВыручки = ТаблицаВыручкиЗаМесяц.Скопировать(Отбор);
	
	СуммаВыручкиВсегоБезналичная = ТаблицаБезналичнойВыручки.Итог("СуммаРуб");
	
	СуммаНеоплаченнойВыручки = ТаблицаНеоплаченнойБезналичнойВыручки.Итог("СуммаОстаток");
	
	СуммаОплаченнойВыручки = СуммаВыручкиВсегоБезналичная - СуммаНеоплаченнойВыручки;
	
	СуммаПодлежащаяПроведениюПоПрочимРасчетам	= Мин(СуммаДокумента, СуммаВыручкиВсегоБезналичная - СуммаОплаченнойВыручки);
	СуммаДляОтраженияВОплаченнойВыручке			= Макс(СуммаДокумента - СуммаПодлежащаяПроведениюПоПрочимРасчетам, 0);
	
	ЕстьОстаткиПоСчетамУСН = НЕ ОстаткиПоСчетамУСН = Неопределено;
	
	Если ЕстьОстаткиПоСчетамУСН Тогда
		ОстаткиПоСчетамУСН.Индексы.Добавить("РасчетныйДокумент");
	КонецЕсли;	
	
	Если СуммаПодлежащаяПроведениюПоПрочимРасчетам > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаНеоплаченнойБезналичнойВыручки Цикл
			
			СуммаДвижения = Мин(СтрокаТаблицы.СуммаОстаток, СуммаПодлежащаяПроведениюПоПрочимРасчетам);
			
			НоваяСтрока = ТаблицаПрочихРасчетов.Добавить();
			
			//Свойства
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			//Измерения и ресурсы
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Сумма = СуммаДвижения;
			
			Если ЕстьОстаткиПоСчетамУСН Тогда
			
				СтрокаПоСчетамУСН = ОстаткиПоСчетамУСН.Найти(СтрокаТаблицы.РасчетныйДокумент, "РасчетныйДокумент");
				
				Если НЕ СтрокаПоСчетамУСН = Неопределено Тогда
					
					СуммаБУ_УСН = СтрокаПоСчетамУСН.СуммаБУ_ЕНВД
								+ СтрокаПоСчетамУСН.СуммаБУ_Комитент
								+ СтрокаПоСчетамУСН.СуммаБУ_Патент;
					
					КоэффициентБУ_ЕНВД		= ?(СуммаБУ_УСН = 0, 0,
													СтрокаПоСчетамУСН.СуммаБУ_ЕНВД/СуммаБУ_УСН);
					
					КоэффициентБУ_Комитента = ?(СуммаБУ_УСН = 0, 0,
													СтрокаПоСчетамУСН.СуммаБУ_Комитент/СуммаБУ_УСН);
					
					КоэффициентБУ_Патент	= ?(СуммаБУ_УСН = 0, 0,
													СтрокаПоСчетамУСН.СуммаБУ_Патент/СуммаБУ_УСН);
													
					НоваяСтрока.СуммаРубЕНВД		= Мин(СтрокаПоСчетамУСН.СуммаБУ_ЕНВД,
															СуммаДвижения)*КоэффициентБУ_ЕНВД;
					НоваяСтрока.СуммаРубКомитент	= Мин(СтрокаПоСчетамУСН.СуммаБУ_Комитент,
															СуммаДвижения)*КоэффициентБУ_Комитента;
					НоваяСтрока.СуммаРубПатент		= Мин(СтрокаПоСчетамУСН.СуммаБУ_Патент,
															СуммаДвижения)*КоэффициентБУ_Патент;
					
				КонецЕсли;
				
			КонецЕсли;	
			
			НоваяСтрока = ТаблицаПрочихРасчетов.Добавить();
			
			//Свойства
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			//Измерения и ресурсы
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.РасчетныйДокумент = Регистратор;
			
			НоваяСтрока.Сумма = СуммаДвижения;
			
			СуммаПодлежащаяПроведениюПоПрочимРасчетам = СуммаПодлежащаяПроведениюПоПрочимРасчетам - СуммаДвижения;
			
			Если СуммаПодлежащаяПроведениюПоПрочимРасчетам <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаПрочихРасчетов;
	
КонецФункции	

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;

	Реквизиты.Вставить("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Реквизиты.Вставить("РасчетыВВалюте",  Реквизиты.ВалютаДокумента <> Реквизиты.ВалютаРеглУчета);

	Если Реквизиты.РасчетыВВалюте Тогда
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
		КоэффициентРуб = СтруктураКурсаВзаиморасчетов.Курс / СтруктураКурсаВзаиморасчетов.Кратность;
		Реквизиты.Вставить("КурсВзаиморасчетов", 		СтруктураКурсаВзаиморасчетов.Курс);
		Реквизиты.Вставить("КратностьВзаиморасчетов",	СтруктураКурсаВзаиморасчетов.Кратность);
	Иначе
		КоэффициентРуб = 1;
		Реквизиты.Вставить("КурсВзаиморасчетов", 		1);
		Реквизиты.Вставить("КратностьВзаиморасчетов",	1);
	КонецЕсли;

	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	Запрос.УстановитьПараметр("КоэффициентРуб",  КоэффициентРуб);

	Реквизиты.Вставить("ПрименяетсяУСН",
		УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСНПатент", 
		УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПлательщикНДС", 
		УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ВедетсяУчетНДСПоФЗ134", УчетНДС.ВедетсяУчетНДСПоФЗ134(Реквизиты.Период));
	Реквизиты.Вставить("РозничнаяТорговляОблагаетсяЕНВД", 
		УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ДеятельностьНаПатенте", 			 Реквизиты.ДеятельностьНаПатенте);
	Запрос.УстановитьПараметр("РозничнаяТорговляОблагаетсяЕНВД", Реквизиты.РозничнаяТорговляОблагаетсяЕНВД);
	
	ТаблицаРеквизиты[0].УчитыватьЗадолженностьУСН 		= Реквизиты.ПрименяетсяУСН;
	ТаблицаРеквизиты[0].УчитыватьЗадолженностьУСНПатент = Реквизиты.ПрименяетсяУСНПатент;
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Запрос.УстановитьПараметр("СинонимТовары",   НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Склад", 		 	 Реквизиты.Склад);
	Запрос.УстановитьПараметр("ЕстьОплатаПлатежнойКартойАТТ",	     Реквизиты.ЕстьОплатаПлатежнойКартойАТТ);
	Запрос.УстановитьПараметр("Счета9102",		 БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы));
	
	Запрос.УстановитьПараметр("ПрименяетсяУСНПатент", Реквизиты.ПрименяетсяУСНПатент);
	Запрос.УстановитьПараметр("ПрименяетсяУСН",		  Реквизиты.ПрименяетсяУСН);

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	Реквизиты.Вставить("УчетПоПродажнойСтоимости", 			
		СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	ЕстьОплатаПлатежнойКартойНТТ    = ЕстьОплатаПлатежнойКартойНТТ(Реквизиты);
	Запрос.УстановитьПараметр("УчетПоПродажнойСтоимости", Реквизиты.УчетПоПродажнойСтоимости);
	Запрос.УстановитьПараметр("ЕстьОплатаПлатежнойКартойНТТ", ЕстьОплатаПлатежнойКартойНТТ);
	
	НомераТаблиц = Новый Структура;
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц);
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРеализацияУслуг(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПереоценкаТоваровВРознице(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаТоварыНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРаспределениеВыручки(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаБезналичнаяОплата(НомераТаблиц, ПараметрыПроведения, Реквизиты);

	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого КлючИЗначение Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(КлючИЗначение.Ключ, Результат[КлючИЗначение.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;

	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", 		 НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", 						 НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьАгентскиеУслуги) КАК ЕстьАгентскиеУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьОплатаПлатежнойКартойАТТ) КАК ЕстьОплатаПлатежнойКартойАТТ
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьАгентскиеУслуги,
	|		ЛОЖЬ КАК ЕстьОплатаПлатежнойКартойАТТ
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Оплата КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.Склад,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.Склад.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаВыручки,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Патент,
	|	Реквизиты.ДеятельностьНаПатенте,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СчетКасса,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.Склад,
	|	Реквизиты.ТипСклада,
	|	Реквизиты.НоменклатурнаяГруппаВыручки,
	|	Реквизиты.Ссылка,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Патент,
	|	Реквизиты.ДеятельностьНаПатенте,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СчетКасса,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств,
	|	""Реализация"" КАК ТипСписания,
	|	Реквизиты.Ссылка КАК ДокументРеализации,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	ВЫРАЗИТЬ(""Реализация товаров в розницу"" КАК СТРОКА(150)) КАК Содержание,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьАгентскиеУслуги, ЛОЖЬ) КАК ЕстьАгентскиеУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьОплатаПлатежнойКартойАТТ, ЛОЖЬ) КАК ЕстьОплатаПлатежнойКартойАТТ
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары",          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаАгентскиеУслуги", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаОплата", 		 НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.Услуга, ЛОЖЬ) КАК ЭтоУслуга,
	|	ТаблицаТовары.Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаТовары.Сумма
	|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаТовары.Сумма
	|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаРуб,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДСРуб,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.СчетУчета,
	|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	ТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ТаблицаТовары.СчетДоходов,
	|	ВЫБОР
	|		КОГДА СчетаЕНВД.Счет ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЕНВД,
	|	ТаблицаТовары.СчетРасходов,
	|	ТаблицаТовары.Субконто,
	|	ТаблицаТовары.ДокументОприходования,
	|	ТаблицаТовары.Себестоимость
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаЕНВД
	|		ПО ТаблицаТовары.СчетДоходов = СчетаЕНВД.Счет
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАгентскиеУслуги.Ссылка,
	|	ТаблицаАгентскиеУслуги.НомерСтроки,
	|	ТаблицаАгентскиеУслуги.Номенклатура,
	|	ТаблицаАгентскиеУслуги.Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаАгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаАгентскиеУслуги.Сумма
	|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма + ТаблицаАгентскиеУслуги.СуммаНДС
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаАгентскиеУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаАгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаАгентскиеУслуги.Сумма
	|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма + ТаблицаАгентскиеУслуги.СуммаНДС
	|	КОНЕЦ КАК СуммаРуб,
	|	ТаблицаАгентскиеУслуги.СуммаНДС КАК СуммаНДСРуб,
	|	ТаблицаАгентскиеУслуги.СтавкаНДС,
	|	ТаблицаАгентскиеУслуги.Контрагент,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаАгентскиеУслуги.СчетРасчетов
	|ПОМЕСТИТЬ ТаблицаАгентскиеУслуги
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
	|ГДЕ
	|	ТаблицаАгентскиеУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплата.Ссылка,
	|	ТаблицаОплата.НомерСтроки,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплата.Контрагент,
	|	ТаблицаОплата.ДоговорКонтрагента,
	|	ТаблицаОплата.СчетУчетаРасчетов,
	|	ТаблицаОплата.СуммаОплаты,
	|	ВЫРАЗИТЬ(ТаблицаОплата.СуммаОплаты * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаОплатыРуб
	|ПОМЕСТИТЬ ТаблицаОплата
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка = &Ссылка
	|	И (ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта)
	|			ИЛИ ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.БанковскийКредит))";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Результат    = Запрос.ВыполнитьПакет();
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары();
	КонецЕсли;
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		СуммыТаблицыАгентскиеУслуги = Результат[НомераТаблиц["СуммыТаблицыАгентскиеУслуги"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыАгентскиеУслуги, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыАгентскиеУслуги", СуммыТаблицыАгентскиеУслуги);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеАгентскиеУслуги();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		Запрос.Текст = ТекстЗапроса;
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаРуб,
		|	ВременнаяТаблицаТовары.СуммаНДСРуб
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаАгентскиеУслуги", "ПОМЕСТИТЬ ВременнаяТаблицаАгентскиеУслуги");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаАгентскиеУслуги.Ссылка = &Ссылка", "ТаблицаАгентскиеУслуги.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыАгентскиеУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаАгентскиеУслуги.НомерСтроки,
		|	ВременнаяТаблицаАгентскиеУслуги.СтавкаНДС,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаРуб,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаНДСРуб
		|ИЗ
		|	ВременнаяТаблицаАгентскиеУслуги КАК ВременнаяТаблицаАгентскиеУслуги"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТовары()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.ЭтоУслуга,
	|	ВременнаяТаблицаТовары.Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.НомерГТД,
	|	ВременнаяТаблицаТовары.СтранаПроисхождения,
	|	ВременнаяТаблицаТовары.СчетУчета,
	|	ВременнаяТаблицаТовары.ЭтоКомиссия,
	|	ВременнаяТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ВременнаяТаблицаТовары.СчетДоходов,
	|	ВременнаяТаблицаТовары.ЭтоЕНВД,
	|	ВременнаяТаблицаТовары.СчетРасходов,
	|	ВременнаяТаблицаТовары.Субконто,
	|	ВременнаяТаблицаТовары.ДокументОприходования,
	|	ВременнаяТаблицаТовары.Себестоимость
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеАгентскиеУслуги()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыАгентскиеУслуги.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыАгентскиеУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаРуб,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыАгентскиеУслуги
	|ИЗ
	|	&СуммыТаблицыАгентскиеУслуги КАК СуммыТаблицыАгентскиеУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаАгентскиеУслуги.Ссылка,
	|	ВременнаяТаблицаАгентскиеУслуги.НомерСтроки,
	|	ВременнаяТаблицаАгентскиеУслуги.Номенклатура,
	|	ВременнаяТаблицаАгентскиеУслуги.Количество,
	|	СуммыТаблицыАгентскиеУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаРуб,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСРуб,
	|	ВременнаяТаблицаАгентскиеУслуги.СтавкаНДС,
	|	ВременнаяТаблицаАгентскиеУслуги.Контрагент,
	|	ВременнаяТаблицаАгентскиеУслуги.ДоговорКонтрагента,
	|	ВременнаяТаблицаАгентскиеУслуги.ВалютаВзаиморасчетов,
	|	ВременнаяТаблицаАгентскиеУслуги.СчетРасчетов
	|ПОМЕСТИТЬ ТаблицаАгентскиеУслуги
	|ИЗ
	|	ВременнаяТаблицаАгентскиеУслуги КАК ВременнаяТаблицаАгентскиеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыАгентскиеУслуги КАК СуммыТаблицыАгентскиеУслуги
	|		ПО ВременнаяТаблицаАгентскиеУслуги.НомерСтроки = СуммыТаблицыАгентскиеУслуги.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("Товары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	// Товары для списания партий
	НомераТаблиц.Вставить("Товары", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаТовары.ДокументОприходования КАК ДокументОприходования,
	|	ТаблицаТовары.Себестоимость,
	|	ТаблицаТовары.Количество,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	ТаблицаТовары.СчетРасходов КАК КорСчетСписания,
	|	ТаблицаТовары.Субконто КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	1 КАК ВидКорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаТовары.ЭтоУслуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции
 
Функция ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьАгентскиеУслуги Тогда
		ПараметрыПроведения.Вставить("Реализация", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("Реализация", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	ТаблицаТовары.СуммаРуб КАК СуммаРуб,
	|	ТаблицаТовары.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ТаблицаТовары.СуммаРуб КАК СуммаБУ,
	|	ТаблицаТовары.СуммаРуб КАК СуммаНУ,
	|	ТаблицаТовары.СчетДоходов КАК СчетДоходов,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ЭтоУслуга
	|			ТОГДА ТаблицаТовары.СчетРасходов
	|		ИНАЧЕ ТаблицаТовары.СчетУчета
	|	КОНЕЦ КАК СчетУчета,
	|	ТаблицаТовары.Субконто КАК Субконто,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Покупатель,
	|	ВЫБОР
	|		КОГДА &ЕстьОплатаПлатежнойКартойАТТ ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
	|		ИНАЧЕ Реквизиты.СчетКасса
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА &ЕстьОплатаПлатежнойКартойАТТ ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА Реквизиты.Склад
	|		ИНАЧЕ Реквизиты.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ТаблицаТовары.ЭтоКомиссия КАК ЭтоКомиссия,
	|	ТаблицаТовары.ЭтоУслуга КАК ЭтоУслуга,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	Реквизиты.Ссылка КАК ДокументРасчетовСКомитентом,
	|	Реквизиты.Дата КАК ДатаРеализации,
	|	НЕОПРЕДЕЛЕНО КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК СчетАвансовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	0 КАК СуммаПоступленияОтКомитента
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""АгентскиеУслуги"",
	|	ТаблицаАгентскиеУслуги.НомерСтроки,
	|	ТаблицаАгентскиеУслуги.Номенклатура,
	|	ТаблицаАгентскиеУслуги.Количество,
	|	ТаблицаАгентскиеУслуги.СуммаВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	ТаблицаАгентскиеУслуги.СуммаРуб,
	|	ТаблицаАгентскиеУслуги.СуммаНДСРуб,
	|	ТаблицаАгентскиеУслуги.СуммаРуб,
	|	ТаблицаАгентскиеУслуги.СуммаРуб,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаАгентскиеУслуги.СтавкаНДС,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	Реквизиты.ПодразделениеОрганизации,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА &ЕстьОплатаПлатежнойКартойАТТ ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
	|		ИНАЧЕ Реквизиты.СчетКасса
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ЕстьОплатаПлатежнойКартойАТТ ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА Реквизиты.Склад
	|		ИНАЧЕ Реквизиты.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ИСТИНА,
	|	ИСТИНА,
	|	ТаблицаАгентскиеУслуги.Контрагент,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента,
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	ТаблицаАгентскиеУслуги.СчетРасчетов,
	|	ТаблицаАгентскиеУслуги.СчетРасчетов,
	|	ТаблицаАгентскиеУслуги.ВалютаВзаиморасчетов,
	|	0,
	|	0
	|ИЗ
	|	ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРеализацияУслуг(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("ТаблицаРеализацияУслуг", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаРеализацияУслуг", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаУслуги.СчетРасходов КАК СчетРасходов,
	|	ТаблицаУслуги.Субконто КАК НоменклатурнаяГруппа,
	|	СУММА(ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаНДСРуб) КАК Сумма
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаУслуги
	|ГДЕ
	|	ТаблицаУслуги.ЭтоУслуга
	|	И НЕ ТаблицаУслуги.СчетРасходов В (&Счета9102)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.СчетРасходов,
	|	ТаблицаУслуги.Субконто";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	

Функция ТекстЗапросаПереоценкаТоваровВРознице(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары
		ИЛИ НЕ Реквизиты.УчетПоПродажнойСтоимости Тогда
		ПараметрыПроведения.Вставить("Переоценка", Неопределено);
		Возврат "";
	КонецЕсли;
	
	// Товары для переоценки при учете по продажным ценам
	НомераТаблиц.Вставить("Переоценка", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад,
	|	Реквизиты.ТипСклада,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СчетРасходов КАК КорСчетСписания,
	|	ТаблицаТовары.Субконто КАК КорСубконтоСписания1,
	|	ТаблицаТовары.СуммаРуб КАК Сумма
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаТовары.ЭтоУслуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТоварыНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТовары
		ИЛИ (НЕ Реквизиты.ПлательщикНДС 
		И НЕ Реквизиты.ВедетсяУчетНДСПоФЗ134) Тогда
		ПараметрыПроведения.Вставить("ТоварыНДС", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТоварыНДС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ ТаблицаТовары.ЭтоКомиссия
	|	И НЕ ТаблицаТовары.ЭтоУслуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРаспределениеВыручки(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если (НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах
		ИЛИ (НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьАгентскиеУслуги))
		И НЕ Реквизиты.ЕстьОплатаПлатежнойКартойАТТ Тогда
		ПараметрыПроведения.Вставить("РеквизитыВыручки", Неопределено);
		ПараметрыПроведения.Вставить("Выручка", 		 Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаВыручки", 			НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаСчетаУчетаВНТТ", 	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаОплатаНаличными", 	НомераТаблиц.Количество());

	НомераТаблиц.Вставить("РеквизитыВыручки", 	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Выручка", 			НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицыДокумента.Ссылка,
	|	ТаблицыДокумента.СтавкаНДС,
	|	СУММА(ТаблицыДокумента.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицыДокумента.СуммаНДСРуб) КАК СуммаНДСРуб
	|ПОМЕСТИТЬ ТаблицаВыручки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Реквизиты.Ссылка КАК Ссылка,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТовары.СуммаРуб КАК СуммаРуб,
	|		ТаблицаТовары.СуммаНДСРуб КАК СуммаНДСРуб
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Реквизиты.Ссылка,
	|		ТаблицаАгентскиеУслуги.СтавкаНДС,
	|		ТаблицаАгентскиеУслуги.СуммаРуб,
	|		ТаблицаАгентскиеУслуги.СуммаНДСРуб
	|	ИЗ
	|		ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
	|			ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах)) КАК ТаблицыДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицыДокумента.Ссылка,
	|	ТаблицыДокумента.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаВНТТ.ТорговаяТочка,
	|	СчетаУчетаВНТТ.СчетДоходовОтРеализации,
	|	СчетаУчетаВНТТ.СчетРасходовОтРеализации
	|ПОМЕСТИТЬ ТаблицаСчетаУчетаВНТТ
	|ИЗ
	|	РегистрСведений.СчетаУчетаВНТТ.СрезПоследних(
	|			&Период,
	|			&УчетПоПродажнойСтоимости
	|				И ТорговаяТочка = &Склад) КАК СчетаУчетаВНТТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетаУчетаВНТТ.ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатаНаличными.Ссылка,
	|	СУММА(ТаблицаОплатаНаличными.СуммаРуб) КАК СуммаРуб
	|ПОМЕСТИТЬ ТаблицаОплатаНаличными
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаВыручки.Ссылка КАК Ссылка,
	|		ТаблицаВыручки.СуммаРуб КАК СуммаРуб
	|	ИЗ
	|		ТаблицаВыручки КАК ТаблицаВыручки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаОплата.Ссылка,
	|		-1 * ТаблицаОплата.СуммаОплатыРуб
	|	ИЗ
	|		ТаблицаОплата КАК ТаблицаОплата) КАК ТаблицаОплатаНаличными
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплатаНаличными.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаОплатаНаличными.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
	|		ИНАЧЕ Реквизиты.СчетКасса
	|	КОНЕЦ КАК СчетУчетаДенежныхСредств,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.НоменклатурнаяГруппаВыручки,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаУчетаВНТТ.СчетДоходовОтРеализации ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСчетаУчетаВНТТ.СчетДоходовОтРеализации
	|		КОГДА &РозничнаяТорговляОблагаетсяЕНВД
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)
	|	КОНЕЦ КАК СчетДоходов,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСчетаУчетаВНТТ.СчетРасходовОтРеализации
	|		КОГДА &РозничнаяТорговляОблагаетсяЕНВД
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
	|	КОНЕЦ КАК СчетРасходов,
	|	ТаблицаОплатаНаличными.СуммаРуб КАК СуммаОплатыНаличными,
	|	&ПрименяетсяУСН,
	|	&ПрименяетсяУСНПатент
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаВНТТ КАК ТаблицаСчетаУчетаВНТТ
	|		ПО Реквизиты.Склад = ТаблицаСчетаУчетаВНТТ.ТорговаяТочка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОплатаНаличными КАК ТаблицаОплатаНаличными
	|		ПО Реквизиты.Ссылка = ТаблицаОплатаНаличными.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВыручки.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаВыручки.СуммаРуб КАК СуммаРуб,
	|	ТаблицаВыручки.СуммаНДСРуб КАК СуммаНДСРуб
	|ИЗ
	|	ТаблицаВыручки КАК ТаблицаВыручки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС";   

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаБезналичнаяОплата(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьАгентскиеУслуги Тогда
		ПараметрыПроведения.Вставить("ВыручкаДляРаспределенияОплаты", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ВыручкаДляРаспределенияОплаты", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	СУММА(ТаблицыДокумента.СуммаРуб) КАК СуммаРуб,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицыДокумента.ЭтоКомиссия
		|					И НЕ &ДеятельностьНаПатенте
		|					И ТаблицыДокумента.ЭтоЕНВД
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаРубЕНВД,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицыДокумента.ЭтоКомиссия
		|					И &ДеятельностьНаПатенте
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаРубПатент,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицыДокумента.ЭтоКомиссия
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаРубКомитента
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаТовары.ЭтоЕНВД КАК ЭтоЕНВД,
		|		ТаблицаТовары.ЭтоКомиссия КАК ЭтоКомиссия,
		|		ТаблицаТовары.СуммаРуб КАК СуммаРуб
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЛОЖЬ,
		|		ИСТИНА,
		|		ТаблицаАгентскиеУслуги.СуммаРуб
		|	ИЗ
		|		ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги) КАК ТаблицыДокумента"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если НЕ Реквизиты.ЕстьОплатаПлатежнойКартойАТТ Тогда
		ПараметрыПроведения.Вставить("БезналичныеОплаты", Неопределено);
	Иначе
		НомераТаблиц.Вставить("БезналичныеОплаты", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	ТаблицаОплата.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОплата.ТипОплаты,
		|	ТаблицаОплата.Контрагент,
		|	ТаблицаОплата.ДоговорКонтрагента,
		|	ТаблицаОплата.СчетУчетаРасчетов,
		|	ТаблицаОплата.СуммаОплатыРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаОплата КАК ТаблицаОплата
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Справка-отчет кассира (КМ-6)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетККМ";
	КомандаПечати.Представление = НСтр("ru = 'Справка-отчет кассира (КМ-6)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Отчет о розничных продажах""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой КМ-6 "Справка-отчет кассира операциониста"
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьОтчетаОПродажахККМ(МассивОбъектов, ОбъектыПечати)
	
	Перем ПодразделениеОтветственныхЛиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетККМОПродажах_ОтчетККМ";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Номер КАК НомерДокумента,
	|	ОтчетОРозничныхПродажах.Дата КАК ДатаДокумента,
	|	ОтчетОРозничныхПродажах.Организация КАК Руководители,
	|	ОтчетОРозничныхПродажах.Организация,
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.СуммаДокумента,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента,
	|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации,
	|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации.НаименованиеПолное КАК ПодразделениеПредставление,
	|	ОтчетОРозничныхПродажах.Оплата.(
	|		ЕСТЬNULL(СУММА(ВЫБОР
	|					КОГДА ОтчетОРозничныхПродажах.Оплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта)
	|						ТОГДА ОтчетОРозничныхПродажах.Оплата.СуммаОплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ), 0) КАК ПлатежныеКарты,
	|		ЕСТЬNULL(СУММА(ВЫБОР
	|					КОГДА ОтчетОРозничныхПродажах.Оплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.БанковскийКредит)
	|						ТОГДА ОтчетОРозничныхПродажах.Оплата.СуммаОплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ), 0) КАК Кредиты
	|	)
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		ВыборкаОплата = Шапка.Оплата.Выбрать();
		Если ВыборкаОплата.Следующий() Тогда
			ПлатежныеКарты = ВыборкаОплата.ПлатежныеКарты;
			Кредиты        = ВыборкаОплата.Кредиты;
		Иначе
			ПлатежныеКарты = 0;
			Кредиты        = 0;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетОРозничныхПродажах.ПФ_MXL_ОтчетККМ");
		
		// Выводим шапку накладной
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация,Шапка.ДатаДокумента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ОрганизацияПредставление = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе);
		ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.ОрганизацияИНН    = СведенияОПокупателе.ИНН;
		ОбластьМакета.Параметры.ПрограммаУчета    = "1С:Предприятие 8";
		ОбластьМакета.Параметры.НомерДокумента    = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДокумента, Истина, Ложь);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Итого = Шапка.СуммаДокумента - Кредиты - ПлатежныеКарты;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета.Параметры.Итого = ПлатежныеКарты;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итог");
		СуммаИтого    = Шапка.СуммаДокумента - Кредиты;
		ОбластьМакета.Параметры.Итого = СуммаИтого;
		
		ОбластьМакета.Параметры.СуммаВыручкиПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаИтого - ПлатежныеКарты, Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Оборот");
		
		ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
		Руководитель = Руководители.РуководительПредставление;
		
		ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
		ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжностьПредставление;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Проверяем, нужно ли для макета ОтчетККМ формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетККМ") Тогда

		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОтчетККМ", "Справка-отчет кассира (КМ-6)", 
			ПечатьОтчетаОПродажахККМ(МассивОбъектов, ОбъектыПечати), , "Документ.ОтчетОРозничныхПродажах.ПФ_MXL_ОтчетККМ");

	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли