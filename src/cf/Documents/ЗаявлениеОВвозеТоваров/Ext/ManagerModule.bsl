#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииПечати
	
// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "ЗаявлениеОВвозеТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов'");
	КомандаПечати.Обработчик     = "УчетНДСКлиент.ВыполнитьКомандуПечатиЗаявленияОВвозеТоваров";
	КомандаПечати.СписокФорм     = "ФормаДокумента,ФормаСписка";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "СтатистическаяФормаУчетаПеремещенияТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Статистическая форма учета перемещения товаров'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Статистическая форма учета перемещения товаров'");
	КомандаПечати.Обработчик     = "УчетНДСКлиент.ВыполнитьКомандуПечатиСтатистическойФормыУчетаПеремещенияТоваров";
	КомандаПечати.СписокФорм     = "ФормаДокумента,ФормаСписка";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Заявление о ввозе товаров""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозеТоваров.Номер КАК НомерЗаяв,
	|	ЗаявлениеОВвозеТоваров.Дата КАК ДатаДокНП,
	|	ЗаявлениеОВвозеТоваров.Дата КАК Дата,
	|	ДЕНЬ(ЗаявлениеОВвозеТоваров.Дата) КАК Число,
	|	МЕСЯЦ(ЗаявлениеОВвозеТоваров.Дата) КАК Месяц,
	|	ГОД(ЗаявлениеОВвозеТоваров.Дата) КАК Год,
	|	НЕОПРЕДЕЛЕНО КАК СтрВсего,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецИНН_КПП,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.НаименованиеПолное = """"
	|			ТОГДА ЗаявлениеОВвозеТоваров.Контрагент.Наименование
	|		ИНАЧЕ ЗаявлениеОВвозеТоваров.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПродавецНаимОрг,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Код КАК КодСтраныПродавец,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПродавец,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецМестоНахожд,
	|	ЛОЖЬ КАК ПродавецБайконур,
	|	ЗаявлениеОВвозеТоваров.ДоговорКонтрагента.Номер КАК НомерДог,
	|	ЗаявлениеОВвозеТоваров.ДоговорКонтрагента.Дата КАК ДатаДог,
	|	НЕОПРЕДЕЛЕНО КАК НомерСпецификации,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСпецификации,
	|	НЕОПРЕДЕЛЕНО КАК ИННОрг_1,
	|	НЕОПРЕДЕЛЕНО КАК НаимОрг_1,
	|	НЕОПРЕДЕЛЕНО КАК КодСтраныОрг1,
	|	НЕОПРЕДЕЛЕНО КАК МестоНахождОрг_1,
	|	ЛОЖЬ КАК КомиссионерБайконур,
	|	НЕОПРЕДЕЛЕНО КАК НомКонтр_2,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаКонтр_2,
	|	НЕОПРЕДЕЛЕНО КАК НомерСпецификации_07,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСпецификации_07,
	|	НЕОПРЕДЕЛЕНО КАК РеквизитыПосредник,
	|	ЛОЖЬ КАК ПрЛизинг,
	|	ЛОЖЬ КАК ПрДавСырья,
	|	ЛОЖЬ КАК ПрПродФЛ,
	|	ЗаявлениеОВвозеТоваров.Организация.ИНН КАК ПокупательИНН,
	|	ЗаявлениеОВвозеТоваров.Организация.КПП КАК ПокупательКПП,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательИНН_КПП,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ПОДСТРОКА(ЗаявлениеОВвозеТоваров.Организация.НаименованиеСокращенное, 1, 250)
	|		ИНАЧЕ ПОДСТРОКА(ЗаявлениеОВвозеТоваров.Организация.НаименованиеПолное, 1, 250)
	|	КОНЕЦ КАК ПокупательНаимОрг,
	|	""643"" КАК КодСтраныПокупатель,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательМестоНахожд,
	|	ЛОЖЬ КАК ПокупательБайконур,
	|	ЗаявлениеОВвозеТоваров.Проведен,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.ДоговорКонтрагента,
	|	ЗаявлениеОВвозеТоваров.ВалютаДокумента,
	|	ЗаявлениеОВвозеТоваров.Ответственный,
	|	ЗаявлениеОВвозеТоваров.СуммаДокумента,
	|	ЗаявлениеОВвозеТоваров.ВалютаДокумента.Код,
	|	НЕОПРЕДЕЛЕНО КАК ФИОРук,
	|	НЕОПРЕДЕЛЕНО КАК ФИОБух,
	|	ЗаявлениеОВвозеТоваров.Дата КАК ДатаПодписиРук,
	|	ЗаявлениеОВвозеТоваров.Дата КАК ДатаПодписиБух,
	|	""первичное заявление"" КАК ПричинаЗаявления,
	|	"""" КАК НомерОтметки,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтметки,
	|	0 КАК ИзмениеЦеныМесяц,
	|	0 КАК ИзмениеЦеныГод
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка В(&МассивДокументов)";
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровСпецификации.НомерСпецификации КАК Номер,
	|	ЗаявлениеОВвозеТоваровСпецификации.ДатаСпецификации КАК Дата,
	|	ЗаявлениеОВвозеТоваровСпецификации.НомерСтроки КАК НомерСтроки,
	|	ЗаявлениеОВвозеТоваровСпецификации.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Спецификации КАК ЗаявлениеОВвозеТоваровСпецификации
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровСпецификации.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаСпецификации = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки КАК П000010000101,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное = """"
	|			ТОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.Наименование
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК П000010000102,
	|	ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.Код КАК П000010000103,
	|	ЗаявлениеОВвозеТоваровТовары.ЕдиницаИзмерения.Наименование КАК П000010000104,
	|	ЗаявлениеОВвозеТоваровТовары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ЗаявлениеОВвозеТоваровТовары.Количество КАК П000010000105,
	|	ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость КАК П000010000106,
	|	ЗаявлениеОВвозеТоваровТовары.СерияНомерТСД КАК П000010000109,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаТСД КАК ДатаТСД,
	|	ЗаявлениеОВвозеТоваровТовары.НомерСчетаФактуры КАК П000010000111,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаАкцизы КАК П000010000114,
	|	ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаНДС КАК П000010000115,
	|	ЗаявлениеОВвозеТоваровТовары.ТвердаяСтавкаАкциза КАК П000010000116,
	|	ЗаявлениеОВвозеТоваровТовары.АдвалорнаяСтавкаАкциза КАК П000010000117,
	|	ЗаявлениеОВвозеТоваровТовары.СтавкаНДС КАК П000010000118,
	|	ЗаявлениеОВвозеТоваровТовары.СуммаАкциза КАК П000010000119,
	|	ЗаявлениеОВвозеТоваровТовары.СуммаНДС КАК П000010000120,
	|	НЕОПРЕДЕЛЕНО КАК П000010000107,
	|	НЕОПРЕДЕЛЕНО КАК П000010000108,
	|	НЕОПРЕДЕЛЕНО КАК П000010000125,
	|	НЕОПРЕДЕЛЕНО КАК П000010000110,
	|	НЕОПРЕДЕЛЕНО КАК П000010000112,
	|	НЕОПРЕДЕЛЕНО КАК П000010000113,
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Комитент)
	|			ТОГДА 0
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Доверитель)
	|			ТОГДА 1
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Принципал)
	|			ТОГДА 2
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Продавец)
	|			ТОГДА 6
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Покупатель)
	|			ТОГДА 7
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипПрод_Пр,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца КАК ТипПродавца,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Комиссионер)
	|			ТОГДА 3
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Поверенный)
	|			ТОГДА 4
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Агент)
	|			ТОГДА 5
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Покупатель)
	|			ТОГДА 7
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ТипПок_Пр,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя КАК ТипПокупателя,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Продавец,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Продавец.СтранаРегистрации.Код КАК КодСтраныПродавец,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Продавец.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПродавец,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Покупатель,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Покупатель.СтранаРегистрации.Код КАК КодСтраныПокупатель,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Покупатель.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПокупатель,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.НомерДоговора КАК НомерДог,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.ДатаДоговора КАК ДатаДог,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.НомерСпецификации,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.ДатаСпецификации,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецИНН_КПП,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецНаимОрг,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецМестоНахожд,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательИНН_КПП,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательНаимОрг,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательМестоНахожд,
	|	ЛОЖЬ КАК ПродавецБайконур,
	|	ЛОЖЬ КАК ПокупательБайконур,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Ссылка КАК ДокументСсылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерЗаяв,
	|	НЕОПРЕДЕЛЕНО КАК Число,
	|	НЕОПРЕДЕЛЕНО КАК Месяц,
	|	НЕОПРЕДЕЛЕНО КАК Год
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.УчастникиСделки КАК ЗаявлениеОВвозеТоваровУчастникиСделки
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	ТаблицаУчастникиСделки = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху	= 10;
	ТабДокумент.ПолеСнизу	= 10;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСправа = 0;
	Иначе
		ТабДокумент.ПолеСлева  = 10;
		ТабДокумент.ПолеСправа = 10;
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеОВвозеТоваров";
	
	ПервыйДокумент = Истина;
	
	// Объявление таблиц
	
	ТаблицаСпецификацииДляВыгрузки = Новый ТаблицаЗначений;
	ТаблицаСпецификацииДляВыгрузки.Колонки.Добавить("Номер");
	ТаблицаСпецификацииДляВыгрузки.Колонки.Добавить("Дата");
	
	ТЗСпецификации07 = Новый ТаблицаЗначений;
	ТЗСпецификации07.Колонки.Добавить("Номер");
	ТЗСпецификации07.Колонки.Добавить("Дата");
	
	ТЗСпецификацииРаздел3 = ТЗСпецификации07.СкопироватьКолонки();
	ТаблСпецификацииПриложение = ТЗСпецификации07.СкопироватьКолонки();
	
	ТТД = Новый ТаблицаЗначений;
	ТТД.Колонки.Добавить("Номер");
	ТТД.Колонки.Добавить("Дата");
	
	Для каждого СтрокаШапки Из Шапка Цикл
		
		Если СтрокаШапки.Дата < '20150101' Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ЗаявлениеОВвозе2012кв3");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ЗаявлениеОВвозе2015кв1");
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		СтруктураПоиска = Новый Структура("ДокументСсылка", СтрокаШапки.ДокументСсылка);
		
		// Структуры для выгрузки
		
		РеквизитыРаздел1 = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШапки); 
		РеквизитыРаздел2 = Новый Структура("НомерЗаяв,Число,Месяц,Год,СтрВсего,Стр");
		РеквизитыРаздел3 = Новый Структура("НомерЗаяв,Число,Месяц,Год,СтрВсего,Стр,ТипПрод_3,ТипПродавца,ПродавецИНН_КПП,ПродавецНаимОрг,КодСтраныПродавец,
			|ПродавецМестоНахожд,ПродавецАдрес,ПродавецБайконур,НомерДог,ДатаДог,НомерСпецификации,ДатаСпецификации,ТипПок_3,ТипПокупателя,ПокупательИНН_КПП,
			|ПокупательНаимОрг,КодСтраныПокупатель,ПокупательМестоНахожд,ПокупательАдрес,ПокупательБайконур,ФИОРук,ФИОБух,ДатаПодписиРук,ДатаПодписиБух"); 
		РеквизитыПриложение = Новый Структура("НомерЗаяв,Число,Месяц,Год");
		
		// Раздел 1
		
		Если ЗначениеЗаполнено(СтрокаШапки.Организация) 
			И ЗначениеЗаполнено(СтрокаШапки.Контрагент) Тогда
			
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаШапки.Организация, СтрокаШапки.Дата);
			
			РеквизитыРаздел1.ФИОРук = Руководители.РуководительПредставление;
			РеквизитыРаздел1.ФИОБух = Руководители.ГлавныйБухгалтерПредставление;
			
			СведенияОПродавце 	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаШапки.Контрагент, СтрокаШапки.Дата);
			СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаШапки.Организация, СтрокаШапки.Дата);
			
			РеквизитыРаздел1.ПродавецМестоНахожд	= РеквизитыРаздел1.КодСтраныПродавец + ", " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ЮридическийАдрес,");
			Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
				РеквизитыРаздел1.ПродавецИНН_КПП 		= СведенияОПродавце.ИНН + ?(СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
			Иначе
				РеквизитыРаздел1.ПродавецИНН_КПП 		= СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
			КонецЕсли;
			
			РеквизитыРаздел1.ПокупательМестоНахожд 	= РеквизитыРаздел1.КодСтраныПокупатель + ", " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
			РеквизитыРаздел1.ПокупательИНН_КПП 		= РеквизитыРаздел1.ПокупательИНН + ?(РеквизитыРаздел1.ПокупательКПП = "", "", "/" + РеквизитыРаздел1.ПокупательКПП);
			
		КонецЕсли;
		
		РеквизитыРаздел1.НомерЗаяв = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыРаздел1.НомерЗаяв, Истина, Ложь);
		
		ТаблицаСпецификацииДляВыгрузки.Очистить();
		
		// Спецификации
		
		НомераСпецификаций = "";
		ДатыСпецификаций = "";
		
		Пока ТаблицаСпецификации.НайтиСледующий(СтруктураПоиска) Цикл
			НомераСпецификаций 	= НомераСпецификаций + ?(НомераСпецификаций = "", "", ", ") + ТаблицаСпецификации.Номер;
			ДатыСпецификаций 	= ДатыСпецификаций + ?(ДатыСпецификаций = "", "", ", ") + Формат(ТаблицаСпецификации.Дата, "ДФ=dd.MM.yyyy");
			НоваяСтрокаСпецификаций = ТаблицаСпецификацииДляВыгрузки.Добавить();
			НоваяСтрокаСпецификаций.Дата = Формат(ТаблицаСпецификации.Дата, "ДФ=dd.MM.yyyy");
			НоваяСтрокаСпецификаций.Номер = ТаблицаСпецификации.Номер;
		КонецЦикла;
		
		РеквизитыРаздел1.НомерСпецификации = НомераСпецификаций;
		РеквизитыРаздел1.ДатаСпецификации = ДатыСпецификаций;
		
		// Адрес продавца для выгрузки
		РеквизитыРаздел1.Вставить("ПродавецАдрес", ПолучитьАдресВВидеСоответствия(СтрокаШапки.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента));
		
		// Адрес покупателя для выгрузки
		РеквизитыРаздел1.Вставить("ПокупательАдрес", ПолучитьАдресВВидеСоответствия(СтрокаШапки.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации));
		
		// Адрес комиссионера для выгрузки
		РеквизитыРаздел1.Вставить("КомиссионерАдрес", ПустойРоссийскийАдрес());
		
		// Адрес продавца в Разделе 3 для выгрузки
		РеквизитыРаздел3.Вставить("ПродавецАдрес", ПустойРоссийскийАдрес());
			
		// Адрес покупателя в Разделе 3 для выгрузки
		РеквизитыРаздел3.Вставить("ПокупательАдрес", ПустойРоссийскийАдрес());
	
		ПечататьРаздел3 = Ложь;
			
		ТЗСпецификации07.Очистить();
		ТЗСпецификацииРаздел3.Очистить();
		ТаблСпецификацииПриложение.Очистить();
		
		НайденныеСтрокиУчастникиСделки = ТаблицаУчастникиСделки.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтрокиУчастникиСделки.Количество() > 0 Тогда
			
			СтрокаУчастникиСделки = НайденныеСтрокиУчастникиСделки[0];
			
			Если ЗначениеЗаполнено(СтрокаУчастникиСделки.Продавец) Тогда
				
				РеквизитыРаздел1.КодСтраныОрг1 = СтрокаУчастникиСделки.КодСтраныПродавец;
				
				СведенияОПродавце 	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаУчастникиСделки.Продавец, РеквизитыРаздел1.Дата);
				СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаУчастникиСделки.Покупатель, РеквизитыРаздел1.Дата);
				
				РеквизитыРаздел1.НаимОрг_1 			= СведенияОПродавце.ПолноеНаименование;
				
				Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					РеквизитыРаздел1.ИННОрг_1 		= СведенияОПродавце.ИНН + ?(СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
				Иначе
					РеквизитыРаздел1.ИННОрг_1 		= СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				РеквизитыРаздел1.МестоНахождОрг_1	= СтрокаУчастникиСделки.КодСтраныПродавец + ", " + СведенияОПродавце.ЮридическийАдрес;
				
				РеквизитыРаздел1.НомКонтр_2 			= СтрокаУчастникиСделки.НомерДог;
				РеквизитыРаздел1.ДатаКонтр_2 			= СтрокаУчастникиСделки.ДатаДог;
				РеквизитыРаздел1.НомерСпецификации_07 	= СтрокаУчастникиСделки.НомерСпецификации;
				РеквизитыРаздел1.ДатаСпецификации_07 	= Формат(СтрокаУчастникиСделки.ДатаСпецификации, "ДФ=dd.MM.yyyy");
				
				СтрокаСпецификацииПосредник = ТЗСпецификации07.Добавить();
				СтрокаСпецификацииПосредник.Номер = РеквизитыРаздел1.НомерСпецификации_07;
				СтрокаСпецификацииПосредник.Дата =  РеквизитыРаздел1.ДатаСпецификации_07;
							
				РеквизитыРаздел1.РеквизитыПосредник = СведенияОПродавце.ПолноеНаименование + ", " + РеквизитыРаздел1.МестоНахождОрг_1;
				
				АдресКомиссионера = ПолучитьАдресВВидеСоответствия(СтрокаУчастникиСделки.Продавец, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				РеквизитыРаздел1.КомиссионерАдрес = АдресКомиссионера;
				
				Если НайденныеСтрокиУчастникиСделки.Количество() = 1 Тогда
					
					ПечататьРаздел3 = Истина;
					РеквизитыРаздел1.СтрВсего = 3; // если строка одна
					
					// Раздел 3
					ЗаполнитьЗначенияСвойств(РеквизитыРаздел3, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год,СтрВсего,ФИОРук,ФИОБух,ДатаПодписиРук,ДатаПодписиБух");
					
					РеквизитыРаздел3.ТипПрод_3 	= СтрокаУчастникиСделки.ТипПрод_Пр;
					РеквизитыРаздел3.ТипПок_3 	= СтрокаУчастникиСделки.ТипПок_Пр;
					
					РеквизитыРаздел3.ТипПродавца	= СтрокаУчастникиСделки.ТипПродавца;
					РеквизитыРаздел3.ТипПокупателя 	= СтрокаУчастникиСделки.ТипПокупателя;
										
					РеквизитыРаздел3.ПродавецБайконур 	= СтрокаУчастникиСделки.ПродавецБайконур;
					РеквизитыРаздел3.ПокупательБайконур = СтрокаУчастникиСделки.ПокупательБайконур;
					
					Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
						РеквизитыРаздел3.ПродавецИНН_КПП 		= СведенияОПродавце.ИНН + ?(СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
					Иначе
						РеквизитыРаздел3.ПродавецИНН_КПП 		= СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
					КонецЕсли;
					РеквизитыРаздел3.ПродавецНаимОрг 		= СведенияОПродавце.ПолноеНаименование;
					РеквизитыРаздел3.КодСтраныПродавец 		= СтрокаУчастникиСделки.КодСтраныПродавец; 
					РеквизитыРаздел3.ПродавецМестоНахожд 	= СтрокаУчастникиСделки.КодСтраныПродавец + ", " + СведенияОПродавце.ЮридическийАдрес;
					
					Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
						РеквизитыРаздел3.ПокупательИНН_КПП = СведенияОПокупателе.ИНН + ?(СведенияОПокупателе.КПП = "", "", "/" + СведенияОПокупателе.КПП);
					Иначе
						РеквизитыРаздел3.ПокупательИНН_КПП = СведенияОПокупателе.НалоговыйНомерВСтранеРегистрации;
					КонецЕсли;
					РеквизитыРаздел3.ПокупательНаимОрг 		= СведенияОПокупателе.ПолноеНаименование;
					РеквизитыРаздел3.КодСтраныПокупатель 	= СтрокаУчастникиСделки.КодСтраныПокупатель;
					РеквизитыРаздел3.ПокупательМестоНахожд 	= СтрокаУчастникиСделки.КодСтраныПокупатель + ", " + СведенияОПокупателе.ЮридическийАдрес;
					
					РеквизитыРаздел3.НомерДог 			= СтрокаУчастникиСделки.НомерДог;
					РеквизитыРаздел3.ДатаДог 			= СтрокаУчастникиСделки.ДатаДог;
					РеквизитыРаздел3.НомерСпецификации 	= СтрокаУчастникиСделки.НомерСпецификации;
					РеквизитыРаздел3.ДатаСпецификации 	= СтрокаУчастникиСделки.ДатаСпецификации;
					
					РеквизитыРаздел3.ПродавецАдрес 		= АдресКомиссионера;
					РеквизитыРаздел3.ПокупательАдрес 	= ПолучитьАдресВВидеСоответствия(СтрокаУчастникиСделки.Покупатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
					
					ТЗСпецификацииРаздел3 = ТЗСпецификации07;
					
				Иначе
					РеквизитыРаздел1.СтрВсего = 2;
				КонецЕсли; 
			КонецЕсли;
		Иначе
			РеквизитыРаздел1.СтрВсего = 2;
		КонецЕсли;
		
		// Вывод на печать
		
		ШапкаРаздел1 = Макет.ПолучитьОбласть("Шапка");
		ШапкаРаздел1.Параметры.Заполнить(РеквизитыРаздел1);
		ТабДокумент.Вывести(ШапкаРаздел1);
		
		// Товары
		
		ТекущийНомерСтраницы = 1;
		ЗаголовокТаблицыТоваров = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицыТоваров.Параметры.НомерСтраницы = ТекущийНомерСтраницы;
		ТабДокумент.Вывести(ЗаголовокТаблицыТоваров);
		
		ТаблицаТоварыРаздел1 = ТаблицаТовары.СкопироватьКолонки(); // Таблица для выгрузки
		
		ТТД.Очистить();
		
		МассивОбластейДляПроверкиВывода = Новый Массив;
		
		НайденныеСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			МногострочнаяЧасть = Макет.ПолучитьОбласть("ТаблицаТовары");
			ПодвалТаблицаТовары = Макет.ПолучитьОбласть("ПодвалТаблицаТовары");
			
			Для каждого СтрокаТоваров Из НайденныеСтрокиТовары Цикл
				
				НоваяСтрокаТоваровДляВыгрузки = ТаблицаТоварыРаздел1.Добавить();
				
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыРаздел1.ВалютаДокумента, СтрокаТоваров.ДатаПринятияНаУчет);
			
				СтрокаТоваров.П000010000108 = СтруктураКурса.Курс;
				СтрокаТоваров.П000010000125 = СтруктураКурса.Кратность;
				СтрокаТоваров.П000010000107 = РеквизитыРаздел1.ВалютаДокументаКод;
				СтрокаТоваров.П000010000110 = Формат(СтрокаТоваров.ДатаТСД, "ДФ=dd.MM.yyyy");
				СтрокаТоваров.П000010000112 = Формат(СтрокаТоваров.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
				СтрокаТоваров.П000010000113 = Формат(СтрокаТоваров.ДатаПринятияНаУчет, "ДФ=dd.MM.yyyy");
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваровДляВыгрузки, СтрокаТоваров);
				
				НоваяСтрокаДокументы = ТТД.Добавить();
				НоваяСтрокаДокументы.Номер = СтрокаТоваров.П000010000109;
				НоваяСтрокаДокументы.Дата = СтрокаТоваров.П000010000110;
				
				МногострочнаяЧасть.Параметры.Заполнить(СтрокаТоваров);
				
				БезАкцизов = СтрокаТоваров.П000010000114 + СтрокаТоваров.П000010000116 
					+ СтрокаТоваров.П000010000117 + СтрокаТоваров.П000010000119 = 0;
				
				Если БезАкцизов Тогда
					МногострочнаяЧасть.Параметры.П000010000114 = "--";
					МногострочнаяЧасть.Параметры.П000010000116 = "--";
					МногострочнаяЧасть.Параметры.П000010000117 = "--";
					МногострочнаяЧасть.Параметры.П000010000119 = "--";
				КонецЕсли;
				
				МассивОбластейДляПроверкиВывода.Очистить();
				МассивОбластейДляПроверкиВывода.Добавить(МногострочнаяЧасть);
				МассивОбластейДляПроверкиВывода.Добавить(ПодвалТаблицаТовары);
				Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(
						ТабДокумент, МассивОбластейДляПроверкиВывода) Тогда
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
					ЗаголовокТаблицыТоваров.Параметры.НомерСтраницы = ТекущийНомерСтраницы;
					ТабДокумент.Вывести(ЗаголовокТаблицыТоваров);
				КонецЕсли;
				
				ТабДокумент.Вывести(МногострочнаяЧасть);
				
			КонецЦикла;
		КонецЕсли;
		
		РеквизитыРаздел1.Вставить("П000010000114", ТаблицаТоварыРаздел1.Итог("П000010000114"));
		РеквизитыРаздел1.Вставить("П000010000115", ТаблицаТоварыРаздел1.Итог("П000010000115"));
		РеквизитыРаздел1.Вставить("П000010000119", ТаблицаТоварыРаздел1.Итог("П000010000119"));
		РеквизитыРаздел1.Вставить("П000010000120", ТаблицаТоварыРаздел1.Итог("П000010000120"));
		
		ПодвалТаблицаТовары.Параметры.П000010000114 = РеквизитыРаздел1.П000010000114;
		ПодвалТаблицаТовары.Параметры.П000010000115 = РеквизитыРаздел1.П000010000115;
		ПодвалТаблицаТовары.Параметры.П000010000119 = РеквизитыРаздел1.П000010000119;
		ПодвалТаблицаТовары.Параметры.П000010000120 = РеквизитыРаздел1.П000010000120;
		
		ТабДокумент.Вывести(ПодвалТаблицаТовары);
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.Заполнить(РеквизитыРаздел1);
		МассивОбластейДляПроверкиВывода.Очистить();
		МассивОбластейДляПроверкиВывода.Добавить(Подвал);
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент,
			МассивОбластейДляПроверкиВывода) Тогда
			
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
			ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
		КонецЕсли;

		ТабДокумент.Вывести(Подвал);
		
		// Раздел 2
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ЗаполнитьЗначенияСвойств(РеквизитыРаздел2, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год,СтрВсего");
		
		ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
		РеквизитыРаздел2.Стр = ТекущийНомерСтраницы;
			
		ОсновнаяЧасть = Макет.ПолучитьОбласть("Раздел2");
		ОсновнаяЧасть.Параметры.Заполнить(РеквизитыРаздел2);
		ТабДокумент.Вывести(ОсновнаяЧасть);
		
		// Раздел 3
		
		Если ПечататьРаздел3 Тогда
		
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
			РеквизитыРаздел3.Стр = ТекущийНомерСтраницы;
			
			ОсновнаяЧасть = Макет.ПолучитьОбласть("Раздел3");
			ОсновнаяЧасть.Параметры.Заполнить(РеквизитыРаздел3);
			ТабДокумент.Вывести(ОсновнаяЧасть);
		
		КонецЕсли; 
		
		// Приложение
		
		ТаблицаДляВыгрузкиПриложение = ТаблицаУчастникиСделки.СкопироватьКолонки(); // Таблица для выгрузки
		ТаблицаДляВыгрузкиПриложение.Колонки.Добавить("ПродавецАдрес");
		ТаблицаДляВыгрузкиПриложение.Колонки.Добавить("ПокупательАдрес");
				
		Если НайденныеСтрокиУчастникиСделки.Количество() > 1 Тогда
			
			ОсновнаяЧасть = Макет.ПолучитьОбласть("Приложение");
			
			Для каждого СтрокаУчастникиСделки Из НайденныеСтрокиУчастникиСделки Цикл
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				СведенияОПродавце 	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаУчастникиСделки.Продавец, РеквизитыРаздел1.Дата);
				СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаУчастникиСделки.Покупатель, РеквизитыРаздел1.Дата);
				
				Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					СтрокаУчастникиСделки.ПродавецИНН_КПП = СведенияОПродавце.ИНН + ?(СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
				Иначе
					СтрокаУчастникиСделки.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				СтрокаУчастникиСделки.ПродавецНаимОрг 		= СведенияОПродавце.ПолноеНаименование;
				СтрокаУчастникиСделки.ПродавецМестоНахожд 	= СтрокаУчастникиСделки.КодСтраныПродавец + ", " + СведенияОПродавце.ЮридическийАдрес;
				
				Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					СтрокаУчастникиСделки.ПокупательИНН_КПП = СведенияОПокупателе.ИНН + ?(СведенияОПокупателе.КПП = "", "", "/" + СведенияОПокупателе.КПП);
				Иначе
					СтрокаУчастникиСделки.ПокупательИНН_КПП = СведенияОПокупателе.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				СтрокаУчастникиСделки.ПокупательНаимОрг 	= СведенияОПокупателе.ПолноеНаименование;
				СтрокаУчастникиСделки.ПокупательМестоНахожд = СтрокаУчастникиСделки.КодСтраныПокупатель + ", " + СведенияОПокупателе.ЮридическийАдрес;
				
				ЗаполнитьЗначенияСвойств(СтрокаУчастникиСделки, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год");
				
				СтрокаСпецификацииПриложение = ТаблСпецификацииПриложение.Добавить();
				СтрокаСпецификацииПриложение.Номер = СтрокаУчастникиСделки.НомерСпецификации;
				СтрокаСпецификацииПриложение.Дата =  СтрокаУчастникиСделки.ДатаСпецификации;
				
				СтрокаВыгрузки = ТаблицаДляВыгрузкиПриложение.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаВыгрузки, СтрокаУчастникиСделки);
				
				// Адрес продавца в Приложении для выгрузки
				СтрокаВыгрузки.ПродавецАдрес = ПолучитьАдресВВидеСоответствия(СтрокаУчастникиСделки.Продавец, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				
				// Адрес покупателя в Приложении для выгрузки
				СтрокаВыгрузки.ПокупательАдрес = ПолучитьАдресВВидеСоответствия(СтрокаУчастникиСделки.Покупатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				
				ОсновнаяЧасть.Параметры.Заполнить(СтрокаВыгрузки);
				ТабДокумент.Вывести(ОсновнаяЧасть);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровВыпискиБанка.НомерСтроки КАК НомВыпПП,
	|	СписаниеСРасчетногоСчета.Дата КАК П000020000101,
	|	ЗаявлениеОВвозеТоваровВыпискиБанка.СуммаОплаты КАК П000020000102,
	|	БанковскиеСчета.НомерСчета КАК П000020000103,
	|	Банки.Код КАК БИК,
	|	Банки.Наименование КАК НаименованиеБанка,
	|	1 КАК ТипПлат
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.ВыпискиБанка КАК ЗаявлениеОВвозеТоваровВыпискиБанка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|				ПО БанковскиеСчета.Банк = Банки.Ссылка
	|			ПО СписаниеСРасчетногоСчета.СчетОрганизации = БанковскиеСчета.Ссылка
	|		ПО ЗаявлениеОВвозеТоваровВыпискиБанка.ПлатежныйДокумент = СписаниеСРасчетногоСчета.Ссылка
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровВыпискиБанка.Ссылка В(&МассивДокументов)";

	ТаблицаВыпискиБанка = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровСведенияОЗачете.НомерСтроки КАК НомПП,
	|	Банки.Код КАК БИК,
	|	Банки.Наименование КАК НаименованиеБанка,
	|	3 КАК ТипПлат,
	|	ЗаявлениеОВвозеТоваровСведенияОЗачете.ДатаЗачета КАК П000030000101,
	|	ЗаявлениеОВвозеТоваровСведенияОЗачете.СуммаЗачета КАК П000030000102
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.СведенияОЗачете КАК ЗаявлениеОВвозеТоваровСведенияОЗачете
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|				ПО БанковскиеСчета.Банк = Банки.Ссылка
	|			ПО СписаниеСРасчетногоСчета.СчетОрганизации = БанковскиеСчета.Ссылка
	|		ПО ЗаявлениеОВвозеТоваровСведенияОЗачете.ПлатежныйДокумент = СписаниеСРасчетногоСчета.Ссылка
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровСведенияОЗачете.Ссылка В(&МассивДокументов)";
	
	ТаблицаСведенияОЗачете = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаТоварыРаздел1 <> Неопределено Тогда
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДокументСсылка");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаТСД");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаСчетаФактуры");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаПринятияНаУчет");
		
		ТаблицаТоварыРаздел1.Колонки.Удалить("П000010000104");
		ТаблицаТоварыРаздел1.Колонки.ЕдиницаИзмеренияКод.Имя = "П000010000104";
	КонецЕсли;
	
	Если ТаблицаДляВыгрузкиПриложение <> Неопределено Тогда
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ДокументСсылка");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("Покупатель");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("Продавец");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ТипПродавца");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ТипПокупателя");
	КонецЕсли;
	
	КоличествоСтраниц = ТабДокумент.КоличествоСтраниц();
	ОбластьКоличествоСтраниц = ТабДокумент.НайтиТекст("СтрВсего");
	Пока ОбластьКоличествоСтраниц <> Неопределено Цикл
		ОбластьКоличествоСтраниц.Текст = КоличествоСтраниц;
		ОбластьКоличествоСтраниц = ТабДокумент.НайтиТекст("СтрВсего", ОбластьКоличествоСтраниц)
	КонецЦикла;
	
	Возврат Новый Структура(
		"РеквизитыРаздел1,ТаблицаРаздел1,РеквизитыРаздел2,РеквизитыРаздел3,ТаблицаПриложение,
		|ТЗСпецификации,ТЗСпецификации07,ТЗСпецификацииРаздел3,ТаблСпецПрил3,
		|ТТД,ТаблицаВыпискиБанка,ТаблицаСведенияОЗачете,ТабДокумент",
		РеквизитыРаздел1, ТаблицаТоварыРаздел1, РеквизитыРаздел2, РеквизитыРаздел3, ТаблицаДляВыгрузкиПриложение, 
		ТаблицаСпецификацииДляВыгрузки, ТЗСпецификации07, ТЗСпецификацииРаздел3, ТаблСпецификацииПриложение, 
		ТТД, ТаблицаВыпискиБанка, ТаблицаСведенияОЗачете, ТабДокумент);
		
КонецФункции

Функция ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивДокументов) Экспорт

	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозеТоваров.Номер КАК СистемныйНомер,
	|	ЗаявлениеОВвозеТоваров.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияД1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияД2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияМ1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияМ2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ3,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ4,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцМ1,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцМ2,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ1,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ2,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ3,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ4,
	|	ЗаявлениеОВвозеТоваров.Контрагент.ИНН КАК ОтправительКоды,
	|	НЕОПРЕДЕЛЕНО КАК ОтправительРеквизиты,
	|	НЕОПРЕДЕЛЕНО КАК ОтправительНаименование,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.ДоговорКонтрагента.Номер КАК НомерДоговора,
	|	ЗаявлениеОВвозеТоваров.ДоговорКонтрагента.Дата КАК ДатаДоговора,
	|	ЗаявлениеОВвозеТоваров.Организация.ИНН КАК ПокупательИНН,
	|	ЗаявлениеОВвозеТоваров.Организация.КПП КАК ПокупательКПП,
	|	НЕОПРЕДЕЛЕНО КАК ПолучательКоды,
	|	НЕОПРЕДЕЛЕНО КАК ПолучательРеквизиты,
	|	НЕОПРЕДЕЛЕНО КАК ОргПочтовыйАдрес,
	|	НЕОПРЕДЕЛЕНО КАК ОргТелефонИсп,
	|	ЗаявлениеОВвозеТоваров.ВалютаДокумента,
	|	ЗаявлениеОВвозеТоваров.ВалютаДокумента.Код КАК ВалютаТовараКод,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Организация.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаявлениеОВвозеТоваров.Организация.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО КАК ОргИсполнитель,
	|	НЕОПРЕДЕЛЕНО КАК ОргДолжностьИсп,
	|	НЕОПРЕДЕЛЕНО КАК ОргАдресЭлПочты,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 КАК ТоргующаяСтранаКод,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Наименование КАК ТоргующаяСтранаНаименование,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 КАК СтранаОтправленияКод,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Наименование КАК СтранаОтправленияНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ВидТранспортаКод,
	|	НЕОПРЕДЕЛЕНО КАК ВидТранспортаНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ОтвЛицоФинУрКоды,
	|	НЕОПРЕДЕЛЕНО КАК ОтвЛицоФинУрРеквизиты,
	|	""ИМ"" КАК НаправлениеПеремещения,
	|	""ИМ"" КАК НапрПеремещения,
	|	""РОССИЯ"" КАК СтранаНазначенияНаименование,
	|	""RU"" КАК СтранаНазначенияКод,
	|	НЕОПРЕДЕЛЕНО КАК ОргПочтовыйАдресСоответствие,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваров.ВалютаДокумента.Наименование
	|	КОНЕЦ КАК КодВалютыЦеныТовара,
	|	"""" КАК ИмяКлючевогоУзлаСодержательнойЧасти,
	|	"""" КАК ИмяФайла,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""KZ""
	|			ТОГДА ""РК""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""BY""
	|			ТОГДА ""РБ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СтранаОтправления,
	|	""РФ"" КАК СтранаНазначения,
	|	ЗаявлениеОВвозеТоваров.Контрагент.ЮридическоеФизическоеЛицо,
	|	ЗаявлениеОВвозеТоваров.Организация.ИндивидуальныйПредприниматель КАК ИндивидуальныйПредприниматель,
	|	ЗаявлениеОВвозеТоваров.Организация.ОГРН КАК ОГРН
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка В(&МассивДокументов)";
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное = """"
	|			ТОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.Наименование
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеТовара,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.Код, """") КАК КодТовара,
	|	ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость КАК ЦенаТовараВыбВал,
	|	ЗаявлениеОВвозеТоваровТовары.СерияНомерТСД,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаТСД,
	|	ЗаявлениеОВвозеТоваровТовары.НомерСчетаФактуры,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаСчетаФактуры,
	|	ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаНДС КАК ЦенаТовараВалРубль,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Ссылка.ВалютаДокумента.Наименование
	|	КОНЕЦ КАК ВалютаТовараКод,
	|	ЗаявлениеОВвозеТоваровТовары.СтатСтоимостьДолларыСША КАК ЦенаТовараВалДоллар,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.СтранаПроисхождения.Наименование, """") КАК СтранаТовараНаименование,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.СтранаПроисхождения.КодАльфа2, """") КАК СтранаТовараКод,
	|	ЗаявлениеОВвозеТоваровТовары.ВесНеттоКг КАК ВесТовара,
	|	ЗаявлениеОВвозеТоваровТовары.КодВидаТранспорта,
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка КАК ДокументСсылка,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.ДокументПартии.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ОтчетныйПериод,
	|	ЗаявлениеОВвозеТоваровТовары.Количество КАК ЕдИзмТовараКво,
	|	ЗаявлениеОВвозеТоваровТовары.ЕдиницаИзмерения.Наименование КАК ЕдИзмТовараКратко,
	|	ЗаявлениеОВвозеТоваровТовары.ЕдиницаИзмерения.Код КАК ЕдИзмТовараКод
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху	= 10;
	ТабДокумент.ПолеСнизу	= 10;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСправа = 0;
	Иначе
		ТабДокумент.ПолеСлева  = 10;
		ТабДокумент.ПолеСправа = 10;
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СтатистическаяФормаУчетаПеремещенияТоваров";
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2011Кв1");
	
	ОсновнаяЧасть1 		= Макет.ПолучитьОбласть("ОсновнаяЧасть1");
	МногострочнаяЧасть1 = Макет.ПолучитьОбласть("МногострочнаяЧасть1");
	МногострочнаяЧасть2 = Макет.ПолучитьОбласть("МногострочнаяЧасть2");
	ОсновнаяЧасть2 		= Макет.ПолучитьОбласть("ОсновнаяЧасть2");
	ОсновнаяЧасть3		= Макет.ПолучитьОбласть("ОсновнаяЧасть3");
	
	СписокВидовТранспорта = Новый СписокЗначений;
	Документы.ЗаявлениеОВвозеТоваров.ЗаполнитьСписокВыбораВидовТранспорта(СписокВидовТранспорта);
	
	Для каждого СтрокаШапки Из Шапка Цикл
		
		РеквизитыШапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШапки); // Структура для выгрузки
		РеквизитыШапка.СистемныйНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыШапка.СистемныйНомер, Истина, Ложь);
		
		Если ЗначениеЗаполнено(РеквизитыШапка.Организация) И ЗначениеЗаполнено(РеквизитыШапка.Контрагент) Тогда
			
			СведенияОПродавце = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыШапка.Контрагент, РеквизитыШапка.Дата);
			СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыШапка.Организация, РеквизитыШапка.Дата);
			
			РеквизитыШапка.ПолучательРеквизиты = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ЮридическийАдрес,");
			РеквизитыШапка.ПолучательКоды = РеквизитыШапка.ПокупательИНН + ?(РеквизитыШапка.ПокупательКПП = "", "", "/" + РеквизитыШапка.ПокупательКПП);
			
			РеквизитыШапка.ОтвЛицоФинУрРеквизиты = РеквизитыШапка.ПолучательРеквизиты;
			РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
			
			РеквизитыШапка.ОргПочтовыйАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
			РеквизитыШапка.ОргТелефонИсп = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
			РеквизитыШапка.ОргАдресЭлПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
			
			// Отправитель
			
			РеквизитыШапка.ОтправительРеквизиты = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,ЮридическийАдрес,");
			РеквизитыШапка.ОтправительНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,");
		
			Если РеквизитыШапка.СтранаОтправления = "РБ" Тогда
				РеквизитыШапка.Вставить("ОтправительРБ_УНП", РеквизитыШапка.ОтправительКоды);
				РеквизитыШапка.Вставить("ОтправительРК_БИН", "");
				РеквизитыШапка.Вставить("ОтправительРК_ИИН", "");
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "РК" Тогда
				РеквизитыШапка.Вставить("ОтправительРБ_УНП", "");
				Если РеквизитыШапка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					РеквизитыШапка.Вставить("ОтправительРК_БИН", РеквизитыШапка.ОтправительКоды);
					РеквизитыШапка.Вставить("ОтправительРК_ИИН", "");
				Иначе
					РеквизитыШапка.Вставить("ОтправительРК_БИН", "");
					РеквизитыШапка.Вставить("ОтправительРК_ИИН", РеквизитыШапка.ОтправительКоды);
				КонецЕсли;
			Иначе
				РеквизитыШапка.Вставить("ОтправительРБ_УНП", "");
				РеквизитыШапка.Вставить("ОтправительРК_БИН", "");
				РеквизитыШапка.Вставить("ОтправительРК_ИИН", "");
			КонецЕсли;
				
			РеквизитыШапка.Вставить("ОтправительРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтправительРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтправительРФ_ОГРН", "");
			
			ОтправительАдрес = ПолучитьАдресВВидеСоответствия(РеквизитыШапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			
			РеквизитыШапка.Вставить("ОтправительСтранаКод", РеквизитыШапка.ТоргующаяСтранаКод);
			РеквизитыШапка.Вставить("ОтправительСтранаНаименование", РеквизитыШапка.ТоргующаяСтранаНаименование);
			РеквизитыШапка.Вставить("ОтправительИндекс", ОтправительАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОтправительНаселенныйПункт", ОтправительАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ОтправительОбласть", ОтправительАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОтправительУлицаНомерДома", 
				ОтправительАдрес.Получить("Улица") + ", " + ОтправительАдрес.Получить("Дом") + ", " 
				+ ОтправительАдрес.Получить("Корпус") + ", " + ОтправительАдрес.Получить("Квартира"));
			
			// Получатель
			
			ПолучательНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
			ПолучательАдрес = ПолучитьАдресВВидеСоответствия(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасВидДок", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасДатаДок", '00010101');
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасДатаДокумента", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасНомерДок", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасОрг", "");
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУр", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрИндекс", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрКоды", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрНаселенныйПункт", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрОбласть", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРеквизиты", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрСтранаКод", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрСтранаНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрУлицаНомерДома", "");
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодИндекс", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодНаселенныйПункт", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодОбласть", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодСтранаКод", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодСтранаНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодУлицаНомерДома", "");
			
			Если РеквизитыШапка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				
				// Получатель физ лицо
				
				Если ЗначениеЗаполнено(РеквизитыШапка.ИндивидуальныйПредприниматель) Тогда
				
					ДанныеДокумента = РегламентированнаяОтчетность.ПолучитьДокФизЛица(РеквизитыШапка.ИндивидуальныйПредприниматель, РеквизитыШапка.Дата);
					
					Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
						
						РеквизитыШапка.ОтвЛицоФинУрПасВидДок 		= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеДокумента.ВидДокумента, "КодМВД");
						РеквизитыШапка.ОтвЛицоФинУрПасДатаДок 		= ДанныеДокумента.ДатаВыдачи;
						РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента = ДанныеДокумента.ДатаВыдачи;
						РеквизитыШапка.ОтвЛицоФинУрПасНаименование 	= ДанныеДокумента.Представление;
						РеквизитыШапка.ОтвЛицоФинУрПасНомерДок 		= ДанныеДокумента.Номер;
						РеквизитыШапка.ОтвЛицоФинУрПасОрг 			= ПолучательНаименование;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			ИначеЕсли РеквизитыШапка.ОбособленноеПодразделение Тогда
				
				// Получатель обособленное подразделение
				
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_КПП = РеквизитыШапка.ПокупательКПП;
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_ОГРН = РеквизитыШапка.ОГРН;
				
				РеквизитыШапка.ОтвЛицоФинУрПодСтранаКод = РеквизитыШапка.СтранаНазначенияКод;
				РеквизитыШапка.ОтвЛицоФинУрПодСтранаНаименование = РеквизитыШапка.СтранаНазначенияНаименование;
				РеквизитыШапка.ОтвЛицоФинУрПодНаименование = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрПодИндекс = ПолучательАдрес.Получить("Индекс");
				РеквизитыШапка.ОтвЛицоФинУрПодОбласть = ПолучательАдрес.Получить("Регион");
				РеквизитыШапка.ОтвЛицоФинУрПодУлицаНомерДома = 
					ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
					+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира");
				
			Иначе	
				
				// Получатель юридическое лицо
				
				РеквизитыШапка.ОтвЛицоФинУр = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрИндекс = ПолучательАдрес.Получить("Индекс");
				РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
				РеквизитыШапка.ОтвЛицоФинУрНаименование = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрНаселенныйПункт = ПолучательАдрес.Получить("НаселенныйПункт");
				РеквизитыШапка.ОтвЛицоФинУрОбласть = ПолучательАдрес.Получить("Регион");
				РеквизитыШапка.ОтвЛицоФинУрРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрРФ_КПП = РеквизитыШапка.ПокупательКПП;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ОГРН = РеквизитыШапка.ОГРН;
				РеквизитыШапка.ОтвЛицоФинУрРеквизиты = РеквизитыШапка.ПолучательРеквизиты;
				РеквизитыШапка.ОтвЛицоФинУрСтранаКод = РеквизитыШапка.СтранаНазначенияКод;
				РеквизитыШапка.ОтвЛицоФинУрСтранаНаименование = РеквизитыШапка.СтранаНазначенияНаименование;
				РеквизитыШапка.ОтвЛицоФинУрУлицаНомерДома = 
					ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
					+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира");
				
			КонецЕсли;
			
			РеквизитыШапка.Вставить("ПолучательИндекс", ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ПолучательКоды", РеквизитыШапка.ПолучательКоды);
			РеквизитыШапка.Вставить("ПолучательНаименование", ПолучательНаименование);
			РеквизитыШапка.Вставить("ПолучательНаселенныйПункт", ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ПолучательОбласть", ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ПолучательРБ_УНП", "");
			РеквизитыШапка.Вставить("ПолучательРК_БИН", "");
			РеквизитыШапка.Вставить("ПолучательРК_ИИН", "");
			РеквизитыШапка.Вставить("ПолучательРФ_ИНН", РеквизитыШапка.ПокупательИНН);
			РеквизитыШапка.Вставить("ПолучательРФ_КПП", РеквизитыШапка.ПокупательКПП);
			РеквизитыШапка.Вставить("ПолучательРФ_ОГРН", РеквизитыШапка.ОГРН);
			РеквизитыШапка.Вставить("ПолучательРеквизиты", РеквизитыШапка.ПолучательРеквизиты);
			РеквизитыШапка.Вставить("ПолучательСтранаКод", РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ПолучательСтранаНаименование", РеквизитыШапка.СтранаНазначенияНаименование);
			РеквизитыШапка.Вставить("ПолучательУлицаНомерДома", 
				ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
			
			ПочтовыйАдресОрганизации = "643, " + РеквизитыШапка.ОргПочтовыйАдрес;	
		
			Руководители 					= ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаШапки.Организация, СтрокаШапки.Дата);
			РеквизитыШапка.ОргИсполнитель 	= Руководители.РуководительПредставление;
			РеквизитыШапка.ОргДолжностьИсп 	= Руководители.РуководительДолжностьПредставление;
			
			ФИО = Руководители.РуководительФИО;
			
			РеквизитыШапка.Вставить("ОргИмяИсп",      ФИО.Имя);
			РеквизитыШапка.Вставить("ОргФамилияИсп",  ФИО.Фамилия);
			РеквизитыШапка.Вставить("ОргОтчествоИсп", ФИО.Отчество);
			РеквизитыШапка.Вставить("ОргТелефонИсп",  РеквизитыШапка.ОргТелефонИсп);
			
			РеквизитыШапка.Вставить("ОргИндекс", 			ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОргНаселенныйПункт", 	ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ОргОбласть", 			ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОргУлицаНомерДома", 
				ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
			
			РеквизитыШапка.Вставить("ОргАдресЭлПочты", 			РеквизитыШапка.ОргАдресЭлПочты);
			РеквизитыШапка.Вставить("ОргПочтовыйАдрес", 		ПочтовыйАдресОрганизации);
			РеквизитыШапка.Вставить("ОргСтранаКод", 			РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ОргСтранаНаименование", 	РеквизитыШапка.СтранаНазначенияНаименование);
			
			РеквизитыШапка.Вставить("ОргПочтовыйАдрес", 			ПочтовыйАдресОрганизации);
			РеквизитыШапка.Вставить("мАдресвФорматеДляВыгрузки", 	ПочтовыйАдресОрганизации);
			
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		СтруктураПоиска = Новый Структура("ДокументСсылка", СтрокаШапки.ДокументСсылка);
		НайденныеСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
			
				Если ЗначениеЗаполнено(СтрокаТовары.КодВидаТранспорта) Тогда
					
					РеквизитыШапка.ВидТранспортаКод = СтрокаТовары.КодВидаТранспорта;
					ВидТранспорта = СписокВидовТранспорта.НайтиПоЗначению(СтрокаТовары.КодВидаТранспорта);
					
					Если ВидТранспорта <> Неопределено Тогда
						РеквизитыШапка.ВидТранспортаНаименование = Сред(ВидТранспорта, 6);
					КонецЕсли;
					
				КонецЕсли;
				
				ОтчетныйПериод = СтрокаТовары.ОтчетныйПериод;
				
			КонецЦикла;
			
		КонецЕсли;

		ОсновнаяЧасть1.Параметры.Заполнить(РеквизитыШапка);
		ТабДокумент.Вывести(ОсновнаяЧасть1);
		
		ТаблицаДокументы = Новый ТаблицаЗначений; // Таблица для выгрузки
		ТаблицаДокументы.Колонки.Добавить("НаименованиеДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		ТаблицаДокументы.Колонки.Добавить("НомерДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		ТаблицаДокументы.Колонки.Добавить("ДатаДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		
		НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
		НоваяСтрокаВыгрузки.НаименованиеДокумента = "Договор";
		НоваяСтрокаВыгрузки.НомерДокумента = РеквизитыШапка.НомерДоговора;
		НоваяСтрокаВыгрузки.ДатаДокумента = РеквизитыШапка.ДатаДоговора;
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			// Реквизиты сопроводительных документов и счетов-фактур
			
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТовары.СерияНомерТСД) Тогда
					
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = "Счёт-проформа (проформа-инвойс)";
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТовары.СерияНомерТСД;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТовары.ДатаТСД;
							
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТовары.НомерСчетаФактуры) Тогда
						
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = "Счёт-фактура (инвойс)";
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТовары.НомерСчетаФактуры;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТовары.ДатаСчетаФактуры;
				
				КонецЕсли; 
					
			КонецЦикла;
			
			ТаблицаДокументы.Свернуть("НаименованиеДокумента,НомерДокумента,ДатаДокумента");
			
			Для каждого СтрокаДокумента Из ТаблицаДокументы Цикл
			
				МногострочнаяЧасть1.Параметры.Документы = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 № %2 от %3 '"),
						СтрокаДокумента.НаименованиеДокумента,
						СтрокаДокумента.НомерДокумента, 
						Формат(СтрокаДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy"));
						
				ТабДокумент.Вывести(МногострочнаяЧасть1);
			
			КонецЦикла; 
			
			ТабДокумент.Вывести(ОсновнаяЧасть2);
			
			ТаблицаТоварыДляВыгрузки = ТаблицаТовары.СкопироватьКолонки(); // Таблица для выгрузки
			
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
				
				НоваяСтрокаВыгрузки = ТаблицаТоварыДляВыгрузки.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВыгрузки, СтрокаТовары);
				
				НоваяСтрокаВыгрузки.ЕдИзмТовараКратко = ВРег(СтрокаТовары.ЕдИзмТовараКратко);
				
				МногострочнаяЧасть2.Параметры.Заполнить(СтрокаТовары);
				ТабДокумент.Вывести(МногострочнаяЧасть2);
				
			КонецЦикла;
			
		Иначе
			ТабДокумент.Вывести(МногострочнаяЧасть2);
		КонецЕсли; 
		
		// Подвал
	
		РеквизитыШапка.Вставить("ДатаЗаполнения", Формат(РеквизитыШапка.Дата, "ДФ=yyyy-MM-dd"));
		
		РеквизитыШапка.ДатаЗаполненияД1 = Лев(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 1);
		РеквизитыШапка.ДатаЗаполненияД2 = Прав(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияД", Лев(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 2));
		
		РеквизитыШапка.ДатаЗаполненияМ1 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 4, 1);
		РеквизитыШапка.ДатаЗаполненияМ2 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 5, 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияМ", Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 4, 2));

		РеквизитыШапка.ДатаЗаполненияГ1 = Лев(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 1);
		РеквизитыШапка.ДатаЗаполненияГ2 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 2, 1);
		РеквизитыШапка.ДатаЗаполненияГ3 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 3, 1);
		РеквизитыШапка.ДатаЗаполненияГ4 = Прав(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияГ", Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""));
		
		РеквизитыШапка.ОтчетныйМесяцМ1 = Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 4, 1);
		РеквизитыШапка.ОтчетныйМесяцМ2 = Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 5, 1);
		
		РеквизитыШапка.Вставить("ОтчетныйМесяцМ", Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 4, 2));
		
		РеквизитыШапка.ОтчетныйМесяцГ1 = Лев(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 1);
		РеквизитыШапка.ОтчетныйМесяцГ2 = Сред(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 2, 1);
		РеквизитыШапка.ОтчетныйМесяцГ3 = Сред(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 3, 1);
		РеквизитыШапка.ОтчетныйМесяцГ4 = Прав(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 1);
		
		РеквизитыШапка.Вставить("ОтчетныйМесяцГ", Формат(ОтчетныйПериод, "ДФ=""гггг"""));
		РеквизитыШапка.Вставить("ОтчетныйМесяц",  Формат(ОтчетныйПериод, "ДФ=yyyy-MM")); 
		РеквизитыШапка.Вставить("УникальныйИД",   РеквизитыШапка.ДокументСсылка.УникальныйИдентификатор());
		
		ОсновнаяЧасть3.Параметры.Заполнить(РеквизитыШапка);
		
		ТабДокумент.Вывести(ОсновнаяЧасть3);
		
	КонецЦикла;
	
	Если ТаблицаТоварыДляВыгрузки <> Неопределено Тогда
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДатаСчетаФактуры");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДатаТСД");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДокументСсылка");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("НомерСчетаФактуры");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ОтчетныйПериод");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("СерияНомерТСД");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("НомерСтроки");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("КодВидаТранспорта");
	КонецЕсли;
	
	Возврат Новый Структура(
		"РеквизитыШапка,ТаблицаДокументы,ТаблицаТоварыДляВыгрузки,ТабДокумент",
		РеквизитыШапка, ТаблицаДокументы, ТаблицаТоварыДляВыгрузки, ТабДокумент);
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявлениеОВвозеТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ЗаявлениеОВвозеТоваров", 
			"Заявление о ввозе товаров и уплате косвенных налогов",
			УчетНДСБП.ПечатьЗаявленияОВвозеТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СтатистическаяФормаУчетаПеремещенияТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"СтатистическаяФормаУчетаПеремещенияТоваров", 
			"Статистическая форма учета перемещения товаров",
			УчетНДСБП.ПечатьСтатистическойФормыУчетаПеремещенияТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаВЭлектронномВиде

// Выгружает документ и возвращает свойства файла выгрузки.
//
// Результат:
//	Массив структур или Неопределено, если не удалось сформировать файл выгрузки.
//	Ключи структуры:
//		- АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище.
//		- ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением).
//
Функция ВыгрузитьЗаявлениеОВвозеТоваров(УникальныйИдентификатор = Неопределено, Объект) Экспорт
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Документ не записан. Выгрузка прервана!'");
		
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
	
	СтруктураРеквизитовВыгрузки = Объект.Ссылка.ПолучитьОбъект().СтруктураРеквизитовВыгрузки.Получить();
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	
	ДанныеДокумента = ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивДокументов);
	
	Если Объект.Дата >= '20150101' Тогда
		СодержаниеВыгрузки = ЭлектронноеПредставление2015Кв1(ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	Иначе
		СодержаниеВыгрузки = ЭлектронноеПредставление(ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	КонецЕсли;
	
	Если СодержаниеВыгрузки = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Выгрузка прервана!'");
		
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
	
	Для Каждого ЭлементВыгрузки Из СодержаниеВыгрузки Цикл
		
		Если Результат = Неопределено Тогда
			Результат = Новый Массив;
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		СохраняемыйФайл = Новый ТекстовыйДокумент;
		СохраняемыйФайл.УстановитьТекст(ЭлементВыгрузки.ТекстФайла);
		СохраняемыйФайл.Записать(ИмяВременногоФайла, ЭлементВыгрузки.КодировкаТекста);
		
		ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
		Если УникальныйИдентификатор <> Неопределено Тогда
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
		Иначе
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
		КонецЕсли;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ЭлементВыгрузки.ИмяФайла);
		
		Результат.Добавить(СтруктураВыгрузки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выгружает документ и возвращает свойства файла выгрузки.
//
// Результат:
//	Массив структур или Неопределено, если не удалось сформировать файл выгрузки.
//	Ключи структуры:
//		- АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище.
//		- ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением).
//
Функция ВыгрузитьУчетПеремещенияТоваров(УникальныйИдентификатор = Неопределено, Объект) Экспорт
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Документ не записан. Выгрузка прервана!'");
		
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	
	ДанныеДокумента = ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивДокументов);
	
	СодержаниеВыгрузки = УчетПеремещенияТоваровЭлектронноеПредставление(ДанныеДокумента);
	
	Если СодержаниеВыгрузки = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Выгрузка прервана!'");
		
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
		
	Для Каждого ЭлементВыгрузки Из СодержаниеВыгрузки Цикл
		
		Если Результат = Неопределено Тогда
			Результат = Новый Массив;
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		СохраняемыйФайл = Новый ТекстовыйДокумент;
		СохраняемыйФайл.УстановитьТекст(ЭлементВыгрузки.ТекстФайла);
		СохраняемыйФайл.Записать(ИмяВременногоФайла, ЭлементВыгрузки.КодировкаТекста);
		
		ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
		Если УникальныйИдентификатор <> Неопределено Тогда
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
		Иначе
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
		КонецЕсли;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ЭлементВыгрузки.ИмяФайла);
		
		Результат.Добавить(СтруктураВыгрузки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", ПараметрыВыгрузки.ИмяФайлаСхемы);
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция УчетПеремещенияТоваровЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			УчетПеремещенияТоваровЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист из СтрокаДерева.Строки Цикл
				УчетПеремещенияТоваровЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьСписокВыбораВидовТранспорта(СписокЗначений) Экспорт

	СписокЗначений.Очистить();
	СписокЗначений.Добавить("10", "10 - Морской/речной транспорт");
	СписокЗначений.Добавить("20", "20 - Железнодорожный транспорт");
	СписокЗначений.Добавить("30", "30 - Автодорожный транспорт, за исключением транспортных средств, указанных под кодами 31, 32");
	СписокЗначений.Добавить("31", "31 - Состав транспортных средств (тягач с полуприцепом или прицепом)");
	СписокЗначений.Добавить("32", "32 - Состав транспортных средств (тягач с полуприцепом(-ами) или прицепом(-ами))");
	СписокЗначений.Добавить("40", "40 - Воздушный транспорт");
	СписокЗначений.Добавить("50", "50 - Почтовое отправление");
	СписокЗначений.Добавить("71", "71 - Трубопроводный транспорт");
	СписокЗначений.Добавить("72", "72 - Линии электропередачи");
	СписокЗначений.Добавить("80", "80 - Внутренний водный транспорт");
	СписокЗначений.Добавить("90", "90 - Транспортное средство, перемещающееся в качестве товара своим ходом");
	СписокЗначений.Добавить("99", "99 - Прочее");
	
КонецПроцедуры

Функция ТоварыПоДаннымПоступления(ДанныеОбъекта, ДокументПоступления) Экспорт
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОснованиеВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступления, "ВидОперации");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Сумма КАК ФактурнаяСтоимость,
	|	ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка) КАК ДокументПартии,
	|	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСУплачиваемыйПриИмпортеИзТаможенногоСоюза) КАК СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК КодТНВЭД,
	|	0 КАК НалоговаяБазаНДС,
	|	0 КАК СуммаНДС,
	|	0 КАК СтатСтоимостьДолларыСША,
	|	ПоступлениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента КАК СерияНомерТСД,
	|	ПоступлениеТоваровУслугТовары.Ссылка.ДатаВходящегоДокумента КАК ДатаТСД,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК ДатаПринятияНаУчет,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК НомерСчетаФактуры,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСчетаФактуры,
	|	ПоступлениеТоваровУслугТовары.Ссылка.КодВидаТранспорта КАК КодВидаТранспорта
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &ДокументПоступления";
	
	Если ОснованиеВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" 
		+ "ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОборудование.Номенклатура,
		|	ПоступлениеТоваровУслугОборудование.Количество,
		|	ПоступлениеТоваровУслугОборудование.Сумма,
		|	ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка) КАК ДокументПартии,
		|	ПоступлениеТоваровУслугОборудование.СчетУчета КАК СчетУчета,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСУплачиваемыйПриИмпортеИзТаможенногоСоюза) КАК СчетУчетаНДС,
		|	ПоступлениеТоваровУслугОборудование.СпособУчетаНДС КАК СпособУчетаНДС,
		|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
		|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
		|	ПоступлениеТоваровУслугОборудование.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК КодТНВЭД,
		|	0 КАК НалоговаяБазаНДС,
		|	0 КАК СуммаНДС,
		|	0 КАК СтатСтоимостьДолларыСША,
		|	ПоступлениеТоваровУслугОборудование.Ссылка.НомерВходящегоДокумента КАК СерияНомерТСД,
		|	ПоступлениеТоваровУслугОборудование.Ссылка.ДатаВходящегоДокумента КАК ДатаТСД,
		|	ПоступлениеТоваровУслугОборудование.Ссылка.Дата КАК ДатаПринятияНаУчет,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК НомерСчетаФактуры,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСчетаФактуры,
		|	ПоступлениеТоваровУслугОборудование.Ссылка.КодВидаТранспорта КАК КодВидаТранспорта
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|ГДЕ
		|	ПоступлениеТоваровУслугОборудование.Ссылка = &ДокументПоступления";
		
	ИначеЕсли ОснованиеВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
		И ОснованиеВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
		
		Возврат Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаЗначенийТовары = Запрос.Выполнить().Выгрузить();
	
	СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗначенийТовары, "Номенклатура", Истина);
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ДанныеОбъекта);
	
	СтруктураРеквизитовДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДокументПоступления, "Дата, НомерВходящегоДокумента, ДатаВходящегоДокумента");
	
	НайденныйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(ДокументПоступления);
	
	Если НайденныйСчетФактура <> Неопределено Тогда
		СтруктураРеквизитовСчетаФактуры = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(НайденныйСчетФактура, "НомерВходящегоДокумента, ДатаВходящегоДокумента");
	Иначе
		СтруктураРеквизитовСчетаФактуры = Новый Структура("НомерВходящегоДокумента, ДатаВходящегоДокумента", "", '00010101');
	КонецЕсли;
	
	Для каждого СтрокаТоваров Из ТаблицаЗначенийТовары Цикл
		
		СтрокаТоваров.ДокументПартии  = ДокументПоступления;
		
		СтрокаТоваров.НомерСчетаФактуры  = СтруктураРеквизитовСчетаФактуры.НомерВходящегоДокумента;
		СтрокаТоваров.ДатаСчетаФактуры   = СтруктураРеквизитовСчетаФактуры.ДатаВходящегоДокумента;
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура);
		
		Если ЗначениеЗаполнено(СведенияОНоменклатуре) Тогда
			
			СтрокаТоваров.ЕдиницаИзмерения	  = СведенияОНоменклатуре.ЕдиницаИзмерения;
			СтрокаТоваров.СтавкаНДС			  = СведенияОНоменклатуре.СтавкаНДС;
			СтрокаТоваров.КодТНВЭД 			  = СведенияОНоменклатуре.КодТНВЭД;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТоваров.СтранаПроисхождения) Тогда
				СтрокаТоваров.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
			КонецЕсли; 
			
		КонецЕсли; 
		
		РасчитатьСуммыВТабличнойЧастиНаСервере(СтрокаТоваров, ДанныеОбъекта);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначенийТовары;
	
КонецФункции

Процедура РасчитатьСуммыВТабличнойЧастиНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта) Экспорт
	
	// Рассчитаем по фактурной стоимости налоговую базу в рублях на дату принятия на учет
	Если ДанныеОбъекта.ВалютаДокумента <> ДанныеОбъекта.ВалютаРегламентированногоУчета Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОбъекта.ВалютаДокумента, СтрокаТабличнойЧасти.ДатаПринятияНаУчет);
		СтрокаТабличнойЧасти.НалоговаяБазаНДС = СтрокаТабличнойЧасти.ФактурнаяСтоимость * (СтруктураКурса.Курс/СтруктураКурса.Кратность);
	Иначе
		СтрокаТабличнойЧасти.НалоговаяБазаНДС = СтрокаТабличнойЧасти.ФактурнаяСтоимость;
	КонецЕсли; 
	
	// Рассчитаем по налоговой базе и ставке сумму НДС
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТабличнойЧасти.НалоговаяБазаНДС,
		Ложь,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

	// Рассчитаем по налоговой базе в рублях статистическую стоимость в долларах на дату принятия на учет 
	Если ДанныеОбъекта.ВалютаДолларыСША <> Справочники.Валюты.ПустаяСсылка() Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОбъекта.ВалютаДолларыСША, СтрокаТабличнойЧасти.ДатаПринятияНаУчет);
		СтрокаТабличнойЧасти.СтатСтоимостьДолларыСША = СтрокаТабличнойЧасти.НалоговаяБазаНДС * (СтруктураКурса.Кратность/СтруктураКурса.Курс);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;
	
	Реквизиты.Вставить("ПлательщикНДС", УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	
	Запрос.УстановитьПараметр("СинонимТовары", НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаТаблицаНачисленияНДС(НомераТаблиц);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		ПараметрыПроведения.Вставить("ТаблицаНачисленияНДС", Результат[0].Выгрузить());
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииПечати

Функция ПолучитьАдресВВидеСоответствия(СсылкаНаОбъект, ВидКонтактнойИнформации)
			
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, , ВидКонтактнойИнформации);
	
	ЗначениеКонтактнойИнформации = "";
	ПредставлениеКонтактнойИнформации = "";
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		ЗначениеКонтактнойИнформации = КонтактнаяИнформация[0].ЗначенияПолей;
		ПредставлениеКонтактнойИнформации = КонтактнаяИнформация[0].Представление;
	КонецЕсли; 
	
	РоссийскийАдрес = ПустойРоссийскийАдрес();
	
	Если Найти(ЗначениеКонтактнойИнформации, "АдресРФ") > 0 Тогда
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(ЗначениеКонтактнойИнформации, РоссийскийАдрес);
	Иначе
		СформироватьАдресИзСтрокиВФорматеДевятьЗапятых(ПредставлениеКонтактнойИнформации, РоссийскийАдрес);
	КонецЕсли;
	
	ЗаполнитьНаселенныйПунктВРоссийскомАдресе(РоссийскийАдрес);
	
	Возврат РоссийскийАдрес;

КонецФункции

Функция ПустойРоссийскийАдрес()

	РоссийскийАдрес = 	Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",	        );
	РоссийскийАдрес.Вставить("Регион",          );
	РоссийскийАдрес.Вставить("КодРегиона",      );
	РоссийскийАдрес.Вставить("Район",           );
	РоссийскийАдрес.Вставить("Город",           );
	РоссийскийАдрес.Вставить("НаселенныйПункт", );
	РоссийскийАдрес.Вставить("Улица",           );
	РоссийскийАдрес.Вставить("Дом",             );
	РоссийскийАдрес.Вставить("Корпус",          );
	РоссийскийАдрес.Вставить("Квартира",        );
	
	Возврат РоссийскийАдрес;

КонецФункции

Процедура ЗаполнитьНаселенныйПунктВРоссийскомАдресе(РоссийскийАдрес)

	Если ТипЗнч(РоссийскийАдрес) = Тип("Соответствие") Тогда
		
		Если ЗначениеЗаполнено(РоссийскийАдрес.Получить("Регион"))
			И НЕ ЗначениеЗаполнено(РоссийскийАдрес.Получить("НаселенныйПункт")) Тогда
			
			РоссийскийАдрес.Вставить("НаселенныйПункт", РоссийскийАдрес.Получить("Регион"));
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьАдресИзСтрокиВФорматеДевятьЗапятых(ПредставлениеКонтактнойИнформации, РоссийскийАдрес)
	
	Для Каждого Элемент Из РоссийскийАдрес Цикл
		РоссийскийАдрес[Элемент.Ключ] = "";
	КонецЦикла;

	Если ПредставлениеКонтактнойИнформации = "" Тогда
		Возврат;
	КонецЕсли;
	
	КоординатыПервойЗапятой = Найти(ПредставлениеКонтактнойИнформации, ",");
	
	Если КоординатыПервойЗапятой > 0 Тогда
		// Для иностранного адреса представление содержит наименование страны
		ПредставлениеКонтактнойИнформации = СокрЛП(Сред(ПредставлениеКонтактнойИнформации, КоординатыПервойЗапятой + 1));
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ПредставлениеКонтактнойИнформации, ",") <> 9 Тогда 
		Возврат;
	КонецЕсли;
	
	РоссийскийАдрес = АдресВФормате9ЗапятыхВСтруктуруПорталаТС(ПредставлениеКонтактнойИнформации);
	
КонецПроцедуры

Функция АдресВФормате9ЗапятыхВСтруктуруПорталаТС(АдресВФормате9Запятых)
	 
	КопияАдреса = АдресВФормате9Запятых;
	
	ПоследняяКоордината = 0;
	СоставляющиеАдреса = Новый Массив;
	КоординатыЗапятых = Новый Массив;
	Для Сч = 1 По 12 Цикл
		КоординатаЗапятой = Найти(КопияАдреса, ",");
		Если КоординатаЗапятой > 0 Тогда
			КоординатыЗапятых.Добавить(ПоследняяКоордината + КоординатаЗапятой);
			ПоследняяКоордината = ПоследняяКоордината + КоординатаЗапятой;
			КопияАдреса = Сред(КопияАдреса, КоординатаЗапятой + 1);
		Иначе
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	КоличествоЗапятых = КоординатыЗапятых.Количество();

	СоставляющиеАдреса.Добавить(СокрЛП(Лев(АдресВФормате9Запятых, КоординатыЗапятых[0] - 1)));
	Для Сч = 0 По КоличествоЗапятых - 2 Цикл
		СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[Сч] + 1, КоординатыЗапятых[Сч + 1] - (КоординатыЗапятых[Сч] + 1))));
	КонецЦикла;
	СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[КоличествоЗапятых - 1] + 1)));
	
	Регион = "";
	
	Если СокрЛП(СоставляющиеАдреса[2]) <> "" Тогда
		Регион = СокрЛП(СоставляющиеАдреса[2]);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Регион) Тогда
			Регион = РегламентированнаяОтчетностьВызовСервера.ПолучитьНазваниеРегионаПоКоду(Регион);
		КонецЕсли;
	КонецЕсли;
	
	РоссийскийАдрес = Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",			СоставляющиеАдреса[1]);
	РоссийскийАдрес.Вставить("Регион",          Регион);
	РоссийскийАдрес.Вставить("КодРегиона",      СоставляющиеАдреса[2]);
	РоссийскийАдрес.Вставить("Район",           СоставляющиеАдреса[3]);
	РоссийскийАдрес.Вставить("Город",           СоставляющиеАдреса[4]);
	РоссийскийАдрес.Вставить("НаселенныйПункт", СоставляющиеАдреса[5]);
	РоссийскийАдрес.Вставить("Улица",           СоставляющиеАдреса[6]);
	РоссийскийАдрес.Вставить("Дом",             СоставляющиеАдреса[7]);
	РоссийскийАдрес.Вставить("Корпус",          СоставляющиеАдреса[8]);
	РоссийскийАдрес.Вставить("Квартира",        СоставляющиеАдреса[9]);
	
	Возврат РоссийскийАдрес;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаВЭлектронномВиде

Функция ЭлектронноеПредставление(ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	
	Если ПараметрыВыгрузки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДанныеДокумента, СтруктураРеквизитовВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВыгрузки = ИзвлечьСтруктуруXML(ДанныеДокумента.РеквизитыРаздел1.Дата);
	
	ЗаполнитьДанными(СтруктураВыгрузки, ПараметрыВыгрузки, ДанныеДокумента);
	
	Если НЕ ПроверитьДанные(СтруктураВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ПараметрыВыгрузки);
		
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ПараметрыВыгрузки.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция ЭлектронноеПредставление2015Кв1(ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров2015Кв1(ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	
	Если ПараметрыВыгрузки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки, ДанныеДокумента, СтруктураРеквизитовВыгрузки) Тогда	
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВыгрузки = ИзвлечьСтруктуруXML(ДанныеДокумента.РеквизитыРаздел1.Дата);
	
	ЗаполнитьДанными(СтруктураВыгрузки, ПараметрыВыгрузки, ДанныеДокумента);
	
	Если НЕ ПроверитьДанные(СтруктураВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ПараметрыВыгрузки);
		
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ПараметрыВыгрузки.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция ВыгрузкаВозможна(ПараметрыВыгрузки, ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроверитьВозможностьВыгрузки_ПараметрыВыгрузки(СтатусПроверки, ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	
	ПроверитьВозможностьВыгрузки_Раздел1(СтатусПроверки, ПараметрыВыгрузки, ДанныеДокумента);
	
	ПроверитьВозможностьВыгрузки_Товары(СтатусПроверки, ДанныеДокумента);
	
	ПроверитьВозможностьВыгрузки_Раздел3(СтатусПроверки, ДанныеДокумента);
	
	ПроверитьВозможностьВыгрузки_Приложение(СтатусПроверки, ДанныеДокумента);
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция КодПричиныВозникновенияЗаявления(ПредставлениеПричины)
	
	КодПричины = "0"; // Недопустимый код для обработки ошибочного ввода
	
	Если НРег(СокрЛП(ПредставлениеПричины)) = "первичное заявление" Тогда
		КодПричины = "1";
	ИначеЕсли НРег(СокрЛП(ПредставлениеПричины)) = "взамен ранее представленного" Тогда
		КодПричины = "4";
	ИначеЕсли НРег(СокрЛП(ПредставлениеПричины)) = "корректировка ранее представленного при увеличении цены" Тогда
		КодПричины = "5";
	ИначеЕсли НРег(СокрЛП(ПредставлениеПричины)) = "взамен ранее представленного при частичном возврате товара" Тогда
		КодПричины = "6";
	КонецЕсли;
	
	Возврат КодПричины;
	
КонецФункции

Процедура ПроверитьВозможностьВыгрузки_ПараметрыВыгрузки(СтатусПроверки, ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	Раздел1 = ДанныеДокумента.РеквизитыРаздел1;
	
	КодПричины = КодПричиныВозникновенияЗаявления(СокрЛП(Раздел1.ПричинаЗаявления));
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПричинаЗаявления) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не указана причина возникновения заявления.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(КодПричины, "1,4,5,6") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Указана неверная причина возникновения заявления.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если КодПричины = "4" ИЛИ КодПричины = "5" ИЛИ КодПричины = "6" Тогда
		Если НЕ ЗначениеЗаполнено(Раздел1.НомерОтметки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указан номер отметки о регистрации в налоговом органе ранее представленного заявления.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.ДатаОтметки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указана дата отметки о регистрации в налоговом органе ранее представленного заявления.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если КодПричины = "5" Тогда
			Если НЕ ЗначениеЗаполнено(Раздел1.ИзмениеЦеныМесяц) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не указан месяц, в котором участниками договора (контракта) увеличена цена.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Раздел1.ИзмениеЦеныГод) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не указан год, в котором участниками договора (контракта) увеличена цена.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	КодИФНС               = СтруктураРеквизитовВыгрузки.КодИФНС;
	ОтправительЯвляетсяЮЛ = СтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ;
	
	НаимОтпр      = СтруктураРеквизитовВыгрузки.НаимОтпр;
	ИННЮЛОтпр     = СтруктураРеквизитовВыгрузки.ИННЮЛОтпр;
	КППОтпр       = СтруктураРеквизитовВыгрузки.КППОтпр;
	ФамилияФЛОтпр = СтруктураРеквизитовВыгрузки.ФамилияФЛОтпр;
	ИмяФЛОтпр     = СтруктураРеквизитовВыгрузки.ИмяФЛОтпр;
	
	ПрПодп       = СтруктураРеквизитовВыгрузки.ПрПодп1;
	ФамилияПодп  = СтруктураРеквизитовВыгрузки.ФамилияПодп1;
	ИмяПодп      = СтруктураРеквизитовВыгрузки.ИмяПодп1;
	НаимДовПодп  = СтруктураРеквизитовВыгрузки.НаимДовПодп1;
	НомерДовПодп = СтруктураРеквизитовВыгрузки.НомерДовПодп1;
	ДатаДовПодп  = СтруктураРеквизитовВыгрузки.ДатаДовПодп1;
	
	Если НЕ ЗначениеЗаполнено(КодИФНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнен код налогового органа. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(СокрЛП(КодИФНС))<> 4 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Неверно заполнен код налогового органа. Требуется заполнить 4 символами в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ОтправительЯвляетсяЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(НаимОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнено наименование организации отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИННЮЛОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнен ИНН организации отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КППОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнен КПП организации отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОтправительЯвляетсяЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ФамилияФЛОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнена фамилия отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИмяФЛОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнено имя отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФамилияПодп) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнена фамилия подписанта. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяПодп) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнено имя подписанта. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПрПодп = 3 Тогда
		Если НЕ ЗначениеЗаполнено(НаимДовПодп) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнено наименование документа, подтверждающего полномочия представителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НомерДовПодп) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнен номер документа, подтверждающего полномочия представителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаДовПодп) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнена дата документа, подтверждающего полномочия представителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВыгрузки_Приложение(СтатусПроверки, ДанныеДокумента)
	
	Приложение = ДанныеДокумента.ТаблицаПриложение;
	
	Для Каждого Лист Из Приложение Цикл
		
		Если НЕ ЗаполненЛистРазделаПриложение(Лист) Тогда
			Продолжить;
		КонецЕсли;
				
		// Продавец.
		Если НЕ ЗначениеЗаполнено(Лист.ТипПрод_Пр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан тип продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задано полное наименование (ФИО) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Лист.КодСтраныПродавец) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан код страны продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан адрес местонахождения (жительства) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		Если ПустаяСтрока(Лист.ТипПок_Пр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан тип покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задано полное наименование (ФИО) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Лист.КодСтраныПокупатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан код страны покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Лист.ПокупательМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан адрес местонахождения (жительства) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		Если НЕ ЗначениеЗаполнено(Лист.НомерДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан номер договора(контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ДатаДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задана дата договора(контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВыгрузки_Раздел1(СтатусПроверки, ПараметрыВыгрузки, ДанныеДокумента)
	
	Раздел1 = ДанныеДокумента.РеквизитыРаздел1;
	Раздел3 = ДанныеДокумента.РеквизитыРаздел3;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.НомерЗаяв) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан номер заявления.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДатаДок = ПараметрыВыгрузки.ДатаДокДата;
	Если ДатаДок < '20100701' Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Дата формирования файла выгрузки не может быть раньше 01.07.2010.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Продавец.
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задано полное наименование (ФИО) продавца.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПродавец) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан код страны продавца.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецМестоНахожд) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан адрес местонахождения (жительства) продавца.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Покупатель.
	
	ДлинаИНН = СтрДлина(Раздел1.ПокупательИНН);
	Если ДлинаИНН = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан ИНН покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 неверно задан ИНН покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задано полное наименование (ФИО) покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПокупатель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан код страны покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательМестоНахожд) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан адрес местонахождения (жительства) покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Сведения о контракте.
	
	Если НЕ ЗначениеЗаполнено(Раздел1.НомерДог) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан номер договора(контракта) строки 05.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ДатаДог) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задана дата договора(контракта) строки 05.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
			
	ЕстьДоговорЛизинга = Раздел1.ПрЛизинг;
	ЕстьДоговорПереработки = Раздел1.ПрДавСырья;
	
	Если ЕстьДоговорЛизинга и ЕстьДоговорПереработки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не могут быть одновременно заданы признаки заключения договора лизинга и договора переработки давальческого сырья.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Сведения о комиссионере (посреднике).
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задано полное наименование (ФИО) покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	                                      	
	ЕстьСведенияОКомиссионере = НЕ ПустаяСтрока(Раздел1.ИННОрг_1)
	ИЛИ НЕ ПустаяСтрока(Раздел1.НаимОрг_1)
	ИЛИ НЕ ПустаяСтрока(Раздел1.КодСтраныОрг1)
	ИЛИ НЕ ПустаяСтрока(Раздел1.МестоНахождОрг_1)
	ИЛИ НЕ ПустаяСтрока(Раздел1.НомКонтр_2)
	ИЛИ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2);
	
	Если ЕстьСведенияОКомиссионере Тогда
		
		Если НЕ ЗначениеЗаполнено(Раздел1.НаимОрг_1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 1 не задано полное наименование (ФИО) посредника.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныОрг1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 1 не задан код страны посредника.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.МестоНахождОрг_1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 1 не задан адрес местонахождения (жительства) посредника.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.НомКонтр_2) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 1 не задан номер договора (контракта) посредника.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 1 не задана дата договора (контракта) посредника.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВыгрузки_Раздел3(СтатусПроверки, ДанныеДокумента)
	
	Раздел3 = ДанныеДокумента.РеквизитыРаздел3;
	
	Если ЗначениеЗаполнено(Раздел3.ПродавецИНН_КПП)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательИНН_КПП)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПрод_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПок_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецБайконур)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательБайконур)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг)
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПродавец)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательНаимОрг)
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПокупатель)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд)
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерДог)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаДог)
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерСпецификации)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаСпецификации) Тогда
		
		// Продавец.
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ТипПрод_3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан тип продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИдентификаторПродавца = СокрЛП(Раздел3.ПродавецИНН_КПП);
		Если НЕ ЗначениеЗаполнено(ИдентификаторПродавца) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан идентификационный код (номер) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ИдентификаторПродавца) < 8 ИЛИ СтрДлина(ИдентификаторПродавца) > 14 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 неверно задан идентификационный код (номер) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задано полное наименование (ФИО) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПродавец) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан код страны продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан адрес местонахождения (жительства) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		
		Если ПустаяСтрока(Раздел3.ТипПок_3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан тип покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задано полное наименование (ФИО) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПокупатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан код страны покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан адрес местонахождения (жительства) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		
		Если НЕ ЗначениеЗаполнено(Раздел3.НомерДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан номер договора (контракта) в строке 12.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ДатаДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задана дата договора (контракта) в строке 12.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	СтатусПроверки = Истина;
	
	// Проверка сведений о файле выгрузки.
	ДатаДок = ПараметрыВыгрузки.ДатаДокДата;
	Если ДатаДок < '20100701' Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Дата формирования файла выгрузки не может быть раньше 01.07.2010.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
			
	Раздел1    = ДанныеДокумента.РеквизитыРаздел1;
	Раздел3    = ДанныеДокумента.РеквизитыРаздел3;
	Приложение = ДанныеДокумента.ТаблицаПриложение;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.НомерЗаяв) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задан номер заявления.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ИННКПП = Раздел1.ПродавецИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = Найти(ИННКПП, "/");
		ИННПродавца = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППродавца = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПродавца = СокрЛП(ИННКПП);
		КПППродавца = "";
	КонецЕсли;
	
	ИННКПП = Раздел1.ПокупательИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = Найти(ИННКПП, "/");
		ИННПокупателя = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППокупателя = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПокупателя = СокрЛП(ИННКПП);
		КПППокупателя = "";
	КонецЕсли;
	
	ИННКПП = Раздел1.ИННОрг_1;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = Найти(ИННКПП, "/");
		ИННКомиссионера = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КППКомиссионера = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННКомиссионера = СокрЛП(ИННКПП);
		КППКомиссионера = "";
	КонецЕсли;
	
	// Раздел 1. Продавец.
		
	Если Раздел1.КодСтраныПродавец = "112" ИЛИ Раздел1.КодСтраныПродавец = "398" Тогда
		Если НЕ ЗначениеЗаполнено(ИННПродавца) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан УНП|ИНН|РНН(БИН|ИИН) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Если Раздел1.КодСтраныПродавец = "643" ИЛИ Раздел1.ПродавецБайконур Тогда
		ДлинаИНН = СтрДлина(ИННПродавца);
		
		Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Неверно задан ИНН продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ДлинаИНН = 10 Тогда
			ДлинаКПП = СтрДлина(КПППродавца);
			Если ДлинаКПП = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не задан КПП продавца.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаКПП <> 9 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан КПП продавца.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) продавца.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1. Покупатель.
	
	Если Раздел1.КодСтраныПокупатель = "643" ИЛИ НЕ ПустаяСтрока(Раздел1.ПокупательБайконур) Тогда
		ДлинаИНН = СтрДлина(ИННПокупателя);
		
		Если ДлинаИНН = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан ИНН покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Неверно задан ИНН покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ДлинаИНН = 10 Тогда
			ДлинаКПП = СтрДлина(КПППокупателя);
			Если ДлинаКПП = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не задан КПП продавца.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаКПП <> 9 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан КПП продавца.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя).'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПокупатель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задан код страны организации-покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ(Раздел1.КодСтраныПокупатель = "643" ИЛИ Раздел1.КодСтраныПокупатель = "398") Тогда	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код страны организации-покупателя должен быть 398 или 643.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательМестоНахожд) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1. Сведения о контракте.

	Если НЕ ЗначениеЗаполнено(Раздел1.НомерДог) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задан номер договора(контракта).'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ДатаДог) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задана дата договора(контракта).'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;

	ЕстьДоговорЛизинга = Раздел1.ПрЛизинг;
	ЕстьДоговорПереработки = Раздел1.ПрДавСырья;
	
	Если ЕстьДоговорЛизинга и ЕстьДоговорПереработки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не могут быть одновременно заданы признаки заключения договора лизинга и договора переработки давальческого сырья.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1. Сведения о комиссионере (посреднике).
	
	ЕстьСведенияОКомиссионере = НЕ ПустаяСтрока(Раздел1.ИННОрг_1)
							ИЛИ НЕ ПустаяСтрока(Раздел1.НаимОрг_1)
							ИЛИ НЕ ПустаяСтрока(Раздел1.КодСтраныОрг1)
							ИЛИ НЕ ПустаяСтрока(Раздел1.МестоНахождОрг_1)
							ИЛИ НЕ ПустаяСтрока(Раздел1.НомКонтр_2)
							ИЛИ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2);
	
	Если ЕстьСведенияОКомиссионере Тогда
		
		Если ЗначениеЗаполнено(Раздел1.КодСтраныОрг1) И Найти("112,398,643", Раздел1.КодСтраныОрг1) <> 0 Тогда
			Если ПустаяСтрока(ИННКомиссионера) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не задан УНП|ИНН|РНН(БИН|ИИН) организации.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Раздел1.КодСтраныОрг1 = "643" ИЛИ Раздел1.КомиссионерБайконур Тогда	
			ДлинаИНН = СтрДлина(ИННКомиссионера);
			
			Если ДлинаИНН = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не задан ИНН покупателя.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан ИНН покупателя.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КППКомиссионера);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Не задан КПП продавца.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Неверно задан КПП продавца.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныОрг1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан код страны организации.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.МестоНахождОрг_1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) организации.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.НомКонтр_2) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан номер договора(контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задана дата договора(контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьВозможностьВыгрузки_Товары(СтатусПроверки, ДанныеДокумента);

	// Проверка раздела 3.
		
	ИННКПП = Раздел3.ПродавецИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = Найти(ИННКПП, "/");
		ИННПродавца_Раздел3 = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППродавца_Раздел3 = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПродавца_Раздел3 = СокрЛП(ИННКПП);
		КПППродавца_Раздел3 = "";
	КонецЕсли;
	
	ИННКПП = Раздел3.ПокупательИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = Найти(ИННКПП, "/");
		ИННПокупателя_Раздел3 = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППокупателя_Раздел3 = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПокупателя_Раздел3 = СокрЛП(ИННКПП);
		КПППокупателя_Раздел3 = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Раздел3.ПродавецИНН_КПП) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательИНН_КПП)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПрод_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПок_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецБайконур)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательБайконур)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПродавец) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательНаимОрг) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПокупатель) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерДог) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаДог) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерСпецификации) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаСпецификации) Тогда
	 
		// Продавец.
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ТипПрод_3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан тип организации-продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ИННПродавца_Раздел3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан УНП|ИНН|РНН(БИН|ИИН) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли Раздел3.ПродавецБайконур Тогда
			ДлинаИНН = СтрДлина(ИННПродавца_Раздел3);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан ИНН продавца.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППродавца_Раздел3);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Не задан КПП продавца.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Неверно задан КПП продавца.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(ИННПродавца_Раздел3) < 9 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Неверно задан УНП|ИНН|РНН(БИН|ИИН) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПродавец) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан код страны организации-продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		Иначе
			Если НЕ ЗначениеСодержитсяВСписке(Раздел3.КодСтраныПродавец, "112,398,643") Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Код страны организации-продавца должен быть 398, 112 или 643.'");
				Сообщение.Сообщить();
			Иначе
				Если (Раздел1.КодСтраныПокупатель = "643") И НЕ ЗначениеСодержитсяВСписке(Раздел3.КодСтраныПродавец, "112,398") Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Код страны организации-продавца должен быть 112 или 398.'");
					Сообщение.Сообщить();
				ИначеЕсли (Раздел1.КодСтраныПокупатель = "398") И НЕ ЗначениеСодержитсяВСписке(Раздел3.КодСтраныПродавец, "112,643") Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Код страны организации-продавца должен быть 112 или 643.'");
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		Если ПустаяСтрока(Раздел3.ТипПок_3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан тип организации-покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (Раздел3.КодСтраныПокупатель = "643" ИЛИ Раздел3.КодСтраныПокупатель = "112" ИЛИ Раздел3.КодСтраныПокупатель = "398") И ПустаяСтрока(ИННПокупателя_Раздел3) Тогда	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан УНП|ИНН|РНН(БИН|ИИН) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли Раздел3.КодСтраныПокупатель = "643" ИЛИ НЕ ПустаяСтрока(Раздел3.ПокупательБайконур) Тогда
			ДлинаИНН = СтрДлина(ИННПокупателя_Раздел3);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан ИНН покупателя.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППокупателя_Раздел3);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Не задан КПП покупателя.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Неверно задан КПП покупателя.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
    		Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПокупатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан код страны организации-покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		Если НЕ ЗначениеЗаполнено(Раздел3.НомерДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан номер договора(контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ДатаДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задана дата договора(контракта) в строке 12.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	// Проверка приложений.
	Для Каждого Лист Из Приложение Цикл
		
		Если НЕ ЗаполненЛистРазделаПриложение(Лист) Тогда
			Продолжить;
		КонецЕсли;
		
		ИННКПП = Лист.ПродавецИНН_КПП;
											 
		Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
			ПозицияРазделителя = Найти(ИННКПП, "/");
			ИННПродавца_Приложение = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
			КПППродавца_Приложение = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
		Иначе
			ИННПродавца_Приложение = СокрЛП(ИННКПП);
			КПППродавца_Приложение = "";
		КонецЕсли;
		
		ИННКПП = Лист.ПокупательИНН_КПП;
		Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
			ПозицияРазделителя = Найти(ИННКПП, "/");
			ИННПокупателя_Приложение = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
			КПППокупателя_Приложение = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
		Иначе
			ИННПокупателя_Приложение = СокрЛП(ИННКПП);
			КПППокупателя_Приложение = "";
		КонецЕсли;
		
		// Продавец.
		Если НЕ ЗначениеЗаполнено(Лист.ТипПрод_Пр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан тип организации-продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (Лист.КодСтраныПродавец = "643" ИЛИ Лист.КодСтраныПродавец = "112" ИЛИ Лист.КодСтраныПродавец = "398") И ПустаяСтрока(ИННПродавца_Приложение) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан УНП|ИНН|РНН(БИН|ИИН) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли Лист.КодСтраныПродавец = "643" ИЛИ Лист.ПродавецБайконур Тогда
			ДлинаИНН = СтрДлина(ИННПродавца_Приложение);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан ИНН продавца.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППродавца_Приложение);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Не задан КПП продавца.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Неверно задан КПП продавца.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Лист.КодСтраныПродавец) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Задан код страны организации-продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		Если ПустаяСтрока(Лист.ТипПок_Пр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан тип организации-покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (Лист.КодСтраныПокупатель = "643" ИЛИ Лист.КодСтраныПокупатель = "112" ИЛИ Лист.КодСтраныПокупатель = "398") И ПустаяСтрока(ИННПокупателя_Приложение) Тогда	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан УНП|ИНН|РНН(БИН|ИИН) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли Лист.КодСтраныПокупатель = "643" ИЛИ НЕ ПустаяСтрока(Лист.ПокупательБайконур) Тогда
			ДлинаИНН = СтрДлина(ИННПокупателя_Приложение);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан ИНН покупателя.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППокупателя_Приложение);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Не задан КПП покупателя.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Неверно задан КПП покупателя.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Лист.КодСтраныПокупатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан код страны организации-покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Лист.ПокупательМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		Если НЕ ЗначениеЗаполнено(Лист.НомерДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан номер договора(контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ДатаДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задана дата договора(контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЦикла;
			
	// Проверка заполненности параметров выгрузки, задаваемых на форме выгрузки.
	Если СтруктураРеквизитовВыгрузки.Свойство("КодИФНС") Тогда
		КодИФНС = СтруктураРеквизитовВыгрузки.КодИФНС;
	Иначе
		КодИФНС = "";
	КонецЕсли;
	
	ОтправительЯвляетсяЮЛ = СтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ;
	ИННЮЛОтпр             = СтруктураРеквизитовВыгрузки.ИННЮЛОтпр;
	ИННФЛОтпр             = СтруктураРеквизитовВыгрузки.ИННФЛОтпр;
	ПрПодп1               = СтруктураРеквизитовВыгрузки.ПрПодп1;
	НаимДовПодп1          = СтруктураРеквизитовВыгрузки.НаимДовПодп1;
	НомерДовПодп1         = СтруктураРеквизитовВыгрузки.НомерДовПодп1;
	ДатаДовПодп1          = СтруктураРеквизитовВыгрузки.ДатаДовПодп1;
	ОтправленПочтой       = СтруктураРеквизитовВыгрузки.ОтправленПочтой;
	ПрКурьер              = СтруктураРеквизитовВыгрузки.ПрКурьер;
	НаимДовКурьер         = СтруктураРеквизитовВыгрузки.НаимДовКурьер;
	НомерДовКурьер        = СтруктураРеквизитовВыгрузки.НомерДовКурьер;
	ДатаДовКурьер         = СтруктураРеквизитовВыгрузки.ДатаДовКурьер;
	
	Если НЕ ЗначениеЗаполнено(КодИФНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнен код налогового органа! Необходимо заполнить в форме настроек параметров выгрузки.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если (ОтправительЯвляетсяЮЛ И НЕ ЗначениеЗаполнено(ИННЮЛОтпр)) ИЛИ (НЕ ОтправительЯвляетсяЮЛ И НЕ ЗначениеЗаполнено(ИННФЛОтпр)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнен ИНН отправителя! Необходимо заполнить в форме настроек параметров выгрузки.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли; 

	Если ПрПодп1 = 3 Тогда
		Если НЕ ЗначениеЗаполнено(НаимДовПодп1) ИЛИ НЕ ЗначениеЗаполнено(НомерДовПодп1) ИЛИ НЕ ЗначениеЗаполнено(ДатаДовПодп1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнены сведения о доверенности подписанта 1! Необходимо заполнить в форме настроек параметров выгрузки.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОтправленПочтой И ПрКурьер = 3 Тогда
		Если НЕ ЗначениеЗаполнено(НаимДовКурьер) ИЛИ НЕ ЗначениеЗаполнено(НомерДовКурьер) ИЛИ НЕ ЗначениеЗаполнено(ДатаДовКурьер) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнены сведения о доверенности курьера!. Необходимо заполнить в форме настроек параметров выгрузки.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ПроверитьВозможностьВыгрузки_Товары(СтатусПроверки, ДанныеДокумента)
	
	Раздел1        = ДанныеДокумента.РеквизитыРаздел1;
	ТаблицаРаздел1 = ДанныеДокумента.ТаблицаРаздел1;
	
	ЧислоВыгружаемыхТоваров = 0;
	НомСтроки = 1;
	
	ЕстьДоговорЛизинга = Раздел1.ПрЛизинг;
	ЕстьДоговорПереработки = Раздел1.ПрДавСырья;
	
	Для Каждого СтрТабл Из ТаблицаРаздел1 Цикл
		
		СтрокаЗаполнена = Ложь;
		
		Для Инд = 2 По 13 Цикл
			Если ЗначениеЗаполнено(СтрТабл["П0000100001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=")]) Тогда
				СтрокаЗаполнена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СтрокаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоВыгружаемыхТоваров = ЧислоВыгружаемыхТоваров + 1;
		
		СтруктураСтавок = Новый Структура;
		СтруктураСтавок.Вставить("Ст16", СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000116, "ЧРГ=%; ЧН="), ",", "."), "%", ""));
		СтруктураСтавок.Вставить("Ст17", СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000117, "ЧРГ=%; ЧН="), ",", "."), "%", ""));
		СтруктураСтавок.Вставить("Ст18", СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000118, "ЧРГ=%; ЧН="), ",", "."), "%", ""));
		СтруктураСтавок.Вставить("Ст21", "");
		
		СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
		ПрОсвАкциз = СтруктураСтавокМодиф.Переключатель3;
		ПрОсвНДС   = СтруктураСтавокМодиф.Переключатель1;
		
		СтАкцизТверд = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000116, "ЧРГ=%"), ",", "."), "%", "");
		СтАкцизАдвал = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000117, "ЧРГ=%"), ",", "."), "%", "");
		СтНДС        = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000118, "ЧРГ=%"), ",", "."), "%", "");
		
		СтАкцизТверд = ?(СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)), "0", СтАкцизТверд);
		СтАкцизАдвал = ?(СтАкцизАдвал = "Льгота" ИЛИ СтАкцизАдвал = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизАдвал)), "0", СтАкцизАдвал);
		СтНДС = ?(СтНДС = "Льгота" ИЛИ СтНДС = "Без НДС" ИЛИ СтНДС = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтНДС)), "0", СтНДС);
		
		// Значение единицы измерения дополнительной величины налоговой базы.
		ЗначениеКоличТов = СтрТабл.П000010000105;
		ЗначениеНБАкциз = СтрТабл.П000010000114;
		ЗаполнятьЕдИзмТовНБАкц = (ЗначениеКоличТов <> ЗначениеНБАкциз)
		                       И (ЗначениеКоличТов <>0)
		                       И НЕ (ПрОсвАкциз = 3 ИЛИ ПрОсвАкциз = 4);
		
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000102) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнено наименование товара.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ТНВЭД = СтрТабл.П000010000103;
		Если (ПрОсвАкциз <> 4)	
		 ИЛИ (ПрОсвНДС = 2)
		 ИЛИ (ПрОсвНДС = 1 И СтНДС = 10) Тогда
			Если ПустаяСтрока(ТНВЭД) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не заполнен код ТН ВЭД.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Единица измерения.
		Если (НЕ ЕстьДоговорЛизинга И НЕ ЕстьДоговорПереработки)
		 ИЛИ (НЕ ПустаяСтрока(СтрТабл.П000010000105)) Тогда
			Если ПустаяСтрока(СтрТабл.П000010000104) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не заполнена единица измерения товара.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Количество товара.
		Если (НЕ ЕстьДоговорЛизинга И НЕ ЕстьДоговорПереработки)
		 ИЛИ (НЕ ПустаяСтрока(СтрТабл.П000010000104)) Тогда
			Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000105) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не указано количество товара.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СтоимостьТовара = СтрТабл.П000010000106;
		Если НЕ ЗначениеЗаполнено(СтоимостьТовара) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнена стоимость товара.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КодВалюты = СтрТабл.П000010000107;
		Если ПустаяСтрока(КодВалюты) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указана валюта товара.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КурсВалюты = СтрТабл.П000010000108;
		
		БазаВалюты = 0;
				
		Если НЕ ЗначениеЗаполнено(КурсВалюты) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указан курс валюты товара.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли КодВалюты = "643" Тогда 
			Если КурсВалюты <> 1 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Для валюты с кодом 643 (Российский рубль) курс валюты должен равняться 1.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Транспортный (товаросопроводительный) документ.
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000109) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указаны серия, номер транспортного документа.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000110) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указана дата транспортного документа.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Счет-фактура.
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000111) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указан номер счета-фактуры.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000112) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указана дата счета-фактуры.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Дата принятия на учет товара.
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000113) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнена дата принятия товара на учет.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
				
		НалоговаяБазаНДС = СтрТабл.П000010000115;
		Если НалоговаяБазаНДС <= 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнена налоговая база (НДС).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
						
		Если ПрОсвНДС = 1 И СтНДС <> "10" И СтНДС <> "18" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Неверно задана ставка НДС.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
						
		Если ПрОсвНДС = 1 И СтрТабл.П000010000120 <= 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задана сумма НДС.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
	Если ЧислоВыгружаемыхТоваров = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполненЛистРазделаПриложение(ЛистРаздела)
	
	Результат = ЗначениеЗаполнено(ЛистРаздела.ТипПрод_Пр)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПродавецИНН_КПП)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПродавецНаимОрг)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.КодСтраныПродавец)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПродавецМестоНахожд)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПродавецБайконур)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ТипПок_Пр)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПокупательИНН_КПП)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПокупательНаимОрг)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.КодСтраныПокупатель)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПокупательМестоНахожд)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПокупательБайконур)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.НомерДог)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ДатаДог)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.НомерСпецификации)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ДатаСпецификации);
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

Функция СформироватьСтруктуруПараметров(ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если СтруктураРеквизитовВыгрузки.Количество() = 0 Тогда
		Возврат ПараметрыВыгрузки;
	КонецЕсли;
		
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(ДанныеДокумента.РеквизитыРаздел1.Организация);

	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ДатаДокДата", ТекущаяДатаСеанса());
	
	Если СтруктураРеквизитовВыгрузки.Свойство("КодИФНС") Тогда
		ПараметрыВыгрузки.Вставить("КодИФНС", СтруктураРеквизитовВыгрузки.КодИФНС);
	КонецЕсли;
		
	ПараметрыВыгрузки.Вставить("ПрОтпр", Строка(СтруктураРеквизитовВыгрузки.ПрОтпр));

	ПараметрыВыгрузки.Вставить("ПрОтпр", Формат(СтруктураРеквизитовВыгрузки.ПрОтпр, ""));
															  	
	Если СтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ Тогда
		
		ПараметрыВыгрузки.Вставить("НаимОтпр", 		 СтруктураРеквизитовВыгрузки.НаимОтпр);
		ПараметрыВыгрузки.Вставить("ИННЮЛОтпр",		 СтруктураРеквизитовВыгрузки.ИННЮЛОтпр);
		ПараметрыВыгрузки.Вставить("КППОтпр",        СтруктураРеквизитовВыгрузки.КППОтпр);
		
	Иначе
		
		ПараметрыВыгрузки.Вставить("ИННФЛОтпр",      СтруктураРеквизитовВыгрузки.ИННФЛОтпр);	
		ПараметрыВыгрузки.Вставить("ФамилияФЛОтпр",  СтруктураРеквизитовВыгрузки.ФамилияФЛОтпр);
		ПараметрыВыгрузки.Вставить("ИмяФЛОтпр",      СтруктураРеквизитовВыгрузки.ИмяФЛОтпр);
		ПараметрыВыгрузки.Вставить("ОтчествоФЛОтпр", СтруктураРеквизитовВыгрузки.ОтчествоФЛОтпр);	
		
	КонецЕсли;

	Если СтруктураРеквизитовВыгрузки.ПрОтпр = 1 Тогда
		
		ПараметрыВыгрузки.Вставить("ПрПодп1", Формат(СтруктураРеквизитовВыгрузки.ПрПодп1, ""));
		
		Если НЕ ПустаяСтрока(СтруктураРеквизитовВыгрузки.ФамилияПодп2 + СтруктураРеквизитовВыгрузки.ИмяПодп2 + СтруктураРеквизитовВыгрузки.ОтчествоПодп2) Тогда
			
			ПараметрыВыгрузки.Вставить("ПрПодп2", "4");
			ПараметрыВыгрузки.Вставить("ИННФЛПодп2",     СтруктураРеквизитовВыгрузки.ИННФЛПодп2);
			ПараметрыВыгрузки.Вставить("ДолжностьПодп2", СтруктураРеквизитовВыгрузки.ДолжностьПодп2);
			
			ПараметрыВыгрузки.Вставить("ФамилияПодп2",  СтруктураРеквизитовВыгрузки.ФамилияПодп2);
			ПараметрыВыгрузки.Вставить("ИмяПодп2",      СтруктураРеквизитовВыгрузки.ИмяПодп2);
			ПараметрыВыгрузки.Вставить("ОтчествоПодп2", СтруктураРеквизитовВыгрузки.ОтчествоПодп2);
			
			Если СтруктураРеквизитовВыгрузки.Свойство("НаимДовПодп2") Тогда
				
				ПараметрыВыгрузки.Вставить("НаимДовПодп2",  СтруктураРеквизитовВыгрузки.НаимДовПодп2);
				ПараметрыВыгрузки.Вставить("НомерДовПодп2", СтруктураРеквизитовВыгрузки.НомерДовПодп2);
				ПараметрыВыгрузки.Вставить("ДатаДовПодп2",  Формат(СтруктураРеквизитовВыгрузки.ДатаДовПодп2, "ДФ=дд.ММ.гггг"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовВыгрузки.ПрПодп1 = 3 Тогда
		
		ПараметрыВыгрузки.Вставить("НаимДовПодп1",		СтруктураРеквизитовВыгрузки.НаимДовПодп1);
		ПараметрыВыгрузки.Вставить("НомерДовПодп1",		СтруктураРеквизитовВыгрузки.НомерДовПодп1);
		ПараметрыВыгрузки.Вставить("ДатаДовПодп1",		Формат(СтруктураРеквизитовВыгрузки.ДатаДовПодп1, "ДФ=дд.ММ.гггг"));
		
	КонецЕсли;
															  	
	ПараметрыВыгрузки.Вставить("ИННФЛПодп1",     СтруктураРеквизитовВыгрузки.ИННФЛПодп1);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп1", СтруктураРеквизитовВыгрузки.ДолжностьПодп1);
															  	
	ПараметрыВыгрузки.Вставить("ФамилияПодп1",  СтруктураРеквизитовВыгрузки.ФамилияПодп1);
	ПараметрыВыгрузки.Вставить("ИмяПодп1",      СтруктураРеквизитовВыгрузки.ИмяПодп1);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп1", СтруктураРеквизитовВыгрузки.ОтчествоПодп1);
	
	Если НЕ СтруктураРеквизитовВыгрузки.ОтправленПочтой Тогда
		
		ПараметрыВыгрузки.Вставить("ПрКурьер",       Формат(СтруктураРеквизитовВыгрузки.ПрКурьер, ""));
		ПараметрыВыгрузки.Вставить("ИННФЛКурьер",    СтруктураРеквизитовВыгрузки.ИННФЛКурьер);
		
		ПараметрыВыгрузки.Вставить("ФамилияКурьер",  СтруктураРеквизитовВыгрузки.ФамилияКурьер);
		ПараметрыВыгрузки.Вставить("ИмяКурьер",      СтруктураРеквизитовВыгрузки.ИмяКурьер);
		ПараметрыВыгрузки.Вставить("ОтчествоКурьер", СтруктураРеквизитовВыгрузки.ОтчествоКурьер);
		
		Если СтруктураРеквизитовВыгрузки.ПрКурьер = 3 Тогда
			
			ПараметрыВыгрузки.Вставить("НаимДовКурьер",  СтруктураРеквизитовВыгрузки.НаимДовКурьер);
			ПараметрыВыгрузки.Вставить("НомерДовКурьер", СтруктураРеквизитовВыгрузки.НомерДовКурьер);
			ПараметрыВыгрузки.Вставить("ДатаДовКурьер",  Формат(СтруктураРеквизитовВыгрузки.ДатаДовКурьер, "ДФ=дд.ММ.гггг"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",             "ON_ZVLRPOK_2_430_14_05_06_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"ON_ZVLRPOK");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");

	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СформироватьСтруктуруПараметров2015Кв1(ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если СтруктураРеквизитовВыгрузки.Количество() = 0 Тогда
		Возврат ПараметрыВыгрузки;
	КонецЕсли;
		
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(ДанныеДокумента.РеквизитыРаздел1.Организация);

	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ДатаДокДата", ТекущаяДатаСеанса());
	
	Если СтруктураРеквизитовВыгрузки.Свойство("КодИФНС") Тогда
		ПараметрыВыгрузки.Вставить("КодНО", СтруктураРеквизитовВыгрузки.КодИФНС);
	КонецЕсли;
																	  	
	Если СтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ Тогда
		
		ПараметрыВыгрузки.Вставить("НаимОтпр", 		 СтруктураРеквизитовВыгрузки.НаимОтпр);
		ПараметрыВыгрузки.Вставить("ИННЮЛОтпр",		 СтруктураРеквизитовВыгрузки.ИННЮЛОтпр);
		ПараметрыВыгрузки.Вставить("КППОтпр",        СтруктураРеквизитовВыгрузки.КППОтпр);
		
	Иначе
		
		ПараметрыВыгрузки.Вставить("ИННФЛОтпр",      СтруктураРеквизитовВыгрузки.ИННФЛОтпр);	
		ПараметрыВыгрузки.Вставить("ФамилияФЛОтпр",  СтруктураРеквизитовВыгрузки.ФамилияФЛОтпр);
		ПараметрыВыгрузки.Вставить("ИмяФЛОтпр",      СтруктураРеквизитовВыгрузки.ИмяФЛОтпр);
		ПараметрыВыгрузки.Вставить("ОтчествоФЛОтпр", СтруктураРеквизитовВыгрузки.ОтчествоФЛОтпр);	
		
	КонецЕсли;

	ПараметрыВыгрузки.Вставить("ПрПодп", Формат(СтруктураРеквизитовВыгрузки.ПрПодп1, ""));
	
	Если СтруктураРеквизитовВыгрузки.ПрПодп1 = 3 Тогда

		ПараметрыВыгрузки.Вставить("НаимДовПодп",  СтруктураРеквизитовВыгрузки.НаимДовПодп1);
		ПараметрыВыгрузки.Вставить("НомерДовПодп", СтруктураРеквизитовВыгрузки.НомерДовПодп1);
		ПараметрыВыгрузки.Вставить("ДатаДовПодп",  Формат(СтруктураРеквизитовВыгрузки.ДатаДовПодп1, "ДФ=дд.ММ.гггг"));

	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИННФЛПодп",     СтруктураРеквизитовВыгрузки.ИННФЛПодп1);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп", СтруктураРеквизитовВыгрузки.ДолжностьПодп1);
	
	ПараметрыВыгрузки.Вставить("ФамилияПодп",  СтруктураРеквизитовВыгрузки.ФамилияПодп1);
	ПараметрыВыгрузки.Вставить("ИмяПодп",      СтруктураРеквизитовВыгрузки.ИмяПодп1);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп", СтруктураРеквизитовВыгрузки.ОтчествоПодп1);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",             "ON_ZVLRPOK_2_430_14_05_07_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "ON_ZVLRPOK");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");

	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл2015Кв1(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИзвлечьСтруктуруXML(Дата)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если Дата >= '20150101' Тогда
		Макет = Отчеты.РегламентированныйОтчетЗаявлениеОВвозеТоваров.ПолучитьМакет("СхемаВыгрузки507");
	Иначе
		Макет = Отчеты.РегламентированныйОтчетЗаявлениеОВвозеТоваров.ПолучитьМакет("СтруктураXML506");
	КонецЕсли;
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда	
				
				РодительскийУзел = ДеревоСтруктуры;
				
				Если Уровень <> 0 Тогда
					
					Для Инд = 1 По НомСтр - 2 Цикл
						
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						
						Если Узел <> Неопределено Тогда
							
							РодительскийУзел = Узел;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки, ДанныеДокумента)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеДокумента);
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеДокумента);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки);
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СформироватьИдФайл(ПараметрыВыгрузки)
			
	ИдентОтпр = "";
	
	Если ПараметрыВыгрузки.Свойство("ИННФЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННФЛОтпр;
	ИначеЕсли ПараметрыВыгрузки.Свойство("ИННЮЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННЮЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННЮЛОтпр + ПараметрыВыгрузки.КППОтпр;
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
				+ "_" + ПараметрыВыгрузки.КодИФНС
				+ "_" + ПараметрыВыгрузки.КодИФНС
				+ "_" + ИдентОтпр
				+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);			
			
КонецФункции

Функция СформироватьИдФайл2015Кв1(ПараметрыВыгрузки)				
	
	ИдентОтпр = "";
	
	Если ПараметрыВыгрузки.Свойство("ИННФЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННФЛОтпр;
	ИначеЕсли ПараметрыВыгрузки.Свойство("ИННЮЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННЮЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННЮЛОтпр + ПараметрыВыгрузки.КППОтпр;
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
				+ "_" + ПараметрыВыгрузки.КодНО
				+ "_" + ПараметрыВыгрузки.КодНО
				+ "_" + ИдентОтпр
				+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);			
			
КонецФункции

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел, ДанныеДокумента)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеДокумента, ПараметрыВыгрузки, Узел);
		
	КонецЕсли;
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			
			Если НЕ УсловиеВыполнено(ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				
				Узел.Строки.Удалить(ТекСтр);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр, ДанныеДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеДокумента, ПараметрыВыгрузки, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		
		Если ДанныеДокумента.Свойство(Узел.Раздел) Тогда
			ПоказателиРаздела = ДанныеДокумента[Узел.Раздел];
		Иначе
			ПоказателиРаздела = ДанныеДокумента.РеквизитыШапка;
		КонецЕсли;
				
		Для Каждого Эл Из ПоказателиРаздела Цикл
			
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УсловиеВыполнено(ПараметрыВыгрузки, Условие)
	
	Попытка
		
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "ПараметрыВыгрузки."));
		
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось вычислить выражение-условие: %1!'"), Условие);
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось вычислить выражение-условие: %1!'"), Условие);
			
		Сообщение.Сообщить();
		
		Возврат Истина;
		
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, ДанныеДокумента)
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти = Стр.Код Тогда
				
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, ДанныеДокумента);
				
				Если ДанныеДокумента.РеквизитыРаздел1.Дата >= '20150101' Тогда
					
					ЗаполнитьСодержательнуюЧасть2015Кв1(Стр, ДанныеДокумента);
					
				Иначе
					
					ЗаполнитьСодержательнуюЧасть(Стр, ДанныеДокумента);
					
				КонецЕсли;
				
			Иначе
				
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, ДанныеДокумента);
				
			КонецЕсли;
			
		Иначе
			
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
					
				Иначе
					
					Стр.Значение = "";
					
				КонецЕсли;
				
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
					
				КонецЕсли;
				
			Иначе
				
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
		
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда
			
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
			
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0)
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
		
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Формирование XML: Длина значения показателя ""%1"" меньше минимально возможной (%2 < %3)'"), УчетПеремещенияТоваровПредставлениеПоказателя(Стр), ДлинаЗначения, Стр.МинРазмерность);
			Сообщение.Сообщить();
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Формирование XML: Длина значения показателя ""%1"" больше максимально возможной (%2 > %3)'"), УчетПеремещенияТоваровПредставлениеПоказателя(Стр), ДлинаЗначения, Стр.МаксРазмерность);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ДанныеДокумента)
	
	Раздел1        = ДанныеДокумента.РеквизитыРаздел1;
	Раздел3        = ДанныеДокумента.РеквизитыРаздел3;
	ТаблицаРаздел1 = ДанныеДокумента.ТаблицаРаздел1;
	Приложение     = ДанныеДокумента.ТаблицаПриложение;
	Сведения       = ДанныеДокумента.ТаблицаВыпискиБанка;
	Зачет          = ДанныеДокумента.ТаблицаСведенияОЗачете;

	
	Узел_СвЗвл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвЗвл");
	ЗаполнитьДаннымиУзел(Раздел1, Узел_СвЗвл, ДанныеДокумента);
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "НомерДокНП", Формат(Раздел1.НомерЗаяв,"ЧН=; ЧГ=0"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ДатаДокНП", Формат(Раздел1.Дата, "ДФ=дд.ММ.гггг"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПрЛизинг", ?(НЕ Раздел1.ПрЛизинг, "0", "1"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПрДавСырья", ?(НЕ Раздел1.ПрДавСырья, "0", "1"));
	
	Узел_СвКонтракт1 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт1");
	
	Если Раздел1.ПродавецБайконур Тогда
		УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ПрБкнрПродР1", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ИдНомПродР1", РазделитьИННКПП(Раздел1.ПродавецИНН_КПП).ИНН);
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "КПППродР1", РазделитьИННКПП(Раздел1.ПродавецИНН_КПП).КПП);
	
	КодКЛАДРПродР1 = КодКЛАДРПоАдресу(Раздел1.ПродавецАдрес);
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "КодКЛАДРПродР1", КодКЛАДРПродР1);
	
	Если Раздел1.ПокупательБайконур Тогда
		УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ПрБкнрПокР1", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ИдНомПокР1", РазделитьИННКПП(Раздел1.ПокупательИНН_КПП).ИНН);
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "КПППокР1", РазделитьИННКПП(Раздел1.ПокупательИНН_КПП).КПП);
	
	КодКЛАДРПокР1 = КодКЛАДРПоАдресу(Раздел1.ПокупательАдрес);
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "КодКЛАДРПокР1", КодКЛАДРПокР1);
	
	Узел_СвКонтр1 = ПолучитьПодчиненныйЭлемент(Узел_СвКонтракт1, "СвКонтр1");
	ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтр1, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификации.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификации[Сч - 1];
		
		УзелСвСпециф = СкопироватьУзел(Узел_СвКонтр1, ШаблонУзелСвСпециф);
		УстановитьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	УзелСвКонтрКомисс = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтрКомисс");
	Если Раздел1.КомиссионерБайконур Тогда	
		УстановитьЗначениеЭлемента(УзелСвКонтрКомисс, "ПрБкнрОрг", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(УзелСвКонтрКомисс, "ИдНомОрг", РазделитьИННКПП(Раздел1.ИННОрг_1).ИНН);
	УстановитьЗначениеЭлемента(УзелСвКонтрКомисс, "КППОрг", РазделитьИННКПП(Раздел1.ИННОрг_1).КПП);
	
	КодКЛАДРОрг = КодКЛАДРПоАдресу(Раздел1.КомиссионерАдрес);
	УстановитьЗначениеЭлемента(УзелСвКонтрКомисс, "КодКЛАДРОрг", КодКЛАДРОрг);
	
	УзелСвКонтракт2 = ПолучитьПодчиненныйЭлемент(УзелСвКонтрКомисс, "СвКонтракт2");
	
	ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтракт2, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификации07.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификации07[Сч - 1];
		
		УзелСвСпециф = СкопироватьУзел(УзелСвКонтракт2, ШаблонУзелСвСпециф);
		УстановитьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	ШаблонУзелСвТовар = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвТовар");
	ЧислоВыгруженныхСтрок = 0;
	
	Для Каждого СтрТабл Из ТаблицаРаздел1 Цикл
		
		Если ЗначениеЗаполнено(СтрТабл.П000010000102) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			УзелСвТовар = СкопироватьУзел(Узел_СвЗвл, ШаблонУзелСвТовар);
			ВыгрузитьСтрокуМногострочнойЧасти(СтрТабл, УзелСвТовар);
			
			УстановитьЗначениеЭлемента(УзелСвТовар, "НомТовПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
			
			ИмяСлужебногоПоля = "П000010000122";
			
			Если НЕ ТаблицаРаздел1.Колонки.Найти(ИмяСлужебногоПоля) = Неопределено И СокрЛП(СтрТабл[ИмяСлужебногоПоля]) <> "" Тогда
				ИмяПоляЕдИзм = ИмяСлужебногоПоля;
			Иначе
				ИмяПоляЕдИзм = "П000010000104";
			КонецЕсли;
			
			УстановитьЗначениеЭлемента(УзелСвТовар, "ЕдИзмТов", СокрЛП(СтрТабл[ИмяПоляЕдИзм]));
			
			КодВалюты = СокрЛП(СтрТабл.П000010000107);
			БазаВалюты = 0;
			Если НЕ ТаблицаРаздел1.Колонки.Найти("П000010000125") = Неопределено Тогда
				БазаВалюты = СтрТабл.П000010000125;
			КонецЕсли;
			Если КодВалюты = "643" ИЛИ БазаВалюты = 0 Тогда
				БазаВалюты = 1;
			КонецЕсли;
			УстановитьЗначениеЭлемента(УзелСвТовар, "БазаВал", БазаВалюты);
			
			СтАкцизТверд = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000116, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			СтАкцизАдвал = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000117, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			СтНДС        = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000118, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			
			СтруктураСтавок = Новый Структура;
			СтруктураСтавок.Вставить("Ст16", СтАкцизТверд);
			СтруктураСтавок.Вставить("Ст17", СтАкцизАдвал);
			СтруктураСтавок.Вставить("Ст18", СтНДС);
			СтруктураСтавок.Вставить("Ст21", "");
			
			СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
			
			ПрОсвАкциз = СтруктураСтавокМодиф.Переключатель3;
			ПрОсвНДС   = СтруктураСтавокМодиф.Переключатель1;
			УстановитьЗначениеЭлемента(УзелСвТовар, "ПрОсвАкциз", ПрОсвАкциз);
			УстановитьЗначениеЭлемента(УзелСвТовар, "ПрОсвНДС",   ПрОсвНДС);
			УстановитьЗначениеЭлемента(УзелСвТовар, "ЕдИзмТовНБАкц", "");
			
			ЗаполненаТвердаяСтавкаАкцизов = (СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ (ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)) И СтАкцизТверд <> "0"));
			СтАкцизТверд = ?(СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)), "0.00", СтАкцизТверд);
			СтАкцизАдвал = ?(СтАкцизАдвал = "Льгота" ИЛИ СтАкцизАдвал = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизАдвал)), "0.00", СтАкцизАдвал);
			СтНДС = ?(СтНДС = "Льгота" ИЛИ СтНДС = "Без НДС" ИЛИ СтНДС = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтНДС)), "0.00", СтНДС);
			
			Если ЗаполненаТвердаяСтавкаАкцизов Тогда
				УстановитьЗначениеЭлемента(УзелСвТовар, "СтАкцизТверд", ?(ПрОсвАкциз = 2, "-1", СтАкцизТверд));
			Иначе
				УстановитьЗначениеЭлемента(УзелСвТовар, "СтАкцизАдвал", ?(ПрОсвАкциз = 2, "-1", СтАкцизАдвал));
			КонецЕсли;
			УстановитьЗначениеЭлемента(УзелСвТовар, "СтНДС", ?(ПрОсвНДС = 2,   "-1", СтНДС));
			
			// Сведения о товарно-транспортных документах.
			ШаблонУзелСвТСД = ПолучитьПодчиненныйЭлемент(УзелСвТовар, "СвТСД");
						
			ТТДНомер = ВРЕГ(СокрЛП(СтрТабл.П000010000109));
			ТТДДата = СтрТабл.П000010000110;
				
			Если НЕ ЗначениеЗаполнено(ТТДНомер) И НЕ ЗначениеЗаполнено(ТТДДата) Тогда
				Продолжить;
			КонецЕсли;
				
			УзелСвТСД = СкопироватьУзел(УзелСвТовар, ШаблонУзелСвТСД);
			УстановитьЗначениеЭлемента(УзелСвТСД, "СерНомТСД", ТТДНомер);
			УстановитьЗначениеЭлемента(УзелСвТСД, "ДатаТСД", Формат(ТТДДата, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выгрузка раздела 3.
	УзелСвКонтракт3 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт3");
	ЗаполнитьДаннымиУзел(Раздел3, УзелСвКонтракт3, ДанныеДокумента);
	
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ТипПродР3", Раздел3.ТипПрод_3);
	
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ТипПокР3", Раздел3.ТипПок_3);
			
	Если НЕ Раздел3.ПродавецБайконур = Неопределено
	   И Раздел3.ПродавецБайконур Тогда
		УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ПрБкнрПродР3", "1");
	КонецЕсли;
	Если НЕ Раздел3.ПокупательБайконур = Неопределено
	   И Раздел3.ПокупательБайконур Тогда
		УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ПрБкнрПокР3", "1");
	КонецЕсли;
	
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ИдНомПродР3", РазделитьИННКПП(Раздел3.ПродавецИНН_КПП).ИНН);
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "КПППродР3", РазделитьИННКПП(Раздел3.ПродавецИНН_КПП).КПП);
	
	КодКЛАДРПродР3 = КодКЛАДРПоАдресу(Раздел3.ПродавецАдрес);
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "КодКЛАДРПродР3", КодКЛАДРПродР3);
	
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ИдНомПокР3", РазделитьИННКПП(Раздел3.ПокупательИНН_КПП).ИНН);
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "КПППокР3", РазделитьИННКПП(Раздел3.ПокупательИНН_КПП).КПП);
	
	КодКЛАДРПокР3 = КодКЛАДРПоАдресу(Раздел3.ПокупательАдрес);
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "КодКЛАДРПокР3", КодКЛАДРПокР3);
	
	УзелСвКонтрР3 = ПолучитьПодчиненныйЭлемент(УзелСвКонтракт3, "СвКонтрР3");
	ПрототипУзла_УзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтрР3, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификацииРаздел3.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификацииРаздел3[Сч - 1];
		
		Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_УзелСвСпециф);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	// Выгружаем сведения о выписках раздела "Сведения"
	
	НомерБанкаПП = 0;
	ЧислоВыгруженныхСтрок = 0;
	ШаблонУзелСвПлДок = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвПлДок");
	
	Для Каждого ДанныеЛиста Из Сведения Цикл
		
		ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
		
		УзелСвПлДок = СкопироватьУзел(УзелРодитель, ШаблонУзелСвПлДок);
		ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелСвПлДок, ДанныеДокумента);
		
		ШаблонУзелСвВыпБанк = ПолучитьПодчиненныйЭлемент(УзелСвПлДок, "СвВыпБанк");
			
		УзелСвВыпБанк = СкопироватьУзел(УзелСвПлДок, ШаблонУзелСвВыпБанк);
		ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛиста, УзелСвВыпБанк);
		УстановитьЗначениеЭлемента(УзелСвВыпБанк, "НомВыпПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
		
		Если НЕ УзелПуст(УзелСвПлДок) Тогда
			НомерБанкаПП = НомерБанкаПП + 1;
			УстановитьЗначениеЭлемента(УзелСвПлДок, "НомБПП", Формат(НомерБанкаПП, "ЧГ="));
		КонецЕсли;
		
	КонецЦикла;
	
	// Выгружаем сведения раздела "Зачет"
	
	ЧислоВыгруженныхСтрок = 0;
	ШаблонУзелСвПлДок = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвПлДок");
	
	Для Каждого ДанныеЛиста Из Зачет Цикл
		
		ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
		
		УзелСвПлДок = СкопироватьУзел(УзелРодитель, ШаблонУзелСвПлДок);
		ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелСвПлДок, ДанныеДокумента);
		
		ШаблонУзелСвЗачет = ПолучитьПодчиненныйЭлемент(УзелСвПлДок, "СвЗачет");
		
		УзелСвЗачет = СкопироватьУзел(УзелСвПлДок, ШаблонУзелСвЗачет);
		ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛиста, УзелСвЗачет);
		УстановитьЗначениеЭлемента(УзелСвЗачет, "НомПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
		
		Если НЕ УзелПуст(УзелСвПлДок) Тогда
			НомерБанкаПП = НомерБанкаПП + 1;
			УстановитьЗначениеЭлемента(УзелСвПлДок, "НомБПП", Формат(НомерБанкаПП, "ЧГ="));
		КонецЕсли;
		
	КонецЦикла;
	
	// Выгружаем приложения.
	НомерПриложения = 0;
	
	ШаблонУзелСвКонтрПр = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвКонтрПр");
	
	Для Каждого ЛистПриложения Из Приложение Цикл
		
		УзелСвКонтрПр = СкопироватьУзел(УзелРодитель, ШаблонУзелСвКонтрПр);
		ЗаполнитьДаннымиУзел(ЛистПриложения, УзелСвКонтрПр, ДанныеДокумента);
		
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ТипПродП", ЛистПриложения.ТипПрод_Пр);
		
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ТипПокП", ЛистПриложения.ТипПок_Пр);
		
		Если НЕ ПустаяСтрока(ЛистПриложения.ПродавецБайконур) Тогда
			УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ПрБкнрПродП", "1");
		КонецЕсли;
		Если НЕ ПустаяСтрока(ЛистПриложения.ПокупательБайконур) Тогда
			УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ПрБкнрПокП", "1");
		КонецЕсли;
		
		КодКЛАДРПродП = КодКЛАДРПоАдресу(ЛистПриложения.ПродавецАдрес);
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "КодКЛАДРПродП", КодКЛАДРПродП);
		
		КодКЛАДРПокП = КодКЛАДРПоАдресу(ЛистПриложения.ПокупательАдрес);
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "КодКЛАДРПокП", КодКЛАДРПокП);
		
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ИдНомПродП", РазделитьИННКПП(ЛистПриложения.ПродавецИНН_КПП).ИНН);
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "КПППродП",   РазделитьИННКПП(ЛистПриложения.ПродавецИНН_КПП).КПП);
		
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ИдНомПокП",  РазделитьИННКПП(ЛистПриложения.ПокупательИНН_КПП).ИНН);
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "КПППокП",    РазделитьИННКПП(ЛистПриложения.ПокупательИНН_КПП).КПП);
		
		УзелСвКонтрП = ПолучитьПодчиненныйЭлемент(УзелСвКонтрПр, "СвКонтрП");
		ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтрП, "СвСпециф");
		
		Для Сч = 1 По ДанныеДокумента.ТаблСпецПрил3.Количество() Цикл
		
			Строка = ДанныеДокумента.ТаблСпецПрил3[Сч - 1];
		
			УзелСвСпециф = СкопироватьУзел(УзелСвКонтрП, ШаблонУзелСвСпециф);
			УстановитьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
			УстановитьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
			УстановитьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
		КонецЦикла;
		
		Если НЕ УзелПуст(УзелСвКонтрПр) Тогда
			НомерПриложения = НомерПриложения + 1;
			УстановитьЗначениеЭлемента(УзелСвКонтрПр, "НомКонтрПП", Формат(НомерПриложения, "ЧГ="));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть2015Кв1(УзелРодитель, ДанныеДокумента)
	
	Раздел1        = ДанныеДокумента.РеквизитыРаздел1;
	Раздел3        = ДанныеДокумента.РеквизитыРаздел3;
	ТаблицаРаздел1 = ДанныеДокумента.ТаблицаРаздел1;
	Приложение     = ДанныеДокумента.ТаблицаПриложение;
	
	Узел_СвЗвл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвЗвл");
	ЗаполнитьДаннымиУзел(Раздел1, Узел_СвЗвл, ДанныеДокумента);
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "НомерДокНП", Формат(Раздел1.НомерЗаяв,"ЧН=; ЧГ=0"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ДатаДокНП", Формат(Раздел1.Дата, "ДФ=дд.ММ.гггг"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПрЛизинг", ?(НЕ Раздел1.ПрЛизинг, "0", "1"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПрДавСырья", ?(НЕ Раздел1.ПрДавСырья, "0", "1"));
	
	КодПричины = КодПричиныВозникновенияЗаявления(СокрЛП(Раздел1.ПричинаЗаявления));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПВДок", КодПричины);
	
	Если КодПричины = "4" ИЛИ КодПричины = "6" Тогда
		УстановитьЗначениеЭлемента(Узел_СвЗвл, "НомОтм", СокрЛП(Раздел1.НомерОтметки));
		УстановитьЗначениеЭлемента(Узел_СвЗвл, "ДатаОтм", Раздел1.ДатаОтметки);
	КонецЕсли;
	
	Узел_СвКонтракт1 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт1");
	
	Если Раздел1.ПродавецБайконур Тогда
		УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ПрБкнрПродР1", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ИдНомПродР1", СокрЛП(Раздел1.ПродавецИНН_КПП));
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ПрПродФЛ", ?(Раздел1.ПрПродФЛ, "1", "0"));
		
	Если Раздел1.ПокупательБайконур Тогда
		УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ПрБкнрПокР1", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ИдНомПокР1", СокрЛП(Раздел1.ПокупательИНН));
	
	Узел_СвКонтр1 = ПолучитьПодчиненныйЭлемент(Узел_СвКонтракт1, "СвКонтр1");
	ПрототипУзла_СвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтр1, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификации.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификации[Сч - 1];
		
		Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_СвСпециф);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф",  СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	Узел_СвКонтрКомисс = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтрКомисс");
	Если Раздел1.КомиссионерБайконур Тогда	
		УстановитьЗначениеЭлемента(Узел_СвКонтрКомисс, "ПрБкнрОрг", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(Узел_СвКонтрКомисс, "ИдНомОрг", СокрЛП(Раздел1.ИННОрг_1));
	
	Узел_СвКонтракт2 = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрКомисс, "СвКонтракт2");
	
	ПрототипУзла_СвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтракт2, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификации07.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификации07[Сч - 1];
				
		Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_СвСпециф);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф",  СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	ПрототипУзла_СвТовар = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвТовар");
	ЧислоВыгруженныхСтрок = 0;
	
	Для Каждого СтрТабл Из ТаблицаРаздел1 Цикл
		
		Если ЗначениеЗаполнено(СтрТабл.П000010000102) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			Узел_СвТовар = НовыйУзелИзПрототипа(ПрототипУзла_СвТовар);
			ВыгрузитьСтрокуМногострочнойЧасти(СтрТабл, Узел_СвТовар);
			
			УстановитьЗначениеЭлемента(Узел_СвТовар, "НомТовПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
			
			ИмяСлужебногоПоля = "П000010000122";
			
			Если НЕ ТаблицаРаздел1.Колонки.Найти(ИмяСлужебногоПоля) = Неопределено И СокрЛП(СтрТабл[ИмяСлужебногоПоля]) <> "" Тогда
				ИмяПоляЕдИзм = ИмяСлужебногоПоля;
			Иначе
				ИмяПоляЕдИзм = "П000010000104";
			КонецЕсли;
			
			УстановитьЗначениеЭлемента(Узел_СвТовар, "ЕдИзмТов", СокрЛП(СтрТабл[ИмяПоляЕдИзм]));
			
			КодВалюты = СокрЛП(СтрТабл.П000010000107);
			БазаВалюты = 0;
			Если НЕ ТаблицаРаздел1.Колонки.Найти("П000010000125") = Неопределено Тогда
				БазаВалюты = СтрТабл.П000010000125;
			КонецЕсли;
			Если КодВалюты = "643" ИЛИ БазаВалюты = 0 Тогда
				БазаВалюты = 1;
			КонецЕсли;
			УстановитьЗначениеЭлемента(Узел_СвТовар, "БазаВал", БазаВалюты);
			
			СтАкцизТверд = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000116, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			СтАкцизАдвал = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000117, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			СтНДС        = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000118, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			
			СтруктураСтавок = Новый Структура;
			СтруктураСтавок.Вставить("Ст16", СтАкцизТверд);
			СтруктураСтавок.Вставить("Ст17", СтАкцизАдвал);
			СтруктураСтавок.Вставить("Ст18", СтНДС);
			СтруктураСтавок.Вставить("Ст21", "");
			
			СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
			
			ПрОсвАкциз = СтруктураСтавокМодиф.Переключатель3;
			ПрОсвНДС   = СтруктураСтавокМодиф.Переключатель1;
			УстановитьЗначениеЭлемента(Узел_СвТовар, "ПрОсвАкциз", ПрОсвАкциз);
			УстановитьЗначениеЭлемента(Узел_СвТовар, "ПрОсвНДС",   ПрОсвНДС);
			УстановитьЗначениеЭлемента(Узел_СвТовар, "ЕдИзмТовНБАкц", "");
			
			ЗаполненаТвердаяСтавкаАкцизов = (СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ (ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)) И СтАкцизТверд <> "0"));
			СтАкцизТверд = ?(СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)), "0.00", СтАкцизТверд);
			СтАкцизАдвал = ?(СтАкцизАдвал = "Льгота" ИЛИ СтАкцизАдвал = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизАдвал)), "0.00", СтАкцизАдвал);
			СтНДС = ?(СтНДС = "Льгота" ИЛИ СтНДС = "Без НДС" ИЛИ СтНДС = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтНДС)), "0.00", СтНДС);
			
			Если ЗаполненаТвердаяСтавкаАкцизов Тогда
				УстановитьЗначениеЭлемента(Узел_СвТовар, "СтАкцизТверд", ?(ПрОсвАкциз = 2, "-1", СтАкцизТверд));
			Иначе
				УстановитьЗначениеЭлемента(Узел_СвТовар, "СтАкцизАдвал", ?(ПрОсвАкциз = 2, "-1", СтАкцизАдвал));
			КонецЕсли;
			УстановитьЗначениеЭлемента(Узел_СвТовар, "СтНДС", ?(ПрОсвНДС = 2,   "-1", СтНДС));
			
			// Сведения о товарно-транспортных документах.
			ПрототипУзла_СвТСД = ПолучитьПодчиненныйЭлемент(Узел_СвТовар, "СвТСД");
						
			ТТДНомер = ВРЕГ(СокрЛП(СтрТабл.П000010000109));
			ТТДДата = СтрТабл.П000010000110;
				
			Если НЕ ЗначениеЗаполнено(ТТДНомер) И НЕ ЗначениеЗаполнено(ТТДДата) Тогда
				Продолжить;
			КонецЕсли;
				
			Узел_СвТСД = НовыйУзелИзПрототипа(ПрототипУзла_СвТСД);
			УстановитьЗначениеЭлемента(Узел_СвТСД, "СерНомТСД", ТТДНомер);
			УстановитьЗначениеЭлемента(Узел_СвТСД, "ДатаТСД", Формат(ТТДДата, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выгрузка раздела 3.
	Узел_СвКонтракт3 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт3");
	ЗаполнитьДаннымиУзел(Раздел3, Узел_СвКонтракт3, ДанныеДокумента);
	
	Узел_СвКонтракт3 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт3");
	ЗаполнитьДаннымиУзел(Раздел3, Узел_СвКонтракт3, ДанныеДокумента);
		
	УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ТипПродР3", Раздел3.ТипПрод_3);
	
	УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ТипПокР3", Раздел3.ТипПок_3);
			
	Если НЕ Раздел3.ПродавецБайконур = Неопределено
	   И Раздел3.ПродавецБайконур Тогда
		УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ПрБкнрПродР3", "1");
	КонецЕсли;
	Если НЕ Раздел3.ПокупательБайконур = Неопределено
	   И Раздел3.ПокупательБайконур Тогда
		УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ПрБкнрПокР3", "1");
	КонецЕсли;
	
	УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ИдНомПродР3", СокрЛП(Раздел3.ПродавецИНН_КПП));
	УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ИдНомПокР3", СокрЛП(Раздел3.ПокупательИНН_КПП));
	
	Узел_СвКонтрР3 = ПолучитьПодчиненныйЭлемент(Узел_СвКонтракт3, "СвКонтрР3");
	ПрототипУзла_УзелСвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрР3, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификацииРаздел3.Количество() Цикл
						
		Строка = ДанныеДокумента.ТЗСпецификацииРаздел3[Сч - 1];
		
		Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_УзелСвСпециф);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	Если КодПричины = "5" Тогда
		Узел_СвПредДок = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвПредДок");
		УстановитьЗначениеЭлемента(Узел_СвПредДок, "НомОтм", СокрЛП(Раздел1.НомерОтметки));
		УстановитьЗначениеЭлемента(Узел_СвПредДок, "ДатаОтм", Раздел1.ДатаОтметки);
		УстановитьЗначениеЭлемента(Узел_СвПредДок, "МесУвелЦены", "--" + Формат(Раздел1.ИзмениеЦеныМесяц, "ЧЦ=2; ЧН=; ЧВН="));
		УстановитьЗначениеЭлемента(Узел_СвПредДок, "ГодУвелЦены", Формат(Раздел1.ИзмениеЦеныГод, "ЧЦ=4; ЧН=; ЧВН=; ЧГ=0"));
	КонецЕсли;
	
	// Выгружаем приложения.
	НомерПриложения = 0;
	
	ПрототипУзла_СвКонтрПр = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвКонтрПр");
	
	Для Каждого ЛистПриложения Из Приложение Цикл
		
		Узел_СвКонтрПр = НовыйУзелИзПрототипа(ПрототипУзла_СвКонтрПр);
		ЗаполнитьДаннымиУзел(ЛистПриложения, Узел_СвКонтрПр, ДанныеДокумента);
		
		УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ТипПродП", ЛистПриложения.ТипПрод_Пр);
		
		УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ТипПокП", ЛистПриложения.ТипПок_Пр);
		
		Если НЕ ПустаяСтрока(ЛистПриложения.ПродавецБайконур) Тогда
			УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ПрБкнрПродП", "1");
		КонецЕсли;
		Если НЕ ПустаяСтрока(ЛистПриложения.ПокупательБайконур) Тогда
			УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ПрБкнрПокП", "1");
		КонецЕсли;
		
		УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ИдНомПродП", СокрЛП(ЛистПриложения.ПродавецИНН_КПП));
		УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ИдНомПокП",  СокрЛП(ЛистПриложения.ПокупательИНН_КПП));
		
		Узел_СвКонтрП = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрПр, "СвКонтрП");
		ПрототипУзла_СвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрП, "СвСпециф");
		                                              		
		Для Сч = 1 По ДанныеДокумента.ТаблСпецПрил3.Количество() Цикл
		
			Строка = ДанныеДокумента.ТаблСпецПрил3[Сч - 1];
						
			Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_СвСпециф);
			УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
			УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
			УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
		КонецЦикла;
		
		Если НЕ УзелПуст(Узел_СвКонтрПр) Тогда
			НомерПриложения = НомерПриложения + 1;
			УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "НомКонтрПП", Формат(НомерПриложения, "ЧГ="));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция АнализироватьПоляСтавки(СтруктураСтавок)

	СтруктураСтавокМодиф = Новый Структура;
	
	Если СтруктураСтавок.Ст18 = "Льгота"
	 ИЛИ СтруктураСтавок.Ст18 = "Без НДС" Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаНДС", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель1", 2);
	Иначе 	
		СтруктураСтавокМодиф.Вставить("СтавкаНДС", ?(СтруктураСтавок.Ст18 = "", 0, Число(СтруктураСтавок.Ст18)));
		СтруктураСтавокМодиф.Вставить("Переключатель1", 1);
	КонецЕсли;
	
	Если СтруктураСтавок.Ст16 = "" И СтруктураСтавок.Ст17 = "" Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза",0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	ИначеЕсли СтруктураСтавок.Ст16 = "Льгота" И Число(СтруктураСтавок.Ст17) = 0 Тогда	
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 2);
	ИначеЕсли СтруктураСтавок.Ст16 = "-" И СтруктураСтавок.Ст17 = "-" Тогда	
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		
		Если СтруктураСтавок.Ст21 = " " Тогда
			СтруктураСтавокМодиф.Вставить("Переключатель3", 4);
		Иначе
			СтруктураСтавокМодиф.Вставить("Переключатель3", 3);
		КонецЕсли;
		
	ИначеЕсли СтруктураСтавок.Ст16 = "0" И СтруктураСтавок.Ст17 = "0" Тогда
		
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 4);
	
	ИначеЕсли СтруктураСтавок.Ст17 = "Льгота" И СтруктураСтавок.Ст16 = "0" Тогда	
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 2);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 2);
	ИначеЕсли ?(СтруктураСтавок.Ст17 = "", "0", СтруктураСтавок.Ст17) = "0"  Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", ?(СтруктураСтавок.Ст16 = "", "0", СтруктураСтавок.Ст16));
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	Иначе 
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", ?(СтруктураСтавок.Ст17 = "", "0", СтруктураСтавок.Ст17));
		СтруктураСтавокМодиф.Вставить("Переключатель2", 2);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	КонецЕсли;
	
	Возврат СтруктураСтавокМодиф

КонецФункции

Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, ПоказателиИсключения = Неопределено, ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[СтрЗаменить(Стр.Ключ, "_", "")], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(Стр, Данные[СтрЗаменить(Стр.Ключ, "_", "")]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

Функция РазделитьИННКПП(ИННКПП)
	
	ИНН = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, Найти(ИННКПП, "/") - 1), ИННКПП));
	КПП = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, Найти(ИННКПП, "/") + 1), ""));	
	
	Возврат Новый Структура("ИНН, КПП", ИНН, КПП);
	
КонецФункции

Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;

КонецФункции

Функция КодКЛАДРПоАдресу(Адрес)
	
	КодКЛАДР = "";
	
	Если АдресЗаполненПоКладр(Адрес) Тогда
		
		СтруктураАдреса = Новый Структура;
		
		АдресВXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Адрес, , РегламентированнаяОтчетность.ВидКонтактнойИнформации("ЮрАдресКонтрагента"));
		
		СтруктураАдреса.Вставить("Адрес", АдресВXML);
		СтруктураАдреса.Вставить("ФорматАдреса", "КЛАДР");
		
		Адреса = Новый Массив;
		
		Адреса.Добавить(СтруктураАдреса);
		
		РезультатПроверки = АдресныйКлассификатор.ПроверитьАдреса(Адреса);
		
		Если РезультатПроверки.Количество() > 0
		   И РезультатПроверки[0].Варианты.Количество() > 0 Тогда
		   
		   	КодКЛАДР = Формат(РезультатПроверки[0].Варианты[0].КодКЛАДР, "ЧГ=0");
			
		КонецЕсли;
		
	КонецЕсли;
			
	Возврат КодКЛАДР;
	
КонецФункции

Функция АдресЗаполненПоКладр(Адрес)
	
	Результат = Адрес <> Неопределено
			  И (НЕ ПустаяСтрока(Адрес["Индекс"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Регион"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Район"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Город"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["НаселенныйПункт"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Улица"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Дом"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Корпус"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Квартира"]));
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0);
	
КонецФункции

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда
		
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		КонецЕсли;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
		
	ИначеЕсли Узел.Формат = "gYear" Тогда
		
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПустойУзел;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		
		Если Стр.Код = КодЭлемента Тогда
			
			Возврат Стр;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	РодительСтрока = ?(Родитель = Неопределено, Узел.Владелец(), Родитель);
	
	СтрокиСТемЖеКодом = РодительСтрока.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = РодительСтрока.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= РодительСтрока.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = РодительСтрока.Строки.Добавить();
	Иначе
		НовыйУзел = РодительСтрока.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция УчетПеремещенияТоваровЭлектронноеПредставление(ДанныеДокумента)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ПараметрыВыгрузки = УчетПеремещенияТоваровСформироватьСтруктуруПараметров(ДанныеДокумента);
	
	СтруктураВыгрузки = УчетПеремещенияТоваровИзвлечьСтруктуруXML();
	
	Если НЕ УчетПеремещенияТоваровПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, СтруктураВыгрузки) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	УчетПеремещенияТоваровЗаполнитьДанными(СтруктураВыгрузки, ПараметрыВыгрузки, ДанныеДокумента);
	
	Если НЕ УчетПеремещенияТоваровПроверитьДанные(СтруктураВыгрузки) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Текст = УчетПеремещенияТоваровВыгрузитьДеревоВXML(СтруктураВыгрузки, ПараметрыВыгрузки);
		
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ПараметрыВыгрузки.ИмяФайла;
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "UTF8";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция УчетПеремещенияТоваровИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = Отчеты.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.ПолучитьМакет("СхемаВыгрузкиXML2011Кв1");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Видимость = Макет.Область(НомСтр, 0, НомСтр, 0).Видимость;
			Если Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция УчетПеремещенияТоваровПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	Если НЕ ПараметрыВыгрузки.Свойство("НапрПеремещения") ИЛИ НЕ (ПараметрыВыгрузки.НапрПеремещения = "ИМ" ИЛИ ПараметрыВыгрузки.НапрПеремещения = "ЭК") Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не заданы основные реквизиты формы и направление перемещения товаров!'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;

	Если НЕ ПараметрыВыгрузки.Свойство("мАдресвФорматеДляВыгрузки") ИЛИ ПустаяСтрока(ПараметрыВыгрузки.мАдресвФорматеДляВыгрузки) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не задан почтовый адрес оганизации!'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
									
	Если НЕ ПараметрыВыгрузки.Свойство("ОргИсполнитель") ИЛИ ПустаяСтрока(ПараметрыВыгрузки.ОргИсполнитель) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической формы!'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.Свойство("ОргДолжностьИсп") ИЛИ ПустаяСтрока(ПараметрыВыгрузки.ОргДолжностьИсп) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не указана должность лица, ответственного за предоставление статистической формы!'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.Свойство("ОргТелефонИсп") ИЛИ ПустаяСтрока(ПараметрыВыгрузки.ОргТелефонИсп) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не указан телефон должностного лица, ответственного за предоставление статистической формы!'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
		
	Возврат СтатусПроверки;
	
КонецФункции

Процедура УчетПеремещенияТоваровЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки, ДанныеДокумента)
	
	УчетПеремещенияТоваровОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеДокумента);
	
	УчетПеремещенияТоваровЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеДокумента);
	
	УчетПеремещенияТоваровОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Процедура УчетПеремещенияТоваровОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		УчетПеремещенияТоваровОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0)
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлючРаздел(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УчетПеремещенияТоваровОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел, ДанныеДокумента)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеДокумента, ПараметрыВыгрузки, Узел);
		
	КонецЕсли;
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			
			Если НЕ УсловиеВыполнено(ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				
				Узел.Строки.Удалить(ТекСтр);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УчетПеремещенияТоваровОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр, ДанныеДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Функция УчетПеремещенияТоваровПолучитьПервыйКлючВПодчиненииКУзлу(Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = УчетПеремещенияТоваровПолучитьПервыйКлючВПодчиненииКУзлу(Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция УчетПеремещенияТоваровОпределитьКоличествоСтрокМногострочнойЧасти(ПараметрыВыгрузки, Узел)
	
	ПервыйКлюч = УчетПеремещенияТоваровПолучитьПервыйКлючВПодчиненииКУзлу(Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока ПараметрыВыгрузки.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура УчетПеремещенияТоваровЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			Если Стр.Многострочность Тогда 
				КоличествоСтрок = УчетПеремещенияТоваровОпределитьКоличествоСтрокМногострочнойЧасти(ПараметрыВыгрузки, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					Если НомСтр = 1 Тогда
						НовыйУзел = Стр;
					Иначе	
						НовыйУзел = СкопироватьУзел(Узел, Стр);
					КонецЕсли; 
					УчетПеремещенияТоваровЗаполнитьДаннымиУзел(ПараметрыВыгрузки, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				УчетПеремещенияТоваровЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция УчетПеремещенияТоваровЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда
		
		ДлинаЗначения = СтрДлина(Стр.Значение);
		
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			
			СтатусПроверки = Ложь;
									
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длина значения показателя ""%1"" меньше минимально возможной (%2 < %3)'"), УчетПеремещенияТоваровПредставлениеПоказателя(Стр), ДлинаЗначения, Стр.МинРазмерность);
			
			Сообщение.Сообщить();

		КонецЕсли;

		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			
			СтатусПроверки = Ложь;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длина значения показателя ""%1"" больше максимально возможной (%2 > %3)'"), УчетПеремещенияТоваровПредставлениеПоказателя(Стр), ДлинаЗначения, Стр.МаксРазмерность);
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
				
	Возврат СтатусПроверки;
	
КонецФункции

Функция УчетПеремещенияТоваровПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция УчетПеремещенияТоваровПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если НЕ УчетПеремещенияТоваровЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		СтатусПроверки = (УчетПеремещенияТоваровПроверитьДанные(Стр) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция УчетПеремещенияТоваровВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
	УчетПеремещенияТоваровЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция УчетПеремещенияТоваровСформироватьИмяФайла()
	
	Перем ПолученноеЗначение;
	
	ИмяФайлаXML = "Export_" + Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd_HHmmss") + ".xml";
	
	Возврат  ИмяФайлаXML;
	
КонецФункции

Функция УчетПеремещенияТоваровСформироватьСтруктуруПараметров(ДанныеДокумента)
	
	ПараметрыВыгрузки = Новый Структура;
	
	Для Каждого Реквизит Из ДанныеДокумента.РеквизитыШапка Цикл
		ПараметрыВыгрузки.Вставить(Реквизит.Ключ, Реквизит.Значение);
	КонецЦикла;
	
	ПараметрыВыгрузки.Вставить("СистемныйНомер", СокрЛП(ДанныеДокумента.РеквизитыШапка.СистемныйНомер));
	
	УникальныйИД = СокрЛП(ДанныеДокумента.РеквизитыШапка.ДокументСсылка.УникальныйИдентификатор());
	ПараметрыВыгрузки.Вставить("УникальныйИД", СокрЛП(УникальныйИД));

	ОтчетныйМесяц  = ДанныеДокумента.РеквизитыШапка.ОтчетныйМесяц;
									   
	ДатаЗаполнения = Формат(ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияГ1
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияГ2
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияГ3
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияГ4
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияМ1
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияМ2
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияД1
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияД2, "ДФ=yyyy-MM-dd");
						  
	ПараметрыВыгрузки.Вставить("ОтчетныйМесяц", СокрЛП(ОтчетныйМесяц));
	ПараметрыВыгрузки.Вставить("ДатаЗаполнения", СокрЛП(ДатаЗаполнения));
	
	ПараметрыВыгрузки.Вставить("ВидТранспортаКод", СокрЛП(ДанныеДокумента.РеквизитыШапка.ВидТранспортаКод));
	ПараметрыВыгрузки.Вставить("ТоргующаяСтранаКод", СокрЛП(ДанныеДокумента.РеквизитыШапка.ТоргующаяСтранаКод));
	ПараметрыВыгрузки.Вставить("ТоргующаяСтранаНаименование", СокрЛП(ДанныеДокумента.РеквизитыШапка.ТоргующаяСтранаНаименование));
	
	ПараметрыВыгрузки.Вставить("ОргИсполнитель", СокрЛП(ДанныеДокумента.РеквизитыШапка.ОргИсполнитель));
	ОргФИОИсп = РегламентированнаяОтчетностьКлиентСервер.РазложитьФИО(ДанныеДокумента.РеквизитыШапка.ОргИсполнитель);
	
	ПараметрыВыгрузки.Вставить("ОргФамилияИсп", СокрЛП(ОргФИОИсп.Фамилия));
	ПараметрыВыгрузки.Вставить("ОргИмяИсп", СокрЛП(ОргФИОИсп.Имя));
	ПараметрыВыгрузки.Вставить("ОргОтчествоИсп", СокрЛП(ОргФИОИсп.Отчество));
	ПараметрыВыгрузки.Вставить("ОргДолжностьИсп", СокрЛП(ДанныеДокумента.РеквизитыШапка.ОргДолжностьИсп));
	ПараметрыВыгрузки.Вставить("ОргТелефонИсп", СокрЛП(ДанныеДокумента.РеквизитыШапка.ОргТелефонИсп));
	ПараметрыВыгрузки.Вставить("ОргАдресЭлПочты", СокрЛП(ДанныеДокумента.РеквизитыШапка.ОргАдресЭлПочты));
	
	Если ДанныеДокумента.РеквизитыШапка.Свойство("ОтвЛицоФинУрПасДатаДок") Тогда
		ПараметрыВыгрузки.Вставить("ОтвЛицоФинУрПасДатаДокумента", Формат(ДанныеДокумента.РеквизитыШапка.ОтвЛицоФинУрПасДатаДок, "ДФ=yyyy-MM-dd"));
	Иначе
		ПараметрыВыгрузки.Вставить("ОтвЛицоФинУрПасДатаДокумента", Формат('00010101', "ДФ=yyyy-MM-dd"));
	КонецЕсли;
	 
	ПараметрыВыгрузки.Вставить("ИмяФайла", УчетПеремещенияТоваровСформироватьИмяФайла());
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Documents");
	
	Если НЕ ДанныеДокумента.ТаблицаТоварыДляВыгрузки = Неопределено Тогда
		
		Для НСтр = 1 По ДанныеДокумента.ТаблицаТоварыДляВыгрузки.Количество() Цикл
			
			ТекСтрокаТаблицы = ДанныеДокумента.ТаблицаТоварыДляВыгрузки[НСтр - 1];
			
			НСтрСтр = Формат(НСтр, "ЧГ=0");
			
			Для Каждого Колонка Из ДанныеДокумента.ТаблицаТоварыДляВыгрузки.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				
				ИмяПоказателя = ИмяКолонки + "_" + НСтрСтр;
				
				ЗначениеПоказателя = ТекСтрокаТаблицы[ИмяКолонки];
				
				ПараметрыВыгрузки.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ДанныеДокумента.ТаблицаДокументы = Неопределено Тогда
		
		Для НСтр = 1 По ДанныеДокумента.ТаблицаДокументы.Количество() Цикл
			
			ТекСтрокаТаблицы = ДанныеДокумента.ТаблицаДокументы[НСтр - 1];
			
			НСтрСтр = Формат(НСтр, "ЧГ=0");
			
			Для Каждого Колонка Из ДанныеДокумента.ТаблицаДокументы.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				
				ИмяПоказателя = ИмяКолонки + "_" + НСтрСтр;
				
				ЗначениеПоказателя = ТекСтрокаТаблицы[ИмяКолонки];
				
				ПараметрыВыгрузки.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				
				Если ИмяКолонки = "НаименованиеДокумента" Тогда
					
					НовоеИмяПоказателя = "ДокВыбор_" + НСтрСтр;
					
					ПараметрыВыгрузки.Вставить(НовоеИмяПоказателя, ЗначениеПоказателя);
					
				ИначеЕсли ИмяКолонки = "НомерДокумента" Тогда
					
					НовоеИмяПоказателя = "ДокНомер_" + НСтрСтр;
					
					ПараметрыВыгрузки.Вставить(НовоеИмяПоказателя, ЗначениеПоказателя);
					
				ИначеЕсли ИмяКолонки = "ДатаДокумента" Тогда
					
					НовоеИмяПоказателя = "ДокДатаФормат_" + НСтрСтр;
					
					ПараметрыВыгрузки.Вставить(НовоеИмяПоказателя, Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd"));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки;
		
КонецФункции

#КонецОбласти

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Дата КАК Период,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.ДоговорКонтрагента,
	|	ЗаявлениеОВвозеТоваров.ВалютаДокумента,
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК Регистратор,
	|	ЛОЖЬ КАК НДСВключенВСтоимость,
	|	ЛОЖЬ КАК УчетАгентскогоНДС
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаНачисленияНДС(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаНачисленияНДС", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Номенклатура,
	|	ВЫБОР
	|		КОГДА &Период < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ЗаявлениеОВвозеТоваров.НалоговаяБазаНДС
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ЗаявлениеОВвозеТоваров.СтавкаНДС,
	|	ЗаявлениеОВвозеТоваров.СуммаНДС КАК НДС,
	|	ЗаявлениеОВвозеТоваров.СуммаНДС КАК Стоимость,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз) КАК ВидЦенности,
	|	ЗаявлениеОВвозеТоваров.СчетУчета,
	|	ЗаявлениеОВвозеТоваров.СчетУчетаНДС,
	|	ЗаявлениеОВвозеТоваров.СпособУчетаНДС,
	|	ЗаявлениеОВвозеТоваров.ДокументПартии КАК Партия,
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК Регистратор,
	|	ЗаявлениеОВвозеТоваров.ДокументПартии.Склад КАК Склад,
	|	ЗаявлениеОВвозеТоваров.ДокументПартии.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#КонецОбласти

#КонецЕсли