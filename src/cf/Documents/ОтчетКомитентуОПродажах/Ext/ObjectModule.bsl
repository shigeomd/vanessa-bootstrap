#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ПодчиненныеСчетаФактуры; // таблица счетов-фактур, основанием которых является этот документ
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Основание") Тогда
		ЗаполнитьПоДокументуПоступление(ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// Заполнение реквизитов, специфичных для документа:
	Если ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов") 
		И НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов") Тогда
		ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах;
	ИначеЕсли ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		И НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов") Тогда
		ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено ИЛИ ТипДанныхЗаполнения = Тип("Структура") Тогда
		СуммаВключаетНДС = Истина;
		Если ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
			УдержатьВознаграждение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.ОтчетКомитентуОПродажах.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;
	
	ВыписыватьСчетаФактурыСводно = Дата >= '20150101';
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	Для каждого СтрокаТЧ Из Поставщики Цикл
		СтрокаТЧ.ПолученСФ 	 = Ложь;
		СтрокаТЧ.СчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЦикла;
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	ВыписыватьСчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И Дата >= '20150101';
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	// Договор контрагента
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность",
				НСтр("ru = 'Договор'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
		УчетАгентскогоНДС = ДоговорКонтрагента.УчетАгентскогоНДС;
	Иначе
		УчетАгентскогоНДС = Ложь;
	КонецЕсли;

	Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПроцентКомиссионногоВознаграждения");
	КонецЕсли;

	// Реквизиты НДС
	Если Товары.Итог("СуммаНДСВознаграждения") = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаНДСПоРеализации");
	КонецЕсли;

	// Реквизиты в табличной части "Поставщики"
	МассивНепроверяемыхРеквизитов.Добавить("ДатаСФ");

	Если ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках Тогда

		МассивПартий = Поставщики.ВыгрузитьКолонку("Партия");
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивПартий", МассивПартий);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслуг.Контрагент
		|ПОМЕСТИТЬ ВТ_Партии
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка В(&МассивПартий)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование,
		|	МАКСИМУМ(СчетФактураПолученныйДокументыОснования.Ссылка.Продавец) КАК Продавец,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК СоставленОтИмени
		|ПОМЕСТИТЬ ВТ_ДанныеСчетовФактур
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления
		|	И СчетФактураПолученныйДокументыОснования.ДокументОснование В(&МассивПартий)
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Партии.Ссылка,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ДанныеСчетовФактур.СоставленОтИмени, ЛОЖЬ)
		|			ТОГДА ВТ_ДанныеСчетовФактур.Продавец
		|		ИНАЧЕ ВТ_Партии.Контрагент
		|	КОНЕЦ КАК Контрагент
		|ИЗ
		|	ВТ_Партии КАК ВТ_Партии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеСчетовФактур КАК ВТ_ДанныеСчетовФактур
		|		ПО ВТ_Партии.Ссылка = ВТ_ДанныеСчетовФактур.ДокументОснование";
		
		СоответствиеПоставщикиИзПартий = Новый Соответствие;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеПоставщикиИзПартий.Вставить(Выборка.Ссылка, Выборка.Контрагент);
		КонецЦикла;

		Для каждого СтрокаТаблицы Из Поставщики Цикл
			Префикс = "Поставщики[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ИмяСписка = НСтр("ru = 'Поставщики'");

			// Несоответствие поставщика в документе поступления и в строке табличной части Поставщики
			Если ЗначениеЗаполнено(СтрокаТаблицы.Партия) И ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
				ПоставщикИзПартии = СоответствиеПоставщикиИзПартий[СтрокаТаблицы.Партия];
				Если ПоставщикИзПартии <> СтрокаТаблицы.Поставщик Тогда
					ТекстСообщения = НСтр("ru = 'Не совпадает значение реквизита ""Поставщик"" и контрагент из документа партии 
																				|или от имени которого составлен счет-фактура партии!'");
						Поле = Префикс + "Партия";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;

			// Заполненность даты СФ
			Если СтрокаТаблицы.ПолученСФ И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
					НСтр("ru = 'Дата СФ'") , СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
					Поле = Префикс + "ДатаСФ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;

	Если НЕ УчетАгентскогоНДС И ВидОперации <> Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	КонецЕсли;

	// Реквизит "Сумма НДС" в табличной части "Товары"
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаНДС");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаНДСВознаграждения");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");

	МассивУслуг	= Новый Массив;
	Если Товары.Количество() > 0 Тогда
		
		МассивНоменклатуры	= Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&МассивНоменклатуры)
			|	И Номенклатура.Услуга";

		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Результат = Запрос.Выполнить();
		
		МассивУслуг	= Результат.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Товары Цикл
		Префикс = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Товары'");

		// Ненулевая ставка НДС, ненулевая сумма, есть учет агентского НДС, но нулевая сумма НДС
		Если (УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС) <> 0)
				И (СтрокаТаблицы.СуммаНДС = 0)
				И (УчетАгентскогоНДС ИЛИ ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Сумма НДС'") , СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "СуммаНДС";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

		// Ненулевая ставка НДС, ненулевая сумма, но нулевая сумма НДС
		Если (УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения) <> 0)
				И (СтрокаТаблицы.СуммаВознаграждения <> 0)
				И (СтрокаТаблицы.СуммаНДСВознаграждения = 0) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Сумма НДС вознаграждения'") , СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "СуммаНДСВознаграждения";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если СтрокаТаблицы.Количество = 0 И МассивУслуг.Найти(СтрокаТаблицы.Номенклатура) = Неопределено Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Количество'") , СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				Поле = Префикс + "Количество";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

	КонецЦикла;

	// Реквизит "Сумма НДС" в табличной части "ДенежныеСредства"
	МассивНепроверяемыхРеквизитов.Добавить("ДенежныеСредства.СуммаНДС");

	Для каждого СтрокаТаблицы Из ДенежныеСредства Цикл
		Префикс = "ДенежныеСредства[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Денежные средства'");
		Если (УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС) <> 0)
				И (СтрокаТаблицы.СуммаНДС = 0) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
			НСтр("ru = 'Сумма НДС'") , СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СуммаНДС";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения") + ?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДСВознаграждения"));
	
	// Процедура подготавливает таблицу ссылок на используемые в документе счета-фактуры,
	// ее необходимо выполнять в любом режиме записи документа (интерактивно или групповым перепроведением).
	СформироватьСчетаФактуры(Отказ);
	
	Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	
	// Обновление реквизитов УСН выполняем всегда для учета возможных изменений в учетной политике.
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
		
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ОбновитьСчетаФактуры(РежимЗаписиДокумента.Запись);  
	КонецЕсли;	
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ОтчетКомитентуОПродажах.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// Таблица взаиморасчетов по комиссионному вознаграждению с учетом зачета авансов
	// В таблице ВознаграждениеТаблица должна быть максимум 1 строка (на всю сумму вознаграждения)
	// к ней могут добавиться зачеты авансов
	ТаблицаВзаиморасчетовВознаграждение = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ВознаграждениеТаблица, // ТаблицаДокумента,
		Неопределено, // ТаблицаДокументыАвансов - явно заданных документов авансов нет,
		              // Если выключена УдержатьВознаграждение и задан счет учета авансов, то авансы зачитываются "Автоматически"
		              // Иначе авансы не зачитываются
		ПараметрыПроведения.ВознаграждениеШапка, // ТаблицаРеквизиты
		Отказ);

	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
		ПараметрыПроведения.РеализацияТаблица,
		ТаблицаВзаиморасчетовВознаграждение,
		Неопределено,
		ПараметрыПроведения.Реквизиты,
		Отказ);

	Документы.ОтчетКомитентуОПродажах.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетовВознаграждение);
	
	// Учет доходов и расходов ИП
	ТаблицаОтчетаКомитентуОПродажахИП	= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОтчетаКомитентуОПродажах(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	Документы.ОтчетКомитентуОПродажах.СформироватьДвиженияСписаниеРеализованныхТоваровКомитента(
		ПараметрыПроведения.РеализованныеТоварыКомитентаТаблица,
		ПараметрыПроведения.Реквизиты,
		Движения, Отказ);

	Документы.ОтчетКомитентуОПродажах.СформироватьДвиженияСписаниеЗакупленныхТоваровКомитента(
		ПараметрыПроведения.ЗакупленныеТоварыКомитентаТаблица,
		ПараметрыПроведения.Реквизиты,
		Движения, Отказ);

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчетовВознаграждение,
		ПараметрыПроведения.ВознаграждениеШапка,
		Движения, Отказ);

	УчетВзаиморасчетов.СформироватьДвиженияПоКомиссионномуВознаграждению(
		ТаблицаВзаиморасчетовВознаграждение,
		ПараметрыПроведения.ВознаграждениеШапка,
		Движения, Отказ);
		
	УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицыРеализация.СобственныеТоварыУслуги,
		Неопределено,
		Неопределено,
		ПараметрыПроведения.Реквизиты,
		Движения, Отказ);

	УчетНДС.СформироватьДвиженияРеализацияТоваровУслуг(
		ТаблицыРеализация.СобственныеТоварыУслуги,
		Неопределено,
		Неопределено,
		ПараметрыПроведения.Реквизиты,
		Движения, Отказ);
		
	//Рублевые суммы документов в валюте
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ПараметрыПроведения.РублевыеСуммыДокументовВВалюте,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	ТаблицаВознагражденияДляРублевыхСумм = Документы.ОтчетКомитентуОПродажах.ПодготовитьТаблицуВознагражденияДляОтраженияПоРегиструРублевыеСуммыДокументовВВалюте(ТаблицыРеализация.СобственныеТоварыУслуги);	
	
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаВознагражденияДляРублевыхСумм,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	ТаблицаИПМПЗОтгруженные =	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОтчетКомитентуОПродажах(
		ТаблицаОтчетаКомитентуОПродажахИП, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные, ТаблицаВзаиморасчетовВознаграждение, 
		ПараметрыПроведения.ВознаграждениеШапка, Движения, Отказ);
	
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты,
		Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Движения.Записать();        
	
	ОбновитьСчетаФактуры(РежимЗаписиДокумента.Проведение);
				
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	ОбновитьСчетаФактуры(РежимЗаписиДокумента.ОтменаПроведения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуПоступление(ДанныеЗаполнения)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СпособЗаполнения",    "ЗаполнитьПоПоступлению");
	СтруктураПараметров.Вставить("Организация",         Организация);
	СтруктураПараметров.Вставить("Контрагент",          ДанныеЗаполнения.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  ДанныеЗаполнения.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ДокументПоступления", ДанныеЗаполнения.Основание);
	СтруктураПараметров.Вставить("Период",
		?(НЕ ЭтоНовый(),
			Новый МоментВремени(Дата, Ссылка),
			Новый Граница(КонецДня(Дата), ВидГраницы.Включая)));
	
	РезультатЗапроса = Документы.ОтчетКомитентуОПродажах.ПолучитьЗакупленные(СтруктураПараметров);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Основание) Тогда
			ТекстСообщения = НСтр("ru = 'В документе %1 нет ни одной строки товаров или услуг, закупленных для комитента %2 по договору %3.'");
		    ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ДанныеЗаполнения.Основание, ДанныеЗаполнения.Контрагент, ДанныеЗаполнения.ДоговорКонтрагента);
		    ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СуммаВключаетНДС = Истина;
	ВидОперации      = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках;
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента) Тогда
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ДоговорКонтрагента,
			"СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения");
		СпособРасчетаКомиссионногоВознаграждения = ДанныеДоговора.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДанныеДоговора.ПроцентКомиссионногоВознаграждения;
	КонецЕсли;
	
	ВыборкаПоПоставщикам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПоставщикам.Следующий() Цикл
		
		ВыборкаПоПартиям = ВыборкаПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоПартиям.Следующий() Цикл
			
			КлючСтроки = Документы.ОтчетКомитентуОПродажах.ПолучитьМаксимальныйКлючСтроки(Поставщики);
			
			СтрокаПоставщика = Поставщики.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоставщика, ВыборкаПоПартиям);
			СтрокаПоставщика.КлючСтроки = КлючСтроки;
			
			Выборка = ВыборкаПоПартиям.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.КлючСтроки		  = КлючСтроки;
				СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
				СтрокаТабличнойЧасти.Содержание       = Выборка.Содержание;
				СтрокаТабличнойЧасти.Количество       = Выборка.КоличествоОстаток;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент      = 1;
				СтрокаТабличнойЧасти.КоличествоМест   = Выборка.КоличествоОстаток;
				
				СтрокаТабличнойЧасти.СтавкаНДС = Выборка.СтавкаНДС;
				СтрокаТабличнойЧасти.СуммаНДС  = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					Выборка.СуммаОстаток,
					Истина, // в регистре хранится с НДС
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				// СуммаПоступления и ЦенаПоступления всегда с НДС
				СтрокаТабличнойЧасти.Сумма = Выборка.СуммаОстаток - ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
				СтрокаТабличнойЧасти.Цена  = ?(Выборка.КоличествоОстаток = 0, 0, СтрокаТабличнойЧасти.Сумма / Выборка.КоличествоОстаток);
				
				Документы.ОтчетКомитентуОПродажах.РассчитатьВознаграждениеВСтроке(
					СтрокаТабличнойЧасти.СуммаВознаграждения,
					СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
					СтрокаТабличнойЧасти.Сумма,
					СтрокаТабличнойЧасти.СуммаНДС,
					ПроцентКомиссионногоВознаграждения,
					СпособРасчетаКомиссионногоВознаграждения,
					Перечисления.СтавкиНДС.НДС18,
					СуммаВключаетНДС);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Если НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
			И НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов") Тогда
			ВызватьИсключение НСтр("ru = 'Отчет комитенту вводится на основании документа ""Поступление (акт, накладная)"",
				|только если в настройке параметров учета установлен флажок ""Осуществляется реализация товаров или услуг комитентов""
				|или ""Осуществляется закупка товаров или услуг комитентов"".'");
		КонецЕсли;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
			"ВидДоговора, СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения");
		
		Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
			ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах;
			
		ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			ИЛИ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
			
			ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках;
			
			// Контрагент и договор будут другие в этом случае, очистим их
			Контрагент         = Справочники.Контрагенты.ПустаяСсылка();
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
			МассивДоговоров = Документы.ОтчетКомитентуОПродажах.ПолучитьМассивДоговоровОснования(Основание);
			
			Если МассивДоговоров.Количество() = 0 Тогда
				
				ВызватьИсключение НСтр("ru = 'Отчет комитенту не может быть введен на основании документа ""Поступление (акт, накладная)"",
					|в котором не указаны товары / агентские услуги, приобретенные для комитента.'");
				
			КонецЕсли;
			
		Иначе
				
			ВызватьИсключение НСтр("ru = 'Отчет комитенту не может быть введен на основании документа ""Поступление (акт, накладная)"",
				|в котором указан договор ""С покупателем"".'");
				
		КонецЕсли;
		
		УдержатьВознаграждение = Истина;
		СпособРасчетаКомиссионногоВознаграждения = РеквизитыДоговора.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения = РеквизитыДоговора.ПроцентКомиссионногоВознаграждения;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК КлючСтроки,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Ссылка.Продавец КАК Поставщик,
	|	НАЧАЛОПЕРИОДА(СчетФактураВыданный.Ссылка.Дата, ДЕНЬ) КАК ДатаСФ,
	|	СчетФактураВыданный.Ссылка.НомерСчетаФактурыПродавца КАК НомерСчетаФактуры,
	|	СчетФактураВыданный.Ссылка.Проведен,
	|	СчетФактураВыданный.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	СчетФактураВыданный.Ссылка.СводныйКомиссионный КАК СводныйКомиссионный,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Использован
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Ссылка.Дата,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";

	ТаблицаСФ = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаСФ;

КонецФункции // ПолучитьТаблицуПодчиненныхСчетовФактур()

Процедура ОбновитьСчетаФактуры(РежимЗаписи)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки                = Блокировка.Добавить("Документ.СчетФактураВыданный");
	ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ПодчиненныеСчетаФактуры;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена'"), УровеньЖурналаРегистрации.Ошибка,,,
			ОписаниеОшибки.Описание);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Для каждого СтрокаСФ Из ПодчиненныеСчетаФактуры Цикл
	
		Если ЭтотОбъект.ПометкаУдаления ИЛИ НЕ СтрокаСФ.Использован Тогда
			Если НЕ СтрокаСФ.ПометкаУдаления Тогда
				ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
				ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
				Если ДокументСФ.ДокументыОснования.Количество() > 1 Тогда
					СтрокиТекОснования = ДокументСФ.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ЭтотОбъект.Ссылка));
					Для каждого СтрокаТекОснования Из СтрокиТекОснования Цикл
						ДокументСФ.ДокументыОснования.Удалить(СтрокаТекОснования);
					КонецЦикла;
					РежимЗаписиСФ = ?(ДокументСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
					ДокументСФ.Записать(РежимЗаписиСФ);
				Иначе
					ДокументСФ.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
			Если ДокументСФ.ПометкаУдаления Тогда
				ДокументСФ.ПометкаУдаления = Ложь;
			КонецЕсли;
			РежимЗаписиСФ = РежимЗаписи;
			Если ДокументСФ.Проведен И РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.ОтменаПроведения;
			ИначеЕсли НЕ ДокументСФ.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			ДокументСФ.Записать(РежимЗаписиСФ);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Функция ДанныеСчетовФактурПоДокументу(ТаблицаСуммДляСФ)

	ДанныеСчетовФактур = ЭтотОбъект.Поставщики.ВыгрузитьКолонки("КлючСтроки, Поставщик, ДатаСФ, НомерСчетаФактуры, СчетФактура");
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Поставщики Цикл
		Если СтрокаТабличнойЧасти.ПолученСФ 
			И ВСтрокеНенулевыеСуммыДляСчетФактур(СтрокаТабличнойЧасти.КлючСтроки, ТаблицаСуммДляСФ) Тогда
			НоваяСтрока = ДанныеСчетовФактур.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
		КонецЕсли;
	КонецЦикла;
	ДанныеСчетовФактур.Свернуть("КлючСтроки, Поставщик, ДатаСФ, НомерСчетаФактуры, СчетФактура");
	
	Возврат ДанныеСчетовФактур;

КонецФункции

Процедура СформироватьСчетаФактуры(Отказ)
	
	ТаблицаСуммДляСФ   = ПолучитьТаблицуСуммДляСчетФактур();
	ДанныеСчетовФактур = ДанныеСчетовФактурПоДокументу(ТаблицаСуммДляСФ);
	
	Если ЭтоНовый() Тогда
		ДокументСсылка = ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументСсылка = Документы.ОтчетКомитентуОПродажах.ПолучитьСсылку();
			УстановитьСсылкуНового(ДокументСсылка);
		КонецЕсли;
	Иначе
		ДокументСсылка = Ссылка;
	КонецЕсли;
	
	ПодчиненныеСчетаФактуры = НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур);
	
	ЗаполнитьСчетаФактурыВДокументе(ТаблицаСуммДляСФ);
	
КонецПроцедуры

Процедура ЗаполнитьСчетаФактурыВДокументе(ТаблицаСуммДляСФ)

	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Поставщики Цикл
		Если СтрокаТабличнойЧасти.ПолученСФ
			И ВСтрокеНенулевыеСуммыДляСчетФактур(СтрокаТабличнойЧасти.КлючСтроки, ТаблицаСуммДляСФ) Тогда
			СтрокаСФ = НайтиСтрокуСчетаФактуры(ПодчиненныеСчетаФактуры, СтрокаТабличнойЧасти);
			Если СтрокаСФ <> Неопределено Тогда
				СтрокаТабличнойЧасти.СчетФактура = СтрокаСФ.Ссылка;
				СтрокаСФ.КлючСтроки  = СтрокаТабличнойЧасти.КлючСтроки;
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаДокумента)
	
	Если ВыписыватьСчетаФактурыСводно Тогда
		СтруктураПоиска = Новый Структура("ДатаСФ",	СтрокаДокумента.ДатаСФ);
	Иначе
		СтруктураПоиска = Новый Структура("ДатаСФ, Ссылка", СтрокаДокумента.ДатаСФ, СтрокаДокумента.СчетФактура);
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ВыписыватьСчетаФактурыСводно
			ИЛИ НайденнаяСтрока.Поставщик = СтрокаДокумента.Поставщик
			ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Поставщик) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ДатаСФ",	СтрокаДокумента.ДатаСФ);
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ВыписыватьСчетаФактурыСводно
			ИЛИ НайденнаяСтрока.Поставщик = СтрокаДокумента.Поставщик
			ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Поставщик) Тогда
			
			Если НайденнаяСтрока.КлючСтроки <> Неопределено Тогда
				Если ВыписыватьСчетаФактурыСводно
					ИЛИ НайденнаяСтрока.КлючСтроки = СтрокаДокумента.КлючСтроки Тогда
					// найден подходящий счет-фактура
					Возврат НайденнаяСтрока;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				// найден подходящий счет-фактура
				Возврат НайденнаяСтрока;
			КонецЕсли;
			
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Функция НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур)

	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка);
	
	Для каждого СтрокаТаблицы Из ДанныеСчетовФактур Цикл
		
		СтрокаСФ = НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаТаблицы);
		Если СтрокаСФ = Неопределено Тогда
			
			ДокументСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
			
			ДокументСФ.Дата            			 = СтрокаТаблицы.ДатаСФ;
			ДокументСФ.Организация     			 = ЭтотОбъект.Организация;
			ДокументСФ.Ответственный   			 = Пользователи.ТекущийПользователь();
			ДокументСФ.Контрагент      		 	 = ЭтотОбъект.Контрагент;
			ДокументСФ.ДоговорКонтрагента 		 = ЭтотОбъект.ДоговорКонтрагента;
			Если ВыписыватьСчетаФактурыСводно Тогда
				ДокументСФ.Продавец 	   			 = ЭтотОбъект.Контрагент;
				ДокументСФ.СводныйКомиссионный 		 = Истина;
			Иначе
				ДокументСФ.Продавец 	   			 = СтрокаТаблицы.Поставщик; 
				ДокументСФ.СводныйКомиссионный 		 = Ложь;
			КонецЕсли;
			ДокументСФ.НомерСчетаФактурыПродавца = СтрокаТаблицы.НомерСчетаФактуры;
			ДокументСФ.ВидСчетаФактуры 			 = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			ДокументСФ.Комментарий     			 = НСтр("ru = 'Создан автоматически на основании документа отчет комитенту о закупках'");
			
			Если ДокументСФ.СводныйКомиссионный Тогда
				СчетаФактурыПоДате = ДанныеСчетовФактур.НайтиСтроки(Новый Структура("ДатаСФ", СтрокаТаблицы.ДатаСФ));
				Если СчетаФактурыПоДате.Количество() > 1 Тогда 
					ДокументСФ.КодВидаОперации = "27";
				Иначе
					ДокументСФ.КодВидаОперации = "04";
				КонецЕсли;
			Иначе
				ДокументСФ.КодВидаОперации = "04";
			КонецЕсли;
			
			ДокументСФ.КодСпособаВыставления = 1;
			
			ДокументСФ.Выставлен = Истина;
			ДокументСФ.ДатаВыставления = Дата;
			
			ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(ДокументСФ);
			
			ДокументСФ.ДокументыОснования.Добавить().ДокументОснование = ДокументСсылка;
			ДокументСФ.ДокументОснование = ДокументСсылка;
			
			// Счет-фактура только что сформирован, заполним данные платежно-расчетных документов
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				МассивОснований = Новый Массив;
				МассивОснований.Добавить(ДокументСсылка);

				ДокументСФ.ПлатежноРасчетныеДокументы.Очистить();
				ДокументСФ.ПлатежноРасчетныеДокументы.Загрузить(
					Документы.СчетФактураВыданный.ДатыНомераПлатежноРасчетныхДокументов(МассивОснований));
			КонецЕсли;
			
			ДокументСФ.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
			ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
			ДокументСФ.Записать();
			
			// Этот новый счет-фактуру нужно зафиксировать в таблице счетов-фактур
			СтрокаСФ = ТаблицаСФ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСФ, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(СтрокаСФ, ДокументСФ);
			
		ИначеЕсли ВыписыватьСчетаФактурыСводно <> СтрокаСФ.СводныйКомиссионный
			ИЛИ (НЕ ВыписыватьСчетаФактурыСводно И СтрокаСФ.НомерСчетаФактуры <> СтрокаТаблицы.НомерСчетаФактуры) Тогда 
			
			//необходимо перезаполнить номер счета-фактуры продавца
			ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			ДокументСФ.НомерСчетаФактурыПродавца = СтрокаТаблицы.НомерСчетаФактуры;
			ДокументСФ.СводныйКомиссионный = ВыписыватьСчетаФактурыСводно;
			ДокументСФ.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
			ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
			ДокументСФ.Записать();	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСФ;

КонецФункции

Функция ПолучитьТаблицуСуммДляСчетФактур()
	
	Если ЭтотОбъект.Поставщики.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаСуммДляСФ = Новый ТаблицаЗначений;
	ТаблицаСуммДляСФ.Колонки.Добавить("КлючСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаСуммДляСФ.Колонки.Добавить("Сумма",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСуммДляСФ.Колонки.Добавить("СуммаНДС",   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Товары Цикл
		СтрокаТаблицы = ТаблицаСуммДляСФ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТабличнойЧасти);
	КонецЦикла;
	
	ТаблицаСуммДляСФ.Свернуть("КлючСтроки", "Сумма, СуммаНДС");
	
	Возврат ТаблицаСуммДляСФ;

КонецФункции 

Функция ВСтрокеНенулевыеСуммыДляСчетФактур(КлючСтрокиПроверки, ТаблицаСуммДляСФ)
	
	СтрокаСуммДляСФ = ТаблицаСуммДляСФ.Найти(КлючСтрокиПроверки, "КлючСтроки");
	Если СтрокаСуммДляСФ = Неопределено ИЛИ (СтрокаСуммДляСФ.Сумма = 0 И СтрокаСуммДляСФ.СуммаНДС = 0) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

#КонецЕсли