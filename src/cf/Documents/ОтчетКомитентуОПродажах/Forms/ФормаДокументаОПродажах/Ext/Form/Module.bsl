&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если РасчетыВУЕ Тогда
		//Уведомим об изменениях в правилах переоценки задолженности в у.е. с 2015 года
		НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("ПереоценкаЗадолженностиПоДоговорамВУЕ2015");
	КонецЕсли;	

	УстановитьУсловноеОформление();

	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();	
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РасчетыВУЕ Тогда
		ПодключитьОбработчикОжидания("УведомитьОбИзмененияхПравилПереоценкиЗадолженностейВУЕ", 0.60, Истина);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриОткрытии();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеОтчетКомитентуОПродажах";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру Тогда 
		
		РеквизитыСФ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ТекущийОбъект.Ссылка);
		
		ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(ЭтаФорма, РеквизитыСФ);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
		Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
		Объект.ВалютаДокумента,
		Объект.СуммаВключаетНДС);
	КонецЕсли;

	Документы.ОтчетКомитентуОПродажах.УстановитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
	ПроверкаКонтрагентов.ОпределитьНаличиеИзмененияВСчетеФактуре(ЭтотОбъект, СчетФактураНаВознаграждение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если КонтрагентыВСчетеФактуреИзменилисьПослеЗаписи Тогда
		ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактураНаВознаграждение);
	КонецЕсли;
	
	Оповестить("Запись_ОтчетКомитентуОПродажах", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовВХранилище(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПроверкаКонтрагентов.ПередЗаписьюНаСервере(ЭтотОбъект, СчетФактураНаВознаграждение);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	ЗапуститьПроверкуКонтрагентов(Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	ЗапуститьПроверкуКонтрагентов(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
		УведомитьОбИзмененияхПравилПереоценкиЗадолженностейВУЕ();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)
	
	СпособРасчетаКомиссионногоВознагражденияПриИзмененииНаСервере();
	
	Если ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСН(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)
	
	ПроцентКомиссионногоВознагражденияПриИзмененииНаСервере();
	
	Если ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСН(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)
	
	СтавкаНДСВознагражденияПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура УдержатьВознаграждениеПриИзменении(Элемент)

	УдержатьВознаграждениеПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура УслугаПоВознаграждениюПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.УслугаПоВознаграждению) Тогда
		УслугаПоВознаграждениюПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)

	СчетДоходовОбработатьИзменение(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНаВознаграждениеНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактураНаВознаграждение, "СчетФактураВыданный");
	
	ЗапуститьПроверкуКонтрагентов(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Товары>

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтруктураСтроки = ПолучитьСтруктуруДанныхСтроки(Элементы.Товары.ТекущиеДанные, "Товары");
	Если СтруктураСтроки = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтруктураСтроки.Номенклатура) Тогда
		Возврат;
	КонецЕсли;

	ПриИзмененииТоварыНоменклатураНаСервере(СтруктураСтроки, "Товары", Объект, ВалютаРегламентированногоУчета);

	ЗаполнитьДанныеСтрокиИзСтруктуры(Элементы.Товары.ТекущиеДанные, СтруктураСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПоступленияПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ДанныеСтроки.СуммаПоступления = ДанныеСтроки.Количество * ДанныеСтроки.ЦенаПоступления;
	Если Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			ДанныеСтроки.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			Ложь,
			"Товары");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПоступленияПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ДанныеСтроки.ЦенаПоступления = ДанныеСтроки.СуммаПоступления / ?(ДанныеСтроки.Количество = 0, 1, ДанныеСтроки.Количество);
	Если Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			ДанныеСтроки.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			Ложь,
			"Товары");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьЦенуСтроки(ДанныеСтроки, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);
	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			ДанныеСтроки.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			Ложь,
			"Товары");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВознагражденияПриИзменении(Элемент)

	ДанныеСтроки = Элементы.Товары.ТекущиеДанные;

	ДанныеСтроки.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ДанныеСтроки.СуммаВознаграждения,
											  Объект.СуммаВключаетНДС,
											  УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДСВознаграждения));

	ДанныеСтроки.ВсегоВознаграждение = ДанныеСтроки.СуммаВознаграждения + ?(Объект.СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСВознаграждения);
	
	ЗаполнитьОтражениеВУСН(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	Если ПрименениеУСНДоходы Тогда	
		ЗаполнитьОтражениеВУСН(ЭтаФорма);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПокупательПриИзменении(Элемент)
	ЗапуститьПроверкуКонтрагентов(Элементы.Товары);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаРеализацииПриИзменении(Элемент)
	ЗапуститьПроверкуКонтрагентов(Элементы.Товары);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Денежные средства>

&НаКлиенте
Процедура ДенежныеСредстваСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ДенежныеСредства.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваСтавкаНДСПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ДенежныеСредства.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваПокупательПриИзменении(Элемент)
	ЗапуститьПроверкуКонтрагентов(Элементы.ДенежныеСредства);
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваДатаСобытияПриИзменении(Элемент)
	ЗапуститьПроверкуКонтрагентов(Элементы.ДенежныеСредства);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоДоговору(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран договор. Заполнение невозможно.'") ;
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'") ;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениеТабличнойЧастиПоДоговоруЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ЗаполнитьПоДоговоруНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран договор. Заполнение невозможно.'") ;
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'") ;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениеТабличнойЧастиПоПоступлениюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ОткрытьФормуВыбораПоступления();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеализованнымПоДоговору(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран договор. Заполнение невозможно.'") ;
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'") ;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ЗаполнитьРеализованнымНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыписатьСчетФактуруНаВознаграждение(Команда)
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруВыданный(ЭтаФорма);
	
	Если РеквизитыСФ <> Неопределено Тогда 
		ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(ЭтаФорма, РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактураНаВознаграждение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Обслуживание счета-фактуры:

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(Форма, РеквизитыСФ = Неопределено)
	
	СтруктураОтбора = Новый Структура("Продавец", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	
	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруВыданный(
		Форма,
		РеквизитыСФ,
		Истина,
		СтруктураОтбора,
		"СчетФактураНаВознаграждение");

КонецПроцедуры

// Обслуживание типа цен - валюты - НДС:

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен", 				  Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТолькоПросмотр",		  ТолькоПросмотр);

	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры
		ИЛИ (ЕстьВалютныйУчет И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета)
		ИЛИ РасчетыВУЕ Тогда 
		
		ОткрыватьИзМеню = Ложь;
		
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)
	
	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина),
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда
		
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	// запомним курсы из справочника
	Если Объект.ВалютаДокумента <> ВалютаДоИзменения Тогда
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КурсДокумента = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0);
	КонецЦикла;

	ОбновитьИтоги(ЭтаФорма);

	Если ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества)

	ЦенаПоступления = Строка.ЦенаПоступления;

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, 
				НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, 
				НайденнаяСтрока.Курс, Объект.КурсВзаиморасчетов,
				НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
            Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
                ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
            Иначе
                ЦенаВключаетНДС = Ложь;
            КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена,
				ВалютаДоИзменения, Объект.ВалютаДокумента, 
				СтруктураКурса.Курс, Объект.КурсВзаиморасчетов, 
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
			ЦенаПоступления = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				ЦенаПоступления,
				ВалютаДоИзменения, Объект.ВалютаДокумента, 
				СтруктураКурса.Курс, Объект.КурсВзаиморасчетов, 
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
			Строка.СуммаВознаграждения  = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.СуммаВознаграждения, 
				ВалютаДоИзменения, Объект.ВалютаДокумента, 
				СтруктураКурса.Курс, Объект.КурсВзаиморасчетов, 
				СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, 
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			Строка.Сумма, Объект.СуммаВключаетНДС, 
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
		
		Если Строка.СуммаВознаграждения <> 0 Тогда
			РассчитатьВознаграждениеВСтроке(
				Строка.СуммаВознаграждения,
				Строка.СуммаНДСВознаграждения,
				Строка.ВсегоВознаграждение,
				Строка.Сумма,
				Строка.СуммаНДС,
				Строка.СуммаПоступления,
				Объект.ПроцентКомиссионногоВознаграждения,
				Объект.СпособРасчетаКомиссионногоВознаграждения,
				Объект.СтавкаНДСВознаграждения,
				Объект.СуммаВключаетНДС,
				ПересчитатьНДС,
				"Товары");
		КонецЕсли;
	Иначе
		Строка.Цена             = Цена;
		Строка.Сумма            = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаПоступления = Строка.ЦенаПоступления * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

	Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();

	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		// запомним курсы из справочника
		КурсДокумента = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ПрименениеУСНДоходы И Объект.УдержатьВознаграждение Тогда
		ЗаполнитьОтражениеВУСН(ЭтаФорма);
	КонецЕсли; 
	
	УправлениеОтображениемЭлементовУСННаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменениеНаСервере();
	КонецЕсли;
	
	УправлениеОтображениемЭлементовУСННаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменениеНаСервере();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()

	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, Список);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()

	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения   = Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения = Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, 
		"ВалютаВзаиморасчетов,ТипЦен,ВидДоговора,УчетАгентскогоНДС,
		|СпособРасчетаКомиссионногоВознаграждения,ПроцентКомиссионногоВознаграждения,РасчетыВУсловныхЕдиницах");

	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	
	РасчетыВУЕ = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;

	// запомним курсы из справочника
	КурсДокумента = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	Если ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		 Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		 Объект.СуммаВключаетНДС = РеквизитыДоговора.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли;

	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;

	Если Объект.Товары.Количество() > 0 И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	ИначеЕсли ПересчитатьНДС Тогда
		УстановитьЗаголовкиКолонок();
	КонецЕсли;
	
	Объект.СпособРасчетаКомиссионногоВознаграждения = РеквизитыДоговора.СпособРасчетаКомиссионногоВознаграждения;
	Объект.ПроцентКомиссионногоВознаграждения       = РеквизитыДоговора.ПроцентКомиссионногоВознаграждения;
	Если НЕ ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
		Объект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается;
	КонецЕсли;
	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		ПересчитатьВознаграждениеВТабличнойЧасти();
	КонецЕсли;
	
	ЭтаФорма.УчетАгентскогоНДС = РеквизитыДоговора.УчетАгентскогоНДС;

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация,
		Объект.Контрагент,
		Объект.ДоговорКонтрагента);

	Документы.ОтчетКомитентуОПродажах.ЗаполнитьСчетаУчетаРасчетов(Объект, СчетаУчета);

	ЗаполнитьОтражениеВУСН(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииНаСервере()

	СпособРасчетаКомиссионногоВознагражденияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура СпособРасчетаКомиссионногоВознагражденияОбработатьИзменение()

	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		ПересчитатьВознаграждениеВТабличнойЧасти();
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ПроцентКомиссионногоВознагражденияПриИзмененииНаСервере()
	
	ПроцентКомиссионногоВознагражденияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПроцентКомиссионногоВознагражденияОбработатьИзменение()

	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		ПересчитатьВознаграждениеВТабличнойЧасти();
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура СтавкаНДСВознагражденияПриИзмененииНаСервере()
	
	СтавкаНДСВознагражденияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура СтавкаНДСВознагражденияОбработатьИзменение()

	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		ПересчитатьВознаграждениеВТабличнойЧасти();
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура УдержатьВознаграждениеПриИзмененииНаСервере()
	
	Если СчетаУчета = Неопределено Тогда
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Объект.Организация,
			Объект.Контрагент,
			Объект.ДоговорКонтрагента);
	КонецЕсли;

	Если Объект.УдержатьВознаграждение Тогда
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетРасчетовСКомитентом;
		Элементы.СчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет расчетов с комитентом'");
	Иначе
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
		Элементы.СчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет авансов'");
	КонецЕсли;

	ЗаполнитьОтражениеВУСН(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УслугаПоВознаграждениюПриИзмененииНаСервере()

	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Объект.УслугаПоВознаграждению, ДанныеОбъекта);
	Если СведенияОНоменклатуре <> Неопределено Тогда
		
		СчетаПоУслуге = СведенияОНоменклатуре.СчетаУчета;
		Объект.СчетУчетаНДСПоРеализации	= СчетаПоУслуге.СчетУчетаНДСПродажи;
		Объект.СчетДоходов				= СчетаПоУслуге.СчетДоходов;
		
		НоменклатурнаяГруппаВознаграждения = СведенияОНоменклатуре.НоменклатурнаяГруппа;
		
		СчетДоходовОбработатьИзменение(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СчетДоходовОбработатьИзменение(Форма)

	Объект = Форма.Объект;

	Если НЕ ЗначениеЗаполнено(Объект.СчетДоходов) Тогда
		Объект.Субконто = Неопределено;
	КонецЕсли;

	УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетДоходов, "СчетДоходов");

	ПоляОбъекта = Новый Структура("Субконто1", "Субконто");
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетДоходов, Объект, ПоляОбъекта);

	Если Объект.СчетДоходов.Пустая() Тогда
		Форма.СчетДоходовКоличествоСубконто = 0;
	Иначе
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетДоходов);
		Форма.СчетДоходовКоличествоСубконто = СвойстваСчета.КоличествоСубконто;
		Если ТипЗнч(Объект.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			Объект.Субконто = Форма.НоменклатурнаяГруппаВознаграждения;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииТоварыНоменклатураНаСервере(СтрокаТабличнойЧасти, Знач ИмяТабличнойЧасти, Знач Объект, Знач ВалютаРегламентированногоУчета)

	ПараметрыКонтекста = Новый Структура();
	ПараметрыКонтекста.Вставить("Дата",                    Объект.Дата);
	ПараметрыКонтекста.Вставить("Организация",             Объект.Организация);
	ПараметрыКонтекста.Вставить("Склад",                   Неопределено);
	ПараметрыКонтекста.Вставить("ТипЦен",                  Объект.ТипЦен);
	ПараметрыКонтекста.Вставить("ВалютаДокумента",         Объект.ВалютаДокумента);
	ПараметрыКонтекста.Вставить("КурсВзаиморасчетов",      Объект.КурсВзаиморасчетов);
	ПараметрыКонтекста.Вставить("КратностьВзаиморасчетов", Объект.КратностьВзаиморасчетов);
	ПараметрыКонтекста.Вставить("СуммаВключаетНДС",        Объект.СуммаВключаетНДС);
	ПараметрыКонтекста.Вставить("СтавкаНДС",               СтрокаТабличнойЧасти.СтавкаНДС);
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПараметрыКонтекста.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;	

	ПараметрыНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыКонтекста);

	Если ЗначениеЗаполнено(ПараметрыНоменклатуры.Цена) Тогда
		СтрокаТабличнойЧасти.Цена  = ПараметрыНоменклатуры.Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

	НеОблагаетсяНДС = ПараметрыНоменклатуры.ДоходЕНВД И НЕ ПараметрыНоменклатуры.Комиссионный;

	СтрокаТабличнойЧасти.СтавкаНДС = ?(НеОблагаетсяНДС, Перечисления.СтавкиНДС.БезНДС, ПараметрыНоменклатуры.СтавкаНДС);
	СтрокаТабличнойЧасти.СуммаНДС  = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
		Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

	Если ИмяТабличнойЧасти = "Товары" Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ПараметрыНоменклатуры.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;
	Иначе
		СтрокаТабличнойЧасти.Содержание = ПараметрыНоменклатуры.Наименование;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
			Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		СтрокаТабличнойЧасти.Всего =  СтрокаТабличнойЧасти.Сумма + ?(ПараметрыКонтекста.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЕсли;

	РассчитатьВознаграждениеВСтроке(
		СтрокаТабличнойЧасти.СуммаВознаграждения,
		СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
		СтрокаТабличнойЧасти.ВсегоВознаграждение,
		СтрокаТабличнойЧасти.Сумма,
		СтрокаТабличнойЧасти.СуммаНДС,
		СтрокаТабличнойЧасти.СуммаПоступления,
		Объект.ПроцентКомиссионногоВознаграждения,
		Объект.СпособРасчетаКомиссионногоВознаграждения,
		Объект.СтавкаНДСВознаграждения,
		Объект.СуммаВключаетНДС,
		Ложь,
		"Товары");

КонецПроцедуры

// Пересчеты реквизитов в строках табличных частей

&НаСервере
Процедура ПересчитатьВознаграждениеВТабличнойЧасти(ИмяТабличнойЧасти = "")

	Если НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Для Каждого СтрокаДокумента Из Объект.Товары Цикл
			РассчитатьВознаграждениеВСтроке(
				СтрокаДокумента.СуммаВознаграждения,
				СтрокаДокумента.СуммаНДСВознаграждения,
				СтрокаДокумента.ВсегоВознаграждение,
				СтрокаДокумента.Сумма,
				СтрокаДокумента.СуммаНДС,
				СтрокаДокумента.СуммаПоступления,
				Объект.ПроцентКомиссионногоВознаграждения,
				Объект.СпособРасчетаКомиссионногоВознаграждения,
				Объект.СтавкаНДСВознаграждения,
				Объект.СуммаВключаетНДС,
				Ложь,
				"Товары");
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВознаграждениеВСтроке(
			Вознаграждение,
			НДСВознаграждения,
			ВсегоВознаграждение,
			Знач СуммаСтроки,
			Знач НДССтроки,
			Знач СуммаПоступления,
			Знач ПроцентВознаграждения,
			Знач СпособРасчета,
			Знач СтавкаНДСВознаграждения,
			Знач СуммаВключаетНДС,
			Знач ПересчитатьНДС, // способ расчета НДС изменился
			Знач ИмяТабличнойЧасти)

	// Вознаграждение всегда рассчитывается от сумм с НДС и вначале всегда включает НДС
	Если СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		// Если способ расчета НДС изменился, то определим его "старое" значение, исходя из которой выделим исходную сумму с НДС
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ СуммаВключаетНДС, СуммаВключаетНДС);
		Вознаграждение = Вознаграждение + ?(ЦенаВключаетНДС, 0, НДСВознаграждения);
	ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
		// Сумма поступления всегда хранится с НДС, надо вычитать из нее НДС
		Если СуммаВключаетНДС Тогда
			Вознаграждение = ПроцентВознаграждения / 100 * (СуммаСтроки - СуммаПоступления);
		Иначе
			Вознаграждение = ПроцентВознаграждения / 100 * (СуммаСтроки + НДССтроки - СуммаПоступления);
		КонецЕсли;
	ИначеЕсли СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
		Вознаграждение = ПроцентВознаграждения / 100 * (СуммаСтроки + ?(СуммаВключаетНДС, 0, НДССтроки));
	Иначе
		Вознаграждение = 0;
	КонецЕсли;

	// Вознаграждение всегда рассчитывается от сумм с НДС и вначале всегда включает НДС
	// Теперь в зависимости от галочки СуммаВключаетНДС либо вычтем НДС, либо оставим
	Вознаграждение = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		Вознаграждение,          // Цена,
		Истина,        // ЦенаВключаетНДС, (на момент расчета всегда включает НДС)
		СуммаВключаетНДС,        // СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения)); // СтавкаНДС

	НДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Вознаграждение,
		СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

	ВсегоВознаграждение = Вознаграждение + ?(СуммаВключаетНДС, 0, НДСВознаграждения);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуНДСВСтроке(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТабличнойЧасти.Сумма,
		Объект.СуммаВключаетНДС, 
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуСтроки(ДанныеСтроки, ИмяТабличнойЧасти)

	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ДанныеСтроки, Объект.СуммаВключаетНДС);
	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);

	Если ИмяТабличнойЧасти = "Товары" Тогда
		ДанныеСтроки.СуммаПоступления = ДанныеСтроки.ЦенаПоступления * ДанныеСтроки.Количество;
	КонецЕсли;

	ДанныеСтроки.Всего = ДанныеСтроки.Сумма + ?(Объект.СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);

	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			ДанныеСтроки.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			Ложь,
			ИмяТабличнойЧасти);
	КонецЕсли;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦенуСтроки(ДанныеСтроки, ИмяТабличнойЧасти)

	ДанныеСтроки.Цена = ДанныеСтроки.Сумма / ?(ДанныеСтроки.Количество = 0, 1, ДанныеСтроки.Количество);

	ПересчитатьСуммуНДСВСтроке(ДанныеСтроки);

	ДанныеСтроки.Всего = ДанныеСтроки.Сумма + ?(Объект.СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);

	Если ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		РассчитатьВознаграждениеВСтроке(
			ДанныеСтроки.СуммаВознаграждения,
			ДанныеСтроки.СуммаНДСВознаграждения,
			ДанныеСтроки.ВсегоВознаграждение,
			ДанныеСтроки.Сумма,
			ДанныеСтроки.СуммаНДС,
			ДанныеСтроки.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			Ложь,
			ИмяТабличнойЧасти);
			
	КонецЕсли;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

// Внешний вид, содержание надписей и т.п.

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ГлавноеПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаГлавная Тогда

		Форма.УстановитьУсловноеОформлениеГлавное();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда

		Форма.УстановитьУсловноеОформлениеТовары();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ДенежныеСредстваПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДенежныеСредства Тогда

		Форма.УстановитьУсловноеОформлениеДенежныеСредства();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// ТоварыСтавкаНДС, ТоварыСуммаНДС, ИтогиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиСуммаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УчетАгентскогоНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыВсего
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетАгентскогоНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СуммаВключаетНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыВсегоВознаграждение

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоВознаграждение");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СуммаВключаетНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеГлавное() Экспорт

	НастройкиУсловногоОформления.Вставить("ГлавноеПроинициализировано", Истина);


	// СчетУчетаНДСПоРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаНДСПоРеализации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СтавкаНДСВознаграждения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ПроцентКомиссионногоВознаграждения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПроцентКомиссионногоВознаграждения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СпособРасчетаКомиссионногоВознаграждения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт

	НастройкиУсловногоОформления.Вставить("ТоварыПроинициализировано", Истина);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыСуммаНДСВознаграждения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСВознаграждения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СтавкаНДСВознаграждения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СуммаВознаграждения", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыКоличество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Услуга", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДенежныеСредства() Экспорт

	НастройкиУсловногоОформления.Вставить("ДенежныеСредстваПроинициализировано", Истина);


	// ДенежныеСредстваСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДенежныеСредстваСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетАгентскогоНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДенежныеСредства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДенежныеСредства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ДенежныеСредстваСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДенежныеСредстваСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДенежныеСредства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДенежныеСредства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	Если Объект.УдержатьВознаграждение Тогда
		Элементы.СчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет учета расчетов с комитентом'");
	Иначе
		Элементы.СчетУчетаРасчетовПоАвансам.Заголовок = НСтр("ru = 'Счет учета расчетов по авансам'");
	КонецЕсли;
	
	Если Форма.ИспользоватьОднуНоменклатурнуюГруппу 
		И ЗначениеЗаполнено(Объект.Субконто) 
		И ТипЗнч(Объект.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		Элементы.Субконто.Видимость = Ложь;
	Иначе
		Элементы.Субконто.Видимость 		= Форма.СчетДоходовКоличествоСубконто > 0;
	КонецЕсли;
	Элементы.ИтогиСуммаНДС.Видимость 	= Форма.УчетАгентскогоНДС;
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.СпособРасчетаКомиссионногоВознаграждения.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.СтавкаНДСВознаграждения.Доступность            = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПроцентКомиссионногоВознаграждения.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения)
		И Объект.СпособРасчетаКомиссионногоВознаграждения <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается");
		
	СуммаНДСВознаграждения	= Объект.Товары.Итог("СуммаНДСВознаграждения");
	Элементы.СчетУчетаНДСПоРеализации.АвтоОтметкаНезаполненного	= СуммаНДСВознаграждения <> 0;
	Элементы.СчетУчетаНДСПоРеализации.ОтметкаНезаполненного		= СуммаНДСВознаграждения <> 0;
	
	// Счет-фактура
	Если НЕ ЗначениеЗаполнено(Форма.СчетФактураНаВознаграждение) Тогда
		Элементы.ГруппаСчетФактураНаВознаграждениеСтраницы.ТекущаяСтраница = Элементы.ГруппаВыписатьСчетФактуруНаВознаграждение;
	Иначе
		Элементы.ГруппаСчетФактураНаВознаграждениеСтраницы.ТекущаяСтраница = Элементы.ГруппаСчетФактураНаВознаграждениеСсылка;
	КонецЕсли;
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеОтображениемЭлементовУСННаСервере()

	// Редактирование доходов УСН по удержанному вознаграждению возможно только при УСН с объектом "Доходы"
	Элементы.ГруппаОтражениеВУСН.Видимость = ПрименениеУСН И ПрименениеУСНДоходы;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Форма.ИтогиВсего = Объект.Товары.Итог("Всего");
	Форма.ИтогиВознаграждение = Объект.Товары.Итог("ВсегоВознаграждение");
	Форма.ИтогиНДСПоТоварам = Объект.Товары.Итог("СуммаНДС");

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	ЗаголовокВознаграждение = ?(Объект.СуммаВключаетНДС, НСтр("ru='Вознаграждение с НДС'"), НСтр("ru='Вознаграждение без НДС'"));
	
	Элементы.ТоварыСуммаВознаграждения.Заголовок = ЗаголовокВознаграждение;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ВалютаРегламентированногоУчета",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета);
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Суффикс = "")

	ПоляФормы = Новый Структура("Субконто1", "Субконто");
	ЗаголовкиПолей = Новый Структура();
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

// УСН

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтражениеВУСН(Форма)

	Объект = Форма.Объект;
	
	ЗаполнятьОтражениеВУСН = Форма.ПрименениеУСН И Форма.ПрименениеУСНДоходы И Объект.УдержатьВознаграждение;
	
	Если ЗаполнятьОтражениеВУСН Тогда 
		
		СуммаДляКУДиР = Форма.ИтогиВознаграждение;
		Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета Тогда
			СуммаДляКУДиР = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР,
				Объект.ВалютаДокумента, Форма.ВалютаРегламентированногоУчета,
				Форма.КурсДокумента, 1,
				Форма.КратностьДокумента, 1);
		КонецЕсли;
		
		Объект.Графа4_УСН     = 0;
		Объект.Графа5_УСН     = СуммаДляКУДиР;
		Объект.ДоходыЕНВД_УСН = Ложь;
		Объект.Содержание_УСН = "Комиссионное вознаграждение удержано из выручки комитента.";
		
	Иначе
		
		Объект.Графа4_УСН          = 0;
		Объект.Графа5_УСН          = 0;
		Объект.ДоходыЕНВД_УСН      = Ложь;
		Объект.Содержание_УСН      = "";
		
	КонецЕсли;
	
КонецПроцедуры

// Прочий функционал:

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента = Объект.Дата;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьФункциональныеОпцииФормы();

	УстановитьСостояниеДокумента();
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		РеквизитыДоговора 	= БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(Объект.ДоговорКонтрагента);
		УчетАгентскогоНДС 	= РеквизитыДоговора.УчетАгентскогоНДС;
		РасчетыВУЕ 			= РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	Иначе
		УчетАгентскогоНДС 	= Ложь;
		РасчетыВУЕ 			= Ложь;
	
		Если ЗначениеЗаполнено(Объект.Контрагент)
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменениеНаСервере();
		КонецЕсли;
	КонецЕсли;

	Если Объект.СчетДоходов.Пустая() Тогда
		СчетДоходовКоличествоСубконто = 0;
	Иначе
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетДоходов);
		СчетДоходовКоличествоСубконто = СвойстваСчета.КоличествоСубконто;
	КонецЕсли;

	Если БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа() <> Неопределено Тогда
		НоменклатурнаяГруппаВознаграждения = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	ИначеЕсли ЗначениеЗаполнено(Объект.УслугаПоВознаграждению) Тогда
		НоменклатурнаяГруппаВознаграждения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.УслугаПоВознаграждению, "НоменклатурнаяГруппа");
	КонецЕсли;

	ЗаполнитьРеквизитыПроСчетФактуруНаВознаграждение(ЭтаФорма);

	Элементы.СтавкаНДСВознаграждения.СписокВыбора.Очистить();
	Для Каждого СтавкаНДС Из Перечисления.СтавкиНДС Цикл
		Элементы.СтавкаНДСВознаграждения.СписокВыбора.Добавить(СтавкаНДС);		
	КонецЦикла;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетДоходов, "СчетДоходов");

	
	СписокСпособовРасчета = ОбщегоНазначенияБПКлиентСервер.СформироватьСписокСпособовРасчетаКомиссионногоВознаграждения(Ложь);
	СписокВыбора = Элементы.СпособРасчетаКомиссионногоВознаграждения.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из СписокСпособовРасчета Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();

	УстановитьЗаголовкиКолонок();
	
	Документы.ОтчетКомитентуОПродажах.УстановитьЗаголовокФормы(ЭтаФорма);
	
	УправлениеОтображениемЭлементовУСННаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруДанныхСтроки(ДанныеСтроки, ИмяТабличнойЧасти = "Товары")

	Если ДанныеСтроки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтруктураДанных = Новый Структура;
	Для каждого Колонка из Элементы[ИмяТабличнойЧасти].ПодчиненныеЭлементы Цикл
		ИмяКолонки = СтрЗаменить(Колонка.Имя, ИмяТабличнойЧасти, "");
		Если ИмяКолонки = "НоменклатураКод"
		 ИЛИ ИмяКолонки = "НоменклатураАртикул" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЕстьДанныеФормы(ДанныеСтроки, ИмяКолонки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных.Вставить(ИмяКолонки, ДанныеСтроки[ИмяКолонки]);
	КонецЦикла;
	СтруктураДанных.Вставить("ВсегоВознаграждение", ДанныеСтроки["ВсегоВознаграждение"]);

	Возврат СтруктураДанных;

КонецФункции

&НаКлиенте
Функция ЕстьДанныеФормы(ДанныеСтроки, ИмяКолонки)
	
	ИскомыеРеквизиты = Новый Структура(ИмяКолонки, NULL);
	ЗаполнитьЗначенияСвойств(ИскомыеРеквизиты, ДанныеСтроки);

	ДанныеСуществуют = Ложь;
	Если ИскомыеРеквизиты[ИмяКолонки] <> NULL Тогда
		ДанныеСуществуют = Истина;
	КонецЕсли;
	
	Возврат ДанныеСуществуют;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеСтрокиИзСтруктуры(ДанныеСтроки, СтруктураДанных, ИмяТабличнойЧасти = "Товары")

	Для Каждого КлючИЗначение Из СтруктураДанных Цикл
		Если КлючИЗначение.Ключ = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		Если Элементы[ИмяТабличнойЧасти].ПодчиненныеЭлементы.Найти(ИмяТабличнойЧасти + КлючИЗначение.Ключ) <> Неопределено Тогда
			ДанныеСтроки[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
  

&НаСервере
Процедура ЗаполнитьПоДоговоруНаСервере()

	Объект.Товары.Очистить();

	Счет004 = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
	МассивВидов = Новый Массив();
	МассивВидов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	МассивВидов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Субсчета004",  БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(Счет004));
	Запрос.УстановитьПараметр("ПустаяСсылка", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Запрос.УстановитьПараметр("МассивВидов",  МассивВидов);
	Запрос.УстановитьПараметр("Договор",      Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Период",       ПолучитьПериодЗаполненияНаСервере());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыПоДоговоруКонтрагента.Ссылка
	|ИЗ
	|	КритерийОтбора.ДокументыПоДоговоруКонтрагента(&Договор) КАК ДокументыПоДоговоруКонтрагента
	|";
	
	МассивПартий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ТекстЗапросаПартии = "";
	СоответствиеТипыПартий = Новый Соответствие;
	ТипыВидаСубконтоПартии = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения;
	
	Инд = МассивПартий.ВГраница();
	Пока Инд >= 0 Цикл
		Партия = МассивПартий[Инд];
		МожноУдалить= Ложь;
		
		Если НЕ ЗначениеЗаполнено(Партия) Тогда
			МожноУдалить = Истина;
		Иначе
			ТипПартии = ТипЗнч(Партия);
			
			Если СоответствиеТипыПартий[ТипПартии] = Неопределено Тогда
				
				Если ТипыВидаСубконтоПартии.СодержитТип(ТипПартии) Тогда
					МетаданныеДок = Метаданные.НайтиПоТипу(ТипПартии);
				
					Если НЕ ПустаяСтрока(ТекстЗапросаПартии) Тогда
						ТекстЗапросаПартии = ТекстЗапросаПартии
							+ " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС;
					КонецЕсли;
					
					ТекстЗапросаПартии = ТекстЗапросаПартии + "
					|ВЫБРАТЬ
					|	ДокПартии.Ссылка КАК Партия,
					|	ДокПартии.Дата,
					|	ДокПартии.ВалютаДокумента
					|ИЗ
					|	" + МетаданныеДок.ПолноеИмя() + " КАК ДокПартии
					|ГДЕ
					|	ДокПартии.Ссылка В (&МассивПартий)
					|";
				
					СоответствиеТипыПартий.Вставить(ТипПартии, Истина);
				Иначе
					МожноУдалить = Истина;
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
		Если МожноУдалить Тогда
			МассивПартий.Удалить(Инд);
		КонецЕсли;
		
		Инд = Инд - 1;
	
	КонецЦикла;
	
	Если МассивПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивПартий", МассивПартий);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК Единица,
	|	1 КАК Коэффициент,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Партия,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.КоличествоОборотДт > 0
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СуммаОборот / ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот
	|	КОНЕЦ КАК Цена,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма,
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			,
	|			&Период,
	|			,
	|			СчетДт В (&Субсчета004),
	|			&МассивВидов,
	|			СчетКт = &ПустаяСсылка,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт2 В (&МассивПартий)) КАК ХозрасчетныйОборотыДтКт
	|" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() + ТекстЗапросаПартии;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка 		= МассивРезультатов[0].Выбрать();
	ТаблицаПартий 	= МассивРезультатов[1].Выгрузить();
	ТаблицаПартий.Индексы.Добавить("Партия");

	МДОбъекта = Объект.Ссылка.Метаданные();
	Пока Выборка.Следующий() Цикл

		СтрокаПартии = ТаблицаПартий.Найти(Выборка.Партия);

		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.Единица;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.КоличествоМест   = Выборка.Количество;

		Если СтрокаПартии <> Неопределено Тогда
			СтараяВалютаДокумента   = СтрокаПартии.ВалютаДокумента;
			ДанныеОКурсе            = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалютаДокумента, СтрокаПартии.Дата);
			СтарыйКурс              = ДанныеОКурсе.Курс;
			СтараяКратность         = ДанныеОКурсе.Кратность;
		Иначе
			СтараяВалютаДокумента	= ВалютаРегламентированногоУчета;
			СтарыйКурс				= 1;
			СтараяКратность			= 1;
		КонецЕсли;

		Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Выборка.Сумма,
			ВалютаРегламентированногоУчета, Объект.ВалютаДокумента,
			1, СтарыйКурс,
			1, СтараяКратность);

		// Сумма и цена поступления - всегда с НДС
		СтрокаТабличнойЧасти.СуммаПоступления = Сумма;
		СтрокаТабличнойЧасти.ЦенаПоступления  = ?(Выборка.Количество = 0, 0, СтрокаТабличнойЧасти.СуммаПоступления / Выборка.Количество);

		// На 004 счете товар хранится с НДС, подставлять сумму в зависимости от реквизита СуммаВключаетНДС
		// Если СуммаВключаетНДС = Истина, то сумму подставлять из запроса
		// Если СуммаВключаетНДС = Ложь, то из суммы запроса вычитать НДС
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "Товары", МДОбъекта);

		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			Сумма,
			Истина, // На 004 хранится с НДС, потом пересчитаем сумму и цену исходя из значения СуммаНДС
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		СтрокаТабличнойЧасти.Сумма = ?(Объект.СуммаВключаетНДС,
			СтрокаТабличнойЧасти.СуммаПоступления,
			СтрокаТабличнойЧасти.СуммаПоступления - СтрокаТабличнойЧасти.СуммаНДС);
		СтрокаТабличнойЧасти.Цена  = ?(СтрокаТабличнойЧасти.Количество = 0,
			0,
			СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество);
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

		РассчитатьВознаграждениеВСтроке(
			СтрокаТабличнойЧасти.СуммаВознаграждения,
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
			СтрокаТабличнойЧасти.ВсегоВознаграждение,
			СтрокаТабличнойЧасти.Сумма,
			СтрокаТабличнойЧасти.СуммаНДС,
			СтрокаТабличнойЧасти.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			Ложь,
			"Товары");

	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеализованнымНаСервере()

	Объект.Товары.Очистить();

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",   Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Период", ПолучитьПериодЗаполненияНаСервере());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура КАК Номенклатура,
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.ВыручкаОстаток) КАК ВыручкаОстаток,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.СуммаПоступленияОстаток) КАК СуммаПоступленияОстаток,
	|	РеализованныеТоварыКомитентовОстатки.Покупатель КАК Покупатель,
	|	РеализованныеТоварыКомитентовОстатки.ДатаРеализации КАК ДатаРеализации
	|ИЗ
	|	РегистрНакопления.РеализованныеТоварыКомитентов.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК РеализованныеТоварыКомитентовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура,
	|	РеализованныеТоварыКомитентовОстатки.Покупатель,
	|	РеализованныеТоварыКомитентовОстатки.ДатаРеализации,
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Покупатель,
	|	ДатаРеализации";

	Выборка = Запрос.Выполнить().Выбрать();

	МДОбъекта = Объект.Ссылка.Метаданные();
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		
		СтрокаТабличнойЧасти.Покупатель 	  = Выборка.Покупатель;
		СтрокаТабличнойЧасти.ДатаРеализации   = Выборка.ДатаРеализации;
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.КоличествоОстаток;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;
		СтрокаТабличнойЧасти.КоличествоМест   = Выборка.КоличествоОстаток;

		// В регистре РеализованныеТоварыКомитентов сумма товара хранится с НДС,
		// поэтому вставлять сумму в документ надо в зависимости от галочки СуммаВключаетНДС
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "Товары", МДОбъекта);

		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			Выборка.ВыручкаОстаток,
			Истина, // в регистре хранится с НДС
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		// СуммаПоступления и ЦенаПоступления всегда с НДС
		СтрокаТабличнойЧасти.СуммаПоступления = Выборка.СуммаПоступленияОстаток;
		СтрокаТабличнойЧасти.ЦенаПоступления  = ?(Выборка.КоличествоОстаток = 0, 0, Выборка.СуммаПоступленияОстаток / Выборка.КоличествоОстаток);
		СтрокаТабличнойЧасти.Сумма            = Выборка.ВыручкаОстаток - ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		СтрокаТабличнойЧасти.Цена             = ?(Выборка.КоличествоОстаток = 0, 0, СтрокаТабличнойЧасти.Сумма / Выборка.КоличествоОстаток);
		СтрокаТабличнойЧасти.Всего            = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

		РассчитатьВознаграждениеВСтроке(
			СтрокаТабличнойЧасти.СуммаВознаграждения,
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
			СтрокаТабличнойЧасти.ВсегоВознаграждение,
			СтрокаТабличнойЧасти.Сумма,
			СтрокаТабличнойЧасти.СуммаНДС,
			СтрокаТабличнойЧасти.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			Ложь,
			"Товары")

	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПоступлениюНаСервере(Поступление)

	Объект.Товары.Очистить();

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугТовары.Сумма
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Сумма + ПоступлениеТоваровУслугТовары.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();

	МДОбъекта = Объект.Ссылка.Метаданные();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.КоличествоМест   = Выборка.Количество;

		СтрокаТабличнойЧасти.СуммаПоступления = Выборка.Сумма;
		СтрокаТабличнойЧасти.ЦенаПоступления  = ?(Выборка.Количество <> 0, Выборка.Сумма / Выборка.Количество, 0);

		СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.ЦенаПоступления;
		СтрокаТабличнойЧасти.Сумма            = СтрокаТабличнойЧасти.СуммаПоступления;

		СтрокаТабличнойЧасти.Всего =  СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Объект, "Товары", МДОбъекта);
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
												Объект.СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		РассчитатьВознаграждениеВСтроке(
			СтрокаТабличнойЧасти.СуммаВознаграждения,
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
			СтрокаТабличнойЧасти.ВсегоВознаграждение,
			СтрокаТабличнойЧасти.Сумма,
			СтрокаТабличнойЧасти.СуммаНДС,
			СтрокаТабличнойЧасти.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			Ложь,
			"Товары");
			
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивНоменклатуры	= Объект.Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|	И Номенклатура.Услуга";

	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Результат = Запрос.Выполнить();
	
	МассивУслуг	= Результат.Выгрузить().ВыгрузитьКолонку("Номенклатура");

	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		СтрокаТаблицы.ВсегоВознаграждение = СтрокаТаблицы.СуммаВознаграждения + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСВознаграждения);
		СтрокаТаблицы.Услуга	= НЕ МассивУслуг.Найти(СтрокаТаблицы.Номенклатура) = Неопределено;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");

	Валюта = Объект.ВалютаДокумента;

	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");

		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
		ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "КОМИТЕНТ";

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			
		Иначе
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	= СведенияОНоменклатуре.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент		= СведенияОНоменклатуре.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС			= СведенияОНоменклатуре.СтавкаНДС;
			
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			
			СтрокаТабличнойЧасти.ЦенаПоступления  = СтрокаТабличнойЧасти.Цена;
			СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			
		КонецЕсли;
		
		Если Объект.СпособРасчетаКомиссионногоВознаграждения
			= Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения / 100
			* (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПоступления);
		ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения
			= Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения / 100
			* СтрокаТабличнойЧасти.Сумма;
		КонецЕсли;
		
		РассчитатьВознаграждениеВСтроке(
			СтрокаТабличнойЧасти.СуммаВознаграждения,
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения,
			СтрокаТабличнойЧасти.ВсегоВознаграждение,
			СтрокаТабличнойЧасти.Сумма,
			СтрокаТабличнойЧасти.СуммаНДС,
			СтрокаТабличнойЧасти.СуммаПоступления,
			Объект.ПроцентКомиссионногоВознаграждения,
			Объект.СпособРасчетаКомиссионногоВознаграждения,
			Объект.СтавкаНДСВознаграждения,
			Объект.СуммаВключаетНДС,
			Ложь,
			"Товары");
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПрименениеУСН       = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименениеУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры	 = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	ЕстьВалютныйУчет 				 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();

КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаКлиенте
Процедура УведомитьОбИзмененияхПравилПереоценкиЗадолженностейВУЕ()
	
	Если РасчетыВУЕ Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ПереоценкаЗадолженностиПоДоговорамВУЕ2015", , НастройкиПредупреждений);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПериодЗаполненияНаСервере()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая);
	Иначе
		Возврат Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая);
	КонецЕсли; 
КонецФункции 

&НаКлиенте
Процедура ОткрытьФормуВыбораПоступления()
	
	ПараметрыОтбора = Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	ПараметрыФормы = Новый Структура("Отбор, МножественныйВыбор", ПараметрыОтбора, Ложь);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоПоступлениюЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениеТабличнойЧастиПоПоступлениюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуВыбораПоступления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениеТабличнойЧастиПоДоговоруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДоговоруНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Поступление = РезультатЗакрытия;
	
	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьПоПоступлениюНаСервере(Поступление);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРеализованнымНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
		
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
		
	// Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		Модифицированность      = Истина;
		
		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;	

		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;
		 	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтотОбъект);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтотОбъект, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтотОбъект, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтотОбъект, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьСписокЭД(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры
