
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру, используемую для заполнения документа.
Функция ДанныеЗаполненияНезачисленнымиСтроками() Экспорт
	ДанныеЗаполненияНезачисленнымиСтроками = Новый Структура;
	ДанныеЗаполненияНезачисленнымиСтроками.Вставить("ЭтоДанныеЗаполненияНезачисленнымиСтроками");
	ДанныеЗаполненияНезачисленнымиСтроками.Вставить("Ведомость", Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка());
	ДанныеЗаполненияНезачисленнымиСтроками.Вставить("Физлица", Новый Массив);
	Возврат ДанныеЗаполненияНезачисленнымиСтроками
КонецФункции	

Функция ЭтоДанныеЗаполненияНезачисленнымиСтроками(ДанныеЗаполнения) Экспорт
	Возврат ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЭтоДанныеЗаполненияНезачисленнымиСтроками")
КонецФункции	

// Создает новый документ на основании существующего,
// перенося в новый документ только указанных физических лиц.
// 
// Параметры:
//	Документ - исходный документ (объект или ссылка).
//  Физлица - массив физических лиц.
//
// Возвращаемое значение:
//	ДокументОбъект 
//
Функция СкопироватьЧастично(Документ, Физлица) Экспорт
	
	Копия = Документ.Ссылка.Скопировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Копия.Зарплата.Выгрузить(, "Сотрудник"));
	Запрос.УстановитьПараметр("Физлица", Физлица);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&Сотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	ФизическиеЛица.Ссылка КАК Физлицо
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ФизическиеЛица.Ссылка = Сотрудники.Сотрудник)";
	ВыборкаРаботников = Запрос.Выполнить().Выбрать();
	
	ПараметрыОтбора = Новый Структура("Сотрудник");
	Пока ВыборкаРаботников.Следующий() Цикл
		Если Физлица.Найти(ВыборкаРаботников.Физлицо) = Неопределено Тогда
			ПараметрыОтбора.Сотрудник = ВыборкаРаботников.Сотрудник;
			УдаляемыеСтроки = Копия.Зарплата.НайтиСтроки(ПараметрыОтбора);
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				Копия.Зарплата.Удалить(УдаляемаяСтрока);
			КонецЦикла	
		КонецЕсли	
	КонецЦикла;	
	
	Возврат Копия
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

Процедура ЗаполнитьСостав() Экспорт
	ВзаиморасчетыССотрудниками.ЗаполнитьСоставВедомости("Документ.ВедомостьНаВыплатуЗарплатыВБанк", "ФизическоеЛицо, НомерЛицевогоСчета");
КонецПроцедуры	

Процедура СогласоватьТабличныеЧасти() Экспорт
	ВзаиморасчетыССотрудниками.СогласоватьТабличныеЧастиВедомостей("Документ.ВедомостьНаВыплатуЗарплатыВБанк");
КонецПроцедуры	

#КонецОбласти


Функция РеквизитыОтветственныхЛиц() Экспорт
	Возврат ВзаиморасчетыССотрудниками.ВедомостьРеквизитыОтветственныхЛиц();
КонецФункции	

// Возвращает соответствие номеров лицевых счетов с физическими лицами.
//
// Параметры:
//		МассивВедомостей - массив ссылок на документы.
//		МассивЛицевыхСчетов - массив с номерами лицевых счетов, для которых требуется найти физических лиц.
//
// Возвращаемое значение:
//		Соответствие, где ключ - это номер лицевого счета, значение - физическое лицо.
//
Функция НомераЛицевыхСчетовФизическихЛиц(МассивВедомостей, МассивЛицевыхСчетов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивВедомостей", МассивВедомостей);
	Запрос.УстановитьПараметр("ЛицевыеСчета", МассивЛицевыхСчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ВедомостьНаВыплатуЗарплатыВБанкЗарплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Сотрудник = Сотрудники.Ссылка
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Ссылка В(&МассивВедомостей)
	|	И ВедомостьНаВыплатуЗарплатыВБанкЗарплата.НомерЛицевогоСчета В(&ЛицевыеСчета)";
	
	СоответствиеНомеровЛицевыхСчетов = Новый Соответствие;
	Выборка =  Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеНомеровЛицевыхСчетов.Вставить(Выборка.НомерЛицевогоСчета, Выборка.ФизическоеЛицо);
	КонецЦикла;
	
	Возврат СоответствиеНомеровЛицевыхСчетов;
	
КонецФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьВБанкДобавитьКомандыПечати(КомандыПечати)	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьВБанкПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
КонецПроцедуры

Функция ПечатьСпискаПеречисленийПоДокументам(МассивОбъектов, ОбъектыПечати) Экспорт
	
	// получаем данные для печати
	ДанныеШапок = ВыборкаДляПечатиШапки(МассивОбъектов);
	ДанныеСтрок = ВыборкаДляПечатиТаблицы(МассивОбъектов);
	
	ТабличныйДокумент = ПечатьСписокПеречислений(МассивОбъектов, ОбъектыПечати, Новый Структура("ДанныеШапок, ДанныеСтрок", ДанныеШапок, ДанныеСтрок));
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьСпискаПеречисленийПоXML(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = ПечатьСписокПеречислений(МассивОбъектов, ОбъектыПечати,
		ОбменСБанкамиПоЗарплатнымПроектам.ДанныеСпискаПеречисленийПоXML(МассивОбъектов));
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьСписокПеречислений(МассивОбъектов, ОбъектыПечати, ДанныеДляПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВедомостьНаВыплатуЗарплатыВБанк_СписокПеречислений";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ПФ_MXL_СписокПеречислений");
	
	// получаем данные для печати
	ДанныеДляПечатиШапок = ДанныеДляПечати.ДанныеШапок;
	ДанныеДляПечатиСтрок = ДанныеДляПечати.ДанныеСтрок;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеДляПечатиШапки Из ДанныеДляПечатиШапок Цикл
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подсчитываем количество страниц документа - для корректного разбиения на страницы.
		ВсегоСтрокДокумента = ДанныеДляПечатиСтрок.Количество();
		
		ОбластьМакетаШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
		ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогПоСтранице = Макет.ПолучитьОбласть("ИтогПоЛисту");
		ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
		
		// Массив с двумя строками - для разбиения на страницы.
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
		ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
		
		// выводим данные о документе
		ОбластьМакетаШапкаДокумента.Параметры.Дата = Формат(ДанныеДляПечатиШапки.Дата, "ДЛФ=D");
		ОбластьМакетаШапкаДокумента.Параметры.Организация = СокрЛП(ДанныеДляПечатиШапки.Организация);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапкаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0; Итого = 0;
		// Выводим данные по строкам документа.
		НомерСтроки = 0;
		НайденныеСтроки = ДанныеДляПечатиСтрок.НайтиСтроки(Новый Структура("Ведомость", ДанныеДляПечатиШапки.Ссылка));
		Для Каждого ДанныеДляПечатиСтроки Из НайденныеСтроки Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеДляПечатиСтроки);
			ОбластьМакетаСтрока.Параметры.НомерСтроки = НомерСтроки;
			ОбластьМакетаСтрока.Параметры.Физлицо = ДанныеДляПечатиСтроки.Фамилия +" "+ ДанныеДляПечатиСтроки.Имя +" "+ ДанныеДляПечатиСтроки.Отчество;
			
			// разбиение на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу.
			ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			Если Не ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
				ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				
				ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
				ТабличныйДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
				ВыведеноСтраниц = ВыведеноСтраниц + 1;
				ИтогоНаСтранице = 0;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			ИтогоНаСтранице = ИтогоНаСтранице + ДанныеДляПечатиСтроки.Сумма;
			Итого = Итого + ДанныеДляПечатиСтроки.Сумма;
			
		КонецЦикла;
		
		Если ВыведеноСтрок > 0 Тогда 
			ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
		КонецЕсли;
		
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
		ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
		ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
		Для Сч = 1 По ОбластьМакетаСтрока.Параметры.Количество() Цикл
			ОбластьМакетаСтрока.Параметры.Установить(Сч - 1,""); 
		КонецЦикла;
		ОбластьМакетаСтрока.Параметры.Физлицо = " ";
		Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти) Цикл
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечатиШапки);
		ОбластьМакетаПодвал.Параметры.Итого = Итого;
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечатиШапки.Ссылка);
		
	КонецЦикла; // по документам
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует запрос по документу.
//
// Параметры: 
//  Ведомости - массив ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк.
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ВыборкаДляПечатиШапки(Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВедомостьВБанк.Ссылка КАК Ссылка,
	|	ВедомостьВБанк.Номер КАК Номер,
	|	ВедомостьВБанк.Дата КАК Дата,
	|	ВедомостьВБанк.ПериодРегистрации КАК ПериодРегистрации,
	|	ВедомостьВБанк.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ВедомостьВБанк.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	ВедомостьВБанк.Организация.КодПоОКПО КАК КодПоОКПО,
	|	ВедомостьВБанк.Подразделение КАК Подразделение,
	|	ВедомостьВБанк.СуммаПоДокументу КАК СуммаПоДокументу,
	|	ВедомостьВБанк.Руководитель,
	|	ВедомостьВБанк.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	ВедомостьВБанк.ГлавныйБухгалтер,
	|	ВедомостьВБанк.Бухгалтер
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьВБанк
	|ГДЕ
	|	ВедомостьВБанк.Ссылка В(&Ведомости)";
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Номер,
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.ПериодРегистрации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.НазваниеОрганизации,
	|	ДанныеДокументов.КодПоОКПО,
	|	ДанныеДокументов.Подразделение,
	|	ДанныеДокументов.СуммаПоДокументу,
	|	ЕСТЬNULL(ВТФИОГлавБухПоследние.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ВТФИОРуководителейПоследние.РасшифровкаПодписи, """") КАК Руководитель,
	|	ДанныеДокументов.РуководительДолжность,
	|	ЕСТЬNULL(ВТФИОБухгалтерПоследние.РасшифровкаПодписи, """") КАК Бухгалтер
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОРуководителейПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОРуководителейПоследние.Ссылка
	|			И ДанныеДокументов.Руководитель = ВТФИОРуководителейПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОГлавБухПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОГлавБухПоследние.Ссылка
	|			И ДанныеДокументов.ГлавныйБухгалтер = ВТФИОГлавБухПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОБухгалтерПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОБухгалтерПоследние.Ссылка
	|			И ДанныеДокументов.Бухгалтер = ВТФИОБухгалтерПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Организация,
	|	НАЧАЛОПЕРИОДА(ДанныеДокументов.Дата, ГОД),
	|	ДанныеДокументов.Номер";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует запрос по табличной части документа.
//
// Параметры: 
//  Ведомости - массив ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк.
//
// Возвращаемое значение:
//  Выборка из результата запроса.
//
Функция ВыборкаДляПечатиТаблицы(Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Ссылка.Дата КАК Период,
	|	МИНИМУМ(ВедомостьСостав.НомерСтроки) КАК НомерСтроки,
	|	ВедомостьСостав.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьСостав.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	СУММА(ВедомостьЗарплата.КВыплате + ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
	|ПОМЕСТИТЬ ВТСписокФизическихЛиц
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ВедомостьЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.Состав КАК ВедомостьСостав
	|		ПО (ВедомостьСостав.ИдентификаторСтроки = ВедомостьЗарплата.ИдентификаторСтроки)
	|ГДЕ
	|	ВедомостьЗарплата.Ссылка В(&Ведомости)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьЗарплата.Ссылка,
	|	ВедомостьЗарплата.Ссылка.Дата,
	|	ВедомостьСостав.ФизическоеЛицо,
	|	ВедомостьСостав.НомерЛицевогоСчета
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВедомостьЗарплата.КВыплате + ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты) > 0";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, "ВТСписокФизическихЛиц");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "Фамилия,Имя,Отчество");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокФизическихЛиц.Ссылка КАК Ведомость,
	|	СписокФизическихЛиц.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	КадровыеДанныеФизическихЛиц.Фамилия,
	|	КадровыеДанныеФизическихЛиц.Имя,
	|	КадровыеДанныеФизическихЛиц.Отчество,
	|	СписокФизическихЛиц.Сумма КАК Сумма
	|ИЗ
	|	ВТСписокФизическихЛиц КАК СписокФизическихЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	|		ПО СписокФизическихЛиц.ФизическоеЛицо = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
	|			И СписокФизическихЛиц.Период = КадровыеДанныеФизическихЛиц.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокФизическихЛиц.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ФормированиеФайлаОбменаСБанками

// Формирует и прикрепляет файл обмена к документам с помощью подсистемы "Файлы".
//
// Параметры:
//		СтруктураПараметровДляФормированияФайла - Структура - должна содержать значения:
//			МассивДокументов - Массив ссылок на документы, по которым требуется сформировать файл.
//			МассивОписанийФайлов - Массив описаний сформированных файлов.
//
Процедура ВыгрузитьФайлыДляОбменаСБанком(СтруктураПараметровДляФормированияФайла) Экспорт
	
	Если Не СтруктураПараметровДляФормированияФайла.Свойство("СтруктураПараметровЭД") Тогда
		СтруктураПараметровДляФормированияФайла.Вставить("СтруктураПараметровЭД", Неопределено);
	КонецЕсли;
	Если Не СтруктураПараметровДляФормированияФайла.Свойство("ПлатежныйДокумент") Тогда
		СтруктураПараметровДляФормированияФайла.Вставить("ПлатежныйДокумент", Неопределено);
	КонецЕсли;
	
	Отказ = Ложь;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", СтруктураПараметровДляФормированияФайла.МассивДокументов);
	Запрос.УстановитьПараметр("ПлатежныйДокумент", СтруктураПараметровДляФормированияФайла.ПлатежныйДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ведомость,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Проведен КАК Проведен,
	|	ПлатежныеДокументыПеречисленияЗарплаты.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлатежныеДокументыПеречисленияЗарплаты КАК ПлатежныеДокументыПеречисленияЗарплаты
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ПлатежныеДокументыПеречисленияЗарплаты.Ведомость
	|			И (ПлатежныеДокументыПеречисленияЗарплаты.ПлатежныйДокумент <> &ПлатежныйДокумент)
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В(&МассивДокументов)";
	
	ЗарплатныйПроект = Неопределено;
	ВДокументахОдинЗарплатныйПроект = Истина;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ПлатежныйДокумент) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 уже включена в %2'"),
				Выборка.Ведомость, Выборка.ПлатежныйДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.ПлатежныйДокумент, , , Отказ);
		КонецЕсли;
		Если Не Выборка.Проведен Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 не проведен.'"), Выборка.Ведомость);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ведомость,,, Отказ);
		КонецЕсли;
		Если ЗарплатныйПроект = Неопределено Тогда
			ЗарплатныйПроект = Выборка.ЗарплатныйПроект;
		ИначеЕсли ЗарплатныйПроект <> Выборка.ЗарплатныйПроект Тогда
			ВДокументахОдинЗарплатныйПроект = Ложь;
		КонецЕсли;
		Если НЕ ОбменСБанкамиПоЗарплатнымПроектам.ИспользоватьЭОИСБанком(Выборка.ЗарплатныйПроект) Тогда
			Если ЗначениеЗаполнено(Выборка.ЗарплатныйПроект) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По зарплатному проекту %1 не используется обмен электронными документами с банком.'"),
					Выборка.ЗарплатныйПроект);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 не выбран зарплатный проект.'"), Выборка.Ведомость);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, Выборка.ЗарплатныйПроект, "ИспользоватьЭлектронныйДокументооборотСБанком",,Отказ);
		КонецЕсли;
	КонецЦикла;
	Если СтруктураПараметровДляФормированияФайла.ПлатежныйДокумент <> Неопределено Тогда
		Если НЕ СтруктураПараметровДляФормированияФайла.ПлатежныйДокумент.Проведен Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 не проведен.'"), СтруктураПараметровДляФормированияФайла.ПлатежныйДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, СтруктураПараметровДляФормированияФайла.ПлатежныйДокумент,,, Отказ);
		КонецЕсли;
		
		Если Не ВДокументахОдинЗарплатныйПроект Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 присутствуют ведомости с разными зарплатными проектами. Файл по документу не сформирован.'"),
					СтруктураПараметровДляФормированияФайла.ПлатежныйДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ведомость,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = "ВедомостьНаВыплатуЗарплатыВБанк";
	ДатаПолученияДанных = ТекущаяДатаСеанса();
	
	СтруктураПараметровДляФормированияФайла.Вставить("ВидОперации", ВидОперации);
	СтруктураПараметровДляФормированияФайла.Вставить("ДанныеШапки", ДанныеШапкиДокументовДляПолученияТекстаФайла(
		СтруктураПараметровДляФормированияФайла.МассивДокументов, ДатаПолученияДанных, СтруктураПараметровДляФормированияФайла.ПлатежныйДокумент));
	СтруктураПараметровДляФормированияФайла.Вставить("ДанныеСтрок", ДанныеСтрокДокументовДляПолученияТекстаФайла(
		СтруктураПараметровДляФормированияФайла.МассивДокументов, ДатаПолученияДанных, СтруктураПараметровДляФормированияФайла.ПлатежныйДокумент));
	СтруктураПараметровДляФормированияФайла.Вставить("КорневыеСвойства", ОбменСБанкамиПоЗарплатнымПроектам.КорневыеСвойства(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеПолейФайла", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеПолейФайла(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("ОбязательныеПоляФайла", ОбменСБанкамиПоЗарплатнымПроектам.ОбязательныеПоляФайла(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеПреобразованияЗначений", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеПреобразованияЗначений(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеТипов", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеТипов(ВидОперации));
	
	ОбменСБанкамиПоЗарплатнымПроектам.СоздатьФайлыДляОбменаСБанком(СтруктураПараметровДляФормированияФайла);
	
КонецПроцедуры

// Получает данные документов для формирования файла обмена.
//
// Параметры:
//		МассивДокументов - Массив ссылок на документы, по которым требуется получить данные.
//		ДатаПолученияДанных - дата формирования файла.
//		ПлатежныйДокумент - Ссылка на платежный документ, в который входят ведомости.
//
// Возвращаемое значение:
//		Таблица значений "ДанныеШапкиДокумента" - содержит данные документа.
//
Функция ДанныеШапкиДокументовДляПолученияТекстаФайла(МассивДокументов, ДатаПолученияДанных, ПлатежныйДокумент = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВедомостиНаВыплатуЗарплатыВБанк", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Документ,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Номер КАК НомерДокумента,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеОрганизации,
	|	Организации.Ссылка КАК Организация,
	|	Организации.ИНН КАК ИННОрганизации,
	|	ЗарплатныеПроекты.Ссылка КАК ЗарплатныйПроект,
	|	ЗарплатныеПроекты.НомерДоговора КАК НомерДоговора,
	|	ЗарплатныеПроекты.ДатаДоговора КАК ДатаДоговора,
	|	ЗарплатныеПроекты.ОтделениеБанка КАК ОтделениеБанка,
	|	КлассификаторБанковРФ.Код КАК БИКБанка,
	|	ЗарплатныеПроекты.РасчетныйСчет КАК НомерРасчетногоСчетаОрганизации,
	|	ЗарплатныеПроекты.ФорматФайла КАК ФорматФайла,
	|	""01"" КАК ВидЗачисления,
	|	ИтоговыеДанныеПоВедомости.КоличествоЗаписей,
	|	ИтоговыеДанныеПоВедомости.СуммаИтого
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
	|		ПО (ЗарплатныеПроекты.Банк = КлассификаторБанковРФ.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДанныеВедомостейДляОплатыЧерезБанк.Ссылка КАК Ведомость,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостейДляОплатыЧерезБанк.Сотрудник.ФизическоеЛицо) КАК КоличествоЗаписей,
	|			СУММА(ДанныеВедомостейДляОплатыЧерезБанк.КВыплате + ДанныеВедомостейДляОплатыЧерезБанк.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаИтого
	|		ИЗ
	|			Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ДанныеВедомостейДляОплатыЧерезБанк
	|		ГДЕ
	|			ДанныеВедомостейДляОплатыЧерезБанк.Ссылка В(&ВедомостиНаВыплатуЗарплатыВБанк)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДанныеВедомостейДляОплатыЧерезБанк.Ссылка) КАК ИтоговыеДанныеПоВедомости
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ИтоговыеДанныеПоВедомости.Ведомость
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В(&ВедомостиНаВыплатуЗарплатыВБанк)";
	
	ДанныеШапкиДокумента = Запрос.Выполнить().Выгрузить();
	
	// ИдПервичногоДокумента
	ДанныеШапкиДокумента.Колонки.Добавить("ИдПервичногоДокумента");
	
	// Номер и дата платежного поручения.
	ДанныеШапкиДокумента.Колонки.Добавить("НомерПлатежногоПоручения");
	ДанныеШапкиДокумента.Колонки.Добавить("ДатаПлатежногоПоручения");
	
	// ДатаФормирования
	ДанныеШапкиДокумента.Колонки.Добавить("ДатаФормирования");
	
	// ИмяФайла
	ДанныеШапкиДокумента.Колонки.Добавить("ИмяФайла");
	
	// ДанныеРеестра
	ДанныеШапкиДокумента.Колонки.Добавить("ДанныеРеестра");
	
	РеквизитыПлатежногоДокумента = Неопределено;
	Если ПлатежныйДокумент <> Неопределено Тогда 
		РеквизитыПлатежногоДокумента = Новый Структура("ПлатежныйДокумент, Номер, Дата", ПлатежныйДокумент, "", ДатаПолученияДанных);
		Выборка = РегистрыСведений.РеквизитыПлатежныхДокументовПеречисленияЗарплаты.Выбрать(Новый Структура("ПлатежныйДокумент", ПлатежныйДокумент));
		Если Выборка.Следующий() Тогда 
			ЗаполнитьЗначенияСвойств(РеквизитыПлатежногоДокумента, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	НомераРеестров = НомераРеестровДокументов(ДанныеШапкиДокумента, РеквизитыПлатежногоДокумента);
	
	КоличествоЗаписей = Неопределено;
	СуммаИтого = Неопределено;
	Для каждого СтрокаДанных Из ДанныеШапкиДокумента Цикл
		Если КоличествоЗаписей = Неопределено Тогда
			КоличествоЗаписей = ДанныеШапкиДокумента.Итог("КоличествоЗаписей");
		КонецЕсли;
		Если СуммаИтого = Неопределено Тогда
			СуммаИтого = ДанныеШапкиДокумента.Итог("СуммаИтого");
		КонецЕсли;
		СтрокаДанных.ДатаФормирования = ДатаПолученияДанных;
		Если ПлатежныйДокумент <> Неопределено Тогда
			СтрокаДанных.ИдПервичногоДокумента = ПлатежныйДокумент.УникальныйИдентификатор();
			СтрокаДанных.НомерПлатежногоПоручения = РеквизитыПлатежногоДокумента.Номер;
			СтрокаДанных.ДатаПлатежногоПоручения = РеквизитыПлатежногоДокумента.Дата;
			СтрокаДанных.ДатаДокумента = РеквизитыПлатежногоДокумента.Дата;
			СтрокаДанных.КоличествоЗаписей = КоличествоЗаписей;
			СтрокаДанных.СуммаИтого = СуммаИтого;
			СтрокаДанных.ДанныеРеестра = НомераРеестров[ПлатежныйДокумент];
			НомерРеестра = СтрЗаменить(СтрокаДанных.ДанныеРеестра.НомерРеестра, Символы.НПП, "");
			СтрокаДанных.НомерДокумента = НомерРеестра;
			НомерРеестра = Прав(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерРеестра, 3), 3);
			СтрокаДанных.ИмяФайла = ОбменСБанкамиПоЗарплатнымПроектам.ИмяФайлаОбменаСБанкамиПоЗарплатнымПроектам(ПлатежныйДокумент, СтрокаДанных.ОтделениеБанка, НомерРеестра, "z");
		Иначе
			СтрокаДанных.ИдПервичногоДокумента = СтрокаДанных.Документ.УникальныйИдентификатор();
			СтрокаДанных.ДанныеРеестра = НомераРеестров[СтрокаДанных.Документ];
			НомерРеестра = СтрЗаменить(СтрокаДанных.ДанныеРеестра.НомерРеестра, Символы.НПП, "");
			СтрокаДанных.НомерДокумента = НомерРеестра;
			НомерРеестра = Прав(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерРеестра, 3), 3);
			СтрокаДанных.ИмяФайла = ОбменСБанкамиПоЗарплатнымПроектам.ИмяФайлаОбменаСБанкамиПоЗарплатнымПроектам(СтрокаДанных.Документ, СтрокаДанных.ОтделениеБанка, НомерРеестра, "z");
		КонецЕсли;
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ЗаполнитьДанныеОплатыВедомостей(
			СтрокаДанных.Документ, СтрокаДанных.НомерПлатежногоПоручения, СтрокаДанных.ДатаПлатежногоПоручения, ПлатежныйДокумент);
		
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьДанныеШапкиДокументаДляПолученияТекстаФайла(СтрокаДанных, СтрокаДанных.Документ, ДатаПолученияДанных);
		
	КонецЦикла;
	
	Возврат ДанныеШапкиДокумента;
	
КонецФункции

// Определяет номера реестров для документов.
//
Функция НомераРеестровДокументов(ТаблицаДокументов, РеквизитыПлатежногоДокумента)
	
	ГодыВыгрузки = Новый Массив;
	
	Если РеквизитыПлатежногоДокумента = Неопределено Тогда 
		Для Каждого ДанныеШапки Из ТаблицаДокументов Цикл 
			ГодВыгрузки = Год(ДанныеШапки.ДатаДокумента);
			Если ГодыВыгрузки.Найти(ГодВыгрузки) = Неопределено Тогда 
				ГодыВыгрузки.Добавить(ГодВыгрузки);
			КонецЕсли;
		КонецЦикла;
	Иначе 
		ГодыВыгрузки.Добавить(Год(РеквизитыПлатежногоДокумента.Дата));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГодыВыгрузки", ГодыВыгрузки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияДокументовЗачисленияЗарплаты.Документ,
	|	СостоянияДокументовЗачисленияЗарплаты.Год,
	|	СостоянияДокументовЗачисленияЗарплаты.НомерРеестра
	|ПОМЕСТИТЬ ВТВыгруженныеДокументы
	|ИЗ
	|	РегистрСведений.СостоянияДокументовЗачисленияЗарплаты КАК СостоянияДокументовЗачисленияЗарплаты
	|ГДЕ
	|	СостоянияДокументовЗачисленияЗарплаты.Год В(&ГодыВыгрузки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыПлатежныхДокументовПеречисленияЗарплаты.Организация,
	|	ВыгруженныеДокументы.Документ,
	|	ВыгруженныеДокументы.Год,
	|	ВыгруженныеДокументы.НомерРеестра
	|ПОМЕСТИТЬ ВТДокументыПоОрганизациям
	|ИЗ
	|	ВТВыгруженныеДокументы КАК ВыгруженныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыПлатежныхДокументовПеречисленияЗарплаты КАК РеквизитыПлатежныхДокументовПеречисленияЗарплаты
	|		ПО ВыгруженныеДокументы.Документ = РеквизитыПлатежныхДокументовПеречисленияЗарплаты.ПлатежныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Организация,
	|	ВыгруженныеДокументы.Документ,
	|	ВыгруженныеДокументы.Год,
	|	ВыгруженныеДокументы.НомерРеестра
	|ИЗ
	|	ВТВыгруженныеДокументы КАК ВыгруженныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО ВыгруженныеДокументы.Документ = ВедомостьНаВыплатуЗарплатыВБанк.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоОрганизациям.Организация,
	|	ДокументыПоОрганизациям.Год,
	|	МАКСИМУМ(ДокументыПоОрганизациям.НомерРеестра) КАК НомерРеестра
	|ИЗ
	|	ВТДокументыПоОрганизациям КАК ДокументыПоОрганизациям
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоОрганизациям.Организация,
	|	ДокументыПоОрганизациям.Год";
	
	НомераРеестровОрганизаций = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	НомераРеестров = Новый Соответствие;
	
	Если РеквизитыПлатежногоДокумента = Неопределено Тогда
		Для Каждого ДанныеШапки Из ТаблицаДокументов Цикл 
			Год = Год(ДанныеШапки.ДатаДокумента);
			ДанныеРеестра = Новый Структура("Год, НомерРеестра", Год, Неопределено);
			
			ДанныеДокумента = Новый Структура("Организация, Год", ДанныеШапки.Организация, Год);
			НайденныеСтроки = НомераРеестровОрганизаций.НайтиСтроки(ДанныеДокумента);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ДанныеДокумента.Вставить("НомерРеестра", 1);
				ЗаполнитьЗначенияСвойств(НомераРеестровОрганизаций.Добавить(), ДанныеДокумента);
			Иначе 
				ДанныеДокумента.Вставить("НомерРеестра", НайденныеСтроки[0].НомерРеестра + 1);
				НайденныеСтроки[0].НомерРеестра = ДанныеДокумента.НомерРеестра;
			КонецЕсли;
			ДанныеРеестра.НомерРеестра = ДанныеДокумента.НомерРеестра;
			
			НомераРеестров.Вставить(ДанныеШапки.Документ, ДанныеРеестра);
		КонецЦикла;
	Иначе
		Год = Год(РеквизитыПлатежногоДокумента.Дата);
		ДанныеРеестра = Новый Структура("Год, НомерРеестра", Год, Неопределено);
		
		ДанныеДокумента = Новый Структура("Организация, Год",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПлатежногоДокумента.ПлатежныйДокумент, "Организация"),
			Год);
		НайденныеСтроки = НомераРеестровОрганизаций.НайтиСтроки(ДанныеДокумента);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ДанныеДокумента.Вставить("НомерРеестра", 1);
			ЗаполнитьЗначенияСвойств(НомераРеестровОрганизаций.Добавить(), ДанныеДокумента);
		Иначе 
			ДанныеДокумента.Вставить("НомерРеестра", НайденныеСтроки[0].НомерРеестра + 1);
			НайденныеСтроки[0].НомерРеестра = ДанныеДокумента.НомерРеестра;
		КонецЕсли;
		ДанныеРеестра.НомерРеестра = ДанныеДокумента.НомерРеестра;
		
		НомераРеестров.Вставить(РеквизитыПлатежногоДокумента.ПлатежныйДокумент, ДанныеРеестра);
	КонецЕсли;
	
	Возврат НомераРеестров;
	
КонецФункции

// Получает данные строк документа для формирования файла обмена.
//
// Параметры:
//		МассивДокументов - Массив ссылок на документы, по которым требуется получить данные.
//		ДатаПолученияДанных - дата формирования файла.
//		ПлатежныйДокумент - Ссылка на платежный документ, в который входят ведомости.
//
// Возвращаемое значение:
//		Таблица значений "ДанныеСтрокДокумента" - содержит данные строк документа.
//
Функция ДанныеСтрокДокументовДляПолученияТекстаФайла(МассивДокументов, ДатаПолученияДанных, ПлатежныйДокумент = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ДатаПолученияДанных КАК Период,
	|	ДанныеСотрудников.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ДанныеСотрудников
	|ГДЕ
	|	ДанныеСотрудников.Ссылка В(&МассивДокументов)";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСписокСотрудников");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Фамилия,Имя,Отчество");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Документ,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Номер КАК НомерДокумента,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Дата КАК ДатаДокумента,
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Фамилия КАК Фамилия,
	|	КадровыеДанныеСотрудников.Имя КАК Имя,
	|	КадровыеДанныеСотрудников.Отчество КАК Отчество,
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	СУММА(ВедомостьНаВыплатуЗарплатыВБанкЗарплата.КВыплате + ВедомостьНаВыплатуЗарплатыВБанкЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаКВыплате,
	|	ЗарплатныеПроекты.ОтделениеБанка КАК ОтделениеБанка,
	|	ЗарплатныеПроекты.ФилиалОтделенияБанка КАК ФилиалОтделенияБанка,
	|	ЗарплатныеПроекты.Валюта.Код КАК КодВалюты,
	|	0 КАК НомерСтроки
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ВедомостьНаВыплатуЗарплатыВБанкЗарплата
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО (ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Сотрудник = КадровыеДанныеСотрудников.Сотрудник)
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка,
	|	ЗарплатныеПроекты.ОтделениеБанка,
	|	ЗарплатныеПроекты.ФилиалОтделенияБанка,
	|	КадровыеДанныеСотрудников.Фамилия,
	|	КадровыеДанныеСотрудников.Имя,
	|	КадровыеДанныеСотрудников.Отчество,
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.НомерЛицевогоСчета,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Номер,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Дата,
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.ФизическоеЛицо,
	|	ЗарплатныеПроекты.Валюта.Код";
	
	ДанныеСтрокДокументов = Запрос.Выполнить().Выгрузить();
	
	НомерСтроки = 0;
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ДополнитьКолонкиДанныхСтрокДокументов(ДанныеСтрокДокументов);
	Для каждого СтрокаДокумента Из ДанныеСтрокДокументов Цикл
		НомерСтроки = НомерСтроки + 1;
		СтрокаДокумента.НомерСтроки = НомерСтроки;
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ЗаполнитьКолонкиДанныхСтрокДокумента(СтрокаДокумента);
		Если СтрДлина(СтрокаДокумента.НомерЛицевогоСчета) <> 20 Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='По ведомости в банк №%2 от %3г. в строке №%4 у сотрудника %5 лицевой счет менее 20 цифр.
						|Если номер действительно не удовлетворяет этому требованию, возможно,
						|банк не поддерживает обмен по типовому стандарту - следует обратиться в банк'"), 
					СтрокаДокумента.НомерДокумента, 
					Формат(СтрокаДокумента.ДатаДокумента, "ДЛФ=D"),
					СтрокаДокумента.НомерСтроки,
					СтрокаДокумента.ФизическоеЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, СтрокаДокумента.Документ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Зарплата[%1].%2'"),
					СтрокаДокумента.НомерСтроки-1,
					"НомерЛицевогоСчета"));
		КонецЕсли;
	КонецЦикла;
	
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьДанныеСтрокДокументовДляПолученияТекстаФайла(ДанныеСтрокДокументов, ДатаПолученияДанных);
	
	Возврат ДанныеСтрокДокументов;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////
/// Первоначальное заполнение и обновление информационной базы.

Процедура ЗаполнитьЗарплатныйПроект() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВБанк.УдалитьБанк КАК Банк
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект = ЗНАЧЕНИЕ(Справочник.ЗарплатныеПроекты.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВБанк.Дата, ГОД),
	|	ВедомостьНаВыплатуЗарплатыВБанк.Номер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Банк) Тогда
			Продолжить;
		КонецЕсли;
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		
		ЗарплатныйПроект = 
			ОбменСБанкамиПоЗарплатнымПроектам.ЗарплатныйПроектПоОрганизацииИБанку(
				Ведомость.Организация, 
				Ведомость.УдалитьБанк);
				
		Если НЕ ЗначениеЗаполнено(ЗарплатныйПроект) Тогда
			ЗарплатныйПроект =
				ОбменСБанкамиПоЗарплатнымПроектам.НовыйЗарплатныйПроектПоОрганизацииИБанку(
					Ведомость.Организация, 
					Ведомость.УдалитьБанк);
		КонецЕсли;	
		
		Ведомость.ЗарплатныйПроект = ЗарплатныйПроект;
		
		Ведомость.Записать();
	
	КонецЦикла
	
КонецПроцедуры	

Процедура ЗаполнитьНомерЛицевогоСчета() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ВедомостьНаВыплатуЗарплатыВБанкЗарплата
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.НомерЛицевогоСчета = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Ссылка.Дата, ГОД),
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Ссылка.Номер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		
		ЛицевыеСчетаСотрудников = ОбменСБанкамиПоЗарплатнымПроектам.ЛицевыеСчетаСотрудников(
				Ведомость.Зарплата.ВыгрузитьКолонку("Сотрудник"),
				Истина,
				Ведомость.Организация,
				Ведомость.ПериодРегистрации,
				Ведомость.ЗарплатныйПроект);
		
		Для Каждого СтрокаТЧ Из Ведомость.Зарплата Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерЛицевогоСчета) Тогда
				СтрокаЛС = ЛицевыеСчетаСотрудников.Найти(СтрокаТЧ.Сотрудник, "Сотрудник");
				Если СтрокаЛС <> Неопределено Тогда
					СтрокаТЧ.НомерЛицевогоСчета = СтрокаЛС.НомерЛицевогоСчета;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Ведомость.Записать();
	
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли