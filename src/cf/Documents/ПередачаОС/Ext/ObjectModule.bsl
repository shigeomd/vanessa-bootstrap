#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	Если НЕ ЗначениеЗаполнено(СобытиеОС) Тогда
		СобытиеОС = УчетОС.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.Передача);
	КонецЕсли;

	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.ПередачаОС.ЗаполнитьСчетаУчетаРасчетов(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	ЗачетАвансов.Очистить();
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;

	// В формах документа счет расчетов и счет авансов редактируются в специальной форме.
	// В случае, если они не заполнены, покажем сообщение возле соответствующей гиперссылки.
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоАвансам");

	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,,
			НСтр("ru = 'Счет учета расчетов с контрагентом'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,
			"ПорядокУчетаРасчетов", Отказ);
	КонецЕсли;

	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
		Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансам) Тогда
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,,
				НСтр("ru = 'Счет учета расчетов по авансам'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,
				"ПорядокУчетаРасчетов", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Нижеперечисленные реквизиты будут проверяться по условиям:
	МассивНепроверяемыхРеквизитов.Добавить("ОС.СчетУчетаНДСПоРеализации");
	
	Для каждого СтрокаТЧ Из ОС Цикл

		Префикс = "ОС[" + Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Основные средства'");
		
		Если СтрокаТЧ.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС
			И СтрокаТЧ.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда

			Если СтрокаТЧ.СуммаНДС = 0 Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
					НСтр("ru = 'Сумма НДС'"), СтрокаТЧ.НомерСтроки, ИмяСписка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				Префикс + "СуммаНДС", "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТЧ.СуммаНДС <> 0 И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
			НСтр("ru = 'Счет учета НДС по реализации'"), СтрокаТЧ.НомерСтроки, ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
			Префикс+"СчетУчетаНДСПоРеализации", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;

	// Табличная часть "Зачет авансов"
	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу
		ИЛИ ПравоСобственностиПереходитПослеГосРегистрации Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	ИначеЕсли ЗачетАвансов.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки с документом аванса!'");
		Поле = "ПорядокУчетаРасчетов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , Поле, Отказ);
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура("ОсновноеСредство"), Отказ);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС");

	УчетНДСПереопределяемый.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);

	Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
	
		УчетНДСПереопределяемый.ПроверитьСоответствиеРеквизитовСчетаФактурыВыданного(ЭтотОбъект);		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ПередачаОС.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	УчетОС.ПроверитьСоответствиеОСОрганизации(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.ПроверкиПоОС, Отказ);

	УчетОС.ПроверитьСоответствиеМестонахожденияОС(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.ПроверкиПоОС, Отказ);

	УчетОС.ПроверитьЗаполнениеСчетаУчетаОС(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.ПроверкиПоОС, Отказ);

	УчетОС.ПроверитьВозможностьИзмененияСостоянияОС(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.СостоянияОС, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ЗачетАвансовТаблицаАвансов,
		ПараметрыПроведения.ЗачетАвансов, Отказ);

	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
		ПараметрыПроведения.РеализацияТаблица,
		ТаблицаВзаиморасчетов,
		УчетТоваров.ПолучитьПустуюТаблицуСписанныеТовары(),
		ПараметрыПроведения.Реализация,
		Отказ);
	Документы.ПередачаОС.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги);

	ПараметрыВыбытия = УчетОС.ПодготовитьТаблицыСведенийПоВыбытиюОС(
		ПараметрыПроведения.ВыбытиеОСТаблица,
		ПараметрыПроведения.ВыбытиеОС,
		Отказ);

	ПараметрыПроведения.ВосстановлениеАмортизационнойПремии.Колонки.Добавить(
		"СуммаКапитальныхВложенийВключаемыхВРасходы");
	ПараметрыПроведения.ВосстановлениеАмортизационнойПремии.ЗаполнитьЗначения(
		ПараметрыВыбытия.СуммаКапитальныхВложенийВключаемыхВРасходы,
		"СуммаКапитальныхВложенийВключаемыхВРасходы");

	ТаблицаСтоимости = УчетОС.ПодготовитьТаблицуОстаточнойСтоимости(
		ПараметрыПроведения.СписаниеОстаточнойСтоимостиТаблица,
		ПараметрыПроведения.СписаниеОстаточнойСтоимости,
		ПараметрыВыбытия, Отказ);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетов);
	
	// Учет доходов и расходов ИП
	ТаблицыСписанияОСИП	= УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияОСиНМА(
		ПараметрыПроведения.СписаниеОСиНМАИПТаблица,
		ПараметрыПроведения.СписаниеОСиНМАИПРеквизиты, Движения, Отказ);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		
	// Алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
		
	// Алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчетов,
		ПараметрыПроведения.ЗачетАвансов,
		Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицыРеализация.СобственныеТоварыУслуги,
		ТаблицыРеализация.ТоварыУслугиКомитентов,
		ТаблицыРеализация.РеализованныеТоварыКомитентов,
		ПараметрыПроведения.Реализация,
		Движения, Отказ);
		
	//Движения регистра "Рублевые суммы документов в валюте"
	Если НЕ ТаблицыРеализация.СобственныеТоварыУслуги.Количество() = 0 Тогда
		
		УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицыРеализация.СобственныеТоварыУслуги, 
		ПараметрыПроведения.Реализация, Движения, Отказ);
		
	Иначе
		
		УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ПараметрыПроведения.РублевыеСуммыДокументовВВалюте, 
			ПараметрыПроведения.Реализация, Движения, Отказ);
			
	КонецЕсли;		

	УчетОС.ОпределитьСчетаУчетаОС(ТаблицыРеализация.СобственныеТоварыУслуги, Дата, Организация, "Номенклатура");
	УчетОС.ОпределитьСчетаУчетаОС(ПараметрыПроведения.НДСТоварыОтгрузка, Дата, Организация, "Номенклатура");

	УчетОС.СформироватьДвиженияВыбытиеОС(
		ПараметрыПроведения.ВыбытиеОС,
		ПараметрыВыбытия,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияРегистрацияСобытияОС(
		ПараметрыПроведения.СобытияОСТаблица,
		ПараметрыПроведения.СобытияОС,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияИзменениеСостоянияОС(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.СостоянияОС,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияСписаниеОстаточнойСтоимостиОС(
		ТаблицаСтоимости,
		ПараметрыПроведения.СписаниеОстаточнойСтоимости,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияВосстановлениеАмортизационнойПремии(
		ПараметрыПроведения.ОсновныеСредства,
		ТаблицаСтоимости,
		ПараметрыПроведения.ВосстановлениеАмортизационнойПремии, 
		Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияПередачаОС(
		ПараметрыПроведения.НДСТоварыОтгрузка, ТаблицыРеализация.СобственныеТоварыУслуги,  
		ПараметрыПроведения.РеализацияНДС, Движения, Отказ);
		
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);

	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ПереоценкаВалютныхОстатков,
		Движения, Отказ);
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(
		ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков,
		Движения, Отказ);
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(
		ТаблицаПереоценка,
		ПараметрыПроведения.ПереоценкаВалютныхОстатков,
		Движения, Отказ);
		
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеОСиНМА(
		ТаблицыСписанияОСИП,
		ПараметрыПроведения.СписаниеОСиНМАИПРеквизиты, Движения, Отказ);
		
	ТаблицаИПМПЗОтгруженные	= УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПередачаОСиНМА(
		ТаблицыСписанияОСИП,
		ПараметрыПроведения.СписаниеОСиНМАИПРеквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные,
		ТаблицаВзаиморасчетов, 
		ПараметрыПроведения.ЗачетАвансов, Движения, Отказ);

	Движения.Записать();
	УчетНДСПереопределяемый.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Истина, Отказ,
		ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
		
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	УчетНДСПереопределяемый.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь, Отказ);

КонецПроцедуры


#КонецЕсли