#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата              = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
	Ответственный     = Пользователи.ТекущийПользователь();
	ДокументОснование = Неопределено;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		И ОтражатьРазницуВКурсеВСоставеОперационныхРасходов Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсНаДатуПриобретенияРеализацииВалюты = СтруктураКурса.Курс;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ВводНаОсновании = Ложь;
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		ВводНаОсновании = Истина;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);
	
	//определяем счет банка по валюте
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОплатаВВалюте = ЗначениеЗаполнено(ВалютаДокумента) И ВалютаДокумента <> ВалютаРегламентированногоУчета;
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ОтражатьРазницуВКурсеВСоставеОперационныхРасходов = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) И НЕ ВводНаОсновании И ЗначениеЗаполнено(Контрагент)
		И Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		
		РасшифровкаПлатежа[0].ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(
			Новый Структура("ВидОперации, Организация, Контрагент, ДоговорКонтрагента, ОплатаВВалюте, ВалютаДокумента",
				ВидОперации,
				Организация,
				Контрагент,
				ДоговорКонтрагента,
				ОплатаВВалюте,
				ВалютаДокумента));
				
		СчетаУчетаВДокументах.ЗаполнитьСтроки(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РасшифровкаПлатежа[0]),
			"РасшифровкаПлатежа",
			ЭтотОбъект,
			Документы.ПоступлениеНаРасчетныйСчет);
				
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		ПодразделениеКт = Неопределено;
	Иначе
		ПодразделениеКт = ПодразделениеОрганизации;
	КонецЕсли;
	
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(ЭтотОбъект, ПараметрыУСН);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление реквизитов УСН выполняем всегда для учета возможных изменений в учетной политике.
	// Установка патента аванса
	УчетУСН.УстановитьПатентАванса(ЭтотОбъект); 
	
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	Если НЕ УчетУСН.СодержаниеУСНРедактируетсяПользователем(ЭтотОбъект) Тогда
		Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
	КонецЕсли;
	НалоговыйУчетУСН.ЗаполнитьДоходыРасходыВсего(ЭтотОбъект, ПараметрыУСН);
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	ДоговорКонтрагента = РасшифровкаПлатежа[0].ДоговорКонтрагента;
	Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) И НЕ ЗначениеЗаполнено(СчетОрганизации)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			СчетОрганизации, Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ПоступлениеНаРасчетныйСчет.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.РасшифровкаПлатежа, ПараметрыПроведения.Реквизиты, Отказ);
		
	СтруктураТаблицУСН = Документы.ПоступлениеНаРасчетныйСчет.ПодготовитьСтруктуруТаблицУСН(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчетов, Отказ);
	
	ТаблицаВзаиморасчетыУСН  = СтруктураТаблицУСН.ТаблицаВзаиморасчетыУСН;
	ТаблицаПрочихРасчетовУСН = СтруктураТаблицУСН.ТаблицаПрочихРасчетовУСН;
	ТаблицаДляПереносаЗадолженностиПоСчетамУСН = СтруктураТаблицУСН.ТаблицаДляПереносаЗадолженностиПоСчетамУСН;
	
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ОчиститьСуммыСпециальныхРежимовПогашениеЗадолженности(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчетов, Отказ);
	
	ТаблицаСуммовыхРазниц = УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(ТаблицаВзаиморасчетов,
		ПараметрыПроведения.Реквизиты, Отказ);
	
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетыУСН);
	
	// Учет доходов и расходов ИП
	ТаблицаОплатПокупателяИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОплатыПокупателя(
		ТаблицаВзаиморасчетов, ПараметрыПроведения.Реквизиты);
	
	ТаблицыПоступленияОтПродажПоПлатежнымКартамИП =
		УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыПоступленияОтПродажПоПлатежнымКартам(
			ПараметрыПроведения.РасшифровкаПлатежа,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	ТаблицаУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаУслуг,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты);
	
	СтруктураТаблицМПЗ = Новый Структура("ТаблицаУслуг", ТаблицаУслугИП);
	
	ЕдинаяТаблицаДляРегистраПрочихРасчетов = ТаблицаПрочихРасчетовУСН.Скопировать();
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
		ТаблицыПоступленияОтПродажПоПлатежнымКартамИП.ТаблицаПрочиеРасчеты, 
		ЕдинаяТаблицаДляРегистраПрочихРасчетов);
	
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовСчетов(
			ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетВзаиморасчетов.СформироватьДвиженияПоПрочимРасчетам(
		ЕдинаяТаблицаДляРегистраПрочихРасчетов, Движения, Отказ);
	
	УчетВзаиморасчетов.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчетов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.ПоступлениеНаРасчетныйСчет.ВыполнитьДвиженияПереносаЗадолженностиПоСчетамУСН(
		ПараметрыПроведения.Реквизиты, ТаблицаДляПереносаЗадолженностиПоСчетамУСН, Движения, Отказ);
	
	УчетВзаиморасчетов.СформироватьТолькоДвиженияПоСчетамУСНПогашениеЗадолженности(ТаблицаВзаиморасчетыУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(ТаблицаСуммовыхРазниц,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(ПараметрыПроведения.Реквизиты,
		ТаблицаВзаиморасчетов, Движения, Отказ);
	
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(ТаблицаСуммовыхРазниц, ПараметрыПроведения.Реквизиты, 
		Движения, Отказ);
	
	УчетДенежныхСредств.СформироватьДвиженияПродажаВалюты(ПараметрыПроведения.ПродажаВалюты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДенежныхСредств.СформироватьДвиженияПриобретениеВалюты(ПараметрыПроведения.ПриобретениеВалюты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДенежныхСредств.СформироватьДвиженияПрочееПоступление(ПараметрыПроведения.РасшифровкаПлатежаПрочее,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияПоВозвратамНалоговИВзносовСФОТ(ПараметрыПроведения.РасшифровкаПлатежаПрочее,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОплатаПокупателя(
		ТаблицаОплатПокупателяИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицыПоступленияОтПродажПоПлатежнымКартамИП.ТаблицаИПМПЗОтгруженные,
		ТаблицыПоступленияОтПродажПоПлатежнымКартамИП.ТаблицаВзаиморасчеты, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(
		СтруктураТаблицМПЗ,
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаВзаиморасчетов,,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты, Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкиДвиженийДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	СтатусыДокументов.СформироватьДвиженияОплатаСчетов(
		ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Отключаем проверку реквизитов шапки
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
			И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;

	Если НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		Если СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "Счет кредита");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"СчетУчетаРасчетовСКонтрагентом",
				"Объект",
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("КурсНаДатуПриобретенияРеализацииВалюты");
		
	КонецЕсли;
	
	// Отключаем проверку реквизитов ТЧ РасшифровкаПлатежа
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты");
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сделка"); // Проверяем построчно
	
	Если  ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
	КонецЕсли;
	
	// Проверка соответствия суммы документа расшифровке платежа
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ТекстСообщения = НСтр("ru = 'Не совпадают сумма документа и ее расшифровка'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность",
				НСтр("ru = 'Сумма'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Построчная проверка заполнения отдельных реквизитов ТЧ РасшифровкаПлатежа
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		
		ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, Дата);
		ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Дата);
		ЕстьАвансыУСН  = УчетУСН.ЕстьАвансыПокупателей(ВидОперации);
		
		ШаблонТекстаСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Колонка", "Заполнение", "%1", "%2", НСтр("ru = 'Расшифровка платежа'"));
		
		ПредыдущийПатент = Неопределено;
		
		Для каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
			
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка",
						"Заполнение",
						"Договор контрагента",
						СтрокаПлатежа.НомерСтроки,
						НСтр("ru = 'Расшифровка платежа'"));
					Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки - 1), "ЧН=; ЧГ=")+ "].ДоговорКонтрагента";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
					И НЕ ЗначениеЗаполнено(СтрокаПлатежа.Сделка) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщения, НСтр("ru = 'Документ расчетов'"), СтрокаПлатежа.НомерСтроки);
				Поле = "РасшифровкаПлатежа[" + Формат(СтрокаПлатежа.НомерСтроки - 1, "ЧН=;ЧГ=")+ "].Сделка";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если ЕстьАвансыУСН И (ПрименяетсяУСН ИЛИ ПрименяетсяУСНПатент) Тогда
				
				// допустимо отражение аванса только по одному патенту
				Если ПрименяетсяУСНПатент И ТипЗнч(СтрокаПлатежа.ПорядокОтраженияАванса) = Тип("СправочникСсылка.Патенты") Тогда
					Если НЕ ЗначениеЗаполнено(ПредыдущийПатент) Тогда
						ПредыдущийПатент = СтрокаПлатежа.ПорядокОтраженияАванса;
					Иначе
						Если СтрокаПлатежа.ПорядокОтраженияАванса <> ПредыдущийПатент Тогда
							ТекстСообщения = НСтр("ru = 'Отражение аванса в НУ допустимо не более чем по одному патенту'");
							ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
									НСтр("ru = 'Отражение аванса в НУ'"), СтрокаПлатежа.НомерСтроки,
									НСтр("ru = 'Расшифровка платежа'"), ТекстСообщения);
							Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки - 1), "ЧН=0; ЧГ=") + "].ПолеОтражениеАванса";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	// Для отдельных видов операций некоторые счета проверяются вне зависимости от настроек пользователя 
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		ПроверяемыеРеквизиты.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверкаКурсовВалют(СтрокаПлатеж, КурсДокумента, КратностьДокумента)
	
	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);
	
	Если Не СтрокаПлатеж = Неопределено Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов);
			СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		Иначе
			СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
			СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ВалютаДокумента    = ВалютаРегламентированногоУчета;
	КурсДокумента      = 1;
	КратностьДокумента = 1;
	
	ДокументОснование = Основание;
	
	ТипДокументаОснования = ТипЗнч(Основание);
	
	ТипДокументаРеализацияТоваровУслуг             = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ТипДокументаОтчетКомиссионераОПродажах         = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах");
	ТипДокументаОтчетКомитентуОПродажах            = Тип("ДокументСсылка.ОтчетКомитентуОПродажах");
	ТипДокументаСчетНаОплатуПокупателю             = Тип("ДокументСсылка.СчетНаОплатуПокупателю");
	ТипДокументаРасходныйКассовыйОрдер             = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	ТипДокументаПлатежноеТребование                = Тип("ДокументСсылка.ПлатежноеТребование");
	ТипДокументаАктОбОказанииПроизводственныхУслуг = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг");
	ТипПередачаОС                                  = Тип("ДокументСсылка.ПередачаОС");
	ТипПередачаНМА                                 = Тип("ДокументСсылка.ПередачаНМА");
	ТипОплатаПлатежнойКартой                       = Тип("ДокументСсылка.ОплатаПлатежнойКартой");
	
	Если ТипДокументаОснования = ТипДокументаРеализацияТоваровУслуг
		ИЛИ ТипДокументаОснования = ТипДокументаАктОбОказанииПроизводственныхУслуг
		ИЛИ ТипДокументаОснования = ТипДокументаОтчетКомиссионераОПродажах
		ИЛИ ТипДокументаОснования = ТипДокументаОтчетКомитентуОПродажах
		ИЛИ ТипДокументаОснования = ТипПередачаОС
		ИЛИ ТипДокументаОснования = ТипПередачаНМА
		ИЛИ ТипДокументаОснования = ТипДокументаСчетНаОплатуПокупателю Тогда
		
		ДанныеОснования       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Организация, ВалютаДокумента,
			|КурсВзаиморасчетов, КратностьВзаиморасчетов, СуммаДокумента");
		
		ВидОперации           = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(
			ДоговорКонтрагента);
		ВалютаВзаиморасчетов  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента   = ВалютаВзаиморасчетов;
		Иначе
			ВалютаДокумента   = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		Если НЕ ЗначениеЗаполнено(КурсДокумента) Тогда
			КурсДокумента       = 1;
			КратностьДокумента  = 1;
		КонецЕсли; 
		
		ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		Если ТипДокументаОснования = ТипДокументаСчетНаОплатуПокупателю Тогда
			
			ТаблицаСуммДокументаОснования = СтатусыДокументов.ТаблицаСуммКОплатеВРазрезеСтавокНДС(
				Новый Структура("Основание, ДатаОснования, Организация", Основание, Основание.Дата, Основание.Организация),
				УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание));
			ТаблицаСуммДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			
		ИначеЕсли ТипДокументаОснования = ТипДокументаОтчетКомиссионераОПродажах Тогда
			
			ТаблицаСуммДокументаОснования = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			ТаблицаСуммДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			
			МассивОснование = Новый Массив;
			МассивОснование.Добавить(Основание);
			СоотвествиеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
				МассивОснование, "УдержатьВознаграждение, СуммаВознаграждения, СтавкаНДСВознаграждения");
			ПараметрыОснования = СоотвествиеРеквизитов[Основание];
			Если ПараметрыОснования <> Неопределено
					И ПараметрыОснования.УдержатьВознаграждение И ПараметрыОснования.СуммаВознаграждения > 0 Тогда
				ЕстьТакаяСтавка =
					ТаблицаСуммДокументаОснования.Найти(ПараметрыОснования.СтавкаНДСВознаграждения,  "СтавкаНДС") <> Неопределено;
				НоваяСтрока     = ТаблицаСуммДокументаОснования.Добавить();
				НоваяСтрока.СуммаПлатежа = - ПараметрыОснования.СуммаВознаграждения;
				НоваяСтрока.СтавкаНДС    =   ПараметрыОснования.СтавкаНДСВознаграждения;
				НоваяСтрока.СуммаНДС     = - (Основание.Товары.Итог("СуммаНДСВознаграждения")
					+ Основание.Услуги.Итог("СуммаНДСВознаграждения"));
				
				Если ЕстьТакаяСтавка Тогда
					ТаблицаСуммДокументаОснования.Свернуть("СтавкаНДС", "СуммаПлатежа, СуммаНДС");
				Иначе
					ТаблицаСуммДокументаОснования.Свернуть("", "СуммаПлатежа, СуммаНДС");
					ТаблицаСуммДокументаОснования.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				КонецЕсли;
			КонецЕсли;
		
		ИначеЕсли ТипДокументаОснования = ТипДокументаОтчетКомитентуОПродажах
			ИЛИ ТипДокументаОснования = ТипПередачаНМА Тогда
			
			ТаблицаСуммДокументаОснования = Новый ТаблицаЗначений();
			ТаблицаСуммДокументаОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицаСуммДокументаОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаСуммДокументаОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			СтрокаТаблицыСумм = ТаблицаСуммДокументаОснования.Добавить();
			Если ТипДокументаОснования = ТипДокументаОтчетКомитентуОПродажах Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВознаграждения");
				СтрокаТаблицыСумм.СтавкаНДС    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СтавкаНДСВознаграждения");
				СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения");
			ИначеЕсли ТипДокументаОснования = ТипПередачаНМА Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаДокумента");
				СтрокаТаблицыСумм.СтавкаНДС    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СтавкаНДС");
				СтрокаТаблицыСумм.СуммаНДС     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаНДС");
			КонецЕсли;
			
		Иначе
			
			ТаблицаСуммДокументаОснования = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			ТаблицаСуммДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСуммДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,                     "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,      "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
		Если ТипДокументаОснования <> ТипДокументаСчетНаОплатуПокупателю
			И ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу,   "СпособПогашенияЗадолженности");
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.Автоматически, "СпособПогашенияЗадолженности");
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "Сделка");
		
		Если ТипДокументаОснования = ТипДокументаРеализацияТоваровУслуг Тогда
			
			СчетНаОплатуПокупателю = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетНаОплатуПокупателю");
		
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетНаОплатуПокупателю, "СчетНаОплату");
		
		КонецЕсли; 
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж, КурсДокумента, КратностьДокумента);
			Если ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
				Если ДанныеОснования.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаПлатежа,
						ВалютаРегламентированногоУчета, ВалютаВзаиморасчетов,
						1, ДанныеОснования.КурсВзаиморасчетов,
						1, ДанныеОснования.КратностьВзаиморасчетов);
					СтрокаПлатеж.СуммаНДС 			 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаНДС,
						ВалютаРегламентированногоУчета, ВалютаВзаиморасчетов,
						1, ДанныеОснования.КурсВзаиморасчетов,
						1, ДанныеОснования.КратностьВзаиморасчетов);
				КонецЕсли;
				
				СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатеж.СуммаВзаиморасчетов,
					ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
					СтрокаПлатеж.КурсВзаиморасчетов, 1,
					СтрокаПлатеж.КратностьВзаиморасчетов, 1);
				СтрокаПлатеж.СуммаНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатеж.СуммаНДС,
					ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
					СтрокаПлатеж.КурсВзаиморасчетов, 1,
					СтрокаПлатеж.КратностьВзаиморасчетов, 1);
			КонецЕсли;
		КонецЦикла;
		
		Если ТипДокументаОснования = ТипДокументаОтчетКомиссионераОПродажах Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансамПолученным"), "СчетУчетаРасчетовПоАвансам");
		ИначеЕсли ТипДокументаОснования = ТипДокументаСчетНаОплатуПокупателю Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "СчетНаОплату");
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовСКонтрагентом");
			Если ТипДокументаОснования <> ТипДокументаОтчетКомитентуОПродажах
				Или НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "УдержатьВознаграждение") Тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансам"), "СчетУчетаРасчетовПоАвансам");
			КонецЕсли;
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж   = РасшифровкаПлатежа[0];
		
	ИначеЕсли ТипДокументаОснования = ТипОплатаПлатежнойКартой Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "СуммаДокумента, Эквайер, ДоговорЭквайринга,
			|СчетКасса, ВидОплаты");
			
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;	
			
		Контрагент  = ДанныеОснования.Эквайер;
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		
		НоваяСтрока.ДоговорКонтрагента             = ДанныеОснования.ДоговорЭквайринга;
		НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = ДанныеОснования.СчетКасса;
		
		Если ЗначениеЗаполнено(ДанныеОснования.ВидОплаты) Тогда
			
			ПроцентБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДанныеОснования.ВидОплаты, "ПроцентБанковскойКомиссии")["ПроцентБанковскойКомиссии"];
				
			НоваяСтрока.СуммаУслуг = ДанныеОснования.СуммаДокумента*ПроцентБанка/100;
			
		КонецЕсли;
		
		НоваяСтрока.СуммаПлатежа                   = ДанныеОснования.СуммаДокумента - НоваяСтрока.СуммаУслуг;
		НоваяСтрока.СуммаВзаиморасчетов            = ДанныеОснования.СуммаДокумента - НоваяСтрока.СуммаУслуг;
		
		СуммаДокумента = ДанныеОснования.СуммаДокумента - НоваяСтрока.СуммаУслуг;
		СуммаУслуг     = НоваяСтрока.СуммаУслуг;
		
	ИначеЕсли ТипДокументаОснования = ТипДокументаРасходныйКассовыйОрдер Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ВидОперации, ВалютаДокумента,
			|СуммаДокумента, СтатьяДвиженияДенежныхСредств, СубконтоДт1, СубконтоДт2, СубконтоДт3,
			|СчетУчетаРасчетовСКонтрагентом, СчетКасса");
		
		Если ДанныеОснования.ВидОперации <> Перечисления.ВидыОперацийРКО.Инкассация Тогда
			ОписаниеИсключения = НСтр("ru = 'Документ ""Поступление на расчетный счет""
				|вводится только на основании документа ""Выдача наличных""
				|с видом операции ""%1"".'");
			ОписаниеИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеИсключения, Перечисления.ВидыОперацийРКО.Инкассация);
			
			ВызватьИсключение ОписаниеИсключения;
		КонецЕсли;
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация;
		
		СчетУчетаРасчетовСКонтрагентом = ДанныеОснования.СчетУчетаРасчетовСКонтрагентом;
		СубконтоКт1 = ДанныеОснования.СубконтоДт1;
		СубконтоКт2 = ДанныеОснования.СубконтоДт2;
		СубконтоКт3 = ДанныеОснования.СубконтоДт3;
		
		СтатьяДвиженияДенежныхСредств = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
		
		СуммаДокумента = ДанныеОснования.СуммаДокумента;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОснования.СчетКасса, "Валютный") Тогда
			СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
			ВалютаДокумента = ДанныеОснования.ВалютаДокумента;
		Иначе
			СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
			ВалютаДокумента = ДанныеОснования.ВалютаДокумента;
		КонецЕсли;
		
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаДокумента, Истина);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		СуммаДокументаОснования = Новый ТаблицаЗначений();
		СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",
			ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		СуммаДокументаОснования.Колонки.Добавить("СтатьяДвиженияДенежныхСредств",
			Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
		СуммаДокументаОснования.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом",
			Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		СуммаДокументаОснования.Колонки.Добавить("СубконтоКт1",
			Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
		
		СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
		СтрокаТаблицыСумм.СуммаПлатежа = ДанныеОснования.СуммаДокумента;
		СтрокаТаблицыСумм.СтатьяДвиженияДенежныхСредств  = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
		СтрокаТаблицыСумм.СчетУчетаРасчетовСКонтрагентом = ДанныеОснования.СчетУчетаРасчетовСКонтрагентом;
		СтрокаТаблицыСумм.СубконтоКт1                    = СубконтоКт1;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		
	ИначеЕсли ТипДокументаОснования = ТипДокументаПлатежноеТребование Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Номер, СчетКонтрагента, НазначениеПлатежа,
			|СуммаДокумента, СтавкаНДС, СуммаНДС");
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		
		ДатаВходящегоДокумента  = ДанныеОснования.Дата;
		НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеОснования.Номер, Истина, Истина);
		СчетКонтрагента   = ДанныеОснования.СчетКонтрагента;
		
		НазначениеПлатежа = СтрЗаменить(ДанныеОснования.НазначениеПлатежа, Символы.ПС, " ");
		
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа = ДанныеОснования.СуммаДокумента;
		СтрокаПлатеж.СтавкаНДС    = ДанныеОснования.СтавкаНДС;
		СтрокаПлатеж.СуммаНДС     = ДанныеОснования.СуммаНДС;
		
		СписокВидовДоговора = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговора);
		
		СтрокаПлатеж.ДоговорКонтрагента           = ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов              = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		Если ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
		Иначе
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаПлатеж.СуммаПлатежа,
				ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
				КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли