#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Для следующих операций правила заполнения пока не используются:
	// РасчетыПоКредитамИЗаймам
	// ПрочееПоступление
	
	// учет денег
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетБанк", "БезналичныеДеньги");
	
	// учет расчетов
	// - расчеты с покупателем (разрешено погашать задолженность)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	
	// - аванс покупателя
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПогашатьЗадолженность");
	
	// - расчеты с поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратОтПоставщика");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику", Ложь);
	
	// - прочие расчеты с контрагентами
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	
	// - другие операции
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПриобретениеИностраннойВалюты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПриобретениеИностраннойВалюты");
	// Так как счет не зависит от данных табличной части, то в новых сроках будем заполнять счет из шапки
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "ПриобретениеИностраннойВалюты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПриобретениеИностраннойВалюты");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РеализацияИностраннойВалюты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПоступленияОтПродажиИностраннойВалюты");
	// Так как счет не зависит от данных табличной части, то в новых сроках будем заполнять счет из шапки
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РеализацияИностраннойВалюты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПоступленияОтПродажиИностраннойВалюты");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "ПродажиПоПлатежнымКартам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам");
	// Счет шапки используется для учета затрат (см. ниже). Поэтому не можем его использовать для заполнения новых строк.
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "Инкассация");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Инкассация");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СтатьяДвиженияДенежныхСредств", "СтатьяДвиженияДенежныхСредств");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт1",     "СубконтоСтатьяДвиженияДенежныхСредств1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт2",     "СубконтоСтатьяДвиженияДенежныхСредств2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт3",     "СубконтоСтатьяДвиженияДенежныхСредств3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеКт", "ОбособленноеПодразделение");
	
	// Так как счет не зависит от данных табличной части, то в новых сроках будем заполнять счет из шапки
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "Инкассация");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Инкассация");
	
	// учет затрат (расходов по услугам банков)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасходыУслугиБанка");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ЗаполненаСуммаУслуг");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт1",    "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт2",    "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоКт3",    "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеКт", "ПодразделениеЗатрат");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ВалютаДокумента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Подразделение", "ПодразделениеОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ОтражатьРазницуВКурсеВСоставеОперационныхРасходов");
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, ИмяВидаОперации, "ВидОперации");
	КонецЦикла;
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ЗаполненаСуммаУслуг", "СуммаУслуг");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		Если ДанныеЗаполнения.Свойство(ИмяВидаОперации) Тогда
			ДанныеЗаполнения[ИмяВидаОперации] = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств[ИмяВидаОперации]);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.Свойство("ЗаполненаСуммаУслуг") Тогда
		ДанныеЗаполнения.ЗаполненаСуммаУслуг = (ДанныеЗаполнения.СуммаУслуг <> 0);
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыОперацийСчетаУчета() Экспорт
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить("ОплатаПокупателя");
	ВидыОпераций.Добавить("ВозвратОтПоставщика");
	ВидыОпераций.Добавить("ПрочиеРасчетыСКонтрагентами");
	ВидыОпераций.Добавить("Инкассация");
	ВидыОпераций.Добавить("ПриобретениеИностраннойВалюты");
	ВидыОпераций.Добавить("ПоступленияОтПродажиИностраннойВалюты");
	ВидыОпераций.Добавить("ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам");
	
	Возврат Новый ФиксированныйМассив(ВидыОпераций);
	
КонецФункции

#КонецОбласти

// Вызывается документом СчетФактураВыданный на аванс при вводе на основании
//
Функция ТекстЗапросаСчетФактураВыданныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ТаблицаДокумента.СчетНаОплату КАК СчетНаОплату,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаПлатежа) КАК Сумма,
	|	ТаблицаДокумента.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|	И ТаблицаДокумента.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.ПоДокументу)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам,
	|	ТаблицаДокумента.СчетНаОплату,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СпособПогашенияЗадолженности,
	|	ТаблицаДокумента.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// В указанном списке операций Расшифровка платежа используется явно       (отображается на форме)
// в остальных Видах операций добавляется 1 "пустая" строка в данную ТЧ (не отображается на форме)
Функция ПолучитьСписокВидовОперацийСРасшифровкойПлатежа() Экспорт
	
	СписокОпераций = Новый СписокЗначений();
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	
	Возврат(СписокОпераций);
	
КонецФункции

Функция ЕстьРасшифровкаПлатежа(Знач ВидОперации) Экспорт
	
	СписокВидовСРасшифровкойПлатежа = ПолучитьСписокВидовОперацийСРасшифровкойПлатежа();
	
	Возврат СписокВидовСРасшифровкойПлатежа.НайтиПоЗначению(ВидОперации) <> Неопределено;
	
КонецФункции

#КонецОбласти

//СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьТаблицуВзаиморасчетовУслугиИП(РасшифровкаПлатежа) Экспорт
	Перем ТаблицаВзаиморасчетов;
	
	ТаблицаВзаиморасчетов	= Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаВзаиморасчетов;
	
КонецФункции

Функция ПустаяТаблицаДляПереносаЗадолженностиПоСчетамУСН()
	
	ТаблицаДляВозврата = Новый ТаблицаЗначений;
	
	ТаблицаДляВозврата.Колонки.Добавить("СчетДт",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДляВозврата.Колонки.Добавить("Субконто1Дт",     Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДляВозврата.Колонки.Добавить("Субконто2Дт",     БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора());
	ТаблицаДляВозврата.Колонки.Добавить("Субконто3Дт",     Документы.ТипВсеСсылки());
	ТаблицаДляВозврата.Колонки.Добавить("ПодразделениеДт", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаДляВозврата.Колонки.Добавить("ВалютаДт",        Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДляВозврата.Колонки.Добавить("ВалютнаяСуммаДт", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляВозврата.Колонки.Добавить("СчетКт",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДляВозврата.Колонки.Добавить("Субконто1Кт",     Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДляВозврата.Колонки.Добавить("Субконто2Кт",     БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора());
	ТаблицаДляВозврата.Колонки.Добавить("Субконто3Кт",     Документы.ТипВсеСсылки());
	ТаблицаДляВозврата.Колонки.Добавить("ПодразделениеКт", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаДляВозврата.Колонки.Добавить("ВалютаКт",        Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДляВозврата.Колонки.Добавить("ВалютнаяСуммаКт", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляВозврата.Колонки.Добавить("Сумма",           ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Возврат ТаблицаДляВозврата;
	
КонецФункции

Функция ПодготовитьСтруктуруТаблицУСН(ТаблицаРеквизиты, ТаблицаВзаиморасчетов, Отказ) Экспорт
	
	ТаблицаПрочихРасчетовУСН = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	ТаблицаДляПереносаЗадолженностиПоСчетамУСН = ПустаяТаблицаДляПереносаЗадолженностиПоСчетамУСН();
	
	Параметры = ПодготовитьПараметрыСтруктурыТаблицУСН(ТаблицаРеквизиты, ТаблицаВзаиморасчетов);
	
	Взаиморасчеты = Параметры.Взаиморасчеты;
	
	СтруктураВозврата = Новый Структура("ТаблицаВзаиморасчетыУСН, ТаблицаПрочихРасчетовУСН, ТаблицаДляПереносаЗадолженностиПоСчетамУСН",
		Взаиморасчеты, ТаблицаПрочихРасчетовУСН, ТаблицаДляПереносаЗадолженностиПоСчетамУСН);
	
	Если Параметры.Реквизиты.Количество() = 0 ИЛИ Параметры.Взаиморасчеты.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Организация               = Реквизиты.Организация;
	Регистратор               = Реквизиты.Регистратор;
	Период                    = Реквизиты.Период;
	УчитыватьЗадолженностьУСН = Реквизиты.УчитыватьЗадолженностьУСН;
	ВидОперации               = Реквизиты.ВидОперации;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если НЕ УчитыватьЗадолженностьУСН Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТаблицаВзаиморасчетыУСН = УчетВзаиморасчетов.ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности(УчитыватьЗадолженностьУСН);
	
	СписокСчетовУСН = Новый Массив;
	
	СписокСчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД);
	СписокСчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент);
	СписокСчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент);
	СписокСчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД);
	СписокСчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент);
	СписокСчетовУСН.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент);
	
	СчетаУСН_ЕНВД = Новый Массив;
	СчетаУСН_ЕНВД.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД);
	СчетаУСН_ЕНВД.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД);
	
	СчетаУСН_Комитент = Новый Массив;
	СчетаУСН_Комитент.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент);
	СчетаУСН_Комитент.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент);
	
	СчетаУСН_Патент = Новый Массив;
	СчетаУСН_Патент.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент);
	СчетаУСН_Патент.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент);
	
	Контрагент           = Взаиморасчеты[0].Контрагент;
	СчетаРасчетов        = Взаиморасчеты.ВыгрузитьКолонку("СчетРасчетов");
	ДоговораКонтрагентов = Взаиморасчеты.ВыгрузитьКолонку("ДоговорКонтрагента");
	
	// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПрочиеРасчеты");
	
	ЗначенияБлокировки  = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, Реквизиты.Период)); 
	ЗначенияБлокировки.Вставить("Организация", Реквизиты.Организация);
	ЗначенияБлокировки.Вставить("Контрагент",  Контрагент);
	
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	ОписаниеИсточника.Вставить("СчетУчета",          "СчетРасчетов");
	
	СтруктураПараметров.Вставить("ИсточникДанных", Взаиморасчеты);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	
	ГраницаОстатка = Новый МоментВремени(Период, Регистратор);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.УстановитьПараметр("ДоговораКонтрагента", ДоговораКонтрагентов);
	Запрос.УстановитьПараметр("ДатаОстатка", ГраницаОстатка);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ТаблицаВзаиморасчетов", Взаиморасчеты);
	
	Запрос.Текст = ТекстЗапросаТаблицыВзаиморасчетыИПрочихРасчетов();
	Результат	= Запрос.ВыполнитьПакет();
	
	ТаблицаВзаиморасчеты  = Результат[1].Выгрузить();
	ОстаткиПрочихРасчетов = Результат[3].Выгрузить();
	ТаблицаИсточникДанных = Результат[6].Выгрузить();
	
	Блокировка = Новый БлокировкаДанных;
	
	// Дополнительные блокировки по вспомогательным счетам задолженности УСН
	Для каждого ЭлементМассиваПоСчетамУСН Из СписокСчетовУСН Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировки.УстановитьЗначение("Счет",        ЭлементМассиваПоСчетамУСН);
		ЭлементБлокировки.ИсточникДанных = ТаблицаИсточникДанных;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ДоговорКонтрагента");
	КонецЦикла;
		
	Блокировка.Заблокировать();
	
	Контрагент                = ТаблицаИсточникДанных.ВыгрузитьКолонку("Контрагент");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Контрагент);
	
	ДоговораКонтрагентов      = ТаблицаИсточникДанных.ВыгрузитьКолонку("ДоговорКонтрагента");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДоговораКонтрагентов);
	
	СписокРасчетныхДокументов = ТаблицаИсточникДанных.ВыгрузитьКолонку("РасчетныйДокумент");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокРасчетныхДокументов);
	
	Запрос.УстановитьПараметр("Контрагент",                Контрагент);
	Запрос.УстановитьПараметр("ДоговораКонтрагента",       ДоговораКонтрагентов);
	Запрос.УстановитьПараметр("СписокРасчетныхДокументов", СписокРасчетныхДокументов);
	Запрос.УстановитьПараметр("СписокСчетовУСН",           СписокСчетовУСН);
	
	ВидыСубконто = Новый Массив;
	
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст = ТекстЗапросаОстаткиПоСчетамУСН();
	РезультатЗапросаПоСчетамУСН = Запрос.ВыполнитьПакет();
	
	ОбщиеОстаткиПоСчетамУСН = РезультатЗапросаПоСчетамУСН[1].Выгрузить();
	ОстаткиПосчетамУСН      = РезультатЗапросаПоСчетамУСН[2].Выгрузить();
	
	ОстаткиПрочихРасчетов.Индексы.Добавить("Контрагент, ДоговорКонтрагента, СчетУчета");
	ОбщиеОстаткиПоСчетамУСН.Индексы.Добавить("РасчетныйДокумент");
	ОстаткиПосчетамУСН.Индексы.Добавить("РасчетныйДокумент");
	
	ВсегоСуммаВзаиморасчетов   = ТаблицаВзаиморасчеты.Итог("СуммаВзаиморасчетов");
	ВсегоСуммаРуб              = ТаблицаВзаиморасчеты.Итог("СуммаРуб");
	ВсегоОстатокВзаиморасчетов = ТаблицаВзаиморасчеты.Итог("ОстатокВзаиморасчетов");
	
	Взаиморасчеты.Очистить();
	
	Для каждого СтрокаТаблицыВзаиморасчеты Из ТаблицаВзаиморасчеты Цикл
		
		РасчетыВВалюте = СтрокаТаблицыВзаиморасчеты.ВалютаВзаиморасчетов <> ВалютаРеглУчета;
		
		НераспределеннаяСумма = СтрокаТаблицыВзаиморасчеты.СуммаРуб;
		
		СуммаРубВзаиморасчеты            = СтрокаТаблицыВзаиморасчеты.СуммаРуб;
		СуммаВзаиморасчетовВзаиморасчеты = СтрокаТаблицыВзаиморасчеты.СуммаВзаиморасчетов;
		
		КурсСуммыВзаиморасчетов = ?(СуммаВзаиморасчетовВзаиморасчеты = 0, 0,
			СуммаРубВзаиморасчеты/СуммаВзаиморасчетовВзаиморасчеты);
		
		СтруктураПоиска = Новый Структура;
		
		СтруктураПоиска.Вставить("Контрагент",         СтрокаТаблицыВзаиморасчеты.Контрагент);
		СтруктураПоиска.Вставить("ДоговорКонтрагента", СтрокаТаблицыВзаиморасчеты.ДоговорКонтрагента);
		СтруктураПоиска.Вставить("СчетУчета",          СтрокаТаблицыВзаиморасчеты.СчетРасчетов);
		
		Если СтрокаТаблицыВзаиморасчеты.ДокументРасчетов <> Неопределено Тогда
			СтруктураПоиска.Вставить("РасчетныйДокумент", СтрокаТаблицыВзаиморасчеты.ДокументРасчетов);
		КонецЕсли;
		
		МассивНайденныхСтрокПоПрочимРасчетам = ОстаткиПрочихРасчетов.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ЭлементМассива Из МассивНайденныхСтрокПоПрочимРасчетам Цикл
			
			СуммаВСтроку = Мин(НераспределеннаяСумма, ЭлементМассива.СуммаОстаток);
			
			НоваяСтрока  = Взаиморасчеты.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыВзаиморасчеты);
			
			НоваяСтрока.ДокументРасчетов	= ЭлементМассива.РасчетныйДокумент;
			
			НоваяСтрока.СуммаРуб            = СуммаВСтроку;
			НоваяСтрока.СуммаВзаиморасчетов = ?(КурсСуммыВзаиморасчетов = 0, 0, СуммаВСтроку / КурсСуммыВзаиморасчетов);
			
			КоэффициентПоСуммеВзаиморасчетов = ?(ВсегоСуммаВзаиморасчетов = 0, 0,
				НоваяСтрока.СуммаВзаиморасчетов / ВсегоСуммаВзаиморасчетов);
			
			НоваяСтрока.ОстатокВзаиморасчетов = ВсегоОстатокВзаиморасчетов * КоэффициентПоСуммеВзаиморасчетов;
			
			СтруктураПоискаПоСчетамУСН = Новый Структура;
			СтруктураПоискаПоСчетамУСН.Вставить("РасчетныйДокумент", ЭлементМассива.РасчетныйДокумент);
			
			МассивНайденныхСтрокПоСчетамУСН = ОстаткиПосчетамУСН.НайтиСтроки(СтруктураПоискаПоСчетамУСН);
			МассивНайденныхСтрокПосчетамУСНОбщие = ОбщиеОстаткиПоСчетамУСН.НайтиСтроки(СтруктураПоискаПоСчетамУСН);
			
			Если МассивНайденныхСтрокПоСчетамУСН.Количество() <> 0 Тогда
				
				ОбщаяСуммаВзаиморасчетовПоСчетамУСН = МассивНайденныхСтрокПосчетамУСНОбщие[0].СуммаВзаиморасчетов;
				ОбщаяСуммаРубПоСчетамУСН            = МассивНайденныхСтрокПосчетамУСНОбщие[0].СуммаРуб;
				
				Для каждого СтрокаПоСчетамУСН Из МассивНайденныхСтрокПоСчетамУСН Цикл
					
					КоэффициентДляСуммыВзаиморасчетов = ?(ОбщаяСуммаВзаиморасчетовПоСчетамУСН = 0,
						0, СтрокаПоСчетамУСН.СуммаВзаиморасчетов/ОбщаяСуммаВзаиморасчетовПоСчетамУСН);
					
					КоэффициентДляСуммыРуб = ?(ОбщаяСуммаРубПоСчетамУСН = 0,
						0, СтрокаПоСчетамУСН.СуммаРуб / ОбщаяСуммаРубПоСчетамУСН);
					
					СуммаВзаиморасчетовПоСчетамУСН = Мин(СтрокаПоСчетамУСН.СуммаВзаиморасчетов,
						НоваяСтрока.СуммаВзаиморасчетов) * КоэффициентДляСуммыВзаиморасчетов;
					
					СуммаРубПоСчетамУСН = Мин(СтрокаПоСчетамУСН.СуммаРуб, СуммаВСтроку) * КоэффициентДляСуммыРуб;
					
					ПрефиксДляЗадолженностиУСН = "";
					
					Если СчетаУСН_ЕНВД.Найти(СтрокаПоСчетамУСН.Счет) <> Неопределено Тогда
						ПрефиксДляЗадолженностиУСН = "ЕНВД";
					ИначеЕсли СчетаУСН_Комитент.Найти(СтрокаПоСчетамУСН.Счет) <> Неопределено Тогда
						ПрефиксДляЗадолженностиУСН = "Комитента";
					Иначе
						ПрефиксДляЗадолженностиУСН = "Патент";
					КонецЕсли;
					
					НоваяСтрока["СуммаВзаиморасчетов" + ПрефиксДляЗадолженностиУСН] = СуммаВзаиморасчетовПоСчетамУСН;
					НоваяСтрока["СуммаБУ_" + ПрефиксДляЗадолженностиУСН]            = СуммаРубПоСчетамУСН;
					
					Если СтрокаПоСчетамУСН.Контрагент <> ЭлементМассива.Контрагент
						ИЛИ СтрокаПоСчетамУСН.Договор <> ЭлементМассива.ДоговорКонтрагента Тогда
						
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН = ТаблицаДляПереносаЗадолженностиПоСчетамУСН.Добавить();
						
						Если СчетаУСН_ЕНВД.Найти(СтрокаПоСчетамУСН.Счет) <> Неопределено Тогда
							
							Если РасчетыВВалюте Тогда
								НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.СчетДт = Планысчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
							Иначе
								НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.СчетДт = Планысчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
							КонецЕсли;
							
						ИначеЕсли СчетаУСН_Комитент.Найти(СтрокаПоСчетамУСН.Счет) <> Неопределено Тогда
							
							Если РасчетыВВалюте Тогда
								НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.СчетДт = Планысчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
							Иначе
								НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.СчетДт = Планысчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
							КонецЕсли;
							
						Иначе
							
							Если РасчетыВВалюте Тогда
								НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.СчетДт = Планысчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент;
							Иначе
								НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.СчетДт = Планысчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
							КонецЕсли;
							
						КонецЕсли;
						
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.СчетКт          = СтрокаПоСчетамУСН.Счет;
						
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.Субконто1Дт     = ЭлементМассива.Контрагент;
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.Субконто2Дт     = ЭлементМассива.ДоговорКонтрагента;
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.Субконто3Дт     = ЭлементМассива.РасчетныйДокумент;
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.ПодразделениеДт = СтрокаТаблицыВзаиморасчеты.Подразделение;
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.ВалютаДт        = СтрокаТаблицыВзаиморасчеты.ВалютаВзаиморасчетов;
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.ВалютнаяСуммаДт = СуммаВзаиморасчетовПоСчетамУСН;
						
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.Субконто1Кт     = СтрокаПоСчетамУСН.Контрагент;
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.Субконто2Кт     = СтрокаПоСчетамУСН.Договор;
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.Субконто3Кт     = СтрокаПоСчетамУСН.РасчетныйДокумент;
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.ПодразделениеКт = СтрокаПоСчетамУСН.Подразделение;
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.ВалютаКт        = СтрокаПоСчетамУСН.ВалютаВзаиморасчетов;
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.ВалютнаяСуммаКт = СуммаВзаиморасчетовПоСчетамУСН;
						
						НоваяСтрокаТаблицыПереносаЗадолженностиПоСчетамУСН.Сумма           = СуммаРубПоСчетамУСН;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			НоваяСтрокаПрочихРасчетов = ТаблицаПрочихРасчетовУСН.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПрочихРасчетов, Реквизиты);
			ЗаполнитьЗначениясвойств(НоваяСтрокаПрочихРасчетов, ЭлементМассива);
			
			НоваяСтрокаПрочихРасчетов.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрокаПрочихРасчетов.Сумма       = СуммаВСтроку;
			
			НераспределеннаяСумма = НераспределеннаяСумма - СуммаВСтроку;
			
			Если НераспределеннаяСумма <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НераспределеннаяСумма > 0 Тогда
			
			СуммаВСтроку = НераспределеннаяСумма;
			
			НоваяСтрока = Взаиморасчеты.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыВзаиморасчеты);
			
			НоваяСтрока.СуммаРуб            = СуммаВСтроку;
			НоваяСтрока.СуммаВзаиморасчетов = СуммаВСтроку * КурсСуммыВзаиморасчетов;
			
			КоэффициентВзаиморасчетов = ?(СуммаВзаиморасчетовВзаиморасчеты = 0, 0,
				НоваяСтрока.СуммаВзаиморасчетов/СуммаВзаиморасчетовВзаиморасчеты);
			
			НоваяСтрока.СуммаВзаиморасчетовЕНВД      = СтрокаТаблицыВзаиморасчеты.СуммаВзаиморасчетовЕНВД      * КоэффициентВзаиморасчетов;
			НоваяСтрока.СуммаВзаиморасчетовКомитента = СтрокаТаблицыВзаиморасчеты.СуммаВзаиморасчетовКомитента * КоэффициентВзаиморасчетов;
			НоваяСтрока.СуммаВзаиморасчетовПатент    = СтрокаТаблицыВзаиморасчеты.СуммаВзаиморасчетовПатент    * КоэффициентВзаиморасчетов;
			
			КоэффициентРуб = ?(СуммаРубВзаиморасчеты = 0, 0, СуммаВСтроку / СуммаРубВзаиморасчеты);
			
			НоваяСтрока.СуммаБУ_ЕНВД      = СтрокаТаблицыВзаиморасчеты.СуммаБУ_ЕНВД      * КоэффициентРуб;
			НоваяСтрока.СуммаБУ_Комитента = СтрокаТаблицыВзаиморасчеты.СуммаБУ_Комитента * КоэффициентРуб;
			НоваяСтрока.СуммаБУ_Патент    = СтрокаТаблицыВзаиморасчеты.СуммаБУ_Патент    * КоэффициентРуб;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураВозврата.ТаблицаПрочихРасчетовУСН = ТаблицаПрочихРасчетовУСН;
	
	Если Взаиморасчеты.Количество() > 0 Тогда
	
		Взаиморасчеты.Индексы.Добавить("Контрагент, ДоговорКонтрагента, СчетРасчетов");
		
		Для каждого СтрокаТаблицыВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
			
			СтруктураПоиска = Новый Структура;
			
			СтруктураПоиска.Вставить("Контрагент",         СтрокаТаблицыВзаиморасчетов.Контрагент);
			СтруктураПоиска.Вставить("ДоговорКонтрагента", СтрокаТаблицыВзаиморасчетов.ДоговорКонтрагента);
			СтруктураПоиска.Вставить("СчетРасчетов",       СтрокаТаблицыВзаиморасчетов.СчетРасчетов);
			
			Если СтрокаТаблицыВзаиморасчетов.ДокументРасчетов <> Неопределено Тогда
				СтруктураПоиска.Вставить("ДокументРасчетов", СтрокаТаблицыВзаиморасчетов.ДокументРасчетов);
			КонецЕсли;
			
			МассивНайденныхСтрок = Взаиморасчеты.НайтиСтроки(СтруктураПоиска);
			
			Если МассивНайденныхСтрок.Количество() > 0 Тогда
			
				ВсегоРуб = 0;
				ВсегоВзаиморасчетов = 0;
				
				Для каждого ЭлементМассива Из МассивНайденныхСтрок Цикл
					
					ВсегоРуб            = ВсегоРуб + ЭлементМассива.СуммаРуб;
					ВсегоВзаиморасчетов = ВсегоВзаиморасчетов + ЭлементМассива.СуммаВзаиморасчетов;
					
				КонецЦикла;
				
				КоэффициентДляВзаиморасчетов = ?(ВсегоВзаиморасчетов = 0, 0,
					СтрокаТаблицыВзаиморасчетов.СуммаВзаиморасчетов / ВсегоВзаиморасчетов);
				КоэффициентДляРуб            = ?(ВсегоРуб = 0, 0, СтрокаТаблицыВзаиморасчетов.СуммаРуб / ВсегоРуб);
				
				Для каждого ЭлементМассива Из МассивНайденныхСтрок Цикл
					
					НоваяСтрока = ТаблицаВзаиморасчетыУСН.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыВзаиморасчетов);
					
					НоваяСтрока.СуммаБУ = 0;
					НоваяСтрока.СуммаНУ = 0;
					
					НоваяСтрока.СуммаВзаиморасчетов          = ЭлементМассива.СуммаВзаиморасчетов          * КоэффициентДляВзаиморасчетов;
					НоваяСтрока.ОстатокВзаиморасчетов        = ЭлементМассива.ОстатокВзаиморасчетов        * КоэффициентДляВзаиморасчетов;
					НоваяСтрока.СуммаВзаиморасчетовЕНВД      = ЭлементМассива.СуммаВзаиморасчетовЕНВД      * КоэффициентДляВзаиморасчетов;
					НоваяСтрока.СуммаВзаиморасчетовКомитента = ЭлементМассива.СуммаВзаиморасчетовКомитента * КоэффициентДляВзаиморасчетов;
					НоваяСтрока.СуммаВзаиморасчетовПатент    = ЭлементМассива.СуммаВзаиморасчетовПатент    * КоэффициентДляВзаиморасчетов;
					
					НоваяСтрока.СуммаРуб          = ЭлементМассива.СуммаРуб          * КоэффициентДляРуб;
					НоваяСтрока.СуммаБУ_ЕНВД      = ЭлементМассива.СуммаБУ_ЕНВД      * КоэффициентДляРуб;
					НоваяСтрока.СуммаБУ_Комитента = ЭлементМассива.СуммаБУ_Комитента * КоэффициентДляРуб;
					НоваяСтрока.СуммаБУ_Патент    = ЭлементМассива.СуммаБУ_Патент    * КоэффициентДляРуб;
					
					НоваяСтрока.ДокументРасчетов = ЭлементМассива.ДокументРасчетов;
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока = ТаблицаВзаиморасчетыУСН.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыВзаиморасчетов);
				
				НоваяСтрока.СуммаБУ = 0;
				НоваяСтрока.СуммаНУ = 0;
				
				НоваяСтрока.СуммаВзаиморасчетов          = СтрокаТаблицыВзаиморасчетов.СуммаВзаиморасчетов;
				НоваяСтрока.ОстатокВзаиморасчетов        = СтрокаТаблицыВзаиморасчетов.ОстатокВзаиморасчетов;
				НоваяСтрока.СуммаВзаиморасчетовЕНВД      = СтрокаТаблицыВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
				НоваяСтрока.СуммаВзаиморасчетовКомитента = СтрокаТаблицыВзаиморасчетов.СуммаВзаиморасчетовКомитента;
				НоваяСтрока.СуммаВзаиморасчетовПатент    = СтрокаТаблицыВзаиморасчетов.СуммаВзаиморасчетовПатент;
				
				НоваяСтрока.СуммаРуб          = СтрокаТаблицыВзаиморасчетов.СуммаРуб;
				НоваяСтрока.СуммаБУ_ЕНВД      = СтрокаТаблицыВзаиморасчетов.СуммаБУ_ЕНВД;
				НоваяСтрока.СуммаБУ_Комитента = СтрокаТаблицыВзаиморасчетов.СуммаБУ_Комитента;
				НоваяСтрока.СуммаБУ_Патент    = СтрокаТаблицыВзаиморасчетов.СуммаБУ_Патент;
				
				НоваяСтрока.ДокументРасчетов  = ЭлементМассива.ДокументРасчетов;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураВозврата.ТаблицаВзаиморасчетыУСН = ТаблицаВзаиморасчетыУСН;
		
	Иначе
		СтруктураВозврата.ТаблицаВзаиморасчетыУСН = ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПодготовитьПараметрыСтруктурыТаблицУСН(ТаблицаРеквизиты, ТаблицаВзаиморасчетов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация документа
	+ "ВидОперации,"                    // <ПеречислениеСсылка.ВидыОперацийПоступленияДенежныхСредств> - вид операции документа
	+ "УчитыватьЗадолженностьУСН,"      // <Булево> - признак того, что нужно учитывать задолженность УСН
	+ "СчетБанк,"                       // <ПланСчетовСсылка.Хозрасчетный> - счет учета денежных средств
	+ "СчетУчетаРасчетовСКонтрагентом"; // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов с контрагентом по операциям эквайринга
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Взаиморасчеты	
	
	СписокОбязательныхКолонок = ""
	+ "СчетРасчетов,"					// <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "ВалютаВзаиморасчетов,"			// <СправочникСсылка.Валюты>
	+ "Подразделение,"					// <СправочникСсылка.ПодразделенияОрганизации> 
	+ "Контрагент,"						// <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"				// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"				// <ДокументСсылка>
	+ "ДатаДокументаРасчетов,"			// <Дата>
	+ "ОстатокВзаиморасчетов,"			// <Число,15,2> - сумма остатка аванса в валюте взаиморасчетов, приходящаяся на строку
	+ "СуммаВзаиморасчетов,"			// <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаБУ,"						// <Число,15,2> - сумма в проводку
	+ "СуммаРуб,"						// <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)
	+ "СуммаНУ,"						// <Число,15,2> - сумма в проводку по НУ
	+ "РасчетыВУсловныхЕдиницах,"		// <Булево> - признак того, что валютный договор оплачивается рублями
	+ "Разница,"						// <Число,15,2> - сумма суммовой разницы если договор в у.е.
	+ "СтавкаНДС,"						// <ПеречислениеСсылка.СтавкиНДС> 
	+ "КорСчет,"						// <ПланСчетовСсылка.Хозрасчетный>
	+ "КорПодразделение,"				// <СправочникСсылка.ПодразделенияОрганизации>
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "СуммаВзаиморасчетовЕНВД,"		// <Число,15,2> - сумма в валюте расчетов по договору по деятельности ЕНВД
	+ "СуммаБУ_ЕНВД,"					// <Число,15,2> - сумма в рублях по деятельности ЕНВД
	+ "СуммаВзаиморасчетовПатент,"		// <Число,15,2> - сумма в валюте расчетов по договору по деятельности на патенте
	+ "СуммаБУ_Патент,"					// <Число,15,2> - сумма в рублях по деятельности на патенте
	+ "СуммаВзаиморасчетовКомитента,"	// <Число,15,2> - сумма в валюте расчетов по договору при реализации товаров и услуг комитентов
	+ "СуммаБУ_Комитента,"				// <Число,15,2> - сумма в рублях при реализации товаров и услуг комитентов
	+ "Содержание"						// <Строка> - содержание проводки
	;
	
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ТекстЗапросаТаблицыВзаиморасчетыИПрочихРасчетов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаВзаиморасчетов.Подразделение КАК Подразделение,
	|	ТаблицаВзаиморасчетов.Контрагент КАК Контрагент,
	|	ТаблицаВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаВзаиморасчетов.СчетРасчетов КАК СчетРасчетов,
	|	ТаблицаВзаиморасчетов.ДокументРасчетов КАК ДокументРасчетов,
	|	ТаблицаВзаиморасчетов.ОстатокВзаиморасчетов,
	|	ТаблицаВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаВзаиморасчетов.СуммаРУб,
	|	ТаблицаВзаиморасчетов.СуммаВзаиморасчетовЕНВД,
	|	ТаблицаВзаиморасчетов.СуммаВзаиморасчетовКомитента,
	|	ТаблицаВзаиморасчетов.СуммаВзаиморасчетовПатент,
	|	ТаблицаВзаиморасчетов.СуммаБУ_ЕНВД,
	|	ТаблицаВзаиморасчетов.СуммаБУ_Комитента,
	|	ТаблицаВзаиморасчетов.СуммаБУ_Патент
	|ПОМЕСТИТЬ ВТВзаиморасчетов
	|ИЗ
	|	&ТаблицаВзаиморасчетов КАК ТаблицаВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВзаиморасчетов.Контрагент,
	|	ВТВзаиморасчетов.ДоговорКонтрагента,
	|	ВТВзаиморасчетов.СчетРасчетов,
	|	ВТВзаиморасчетов.ДокументРасчетов,
	|	ВТВзаиморасчетов.ВалютаВзаиморасчетов,
	|	ВТВзаиморасчетов.Подразделение,
	|	СУММА(ВТВзаиморасчетов.ОстатокВзаиморасчетов) КАК ОстатокВзаиморасчетов,
	|	СУММА(ВТВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ВТВзаиморасчетов.СуммаРУб) КАК СуммаРУб,
	|	СУММА(ВТВзаиморасчетов.СуммаВзаиморасчетовЕНВД) КАК СуммаВзаиморасчетовЕНВД,
	|	СУММА(ВТВзаиморасчетов.СуммаВзаиморасчетовКомитента) КАК СуммаВзаиморасчетовКомитента,
	|	СУММА(ВТВзаиморасчетов.СуммаВзаиморасчетовПатент) КАК СуммаВзаиморасчетовПатент,
	|	СУММА(ВТВзаиморасчетов.СуммаБУ_ЕНВД) КАК СуммаБУ_ЕНВД,
	|	СУММА(ВТВзаиморасчетов.СуммаБУ_Комитента) КАК СуммаБУ_Комитента,
	|	СУММА(ВТВзаиморасчетов.СуммаБУ_Патент) КАК СуммаБУ_Патент
	|ИЗ
	|	ВТВзаиморасчетов КАК ВТВзаиморасчетов
	|ГДЕ
	|	НЕ ВТВзаиморасчетов.ДокументРасчетов = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВзаиморасчетов.Контрагент,
	|	ВТВзаиморасчетов.ДоговорКонтрагента,
	|	ВТВзаиморасчетов.СчетРасчетов,
	|	ВТВзаиморасчетов.ДокументРасчетов,
	|	ВТВзаиморасчетов.ВалютаВзаиморасчетов,
	|	ВТВзаиморасчетов.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ ВТОстаткиПрочихРасчетов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И СчетУчета В (&СчетаРасчетов)
	|				И Контрагент = &Контрагент
	|				И ДоговорКонтрагента В (&ДоговораКонтрагента)) КАК ПрочиеРасчетыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстаткиПрочихРасчетов.Организация,
	|	ВТОстаткиПрочихРасчетов.СчетУчета,
	|	ВТОстаткиПрочихРасчетов.Контрагент,
	|	ВТОстаткиПрочихРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВТОстаткиПрочихРасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТОстаткиПрочихРасчетов.СуммаОстаток КАК СуммаОстаток,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервичногоДокумента
	|ИЗ
	|	ВТОстаткиПрочихРасчетов КАК ВТОстаткиПрочихРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТОстаткиПрочихРасчетов.РасчетныйДокумент = ДанныеПервичныхДокументов.Документ
	|			И ВТОстаткиПрочихРасчетов.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПервичногоДокумента,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Контрагент,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка
	|ПОМЕСТИТЬ ВТОплатаПлатежнойКартойОплатаПокупеталя
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОстаткиПрочихРасчетов КАК ВТОстаткиПрочихРасчетов
	|		ПО ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Организация = ВТОстаткиПрочихРасчетов.Организация
	|			И ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка = ВТОстаткиПрочихРасчетов.РасчетныйДокумент
	|ГДЕ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Ссылка
	|ПОМЕСТИТЬ ВТРеализацияТоваровУслуг
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОстаткиПрочихРасчетов КАК ВТОстаткиПрочихРасчетов
	|		ПО РеализацияТоваровУслуг.Организация = ВТОстаткиПрочихРасчетов.Организация
	|			И РеализацияТоваровУслуг.Ссылка = ВТОстаткиПрочихРасчетов.РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОстаткиПрочихРасчетов.Контрагент,
	|	ВТОстаткиПрочихРасчетов.ДоговорКонтрагента,
	|	ВТОстаткиПрочихРасчетов.РасчетныйДокумент
	|ИЗ
	|	ВТОстаткиПрочихРасчетов КАК ВТОстаткиПрочихРасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОплатаПлатежнойКартойОплатаПокупеталя.Контрагент,
	|	ВТОплатаПлатежнойКартойОплатаПокупеталя.ДоговорКонтрагента,
	|	ВТОплатаПлатежнойКартойОплатаПокупеталя.Ссылка
	|ИЗ
	|	ВТОплатаПлатежнойКартойОплатаПокупеталя КАК ВТОплатаПлатежнойКартойОплатаПокупеталя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТРеализацияТоваровУслуг.Контрагент,
	|	ВТРеализацияТоваровУслуг.ДоговорКонтрагента,
	|	ВТРеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	ВТРеализацияТоваровУслуг КАК ВТРеализацияТоваровУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОплатаПлатежнойКартойОплатаПокупеталя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРеализацияТоваровУслуг";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстаткиПоСчетамУСН()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
	|	ХозрасчетныйОстатки.Субконто3 КАК РасчетныйДокумент,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаРуб,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТВыборкаПосчетамУСН
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатка,
	|			Счет В (&СписокСчетовУСН),
	|			&ВидыСубконто,
	|			Субконто1 В (&Контрагент)
	|				И Субконто2 В (&ДоговораКонтрагента)
	|				И Субконто3 В (&СписокРасчетныхДокументов)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыборкаПосчетамУСН.Контрагент,
	|	ВТВыборкаПосчетамУСН.Договор,
	|	ВТВыборкаПосчетамУСН.РасчетныйДокумент,
	|	СУММА(ВТВыборкаПосчетамУСН.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ВТВыборкаПосчетамУСН.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ИЗ
	|	ВТВыборкаПосчетамУСН КАК ВТВыборкаПосчетамУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВыборкаПосчетамУСН.Контрагент,
	|	ВТВыборкаПосчетамУСН.Договор,
	|	ВТВыборкаПосчетамУСН.РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыборкаПосчетамУСН.Контрагент,
	|	ВТВыборкаПосчетамУСН.Договор,
	|	ВТВыборкаПосчетамУСН.РасчетныйДокумент,
	|	ВТВыборкаПосчетамУСН.Счет,
	|	ВТВыборкаПосчетамУСН.ВалютаВзаиморасчетов,
	|	ВТВыборкаПосчетамУСН.Подразделение,
	|	СУММА(ВТВыборкаПосчетамУСН.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ВТВыборкаПосчетамУСН.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|ИЗ
	|	ВТВыборкаПосчетамУСН КАК ВТВыборкаПосчетамУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВыборкаПосчетамУСН.Контрагент,
	|	ВТВыборкаПосчетамУСН.Договор,
	|	ВТВыборкаПосчетамУСН.РасчетныйДокумент,
	|	ВТВыборкаПосчетамУСН.Счет,
	|	ВТВыборкаПосчетамУСН.ВалютаВзаиморасчетов,
	|	ВТВыборкаПосчетамУСН.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВыборкаПосчетамУСН";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ВыполнитьДвиженияПереносаЗадолженностиПоСчетамУСН(ТаблицаРеквизиты, ТаблицаДляПроводок, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыДвиженияПереброскиПоСчетамУСН(ТаблицаРеквизиты, ТаблицаДляПроводок);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаДляДвижений Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = "Перенос задолженности по счетам УСН";
		
		Проводка.СчетДт = СтрокаТаблицы.СчетДт;
		Проводка.СубконтоДт.Контрагенты = СтрокаТаблицы.Субконто1Дт;
		Проводка.СубконтоДт.Договоры    = СтрокаТаблицы.Субконто2Дт;
		Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.Субконто3Дт;
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = СтрокаТаблицы.ВалютаДт;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВзаиморасчетовДт;
		КонецЕсли;
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеДт;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетКт;
		Проводка.СубконтоКт.Контрагенты = СтрокаТаблицы.Субконто1Кт;
		Проводка.СубконтоКт.Договоры    = СтрокаТаблицы.Субконто2Кт;
		Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.Субконто3Кт;
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаКт;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ВалютнаяСуммаКт;
		КонецЕсли;
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.ПодразделениеКт;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженияПереброскиПоСчетамУСН(ТаблицаРеквизиты, ТаблицаДляПроводок)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация";                    // <СправочникСсылка.Организация> - организация документа
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = ""
	+ "СчетДт,"                                 //<ПланСчетов.Хозрасчетный> - счет учета задолженности УСН
	+ "Субконто1Дт,"                            //<СправочникСсылка.Контрагенты> - новый держатель задолженности УСН
	+ "Субконто2Дт,"                            //<СправочникСсылка.ДоговорыКонтрагентов> - договор с новым держателем задолженности УСН
	+ "Субконто3Дт,"                            //<ДокументСсылка> - документ расчетов
	+ "ПодразделениеДт,"                        //<СправочникСсылка.Подразделение> - подразделение нового держателя задолженности
	+ "ВалютаДт,"                               //<СправочникСсылка.Валюты> - новая валюта задолженности
	+ "ВалютнаяСуммаДт,"                        //<Число, 15, 2> - новая валютная сумма задолженности
	+ "СчетКт,"                                 //<ПланСчетов.Хозрасчетный> - счет учета задолженности УСН
	+ "Субконто1Кт,"                            //<СправочникСсылка.Контрагенты> - старый держатель задолженности УСН
	+ "Субконто2Кт,"                            //<СправочникСсылка.ДоговорыКонтрагентов> - договор со старым держателем задолженности УСН
	+ "Субконто3Кт,"                            //<ДокументСсылка> - документ расчетов
	+ "ПодразделениеКт,"                        //<СправочникСсылка.Подразделение> - подразделение старого держателя задолженности
	+ "ВалютаКт,"                               //<СправочникСсылка.Валюты> - старая валюта задолженности
	+ "ВалютнаяСуммаКт,"                        //<Число, 15, 2> - старая валютная сумма задолженности
	+ "Сумма";                                  //<Число, 15, 2> - сумма задолженности УСН, которую перебрасываем
	
	Параметры.Вставить("ТаблицаДляДвижений",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаДляПроводок, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.Контрагент КАК ФизЛицо,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СубконтоКт1 КАК СубконтоКт1,
	|	Реквизиты.СубконтоКт2 КАК СубконтоКт2,
	|	Реквизиты.СубконтоКт3 КАК СубконтоКт3,
	|	Реквизиты.ПодразделениеКт КАК ПодразделениеКт,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.СуммаУслуг КАК СуммаУслуг,
	|	Реквизиты.НазначениеПлатежа КАК НазначениеПлатежа,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ВЫРАЗИТЬ(""Поступление на р/с"" КАК СТРОКА(150)) КАК Содержание,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоРеализации,
	|	Реквизиты.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ФизЛицо КАК ФизЛицо,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СубконтоКт1 КАК СубконтоКт1,
	|	Реквизиты.СубконтоКт2 КАК СубконтоКт2,
	|	Реквизиты.СубконтоКт3 КАК СубконтоКт3,
	|	Реквизиты.ПодразделениеКт КАК ПодразделениеКт,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	1 КАК КоэффициентРуб,
	|	Реквизиты.СуммаУслуг КАК СуммаУслуг,
	|	Реквизиты.Содержание КАК Содержание,
	|	Реквизиты.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	Реквизиты        = ТаблицаРеквизиты[0];
	
	// Коэффициент пересчета сумм из валюты документа в рубли
	Если Реквизиты.ВалютаДокумента = ПараметрыПроведения.ВалютаРеглУчета Тогда
		КоэффициентРуб = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Дата);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
			ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
			
			Возврат;
		КонецЕсли;
		
		КоэффициентРуб           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
		Реквизиты.КоэффициентРуб = КоэффициентРуб;
	КонецЕсли;
	
	ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ВалютаРеглУчета     = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ);
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	Если Отказ ИЛИ НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Дата, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Дата);
	
	ПараметрыПроведения.Вставить("ПлательщикНДФЛ", ПлательщикНДФЛ);
	
	Запрос.УстановитьПараметр("ВалютаДокумента",                Реквизиты.ВалютаДокумента);
	Запрос.УстановитьПараметр("ПлательщикНДФЛ",                 ПлательщикНДФЛ);
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСН",        УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация,                 Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСНПатент",  УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация,           Реквизиты.Дата));
	Запрос.УстановитьПараметр("ВестиУчетПоВидамДеятельностиИП", УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОсновнаяНоменклатурнаяГруппа",   УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация,   Реквизиты.Дата));
	
	Для каждого Колонка Из ПараметрыПроведения.ТаблицаРеквизиты.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицыДокумента(НомераТаблиц)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПриобретениеВалюты(НомераТаблиц,     ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПродажаВалюты(НомераТаблиц,          ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПрочееПоступление(НомераТаблиц,      ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц,           ПараметрыПроведения, Реквизиты)
		;
		
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	Реквизиты.Содержание = ТекстСодержанияПроводокДокумента(Реквизиты);
	Если ПараметрыПроведения.РасшифровкаПлатежа <> Неопределено Тогда
		ПараметрыПроведения.РасшифровкаПлатежа.ЗаполнитьЗначения(Реквизиты.Содержание, "Содержание");
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов КАК ОтражатьРазницуВКурсе,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	&ОрганизацияПрименяетУСН КАК УчитыватьЗадолженностьУСН,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
	|			ТОГДА &ОрганизацияПрименяетУСНПатент
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьЗадолженностьУСНПатент,
	|	Реквизиты.НаправлениеДвижения КАК НаправлениеДвижения,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫРАЗИТЬ(Реквизиты.НазначениеПлатежа КАК СТРОКА(150)) КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса  + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	&Контрагент КАК РеквизитыКонтрагент,
	|	&ФизЛицо КАК РеквизитыФизЛицо,
	|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты,
	|	&КурсНаДатуПриобретенияРеализацииВалюты КАК РеквизитыКурсНаДатуПриобретенияРеализацииВалюты,
	|	ТаблицаРасшифровкаПлатежа.Сделка КАК Сделка,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
	|	ТаблицаРасшифровкаПлатежа.СубконтоКт1 КАК СубконтоКт1,
	|	ТаблицаРасшифровкаПлатежа.СубконтоКт2 КАК СубконтоКт2,
	|	ТаблицаРасшифровкаПлатежа.СубконтоКт3 КАК СубконтоКт3,
	|	ТаблицаРасшифровкаПлатежа.ПодразделениеКт КАК ПодразделениеКт,
	|	&СчетУчетаРасчетовСКонтрагентом КАК РеквизитыСчетУчетаРасчетовСКонтрагентом,
	|	&СубконтоКт1 КАК РеквизитыСубконтоКт1,
	|	&СубконтоКт2 КАК РеквизитыСубконтоКт2,
	|	&СубконтоКт3 КАК РеквизитыСубконтоКт3,
	|	&ПодразделениеКт КАК РеквизитыПодразделениеКт,
	|	&ПодразделениеОрганизации КАК РеквизитыПодразделениеОрганизации,
	|	&СчетБанк КАК РеквизитыСчетБанк,
	|	&СчетОрганизации КАК РеквизитыСчетОрганизации,
	|	&СтатьяДвиженияДенежныхСредств КАК РеквизитыСтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаУслуг КАК СуммаУслуг,
	|	&СуммаУслуг КАК РеквизитыСуммаУслуг,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты)
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
	|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * &КоэффициентРуб
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДС * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаНДСРуб,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты)
	|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
	|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫРАЗИТЬ(&Содержание КАК СТРОКА(150)) КАК РеквизитыСодержание,
	|	&НазначениеПлатежа КАК Содержание
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура погашения задолженности выполняется для операций:
	// - ОплатаПокупателя
	// - ВозвратОтПоставщика
	// - ПрочиеРасчетыСКонтрагентами
	// - ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
		|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически) КАК СпособПогашенияЗадолженности,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеКт КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически) КАК СпособПогашенияЗадолженности,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	99999,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
		|	ЛОЖЬ,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически),
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом,
		|	НЕОПРЕДЕЛЕНО,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетУчетаРасчетовСКонтрагентом,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСубконтоКт2,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.СуммаУслуг,
		|	ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаУслуг * &КоэффициентРуб КАК ЧИСЛО(15, 2)),
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСуммаУслуг > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПриобретениеВалюты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетУчетаДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК БанковскийСчет,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов * ТаблицаРасшифровкаПлатежа.РеквизитыКурсНаДатуПриобретенияРеализацииВалюты / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРубПоКурсуЦБ,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ПриобретениеВалюты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПриобретениеВалюты", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаПродажаВалюты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетУчетаДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК БанковскийСчет,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов * ТаблицаРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты / ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРубПоКурсуЦБ,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ПродажаВалюты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПродажаВалюты", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПрочееПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура прочего поступления вызывается для операций:
	// - ПрочееПоступление
	// - ЛичныеСредстваПредпринимателя
	// - Инкассация
	// - РасчетыПоКредитамИЗаймам
	// - ВозвратЗаймаРаботником
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетУчетаРасчетовСКонтрагентом КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСубконтоКт1 КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСубконтоКт2 КАК СубконтоКт2,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСубконтоКт3 КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеКт КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению) КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.СубконтоКт1 КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.СубконтоКт2 КАК СубконтоКт2,
		|	ТаблицаРасшифровкаПлатежа.СубконтоКт3 КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.ПодразделениеКт КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам) КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыФизЛицо КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежаПрочее", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежаПрочее", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ПоступлениеМПЗИПРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ПоступлениеТоваровУслуг"" КАК ТипПоступления,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	НЕОПРЕДЕЛЕНО КАК ТипСклада,
	|	ИСТИНА КАК НДСВключенВСтоимость,
	|	ЛОЖЬ КАК УчетАгентскогоНДС
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	Если НЕ ПараметрыПроведения.ПлательщикНДФЛ
		ИЛИ Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаУслуг",          Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	""РасшифровкаПлатежа"" КАК ИмяСписка,
	|	""Расшифровка платежа"" КАК СинонимСписка,
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаУслуг * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	0 КАК НДС,
	|	0 КАК Количество,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
	|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.НоменклатурныеГруппы)
	|			ТОГДА Реквизиты.СубконтоКт1
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.НоменклатурныеГруппы)
	|			ТОГДА Реквизиты.СубконтоКт2
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.НоменклатурныеГруппы)
	|			ТОГДА Реквизиты.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.СтатьиЗатрат)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.РасходыБудущихПериодов)
	|			ТОГДА Реквизиты.СубконтоКт1
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.СтатьиЗатрат)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.РасходыБудущихПериодов)
	|			ТОГДА Реквизиты.СубконтоКт2
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.СтатьиЗатрат)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.РасходыБудущихПериодов)
	|			ТОГДА Реквизиты.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.СтатьиЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.СтатьиЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт2 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.СтатьиЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт3 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидРасходовНУ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт1 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт2 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт3 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПринятиеКналоговомуУчету,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.СтатьиЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт1) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.СтатьиЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт2) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт2 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.СтатьиЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.СубконтоКт3) = ТИП(Справочник.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоКт3 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	НЕОПРЕДЕЛЕНО КАК Партия
	|ИЗ
	|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Реквизиты.СуммаУслуг > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.Дата КАК ДатаДокументаРасчетов,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаУслуг * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|ГДЕ
	|	&ПлательщикНДФЛ
	|	И Реквизиты.СуммаУслуг > 0";
	
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаУслуг",          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРуб
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДСРуб
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаДокумента
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДСРуб * ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстСодержанияПроводокДокумента(Реквизиты)
	
	ПозицияСуммы = Найти(Реквизиты.Содержание, "Сумма ");
	Если ПозицияСуммы = 0 Тогда
		ТекстНазначение = Реквизиты.Содержание;
	Иначе
		ТекстНазначение = Лев(Реквизиты.Содержание, ПозицияСуммы - 1);
	КонецЕсли;
	
	Содержание = СокрЛП(СтрЗаменить(ТекстНазначение, Символы.ПС, " "))
		+ " по вх.д. " + Реквизиты.НомерВходящегоДокумента 
		+ " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
	
	Возврат Содержание;
	
КонецФункции

// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ ИБ

// Внешний интерфейс обновления ИБ

Процедура ЗаполнитьРеквизитыНастройкиУСНДляАктуальныхДокументов() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГраницаАктуальногоПериода",
		УчетУСН.ДатаНачалаАктуальногоПериодаДляПереходаНаУпрощеннуюНастройкуКУДиР());
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	ВидыОперацийАвансаУСН = Новый Массив;
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	Запрос.УстановитьПараметр("ВидыОперацийАванса", ВидыОперацийАвансаУСН);
	
	ВидыОперацийРасчетыУСН = Новый Массив;
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	Запрос.УстановитьПараметр("ВидыОперацийРасчетыУСН", ВидыОперацийРасчетыУСН);
	
	ВидыОперацийПрочиеПоступления = Новый Массив;
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление);
	Запрос.УстановитьПараметр("ВидыОперацийПрочиеПоступления", ВидыОперацийПрочиеПоступления);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНПатент
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	(РегУПО1.ПрименяетсяУСН
	|			ИЛИ РегУПО1.ПрименяетсяУСНПатент)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	(УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|			ИЛИ УчетнаяПолитикаОрганизаций.ПрименяетсяУСНПатент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.ДатаДокумента КАК ДатаДокумента,
	|	ВложенныйЗапрос.ВидОбработкиОбновления
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата КАК ДатаДокумента,
	|		""ЗаполнитьПорядокОтраженияАванса"" КАК ВидОбработкиОбновления
	|	ИЗ
	|		ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|			ПО ВТ_УчетнаяПолитика.Организация = ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Организация
	|				И (ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон)
	|				И (ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач)
	|	ГДЕ
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ПорядокОтраженияАванса В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка))
	|		И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата >= &ГраницаАктуальногоПериода
	|		И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийАванса)
	|		И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.УдалитьПорядокОтраженияАванса <> ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка,
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата,
	|		""ЗаполнитьДоходыУСНПрочиеРасчеты""
	|	ИЗ
	|		ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|			ПО ВТ_УчетнаяПолитика.Организация = ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Организация
	|				И (ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон)
	|				И (ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач)
	|	ГДЕ
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата >= &ГраницаАктуальногоПериода
	|		И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийРасчетыУСН)
	|		И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Графа5_УСН <> 0
	|		И НЕ ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.УдалитьРучнаяНастройка_УСН
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка,
	|		ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоходыУСН) = 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеНаРасчетныйСчет.Ссылка,
	|		ПоступлениеНаРасчетныйСчет.Ссылка.Дата,
	|		""ОбработатьРучнуюНастройкуУСНПрочиеРасчеты""
	|	ИЗ
	|		Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО ПоступлениеНаРасчетныйСчет.Организация = ВТ_УчетнаяПолитика.Организация
	|				И ПоступлениеНаРасчетныйСчет.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|				И ПоступлениеНаРасчетныйСчет.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|	ГДЕ
	|		ПоступлениеНаРасчетныйСчет.Дата >= &ГраницаАктуальногоПериода
	|		И ПоступлениеНаРасчетныйСчет.ВидОперации В(&ВидыОперацийРасчетыУСН)
	|		И ПоступлениеНаРасчетныйСчет.УдалитьРучнаяНастройка_УСН
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПоступлениеНаРасчетныйСчет.Ссылка,
	|		ПоступлениеНаРасчетныйСчет.Ссылка.Дата,
	|		""ОбработатьРучнуюНастройкуУСНПрочиеПоступления""
	|	ИЗ
	|		Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО ПоступлениеНаРасчетныйСчет.Организация = ВТ_УчетнаяПолитика.Организация
	|				И ПоступлениеНаРасчетныйСчет.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|				И ПоступлениеНаРасчетныйСчет.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|	ГДЕ
	|		ПоступлениеНаРасчетныйСчет.Дата >= &ГраницаАктуальногоПериода
	|		И ПоступлениеНаРасчетныйСчет.ВидОперации В(&ВидыОперацийПрочиеПоступления)
	|		И ПоступлениеНаРасчетныйСчет.УдалитьРучнаяНастройка_УСН) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаПоДокументу Из РезультатЗапроса Цикл
		
		Попытка
			
			Если СтрокаПоДокументу.ВидОбработкиОбновления = "ЗаполнитьПорядокОтраженияАванса" Тогда
				ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежа(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ЗаполнитьДоходыУСНПрочиеРасчеты" Тогда
				ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ОбработатьРучнуюНастройкуУСНПрочиеРасчеты" Тогда
				ОбработатьРучнуюНастройкуУСНПрочиеРасчеты(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ОбработатьРучнуюНастройкуУСНПрочиеПоступления" Тогда
				ОбработатьРучнуюНастройкуУСНПрочиеПоступления(СтрокаПоДокументу);
			КонецЕсли;
			
		Исключение
			// Если не удалось обработать какой-либо документ, пропускаем и обрабатываем позднее (отложенно).
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поступление на расчетный счет: %1 по причине:
					|%2'"),
					СтрокаПоДокументу.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПоступлениеНаРасчетныйСчет, СтрокаПоДокументу.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежаОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	ВидыОперацийАвансаУСН = Новый Массив;
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	Запрос.УстановитьПараметр("ВидыОперацийАванса", ВидыОперацийАвансаУСН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНПатент
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	(РегУПО1.ПрименяетсяУСН
	|			ИЛИ РегУПО1.ПрименяетсяУСНПатент)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	(УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|			ИЛИ УчетнаяПолитикаОрганизаций.ПрименяетсяУСНПатент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|			И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ПорядокОтраженияАванса В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка))
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийАванса)
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.УдалитьПорядокОтраженияАванса <> ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежа(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поступление на расчетный счет: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПоступлениеНаРасчетныйСчет, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежаОтложенно
				|не удалось обработать некоторые поступления на расчетный счет (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПоступлениеНаРасчетныйСчет,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежаОтложенно
					|обработала очередную порцию поступлений на расчетный счет: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежаОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	ВидыОперацийРасчетыУСН = Новый Массив;
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	Запрос.УстановитьПараметр("ВидыОперацийРасчетыУСН", ВидыОперацийРасчетыУСН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|			И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийРасчетыУСН)
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Графа5_УСН <> 0
	|	И НЕ ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.УдалитьРучнаяНастройка_УСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоходыУСН) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поступление на расчетный счет: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПоступлениеНаРасчетныйСчет, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежаОтложенно
				|не удалось обработать некоторые поступления на расчетный счет (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПоступлениеНаРасчетныйСчет,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежаОтложенно
					|обработала очередную порцию поступлений на расчетный счет: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРучнуюНастройкуУСНПрочиеРасчетыОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	ВидыОперацийРасчетыУСН = Новый Массив;
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	Запрос.УстановитьПараметр("ВидыОперацийРасчетыУСН", ВидыОперацийРасчетыУСН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчет.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ПоступлениеНаРасчетныйСчет.Организация = ВТ_УчетнаяПолитика.Организация
	|			И ПоступлениеНаРасчетныйСчет.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И ПоступлениеНаРасчетныйСчет.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.ВидОперации В(&ВидыОперацийРасчетыУСН)
	|	И ПоступлениеНаРасчетныйСчет.УдалитьРучнаяНастройка_УСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьРучнуюНастройкуУСНПрочиеРасчеты(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поступление на расчетный счет: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПоступлениеНаРасчетныйСчет, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбработатьРучнуюНастройкуУСНПрочиеРасчетыОтложенно
				|не удалось обработать некоторые поступления на расчетный счет (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПоступлениеНаРасчетныйСчет,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбработатьРучнуюНастройкуУСНПрочиеРасчетыОтложенно
					|обработала очередную порцию поступлений на расчетный счет: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРучнуюНастройкуУСНПрочиеПоступленияОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	ВидыОперацийПрочиеПоступления = Новый Массив;
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление);
	Запрос.УстановитьПараметр("ВидыОперацийПрочиеПоступления", ВидыОперацийПрочиеПоступления);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчет.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ПоступлениеНаРасчетныйСчет.Организация = ВТ_УчетнаяПолитика.Организация
	|			И ПоступлениеНаРасчетныйСчет.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И ПоступлениеНаРасчетныйСчет.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.ВидОперации В(&ВидыОперацийПрочиеПоступления)
	|	И ПоступлениеНаРасчетныйСчет.УдалитьРучнаяНастройка_УСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьРучнуюНастройкуУСНПрочиеПоступления(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поступление на расчетный счет: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПоступлениеНаРасчетныйСчет, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбработатьРучнуюНастройкуУСНПрочиеПоступленияОтложенно
				|не удалось обработать некоторые поступления на расчетный счет (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПоступлениеНаРасчетныйСчет,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбработатьРучнуюНастройкуУСНПрочиеПоступленияОтложенно
					|обработала очередную порцию поступлений на расчетный счет: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

//Производится перенос значения реквизита ФизическоеЛицо в реквизит Контрагент
//если сведений о физическом лице нет - оно создается на основании контрагента
//
Процедура ЗаменитьКонтрагентаНаФизическоеЛицо() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником)
	|	И НЕ ПоступлениеНаРасчетныйСчет.Контрагент ССЫЛКА Справочник.ФизическиеЛица";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Контрагент      = ДокументОбъект.УдалитьФизЛицо;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры
	
// Служебные обработчики обновления ИБ

// Заполняет новый реквизит "ПорядокОтраженияАванса" в ТЧ "РасшифровкаПлатежа" у переданного документа.
//
Процедура ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежа(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеНаРасчетныйСчет");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.УдалитьПорядокОтраженияАванса) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта.
		// 1. Переносим порядок отражения авансов из шапки в ТЧ
		ПорядокОтраженияАвансаДляТЧ = Неопределено;
		Если ДокументОбъект.УдалитьПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходПатент Тогда
			ПорядокОтраженияАвансаДляТЧ = ДокументОбъект.Патент;
		Иначе
			ПорядокОтраженияАвансаДляТЧ = ДокументОбъект.УдалитьПорядокОтраженияАванса;
		КонецЕсли;
		
		Для каждого СтрокаПлатеж Из ДокументОбъект.РасшифровкаПлатежа Цикл
			СтрокаПлатеж.ПорядокОтраженияАванса = ПорядокОтраженияАвансаДляТЧ;
		КонецЦикла;
		
		ДокументОбъект.УдалитьПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ПустаяСсылка();
		
		// 2. Если отражение в КУДиР настроено вручную (допускалось при УСН-доходы) - установим признак ручной корректировки движений
		Если ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			ДокументОбъект.РучнаяКорректировка = Истина;
			ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		КонецЕсли;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет новый реквизит "ДоходыУСН" в ТЧ "РасшифровкаПлатежа" у переданного документа
// (для ситуации, когда настройка УСН не редактировалась пользователем).
//
Процедура ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеНаРасчетныйСчет");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если ДокументОбъект.Графа5_УСН = ДокументОбъект.РасшифровкаПлатежа.Итог("ДоходыУСН")
			И НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта.
		КоэффициентыРаспределения = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
		МассивРаспределенныхДоходов = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ДокументОбъект.Графа5_УСН, КоэффициентыРаспределения);
		Если МассивРаспределенныхДоходов <> Неопределено Тогда
			ДокументОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивРаспределенныхДоходов, "ДоходыУСН");
		КонецЕсли;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для поступлений по прочим расчетам, в которых настройка УСН отредактирована пользователем вручную:
//    если отредактированы только доходы УСН - распределяет сумму доходов по строкам ТЧ "РасшифровкаПлатежа";
//    если иные настройки КУДиР отличаются от умолчаний - выставляется признак ручной корректировки движений
Процедура ОбработатьРучнуюНастройкуУСНПрочиеРасчеты(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеНаРасчетныйСчет");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта.
		Если ДокументОбъект.Графа5_УСН <> 0 И ДокументОбъект.РасшифровкаПлатежа.Количество() <> 0 Тогда
			КоэффициентыРаспределения = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
			МассивРаспределенныхДоходов = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ДокументОбъект.Графа5_УСН, КоэффициентыРаспределения);
			ДокументОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивРаспределенныхДоходов, "ДоходыУСН");
		КонецЕсли;
		
		Если ДокументОбъект.Графа6_УСН <> 0 ИЛИ ДокументОбъект.Графа7_УСН <> 0 ИЛИ ДокументОбъект.НДС_УСН <> 0
			ИЛИ ДокументОбъект.ДоходыЕНВД_УСН ИЛИ ДокументОбъект.РасходыЕНВД_УСН Тогда
			ДокументОбъект.РучнаяКорректировка = Истина;
		КонецЕсли;
		
		ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для прочих поступлений, в которых настройка УСН отредактирована пользователем вручную:
//    если отредактированы только доходы УСН, и вид операции "ПрочееПоступление" - ручная настройка УСН сбрасывается;
//    для остальных видов операций - выставляется признак ручной корректировки движений.
Процедура ОбработатьРучнуюНастройкуУСНПрочиеПоступления(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеНаРасчетныйСчет");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
			Если НЕ ДокументОбъект.РучнаяКорректировка И (ДокументОбъект.Графа6_УСН <> 0 ИЛИ ДокументОбъект.Графа7_УСН <> 0 ИЛИ ДокументОбъект.НДС_УСН <> 0
				ИЛИ ДокументОбъект.ДоходыЕНВД_УСН ИЛИ ДокументОбъект.РасходыЕНВД_УСН) Тогда
				ДокументОбъект.РучнаяКорректировка = Истина;
			КонецЕсли;
			// если заданы только ДоходыУСН (Графа 5) - признак ручной корректировки не изменяем
		Иначе
			ДокументОбъект.РучнаяКорректировка = Истина;
		КонецЕсли;
		
		ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Поступление на расчетный счет""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация, НомерВходящегоДокумента, ДатаВходящегоДокумента",
		"Контрагент", "НомерВходящегоДокумента", "ДатаВходящегоДокумента");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли
