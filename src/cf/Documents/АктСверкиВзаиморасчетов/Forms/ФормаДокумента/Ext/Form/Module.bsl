&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем КлючеваяОперация;

&НаКлиенте
Перем ВремяНачалаОперации;

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ПоДаннымОрганизацииДоговор, ПоДаннымКонтрагентаДоговор

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымОрганизацииДоговор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымКонтрагентаДоговор");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РазбитьПоДоговорам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ПоДаннымОрганизацииДокумент

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПоДаннымОрганизацииДокумент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВыводитьПолныеНазванияДокументов", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	Если ВремяНачалаОперации <> Неопределено Тогда
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(
			КлючеваяОперация, 
			ВремяНачалаОперации
		);
		ВремяНачалаОперации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеТаймера()
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		Возврат ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Заполняет массив счетами, которые будут использоваться по умолчанию
//
// Параметры
//  Таблица	-	<ТаблицаЗначений> - реквизит формы "ТаблицаСчетовПоУмолчанию"
//
&НаСервере
Процедура ЗаполнитьСчетамиПоУмолчаниюНаСервере()

	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
	ТаблицаСчетов.Колонки.СчетРасчетов.Имя = "Счет";
	ТаблицаСчетов.Колонки.Добавить("УчаствуетВРасчетах");
	ТаблицаСчетов.ЗаполнитьЗначения(Истина, "УчаствуетВРасчетах");
	Объект.СписокСчетов.Загрузить(ТаблицаСчетов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьПараметрыДоговора(Договор, ПараметрыДоговора)

	Если ПараметрыДоговора <> Неопределено И ПараметрыДоговора.Ссылка = Договор Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ЭтоГруппа,ВалютаВзаиморасчетов,ВидДоговора");
		ПараметрыДоговора = Новый Структура("Ссылка, ЭтоГруппа", Договор, РеквизитыДоговора.ЭтоГруппа);
		Если НЕ ПараметрыДоговора.ЭтоГруппа Тогда
			ПараметрыДоговора.Вставить("ВалютаДоговора", РеквизитыДоговора.ВалютаВзаиморасчетов);
			ПараметрыДоговора.Вставить("ВидДоговора", РеквизитыДоговора.ВидДоговора);
		КонецЕсли; 
	Иначе 
		ПараметрыДоговора = Новый Структура("Ссылка, ЭтоГруппа", Договор, Ложь);
	КонецЕсли; 

	Если ЗначениеЗаполнено(Договор) И (НЕ ПараметрыДоговора.ЭтоГруппа) Тогда
		ПараметрыДоговора.Вставить("ДоступностьРазбивкиПоДоговорам", Ложь);
	Иначе
		ПараметрыДоговора.Вставить("ДоступностьРазбивкиПоДоговорам", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОстатки()

	ОстатокНаКонец = Объект.ОстатокНаНачало + Объект.ПоДаннымОрганизации.Итог("Дебет") - Объект.ПоДаннымОрганизации.Итог("Кредит");
	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	
	ОстатокНаКонецКонтрагент = ОстатокНаНачалоКонтрагент + Объект.ПоДаннымКонтрагента.Итог("Дебет") - Объект.ПоДаннымКонтрагента.Итог("Кредит");
	
	Если Объект.Расхождение <> ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
		Объект.Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	КонецЕсли;
	Расхождение = Объект.Расхождение;
	РасхождениеКонтрагент = - Расхождение;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьОстаткиНаСервере()

	ОстатокНаКонец = Объект.ОстатокНаНачало + Объект.ПоДаннымОрганизации.Итог("Дебет") -  Объект.ПоДаннымОрганизации.Итог("Кредит");
	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	
	ОстатокНаКонецКонтрагент = ОстатокНаНачалоКонтрагент + Объект.ПоДаннымКонтрагента.Итог("Дебет") -  Объект.ПоДаннымКонтрагента.Итог("Кредит");
	
	Если Объект.Расхождение <> ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
		Объект.Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	КонецЕсли; 
	Расхождение = Объект.Расхождение;
	РасхождениеКонтрагент = - Расхождение;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	Если ТекущаяОрганизация <> Объект.Организация Тогда
		Объект.Номер = "";
	КонецЕсли;
	
	ТекущаяОрганизация = Объект.Организация;
	
	//договор очищается платформой автоматически. Пытаемся подставить другой договор:
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
								Объект.Контрагент,
								Объект.Организация);
	//обновим текущее значение договора:
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
	
	// очищаем табличные части документа:
	Объект.ПоДаннымОрганизации.Очистить();
	Объект.ПоДаннымКонтрагента.Очистить();
	ПересчитатьОстаткиНаСервере();
	
	//Изменяем видимость/доступность реквизитов:
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()

	
	ТекущийКонтрагент = Объект.Контрагент;
	Объект.ПредставительКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийКонтрагент, "ОсновноеКонтактноеЛицо");
	ТекущийПредставительКонтрагента = Объект.ПредставительКонтрагента;
	
	//договор очищается платформой автоматически. Пытаемся подставить другой договор:
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
								Объект.Контрагент,
								Объект.Организация);
	//обновим текущее значение договора:
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
	
	// очищаем табличные части документа:
	Объект.ПоДаннымОрганизации.Очистить();
	Объект.ПоДаннымКонтрагента.Очистить();
	ПересчитатьОстаткиНаСервере();
	
	//Изменяем видимость/доступность реквизитов:
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер()

	//Обновим текущее значение:
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);

	// очищаем табличные части документа:
	Объект.ПоДаннымОрганизации.Очистить();
	Объект.ПоДаннымКонтрагента.Очистить();
	ПересчитатьОстаткиНаСервере();

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И НЕ ПараметрыДоговора.ЭтоГруппа Тогда
		Объект.РазбитьПоДоговорам = Ложь;
	КонецЕсли;

	//Изменяем видимость/доступность реквизитов:
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	Если ТекущийПериод.ДатаНачала <> Объект.ДатаНачала ИЛИ ТекущийПериод.ДатаОкончания <> КонецДня(Объект.ДатаОкончания) Тогда
		
		Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииПериодаЗавершение", ЭтотОбъект);
			Текст = НСтр("ru='При изменении периода сверки табличная часть будет очищена. Изменить период?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРазбитьПоДоговорамСервер()

	Если Объект.РазбитьПоДоговорам Тогда
		Объект.ПоДаннымОрганизации.Сортировать("Договор, Дата, Документ, Представление", Новый СравнениеЗначений);
	Иначе
		Объект.ПоДаннымОрганизации.Сортировать("Дата, Документ, Представление, Договор", Новый СравнениеЗначений);
	КонецЕсли;

	Если НЕ Объект.СверкаСогласована Тогда
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение таблицы "По данным организации" по информации из бухгалтерского учета
&НаСервере
Функция ЗаполнитьПоДаннымБухгалтерскогоУчета(ИБФайловая)
	
	//проверим заполненность обязательных реквизитов
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаНачалаВключая", 
		?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала), Неопределено, 
			Новый Граница (Объект.ДатаНачала, ВидГраницы.Включая)));
	СтруктураПараметров.Вставить("ДатаНачалаИсключая", 
		?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала), Неопределено, 
			Новый Граница (Объект.ДатаНачала, ВидГраницы.Исключая)));
	СтруктураПараметров.Вставить("ДатаОкончания", 
		?(НЕ ЗначениеЗаполнено(Объект.ДатаОкончания), Неопределено, 
			Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая)));
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("Валюта",
		?(НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		ИЛИ (Объект.ВалютаДокумента = ВалютаРегламентированногоУчета), Неопределено, 
			Объект.ВалютаДокумента));
			
	ФильтрСписокСчетов = Новый Массив();
	Для каждого СтрокаСчета Из Объект.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) И СтрокаСчета.УчаствуетВРасчетах Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Не задан список счетов, по которым производится сверка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект.СписокСчетов");
		Возврат Истина;
	КонецЕсли;
		
	СтруктураПараметров.Вставить("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СтруктураПараметров.Вставить("АналитикаРасчетов", АналитикаРасчетов);
	
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 
		?(НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента), Неопределено, 
			Объект.ДоговорКонтрагента));
			
	СтруктураПараметров.Вставить("ВыводитьПолныеНазванияДокументов", Объект.ВыводитьПолныеНазванияДокументов);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("РазбитьПоДоговорам", Объект.РазбитьПоДоговорам);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	Если ИБФайловая Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Документы.АктСверкиВзаиморасчетов.ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
		
	Иначе
		
		НаименованиеЗадания = "ЗаполнитьПоДаннымОрганизации";
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Документы.АктСверкиВзаиморасчетов.ПодготовитьДанныеДляЗаполнения", 
			СтруктураПараметров, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
		
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОстатокНаНачало = СтруктураДанных.ОстатокНаНачало;
	
	Объект.ПоДаннымОрганизации.Загрузить(СтруктураДанных.ПоДаннымОрганизации);
	
	ПересчитатьОстаткиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКонтрагентаПоДаннымОрганизацииСервер()
	
	ПоДаннымКонтрагента = Объект.ПоДаннымОрганизации.Выгрузить();
	
	ПоДаннымКонтрагента.Колонки.Дебет.Имя  = "КредитК";
	ПоДаннымКонтрагента.Колонки.Кредит.Имя = "Дебет";
	ПоДаннымКонтрагента.Колонки.КредитК.Имя= "Кредит";
	
	Для каждого СтрокаДвижений Из ПоДаннымКонтрагента Цикл
		Представление = СокрЛП(СтрокаДвижений.Представление);
		Если Лев(Представление, 8) = "Передано" Тогда
			Представление = "Принято" + Сред(Представление, 9);
			
		ИначеЕсли Лев(Представление, 7) = "Принято" Тогда
			Представление = "Передано" + Сред(Представление, 8);

		ИначеЕсли Лев(Представление, 7) = "Продажа" Тогда
			Представление = "Приход" + Сред(Представление, 8);

		ИначеЕсли Лев(Представление, 6) = "Приход" Тогда
			Представление = "Продажа" + Сред(Представление, 7);
			
		ИначеЕсли Лев(Представление, 21) = "Корректировка продажи" Тогда
			Представление = "Корректировка прихода" + Сред(Представление, 22);

		ИначеЕсли Лев(Представление, 21) = "Корректировка прихода" Тогда
			Представление = "Корректировка продажи" + Сред(Представление, 22);
			
		КонецЕсли;
		СтрокаДвижений.Представление = Представление;
	КонецЦикла;
	
	Объект.ПоДаннымКонтрагента.Загрузить(ПоДаннымКонтрагента);
	ПересчитатьОстаткиНаСервере();
	
КонецПроцедуры

// Заполнение таблицы "По данным организации" по данным бухгалтерского учета
//
&НаКлиенте
Процедура ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте()

	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаОперации = ЗначениеТаймера();
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат = ЗаполнитьПоДаннымБухгалтерскогоУчета(ИБФайловая);
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		и НЕ Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
	Иначе
	
		ЗафиксироватьДлительностьКлючевойОперации();
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ПриВыбореДокументаНаСервере(ВыбранныйДокумент, ДатаВыбранногоДокумента, ДоговорВыбранногоДокумента)

	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Если ВыбранныйДокумент.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") = Неопределено Тогда
			ДатаВыбранногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "Дата")
		Иначе
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранныйДокумент, "Дата,ДоговорКонтрагента");
			ДатаВыбранногоДокумента    = ДанныеДокумента.Дата;
			ДоговорВыбранногоДокумента = ДанныеДокумента.ДоговорКонтрагента;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.РазбитьПоДоговорам.Доступность = НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		ИЛИ Форма.ПараметрыДоговора.ЭтоГруппа;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ИзменитьДоступностьПоСогласованиюСверки(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.Организация.Доступность			= НЕ Объект.СверкаСогласована;
	Элементы.Контрагент.Доступность				= НЕ Объект.СверкаСогласована;
	Элементы.ДоговорКонтрагента.Доступность		= НЕ Объект.СверкаСогласована;
	Элементы.ВалютаДокумента.Доступность		= НЕ Объект.СверкаСогласована;
	
	Элементы.ГруппаПериодСверки.Доступность		= НЕ Объект.СверкаСогласована;
	
	Элементы.ОстатокНаНачало.ТолькоПросмотр		= Объект.СверкаСогласована;
	
	Элементы.ПоДаннымКонтрагента.ТолькоПросмотр = Объект.СверкаСогласована;
	Элементы.ПоДаннымОрганизации.ТолькоПросмотр = Объект.СверкаСогласована;
	Элементы.СписокСчетов.ТолькоПросмотр 		= Объект.СверкаСогласована;

	Элементы.ВыводитьПолныеНазванияДокументов.Доступность 		= НЕ Объект.СверкаСогласована;
	
	Элементы.ПоДаннымКонтрагента.КоманднаяПанель.Доступность	= НЕ Объект.СверкаСогласована;
	Элементы.ПоДаннымОрганизации.КоманднаяПанель.Доступность	= НЕ Объект.СверкаСогласована;
	Элементы.СписокСчетов.КоманднаяПанель.Доступность			= НЕ Объект.СверкаСогласована;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ОПИСАНИЯ ОПОВЕЩЕНИЯ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьПоДаннымУчетаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ПоДаннымОрганизации.Очистить();
		
		ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДанныеКонтрагентаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	//проверим заполненность обязательных реквизитов:
	Если Объект.ПоДаннымОрганизации.Количество()=0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Таблица ""По данным организации"" не заполнена!'"));
		ТекущийЭлемент = Элементы.ПоДаннымОрганизации;
	Иначе
		ЗаполнитьДанныеКонтрагентаПоДаннымОрганизацииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьСчетамиПоУмолчаниюЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.СписокСчетов.Очистить();
		
		// СписокСчетов будет заполнен вместе с таблицей-шаблоном
		ЗаполнитьСчетамиПоУмолчаниюНаСервере();
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацииЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		// при отказе возвращаем предыдущие значения реквизитов:
		Объект.Организация = ТекущаяОрганизация;
		Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка;
	Иначе
		// Отработку изменения передаем на сервер:
		ПриИзмененииОрганизацииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииКонтрагентаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		// при отказе возвращаем предыдущие значения реквизитов:
		Объект.Контрагент = ТекущийКонтрагент;
		Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка;
		Объект.ПредставительКонтрагента = ТекущийПредставительКонтрагента;
	Иначе
		// Отработку изменения передаем на сервер:
		ПриИзмененииКонтрагентаСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииДоговораЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		// при отказе возвращаем предыдущие значения реквизитов:
		Объект.Организация = ТекущаяОрганизация;
		Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка;
	Иначе
		// Отработку изменения передаем на сервер:
		ПриИзмененииДоговораСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросВыводитьПолныеНазванияДокументовЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Объект.ВыводитьПолныеНазванияДокументов = НЕ Объект.ВыводитьПолныеНазванияДокументов;
	Иначе
		Объект.ПоДаннымОрганизации.Очистить();
		Объект.ПоДаннымКонтрагента.Очистить();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииПериодаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТекущийПериод.ДатаНачала	 = Объект.ДатаНачала;
		ТекущийПериод.ДатаОкончания	 = Объект.ДатаОкончания;
		Объект.ПоДаннымОрганизации.Очистить();
		ПересчитатьОстатки();
	Иначе
		Объект.ДатаНачала	 = ТекущийПериод.ДатаНачала;
		Объект.ДатаОкончания = ТекущийПериод.ДатаОкончания;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоДаннымУчета(Команда)
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьПоДаннымУчетаЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		
		ЗаполнитьДаннымиБухгалтерскогоУчетаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеКонтрагентаПоДаннымОрганизации(Команда)
	
	Если Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьДанныеКонтрагентаЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		
		ЗаполнитьДанныеКонтрагентаПоДаннымОрганизацииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетамиПоУмолчанию(Команда)
	
	Если Объект.СписокСчетов.Количество()>0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьСчетамиПоУмолчаниюЗавершение", ЭтотОбъект);
		
		Текст = НСтр("ru='Перед заполнением табличная часть <Счета учета расчетов> будет очищена. Заполнить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		// СписокСчетов будет заполнен вместе с таблицей-шаблоном
		ЗаполнитьСчетамиПоУмолчаниюНаСервере();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОстаткиИРасхождение()

	ОстатокНаКонец = Объект.ОстатокНаНачало 
		+ Объект.ПоДаннымОрганизации.Итог("Дебет") - Объект.ПоДаннымОрганизации.Итог("Кредит");
	
	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	ОстатокНаКонецКонтрагент = ОстатокНаНачалоКонтрагент 
		+ Объект.ПоДаннымКонтрагента.Итог("Дебет") - Объект.ПоДаннымКонтрагента.Итог("Кредит");
	
	Расхождение           = Объект.Расхождение;
	РасхождениеКонтрагент = - Расхождение;
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьТекущиеЗначенияРеквизитов()

	ТекущаяОрганизация 	 = Объект.Организация;
	ТекущийКонтрагент 	 = Объект.Контрагент;
	ТекущийПредставительКонтрагента = Объект.ПредставительКонтрагента;
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
	ТекущийПериод.ДатаНачала    = Объект.ДатаНачала;
	ТекущийПериод.ДатаОкончания = Объект.ДатаОкончания;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "По данным организации"

&НаКлиенте
Процедура ПоДаннымОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ПересчитатьОстатки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымОрганизацииПослеУдаления(Элемент)
	
	ПересчитатьОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымОрганизацииДокументПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПоДаннымОрганизации.ТекущиеДанные;
	ПриВыбореДокументаНаСервере(ДанныеСтроки.Документ, ДанныеСтроки.Дата, ДанныеСтроки.Договор);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "По данным контрагента"

&НаКлиенте
Процедура ПоДаннымКонтрагентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ПересчитатьОстатки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымКонтрагентаПослеУдаления(Элемент)
	
	ПересчитатьОстатки();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Проверяем: нужно ли что-то обновлять:
	Если НЕ Объект.Организация = ТекущаяОрганизация Тогда
		
		Если Объект.ПоДаннымОрганизации.Количество() > 0 ИЛИ Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
		
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацииЗавершение", ЭтотОбъект);
			Текст = НСтр("ru = 'При изменении организации табличные части будут очищены. Продолжить?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
			
		Иначе
			// Отработку изменения передаем на сервер:
			ПриИзмененииОрганизацииСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	// Проверяем: нужно ли что-то обновлять:
	Если НЕ Объект.Контрагент = ТекущийКонтрагент Тогда
		
		Если Объект.ПоДаннымОрганизации.Количество() > 0 ИЛИ Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииКонтрагентаЗавершение", ЭтотОбъект);
			Текст = НСтр("ru='При изменении контрагента табличные части будут очищены. Продолжить?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
			
		Иначе
			// Отработку изменения передаем на сервер:
			ПриИзмененииКонтрагентаСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	// Проверяем: нужно ли что-то обновлять:
	Если НЕ Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка Тогда
		
		Если Объект.ПоДаннымОрганизации.Количество() > 0 ИЛИ Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
		
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииДоговораЗавершение", ЭтотОбъект);
			Текст = НСтр("ru='При изменении договора табличные части будут очищены. Продолжить?'");
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
			
		Иначе
			// Отработку изменения передаем на сервер:
			ПриИзмененииДоговораСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаСогласованаПриИзменении(Элемент)
	
	ИзменитьДоступностьПоСогласованиюСверки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокНаНачалоПриИзменении(Элемент)
	
	ПересчитатьОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьПоДоговорамПриИзменении(Элемент)

	ПриИзмененииРазбитьПоДоговорамСервер();

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПолныеНазванияДокументовПриИзменении(Элемент)
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0
		ИЛИ Объект.ПоДаннымКонтрагента.Количество() >0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыводитьПолныеНазванияДокументовЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='При изменении способа вывода названий документов табличные части будут очищены. Продолжить?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Да);
		
	Иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Параметры.Ключ.Пустая() Тогда
		РассчитатьОстаткиИРасхождение();
		ЗапомнитьТекущиеЗначенияРеквизитов();
		УстановитьСостояниеДокумента();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	ИзменитьДоступностьПоСогласованиюСверки(ЭтаФорма);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	КлючеваяОперация = "ЗаполнениеАктаСверкиВзаиморасчетов";
	ВремяНачалаОперации = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	РассчитатьОстаткиИРасхождение();
	ЗапомнитьТекущиеЗначенияРеквизитов();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперацияПроведения = "ПроведениеАктСверкиВзаиморасчетов";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперацияПроведения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗафиксироватьДлительностьКлючевойОперации();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать
