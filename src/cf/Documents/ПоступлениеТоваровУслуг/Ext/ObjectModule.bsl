#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	НомерВходящегоДокумента = "";
	ДатаВходящегоДокумента  = '00010101';

	ЗачетАвансов.Очистить();
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	СчетНаОплатуПоставщика = Документы.СчетНаОплатуПоставщика.ПустаяСсылка();

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		Если ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			ДокументОснование = ДанныеЗаполнения;
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура")
			И ДанныеЗаполнения.Свойство("Основание")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Основание.Метаданные()) Тогда
			ДокументОснование = ДанныеЗаполнения.Основание;
		КонецЕсли;

		Если ДокументОснование <> Неопределено Тогда
			ЗаполнитьПоДокументуОснованию(ДокументОснование);
		Иначе
			СуммаВключаетНДС = Ложь;
		КонецЕсли;
	Иначе
		СуммаВключаетНДС = Ложь;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	ДанныеОТипеСклада      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	
	ЭтоКомиссия = ЗначениеЗаполнено(ДоговорКонтрагента)
		И ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ВозможнаКомиссияПоЗакупке = ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
		И НЕ ЭтоКомиссия
		И ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов");
		
	НеИспользуемыеТабличныеЧасти = Документы.ПоступлениеТоваровУслуг.НеИспользуемыеТабличныеЧасти(
		ВидОперации,
		ЭтоКомиссия,
		ВозможнаКомиссияПоЗакупке);
		
	ОбщегоНазначенияБП.ОчиститьНеиспользуемыеТабличныеЧасти(ЭтотОбъект, НеИспользуемыеТабличныеЧасти);
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата);

	РозницаВПродажныхЦенах = 
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)
		И СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости
		И ДанныеОТипеСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
		И НЕ ЭтоКомиссия;

	Если РозницаВПродажныхЦенах Тогда
		Для Каждого Строка Из Товары Цикл
			Если ДанныеОТипеСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
				Строка.СчетУчета    = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
				Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
			Иначе
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
				Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоКомиссия И ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов") Тогда
		Для Каждого Строка Из Товары Цикл
			Строка.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			Строка.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Строка.СчетРасчетов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата) Тогда
		НДСВключенВСтоимость = Ложь;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	ДоговорУказан = ЗначениеЗаполнено(ДоговорКонтрагента);
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВидДоговора, УчетАгентскогоНДС");
		ЭтоКомиссия       = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		УчетАгентскогоНДС = РеквизитыДоговора.УчетАгентскогоНДС;
	Иначе
		ЭтоКомиссия       = Ложь;
		УчетАгентскогоНДС = Ложь;
	КонецЕсли;
		
	ТребуетсяСчетФактура = НЕ УчетАгентскогоНДС И НЕ ЭтоКомиссия 
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
	
	Если ТребуетсяСчетФактура Тогда 	
		УчетНДСПереопределяемый.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	Иначе
		УчетНДСПереопределяемый.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Истина);
	КонецЕсли;
	
	Документы.КорректировкаПоступления.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		УчетНДСПереопределяемый.СинхронизироватьРеквизитыСчетаФактурыПолученного(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	ДанныеОТипеСклада      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	ЭтоКомиссия = ЗначениеЗаполнено(ДоговорКонтрагента)
		И ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ВозможнаКомиссияПоЗакупке = ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
		И НЕ ЭтоКомиссия
		И ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов");
		
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);
	
	ПроверятьСчетНДС = НЕ НДСВключенВСтоимость ИЛИ РаздельныйУчетНДСНаСчете19;
	
	ПоставщикРезидентТаможенногоСоюза = УчетНДС.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	
	Если НЕ ПоставщикРезидентТаможенногоСоюза Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Оборудование.СтранаПроисхождения");	
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтранаПроисхождения");	
	КонецЕсли;
	
	// Не проверяем заполненность табличных частей (включая реквизиты), 
	// которые не используются при определенных видах операции и будут очищены в ПередЗаписью
	НеИспользуемыеТабличныеЧасти = Документы.ПоступлениеТоваровУслуг.НеИспользуемыеТабличныеЧасти(
		ВидОперации, ЭтоКомиссия, ВозможнаКомиссияПоЗакупке);
	
	ОбщегоНазначенияБП.ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(
		ПроверяемыеРеквизиты,
		НеИспользуемыеТабличныеЧасти);
		
	// Документ без данных о поступивших ценностях, соответствующих виду операции,
	// считаем заполненным некорректно.
	
	// Оставим в проверяемых реквизитах только основные табличные части  
	// выбранного вида операции
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
		// Если заполнен любой из "основных" списков, то проверять оставшиеся не следует
		ОсновныеСписки = Новый Массив();
		ОсновныеСписки.Добавить("Товары");
		ОсновныеСписки.Добавить("Услуги");
		ОсновныеСписки.Добавить("АгентскиеУслуги");
		ОсновныеСписки.Добавить("ВозвратнаяТара");
		
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ОсновныеСписки, НеИспользуемыеТабличныеЧасти);
		
		ОбщегоНазначенияБП.ИсключитьИзПроверкиОсновныеТабличныеЧасти(
			ЭтотОбъект, 
			ОсновныеСписки, 
			ПроверяемыеРеквизиты);
		
	КонецЕсли;
	
	// Установка значений переменных для дальнейшей проверки
	
	Счет4112 = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
	РазделятьПоСтавкамНДС = Счет4112.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС,
		"ВидСубконто") <> Неопределено;
	
	УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	ОптовыйСклад = ДанныеОТипеСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	СкладНТТ = ДанныеОТипеСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	
	РозницаВПродажныхЦенах = УчетВПродажныхЦенах
		И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары)
		И НЕ ОптовыйСклад
		И НЕ ЭтоКомиссия;
	
	НТТ = РозницаВПродажныхЦенах И СкладНТТ;
	
	// Проверка реквизитов шапки документа
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
		// Объекты строительства не приходуются на склад
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	Если Товары.Количество() = 0 И ВозвратнаяТара.Количество() = 0 И Оборудование.Количество() = 0 Тогда
		// Нет материальных ценностей - нечего приходовать на склад
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность",
				НСтр("ru = 'Договор'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Табличная часть "Оборудование".
	Если НЕ ПроверятьСчетНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Оборудование.СтавкаНДС");
	КонецЕсли;
	
	// Для других видов операций эта табличная часть не видна, а значит проверять её не надо.
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		
		Для каждого СтрокаТаблицы Из Оборудование Цикл
			
			Префикс = "Оборудование[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			
			ИмяСписка = НСтр("ru = 'Оборудование'");
			
			// Проверка номера ГТД.
			Если УчетТоваров.НеУказанаСтранаПроисхождения(СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Страна происхождения'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "СтранаПроисхождения";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Табличная часть "Объекты строительства".
	
	Если НЕ ПроверятьСчетНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОбъектыСтроительства.СтавкаНДС");
	КонецЕсли;
	
	// Табличная часть "Товары".
	Если НЕ ПроверятьСчетНДС
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	КонецЕсли;
	
	Если НТТ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаВРознице");
	КонецЕсли;
	
	
	Если НЕ НТТ ИЛИ НЕ РазделятьПоСтавкамНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДоговорКонтрагента");
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
		
		Для каждого СтрокаТаблицы Из Товары Цикл
			Префикс = "Товары[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			
			ИмяСписка = НСтр("ru = 'Товары'");
			
			// Проверка номера ГТД.
			Если УчетТоваров.НеУказанаСтранаПроисхождения(СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Страна происхождения'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "СтранаПроисхождения";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
			// Проверка договора и счета расчетов с комитентом
			Если ВозможнаКомиссияПоЗакупке И ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Договор с комитентом'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка);
					Поле = Префикс + "ДоговорКонтрагента";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Табличная часть "Услуги"
	ПроверятьСтавкуНДС = (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства)
		И НЕ ЭтоКомиссия
		И (НЕ НДСВключенВСтоимость ИЛИ РаздельныйУчетНДСНаСчете19)
		И НЕ РозницаВПродажныхЦенах;
	
	Если НЕ ПроверятьСтавкуНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	// Табличная часть "Зачет авансов"
	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	ИначеЕсли ЗачетАвансов.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки с документом аванса!'");
		Поле = "ПорядокУчетаРасчетов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , Поле, Отказ);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	РеквизитыЗаСсылками = Документы.ПоступлениеТоваровУслуг.РеквизитыЗаСсылками(ВидОперации);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками);
	
	ПроверкаЗаполненияДокументов.ПроверитьРеквизитыЗаСсылками(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроверитьКорректностьЗаполненияТабличнойЧастиТовары(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ПоступлениеТоваровУслуг.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ (АНАЛИЗ ОСТАТКОВ И Т.П.)

	// Таблица взаиморасчетов
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
		ПараметрыПроведения.ТаблицаЗачетАвансов, ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);

	// Таблицы документа с корректировкой сумм по курсу авансов
	СтруктураТаблицДокумента = УчетДоходовРасходов.ПодготовитьТаблицыПоступленияПоКурсуАвансов(ПараметрыПроведения.СтруктураТаблицДокумента,
		ТаблицаВзаиморасчеты, ПараметрыПроведения.ЗачетАвансовРеквизиты);
		
	ТаблицыНДС = Документы.ПоступлениеТоваровУслуг.ПодготовитьТаблицыНДС(СтруктураТаблицДокумента);
	
	// Товары и услуги, закупленные для комитентов
	ТаблицаТоварыУслугиКомиссияПоЗакупке = Документы.ПоступлениеТоваровУслуг.ПодготовитьТаблицуТоварыУслугиКомиссияПоЗакупке(
		СтруктураТаблицДокумента.ТаблицаТоварыУслугиКомиссияПоЗакупке, ПараметрыПроведения.ЗачетАвансовКомиссияПоЗакупкеРеквизиты);

	// Взаиморасчеты с комитентами по договорам комиссии на закупку
	ТаблицаЗачетАвансовКомиссияПоЗакупке = Документы.ПоступлениеТоваровУслуг.ПодготовитьТаблицуЗачетАвансовКомиссияПоЗакупке(
		ТаблицаТоварыУслугиКомиссияПоЗакупке);
	ТаблицаВзаиморасчетыКомиссияПоЗакупке = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ТаблицаЗачетАвансовКомиссияПоЗакупке, Неопределено, ПараметрыПроведения.ЗачетАвансовКомиссияПоЗакупкеРеквизиты, Отказ);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчеты);
	
	// Учет доходов и расходов ИП
	ТаблицаТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ИПТаблицаТоваров,
		ПараметрыПроведения.ИПРеквизиты);
		
	ТаблицаУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ИПТаблицаУслуг,
		ПараметрыПроведения.ИПРеквизиты);
		
	ТаблицаОборудованияИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ИПТаблицаОборудования,
		ПараметрыПроведения.ИПРеквизиты);
		
	СтруктураТаблицМПЗ = Новый Структура("ТаблицаТоваров, ТаблицаУслуг, ТаблицаОборудования",
		ТаблицаТоваровИП, ТаблицаУслугИП, ТаблицаОборудованияИП);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	// Зачет аванса
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);

	// Поступление товаров
	УчетТоваров.СформироватьДвиженияПоступлениеТоваров(СтруктураТаблицДокумента.ТаблицаТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетТоваров.СформироватьДвиженияНачислениеТорговойНаценкиПоступлениеТоваров(СтруктураТаблицДокумента.ТаблицаТовары,
		ПараметрыПроведения.ПоступлениеТоваровТорговаяНаценкаРеквизиты, Движения, Отказ);

	// Поступление оборудования
	УчетОС.СформироватьДвиженияПоступлениеОборудования(СтруктураТаблицДокумента.ТаблицаОборудование,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Поступление объектов строительства
	УчетОС.СформироватьДвиженияПоступлениеОбъектовСтроительства(СтруктураТаблицДокумента.ТаблицаОбъектыСтроительства,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Поступление услуг
	УчетДоходовРасходов.СформироватьДвиженияПоступлениеУслуг(СтруктураТаблицДокумента.ТаблицаУслуги,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Поступление тары
	УчетТоваров.СформироватьДвиженияПоступлениеТары(ПараметрыПроведения.ТаблицаТара,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Поступление товаров на комиссию
	УчетТоваров.СформироватьДвиженияПоступлениеТоваровНаКомиссию(ПараметрыПроведения.ПоступлениеТоваровНаКомиссиюТаблицаТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Поступление в переработку
	УчетТоваров.СформироватьДвиженияПоступлениеМатериаловВПереработку(ПараметрыПроведения.ПоступлениеТоваровВПереработкуТаблицаТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Поступление закупленных товаров и услуг комитентов
	УчетТоваров.СформироватьДвиженияПоступлениеЗакупленныхТоваровУслугКомитентов(
		ТаблицаТоварыУслугиКомиссияПоЗакупке, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Задолженность комитентов по закупленных для них товарам и услугам
	УчетВзаиморасчетов.СформироватьДвиженияПоступлениеЗакупленныхТоваровУслугКомитентов(
		ТаблицаТоварыУслугиКомиссияПоЗакупке, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Зачет аванса комитентов 
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчетыКомиссияПоЗакупке, ПараметрыПроведения.ЗачетАвансовКомиссияПоЗакупкеРеквизиты, Движения, Отказ);
		
	//Движения регистра "Рублевые суммы документов в валюте"
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(СтруктураТаблицДокумента.ТаблицаТовары, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(СтруктураТаблицДокумента.ТаблицаОборудование, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(СтруктураТаблицДокумента.ТаблицаОбъектыСтроительства, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(СтруктураТаблицДокумента.ТаблицаУслуги, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеБезНДС(ПараметрыПроведения.ТаблицаТара, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ПараметрыПроведения.ПоступлениеТоваровНаКомиссиюТаблицаТовары, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеБезНДС(ПараметрыПроведения.ПоступлениеТоваровВПереработкуТаблицаТовары, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаТоварыУслугиКомиссияПоЗакупке, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Учет НДС
	УчетНДС.СформироватьДвиженияПоступлениеТоваровУслугОтПоставщика(
		ТаблицыНДС.Товары, ТаблицыНДС.Услуги, ПараметрыПроведения.НомераГТД,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСРаздельный.СформироватьДвиженияПоступлениеТоваровУслугОтПоставщика(
		ТаблицыНДС.Товары, ТаблицыНДС.Услуги, ПараметрыПроведения.Реквизиты,
		Движения, Отказ);
		
	// УСН
	СуммаСторноРасхода = 0;
	УчетУСН.ПоступлениеРасходовУСН(ПараметрыПроведения.УСНТаблицаРасходов,
		ПараметрыПроведения.УСНРеквизиты, СуммаСторноРасхода, Движения, Отказ);

	Если НЕ Отказ И Движения.РасходыПриУСН.Количество() > 0 Тогда
		Движения.РасходыПриУСН.Записать(Истина);
		Движения.РасходыПриУСН.Записывать = Ложь;
	КонецЕсли;

	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(СтруктураТаблицМПЗ,
		ТаблицаВзаиморасчеты, , ПараметрыПроведения.ИПРеквизиты, Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Движения.Записать();
	УчетНДСПереопределяемый.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураПолученный", Истина, Отказ,
		ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	УчетНДСПереопределяемый.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураПолученный", Ложь, Отказ);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СкопироватьТовары(Основание)

	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаТовары.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПоставщикаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуПоставщикаТовары.Номенклатура.НомерГТД КАК НомерГТД,
	|	СчетНаОплатуПоставщикаТовары.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СчетНаОплатуПоставщикаТовары.Цена,
	|	СчетНаОплатуПоставщикаТовары.Сумма,
	|	СчетНаОплатуПоставщикаТовары.СтавкаНДС,
	|	СчетНаОплатуПоставщикаТовары.СуммаНДС,
	|	СчетНаОплатуПоставщикаТовары.Количество
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	|ГДЕ
	|	СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	|	И НЕ ЕСТЬNULL(СчетНаОплатуПоставщикаТовары.Номенклатура.Услуга, ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ЭтоКомиссия = ЗначениеЗаполнено(ДоговорКонтрагента) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
	ЗначениеЗаполненияОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(
				ВидОперации, ЭтоКомиссия);

	ОснованиеСуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВключаетНДС");

	Для Каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.Коэффициент	 	 = 1;
		СтрокаТЧ.ОтражениеВУСН = ЗначениеЗаполненияОтражениеВУСН;
		Если ОснованиеСуммаВключаетНДС <> СуммаВключаетНДС Тогда
			СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
			СтрокаТЧ.Цена = ?(СтрокаТЧ.Количество = 0, 0, СтрокаТЧ.Сумма/СтрокаТЧ.Количество);
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, СуммаВключаетНДС);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьВозвратнуюТару(Основание)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаВозвратнаяТара.НомерСтроки,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Количество,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Сумма,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Цена
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуПоставщикаВозвратнаяТара
	|ГДЕ
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Ссылка = &Ссылка";
	ВозвратнаяТара.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура СкопироватьУслуги(Основание)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаУслуги.НомерСтроки,
	|	СчетНаОплатуПоставщикаУслуги.Содержание,
	|	СчетНаОплатуПоставщикаУслуги.Количество,
	|	СчетНаОплатуПоставщикаУслуги.Цена,
	|	СчетНаОплатуПоставщикаУслуги.Сумма,
	|	СчетНаОплатуПоставщикаУслуги.СтавкаНДС,
	|	СчетНаОплатуПоставщикаУслуги.СуммаНДС,
	|	СчетНаОплатуПоставщикаУслуги.Номенклатура
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаУслуги
	|ГДЕ
	|	СчетНаОплатуПоставщикаУслуги.Ссылка = &Ссылка
	|	И ЕСТЬNULL(СчетНаОплатуПоставщикаУслуги.Номенклатура.Услуга, ИСТИНА)";
	Услуги.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ЭтоКомиссия = ЗначениеЗаполнено(ДоговорКонтрагента) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ЗначениеЗаполненияОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(
				ВидОперации, ЭтоКомиссия);

	Если НЕ Основание.СуммаВключаетНДС = СуммаВключаетНДС Тогда
		Для Каждого СтрокаТЧ Из Услуги Цикл
			СтрокаТЧ.ОтражениеВУСН = ЗначениеЗаполненияОтражениеВУСН;
			СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
			СтрокаТЧ.Цена = ?(СтрокаТЧ.Количество = 0, 0, СтрокаТЧ.Сумма/СтрокаТЧ.Количество);
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, СуммаВключаетНДС);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоСчету(ИмяТабЧасти, Счет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТабЧасти];
	
	Если ТабличнаяЧасть.Количество() > 0 Тогда
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Если ИмяТабЧасти = "Товары" Тогда
		СкопироватьТовары(Счет);
	ИначеЕсли ИмяТабЧасти = "ВозвратнаяТара" Тогда
		СкопироватьВозвратнуюТару(Счет);
	ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
		СкопироватьУслуги(Счет);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(ТабличнаяЧасть, ИмяТабЧасти, ЭтотОбъект, Документы.ПоступлениеТоваровУслуг);
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Доверенность") Тогда
		
		// Склад сразу заполняется значением по умолчанию, т.к. в доверенности его нет,
		// а от склада зависит, какие счета учета будут подставлены в табличную часть.
		Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		ВидОперации = Документы.ПоступлениеТоваровУслуг.ОпределитьВидОперацииПоДокументуОснованию(Основание);
		
		// Тип цен и валюту берем по умолчанию из договора, т.к. в доверенности нет таких реквизитов,
		// курс и кратность взаиморасчетов будут подставлены по валюте договора в ЗаполнитьПоОснованию().
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов, ТипЦен");
			ВалютаДокумента   = РеквизитыДоговора.ВалютаВзаиморасчетов;
			ТипЦен            = РеквизитыДоговора.ТипЦен;
		КонецЕсли;
		
		// Флаги включения налогов.
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС = Ложь;
		Иначе
			СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
		КонецЕсли;
		
		ЗаполнитьТоварыПоДоверенности(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		СчетНаОплатуПоставщика = Основание;
		ВидОперации = Документы.ПоступлениеТоваровУслуг.ОпределитьВидОперацииПоДокументуОснованию(Основание);
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание, Истина); // Копировать подразделение = Истина
		
		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		СкопироватьТовары(Основание);
		СкопироватьВозвратнуюТару(Основание);
		СкопироватьУслуги(Основание);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоДоверенности(Основание)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(ВложенныйЗапрос.СовпадаетЕдиницаИзмерения) КАК СовпадаетЕдиницаИзмерения
	|ИЗ
	|	(ВЫБРАТЬ
	|		СпрНоменклатура.Ссылка КАК Номенклатура,
	|		ДоверенностьТовары.Количество КАК Количество,
	|		ДоверенностьТовары.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ДоверенностьТовары.ЕдиницаПоКлассификатору = СпрНоменклатура.ЕдиницаИзмерения
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СовпадаетЕдиницаИзмерения
	|	ИЗ
	|		Документ.Доверенность.Товары КАК ДоверенностьТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО ДоверенностьТовары.ЕдиницаПоКлассификатору = СпрНоменклатура.ЕдиницаИзмерения
	|				И ((ВЫРАЗИТЬ(ДоверенностьТовары.НаименованиеТовара КАК СТРОКА(1000))) = (ВЫРАЗИТЬ(СпрНоменклатура.НаименованиеПолное КАК СТРОКА(1000))))
	|	ГДЕ
	|		ДоверенностьТовары.Ссылка = &Основание
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		СпрНоменклатура.Ссылка,
	|		ДоверенностьТовары.Количество,
	|		ДоверенностьТовары.НомерСтроки,
	|		ВЫБОР
	|			КОГДА ДоверенностьТовары.ЕдиницаПоКлассификатору = СпрНоменклатура.ЕдиницаИзмерения
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	ИЗ
	|		Документ.Доверенность.Товары КАК ДоверенностьТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО ((ВЫРАЗИТЬ(ДоверенностьТовары.НаименованиеТовара КАК СТРОКА(1000))) = (ВЫРАЗИТЬ(СпрНоменклатура.НаименованиеПолное КАК СТРОКА(1000))))
	|	ГДЕ
	|		ДоверенностьТовары.Ссылка = &Основание) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|ЭтоКомиссия");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	
	ДанныеОбъекта.ЭтоКомиссия = ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
		И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата) Тогда
		Если ДанныеОбъекта.ЭтоКомиссия Тогда
			ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
		ИначеЕсли ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеОбъекта.ЭтоКомиссия Тогда
		СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	КонецЕсли;
	
	Для каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура	= СтрокаТоваров.Номенклатура;
		СтрокаТабличнойЧасти.Количество	= СтрокаТоваров.Количество;
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
		СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
		СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
		СтрокаТабличнойЧасти.ОтражениеВУСН			= ОтражениеВУСН;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
		
КонецЦикла;

КонецПроцедуры

Процедура ПроверитьКорректностьЗаполненияТабличнойЧастиТовары(Отказ)

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	УчетВПродажныхЦенах =
		УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;

	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	ДанныеСклада      = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ТипСклада, ТипЦенРозничнойТорговли");

	Если ДанныеСклада.ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад И УчетВПродажныхЦенах
		И (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары)
		И ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		РозницаВПродажныхЦенах = Истина;
	Иначе
		РозницаВПродажныхЦенах = Ложь;
	КонецЕсли;

	АТТ = (РозницаВПродажныхЦенах И ДанныеСклада.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин);

	Если АТТ Тогда
		// Установим параметры запроса
		ПорядокСубконто = Новый Массив();
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

		МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Склад",                          Склад);
		Запрос.УстановитьПараметр("КонецПериода",                   Дата);
		Запрос.УстановитьПараметр("Организация",                    Организация);
		Запрос.УстановитьПараметр("Подразделение",                  ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("ПорядокСубконто",                ПорядокСубконто);
		Запрос.УстановитьПараметр("Номенклатура",                   МассивНоменклатуры);
		Запрос.УстановитьПараметр("Дата",                           Дата);
		Запрос.УстановитьПараметр("СкладТипЦен",                    ДанныеСклада.ТипЦенРозничнойТорговли);
		Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
		Запрос.УстановитьПараметр("СчетАТТ",						ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);

		Запрос.Текст = "
		|// Курсы валют (временная таблица)
		|ВЫБРАТЬ
		|	КурсыВалют.Валюта,
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность
		|ПОМЕСТИТЬ ВТ_КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(
		|		&КонецПериода,
		|	) КАК КурсыВалют
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|// Запрос к ценам номенклатуры (временная таблица)
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.Номенклатура,
		|	ЦеныНоменклатуры.Цена,
		|	ВЫБОР
		|		КОГДА (ВТ_КурсыВалют.Валюта ЕСТЬ NULL) ИЛИ (ВТ_КурсыВалют.Валюта = &ВалютаРегламентированногоУчета) ТОГДА
		|			ЦеныНоменклатуры.Цена
		|		КОГДА НЕ ВТ_КурсыВалют.Валюта ЕСТЬ NULL И ВТ_КурсыВалют.Кратность = 0 ТОГДА
		|			ЦеныНоменклатуры.Цена * ВТ_КурсыВалют.Курс
		|		ИНАЧЕ
		|			ЦеныНоменклатуры.Цена * ВТ_КурсыВалют.Курс * ВТ_КурсыВалют.Кратность
		|	КОНЕЦ КАК ЦенаВВалютеРегламентированногоУчета,
		|	ЦеныНоменклатуры.Валюта
		|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|		&КонецПериода,
		|		Номенклатура В (&Номенклатура) И (ТипЦен = &СкладТипЦен)
		|	) КАК ЦеныНоменклатуры
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_КурсыВалют
		|	ПО
		|		ЦеныНоменклатуры.Валюта = ВТ_КурсыВалют.Валюта
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|// Запрос к ценам номенклатуры
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.Номенклатура,
		|	ЦеныНоменклатуры.Цена,
		|	ВЫБОР
		|		КОГДА (ВТ_КурсыВалют.Валюта ЕСТЬ NULL) ИЛИ (ВТ_КурсыВалют.Валюта = &ВалютаРегламентированногоУчета) ТОГДА
		|			ЦеныНоменклатуры.Цена
		|		КОГДА НЕ ВТ_КурсыВалют.Валюта ЕСТЬ NULL И ВТ_КурсыВалют.Кратность = 0 ТОГДА
		|			ЦеныНоменклатуры.Цена * ВТ_КурсыВалют.Курс
		|		ИНАЧЕ
		|			ЦеныНоменклатуры.Цена * ВТ_КурсыВалют.Курс * ВТ_КурсыВалют.Кратность
		|	КОНЕЦ КАК ЦенаВВалютеРегламентированногоУчета,
		|	ЦеныНоменклатуры.Валюта
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|		&КонецПериода,
		|		Номенклатура В (&Номенклатура) И (ТипЦен = &СкладТипЦен)
		|	) КАК ЦеныНоменклатуры
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_КурсыВалют
		|	ПО
		|		ЦеныНоменклатуры.Валюта = ВТ_КурсыВалют.Валюта
		|;
		|
		|// Основной запрос
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Остатки.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Остатки.КоличествоОстатокДт <> 0
		|			ТОГДА ВЫРАЗИТЬ(Остатки.СуммаОстатокДт / Остатки.КоличествоОстатокДт КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК УчетнаяЦена,
		|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры.ЦенаВВалютеРегламентированногоУчета, 0) КАК ЦенаВВалютеРегламентированногоУчета,
		|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &СчетАТТ,
		|		&ПорядокСубконто, Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL) И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_ЦеныНоменклатуры
		|	ПО
		|		ВЫРАЗИТЬ(Остатки.Субконто1 КАК Справочник.Номенклатура) = ВТ_ЦеныНоменклатуры.Номенклатура
		|
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0
		|";

		Результат = Запрос.ВыполнитьПакет();
		ТаблицаЦенНоменклатуры = Результат[2].Выгрузить();
		ТаблицаЦенНоменклатуры.Индексы.Добавить("Номенклатура");
		ТаблицаУчетныхЦен      = Результат[3].Выгрузить();
		ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура");

		Для Каждого СтрокаТаблицы Из Товары Цикл
			Префикс = "Товары[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));

			ИмяСписка = НСтр("ru = 'Товары'");

			УчетнаяЦена   = 0;
			РозничнаяЦена = 0;

			СтрокаТаблицыЦен = ТаблицаУчетныхЦен.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
			Если СтрокаТаблицыЦен <> Неопределено Тогда
				УчетнаяЦена = СтрокаТаблицыЦен.УчетнаяЦена;
			Иначе
				УчетнаяЦена = 0;
			КонецЕсли;
			СтрокаТаблицыРозничныхЦен = ТаблицаЦенНоменклатуры.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
			Если СтрокаТаблицыРозничныхЦен = Неопределено Тогда
				РозничнаяЦена = 0;
			Иначе
				РозничнаяЦена = СтрокаТаблицыРозничныхЦен.ЦенаВВалютеРегламентированногоУчета;
			КонецЕсли;

			//Допустимое отклонение цены составляет цену минимальной единицы количества (0.001)
			ДопустимоеОтклонение = УчетнаяЦена * 0.001;

			Если РозничнаяЦена = 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Розничная цена товара ""%1"" из строки %2 списка ""%3"" не установлена.
					|Установите цену документом ""Установка цен номенклатуры"".'"),
					СтрокаТаблицы.Номенклатура, СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "Номенклатура";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			ИначеЕсли УчетнаяЦена = 0 Тогда
				// Учетная цена неизвестна.
			ИначеЕсли РозничнаяЦена - УчетнаяЦена > ДопустимоеОтклонение
				ИЛИ РозничнаяЦена - УчетнаяЦена < - ДопустимоеОтклонение Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Розничная цена товара ""%1"" из строки %2 списка ""%3"" (%4) не равна учетной цене (%5).
					|Измените цену документом ""Установка цен номенклатуры"" или проведите переоценку документом ""Переоценка товаров в рознице"".'"),
					СтрокаТаблицы.Номенклатура, СтрокаТаблицы.НомерСтроки, ИмяСписка, РозничнаяЦена, УчетнаяЦена);
				Поле = Префикс + "Номенклатура";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецЕсли