////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним реквизиты формы из параметров.
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,
		"Дата, Организация, ПодразделениеЗатрат, Номенклатура,
		|СчетУчетаНДС, СуммаНДС, НДСВключенВСтоимость, УчетАгентскогоНДС,
		|СчетЗатрат, Субконто1, Субконто2, Субконто3,
		|СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3,
		|ОтражениеВУСН,СпособУчетаНДС,
		|Контрагент, ДоговорКонтрагента
		|");

	НаименованиеНоменклатуры = "";
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		НаименованиеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Наименование");
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Счета учета: %1'"),
		НаименованиеНоменклатуры);

	УстановитьФункциональныеОпцииФормы();
	
	Элементы.ГруппаСчетУчетаНДС.Видимость   = РаздельныйУчетНДСНаСчете19 ИЛИ НЕ НДСВключенВСтоимость ИЛИ УчетАгентскогоНДС;
	Элементы.ГруппаСпособУчетаНДС.Видимость = РаздельныйУчетНДСНаСчете19;
	
	Элементы.ГруппаСчетаНУ.Видимость    = ПлательщикНалогаНаПрибыль;
	Элементы.НадписьРасходыНУ.Видимость = ПрименяетсяУСНДоходыМинусРасходы;
	
	СчетЗатратОбработатьИзменение(ЭтаФорма);
	СчетЗатратНУОбработатьИзменение(ЭтаФорма);
	
	УстановитьУсловноеОформление();
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, ЭтаФорма.Элементы.ИнформационныеСсылки);
	
	НадписьПодразделениеЗатрат = НСтр("ru = 'Подразделение затрат:'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность И НЕ ПеренестиВДокумент Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	КонецЕсли;

	Если ПеренестиВДокумент И НЕ Отказ Тогда
		Отказ = НЕ ПроверитьЗаполнениеНаКлиенте();
	КонецЕсли;

	Если Отказ Тогда
		ПеренестиВДокумент = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	Если ПеренестиВДокумент Тогда
		СтруктураРезультат = Новый Структура();
		СтруктураРезультат.Вставить("СчетЗатрат",          СчетЗатрат);
		СтруктураРезультат.Вставить("ПодразделениеЗатрат", ПодразделениеЗатрат);
		СтруктураРезультат.Вставить("Субконто1", Субконто1);
		СтруктураРезультат.Вставить("Субконто2", Субконто2);
		СтруктураРезультат.Вставить("Субконто3", Субконто3);
		
		СтруктураРезультат.Вставить("СчетУчетаНДС",   СчетУчетаНДС);
		СтруктураРезультат.Вставить("СпособУчетаНДС", СпособУчетаНДС);
		
		СтруктураРезультат.Вставить("СчетЗатратНУ", СчетЗатратНУ);
		СтруктураРезультат.Вставить("СубконтоНУ1",  СубконтоНУ1);
		СтруктураРезультат.Вставить("СубконтоНУ2",  СубконтоНУ2);
		СтруктураРезультат.Вставить("СубконтоНУ3",  СубконтоНУ3);
		СтруктураРезультат.Вставить("СубконтоНУ3",  СубконтоНУ3);
		
		СтруктураРезультат.Вставить("ОтражениеВУСН",ОтражениеВУСН);
		 
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, ЭтаФорма);
		ОповеститьОВыборе(СтруктураРезультат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ФормаРедактированияСтроки_Закрыть" И Источник = ВладелецФормы Тогда
		// Сообщение от основной формы документа при нажатии там Esc.
		// Сбрасываем флаг модифицированности и закрываем форму редактирования строки без вопросов.
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	СчетЗатратНУ = СчетЗатрат;

	СчетЗатратОбработатьИзменение(ЭтаФорма);
	СчетЗатратНУОбработатьИзменение(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Субконто1ПриИзменении(Элемент)
	
	СубконтоПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура Субконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "", 1, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Субконто2ПриИзменении(Элемент)

	СубконтоПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура Субконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "", 2, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Субконто3ПриИзменении(Элемент)
	
	СубконтоПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура Субконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "", 3, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратНУПриИзменении(Элемент)
	
	СчетЗатратНУОбработатьИзменение(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ1ПриИзменении(Элемент)
	
	СубконтоНУПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СубконтоНачалоВыбора(Элемент, "НУ", 1, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ2ПриИзменении(Элемент)
	
	СубконтоНУПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "НУ", 2, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ3ПриИзменении(Элемент)
	
	СубконтоНУПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, "НУ", 3, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтаФорма, Организация, Дата);
	
	ПлательщикНалогаНаПрибыль        = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата);
	РаздельныйУчетНДСНаСчете19       = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);

КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()

	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет затрат'"));
		Поле = "СчетЗатрат";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
	КонецЕсли;
	
	Если РаздельныйУчетНДСНаСчете19 ИЛИ НЕ (НДСВключенВСтоимость И НЕ УчетАгентскогоНДС) Тогда
		Если СуммаНДС = 0  Тогда
			// Счет учета НДС необязательный
		Иначе
			Если НЕ ЗначениеЗаполнено(СчетУчетаНДС) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет учета НДС'"));
				Поле = "СчетУчетаНДС";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПрименяетсяУСНДоходыМинусРасходы Тогда

		Если НЕ ЗначениеЗаполнено(ОтражениеВУСН) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Расходы (НУ)'"));
			Поле = "ОтражениеВУСН";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;

	КонецЕсли;
	
	Если РаздельныйУчетНДСНаСчете19 Тогда
		
		Если НЕ ЗначениеЗаполнено(СпособУчетаНДС) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Способ учета НДС'"));
			Поле = "СпособУчетаНДС";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не Отказ;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СчетЗатратОбработатьИзменение(Форма)

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	ПоляОбъекта.Вставить("Подразделение", "ПодразделениеЗатрат");
	ПоляОбъекта.Вставить("Организация"  , Форма.Организация);
	
	ЗаголовкиПолей = Новый Структура;
	ЗаголовкиПолей.Вставить("Субконто1", "ЗаголовокСубконто1");
	ЗаголовкиПолей.Вставить("Субконто2", "ЗаголовокСубконто2");
	ЗаголовкиПолей.Вставить("Субконто3", "ЗаголовокСубконто3");
	
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"), 
								ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты"));
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"), 
								ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
								БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Форма.СчетЗатрат, Форма, ПоляОбъекта, ЗаголовкиПолей, Ложь);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Форма.СчетЗатрат, Форма, ПоляОбъекта, Ложь, ЗначенияСубконто);
	
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, "Субконто%Индекс%", "СчетЗатрат");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма, "Субконто%Индекс%", "Субконто%Индекс%", ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СчетЗатратНУОбработатьИзменение(Форма)

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
	ПоляОбъекта.Вставить("Подразделение", "ПодразделениеЗатрат");
	ПоляОбъекта.Вставить("Организация"  , Форма.Организация);
	ПоляОбъекта.Вставить("ДоступностьПодразделения", Форма.Элементы.ПодразделениеЗатрат.Доступность);

	ЗаголовкиПолей = Новый Структура;
	ЗаголовкиПолей.Вставить("Субконто1", "ЗаголовокСубконтоНУ1");
	ЗаголовкиПолей.Вставить("Субконто2", "ЗаголовокСубконтоНУ2");
	ЗаголовкиПолей.Вставить("Субконто3", "ЗаголовокСубконтоНУ3");
	
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"), 
								ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты"));
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"), 
								ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
								БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Форма.СчетЗатратНУ, Форма, ПоляОбъекта, ЗаголовкиПолей, Ложь);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Форма.СчетЗатратНУ, Форма, ПоляОбъекта, Ложь, ЗначенияСубконто);

	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, "СубконтоНУ%Индекс%", "СчетЗатратНУ");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, Форма, "СубконтоНУ%Индекс%", "СубконтоНУ%Индекс%", ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ВидУчета = "", НомерСубконто, СтандартнаяОбработка)
	
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, "Субконто" + ВидУчета + "%Индекс%", "СчетЗатрат" + ВидУчета);
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ЗначениеПоля = Форма[ИмяПоля];
		
		Если ТипЗнч(ЗначениеПоля) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЗначениеПоля);
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеПоля);
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ЗначениеПоля);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация", Форма.Организация);
	СписокПараметров.Вставить("СчетУчета",   Форма[ИмяПоляСчетУчета]);
	
	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура СубконтоПриИзменении()

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, "Субконто%Индекс%", "СчетЗатрат");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ЭтаФорма, "Субконто%Индекс%", "Субконто%Индекс%", ПараметрыДокумента);
	
	Если ПлательщикНалогаНаПрибыль Тогда
		
		ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, "СубконтоНУ%Индекс%", "СчетЗатратНУ");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ЭтаФорма, "СубконтоНУ%Индекс%", "СубконтоНУ%Индекс%", ПараметрыДокумента);
		
		Если ЗначениеЗаполнено(СчетЗатрат)
			И ЗначениеЗаполнено(СчетЗатратНУ) Тогда
			
			ДанныеСчетаБУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатрат);
			ДанныеСчетаНУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатратНУ);
			
			Для ИндексБУ = 1 По 3 Цикл
				Для ИндексНУ = 1 По 3 Цикл
					Если ДанныеСчетаБУ["ВидСубконто" + ИндексБУ + "ТипЗначения"] = ДанныеСчетаНУ["ВидСубконто" + ИндексНУ + "ТипЗначения"] Тогда
						ЭтаФорма["СубконтоНУ" + ИндексНУ] = ЭтаФорма["Субконто" + ИндексБУ];
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУПриИзменении()

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, "СубконтоНУ%Индекс%", "СчетЗатратНУ");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ЭтаФорма, "СубконтоНУ%Индекс%", "СубконтоНУ%Индекс%", ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Модифицированность = Ложь;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


