&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция УстановитьПризнакДопЛистаВСтроке(Знач СчетФактура, Знач Дата)
	
	ПараметрыУстановкиДопЛиста = Новый Структура;
		
	Если ЗначениеЗаполнено(СчетФактура) Тогда 
		
		НачалоНалоговогоПериода = НачалоКвартала(Дата);
		
		КорректируемыйПериод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура , "Дата");
		
		СтруктураПризнакДопЛиста = Новый Структура;
		Если (НачалоНалоговогоПериода > НачалоМесяца(КорректируемыйПериод)) Тогда
			ПараметрыУстановкиДопЛиста.Вставить("ЗаписьДополнительногоЛиста", Истина);
			ПараметрыУстановкиДопЛиста.Вставить("КорректируемыйПериод", КорректируемыйПериод);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыУстановкиДопЛиста;
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакДопЛистаДляСтрокДокумента()
	
	НачалоНалоговогоПериода = НачалоКвартала(Объект.Дата);
	
	Для Каждого ТекСтрока Из Объект.Состав Цикл
		Если ЗначениеЗаполнено(ТекСтрока.СчетФактура) И ОбщегоНазначения.СсылкаСуществует(ТекСтрока.СчетФактура) Тогда
			КорректируемыйПериод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.СчетФактура , "Дата");
		Иначе
			КорректируемыйПериод = Объект.Дата;
		КонецЕсли;
		Если (НачалоНалоговогоПериода > НачалоМесяца(КорректируемыйПериод)) Тогда
			ТекСтрока.ЗаписьДополнительногоЛиста = Истина;
			ТекСтрока.КорректируемыйПериод = КорректируемыйПериод;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СнятьПризнакДопЛистаДляСтрокДокумента()
	
	Для Каждого ТекСтрока Из Объект.Состав Цикл
		Если ТекСтрока.ЗаписьДополнительногоЛиста Тогда
			ТекСтрока.ЗаписьДополнительногоЛиста = Ложь;
			ТекСтрока.КорректируемыйПериод = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура СнятьПризнакСчетФактураОтсутствуетДляСтрокДокумента()
	
	Для Каждого ТекСтрока Из Объект.Состав Цикл
		Если ТекСтрока.НетДанныхОСчетеФактуре Тогда
			ТекСтрока.НетДанныхОСчетеФактуре = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитыПриОтраженииВКнигеПокупок(УстановитьПризнакДопЛиста)
	
	Если УстановитьПризнакДопЛиста Тогда
		УстановитьПризнакДопЛистаДляСтрокДокумента();
	КонецЕсли;
	
	СнятьПризнакСчетФактураОтсутствуетДляСтрокДокумента();
	Объект.СписатьВосстановленныйНДСНаЗатраты = Ложь;
		
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуСостав()
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	Если РаздельныйУчетНДСНаСчете19 Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);	
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Проведен, ОтразитьВКнигеПродаж");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	Если ПараметрыОбъекта.Проведен Тогда 
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	Объект.Состав.Очистить();//Перед заполнением ТЧ очищается
	ТаблицаВосстановления = Объект.Состав.Выгрузить();
	ТаблицаВосстановления.Очистить();

	ПараметрыОбъекта.Вставить("ТаблицаВосстановления", ТаблицаВосстановления);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Документы.ВосстановлениеНДС.ПодготовитьДанныеДляЗаполнения(ПараметрыОбъекта, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Документы.ВосстановлениеНДС.ПодготовитьДанныеДляЗаполнения",
			ПараметрыОбъекта,
			НСтр("ru = 'Заполнение документа ""Восстановление НДС""'"));

		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;

	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыИзПараметровФормы(Форма)
	
	ПараметрыЗаполненияФормы = Неопределено;
	
	Если Форма.Параметры.Свойство("ПараметрыЗаполненияФормы",ПараметрыЗаполненияФормы) Тогда
	
		ЗаполнитьЗначенияСвойств(Форма.Объект,ПараметрыЗаполненияФормы);			
	
	КонецЕсли; 		

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, "СубконтоСписанияНДС%Индекс%"); 
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		ЭтаФорма,
		Объект,
		"СубконтоСписанияНДС%Индекс%",
		"СубконтоСписанияНДС%Индекс%",
		ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ШаблонИмяПоляОбъекта)
	
	Объект = Форма.Объект;
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3, Подразделение",
		"СубконтоСписанияНДС1",
		"СубконтоСписанияНДС2",
		"СубконтоСписанияНДС3",
		"Подразделение");

	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3, Подразделение",
		"ЗаголовокСубконто1",
		"ЗаголовокСубконто2",
		"ЗаголовокСубконто3",
		"ЗаголовокПодразделение");

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоОстаткамНаСервере() Экспорт
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Проведен");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	Если ПараметрыОбъекта.Проведен Тогда 
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
			
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Документы.ВосстановлениеНДС.ПодготовитьДанныеДляЗаполненияНДСПоОстаткам(ПараметрыОбъекта, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Документы.ВосстановлениеНДС.ПодготовитьДанныеДляЗаполненияНДСПоОстаткам",
			ПараметрыОбъекта,
			НСтр("ru = 'Заполнение документа ""Восстановление НДС"" по остаткам ценностей'"));

		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;

	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВопросЗаполнитьСуммыКВосстановлениюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСуммыКВосстановлению();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьНДСПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоОстаткамНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУстановитьДляСтрокПризнакОтраженияВДопЛистеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИзменитьРеквизитыПриОтраженииВКнигеПокупок(Истина);
	Иначе
		ИзменитьРеквизитыПриОтраженииВКнигеПокупок(Ложь);
	КонецЕсли;
	Элементы.СписатьВосстановленныйНДСНаЗатраты.Доступность = Ложь;
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВопросУстановитьДляСтрокДокументаПризнакОтраженияВОснРазделеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СнятьПризнакДопЛистаДляСтрокДокумента();
	КонецЕсли;
	Элементы.СписатьВосстановленныйНДСНаЗатраты.Доступность = Истина;
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаКлиенте()

	Результат = ЗаполнитьПоОстаткамНаСервере();

	Если НЕ Результат.ЗаданиеВыполнено Тогда
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ФормаДлительнойОперации.Заголовок = НСтр("ru = 'Заполнение документа ""Восстановление НДС""'");
		ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = НСтр("ru = 'Выполняется заполнение документа ""Восстановление НДС"".
																								|Пожалуйста, подождите...'");
		
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммыКВосстановлению()

	Результат = ЗаполнитьТаблицуСостав();

	Если НЕ Результат.ЗаданиеВыполнено Тогда
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ФормаДлительнойОперации.Заголовок = НСтр("ru = 'Заполнение документа ""Восстановление НДС""'");
		ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = НСтр("ru = 'Выполняется заполнение документа ""Восстановление НДС"".
																								|Пожалуйста, подождите...'");
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Состав.Количество() > 0 Тогда
		
		Если Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Перед заполнением проведение документа будет отменено, а табличная часть будет очищена. Заполнить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьСуммыКВосстановлениюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьСуммыКВосстановлению();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНДСПоОстаткамЗапасов(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана организация! Заполнение неозможно.'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Состав.Количество() > 0 Тогда

		Если Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Перед заполнением проведение документа будет отменено, а табличная часть будет очищена. Заполнить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьНДСПоОстаткамЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ЗаполнитьПоОстаткамНаКлиенте();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакиДопЛиста(Команда)
	
	УстановитьПризнакДопЛистаДляСтрокДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПризнакиДопЛиста(Команда)
	
	СнятьПризнакДопЛистаДляСтрокДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ОтразитьВКнигеПродажОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение Тогда
		ТекстВопроса = НСтр("ru='При отражении восстановления НДС в книге продаж рекомендуется 
			|формировать записи в основном разделе книги. 
			|Установить для всех строк документа признак отражения в основном разделе?'"); 
		Оповещение = Новый ОписаниеОповещения("ВопросУстановитьДляСтрокДокументаПризнакОтраженияВОснРазделеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)
	Иначе
		ТекстВопроса = НСтр("ru='При отражении восстановления НДС в книге покупок рекомендуется 
			|формировать записи в дополнительных листах книги. 
			|Установить для строк документа признак отражения в дополнительном листе
			|(при восстановлении записей книги предыдущих налоговых периодов)?'"); 
		Оповещение = Новый ОписаниеОповещения("ВопросУстановитьДляСтрокПризнакОтраженияВДопЛистеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ГруппаСчетСписания.Видимость = Объект.СписатьВосстановленныйНДСНаЗатраты;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ Состав

&НаКлиенте
Процедура СоставСуммаБезНДСПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Состав.ТекущиеДанные;
	ТекСтрока.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.СуммаБезНДС, Ложь ,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтавкаНДСПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Состав.ТекущиеДанные;
	ТекСтрока.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.СуммаБезНДС, Ложь ,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура СоставЗаписьДополнительногоЛистаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Состав.ТекущиеДанные;
	Если ТекСтрока.ЗаписьДополнительногоЛиста 
		И ЗначениеЗаполнено(ТекСтрока.СчетФактура) Тогда
		ПараметрыУстановкиДопЛиста = УстановитьПризнакДопЛистаВСтроке(ТекСтрока.СчетФактура, Объект.Дата);
		ЗаполнитьЗначенияСвойств(ТекСтрока, ПараметрыУстановкиДопЛиста);
	Иначе
		ТекСтрока.ЗаписьДополнительногоЛиста = Ложь;
		ТекСтрока.КорректируемыйПериод       = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьРеквизитыИзПараметровФормы(ЭтаФорма);
		УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетСписанияНДС);
		УправлениеФормой(ЭтаФорма);
		УстановитьСостояниеДокумента();
	КонецЕсли;

	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("СостояниеРегламентнойОперации", 
			?(Объект.Проведен, ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено"), 
							   ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено")));
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетСписанияНДС);
	УправлениеФормой(ЭтаФорма);
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеВосстановлениеНДС";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСчетФактураОтсутствуетПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Состав.ТекущиеДанные;
	Если ТекСтрока.НетДанныхОСчетеФактуре Тогда
		ТекСтрока.СчетФактура = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетСписанияНДСПриИзменении(Элемент)

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетСписанияНДС);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Подразделение, Организация, ПодразделениеПоУмолчанию",
		"СубконтоСписанияНДС1",
		"СубконтоСписанияНДС2",
		"СубконтоСписанияНДС3",
		"ПодразделениеОрганизации",
		Объект.Организация,
		Неопределено);

	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетСписанияНДС, Объект, ПоляОбъекта,, ЗначенияСубконто);

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, "СубконтоСписанияНДС%Индекс%"); 
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		ЭтаФорма,
		Объект,
		"СубконтоСписанияНДС%Индекс%",
		"СубконтоСписанияНДС%Индекс%",
		ПараметрыДокумента);
		
КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС1ПриИзменении(Элемент)

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, "СубконтоСписанияНДС%Индекс%"); 
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		ЭтаФорма,
		Объект,
		"СубконтоСписанияНДС%Индекс%",
		"СубконтоСписанияНДС%Индекс%",
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС2ПриИзменении(Элемент)

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, "СубконтоСписанияНДС%Индекс%"); 
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		ЭтаФорма,
		Объект,
		"СубконтоСписанияНДС%Индекс%",
		"СубконтоСписанияНДС%Индекс%",
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоСписанияНДС3ПриИзменении(Элемент)

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, "СубконтоСписанияНДС%Индекс%"); 
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		ЭтаФорма,
		Объект,
		"СубконтоСписанияНДС%Индекс%",
		"СубконтоСписанияНДС%Индекс%",
		ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьВосстановленныйНДСНаЗатратыПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СоставКорректируемыйПериод

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставКорректируемыйПериод");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Состав.ЗаписьДополнительногоЛиста", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СоставПоставщик, СоставСчетФактура

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставПоставщик");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставСчетФактура");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Состав.НетДанныхОСчетеФактуре", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СоставНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Состав.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Состав.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// СоставСчетФактура

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставСчетФактура");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Состав.НетДанныхОСчетеФактуре", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	// СоставНетДанныхОСчетеФактуре

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СоставНетДанныхОСчетеФактуре");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтразитьВКнигеПродаж", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ЗагрузитьПодготовленныеДанные();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;                           

	Если СтруктураДанных.Свойство("ТаблицаВосстановленияНДСПоРеализации") Тогда
		Если НЕ СтруктураДанных.ТаблицаВосстановленияНДСПоРеализации = Неопределено Тогда		
			Объект.Состав.Загрузить(СтруктураДанных.ТаблицаВосстановленияНДСПоРеализации);		
		КонецЕсли; 
	ИначеЕсли СтруктураДанных.Свойство("ТаблицаВосстановленияНДСПоОстаткам") Тогда
		Объект.Состав.Загрузить(СтруктураДанных.ТаблицаВосстановленияНДСПоОстаткам);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать
