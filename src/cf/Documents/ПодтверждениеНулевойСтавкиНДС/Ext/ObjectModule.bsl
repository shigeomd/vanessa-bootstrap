#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ПодчиненныеСчетаФактуры; // таблица счетов-фактур, основанием которых является этот документ
	
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьДокумент() Экспорт

	ЗаполнитьСтрокиДокумента();

КонецПроцедуры

Процедура ЗаполнитьСтрокиДокумента() Экспорт

	ТаблицаРезультата = Состав.ВыгрузитьКолонки();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("СостояниеПредположения0", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	
	ТекстПостановление1137 = 
	"ВЫБРАТЬ
	|	НДСРеализация0Остатки.СчетФактура КАК ДокументОтгрузки,
	|	НДСРеализация0Остатки.ВидЦенности,
	|	НДСРеализация0Остатки.СтавкаНДС,
	|	НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток КАК ПродажиСНДС0,
	|	НДСРеализация0Остатки.КурсоваяРазницаОстаток КАК КурсоваяРазница,
	|	НДСРеализация0Остатки.Покупатель,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ПодтвержденаСтавка0) КАК Событие
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Состояние = &СостояниеПредположения0) КАК НДСРеализация0Остатки";

	ТекстПостановление735 = 
	"ВЫБРАТЬ
	|	НДСРеализация0Остатки.СчетФактура КАК ДокументОтгрузки,
	|	НДСРеализация0Остатки.СуммаБезНДСОстаток КАК ПродажиСНДС0,
	|	НДСРеализация0Остатки.Покупатель,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ПодтвержденаСтавка0) КАК Событие
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Состояние = &СостояниеПредположения0) КАК НДСРеализация0Остатки";
	
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Дата) = 3 Тогда
		Запрос.Текст = ТекстПостановление735;
	Иначе
		Запрос.Текст = ТекстПостановление1137;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(РезультатЗапроса, ТаблицаРезультата);

	Состав.Загрузить(ТаблицаРезультата);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект, Ложь);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ПодтверждениеНулевойСтавкиНДС.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИБ

	СтруктураТаблицСтавкаПодтверждена = УчетНДС.ПодготовитьТаблицуНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(
		ПараметрыПроведения.ТаблицаРеквизиты,
		ПараметрыПроведения.ТаблицаСтавкаПодтверждена, Движения);

	ТаблицаСтавкаПодтвержденаСнятиеБлокировкиВычета = СтруктураТаблицСтавкаПодтверждена.НДСПредъявленныйРеализация0СнятиеБлокировкиВычета;
	ТаблицаСтавкаПодтвержденаРеализация0 = СтруктураТаблицСтавкаПодтверждена.ТаблицаРеализация0;
		
	СтруктураТаблицСтавкаНеПодтверждена = УчетНДС.ПодготовитьТаблицуНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(
		ПараметрыПроведения.ТаблицаРеквизиты,
		ПараметрыПроведения.ТаблицаСтавкаНеПодтверждена, Движения);
		
	ТаблицаСтавкаНеПодтвержденаСнятиеБлокировкиВычета = СтруктураТаблицСтавкаНеПодтверждена.НДСПредъявленныйРеализация0СнятиеБлокировкиВычета;
	ТаблицаСтавкаНеПодтвержденаРеализация0 = СтруктураТаблицСтавкаНеПодтверждена.ТаблицаРеализация0;

	ТаблицаНДСНачисленныйСторно	= УчетНДС.ПодготовитьТаблицуНДСНачисленныйСторно(
		ПараметрыПроведения.ТаблицаРеквизиты,
		ПараметрыПроведения.ТаблицаСтавкаНеПодтверждена, Движения);

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	УчетНДС.СформироватьДвиженияСтавка0Подтверждена(
		ПараметрыПроведения.ТаблицаРеквизиты,
		ПараметрыПроведения.ТаблицаСтавкаПодтверждена,
		ПараметрыПроведения.ТаблицаСтавкаПодтвержденаРеализация0,
		ТаблицаСтавкаПодтвержденаСнятиеБлокировкиВычета,
		ТаблицаСтавкаПодтвержденаРеализация0,
		Движения, Отказ);

	УчетНДС.СформироватьДвиженияСтавка0НеПодтверждена(
		ПараметрыПроведения.ТаблицаРеквизиты,
		ПараметрыПроведения.ТаблицаСтавкаНеПодтверждена,
		ПараметрыПроведения.ТаблицаСтавкаНеПодтвержденаРеализация0,
		ТаблицаСтавкаНеПодтвержденаСнятиеБлокировкиВычета,
		ТаблицаНДСНачисленныйСторно,
		ТаблицаСтавкаНеПодтвержденаРеализация0,
		Движения, Отказ);
		
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СформироватьДвиженияФактВыполненияРегламентнойОперации(
		ПараметрыПроведения.ДанныеРегламентнойОперации, Отказ);

	Движения.Записать();
	
	ОбновитьСчетаФактуры(РежимЗаписиДокумента.Проведение);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СброситьФактВыполненияОперации(Ссылка);
		
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	ОбновитьСчетаФактуры(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	СформироватьСчетаФактуры(Отказ);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ОбновитьСчетаФактуры(РежимЗаписиДокумента.Запись);
	КонецЕсли; 

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

	Для каждого СтрокаТЧ Из Состав Цикл
		СтрокаТЧ.СчетФактураВыданный = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВерсияПостановления1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Дата);
	
	Если ВерсияПостановления1137 = 3 Тогда
	
		// Проверим, что в табличной части нет дублей документов отгрузки
		
		ТаблицаСостав = ЭтотОбъект.Состав;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаСостав", ТаблицаСостав);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСостав.ДокументОтгрузки КАК ДокументОтгрузки
		|ПОМЕСТИТЬ КоличествоДокументов
		|ИЗ
		|	&ТаблицаСостав КАК ТаблицаСостав
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоДокументов.ДокументОтгрузки) КАК КоличествоРазличныхДокументов
		|ИЗ
		|	КоличествоДокументов КАК КоличествоДокументов";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Если Выборка.КоличествоРазличныхДокументов <> ТаблицаСостав.Количество() Тогда
			
				ИмяСписка = НСтр("ru = 'Документы реализации'");
				ТекстСообщенияДублиДокументов = НСтр("ru = 'Не допускается повторное указание документа отгрузки.'");
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Корректность",
					, , ИмяСписка, ТекстСообщенияДублиДокументов);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Состав", "Объект", Отказ);
			
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	ТребуетсяСтатьяПрочихРасходов = Ложь;
	
	// Проверка табличной части
	Для Каждого СтрокаТаблицы Из Состав Цикл

		Префикс = "Состав[" + (СтрокаТаблицы.НомерСтроки - 1) + "].";
		ИмяСписка = НСтр("ru = 'Документы реализации'");

		Если СтрокаТаблицы.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",,
							НСтр("ru = 'Сумма НДС'"),
							СтрокаТаблицы.НомерСтроки, ИмяСписка);
			Поле = Префикс + "СуммаНДС";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ВерсияПостановления1137 < 3
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидЦенности) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",,
							НСтр("ru = 'Вид ценности'"),
							СтрокаТаблицы.НомерСтроки, ИмяСписка);
			Поле = Префикс + "ВидЦенности";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если СтрокаТаблицы.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0 Тогда
			ТребуетсяСтатьяПрочихРасходов = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если НЕ ТребуетсяСтатьяПрочихРасходов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяПрочихРасходов");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбновитьСчетаФактуры(РежимЗаписи)

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки                = Блокировка.Добавить("Документ.СчетФактураВыданный");
	ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ПодчиненныеСчетаФактуры;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена'"), УровеньЖурналаРегистрации.Ошибка, , ,
			ОписаниеОшибки.Описание);
		
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Для каждого СтрокаСФ Из ПодчиненныеСчетаФактуры Цикл
	
		Если ЭтотОбъект.ПометкаУдаления ИЛИ НЕ СтрокаСФ.Использован Тогда
			Если НЕ СтрокаСФ.ПометкаУдаления Тогда
				ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
				ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
				Если ДокументСФ.ДокументыОснования.Количество() > 1 Тогда
					СтрокиТекОснования = ДокументСФ.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ЭтотОбъект.Ссылка));
					Для каждого СтрокаТекОснования Из СтрокиТекОснования Цикл
						ДокументСФ.ДокументыОснования.Удалить(СтрокаТекОснования);
					КонецЦикла;
					РежимЗаписиСФ = ?(ДокументСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
					ДокументСФ.Записать(РежимЗаписиСФ);
				Иначе
					ДокументСФ.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
			Если ДокументСФ.ПометкаУдаления Тогда
				ДокументСФ.ПометкаУдаления = Ложь;
			КонецЕсли;
			РежимЗаписиСФ = РежимЗаписи;
			Если ДокументСФ.Проведен И РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.ОтменаПроведения;
			ИначеЕсли НЕ ДокументСФ.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			ДокументСФ.Записать(РежимЗаписиСФ);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура СформироватьСчетаФактуры(Отказ)
	
	ДанныеСчетовФактур = ДанныеСчетовФактурПоДокументу();
	
	Если ЭтоНовый() Тогда
		ДокументСсылка = ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументСсылка = Документы.ПодтверждениеНулевойСтавкиНДС.ПолучитьСсылку();
			УстановитьСсылкуНового(ДокументСсылка);
		КонецЕсли;
	Иначе
		ДокументСсылка = Ссылка;
	КонецЕсли;
	
	ПодчиненныеСчетаФактуры = НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур);
	
	ЗаполнитьСчетаФактурыВДокументе();
	
КонецПроцедуры

Функция ДанныеСчетовФактурПоДокументу()

	ДанныеСчетовФактур = ЭтотОбъект.Состав.ВыгрузитьКолонки("Покупатель,ДокументОтгрузки,СчетФактураВыданный,ПродажиСНДС0,СуммаНДС");
	
	НеобходимоСоставитьСчетФактуру = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Дата) = 3;
	
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Состав Цикл
		Если СтрокаТабличнойЧасти.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0
			И НеобходимоСоставитьСчетФактуру Тогда
			НоваяСтрока = ДанныеСчетовФактур.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактураВыданный) Тогда
			СтрокаТабличнойЧасти.СчетФактураВыданный = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеСчетовФактур.Свернуть("Покупатель,ДокументОтгрузки,СчетФактураВыданный", "ПродажиСНДС0,СуммаНДС");
	
	Возврат ДанныеСчетовФактур;

КонецФункции

Функция НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур)

	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка);
	
	Для каждого СтрокаТаблицы Из ДанныеСчетовФактур Цикл
		
		СтрокаСФ = НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаТаблицы);
		Если СтрокаСФ = Неопределено Тогда
			
			ДокументСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
			
			ДокументСФ.Дата               	 = ЭтотОбъект.Дата;
			ДокументСФ.Организация        	 = ЭтотОбъект.Организация;
			ДокументСФ.Ответственный      	 = Пользователи.ТекущийПользователь();
			ДокументСФ.Контрагент         	 = СтрокаТаблицы.Покупатель;
			ДокументСФ.ВидСчетаФактуры    	 = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			ДокументСФ.КодВидаОперации	  	 = "01";
			ДокументСФ.Сумма				 = СтрокаТаблицы.ПродажиСНДС0 + СтрокаТаблицы.СуммаНДС;
			ДокументСФ.СуммаНДС				 = СтрокаТаблицы.СуммаНДС;
			ДокументСФ.Выставлен 			 = Истина;
			ДокументСФ.КодСпособаВыставления = 1;
			ДокументСФ.ДатаВыставления 		 = ЭтотОбъект.Дата;
			
			ДокументСФ.Комментарий	= НСтр("ru = 'Создан автоматически на основании документа подтверждение нулевой ставки НДС'");
			
			ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(ДокументСФ);
			
			ДокументСФ.ДокументыОснования.Добавить().ДокументОснование = ДокументСсылка;
			
			ДокументСФ.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
			ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
			ДокументСФ.Записать();
			
			// Этот новый счет-фактуру нужно зафиксировать в таблице счетов-фактур
			СтрокаСФ = ТаблицаСФ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСФ, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(СтрокаСФ, ДокументСФ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСФ;

КонецФункции

Процедура ЗаполнитьСчетаФактурыВДокументе()

	НеобходимоСоставитьСчетФактуру = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Дата) = 3;
	
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Состав Цикл
		Если СтрокаТабличнойЧасти.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0
			И НеобходимоСоставитьСчетФактуру Тогда
			СтрокаСФ = НайтиСтрокуСчетаФактуры(ПодчиненныеСчетаФактуры, СтрокаТабличнойЧасти);
			Если СтрокаСФ <> Неопределено Тогда
				СтрокаТабличнойЧасти.СчетФактураВыданный = СтрокаСФ.Ссылка;
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Ссылка.Контрагент КАК Контрагент,
	|	СчетФактураВыданный.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СчетФактураВыданный.Ссылка.Проведен,
	|	СчетФактураВыданный.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Ссылка.Дата,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";

	ТаблицаСФ = Запрос.Выполнить().Выгрузить();
	ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	Возврат ТаблицаСФ;

КонецФункции

Функция НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаДокумента)
	
	СтруктураПоиска = Новый Структура("Ссылка", СтрокаДокумента.СчетФактураВыданный);
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Контрагент = СтрокаДокумента.Покупатель ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Контрагент) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;

	Для Каждого НайденнаяСтрока Из ТаблицаСФ Цикл
		Если НайденнаяСтрока.Контрагент = СтрокаДокумента.Покупатель ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Контрагент) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

#КонецЕсли

