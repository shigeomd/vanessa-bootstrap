&НаКлиенте
Перем СтрокиКРасчету Экспорт;

&НаКлиенте
Перем ЗакрытьПослеЗаписи;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Ключ.Пустая() Тогда
		
		// создается новый документ
		ЗначенияДляЗаполнения = Новый Структура("ПредыдущийМесяц, Организация, Ответственный, Подразделение", 
		"Объект.МесяцНачисления",
		"Объект.Организация",
		"Объект.Ответственный",
		"Объект.Подразделение");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		УстановитьФункциональныеОпцииФормы();
		ОтражениеЗарплатыВБухучете.ОбъектПриСозданииНаСервереПроцентЕНВД(ЭтаФорма, Объект.Организация, Объект.МесяцНачисления);
		
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой");
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");

		УчетНДФЛФормы.ДополнитьФормуПанельюВычетов(ЭтаФорма);
		УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма, Объект.МесяцНачисления);
		
		УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.МесяцНачисления);
		
		УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
		
		РассчитатьИтогиПоДокументу();
		
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	РассчитыватьДокументыПриРедактировании = Константы.РассчитыватьДокументыПриРедактировании.Получить();
	Если РассчитыватьДокументыПриРедактировании Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПересчитатьДокумент",
			"Видимость",
			Ложь);
			
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ПриСозданииФормыДокументаНачислениеЗарплаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ЗакрытьПослеЗаписи = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ДополнитьТаблицуНачисления();
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	
	ОтражениеЗарплатыВБухучете.ОбъектПриЧтенииНаСервереПроцентЕНВД(ЭтаФорма, Объект.Организация, Объект.МесяцНачисления);
	
	УчетНДФЛФормы.ДополнитьФормуПанельюВычетов(ЭтаФорма);
	УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма, Объект.МесяцНачисления);
	
	УстановитьДоступностьИзмененияНДФЛ();
	УстановитьДоступностьИзмененияВзносов();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.МесяцНачисления);
	
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	РассчитатьИтогиПоДокументу();
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ПриПолученииДанных(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если СтрокиКРасчету.Количество() > 0 Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюОкончание", ЭтаФорма, ПараметрыЗаписи);
		
		ТекстВопроса = НСтр("ru='Перед записью документа необходимо рассчитать НДФЛ и взносы.
			|Продолжить?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	Иначе
		
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ПроведениеДокументаНачислениеЗарплаты");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма, Объект.МесяцНачисления);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ПриПолученииДанных(ЭтаФорма);
	КонецЕсли;
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗакрытьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизацииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроцентЕНВДСтрокаПриИзменении(Элемент)
	
	ОтражениеЗарплатыВБухучетеКлиент.ПроцентЕНВДСтрокаПриИзменении(ЭтаФорма, Элемент, ЭтаФорма.ПроцентЕНВДСтрока);
	Если Не Объект.КорректироватьВзносы Тогда
		ПроцентЕНВДСтрокаПриИзмененииНаСервере();
		ЗаполнитьНДФЛиВзносыНаКлиенте(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроцентЕНВДСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОтражениеЗарплатыВБухучетеКлиент.ПроцентЕНВДСтрокаНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеВыбрано Тогда 
		ОбработатьИзменениеМесяцНачисленияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#Область ОбработчикиСобытийТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СотрудникиСотрудник" Тогда
		
		ПоказатьЗначение(, Элементы.Сотрудники.ТекущиеДанные.Сотрудник);
		
	ИначеЕсли Поле.Имя = "СотрудникиОтработаноДней"
		Или Поле.Имя = "СотрудникиОтработаноЧасов"
		Или Поле.Имя = "СотрудникиНачислено"
		Или Поле.Имя = "СотрудникиВсегоНачислено" Тогда
		
		ПерейтиКНачислениям(Поле.Имя = "СотрудникиВсегоНачислено");
		
	ИначеЕсли Поле.Имя = "СотрудникиОтпускаБольничные" Тогда
		
		ОткрытьОтпускИлиБольничный();
		
	ИначеЕсли Поле.Имя = "СотрудникиНДФЛ"
		Или Поле.Имя = "СотрудникиВсегоУдержано" Тогда
		
		ПерейтиКНДФЛ();
		
	ИначеЕсли Поле.Имя = "СотрудникиПрочееУдержано" Тогда
		
		ПерейтиКУдержаниям();
		
	ИначеЕсли Поле.Имя = "СотрудникиВзносы" Тогда
		
		ПерейтиКВзносам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПодобратьСотрудников(Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		ДобавляемыеСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение);
	Иначе
		ДобавляемыеСотрудники = ВыбранноеЗначение;
	КонецЕсли;
	
	ДобавитьСотрудников(ДобавляемыеСотрудники);
	ЗаполнитьНДФЛиВзносыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	СформироватьСписокОбновляемыхСотрудников("Сотрудники", Элемент.ВыделенныеСтроки);
	СформироватьСписокОбновляемыхФизическихЛиц("Сотрудники", Элемент.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	СотрудникиПослеУдаленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура СотрудникиПослеУдаленияНаСервере()
	
	Если ОбновляемыеСотрудники <> Неопределено И ОбновляемыеСотрудники.Количество() > 0 Тогда
		
		Для каждого ОбновляемыйСотрудник Из ОбновляемыеСотрудники Цикл
			
			СтрокиНачислений = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", ОбновляемыйСотрудник));
			Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
				Объект.Начисления.Удалить(СтрокаНачисления);
			КонецЦикла;
		
		КонецЦикла;
		
		ОбновляемыеСотрудники = Неопределено;
		
	КонецЕсли; 
	
	Если ОбновляемыеФизическиеЛица <> Неопределено И ОбновляемыеФизическиеЛица.Количество() > 0 Тогда
		
		Для каждого ОбновляемоеФизическоеЛицо Из ОбновляемыеФизическиеЛица Цикл
		
			СтрокиФизическогоЛица = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", ОбновляемоеФизическоеЛицо));
			Если СтрокиФизическогоЛица.Количество() = 0 Тогда
				
				УдаляемыеСтроки = Объект.Удержания.НайтиСтроки(Новый Структура("Сотрудник", ОбновляемоеФизическоеЛицо));
				Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					Объект.Удержания.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				
				УдаляемыеСтроки = Объект.НДФЛ.НайтиСтроки(Новый Структура("ФизическоеЛицо", ОбновляемоеФизическоеЛицо));
				Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					
					ИдентификаторСтрокиНДФЛ = УдаляемаяСтрока.ИдентификаторСтрокиНДФЛ;
					Объект.НДФЛ.Удалить(УдаляемаяСтрока);
					
					УдаляемыеСтрокиВычетов = Объект.ПримененныеВычетыНаДетейИИмущественные.НайтиСтроки(Новый Структура("ИдентификаторСтрокиНДФЛ", ИдентификаторСтрокиНДФЛ));
					Для каждого УдаляемаяСтрокаВычетов Из УдаляемыеСтрокиВычетов Цикл
						Объект.ПримененныеВычетыНаДетейИИмущественные.Удалить(УдаляемаяСтрокаВычетов);
					КонецЦикла;
					
				КонецЦикла;
				
				УдаляемыеСтроки = Объект.Взносы.НайтиСтроки(Новый Структура("ФизическоеЛицо", ОбновляемоеФизическоеЛицо));
				Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					Объект.Взносы.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбновляемыеФизическиеЛица = Неопределено;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокОбновляемыхСотрудников(ИмяТабличнойЧасти, Знач ИдентификаторыСтрок)
	
	СотрудникиКОбновлению = Новый Соответствие;
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		СтрокаСотрудника = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаСотрудника <> Неопределено Тогда
			СотрудникиКОбновлению.Вставить(СтрокаСотрудника.Сотрудник, Истина);
		КонецЕсли; 
		
	КонецЦикла;
	
	ОбновляемыеСотрудники = Новый ФиксированныйМассив(ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиКОбновлению, "Ключ"));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокОбновляемыхФизическихЛиц(ИмяТабличнойЧасти, Знач ИдентификаторыСтрок, ИдентификаторКолонки = "ФизическоеЛицо")
	
	ФизическиеЛицаКОбновлению = Новый Соответствие;
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		СтрокаФизическогоЛица = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаФизическогоЛица <> Неопределено Тогда
			ФизическиеЛицаКОбновлению.Вставить(СтрокаФизическогоЛица[ИдентификаторКолонки], Истина);
		КонецЕсли; 
		
	КонецЦикла;
	
	ОбновляемыеФизическиеЛица = Новый ФиксированныйМассив(ОбщегоНазначения.ВыгрузитьКолонку(ФизическиеЛицаКОбновлению, "Ключ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНачислениям(ОткрыватьОтпускИлиБольничный = Ложь)
	
	НайденныеСтроки = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", Элементы.Сотрудники.ТекущиеДанные.Сотрудник));
	Если НайденныеСтроки.Количество() > 0 И (НайденныеСтроки[0].Результат > 0 Или ОткрыватьОтпускИлиБольничный = Ложь) Тогда
		Элементы.Начисления.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		ТекущийЭлемент = Элементы.Найти("НачисленияСумма");
	ИначеЕсли ОткрыватьОтпускИлиБольничный Тогда
		ОткрытьОтпускИлиБольничный();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНДФЛ()
	
	НайденныеСтроки = Объект.НДФЛ.НайтиСтроки(Новый Структура("ФизическоеЛицо", Элементы.Сотрудники.ТекущиеДанные.ФизическоеЛицо));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.НДФЛ.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		ТекущийЭлемент = Элементы.Найти("НДФЛНалог");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКУдержаниям()
	
	НайденныеСтроки = Объект.Удержания.НайтиСтроки(Новый Структура("Сотрудник", Элементы.Сотрудники.ТекущиеДанные.ФизическоеЛицо));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.Удержания.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		ТекущийЭлемент = Элементы.Найти("УдержанияСумма");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВзносам()
	
	НайденныеСтроки = Объект.Взносы.НайтиСтроки(Новый Структура("ФизическоеЛицо", Элементы.Сотрудники.ТекущиеДанные.ФизическоеЛицо));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.Взносы.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		ТекущийЭлемент = Элементы.Найти("ВзносыФизическоеЛицо");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтпускИлиБольничный()
	
	Если ЗначениеЗаполнено(Элементы.Сотрудники.ТекущиеДанные.ОтпускаБольничные) Тогда
		
		Сотрудник = Элементы.Сотрудники.ТекущиеДанные.Сотрудник;
		ЕдинственныйДокумент = ЕдинственныйДокументОтпускИлиБольничный(Сотрудник, Объект.МесяцНачисления);
		Если ЗначениеЗаполнено(ЕдинственныйДокумент) Тогда
			ПоказатьЗначение(, ЕдинственныйДокумент);
		Иначе
			
			ПараметрыОткрытия = Новый Структура;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Месяц", Объект.МесяцНачисления);
			СтруктураОтбора.Вставить("Сотрудники", Сотрудник);
			
			ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
			
			ОткрытьФорму("ЖурналДокументов.НачислениеЗарплаты.ФормаСписка", ПараметрыОткрытия, ЭтаФорма);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕдинственныйДокументОтпускИлиБольничный(Знач Сотрудник, Знач Месяц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Период", Месяц);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачисленияУдержанияПоСотрудникам.Регистратор
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Период = &Период
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам))
		|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|	И НачисленияУдержанияПоСотрудникам.Сотрудник = &Сотрудник";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		Возврат Выборка.Регистратор;
		
	КонецЕсли; 
	
	Возврат Неопределено;
		
КонецФункции

&НаКлиенте
Процедура ПодобратьСотрудников(МножественныйВыбор)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериоде(
		Элементы.Сотрудники, Объект.Организация, Объект.Подразделение,
		Объект.МесяцНачисления, КонецМесяца(Объект.МесяцНачисления), МножественныйВыбор,
		АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры
	
&НаСервере
Процедура ДобавитьСотрудников(Знач СписокСотрудников)
	
	СотрудникиКДобавлению = Новый Массив;
	Для каждого ДобавляемыйСотрудник Из СписокСотрудников Цикл
		
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ДобавляемыйСотрудник)).Количество() = 0 Тогда
			СотрудникиКДобавлению.Добавить(ДобавляемыйСотрудник);
		КонецЕсли; 
		
	КонецЦикла;
	
	ДанныеСотрудников = ДанныеСотрудников(СотрудникиКДобавлению);
	Если ДанныеСотрудников <> Неопределено Тогда
		
		Для каждого ДобавляемыйСотрудник Из СотрудникиКДобавлению Цикл
			
			СтрокаСотрудники = Объект.Сотрудники.Добавить();
			СтрокаСотрудники.Сотрудник = ДобавляемыйСотрудник;
			СтрокаДанных = ДанныеСотрудников.Найти(ДобавляемыйСотрудник, "Сотрудник");
			Если СтрокаДанных <> Неопределено Тогда
				СтрокаСотрудники.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
				СтрокаСотрудники.ОтпускаБольничные = СтрокаДанных.Сумма;
			Иначе
				СтрокаСотрудники.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйСотрудник, "ФизическоеЛицо");
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатНачисления = РасчетЗарплаты.РезультатНачисленияРасчетаЗарплаты(
		Объект.Организация,
		Объект.МесяцНачисления,
		КонецМесяца(Объект.МесяцНачисления),
		Объект.МесяцНачисления,
		Объект.Ссылка,
		Объект.Подразделение,
		СотрудникиКДобавлению);
		
	Если РезультатНачисления.Количество() > 0 Тогда
		
		РезультатНачисления.Колонки.Добавить("ОтработаноДней");
		РезультатНачисления.Колонки.Добавить("ОтработаноЧасов");
		
		РасчетЗарплатыБазовый.ЗаполнитьОтработанноеВремя(РезультатНачисления, Объект.МесяцНачисления);
		
		Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
			МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатНачисления(Объект, РезультатНачисления);
		КонецЕсли;
	
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатНачисления, Объект.Начисления);
		
		ОбновляемыеСотрудники = Новый ФиксированныйМассив(СотрудникиКДобавлению);
		
		ОбновитьНДФЛиВзносыСотрудников(СотрудникиКДобавлению);
		
		Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
			МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатУдержаний(Объект, РезультатНачисления);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеСотрудников(СписокСотрудников)
	
	ДанныеСотрудников = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		ДанныеСотрудников = МодульРасчетЗарплатыДляНебольшихОрганизаций.СведенияНачисленийПоОтсутствиям(СписокСотрудников, Объект.МесяцНачисления, Объект.Организация, Объект.Подразделение);
		
	КонецЕсли;
	
	Возврат ДанныеСотрудников;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтрокуСотрудника()
	
	Если ОбновляемыеФизическиеЛица <> Неопределено Тогда
		
		СотрудникиФизическихЛиц = Новый Соответствие;
		Для каждого ОбновляемоеФизическоеЛицо Из ОбновляемыеФизическиеЛица Цикл
			
			СтрокиПоФизическимЛицам = Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", ОбновляемоеФизическоеЛицо));
			Если СтрокиПоФизическимЛицам.Количество() > 0 Тогда
				ОбновляемыйСотрудник = СтрокиПоФизическимЛицам[0].Сотрудник;
			Иначе
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(
					Запрос.МенеджерВременныхТаблиц,
					Истина,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбновляемоеФизическоеЛицо),
					Объект.Организация,
					Объект.МесяцНачисления,
					КонецМесяца(Объект.МесяцНачисления));
					
				Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ОсновныеСотрудникиФизическихЛиц.Сотрудник
					|ИЗ
					|	ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц";
					
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					ОбновляемыйСотрудник = Выборка.Сотрудник;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбновляемыйСотрудник) Тогда
				СотрудникиФизическихЛиц.Вставить(ОбновляемыйСотрудник, Истина);
			КонецЕсли; 
			
		КонецЦикла;
		
		Если СотрудникиФизическихЛиц.Количество() > 0 Тогда
			
			СотрудникиКОбновлению = Новый Массив;
			Если ОбновляемыеСотрудники <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиКОбновлению, ОбновляемыеСотрудники, Истина);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиКОбновлению, ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиФизическихЛиц, "Ключ"), Истина);
			
			ОбновляемыеСотрудники = Новый ФиксированныйМассив(СотрудникиКОбновлению);
			
		КонецЕсли; 
		
		ОбновляемыеФизическиеЛица = Неопределено;
		
	КонецЕсли; 
	
	Если ОбновляемыеСотрудники <> Неопределено Тогда
		
		Для каждого ОбновляемыйСотрудник Из ОбновляемыеСотрудники Цикл
			
			СтрокиСотрудника = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ОбновляемыйСотрудник));
			Если СтрокиСотрудника.Количество() = 0 Тогда
				
				СтрокаСотрудника = Объект.Сотрудники.Добавить();
				СтрокаСотрудника.Сотрудник = ОбновляемыйСотрудник;
				СтрокаСотрудника.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбновляемыйСотрудник, "ФизическоеЛицо");
				
				ДанныеСотрудника = ДанныеСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбновляемыйСотрудник));
				Если ДанныеСотрудника.Количество() > 0 Тогда
					СтрокаСотрудника.ОтпускаБольничные = ДанныеСотрудника[0].Сумма;
				КонецЕсли; 
				
			Иначе
				СтрокаСотрудника = СтрокиСотрудника[0];
			КонецЕсли;
			
			ТаблицаНачислений = Объект.Начисления.Выгрузить(Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник));
			ТаблицаУдержаний = Объект.Удержания.Выгрузить(Новый Структура("Сотрудник", СтрокаСотрудника.ФизическоеЛицо));
			ТаблицаНДФЛ = Объект.НДФЛ.Выгрузить(Новый Структура("ФизическоеЛицо", СтрокаСотрудника.ФизическоеЛицо));
			ТаблицаВзносы = Объект.Взносы.Выгрузить(Новый Структура("ФизическоеЛицо", СтрокаСотрудника.ФизическоеЛицо));
			
			Если ТаблицаНачислений.Количество() = 0
				И ТаблицаУдержаний.Количество() = 0
				И ТаблицаНДФЛ.Количество() = 0
				И ТаблицаВзносы.Количество() = 0 Тогда
				
				Объект.Сотрудники.Удалить(СтрокаСотрудника);
				
			Иначе
				
				Для каждого СтрокаТаблицыНачислений Из ТаблицаНачислений Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицыНачислений.ОтработаноДней) Тогда
						СтрокаСотрудника.ОтработаноДней = СтрокаТаблицыНачислений.ОтработаноДней;
						СтрокаСотрудника.ОтработаноЧасов = СтрокаТаблицыНачислений.ОтработаноЧасов;
						Прервать;
					КонецЕсли; 
					
				КонецЦикла;
				
				СтрокаСотрудника.Начислено = ТаблицаНачислений.Итог("Результат");
				СтрокаСотрудника.ВсегоНачислено = СтрокаСотрудника.Начислено + СтрокаСотрудника.ОтпускаБольничные;
				
				СтрокаСотрудника.ПрочееУдержано = ТаблицаУдержаний.Итог("Результат");
				СтрокаСотрудника.НДФЛ = ТаблицаНДФЛ.Итог("Налог");
				СтрокаСотрудника.ВсегоУдержано = СтрокаСотрудника.ПрочееУдержано + СтрокаСотрудника.НДФЛ;
				
				СтрокаСотрудника.Взносы = ТаблицаВзносы.Итог("ФФОМС")
					+ ТаблицаВзносы.Итог("ФФОМСЕНВД")
					+ ТаблицаВзносы.Итог("ТФОМС")
					+ ТаблицаВзносы.Итог("ТФОМСЕНВД")
					+ ТаблицаВзносы.Итог("ФСС")
					+ ТаблицаВзносы.Итог("ФССЕНВД")
					+ ТаблицаВзносы.Итог("ФССНесчастныеСлучаи")
					+ ТаблицаВзносы.Итог("ПФРНакопительная")
					+ ТаблицаВзносы.Итог("ПФРНакопительнаяЕНВД")
					+ ТаблицаВзносы.Итог("ПФРСтраховая")
					+ ТаблицаВзносы.Итог("ПФРСтраховаяЕНВД")
					+ ТаблицаВзносы.Итог("ПФРПоСуммарномуТарифу")
					+ ТаблицаВзносы.Итог("ПФРПоСуммарномуТарифуЕНВД")
					+ ТаблицаВзносы.Итог("ПФРНаДоплатуЛетчикам")
					+ ТаблицаВзносы.Итог("ПФРНаДоплатуШахтерам")
					+ ТаблицаВзносы.Итог("ПФРЗаЗанятыхНаПодземныхИВредныхРаботах")
					+ ТаблицаВзносы.Итог("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах")
					+ ТаблицаВзносы.Итог("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный")
					+ ТаблицаВзносы.Итог("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1")
					+ ТаблицаВзносы.Итог("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2")
					+ ТаблицаВзносы.Итог("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3")
					+ ТаблицаВзносы.Итог("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4")
					+ ТаблицаВзносы.Итог("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный")
					+ ТаблицаВзносы.Итог("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1")
					+ ТаблицаВзносы.Итог("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2")
					+ ТаблицаВзносы.Итог("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3")
					+ ТаблицаВзносы.Итог("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4");
				
			КонецЕсли;
				
		КонецЦикла;
		
		ОбновляемыеСотрудники = Неопределено;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ВходитВБазуРКиСН = Ложь;
		Элемент.ТекущиеДанные.КоэффициентПересчета = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.СуммаВычета = 0;
	
	ОбработатьИзменениеНачислений(Элементы.Начисления.ТекущаяСтрока);
	ПересчитатьСотрудника(ДанныеСтроки.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)

	СформироватьСписокОбновляемыхСотрудников("Начисления", Элемент.ВыделенныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	НачисленияПриОкончанииРедактированияНаСервере();
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПересчитатьСотрудника(Элемент.ТекущиеДанные.Сотрудник);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	
	ОбновитьНДФЛИВзносы();
	ОбновитьСтрокуСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСуммаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.КодВычета) Тогда 
		ДанныеСтроки.СуммаВычета = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыУдержания

&НаКлиенте
Процедура УдержанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНДФЛИВзносы();
	
	СформироватьСписокОбновляемыхФизическихЛиц("Удержания", Элемент.ВыделенныеСтроки, "Сотрудник");
	ОбновитьСтрокуСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПередУдалением(Элемент, Отказ)

	СформироватьСписокОбновляемыхФизическихЛиц("Удержания", Элемент.ВыделенныеСтроки, "Сотрудник");
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПослеУдаления(Элемент)
	
	ОбновитьНДФЛИВзносы();
	ОбновитьСтрокуСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияУдержаниеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Удержания.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		ОбработатьИзменениеУдержания(ДанныеСтроки.Удержание, ДанныеСтроки.КатегорияУдержания, ДанныеСтроки.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьИзменениеУдержания(Удержание, КатегорияУдержания, Контрагент)

	КатегорияУдержания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Удержание, "КатегорияУдержания");
	Если КатегорияУдержания = Перечисления.КатегорииУдержаний.ДСВ Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;

КонецФункции 

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНДФЛ

&НаКлиенте
Процедура КорректироватьНДФЛПриИзменении(Элемент)
	
	ПриИзмененииПризнакаКорректироватьНДФЛ();
	Если Не Объект.КорректироватьНДФЛ Тогда
		ЗаполнитьНДФЛиВзносыНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриИзменении(Элемент)
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриАктивизацииСтроки(Элемент)
	
	УчетНДФЛКлиент.НДФЛПриАктивизацииСтроки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПередУдалением(Элемент, Отказ)
	
	УчетНДФЛКлиент.НДФЛПередУдалением(ЭтаФорма, Элементы.НДФЛ.ТекущиеДанные, Отказ);
	СформироватьСписокОбновляемыхФизическихЛиц("НДФЛ", Элемент.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПослеУдаления(Элемент)
	
	УчетНДФЛКлиент.УдалитьПримененныеВычетыНаДетейИИмущественные(ЭтаФорма);
	ОбновитьСтрокуСотрудника();

КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДФЛКлиент.НДФЛПриОкончанииРедактирования(ЭтаФорма);
	
	СформироватьСписокОбновляемыхФизическихЛиц("НДФЛ", Элемент.ВыделенныеСтроки);
	ОбновитьСтрокуСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УчетНДФЛКлиент.НДФЛПриНачалеРедактирования(ЭтаФорма, Элементы.НДФЛ.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыЛичныеПриИзменении(Элемент)
	
	УчетНДФЛКлиент.НДФЛПриОкончанииРедактирования(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛМесяцНалоговогоПериодаПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НДФЛ.ТекущиеДанные, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛМесяцНалоговогоПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.НДФЛ.ТекущиеДанные, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛМесяцНалоговогоПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НДФЛ.ТекущиеДанные, "МесяцНалоговогоПериода", "МесяцНалоговогоПериодаСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛМесяцНалоговогоПериодаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛМесяцНалоговогоПериодаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицПримененныеВычетыИмущественные

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеПриИзменении()
	
	ВычетыНаДетейИИмущественныеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УчетНДФЛКлиент.ВычетыПриНачалеРедактирования(Элемент.ТекущиеДанные, НоваяСтрока, Элементы.НДФЛ.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицПримененныеВычетыКДоходам

&НаКлиенте
Процедура Подключаемый_ВычетыКДоходамПриИзменении()
	
	ВычетыКДоходамПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицВзносы

&НаКлиенте
Процедура ВзносыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.Взносы.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.ДатаПолученияДохода = КонецМесяца(Объект.МесяцНачисления);
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ТекущиеДанные, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьВзносыПриИзменении(Элемент)
	
	ПриИзмененииПризнакаКорректироватьВзносы();
	Если Не Объект.КорректироватьВзносы Тогда
		ЗаполнитьНДФЛиВзносыНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьИтогВзносы(ЭтаФорма);
	
	СформироватьСписокОбновляемыхФизическихЛиц("Взносы", Элемент.ВыделенныеСтроки);
	ОбновитьСтрокуСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПередУдалением(Элемент, Отказ)
	
	СформироватьСписокОбновляемыхФизическихЛиц("Взносы", Элемент.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПослеУдаления(Элемент)
	
	РассчитатьИтогВзносы(ЭтаФорма);
	ОбновитьСтрокуСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаСтрокойПриИзменении(Элемент)
	ДанныеТекущейСтроки = Элементы.Взносы.ТекущиеДанные;
	УчетСтраховыхВзносовКлиент.ВзносыДатаПолученияДоходаСтрокойПриИзменении(ДанныеТекущейСтроки, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДанныеТекущейСтроки = Элементы.Взносы.ТекущиеДанные;
	УчетСтраховыхВзносовКлиент.ВзносыДатаПолученияДоходаСтрокойНачалоВыбора(ЭтотОбъект, ДанныеТекущейСтроки, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВзносыДатаПолученияДоходаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	УчетСтраховыхВзносовКлиент.ВзносыДатаПолученияДоходаСтрокойРегулирование(
		Элементы.Взносы.ТекущиеДанные, 
		"ДатаПолученияДохода", 
		"ДатаПолученияДоходаСтрокой",
		Направление, 
		Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура КарточкаУчетаПоСтраховымВзносам(Команда)
	
	ВзносыВыделенныеСтроки = Элементы.Взносы.ВыделенныеСтроки;
	Если ВзносыВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КарточкаУчетаПоСтраховымВзносам = КарточкаУчетаПоСтраховымВзносамНаСервере(ВзносыВыделенныеСтроки);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.КарточкаУчетаПоСтраховымВзносам", "КарточкаУчетаПоСтраховымВзносамПодробнее", 
			КарточкаУчетаПоСтраховымВзносам, ЭтаФорма);
			
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ЗарплатаКадрыКлиент.ОрганизацияЗаполнена(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ЗаполнениеДокументаНачислениеЗарплаты");
	
	ОчиститьСообщения();
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрНалоговогоУчетаПоНДФЛ(Команда)
	
	НДФЛВыделенныеСтроки = Элементы.НДФЛ.ВыделенныеСтроки;
	Если НДФЛВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РегистрНалоговогоУчетаПоНДФЛ = НДФЛПодробнееНаСервере(НДФЛВыделенныеСтроки);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.РегистрНалоговогоУчетаПоНДФЛ", "РегистрНалоговогоУчетаПоНДФЛ", 
			РегистрНалоговогоУчетаПоНДФЛ, ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛисток(Команда)
	
	НачисленияВыделенныеСтроки = Элементы.Начисления.ВыделенныеСтроки;
	Если НачисленияВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(НачисленияВыделенныеСтроки, "Начисления");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛистокУдержания(Команда)
	
	УдержанияВыделенныеСтроки = Элементы.Удержания.ВыделенныеСтроки;
	Если УдержанияВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(УдержанияВыделенныеСтроки, "Удержания");
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокумент(Команда)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСотрудника(Сотрудник)
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		Если РассчитыватьДокументыПриРедактировании Тогда
			ОбновитьНДФЛиВзносыСотрудника(Сотрудник);
		Иначе
			
			МассивСотрудников = СтрокиКРасчету.Получить("Сотрудники");
			Если МассивСотрудников = Неопределено Тогда
				МассивСотрудников = Новый Массив;
			КонецЕсли; 
			
			МассивСотрудников.Добавить(Сотрудник);
			СтрокиКРасчету.Вставить("Сотрудники", МассивСотрудников);
			
			РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтаФорма, Истина);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПодобратьСотрудников(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	РасчетЗарплаты.ЗаполнитьДокументНачисленияЗарплаты(Объект);
	ПослеЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьНаСервере()
	
	СотрудникиДокумента = Объект.Начисления.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Объект.Организация;
	ПараметрыПолученияСотрудников.Подразделение = Объект.Подразделение;
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоМесяца(Объект.МесяцНачисления);
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(Объект.МесяцНачисления);
	ПараметрыПолученияСотрудников.КадровыеДанные = "ГоловнаяОрганизация,Организация,Подразделение,ТарифнаяСтавка,ПроцентСевернойНадбавки";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиДокумента
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СотрудникиДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиДокумента.Сотрудник
		|ИЗ
		|	ВТСотрудникиДокумента КАК СотрудникиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ПО СотрудникиДокумента.Сотрудник = СотрудникиОрганизации.Сотрудник
		|ГДЕ
		|	СотрудникиОрганизации.Сотрудник ЕСТЬ NULL";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Сотрудник", Выборка.Сотрудник);
			
			СтрокиСотрудника = Объект.Начисления.НайтиСтроки(СтруктураПоиска);
			Для каждого УдаляемаяСтрока Из СтрокиСотрудника Цикл
				Объект.Начисления.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизации.Сотрудник
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиДокумента КАК СотрудникиДокумента
		|		ПО СотрудникиОрганизации.Сотрудник = СотрудникиДокумента.Сотрудник
		|ГДЕ
		|	СотрудникиДокумента.Сотрудник ЕСТЬ NULL";
		
	СписокСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	ДобавитьСотрудников(СписокСотрудников);
	ПослеЗаполненияНаСервере(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияНаСервере(ОбновитьВторичныеДанныеТабличнойЧастиНФЛ = Истина)
	
	Если ОбновитьВторичныеДанныеТабличнойЧастиНФЛ Тогда
		УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма, Объект.МесяцНачисления);
	КонецЕсли; 
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");	
	
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНДФЛиВзносыНаСервере(ПерезаполнитьТолькоВзносы = Ложь)
	
	Если РассчитыватьДокументыПриРедактировании Тогда
		ЗаполнитьНДФЛиВзносы(ПерезаполнитьТолькоВзносы);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНДФЛиВзносыСотрудника(Сотрудник)
	ОбновитьНДФЛиВзносыСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник));	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНДФЛиВзносыСотрудников(Сотрудники)
	
	Если Объект.КорректироватьНДФЛ И Объект.КорректироватьВзносы Тогда
		// Не пересчитываем, т.к. и НДФЛ, и взносы в режиме корректировки.
		Возврат;
	КонецЕсли;
	
	// Составляем временные таблицы для расчета НДФЛ и взносов.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РасчетЗарплатыБазовый.СоздатьВТДляРасчетаНДФЛиВзносов(МенеджерВременныхТаблиц, Объект, Сотрудники);
	
	// Составляем массив физических лиц.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица";
	
	ФизическиеЛицаМассив = Новый Массив;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФизическиеЛицаМассив.Добавить(Выборка.ФизическоеЛицо);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо", ФизическиеЛицаМассив);
	
	// Рассчитываем НДФЛ и взносы
	ДатаОперации = Мин(Объект.Дата, КонецДня(Объект.МесяцНачисления));
	
	НачатьТранзакцию();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Объект.КорректироватьНДФЛ Тогда
		РезультатРасчетаНДФЛ = РасчетЗарплатыБазовый.РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, Объект, ДатаОперации);
		СдвигИдентификатора = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(Объект.НДФЛ) + 1;
		// Перенумеруем строки новых коллекций.
		УчетНДФЛФормы.НазначитьИдентификаторыНовымСтрокамТаблицамНДФЛИПримененныеВычетыНаДетейИИмущественные(
			СдвигИдентификатора, РезультатРасчетаНДФЛ.НДФЛ, РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные);
		// Выполняем замену прежних строк на новые.
		РасчетЗарплаты.ЗаменитьСтрокиНаНовыеДанные(Объект.НДФЛ, РезультатРасчетаНДФЛ.НДФЛ, "ФизическоеЛицо", , ОтборСтрок);
		// В таблице вычетов, т.к. она не отображается, достаточно просто добавить новые строки в любое место, старые будут
		// удалены перед записью.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные, Объект.ПримененныеВычетыНаДетейИИмущественные);
	КонецЕсли; 
	
	Если Не Объект.КорректироватьВзносы Тогда
		РезультатРасчетаВзносов = РасчетЗарплатыБазовый.РезультатРасчетаВзносов(МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);	
		// Выполняем замену прежних строк на новые.
		РасчетЗарплаты.ЗаменитьСтрокиНаНовыеДанные(Объект.Взносы, РезультатРасчетаВзносов, "ФизическоеЛицо", , ОтборСтрок);
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОтменитьТранзакцию();
	
	Если Не Объект.КорректироватьВзносы Тогда
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");		
	КонецЕсли;	
	
	ОбновитьСтрокуСотрудника();
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНДФЛиВзносыНаКлиенте(ПерезаполнитьТолькоВзносы = Ложь)
	
	Если Не РассчитыватьДокументыПриРедактировании Тогда
		
		СтрокиКРасчету.Вставить("Взносы", Истина);
		Если Не ПерезаполнитьТолькоВзносы Тогда
			СтрокиКРасчету.Вставить("НДФЛ", Истина);
		КонецЕсли; 
		
		РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтаФорма, Истина);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНДФЛиВзносы(ПерезаполнитьТолькоВзносы = Ложь)
	
	ПерезаполнитьНДФЛ = Не Объект.КорректироватьНДФЛ И Не ПерезаполнитьТолькоВзносы;
	ПерезаполнитьВзносы = Не Объект.КорректироватьВзносы;
	
	Если ПерезаполнитьНДФЛ Или ПерезаполнитьВзносы Тогда
		
		РасчетЗарплатыБазовый.ЗаполнитьНДФЛиВзносы(Объект, ПерезаполнитьНДФЛ, ПерезаполнитьВзносы);
		
		Если ПерезаполнитьНДФЛ Тогда
			УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма, Объект.МесяцНачисления);
		КонецЕсли;
		
		Если ПерезаполнитьВзносы Тогда
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");		
		КонецЕсли;	
		
	КонецЕсли;
	
	ОбновитьСтрокуСотрудника();
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНачислений(ИдентификаторСтроки)
	
	СтрокаНачисления = Объект.Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Не ЗначениеЗаполнено(СтрокаНачисления.Начисление) Тогда
		СтрокаНачисления.ВычетПримененныйКДоходам = Ложь;
	Иначе
		ДанныеНачисления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаНачисления.Начисление, "КодДоходаНДФЛ,КатегорияНачисленияИлиНеоплаченногоВремени,ВходитВБазуРКИСН");
		
		КатегорияНачисленияИлиНеоплаченногоВремени = ДанныеНачисления.КатегорияНачисленияИлиНеоплаченногоВремени;
		Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда
			Или КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее
			И ДанныеНачисления.ВходитВБазуРКИСН Тогда
			СтрокаНачисления.ВходитВБазуРКиСН = Истина;
		КонецЕсли; 
		
		КодДоходаНДФЛ = ДанныеНачисления.КодДоходаНДФЛ;
		Если ЗначениеЗаполнено(КодДоходаНДФЛ) Тогда
			СтрокаНачисления.ВычетПримененныйКДоходам = ЭтаФорма.СоответствиеКодовВычетовКодамДоходов.Получить(КодДоходаНДФЛ) <> Неопределено
		КонецЕсли; 
		
		Если СтрокаНачисления.ВычетПримененныйКДоходам Тогда
			КодВычета = УчетНДФЛ.КодВычетаПоКодуДоходаНДФЛ(КодДоходаНДФЛ);
			Если Не ЗначениеЗаполнено(СтрокаНачисления.КодВычета) Тогда
				СтрокаНачисления.КодВычета = УчетНДФЛ.КодВычетаПоКодуДоходаНДФЛ(КодДоходаНДФЛ);
			КонецЕсли; 
		Иначе
			СтрокаНачисления.КодВычета = Справочники.ВидыВычетовНДФЛ.ПустаяСсылка();
			СтрокаНачисления.СуммаВычета = 0;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаНачисления.КодВычета) И СтрокаНачисления.СуммаВычета = 0 Тогда
			СтрокаНачисления.СуммаВычета = УчетНДФЛ.ВычетКДоходуСотрудника(
				Объект.Ссылка,
				Объект.Организация,
				Объект.МесяцНачисления,
				СтрокаНачисления.Сотрудник,
				КодДоходаНДФЛ,
				СтрокаНачисления.КодВычета,
				СтрокаНачисления.Результат,
				1);
		КонецЕсли; 
	КонецЕсли; 
	
	ПересчитатьНачисленияСКоэффициентом(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()

	ОбработатьИзменениеМесяцНачисленияНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	ОтражениеЗарплатыВБухучете.ОбработатьИзменениеОрганизацииПроцентЕНВД(ЭтаФорма, Объект.Организация, Объект.МесяцНачисления);

	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()

	УстановитьФункциональныеОпцииФормы();
	ОтражениеЗарплатыВБухучете.ОбработатьИзменениеМесяцНачисленияПроцентЕНВД(ЭтаФорма, Объект.Организация, Объект.МесяцНачисления);
	
	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.МесяцНачисления);
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОчиститьТабличныеЧасти();
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Если ЕстьЗаполненныеТабличныеЧасти() Тогда
			ЗаполнитьНаСервере();
		КонецЕсли; 
	
	Иначе
		
		ДозаполнитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("Организация", Объект.Организация);
	ПараметрыФО.Вставить("Период", НачалоДня(Объект.МесяцНачисления));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);

КонецПроцедуры

&НаСервере
Процедура ПересчитатьНачисленияСКоэффициентом(ИдентификаторСтроки)
	
	СтрокаИнициаторПересчета = Объект.Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Не СтрокаИнициаторПересчета.ВходитВБазуРКиСН Тогда
		Возврат;
	КонецЕсли;
	
	ОкладТариф = 0;
	СтрокиНачисленийОкладТариф = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник,ВходитВБазуРКиСН", СтрокаИнициаторПересчета.Сотрудник, Истина));
	Для Каждого СтрокОкладТариф Из СтрокиНачисленийОкладТариф Цикл
		ОкладТариф = ОкладТариф + СтрокОкладТариф.Результат;
	КонецЦикла;
	
	СтрокиНачислений = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник,ВходитВБазуРКиСН", СтрокаИнициаторПересчета.Сотрудник, Ложь));
	Для Каждого НайденнаяСтрока Из СтрокиНачислений Цикл
		Если НайденнаяСтрока.КоэффициентПересчета <> 0 Тогда
			НайденнаяСтрока.Результат = ОкладТариф * НайденнаяСтрока.КоэффициентПересчета;
		КонецЕсли; 
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуНачисления()
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Формируем массив сотрудников.
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник", Истина);
	
	// Получаем кадровые данные
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, Истина, Сотрудники, "ГоловнаяОрганизация,Организация,Подразделение,ПроцентСевернойНадбавки", Объект.МесяцНачисления);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТКадровыеДанныеСотрудников.Сотрудник,
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.РайонныйКоэффициент > 1
	|			ТОГДА ПодразделенияОрганизаций.РайонныйКоэффициент
	|		КОГДА Организации.РайонныйКоэффициент > 1
	|			ТОГДА Организации.РайонныйКоэффициент
	|		КОГДА ГоловныеОрганизации.РайонныйКоэффициент > 1
	|			ТОГДА ГоловныеОрганизации.РайонныйКоэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РайонныйКоэффициент,
	|	ВТКадровыеДанныеСотрудников.ПроцентСевернойНадбавки
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО ВТКадровыеДанныеСотрудников.Подразделение = ПодразделенияОрганизаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ГоловныеОрганизации
	|		ПО ВТКадровыеДанныеСотрудников.ГоловнаяОрганизация = ГоловныеОрганизации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВТКадровыеДанныеСотрудников.Организация = Организации.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	
	Начисления = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Начисление", Истина);
	ДанныеНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Начисления, "КатегорияНачисленияИлиНеоплаченногоВремени,ВходитВБазуРКИСН");
	
	Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
		
		Если ЗначениеЗаполнено(СтрокаНачисления.Начисление) Тогда
			
			ДанныеНачисления = ДанныеНачислений[СтрокаНачисления.Начисление];
			
			КатегорияНачисления = ДанныеНачисления.КатегорияНачисленияИлиНеоплаченногоВремени;
			Если КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда
				Или КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее
						И ДанныеНачисления.ВходитВБазуРКИСН Тогда
				СтрокаНачисления.ВходитВБазуРКиСН = Истина;
			КонецЕсли; 
			
			ДанныеСотрудника = ДанныеСотрудников.Найти(СтрокаНачисления.Сотрудник, "Сотрудник");
			Если ДанныеСотрудника = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			Если КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент Тогда
				СтрокаНачисления.КоэффициентПересчета = ДанныеСотрудника.РайонныйКоэффициент - 1;
			КонецЕсли; 
			
			Если КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
				СтрокаНачисления.КоэффициентПересчета = ДанныеСотрудника.ПроцентСевернойНадбавки / 100;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеПанелиВычеты()
	
	ОписаниеПанелиВычеты = УчетНДФЛКлиентСервер.ОписаниеПанелиВычеты();
	ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ = УчетНДФЛКлиентСервер.ОписаниеТабличнойЧастиНДФЛ();
	
	НастраиваемыеПанели = Новый Соответствие;
	НастраиваемыеПанели.Вставить("ВычетыЛичные", 				Истина);
	НастраиваемыеПанели.Вставить("ВычетыНаДетейИИмущественные", "Объект.ПримененныеВычетыНаДетейИИмущественные");
	НастраиваемыеПанели.Вставить("ВычетыКДоходам", 				"Объект.Начисления");
	
	ОписаниеПанелиВычеты.НастраиваемыеПанели = НастраиваемыеПанели;
	
	Возврат ОписаниеПанелиВычеты;
	
КонецФункции

&НаКлиенте
Функция ОписаниеПанелиВычетыНаКлиенте() Экспорт
	Возврат ОписаниеПанелиВычеты();
КонецФункции

&НаСервере
Функция ОписаниеПанелиВычетыНаСервере() Экспорт
	Возврат ОписаниеПанелиВычеты();
КонецФункции
 
&НаСервере
Функция НДФЛПодробнееНаСервере(ИдентификаторыСтрок)
	
	ФизическиеЛица = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ФизическиеЛица.Добавить(Объект.НДФЛ.НайтиПоИдентификатору(ИдентификаторСтроки).ФизическоеЛицо);
	КонецЦикла;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	НДФЛПодробнее.Добавить(УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, ФизическиеЛица, Объект.МесяцНачисления));
	
	Возврат НДФЛПодробнее;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьИзмененияНДФЛ()
	
	Элементы.ГруппаНДФЛВертикальная.ТолькоПросмотр = Не Объект.КорректироватьНДФЛ;
	Элементы.ГруппаКарточка.ТолькоПросмотр = Не Объект.КорректироватьНДФЛ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИзмененияВзносов()
	
	Элементы.Взносы.ТолькоПросмотр = Не Объект.КорректироватьВзносы;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПризнакаКорректироватьНДФЛ()
	
	УстановитьДоступностьИзмененияНДФЛ();
	
	Если Не Объект.КорректироватьНДФЛ Тогда
		// Восстанавливаем по состоянию учета.
		ЗаполнитьНДФЛиВзносыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПризнакаКорректироватьВзносы()
	
	УстановитьДоступностьИзмененияВзносов();
	
	Если Не Объект.КорректироватьВзносы Тогда
		ЗаполнитьНДФЛиВзносыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов()
	
	Если ЕстьЗаполненныеТабличныеЧасти() Тогда
		ОтображениеПредупреждения = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		ОтображениеПредупреждения = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
	Элементы.Организация.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения;
	Элементы.ПодразделениеОрганизации.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения;
	Элементы.МесяцНачисленияСтрокой.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеТабличныеЧасти()
	
	ДанныеВТЧЕсть = Ложь;
	
	СписокТабличныхЧастей = СписокТабличныхЧастейДокумента();
	
	Для каждого ИмяТабличнойЧасти Из СписокТабличныхЧастей Цикл
		Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
			ДанныеВТЧЕсть = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ДанныеВТЧЕсть;
	
КонецФункции

&НаСервере
Функция СписокТабличныхЧастейДокумента()
	
	СписокТабличныхЧастей = Новый Массив;
	
	СписокТабличныхЧастей.Добавить("Сотрудники");
	СписокТабличныхЧастей.Добавить("Начисления");
	СписокТабличныхЧастей.Добавить("Удержания");
	СписокТабличныхЧастей.Добавить("НДФЛ");
	СписокТабличныхЧастей.Добавить("ПримененныеВычетыНаДетейИИмущественные");
	СписокТабличныхЧастей.Добавить("Взносы");
	
	Возврат СписокТабличныхЧастей;
	
КонецФункции

&НаСервере
Процедура ОчиститьТабличныеЧасти()
	
	СписокТабличныхЧастей = СписокТабличныхЧастейДокумента();
	
	Для каждого ИмяТабличнойЧасти Из СписокТабличныхЧастей Цикл
		Объект[ИмяТабличнойЧасти].Очистить();
	КонецЦикла;
	
	УстановитьОтображениеПредупрежденийПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогУдержано(Форма)
	
	ОписанияСоставляющихУдержания = Новый Массив;
	ОписанияСоставляющихУдержания.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='удержания'")));
		
	ОписанияСоставляющихНДФЛ = Новый Массив;
	ОписанияСоставляющихНДФЛ.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Налог", НСтр("ru='НДФЛ'")));
	
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Удержания", ОписанияСоставляющихУдержания));
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.НДФЛ", ОписанияСоставляющихНДФЛ));
	
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(Форма, "ИтогУдержано", ОписанияСоставляющих);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогВзносы(Форма)
	
	ПоляВзносов = УчетСтраховыхВзносовКлиентСервер.ОписаниеПолейВзносовВСоответствии(Форма.Объект.МесяцНачисления);
	
	ОписанияСоставляющихВзносы = Новый Массив;
	Для каждого ОписаниеПоля Из ПоляВзносов Цикл
		ОписанияСоставляющихВзносы.Добавить(
			ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита(ОписаниеПоля.Ключ, ОписаниеПоля.Значение));
	КонецЦикла;
	
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Взносы", ОписанияСоставляющихВзносы));
	
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(Форма, "ИтогВзносы", ОписанияСоставляющих);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиПоДокументу()
	
	РассчитатьИтогУдержано(ЭтаФорма);
	РассчитатьИтогВзносы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВычетыНаДетейИИмущественныеПриИзмененииНаСервере()
	
	УчетНДФЛФормы.ОбновитьПредставлениеВычетовНаДетейИИмущественныхСтрокиНДФЛ(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВычетыКДоходамПриИзмененииНаСервере()
	
	УчетНДФЛФормы.ОбновитьПредставлениеВычетовКДоходамСтрокиНДФЛ(ЭтаФорма);
	
КонецПроцедуры

#Область ПроцедурыИФункцииРедактированияПроцентаЕнвдВФормеДокумента

&НаКлиенте
Процедура ЗарегистрироватьПроцентЕНВД() Экспорт

	ЗарегистрироватьПроцентЕНВДНаСервере(Объект.Организация, Объект.МесяцНачисления, ЭтаФорма.ПроцентЕНВД, ЭтаФорма.ПроцентЕНВДСтрока);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьПроцентЕНВДНаСервере(Организация, Месяц, ПроцентЕНВД, ПроцентЕНВДСтрока)
	
	ОтражениеЗарплатыВБухучете.ЗарегистрироватьПроцентЕНВДПослеРедактированияВФорме(Организация, Месяц, ПроцентЕНВД, ПроцентЕНВДСтрока);
	
КонецПроцедуры

&НаСервере
Функция ТекстПредупрежденияПриРедактированииПроцентаЕНВД() Экспорт

	ОрганизацияНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "Наименование");
	МесяцНачисленияСтрокой  = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Объект.МесяцНачисления);
	
	ТекстПредупреждения = 
		НСтр("ru = 'При изменении введенного ранее процента деятельности ЕНВД будут перерасчитаны взносы текущего документа,
		|также необходимо перезаполнить все документы начисления зарплаты за'")
			+ " " + МесяцНачисленияСтрокой + " " + НСтр("ru='г'") + " "
			+ НСтр("ru='по'")+ " """ + ОрганизацияНаименование + """, ";
					
	Возврат ТекстПредупреждения;

КонецФункции

&НаСервере
Процедура ПроцентЕНВДСтрокаПриИзмененииНаСервере()
	
	ЗаполнитьНДФЛиВзносыНаСервере(Истина);
	ПослеЗаполненияНаСервере();

КонецПроцедуры

&НаСервере
Функция КарточкаУчетаПоСтраховымВзносамНаСервере(ИдентификаторыСтрок)
	
	ФизическиеЛица = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ФизическиеЛица.Добавить(Объект.Взносы.НайтиПоИдентификатору(ИдентификаторСтроки).ФизическоеЛицо);
	КонецЦикла;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(ДокументОбъект.Ссылка);
	КарточкаУчета.Добавить(УчетСтраховыхВзносов.КарточкаУчетаПоСтраховымВзносамПодробнее(ДокументОбъект, Модифицированность, ФизическиеЛица, Объект.МесяцНачисления));
	
	Возврат КарточкаУчета;
	
КонецФункции

&НаКлиенте
Процедура ВывестиРасчетныйЛисток(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти)
	
	РасчетныйЛисток = РасчетныйЛистокНаСервере(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.АнализНачисленийИУдержаний", "РасчетныйЛистокПодробнее", 
			РасчетныйЛисток, ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Функция РасчетныйЛистокНаСервере(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти)
	
	СписокСотрудников = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыВыделенныхСтрок Цикл
		
		Если ИмяТабличнойЧасти = "Начисления" Тогда
			СписокСотрудников.Добавить(Объект.Начисления.НайтиПоИдентификатору(ИдентификаторСтроки).Сотрудник);
		Иначе
			СписокСотрудников.Добавить(Объект.Удержания.НайтиПоИдентификатору(ИдентификаторСтроки).Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяТабличнойЧасти = "Начисления" Тогда
		МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудников, "ФизическоеЛицо"), "Значение", Истина);
	Иначе
		МассивФизическихЛиц = СписокСотрудников;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(ДокументОбъект.Ссылка);
	КарточкаУчета.Добавить(УчетНачисленнойЗарплаты.РасчетныйЛистокПодробнее(ДокументОбъект, Модифицированность, МассивФизическихЛиц, Объект.МесяцНачисления));
	
	Возврат КарточкаУчета;
	
КонецФункции

&НаСервере
Процедура НачисленияПриОкончанииРедактированияНаСервере()
	
	ИдентификаторСтроки = Элементы.Начисления.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаНачислений = Объект.Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаНачислений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаНачислений.Сотрудник) Тогда
		СтрокаНачислений.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНачислений.Сотрудник, "ФизическоеЛицо");
		ОбновляемыеФизическиеЛица = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаНачислений.ФизическоеЛицо));
	Иначе
		СтрокаНачислений.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли; 
	
	ОбработатьИзменениеНачислений(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Если СтрокиКРасчету.Количество() > 0 Тогда
		
		ПерезаполнитьНДФЛ = СтрокиКРасчету.Получить("НДФЛ");
		ПерезаполнитьВзносы = СтрокиКРасчету.Получить("Взносы");
		МассивСотрудников = СтрокиКРасчету.Получить("Сотрудники");
		
		Если ПерезаполнитьНДФЛ = Истина
			ИЛИ ПерезаполнитьВзносы = Истина
			ИЛИ МассивСотрудников = Неопределено Тогда
			
			ЗаполнитьНДФЛиВзносы(ПерезаполнитьНДФЛ <> Истина);
			
			
		Иначе
			ОбновитьНДФЛиВзносыСотрудников(МассивСотрудников);
		КонецЕсли;
		
		СтрокиКРасчету.Очистить();
		РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтаФорма, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПересчитатьДокументНаКлиенте();
		Записать(Параметры);
		
	Иначе
		ЗакрытьПослеЗаписи = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНДФЛИВзносы()
	
	Если РассчитыватьДокументыПриРедактировании Тогда
		ЗаполнитьНДФЛиВзносы();
	КонецЕсли;
	ЗаполнитьНДФЛиВзносыНаКлиенте();
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

СтрокиКРасчету = Новый Соответствие;
ЗакрытьПослеЗаписи = Ложь;

#КонецОбласти

#КонецОбласти
