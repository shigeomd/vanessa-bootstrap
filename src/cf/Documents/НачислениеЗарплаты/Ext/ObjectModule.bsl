#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическиеЛица.ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		ИмяТабличнойЧасти = "Сотрудники";
	Иначе
		ИмяТабличнойЧасти = "Начисления";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ТЧСотрудники", ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Сотрудник"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыСотрудники.НомерСтроки,
		|	НачислениеЗарплатыСотрудники.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиДокумента
		|ИЗ
		|	&ТЧСотрудники КАК НачислениеЗарплатыСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(СотрудникиДокумента.НомерСтроки) КАК НомерСтроки,
		|	СотрудникиДокумента.Сотрудник
		|ИЗ
		|	ВТСотрудникиДокумента КАК СотрудникиДокумента
		|ГДЕ
		|	ВЫРАЗИТЬ(СотрудникиДокумента.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация <> &ГоловнаяОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиДокумента.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сотрудник %1 не работает в организации %2'"),
					Выборка.Сотрудник,
					Организация
				),
				,
				ИмяТабличнойЧасти + "[" + (Выборка.НомерСтроки - 1) + "]Сотрудник",
				"Объект",
				Отказ
			);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;		
	
	ЗаполнитьНачисленоУдержано();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	// НДФЛ
	ДатаОперацииПоНалогомИВзносам = Мин(Дата, КонецМесяца(МесяцНачисления));
	УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперацииПоНалогомИВзносам, КонецМесяца(МесяцНачисления), ДанныеДляПроведения.МенеджерВременныхТаблиц, МесяцНачисления, Истина);
	УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперацииПоНалогомИВзносам, ДанныеДляПроведения.НДФЛ);
	УчетНДФЛ.СформироватьСоциальныеВычетыПоУдержаниям(Ссылка, Движения, Отказ, Организация, ДатаОперацииПоНалогомИВзносам, МесяцНачисления, ДанныеДляПроведения.УдержанияПоСотрудникам);
	
	// Учет начисленной зарплаты
	УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(ЭтотОбъект.Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения.НДФЛ, 
			ДанныеДляПроведения.МенеджерВременныхТаблиц, Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
	УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(ЭтотОбъект.Движения, Отказ, Организация, МесяцНачисления,
			ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, НеОпределено, НеОпределено, Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
	УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(ЭтотОбъект.Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам);
	
	// Страховые взносы
	УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения.МенеджерВременныхТаблиц, , Истина);
	
	УчетСтраховыхВзносов.СформироватьИсчисленныеВзносы(Движения, Отказ, Организация, КонецМесяца(МесяцНачисления), ДанныеДляПроведения.СтраховыеВзносы);
	УчетСтраховыхВзносов.СформироватьСтраховыеВзносыПоФизическимЛицам(Движения, Отказ, Организация, МесяцНачисления, Ссылка, ДанныеДляПроведения.СтраховыеВзносы);
	
	Если Не Отказ Тогда
		
		// формирование проводок
		ДанныеДляПроведения = ОтражениеЗарплатыВУчете.НоваяСтруктураРезультатыРасчетаЗарплаты();
		ДанныеДляПроведения.НачисленияУдержания = Движения.НачисленияУдержанияПоСотрудникам.Выгрузить();
		ДанныеДляПроведения.СтраховыеВзносы = Движения.СтраховыеВзносыПоФизическимЛицам.Выгрузить();
		СтрокаСписокТаблиц = "НачисленнаяЗарплатаИВзносы, НачисленныйНДФЛ, УдержаннаяЗарплата";
		ОтражениеЗарплатыВБухучете.СформироватьДвиженияПоДокументу(Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения, СтрокаСписокТаблиц);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПроведения()
	
	ДанныеДляПроведенияНачисленияЗарплаты = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	СписокФизическихЛиц = Неопределено;
	Если ДополнительныеСвойства.Свойство("ФизическиеЛица")
		И ДополнительныеСвойства.ФизическиеЛица.Количество() > 0 Тогда
		
		СписокФизическихЛиц = ДополнительныеСвойства.ФизическиеЛица
		
	КонецЕсли;
	
	РасчетЗарплаты.ЗаполнитьНачисления(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, , , , , СписокФизическихЛиц);
	РасчетЗарплаты.ЗаполнитьУдержания(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, , СписокФизическихЛиц);
	РасчетЗарплаты.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, , СписокФизическихЛиц);
	ОтражениеЗарплатыВБухучете.ДополнитьНачисленияДаннымиОЕНВД(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, МесяцНачисления, Организация);
	
	РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, СписокФизическихЛиц);
	РасчетЗарплаты.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведенияНачисленияЗарплаты, Ссылка, СписокФизическихЛиц);
	
	Возврат ДанныеДляПроведенияНачисленияЗарплаты;
	
КонецФункции

Процедура ЗаполнитьНачисленоУдержано() Экспорт
	
	Начислено = Начисления.Итог("Результат");
	
	Удержано = Удержания.Итог("Результат");
	Удержано = Удержано + НДФЛ.Итог("Налог");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
