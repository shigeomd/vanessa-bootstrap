&НаКлиенте
Перем СтрокаПоискаПоКБК;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		
		// Если документ скопирован и есть расчетв у.е., пересчитаем суммы взаиморасчетов на дату документа
		Если ЕстьРасчетыВУсловныхЕдиницах И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПересчитатьСуммыВзаиморасчетов();
		КонецЕсли;
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	НастройкиПредупреждений.РабочаяДатаИзДокумента = НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(ОбщегоНазначения.РабочаяДатаПользователя());
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтотОбъект, Элементы.ИнформационныеСсылки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// Инициализируем свойства платежа
	ИнициализироватьСвойстваПлатежаНаСервере(, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Оповестим оплачиваемые документы выплаты зарплаты
	Если Объект.ВидОперации = ВидОперацииПеречислениеЗП И Объект.Проведен Тогда
		Для каждого СтрокаПлатеж Из Объект.ПеречислениеЗаработнойПлаты Цикл
			Оповестить("ОбновитьФорму",, СтрокаПлатеж.Ведомость);
		КонецЦикла;
	КонецЕсли;
	
	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка);
	ОповеститьОбИзменении(Тип("ДокументСсылка.ПлатежноеПоручение"));
	
	Оповестить("ИзменениеВыписки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСписаниеСРасчетногоСчета";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Объект.НеПодтвержденоВыпискойБанка Тогда
			Отказ = Истина;
			ТекстВопроса = НСтр("ru = 'Проведение документа возможно только после установки флага ""Подтверждено выпиской банка"".
				|Записать документ без проведения?'");
			
			Оповещение = Новый ОписаниеОповещения("ВопросПередЗаписьюЗавершение", ЭтотОбъект, ПараметрыЗаписи);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Иначе
			КлючеваяОперация = "ПроведениеСписаниеСРасчетногоСчета";
			ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Документы.СписаниеСРасчетногоСчета.УстановитьВидНалоговогоОбязательства(ТекущийОбъект, ВидНалоговогоОбязательства);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение   = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" И ТипЗнч(Источник) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
			ОрганизацияПриИзмененииСервер();
		Иначе
			УстановитьФункциональныеОпцииФормы();
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		
		Если ВыбранноеЗначение.Свойство("СчетДт") Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = ВыбранноеЗначение.СчетДт;
			ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов  = Новый Массив;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидНалоговогоОбязательства");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если есть договоры в у.е., то необходимо получение курсов валют.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ЕстьРасчетыВУсловныхЕдиницах;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// Покажем оповещение о появлении механизма рабочей даты.
	Если НастройкиПредупреждений.РабочаяДатаИзДокумента 
		И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("РабочаяДатаИзДокумента",, НастройкиПредупреждений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		ВидОперацииПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		НалогПриИзмененииНаСервере(Новый Массив, СтрокаПоискаПоКБК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(Параметры.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(Параметры.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидНалоговогоОбязательстваПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
		ВидНалоговогоОбязательстваПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОтраженияБУНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Счет",        Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("Субконто1",   Объект.СубконтоДт1);
	ПараметрыФормы.Вставить("Субконто2",   Объект.СубконтоДт2);
	ПараметрыФормы.Вставить("Субконто3",   Объект.СубконтоДт3);
	ПараметрыФормы.Вставить("Направление", "Дт");
	
	ОткрытьФорму("ОбщаяФорма.ПорядокОтраженияБУ", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	СчетОрганизацииПриИзмененииСервер(Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		УстановитьПодразделениеДт(ЭтотОбъект);
	Иначе
		Объект.ПодразделениеДт = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетБанкПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетБанк) Тогда
		Возврат;
	КонецЕсли;
	
	СчетБанкПриИзмененииСервер(Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	СчетКонтрагентаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СуммаДокументаПриИзменении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПрочиеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Возврат;
	КонецЕсли;
	
	СчетУчетаПрочиеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗадержкаЗарплатыПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаРасчетовСКонтрагентом, "ЗадержкаЗарплаты", Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	ПоляОбъекта.Вставить("Подразделение", "ПодразделениеДт");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентом, Объект, ПоляОбъекта,, ЗначенияСубконто);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомПереводПриИзменении(Элемент)
	
	ПереводНаДругойСчетУстановитьДоступностьПодразделениеДт(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
		СформироватьТекстРасходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = СписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "СубконтоДт%Индекс%");
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвержденоВыпискойБанкаПриИзменении(Элемент)
	
	Объект.НеПодтвержденоВыпискойБанка = НЕ ПодтвержденоВыпискойБанка;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПлатежноеПоручениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ Модифицированность Тогда
		ОбъектЗаписан = Записать();
		
		Если НЕ ОбъектЗаписан Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПлатежноеПоручение) Тогда
		ПоказатьЗначение(, ПлатежноеПоручение);
	Иначе
		Если Объект.ПометкаУдаления Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя вводить платежное поручение на основании документа, помеченного на удаление!'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыСписания = Новый Структура("Основание, ВидОперации", Параметры.Ключ, Объект.ВидОперации);
		ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыСписания, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИзменениеПериодаУплаты(ЭтотОбъект, "Объект.НалоговыйПериод", "НалоговыйПериодСтрока", Направление);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	ИзменениеПериодаУплаты(ЭтотОбъект, "Объект.НалоговыйПериод", "НалоговыйПериодСтрока");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Значение = Объект.НалоговыйПериод;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НалоговыйПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		Новый Структура("Значение, РежимВыбораПериода, ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Объект.СуммаДокумента = СуммаВыплаченнойЗарплатыРаботнику(
			Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
	Иначе
		Объект.СуммаДокумента = 0;
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",  Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет"));
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора",
			Новый Структура("ПараметрыОтбораСписка, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ФормаВыбора",
			Новый Структура("Отбор, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Элемент = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		Элемент = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
			ЗаполнитьОтражениеВУСННаСервере(Ложь, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПрочиеПриИзменении(Элемент)
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееРасходыУСНПриИзменении(Элемент)
	
	ОграничитьПринимаемыеРасходыДляУСН();
	ОграничитьНДСДляУСН();
	
	УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееНДСУСНПриИзменении(Элемент)
	ОграничитьНДСДляУСН();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИнициализироватьСвойстваПлатежаНаКлиенте();
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьЗначенияСвойств(Элементы.РасшифровкаПлатежа.ТекущиеДанные, СвойстваПлатежа);
	КонецЕсли;
	
	Если НоваяСтрока И ЕстьРасчетыВУсловныхЕдиницах Тогда
		ЗаполнитьНадписиВРасшифровке(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ОбновитьИтоги(ЭтотОбъект);
	ОбновитьИтогиУСН(ЭтотОбъект);
	ОпределитьНаличиеРасчетовВУсловныхЕдиницах(ЭтотОбъект);
	СформироватьНазначениеПлатежаСервер(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ОбновитьИтоги(ЭтотОбъект);
		ОбновитьИтогиУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = Объект.РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента = СвойстваПлатежа.ДоговорКонтрагента Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	
	ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУсловныхЕдиницах ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	
	ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДоговорКонтрагента();

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств <> СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу") Тогда
		СтрокаПлатеж.Сделка = Неопределено;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета("РасшифровкаПлатежа.СпособПогашенияЗадолженности", Объект, СтрокаПлатеж);
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю") Тогда
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана дата.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана организация.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан контрагент.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан договор.'"));
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            Объект.Контрагент);
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",        "Метаданные.Документы.СписаниеСРасчетногоСчета.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
		ПараметрыОбъекта.Вставить("СчетУчета",             СчетУчета);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыДокумента, СтрокаПлатеж);
	ПараметрыДокумента.Дата = Объект.Дата;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ЗаполнитьПустыеКурсыВалют(СтрокаПлатеж, ЭтотОбъект);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И КратностьДокумента <> 0 Тогда
		СуммаРуб = СтрокаПлатеж.СуммаПлатежа * КурсДокумента / КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаНДСУСНПриИзменении(Элемент)
	
	ОграничитьСуммуНДСДляУСНПоСтроке(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасходыУСНПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ОграничитьПринимаемыеРасходыДляУСНПоСтроке(СтрокаПлатеж);
	ОграничитьСуммуНДСДляУСНПоСтроке(СтрокаПлатеж);
	
	Если СтрокаПлатеж.РасходыУСН = 0 Тогда
		СтрокаПлатеж.РаспределятьРасходыУСН = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПеречислениеЗаработнойПлаты

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриИзменении(Элемент)
	
	Если НЕ РедактированиеПеречислениеЗаработнойПлаты Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
	
	СуммаКВыплатеДоИзменения = СтрокаПлатеж.СуммаПлатежа;
	
	СтрокаПлатеж.СуммаПлатежа = СуммаЗаработнойПлатыПоВедомости(
		СтрокаПлатеж.Ведомость, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
		УчетЗарплатыИКадровВоВнешнейПрограмме);
		
	Если СуммаКВыплатеДоИзменения <> СтрокаПлатеж.СуммаПлатежа Тогда
		ТекстСообщения = НСтр("ru = 'Состав оплачиваемых ведомостей был изменен. Сумма документа пересчитана!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПроверитьДублиВедомостей(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РедактированиеПеречислениеЗаработнойПлаты = Ложь;
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущаяВедомость = ТекущиеДанные.Ведомость;
			Если ПроверитьДублиВедомостей(ТекущаяВедомость) Тогда
				Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные.Ведомость    = "";
				Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные.СуммаПлатежа = 0;
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РедактированиеПеречислениеЗаработнойПлаты = Истина;
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
		Иначе
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",     Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект"));
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора", Новый Структура("ПараметрыОтбораСписка", ПараметрыФормы), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПослеУдаления(Элемент)
	
	Объект.СуммаДокумента = Объект.ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПеречислениеДепонентов

&НаКлиенте
Процедура ПеречислениеДепонентовВедомостьПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ПеречислениеДепонентов.ТекущиеДанные;
	СтрокаПлатеж.СуммаПлатежа = СуммаНеВыплаченнойЗарплатыРаботнику(
		Объект.Ссылка, Объект.Контрагент, СтрокаПлатеж.Ведомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",  Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.Касса"));		
		
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора", Новый Структура("ПараметрыОтбораСписка", ПараметрыФормы), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПеречислениеДепонентов.ТекущиеДанные;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовВедомостьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПроверитьДублиВедомостей(ВыбранноеЗначение, "ПеречислениеДепонентов") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовПриИзменении(Элемент)
	
	Если НЕ РедактированиеПеречислениеДепонированнойЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.ПеречислениеДепонентов.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РедактированиеПеречислениеДепонированнойЗарплаты = Истина;
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.ПеречислениеДепонентов.ТекущиеДанные;
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
		Иначе
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РедактированиеПеречислениеДепонированнойЗарплаты = Ложь;
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ПеречислениеДепонентов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущаяВедомость = ТекущиеДанные.Ведомость;
			Если ПроверитьДублиВедомостей(ТекущаяВедомость, "ПеречислениеДепонентов") Тогда
				Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные.Ведомость    = "";
				Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные.СуммаПлатежа = 0;
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.ПеречислениеДепонентов.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовПослеУдаления(Элемент)
	
	Объект.СуммаДокумента = Объект.ПеречислениеДепонентов.Итог("СуммаПлатежа");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РеестрУплатыНДФЛ(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		ТекстСообщения = НСтр("ru = 'Печать реестра уплаты НДФЛ возможна только после проведения документа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраНДФЛ(Новый Структура("МенеджерПечати, Ссылка, Форма",
		"Документ.СписаниеСРасчетногоСчета", Объект.Ссылка, ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУсловногоОформления = Новый Структура;
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеШапкаИВидимость();
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()
	
	// ПорядокОтраженияБУ
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокОтраженияБУ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокОтраженияБУЗаполнен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Контрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП);
	
	Если ЭтотОбъект.УчетЗарплатыИКадровВоВнешнейПрограмме И ЭтотОбъект.ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
		СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику);
		СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Реквизиты не используются при расчетах по кредитам и займам, а также прочих расчетах с контрагентами.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСуммаВал");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты используются только при расчетах в у.е.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСуммаВал");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ЕстьРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("РасшифровкаПлатежаПроинициализировано") Тогда
		
		Форма.УстановитьУсловноеОформлениеРасшифровкаПлатежа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРасшифровкаПлатежа() Экспорт
	
	НастройкиУсловногоОформления.Вставить("РасшифровкаПлатежаПроинициализировано", Истина);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Нет>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Нет>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.Сделка",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<документ>'"));
	
	// РасшифровкаПлатежаСпособПогашенияЗадолженности
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<способ погашения>'"));
	
	// РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Статья движения ден. средств>'"));
	
	// РасшифровкаПлатежаДоговорКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.ДоговорКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Договор>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет расчетов>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет авансов>'"));
	
	// РасшифровкаПлатежаРасходыУСН
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаРасходыУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСНДоходы",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.РасходыУСН", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не принимаются>'"));
	
	// РасшифровкаПлатежаРаспределятьРасходыУСН
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаРаспределятьРасходыУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСНДоходы",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.РасходыУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИнициализироватьСвойстваПлатежаНаКлиенте(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПериодаУплаты(Данные, ПутьРеквизита, ПутьРеквизитаПредставления, Направление = Неопределено)
	
	Если Направление = Неопределено Тогда
		Значение = Объект.Дата;
	Иначе
		Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Данные, ПутьРеквизита);
		Значение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Данные, ПутьРеквизита, Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Данные, ПутьРеквизитаПредставления, Формат(Значение, "ДФ='MMMM yyyy'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьПринимаемыеРасходыДляУСН()
	
	МаксРасход = Объект.СуммаДокумента;
	Если ОплатаВВалюте Тогда
		МаксРасход = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаДокумента,
			Объект.ВалютаДокумента, ВалютаРегламентированногоУчета,
			КурсДокумента,      1,
			КратностьДокумента, 1);
	КонецЕсли;
		
	Объект.Графа7_УСН = Мин(Объект.Графа7_УСН, МаксРасход);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьПринимаемыеРасходыДляУСНПоСтроке(СтрокаПлатеж)
	
	МаксРасход = СтрокаПлатеж.СуммаПлатежа;
	
	Если ОплатаВВалюте Тогда
		МаксРасход = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
			Объект.ВалютаДокумента, ВалютаРегламентированногоУчета,
			КурсДокумента,      1,
			КратностьДокумента, 1);
	КонецЕсли;
	
	СтрокаПлатеж.РасходыУСН = Мин(СтрокаПлатеж.РасходыУСН, МаксРасход);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьСуммуНДСДляУСНПоСтроке(СтрокаПлатеж)
	
	Если СтрокаПлатеж.НДСУСН > СтрокаПлатеж.РасходыУСН Тогда
		СтрокаПлатеж.НДСУСН = СтрокаПлатеж.РасходыУСН;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьНДСДляУСН()
	
	Если Объект.НДС_УСН > Объект.Графа7_УСН Тогда
		Объект.НДС_УСН = Объект.Графа7_УСН;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДублиВедомостей(ТекущаяВедомость, ТабличнаяЧасть = "ПеречислениеЗаработнойПлаты")
	
	ЕстьДублиВедомостей = Ложь;
	
	СтрокаПоиска    = Новый Структура("Ведомость", ТекущаяВедомость);
	НайденныеСтроки = Объект[ТабличнаяЧасть].НайтиСтроки(СтрокаПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Если НайденныеСтроки.Количество() = 1 Тогда
			Если Элементы[ТабличнаяЧасть].ТекущиеДанные.НомерСтроки <> НайденныеСтроки[0].НомерСтроки Тогда
				ЕстьДублиВедомостей = Истина;
			КонецЕсли;
		Иначе
			ЕстьДублиВедомостей = Истина;
		КонецЕсли;
		
		Если ЕстьДублиВедомостей Тогда
			ТекстСообщения = НСтр("ru = 'Указанная ведомость уже выбрана в документе!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьДублиВедомостей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭтоУплатаНалога = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога"));
	ЭтоУплатаНДФЛ = ЭтоУплатаНалога И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(Форма.ВидНалога);
	ЭтоУплатаФиксированныхВзносов  = ЭтоУплатаНалога И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(Форма.ВидНалога);
	ЭтоОбязательныеСтраховыеВзносы = ЭтоУплатаНалога И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоОбязательныеСтраховыеВзносы(Форма.ВидНалога);
	
	Элементы.Налог.Видимость                      = ЭтоУплатаНалога;
	Элементы.ВидНалоговогоОбязательства.Видимость = ЭтоУплатаНалога;
	
	Элементы.ГруппаПериодУплаты.Видимость  = Форма.ИспользоватьНачислениеЗарплаты И ЭтоУплатаНДФЛ
		Или ЭтоОбязательныеСтраховыеВзносы И Форма.ПрименениеУСНДоходы;
	Элементы.РеестрУплатыНДФЛ.Видимость    = Форма.ИспользоватьНачислениеЗарплаты И ЭтоУплатаНДФЛ;
	Элементы.СтраховойПериод.Видимость     = ЭтоУплатаФиксированныхВзносов;
	
	Элементы.Контрагент.Видимость   = (Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя"));
	Элементы.Контрагент.Доступность = (Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет"));
	
	Элементы.СчетКонтрагента.Видимость   = (Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет"));
	Элементы.СчетКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.ГруппаПорядокОтраженияБУ.Видимость = Форма.ПользовательУправляетСчетамиУчета И ЭтоУплатаНалога;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание") Тогда
		
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаРасчетовСКонтрагентом, "Прочие", Истина);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику") Тогда
		
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаРасчетовСКонтрагентом, "ЗадержкаЗарплаты", Истина);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		
		ПереводНаДругойСчетУстановитьДоступностьПодразделениеДт(Форма);
		
	КонецЕсли;
	
	Элементы.СтатьяДвиженияДенежныхСредств.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику"));
	
	УправлениеЭлементамиОтраженияВУСН(Форма);
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ИтогоСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Форма.ИтогоВсегоНДС     = Объект.РасшифровкаПлатежа.Итог("СуммаНДС");
	
	Если Форма.СписокВидовСРасшифровкойПлатежа.НайтиПоЗначению(Объект.ВидОперации) <> Неопределено Тогда
		Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(Форма.ИтогоСуммаПлатежа, "ЧЦ=12; ЧДЦ=2");
		Элементы.РасшифровкаПлатежаСуммаНДС.ТекстПодвала     = Формат(Форма.ИтогоВсегоНДС,     "ЧЦ=12; ЧДЦ=2");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж)
	
	ЗначениеСтавкиНДС     = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	ЗаполнитьПустыеКурсыВалют(СтрокаПлатеж, Форма);
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		Форма.Объект.ВалютаДокумента, СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПустыеКурсыВалют(СтрокаПлатеж, Форма)
	
	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДоговорКонтрагента()
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ЗначенияЗаполнения = Новый Структура;
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора));
	ЗначенияЗаполнения.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	Если ОплатаВВалюте Тогда
		ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
		ЗначенияЗаполнения.Вставить("Валютный", ОплатаВВалюте);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",   Новый ФиксированныйМассив(ВидыДоговора)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Форма.ОплатаВВалюте));
	Если Форма.ОплатаВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораБанковскихСчетов(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	
	Если Форма.ПользовательУправляетСчетамиУчета ИЛИ НЕ ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Иначе
		Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Форма.ВладелецСчетаКонтрагента));
	Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВладельцаСчетаКонтрагента(Форма)
	
	Объект = Форма.Объект;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		Форма.ВладелецСчетаКонтрагента = Объект.Организация;
	Иначе
		Форма.ВладелецСчетаКонтрагента = Объект.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораСчетаПеревода(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив;
	Для каждого СтарыйПараметр Из Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоДт%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "СубконтоДт%Индекс%", "СубконтоДт%Индекс%Прочие", ПараметрыДокумента);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "СубконтоДт%Индекс%", "СубконтоДт%Индекс%ЗадержкаЗарплаты", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru='Введите ИНН или наименование'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Постфикс, ЕстьПодразделение)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1" + Постфикс,
		"СубконтоДт2" + Постфикс,
		"СубконтоДт3" + Постфикс);
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто1" + Постфикс, "ЗаголовокСубконто2" + Постфикс, "ЗаголовокСубконто3" + Постфикс);
	
	Если ЕстьПодразделение Тогда
		ПоляФормы.Вставить("Подразделение",      "ПодразделениеДт" + Постфикс);
		ЗаголовкиПолей.Вставить("Подразделение", "ЗаголовокПодразделение");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);
	
	Форма.ЗаголовокПодразделение = "Подразделение:";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодразделениеДт(Форма)
	
	Объект = Форма.Объект;
	Если Объект.ВидОперации    = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику")
		Тогда
		Объект.ПодразделениеДт = Неопределено;
	Иначе
		Объект.ПодразделениеДт = Объект.ПодразделениеОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма)
	
	Объект = Форма.Объект;
	
	ЕстьРасчетыВУЕ = Ложь;
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			ЕстьРасчетыВУЕ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУЕ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж)
	
	СтрокаПлатеж.НадписьКурс   = НСтр("ru = 'Курс'");
	СтрокаПлатеж.НадписьСумма  = НСтр("ru = 'Сумма'");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереводНаДругойСчетУстановитьДоступностьПодразделениеДт(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентом);
	Элементы.ПодразделениеДтПеревод.Доступность = ДанныеСчета.УчетПоПодразделениям;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, Форма)
	
	Объект = Форма.Объект;
	
	Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам") Тогда
		
		ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
		
		ДанныеСтроки = Новый Структура("СуммаПлатежа, РасходыУСН, НДСУСН, РаспределятьРасходыУСН, СчетУчетаРасчетовСКонтрагентом");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаПлатеж);
		ЗаполнитьОтражениеСтрокиВУСННаСервере(ДанныеСтроки, ПараметрыУСН);
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, ДанныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиУСН(Форма)
	
	Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
		Объект = Форма.Объект;
		Объект.Графа7_УСН = Объект.РасшифровкаПлатежа.Итог("РасходыУСН");
		Объект.НДС_УСН    = Объект.РасшифровкаПлатежа.Итог("НДСУСН");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьТекстРасходыУСН(Форма)
	
	Если Не Форма.ПрименениеУСН Или Форма.ПрименениеУСНДоходы  Тогда
		Форма.ТекстРасходыУСН = "";
		Возврат;
	КонецЕсли;
	
	Объект      = Форма.Объект;
	ВалютаРегл = Форма.ВалютаРегламентированногоУчета;
	СтрФорматСумм = "Л=ru; ЧРД=,; ЧРГ=' '; ЧН=0; ЧГ=3,0";
	
	СуммаРасходыВсего = Объект.СуммаДокумента;
	Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета Тогда
		СуммаРасходыВсего = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаРасходыВсего,
			Объект.ВалютаДокумента, Форма.ВалютаРегламентированногоУчета,
			Форма.КурсДокумента, 1,
			Форма.КратностьДокумента, 1);
	КонецЕсли;
	
	ТекстРасходы = "";
	
	СуммаРасходыНеПринимаемые = СуммаРасходыВсего - Объект.Графа7_УСН;
	Если СуммаРасходыВсего = 0 Тогда
		ТекстРасходы = НСтр("ru = 'Сумма документа не указана'");
	ИначеЕсли СуммаРасходыНеПринимаемые = 0 Тогда
		ТекстРасходы = НСтр("ru = 'Расходы принимаются полностью'");
	ИначеЕсли Объект.Графа7_УСН = 0 Тогда
		ТекстРасходы = НСтр("ru = 'Принимаемые расходы отсутствуют'");
	Иначе
		ТекстРасходы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Непринимаемые расходы: %1 %2'"),
			Формат(СуммаРасходыНеПринимаемые, СтрФорматСумм), ВалютаРегл);
	КонецЕсли;
	
	Форма.ТекстРасходыУСН = ТекстРасходы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиОтраженияВУСН(Форма)
	
	Если Не Форма.ПрименениеУСН Или Форма.ПрименениеУСНДоходы  Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Форма.ВалютаРасходовУСН = Форма.ВалютаРегламентированногоУчета;
	
	Элементы.ГруппаОтражениеВУСН.ОтображатьЗаголовок = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание"));
	Элементы.ГруппаОтражениеВУСН.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание")
		Или (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога")
				И Форма.ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ПрочиеНалогиИСборы")));
	
	Элементы.НДСУСН.Доступность                = (Объект.Графа7_УСН <> 0);
	Элементы.РаспределятьРасходУСН.Доступность = (Объект.Графа7_УСН <> 0);
	
	СформироватьТекстРасходыУСН(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор Тогда
		
		СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		СвойстваПлатежа.СпособПогашенияЗадолженности = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.Автоматически");
		
		Возврат СвойстваПлатежа;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента, ПрименениеУСН,
			|СтатьяДвиженияДенежныхСредств");
		
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		
		Если ПараметрыОбъекта.ВалютаДокумента = ПараметрыОбъекта.ВалютаРегламентированногоУчета Тогда
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Ложь);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		Иначе
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Истина);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		КонецЕсли;
		
		Возврат СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор);
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПустаяСтруктураСвойстваПлатежа()
	
	СвойстваПлатежа = Новый Структура("ДоговорКонтрагента,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаРасчетыВУсловныхЕдиницах,
		|СпособПогашенияЗадолженности, СтавкаНДС,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СтатьяДвиженияДенежныхСредств");
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеПараметрыОбъекта(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, СчетОрганизации, ВалютаДокумента, Контрагент, СчетКонтрагента, СчетБанк");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,   Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,   Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                  Форма.ОплатаВВалюте);
	ПараметрыОбъекта.Вставить("ПрименениеУСН",                  Форма.ПрименениеУСН);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов") Тогда
		ПараметрыОбъекта.Вставить("ПлатежнаяВедомость", Объект.ПлатежнаяВедомость);
		ПараметрыОбъекта.Вставить("Ссылка",             Объект.Ссылка);
	КонецЕсли;
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииСчетаОрганизации(Знач ПараметрыОбъекта)
	
	СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыОбъекта.СчетОрганизации, "ВалютаДенежныхСредств, ПодразделениеОрганизации");
	НоваяВалюта   = СвойстваСчета.ВалютаДенежныхСредств;
	
	Если ПараметрыОбъекта.ОплатаВВалюте И ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта Тогда
		Возврат Новый Структура("ВалютаДокумента, ПодразделениеОрганизации",
			НоваяВалюта, СвойстваСчета.ПодразделениеОрганизации);
	КонецЕсли;
	
	НоваяВалюта    = ?(НоваяВалюта = Неопределено, ПараметрыОбъекта.ВалютаРегламентированногоУчета, НоваяВалюта);
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, ПараметрыОбъекта.Дата);
	
	НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетКонтрагента, ПараметрыОбъекта.Контрагент, СвойстваСчета.ВалютаДенежныхСредств);
	КонецЕсли;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		ВалютаОбъекта = ПараметрыОбъекта.ВалютаДокумента;
		ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта;
		
		ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
		Если НЕ ПользовательУправляетСчетамиУчета Тогда
			ПараметрыОбъекта.ОплатаВВалюте = НоваяВалюта <> ПараметрыОбъекта.ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		
		ПараметрыОбъекта.ВалютаДокумента = ВалютаОбъекта;
		
		Если НЕ ПользовательУправляетСчетамиУчета Тогда
			НовыеПараметры.Вставить("ОплатаВВалюте", ПараметрыОбъекта.ОплатаВВалюте);
		КонецЕсли;
		
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметры.Вставить("ВалютаДокумента",          НоваяВалюта);
	НовыеПараметры.Вставить("ПодразделениеОрганизации", СвойстваСчета.ПодразделениеОрганизации);
	НовыеПараметры.Вставить("КурсДокумента",            СтруктураКурса.Курс);
	НовыеПараметры.Вставить("КратностьДокумента",       СтруктураКурса.Кратность);
	НовыеПараметры.Вставить("СчетКонтрагента",          НовыйСчетКонтрагента);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииОрганизации(Знач ПараметрыОбъекта)
	
	НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
			ПараметрыОбъекта.ВалютаРегламентированногоУчета, НЕ ПараметрыОбъекта.ОплатаВВалюте);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйСчетОрганизации) Тогда
		ПараметрыОбъекта.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		НовыеПараметры = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
	Иначе
		НовыеПараметры = Новый Структура("ВалютаДокумента, ПодразделениеОрганизации", ПараметрыОбъекта.ВалютаДокумента);
	КонецЕсли;
	
	Если НЕ НовыеПараметры.Свойство("ДоговорКонтрагента")
		И Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетОрганизации", НовыйСчетОрганизации);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииКонтрагента(Знач ПараметрыОбъекта)
	
	НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетКонтрагента, ПараметрыОбъекта.Контрагент,
			ПараметрыОбъекта.ВалютаДокумента, Истина);
	КонецЕсли;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетКонтрагента", НовыйСчетКонтрагента);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииФизЛица(Знач ПараметрыОбъекта, Знач УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("Ссылка",  ПараметрыОбъекта.Ссылка);
	НовыеПараметры.Вставить("Контрагент", ПараметрыОбъекта.Контрагент);
	НовыеПараметры.Вставить("ПлатежнаяВедомость", ПараметрыОбъекта.ПлатежнаяВедомость);
	НовыеПараметры.Вставить("СуммаДокумента", СуммаВыплаченнойЗарплатыРаботнику(
		ПараметрыОбъекта.Ссылка, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ПлатежнаяВедомость,
		УчетЗарплатыИКадровВоВнешнейПрограмме));
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзменении(Знач ПараметрыОбъекта, Знач ОплатаВВалюте)
	
	Если ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		ОплатаВВалютеПредыдущий   = ПараметрыОбъекта.ОплатаВВалюте;
		СчетОрганизацииПредыдущий = ПараметрыОбъекта.СчетОрганизации;
		
		НовыйСчетОрганизации      = Справочники.БанковскиеСчета.ПустаяСсылка();
		Если ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.ВалютаРегламентированногоУчета, ОплатаВВалютеПредыдущий);
		КонецЕсли;
		
		// необходимо временно поменять этот параметр, чтобы получить договор по изменившейся валюте
		ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалюте;
		ПараметрыОбъекта.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		НовыеПараметры = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
		НовыеПараметры.Вставить("СчетОрганизации",   НовыйСчетОрганизации);
		
		// восстановим значение параметров
		ПараметрыОбъекта.ОплатаВВалюте   = ОплатаВВалютеПредыдущий;
		ПараметрыОбъекта.СчетОрганизации = СчетОрганизацииПредыдущий;
	Иначе
		
		НовыеПараметры = Новый Структура("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежаСервер(Знач ПараметрыПлатежа, Знач ПолучатьДоговор)
	
	СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
	СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	
	Если ПолучатьДоговор Тогда
		ПараметрыПлатежа.ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
	КонецЕсли;
	
	СвойстваПлатежа.ДоговорКонтрагента            = ПараметрыПлатежа.ДоговорКонтрагента;
	СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ПараметрыПлатежа.СтатьяДвиженияДенежныхСредств;
	
	Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах;
		
		Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
			СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СвойстваПлатежа.СтавкаНДС     = УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(ПараметрыПлатежа.ДоговорКонтрагента);
		ИначеЕсли ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
			СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			Если ПараметрыПлатежа.ПрименениеУСН Тогда
				СвойстваПлатежа.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				СвойстваПлатежа.СтавкаНДС = УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(ПараметрыПлатежа.ДоговорКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
	КонецЕсли;
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)
	
	Объект = Форма.Объект;
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация", Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",   Объект.СчетУчетаРасчетовСКонтрагентом);
	
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаЗаработнойПлатыПоВедомости(Знач ПлатежнаяВедомость, Знач Ссылка, Знач НомерСтроки, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	Ведомости = Новый Массив;
	Ведомости.Добавить(ПлатежнаяВедомость);
	
	ПлатежнаяВедомость = Ведомости[0];
	ТаблицаВедомостей  = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости,, Ложь);
	
	ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать(, "Ведомость");
	ТаблицаДокументовОплаты.Свернуть("Ведомость",);
	
	ВедомостьОплачена = Ложь;
	Если ТаблицаВедомостей.Количество() = 0 Тогда
		ВедомостьОплачена = Истина;
	КонецЕсли;
	
	Если ВедомостьОплачена Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ %1 полностью оплачен!'"), ПлатежнаяВедомость);
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
		"Колонка", "Корректность", НСтр("ru = 'Ведомость'"), НомерСтроки, НСтр("ru = 'Перечисление заработной платы'"), ТекстСообщения);
		ШаблонПоля = "ПеречислениеЗаработнойПлаты[%1].Ведомость";
		Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
		СуммаДокумента = 0;
	Иначе
		СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате") + ТаблицаВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач ФизЛицо, Знач ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		ТаблицаНеоплаченныхВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, Ложь);
		ТаблицаОплаченныхВедомостей   = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, Истина);
		
		Если ТаблицаНеоплаченныхВедомостей.Количество() = 0 И ТаблицаОплаченныхВедомостей.Количество() = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В выбранной ведомости отсутствуют сведения о заработной плате сотрудника %1!'"), ФизЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			
		Иначе
			
			ВедомостьОплачена = ТаблицаОплаченныхВедомостей.Количество() <> 0;
			
			Если ВедомостьОплачена Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По текущей ведомости заработная плата сотрудника %1 выплачена ранее!'"), ФизЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			Иначе
				СтрокаВедомости = ТаблицаНеоплаченныхВедомостей[0];
				СуммаДокумента = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаНеВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач ФизЛицо, Знач ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(ФизЛицо);
		
		НевыплаченныеДепоненты = УчетЗарплаты.НевыплаченныеДепоненты(
		Ссылка, Ссылка.Организация, Ссылка.Дата, МассивФизическихЛиц);
		
		ВедомостьДепонентов = НевыплаченныеДепоненты.Найти(ПлатежнаяВедомость, "Ведомость");
		
		Если ВедомостьДепонентов = Неопределено Тогда
			СуммаДокумента = 0;
		Иначе
			СуммаДокумента = ВедомостьДепонентов.Сумма;
		КонецЕсли;
		
		Если СуммаДокумента = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В выбранной ведомости отсутствуют сведения о депонированной заработной плате сотрудника!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Ведомость");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

&НаСервере
Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж)
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОтражениеСтрокиВУСННаСервере(СтрокаПлатеж, Знач ПараметрыУСН)
	
	НалоговыйУчетУСН.ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаПлатеж, ПараметрыУСН);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРасшифровкуПлатежа(СохранитьСтатьюДДС = Истина)
	
	ИнициализироватьСвойстваПлатежаНаСервере();
	Если НЕ СохранитьСтатьюДДС Тогда
		СвойстваПлатежа.Вставить("СтатьяДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(Объект.РасшифровкаПлатежа, "РасшифровкаПлатежа", Объект, Документы.СписаниеСРасчетногоСчета);
		
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
		ОбновитьИтоги(ЭтотОбъект);
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи = Ложь, ПолучатьДоговор = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
			Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента",            Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
				ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
			
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ИспользоватьНачислениеЗарплаты        = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	ИспользоватьФорматОбменаЗУП25         = ПолучитьФункциональнуюОпцию("ИспользоватьФорматОбменаЗУП25",
		Новый Структура("Организация", Объект.Организация));
	ИспользоватьФорматОбменаЗУП30 = УчетЗарплаты.ИспользуетсяОбменСЗУП30(Объект.Организация);
	
	// Заполнение реквизитов формы
	
	ТекущаяДатаДокумента           = Объект.Дата;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетБанк).Валютный
		ИЛИ ЗначениеЗаполнено(Объект.ВалютаДокумента) И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета;
	
	УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	
	ВидОперацииПеречислениеЗП = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	СписокВидовСРасшифровкойПлатежа.ЗагрузитьЗначения(
		Документы.СписаниеСРасчетногоСчета.ПолучитьСписокВидовОперацийСРасшифровкойПлатежа().ВыгрузитьЗначения());
	
	УстановитьКурсДокумента();
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
	СвойстваПлатежа = Неопределено; // При открытии формы структуру не инициализируем, будет создана при первом обращении.
	
	ПлатежноеПоручение = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(
		Объект.Ссылка, Объект.ДокументОснование, НадписьПлатежноеПоручение);
	ПодтвержденоВыпискойБанка        = НЕ Объект.НеПодтвержденоВыпискойБанка;
	СгенерированноеНазначенияПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Объект,, Истина);
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.Заголовок = ?(ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств"),
		НСтр("ru = 'Договор / Статья ДДС'"), НСтр("ru = 'Договор'"));
	
	ЗаголовокСтатьяДДС = НСтр("ru = 'Статья движения ден. средств:'");
	
	НалоговыйПериодСтрока = Объект.НалоговыйПериод;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		Если ЗначениеЗаполнено(Объект.Налог) Тогда
			ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
		КонецЕсли;
		
		ЗначениеПериодаУплаты = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, "Объект.НалоговыйПериод");
		
		Если Параметры.Ключ.Пустая() Тогда
			ЗначениеПериодаУплаты = ?(ЗначениеЗаполнено(ЗначениеПериодаУплаты), ЗначениеПериодаУплаты, НачалоМесяца(Объект.Дата));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "НалоговыйПериодСтрока",
			Формат(ЗначениеПериодаУплаты, "ДФ='MMMM yyyy'"));
		
	КонецЕсли;
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);

	// Управление внешним видом формы
	ЗаполнитьВидНалоговогоОбязательстваНаСервере();
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере();
	УправлениеЭлементамиОтраженияВУСНСервер();
	УстановитьВидимостьСтраницНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	Элементы.ГруппаСтраницы.Видимость = (Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
		И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя
		И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику);
	
	Если Не Элементы.ГруппаСтраницы.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаПлатежПрочие);
	МассивСтраниц.Добавить(Элементы.ГруппаПереводНаДругойСчет);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеЗарплатыСводно);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеЗарплаты);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаДепонентов);
	
	// т.к. Расшифровка платежа теперь есть у многих видов операций,
	// сначала отработаем формы-исключения
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПлатежПрочие;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПереводНаДругойСчет;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоВедомостям;
		Если ВедетсяУчетРасчетовПоЗарплатеСводно И УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеречислениеЗарплатыСводно;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеречислениеЗарплаты;
			Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоВедомостям;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику;
		Если ВедетсяУчетРасчетовПоЗарплатеСводно И УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеречислениеЗарплатыСводно;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеречислениеЗарплаты;
			Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаДепонентов;
	Иначе
		// а затем тех, кто использует основную форму Расшифровки платежа
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Если УчетЗарплатыИКадровВоВнешнейПрограмме И ИспользоватьФорматОбменаЗУП25 Тогда
			Элементы.ГруппаПеречислениеЗарплатыСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Иначе
			Элементы.ГруппаПеречислениеЗарплатыСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		Если УчетЗарплатыИКадровВоВнешнейПрограмме И ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
			Элементы.ГруппаВыплатаДепонентовСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаДепонентовПустая;
		Иначе
			Элементы.ГруппаВыплатаДепонентовСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаДепонентовВедомость;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	ПрименениеУСН       = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация,       Объект.Дата);
	ПрименениеУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	ПлательщикЕНВД      = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация,       Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРасчетыВУсловныхЕдиницах = Ложь;
	МассивДоговоров   = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].РасчетыВУсловныхЕдиницах;
			
			ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУсловныхЕдиницах
				ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьРасчетыВУсловныхЕдиницах Тогда
		Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
			ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
	ПодтвержденоВыпискойБанка = НЕ Объект.НеПодтвержденоВыпискойБанка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств()
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	
	ОтбиратьПоВалюте = Ложь;
	ОбразецСчета     = Неопределено;
	Если НЕ ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		ОтбиратьПоВалюте = Истина;
		ОбразецСчета = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.СчетОрганизации)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация) Тогда
		ОтбиратьПоВалюте = Истина;
		Если ОплатаВВалюте Тогда
			ОбразецСчета = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		Иначе
			ОбразецСчета = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		КонецЕсли
	КонецЕсли;
	
	СчетаБанка = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, ОтбиратьПоВалюте, ОбразецСчета);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаБанка)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаБанка)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("ВидОперации");
	
	УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	
	Если НЕ ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		ПараметрОплатаВВалюте = Ложь;
	Иначе
		ПараметрОплатаВВалюте = ОплатаВВалюте;
	КонецЕсли;
	
	ВалютаДокументаПриИзмененииСервер(ПричиныИзменения, ПараметрОплатаВВалюте);
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка();
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		Объект.Контрагент      = Справочники.Контрагенты.ПустаяСсылка();
		Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации) Тогда
		Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Объект.Контрагент = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИндивидуальныйПредприниматель");
			Объект.Контрагент = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента)
		ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "Владелец") <> Объект.Контрагент Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			Объект.СчетКонтрагента, Объект.Контрагент,
			Объект.ВалютаДокумента, Истина);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("ВидОперации", ПричиныИзменения);
	
	УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
		ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
		СвойстваПлатежа  = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
	КонецЕсли;
	
	ПерезаполнитьРасшифровкуПлатежа(Ложь);
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	СформироватьНазначениеПлатежаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ВидОперацииОбработатьИзменение(Новый Массив);
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере();
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере();
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		УправлениеЭлементамиОтраженияВУСНСервер();
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтотОбъект);
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВидОперацииОрганизации(ПричиныИзменения)
	
	ДоступныеОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПолучитьСписокДоступныхЗначений(
		Новый Структура("Организация", Объект.Организация));
	
	Если ДоступныеОперации.Количество() > 0 И ДоступныеОперации.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		
		Объект.ВидОперации = ДоступныеОперации[0].Значение;
		ВидОперацииОбработатьИзменение(ПричиныИзменения);
		ОбновитьУсловноеОформление(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьКурсДокумента();
	ПересчитатьСуммыВзаиморасчетов();
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета("Дата", Объект));
	
	УправлениеЭлементамиОтраженияВУСНСервер();
	
	УправлениеФормой(ЭтотОбъект);
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");
	
	УстановитьФункциональныеОпцииФормы();
	
	ИспользоватьФорматОбменаЗУП25 = ПолучитьФункциональнуюОпцию("ИспользоватьФорматОбменаЗУП25",
		Новый Структура("Организация", Объект.Организация));
	ИспользоватьФорматОбменаЗУП30 = УчетЗарплаты.ИспользуетсяОбменСЗУП30(Объект.Организация);
	
	ПроверитьВидОперацииОрганизации(ПричиныИзменения);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИндивидуальныйПредприниматель");
		Объект.Контрагент = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
		Объект.СчетКонтрагента = Неопределено;
		УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		Объект.СчетКонтрагента = Неопределено;
		УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации, ВалютаДокумента, ПодразделениеОрганизации");
	УстановитьПодразделениеДт(ЭтотОбъект);
	Если ПараметрыОбъекта.ВалютаДокумента <> НовыеПараметры.ВалютаДокумента Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметры, "КурсДокумента, КратностьДокумента");
		Объект.СчетКонтрагента = НовыеПараметры.СчетКонтрагента;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	ПерезаполнитьРасшифровкуПлатежа();
	СформироватьНазначениеПлатежаСервер(Ложь);
	
	ЗаполнитьСчетаУчета("Организация", ПричиныИзменения);
	
	ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	УправлениеЭлементамиОтраженияВУСНСервер();
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтотОбъект);
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетОрганизацииПриИзмененииСервер(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("СчетОрганизации");
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
	
	Объект.ПодразделениеОрганизации = НовыеПараметры.ПодразделениеОрганизации;
	УстановитьПодразделениеДт(ЭтотОбъект);
	
	Если НовыеПараметры.ВалютаДокумента <> ПараметрыОбъекта.ВалютаДокумента Тогда
		ПричиныИзменения.Добавить("ВалютаДокумента");
		
		СвойстваФормыКЗаполнению  = "КурсДокумента, КратностьДокумента";
		
		Если НовыеПараметры.Свойство("ОплатаВВалюте") Тогда
			СвойстваФормыКЗаполнению = СвойстваФормыКЗаполнению + ", ОплатаВВалюте";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметры, СвойстваФормыКЗаполнению);
		ЗаполнитьЗначенияСвойств(Объект,     НовыеПараметры, "ВалютаДокумента, СчетКонтрагента");
		
		УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
		
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
		ПерезаполнитьРасшифровкуПлатежа();
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("СчетОрганизации", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура НалогПриИзмененииНаСервере(ПричиныИзменения, СтрокаПоискаПоКБК)
	
	ПричиныИзменения.Добавить("Налог");
	
	Документы.СписаниеСРасчетногоСчета.УстановитьВидНалоговогоОбязательства(Объект, 
		Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(СтрокаПоискаПоКБК, Объект.Дата));
	
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
	ЗаполнитьВидНалоговогоОбязательстваНаСервере();
	
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога) Тогда
		Объект.НалоговыйПериод = НачалоГода(Объект.Дата);
	Иначе
		Объект.НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(Объект.Дата, -1));
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "НалоговыйПериодСтрока", Формат(Объект.НалоговыйПериод, "ДФ='MMMM yyyy'"));
	
	Если Объект.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		Объект.Контрагент = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Объект.Налог, Объект.Организация, Объект.Дата);
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			КонтрагентОбработатьИзменение(ПричиныИзменения);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("Налог", ПричиныИзменения);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере();
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидНалоговогоОбязательстваПриИзмененииНаСервере()
	
	Документы.СписаниеСРасчетногоСчета.УстановитьВидНалоговогоОбязательства(Объект, ВидНалоговогоОбязательства);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере();
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	КонтрагентОбработатьИзменение(Новый Массив);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере();
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("Контрагент");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ФизЛицоВыплатаЗарплатыПриИзмененииСервер();
		Иначе
			Объект.СуммаДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ЗаполнитьДепонированнымиСуммамиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	Объект.СчетКонтрагента = НовыеПараметры.СчетКонтрагента;
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	
	ПерезаполнитьРасшифровкуПлатежа();
	СформироватьНазначениеПлатежаСервер();
	
	ЗаполнитьСчетаУчета("Контрагент", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииСервер()
	
	СформироватьНазначениеПлатежаСервер();
	УправлениеФормой(ЭтотОбъект);
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("СчетКонтрагента");
	ЗаполнитьСчетаУчета("СчетКонтрагента", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура СчетБанкПриИзмененииСервер(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("СчетБанк");
	
	ОплатаВВалютеПараметр = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетБанк).Валютный;
	
	ВалютаДокументаПриИзмененииСервер(ПричиныИзменения, ОплатаВВалютеПараметр);
	
	ЗаполнитьСчетаУчета("СчетБанк", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура СчетУчетаПрочиеПриИзмененииСервер()

	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаРасчетовСКонтрагентом, "Прочие", Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	ПоляОбъекта.Вставить("Подразделение", "ПодразделениеДт");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	
	ЗначенияСубконто = Новый Соответствие;
	Если Объект.СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеРасходы") Тогда
		ЗначенияСубконто.Вставить(
			ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков"));
	КонецЕсли;
	ЗначенияСубконто.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентом, Объект, ПоляОбъекта,, ЗначенияСубконто);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииСервер(ПричиныИзменения, ОплатаВВалюте)
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзменении(ПараметрыОбъекта, ОплатаВВалюте);
	
	Если НовыеПараметры.ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		
		ПричиныИзменения.Добавить("ВалютаДокумента");
		
		ПараметрыОбъекта.Вставить("ОплатаВВалюте", НовыеПараметры.ОплатаВВалюте);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметры, "ОплатаВВалюте, КурсДокумента, КратностьДокумента");
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации, СчетКонтрагента, ПодразделениеОрганизации");
		
		СчетОрганизацииПриИзмененииСервер(ПричиныИзменения);
		
		ИзменитьПараметрыВыбораСчетаПеревода(ЭтотОбъект);
		
		УстановитьЗаголовкиКолонокУСН();
		
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
		ПерезаполнитьРасшифровкуПлатежа();
		
	КонецЕсли;
	
	// ВалютаДокумента не устанавливается вручную, а берется из валюты банковского счета организации
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	ЗаполнитьСчетаУчета("ВалютаДокумента", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(ИдСтроки)
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	СвойстваПлатежа  = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета("РасшифровкаПлатежа.ДоговорКонтрагента", Объект, СтрокаПлатеж);
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.СписаниеСРасчетногоСчета,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"РасшифровкаПлатежа",
		СтрокаПлатеж,
		Ложь);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж,    Изменения);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, Изменения);
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииСервер()
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли;
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Ложь);
		УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ФизЛицоВыплатаЗарплатыПриИзмененииСервер()
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииФизЛица(ПараметрыОбъекта, УчетЗарплатыИКадровВоВнешнейПрограмме);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СуммаДокумента");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыВзаиморасчетов()
	
	Отбор = Новый Структура("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Истина);
	ПлатежиВУсловныхЕдиницах = Объект.РасшифровкаПлатежа.НайтиСтроки(Отбор);
	Для каждого СтрокаПлатеж Из ПлатежиВУсловныхЕдиницах Цикл
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеПлатежаСервер(ТолькоСумму = Ложь)
	
	Если ПустаяСтрока(Объект.НазначениеПлатежа) ИЛИ Объект.НазначениеПлатежа = СгенерированноеНазначенияПлатежа Тогда
		Объект.НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Объект, ТолькоСумму);
		СгенерированноеНазначенияПлатежа = Объект.НазначениеПлатежа;
	ИначеЕсли ТолькоСумму И Объект.НазначениеПлатежа <> СгенерированноеНазначенияПлатежа Тогда
		Объект.НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Объект, ТолькоСумму);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиОтраженияВУСНСервер()
	
	// ТЧ "Расшифровка платежа"
	ПрименениеУСНДоходыРасходы = ПрименениеУСН И НЕ ПрименениеУСНДоходы;
	ЕстьПрочиеРасчеты = УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Объект.ВидОперации);
	
	Элементы.РасшифровкаПлатежаРасходыУСН.Видимость = ПрименениеУСНДоходыРасходы И ЕстьПрочиеРасчеты;
	Элементы.РасшифровкаПлатежаНДСУСН.Видимость     = ПрименениеУСНДоходыРасходы
		И Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	Элементы.РасшифровкаПлатежаРаспределятьРасходыУСН.Видимость = ПрименениеУСНДоходыРасходы
		И ЕстьПрочиеРасчеты И ПлательщикЕНВД;
	
	// Страница "Прочее"
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Элементы.НДСУСН.Видимость = Ложь;
		Элементы.РаспределятьРасходУСН.Видимость = Ложь;
		Элементы.ГруппаОтражениеВУСН.Видимость = ПрименениеУСН И НЕ ПрименениеУСНДоходы;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		Элементы.НДСУСН.Видимость = Истина;
		Элементы.РаспределятьРасходУСН.Видимость = ПлательщикЕНВД;
		Элементы.ГруппаОтражениеВУСН.Видимость = ПрименениеУСН И НЕ ПрименениеУСНДоходы;
	КонецЕсли;
	
	Если ПрименениеУСНДоходыРасходы Тогда
		УстановитьЗаголовкиКолонокУСН();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонокУСН()
	
	Если НЕ ПрименениеУСН И НЕ УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокРасходыУСН = НСтр("ru = 'Расходы УСН'");
	Если ОплатаВВалюте Тогда
		ЗаголовокРасходыУСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'РасходыУСН, %1'"), ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаРасходыУСН.Заголовок = ЗаголовокРасходыУСН;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтражениеВУСННаСервере(ЗаполнитьСуммы = Истина, ЗаполнитьСодержание = Ложь)
	
	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(ЭтотОбъект);
	
	Если ЗаполнитьСуммы Тогда
		НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Объект, ПараметрыУСН);
	КонецЕсли;
	
	Если ЗаполнитьСодержание И УчетУСН.СодержаниеУСНРедактируетсяПользователем(Объект) Тогда
		НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(Объект, ПараметрыУСН);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДепонированнымиСуммамиНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан работник!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме И ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
		Возврат;
		
	Иначе
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(Объект.Контрагент);
		
		НевыплаченныеДепоненты = УчетЗарплаты.НевыплаченныеДепоненты(
			Объект.Ссылка, Объект.Организация, Объект.Дата, МассивФизическихЛиц);
		
		НевыплаченныеДепоненты.Колонки.Сумма.Имя = "СуммаПлатежа";
		Объект.СуммаДокумента = НевыплаченныеДепоненты.Итог("СуммаПлатежа");
	КонецЕсли;
	
	Объект.ПеречислениеДепонентов.Очистить();
	Объект.ПеречислениеДепонентов.Загрузить(НевыплаченныеДепоненты);
	
КонецПроцедуры

&НаСервере
Процедура ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере()
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере();
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере();
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере()
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Возврат;
	КонецЕсли;
	
	// Представление порядка отражения в БУ
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СчетУчета", Объект.СчетУчетаРасчетовСКонтрагентом);
	Для НомерСубконто = 1 По 3 Цикл
		СтруктураПараметров.Вставить("Субконто" + НомерСубконто, Объект["СубконтоДт" + НомерСубконто]);
	КонецЦикла;
	СтруктураОтраженияБУ = ПлатежиВБюджетПереопределяемый.ПредставлениеПорядкаОтраженияБУ(СтруктураПараметров);
	
	ПорядокОтраженияБУ         = СтруктураОтраженияБУ.Представление;
	ПорядокОтраженияБУЗаполнен = СтруктураОтраженияБУ.Заполнен;
	
	Элементы.ПорядокОтраженияБУ.ПропускатьПриВводе = СтруктураОтраженияБУ.Заполнен;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидНалоговогоОбязательстваНаСервере()
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Возврат;
	КонецЕсли;
	
	ВидНалоговогоОбязательства = Документы.СписаниеСРасчетногоСчета.ПолучитьВидНалоговогоОбязательства(Объект);
	
	СписокВидовНалоговыхОбязательств = Перечисления.ВидыПлатежейВГосБюджет.СписокВидовНалоговыхОбязательств(Объект.Налог, Объект.Дата);
	Если СписокВидовНалоговыхОбязательств.НайтиПоЗначению(ВидНалоговогоОбязательства) = Неопределено Тогда
		СписокВидовНалоговыхОбязательств.Добавить(ВидНалоговогоОбязательства);
	КонецЕсли;
	
	ЗаполнитьСписокВыбора(Элементы.ВидНалоговогоОбязательства, СписокВидовНалоговыхОбязательств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбора(Элемент, СписокДанных)
	
	Элемент.СписокВыбора.Очистить();
	Для каждого ЭлементДанных Из СписокДанных Цикл
		Элемент.СписокВыбора.Добавить(ЭлементДанных.Значение, ЭлементДанных.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораНалогаПоКБК(Знач КодБК)
	
	Возврат Справочники.ВидыНалоговИПлатежейВБюджет.ДанныеВыбораПоКБК(КодБК);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_СуммаДокументаПриИзменении()
	
	СуммаДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ИмяФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура ВопросПередЗаписьюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РежимЗаписи = ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписи);
		Записать(ПараметрыЗаписи);
		Если ДополнительныеПараметры.Свойство("Закрыть") Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи = Новый Структура("Закрыть", Истина);
		Если Записать(ПараметрыЗаписи) Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйПериод = РезультатЗакрытия;
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "НалоговыйПериодСтрока", Формат(НалоговыйПериод, "ДФ='MMMM yyyy'"));
	Если Объект.НалоговыйПериод <> НалоговыйПериод Тогда
		Объект.НалоговыйПериод = НалоговыйПериод;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("СчетБанк");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("ГруппаЗаголовкиСубконтоЗадержкаЗарплаты");
	ЭлементыСчетов.Добавить("ГруппаПоляСчетСубконтоЗадержкаЗарплаты");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовСКонтрагентомПеревод");
	ЭлементыСчетов.Добавить("ПодразделениеДтПеревод");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	// Вне зависимости от настроек пользователя для отдельных видов операций некоторые счета видны
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументМожетБытьОформленВВалюте(ВидОперации)
	
	Возврат ВидОперации   <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричинаИзменения, ПричиныИзменения)
	
	Если СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		
		ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
		
		Если ПричиныИзменения.Найти("СчетБанк") <> Неопределено Тогда
			// Если видны счета, то при изменении счета банка может быть изменен банковский счет организации.
			// А изменение банковского счета организации в общем случае приводит к установке счета банка.
			// В конкретном случае этого нужно избежать.
			ПараметрыЗаполнения.КЗаполнению.Удалить("СчетБанк");
		КонецЕсли;
		
		Если ПользовательУправляетСчетамиУчета Тогда
			
			// В этом режиме только автоматическое изменение валюты (запрет оформления в иностранной валюте)
			// должен приводить к смене счета.
			
			Если ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
				ПараметрыЗаполнения.КЗаполнению.Удалить("СчетБанк");
			КонецЕсли;
			
		КонецЕсли;
		
		СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"СписаниеСРасчетногоСчета",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// ВалютаДокумента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБанк");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;

	// СчетБанк
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетБанк") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;

	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// СчетКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;

	// РасшифровкаПлатежа.СпособПогашенияЗадолженности
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;

	// Налог
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Налог") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// СубконтоДт1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДт1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВалютаДокумента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
		КонецЕсли;

		// СчетБанк
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетБанк") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
		КонецЕсли;

		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// СчетКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// РасшифровкаПлатежа.СпособПогашенияЗадолженности
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКонтрагента");
		КонецЕсли;

		// Налог
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Налог") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// СубконтоДт1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДт1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

#КонецОбласти

#КонецОбласти
