#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Для следующих операций правила заполнения пока не используются:
	// ПрочееСписание
	// РасчетыПоКредитамИЗаймам
	// ПеречислениеНалога
	
	// учет безналичных денег
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетБанк", "БезналичныеДеньги");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПереводНаДругойСчет");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание", "СчетБанк");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеДт", "ПодразделениеБанковскогоСчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "БанковскийСчет", "СчетКонтрагента");
	
	// учет расчетов
	// - оплата задолженности 
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПоставщику");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику", Ложь);
	
	// - только аванс
	// -- расчеты с обычным поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику", Ложь);
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПоставщику");
	
	// - расчеты с покупателем
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратПокупателю");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	
	// - прочие расчеты
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",          "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПрочиеРасчетыСКонтрагентами");
	
	// компенсация за задержку зарплаты
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПеречислениеЗаработнойПлатыРаботнику");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1",    "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2",    "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3",    "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеДт", "ПодразделениеЗатрат");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПеречислениеЗП");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1",    "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2",    "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3",    "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеДт", "ПодразделениеЗатрат");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ВалютаДокумента");
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, ИмяВидаОперации, "ВидОперации");
	КонецЦикла;
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(
		Правила,
		"ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты",
		"ВидОперации, Организация, Ссылка, ПеречислениеЗаработнойПлаты, ПлатежнаяВедомость, Контрагент");
	
	// уплата налога
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "Налоги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПеречислениеНалога");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Налог", "Налог");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ВидНалоговогоОбязательства", "СубконтоДт1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент", "Контрагент");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1", "СубконтоНалогов1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2", "СубконтоНалогов2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3", "СубконтоНалогов3");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт1", "СубконтоРегистрацияВНалоговомОргане1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт2", "СубконтоРегистрацияВНалоговомОргане2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДт3", "СубконтоРегистрацияВНалоговомОргане3");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		Если ДанныеЗаполнения.Свойство(ИмяВидаОперации) Тогда
			ДанныеЗаполнения[ИмяВидаОперации] = ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств[ИмяВидаОперации];
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.Свойство("ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты") Тогда
		
		Ведомости      = Неопределено;
		ФизическоеЛицо = Неопределено;
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ПлатежнаяВедомость) Тогда
				Ведомости = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаполнения.ПлатежнаяВедомость);
			КонецЕсли;
			ФизическоеЛицо = ДанныеЗаполнения.Контрагент;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			Ведомости      = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеЗаполнения.ПеречислениеЗаработнойПлаты, "Ведомость");
		КонецЕсли;
		
		Если Ведомости = Неопределено Или Ведомости.Количество() = 0 Тогда
			ВыплачиватьКомпенсацию = Ложь;
		Иначе
			ВыплачиватьКомпенсацию = УчетЗарплаты.ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты(
				ДанныеЗаполнения.Организация,
				ДанныеЗаполнения.Ссылка,
				Ведомости,
				ФизическоеЛицо);
		КонецЕсли;
			
		ДанныеЗаполнения.Вставить("ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты", ВыплачиватьКомпенсацию);
			
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыОперацийСчетаУчета()
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить("ОплатаПоставщику");                    // счет расчетов и счет авансов в списке
	ВидыОпераций.Добавить("ВозвратПокупателю");                   // счет расчетов и счет авансов в списке
	ВидыОпераций.Добавить("ПрочиеРасчетыСКонтрагентами");         // один счет в списке
	ВидыОпераций.Добавить("ПереводНаДругойСчет");                 // один счет в шапке
	ВидыОпераций.Добавить("ПеречислениеЗП");                      // счет и аналитика затрат
	ВидыОпераций.Добавить("ПеречислениеЗаработнойПлатыРаботнику");// счет и аналитика затрат
	ВидыОпераций.Добавить("ПеречислениеНалога");                  // счет учета и аналитика
	
	Возврат Новый ФиксированныйМассив(ВидыОпераций);
	
КонецФункции

#КонецОбласти

// Вызывается документом СчетФактураВыданный (налоговый агент) при вводе на основании
//
Функция ТекстЗапросаСчетФактураВыданныйНалоговыйАгентРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	СУММА(ТаблицаДокумента.СуммаПлатежа) КАК СуммаБезНДС
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// Вызывается документом СчетФактураВыданный на аванс при вводе на основании
//
Функция ТекстЗапросаСчетФактураПолученныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаПлатежа) КАК Сумма,
	|	СУММА(ТаблицаДокумента.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам,
	|	ТаблицаДокумента.СтавкаНДС";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция НайтиДокументПлатежноеПоручение(ДокументСсылка, ДокументОснование, НаименованиеДокумента = "") Экспорт
	Перем НайденныйДокумент;
	
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Номер, Дата, Проведен");
		СтрокаДокумент = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ПараметрыДокумента.Номер, Истина, Истина);
		НаименованиеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Платежное поручение № %1 от %2 г.'"),
			СтрокаДокумент,
			Формат(ПараметрыДокумента.Дата, "ДФ=dd.MM.yyyy"));
		
		Возврат ДокументОснование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		НаименованиеДокумента = НСтр("ru = 'Ввести платежное поручение'");
		Возврат НайденныйДокумент;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДокПП.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ДокПП
	|ГДЕ
	|	ДокПП.ДокументОснование = &ДокументСсылка";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
		ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НайденныйДокумент, "Номер, Дата, Проведен");
		СтрокаДокумент = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ПараметрыДокумента.Номер, Истина, Истина);
		НаименованиеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Платежное поручение № %1 от %2 г.'"),
			СтрокаДокумент,
			Формат(ПараметрыДокумента.Дата, "ДФ=dd.MM.yyyy"));
	Иначе
		НаименованиеДокумента = НСтр("ru = 'Ввести платежное поручение'");
	КонецЕсли;
	
	Возврат НайденныйДокумент;
	
КонецФункции

Функция ПолучитьНазначениеПлатежа(Объект, ТолькоСумму = Ложь, ПолучитьСгенерированноеНазначение = Ложь) Экспорт
	ЭтоПеречислениеНалога  = Ложь;
	ТекстНазначение        = Объект.НазначениеПлатежа;
	ЭтоРасчетыСРаботниками = Ложь;
	ЭтоЛичныеСредства      = Ложь;
	
	Если Объект.ВидОперации    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		
		Если ПолучитьСгенерированноеНазначение Тогда
			Возврат "";
		Иначе
			Возврат ТекстНазначение;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		
		ТекстНазначение = НСтр("ru = 'Перечисление депонированной заработной платы'");
		ЭтоРасчетыСРаботниками = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		
		ТекстНазначение = НСтр("ru = 'Заработная плата'");
		ЭтоРасчетыСРаботниками = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		
		ТекстНазначение = НСтр("ru = 'Перечисление подотчетному лицу'");
		ЭтоРасчетыСРаботниками = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику Тогда
		
		ТекстНазначение = НСтр("ru = 'Выдача займа'");
		ЭтоРасчетыСРаботниками = Истина;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		
		ТекстНазначение = НСтр("ru = 'Перевод собственных денежных средств'");
		ЭтоЛичныеСредства = Истина;
		
	КонецЕсли;
	
	Если ЭтоРасчетыСРаботниками Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
			Если ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
				МесяцУплаты = Формат(Объект.ПлатежнаяВедомость.ПериодРегистрации, "ДФ=ММММ");
				ГодУплаты   = Формат(Объект.ПлатежнаяВедомость.ПериодРегистрации, "ДФ=гггг");
			Иначе
				МесяцУплаты = Формат(Объект.Дата, "ДФ=ММММ");
				ГодУплаты   = Формат(Объект.Дата, "ДФ=гггг");
			КонецЕсли;
			ТекстПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' за %1 %2 г.'"),
			МесяцУплаты, ГодУплаты);
			ТекстНазначение = ТекстНазначение + ТекстПериод;
		КонецЕсли;
		
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") И ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(Объект.Организация,
			Объект.Контрагент, Объект.Дата, Истина);
			ТекстПолучатель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ', работник: %1'"),
			ДанныеФизЛица.Представление);
			
			ТекстНазначение = ТекстНазначение + ТекстПолучатель;
		КонецЕсли;
	КонецЕсли;
	
	ТекстНазначенияИзСчетаКонтрагента = "";
	Если НЕ Объект.СчетКонтрагента.Пустая() Тогда
		ТекстНазначенияИзСчетаКонтрагента = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.СчетКонтрагента, "ТекстНазначения"));
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Если ПустаяСтрока(ТекстНазначение) И ТекстНазначенияИзСчетаКонтрагента <> "" Тогда
			ТекстНазначение = ТекстНазначенияИзСчетаКонтрагента;
		КонецЕсли;
		
		ЭтоПеречислениеНалога = Истина;
	КонецЕсли;
	
	Если НЕ ТолькоСумму Тогда
		Если ТекстНазначенияИзСчетаКонтрагента <> "" Тогда
			ТекстНазначение = ТекстНазначенияИзСчетаКонтрагента;
		Иначе
			Если ЭтоПеречислениеНалога Тогда
				
				Если ЗначениеЗаполнено(Объект.Налог) Тогда
					ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
				КонецЕсли;
				
				ПоказателиНалоговогоПериода = ПлатежиВБюджетПереопределяемый.ПоказателиНалоговогоПериода(
					Объект.Организация, ВидНалога, Объект.Дата);
				
				ТекстНазначение = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
					Объект.Налог,
					ПолучитьВидНалоговогоОбязательства(Объект),
					Объект.Организация,
					Объект.Дата,
					ПоказателиНалоговогоПериода.ПредставлениеНалоговогоПериода);
				
			ИначеЕсли НЕ ЭтоРасчетыСРаботниками И НЕ ЭтоЛичныеСредства Тогда
				МассивДоговоров = Новый Массив;
				Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
					Если ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)
						И МассивДоговоров.Найти(СтрокаРасшифровки.ДоговорКонтрагента) = Неопределено Тогда
						
						МассивДоговоров.Добавить(СтрокаРасшифровки.ДоговорКонтрагента);
					КонецЕсли;
				КонецЦикла;
				
				Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
					ТекстОплата = "Возврат оплаты ";
				Иначе
					ТекстОплата = "Оплата ";
				КонецЕсли;
				
				Если МассивДоговоров.Количество() = 0 Тогда
					ТекстНазначение = ТекстОплата + "по договору ";
				ИначеЕсли МассивДоговоров.Количество() = 1 Тогда
					ТекстНазначение = ТекстОплата + "по договору " + МассивДоговоров[0];
				Иначе
					ТекстНазначение = ТекстОплата + "по договорам: ";
					Для каждого ЭлементМассива Из МассивДоговоров Цикл
						ТекстНазначение = ТекстНазначение + ЭлементМассива + ", ";
					КонецЦикла;
					
					ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 2);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПозицияСуммы = Найти(Объект.НазначениеПлатежа, "Сумма ");
		Если ПозицияСуммы = 0 Тогда
			ТекстНазначение = Объект.НазначениеПлатежа;
		Иначе
			ТекстНазначение = Лев(Объект.НазначениеПлатежа, ПозицияСуммы - 1);
		КонецЕсли;
		
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПеречислениеНалога Тогда
		Возврат ТекстНазначение;
	КонецЕсли;
	
	ТекстСумма = "Сумма " + Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	Если ЭтоЛичныеСредства Тогда
		Если ТолькоСумму Тогда
			Возврат ТекстНазначение;
		Иначе
			ТекстСумма = "";
			ТекстНДС   = "НДС не облагается";
		КонецЕсли;
	ИначеЕсли ЭтоРасчетыСРаботниками Тогда
		ТекстНДС   = "Без налога (НДС)";
	Иначе
		ТекстНДС   = "";
		Если НЕ ЭтоПеречислениеНалога Тогда
			
			ТабНДС = Объект.РасшифровкаПлатежа.Выгрузить();
			ТабНДС.Свернуть("СтавкаНДС", "СуммаНДС");
			
			Для каждого СтрокаНДС Из ТабНДС цикл
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
				Если СтрокаНДС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					ТекстНДС = ТекстНДС + "Без налога (НДС)";
				ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС) Тогда
					ТекстНДС = "";
				Иначе
					ТекстНДС = ТекстНДС + "НДС(" + СтрокаНДС.СтавкаНДС + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ТекстНДС = ?(ПустаяСтрока(ТекстНДС), "", "В т.ч. ") + ТекстНДС;
		
	КонецЕсли;
	
	ТекстСуммаНазначения = ТекстСумма + ?(ТекстСумма = "", "", Символы.ПС) + ТекстНДС;
	
	Возврат ТекстНазначение
		+ ?(ПустаяСтрока(ТекстСуммаНазначения), "", Символы.ПС + ТекстСуммаНазначения);
	
КонецФункции

// Определяет вид налогового обязательства по аналитике платежа
//
// Параметры:
//   Объект - ДокументОбъект.СписаниеСРасчетногоСчета
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыПлатежейВГосБюджет
//
Функция ПолучитьВидНалоговогоОбязательства(Объект) Экспорт
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		И ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		
		НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
			Объект.СчетУчетаРасчетовСКонтрагентом, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
		
		Если НомерСубконто <> 0 Тогда
			ВидНалоговогоОбязательства = Объект["СубконтоДт" + НомерСубконто];
		КонецЕсли;
		
	Иначе
		ОписаниеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет");
		ВидНалоговогоОбязательства = ОписаниеТипа.ПривестиЗначение(Объект.СубконтоДт1);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
		ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	КонецЕсли;
	
	Возврат ВидНалоговогоОбязательства;
	
КонецФункции

Процедура УстановитьВидНалоговогоОбязательства(Объект, ВидНалоговогоОбязательства) Экспорт
	
	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетУчетаРасчетовСКонтрагентом);
		Для НомерСубконо = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + НомерСубконо] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет Тогда
				Объект["СубконтоДт" + НомерСубконо] = ВидНалоговогоОбязательства;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Объект.СубконтоДт1 = ВидНалоговогоОбязательства;
	КонецЕсли;
	
КонецПроцедуры

// Определяет регистрацию в налоговом органие по аналитике платежа
//
// Параметры:
//   Объект - ДокументОбъектСписаниеСРасчетногоСчета
//
// Возвращаемое значение:
//   СправочникСсылка.РегистрацииВНалоговомОргане
//
Функция ПолучитьРегистрациюВНалоговомОргане(Объект) Экспорт
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) И НалоговыйУчетОбособленныхПодразделений.УчетВРазрезеНалоговыхОрганов() Тогда
		
		НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
			Объект.СчетУчетаРасчетовСКонтрагентом, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"]);
		
		Если НомерСубконто <> 0 Тогда
			РегистрацияВНалоговомОргане = Объект["СубконтоДт" + НомерСубконто];
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат РегистрацияВНалоговомОргане;
	
КонецФункции

Функция ПолучитьСписокВидовОперацийСРасшифровкойПлатежа() Экспорт
	
	СписокОпераций = Новый СписокЗначений();
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	
	Возврат(СписокОпераций);
	
КонецФункции

Функция ЕстьРасшифровкаПлатежа(Знач ВидОперации) Экспорт
	
	СписокВидовСРасшифровкойПлатежа = ПолучитьСписокВидовОперацийСРасшифровкойПлатежа();
	
	Возврат СписокВидовСРасшифровкойПлатежа.НайтиПоЗначению(ВидОперации) <> Неопределено;
	
КонецФункции

Функция ДанныеЗаполненияАналитикиНаСчетеРасчетовСБюджетом(СчетРасчетов, Организация, Контрагент, КодТерритории, КПП, КБК, ОснованиеПлатежа, ТипПлатежа, ВидНалоговогоОбязательства) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СубконтоДт1");
	Результат.Вставить("СубконтоДт2");
	Результат.Вставить("СубконтоДт3");
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиРегистрациюВНалоговомОргане(Организация, Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодТерритории) И НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоКодуТерритории(Организация, КодТерритории);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КПП) И НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоКПП(Организация, КПП);
	КонецЕсли;
	
	АналитикаРасчетов = РасчетыСБюджетом.АналитикаНаСчетеРасчетовСБюджетом(
		СчетРасчетов,
		Организация,
		РегистрацияВНалоговомОргане,
		ВидНалоговогоОбязательства,
		КБК,
		ОснованиеПлатежа,
		ТипПлатежа);
	
	ВидыСубконто = СчетРасчетов.ВидыСубконто;
	Для НомерСубконто = 1 По ВидыСубконто.Количество() Цикл
		
		ОписаниеАналитики = АналитикаРасчетов.Найти(НомерСубконто, "НомерНаСчете");
		
		Если ОписаниеАналитики <> Неопределено Тогда
			ЗначениеСубконто = ОписаниеАналитики.Значение;
		Иначе
			// Если не составной тип, то инициализируем значением по умолчанию
			ТипыСубконто = ВидыСубконто[НомерСубконто - 1].ВидСубконто.ТипЗначения.Типы();
			Если ТипыСубконто.Количество() = 1 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеСубконто = Новый(ТипыСубконто[0]);
		КонецЕсли;
		
		Результат["СубконтоДт" + НомерСубконто] = ЗначениеСубконто;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОбъектаДляОбмена(СсылкаНаОбъект) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("БанковскийСчетКонтрагента");
	Результат.Вставить("БанковскийСчетОрганизации");
	Результат.Вставить("КонтрагентФизЛицо");
	Результат.Вставить("ТипПлатежногоДокумента");
	Результат.Вставить("ВидПлатежа");
	Результат.Вставить("СтатусСоставителя");
	Результат.Вставить("ОчередностьПлатежа");
	Результат.Вставить("ВидПеречисленияВБюджет");
	Результат.Вставить("ПоказательОснования");
	Результат.Вставить("ПоказательНомера");
	Результат.Вставить("ПоказательДаты");
	Результат.Вставить("ПоказательТипа");
	Результат.Вставить("ИдентификаторПлатежа");
	Результат.Вставить("КодБК");
	Результат.Вставить("ПеречислениеВБюджет");
	Результат.Вставить("ПоказательПериода");
	Результат.Вставить("КодОКАТО");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СписаниеСРасчетногоСчета.СчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(ПлатежноеПоручение.СчетКонтрагента, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка))
		|		ИНАЧЕ СписаниеСРасчетногоСчета.СчетКонтрагента
		|	КОНЕЦ КАК БанковскийСчетКонтрагента,
		|	ВЫБОР
		|		КОГДА СписаниеСРасчетногоСчета.СчетОрганизации = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(ПлатежноеПоручение.СчетОрганизации, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка))
		|		ИНАЧЕ СписаниеСРасчетногоСчета.СчетОрганизации
		|	КОНЕЦ КАК БанковскийСчетОрганизации,
		|	ВЫБОР
		|		КОГДА СписаниеСРасчетногоСчета.Контрагент ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КонтрагентФизЛицо,
		|	""ПлатежноеПоручение"" КАК ТипПлатежногоДокумента,
		|	ВЫБОР КОГДА ПлатежноеПоручение.Ссылка ЕСТЬ NULL ТОГДА
		|		ВЫБОР КОГДА СписаниеСРасчетногоСчета.Дата > ДАТАВРЕМЯ(2013, 07, 09) ТОГДА
		|			""""
		|		ИНАЧЕ
		|			""Электронно""
		|		КОНЕЦ
		|	ИНАЧЕ
		|		ПлатежноеПоручение.ВидПлатежа
		|	КОНЕЦ КАК ВидПлатежа,
		|	ЕСТЬNULL(ПлатежноеПоручение.СтатусСоставителя, ""01"") КАК СтатусСоставителя,
		|	ВЫБОР КОГДА ПлатежноеПоручение.Ссылка ЕСТЬ NULL ТОГДА
		|		ВЫБОР КОГДА СписаниеСРасчетногоСчета.Дата > ДАТАВРЕМЯ(2013, 12, 14) ТОГДА
		|			""5""
		|		ИНАЧЕ
		|			""6""
		|		КОНЕЦ
		|	ИНАЧЕ
		|		ПлатежноеПоручение.ОчередностьПлатежа
		|	КОНЕЦ КАК ОчередностьПлатежа,
		|	ЕСТЬNULL(ПлатежноеПоручение.ВидПеречисленияВБюджет, ЗНАЧЕНИЕ(Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж)) КАК ВидПеречисленияВБюджет,
		|	ЕСТЬNULL(ПлатежноеПоручение.ПоказательОснования, ""ТП"") КАК ПоказательОснования,
		|	ЕСТЬNULL(ПлатежноеПоручение.ПоказательНомера, ""0"") КАК ПоказательНомера,
		|	ЕСТЬNULL(ПлатежноеПоручение.ПоказательДаты, ""0"") КАК ПоказательДаты,
		|	ВЫБОР КОГДА ПлатежноеПоручение.Ссылка ЕСТЬ NULL ТОГДА
		|		ВЫБОР КОГДА СписаниеСРасчетногоСчета.Дата > ДАТАВРЕМЯ(2014, 02, 04) ТОГДА
		|			""0""
		|		ИНАЧЕ
		|			""НС""
		|		КОНЕЦ
		|	ИНАЧЕ
		|		ПлатежноеПоручение.ПоказательТипа
		|	КОНЕЦ КАК ПоказательТипа,
		|	ЕСТЬNULL(ПлатежноеПоручение.ИдентификаторПлатежа, """") КАК ИдентификаторПлатежа,
		|	ЕСТЬNULL(ПлатежноеПоручение.КодБК, """") КАК КодБК,
		|	ЕСТЬNULL(ПлатежноеПоручение.ПеречислениеВБюджет, Ложь) КАК ПеречислениеВБюджет,
		|	ЕСТЬNULL(ПлатежноеПоручение.ПоказательПериода, """") КАК ПоказательПериода,
		|	ЕСТЬNULL(ПлатежноеПоручение.КодОКАТО, """") КАК КодОКАТО
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|		ПО (СписаниеСРасчетногоСчета.ДокументОснование = ПлатежноеПоручение.Ссылка
		|				ИЛИ СписаниеСРасчетногоСчета.Ссылка = ПлатежноеПоручение.ДокументОснование)
		|ГДЕ
		|	СписаниеСРасчетногоСчета.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
	|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
	|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
	|	Реквизиты.ПодразделениеДт КАК ПодразделениеДт,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.НалоговыйПериод КАК НалоговыйПериод,
	|	Реквизиты.Контрагент КАК ФизЛицо,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.СуммаДокумента КАК СуммаРуб,
	|	Реквизиты.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Реквизиты.ПлатежнаяВедомость КАК ПлатежнаяВедомость,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетРасчетовСПодотчетнымиЛицами,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоРеализации,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
	|				ИЛИ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВыплатаЗарплаты
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетБанк КАК СчетБанк,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.ЭтоВыплатаЗарплаты КАК ЭтоВыплатаЗарплаты,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	1 КАК КоэффициентРуб,
	|	Реквизиты.НазначениеПлатежа КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	Реквизиты        = ТаблицаРеквизиты[0];
	
	// Коэффициент пересчета сумм из валюты документа в рубли
	Если Реквизиты.ВалютаДокумента = ПараметрыПроведения.ВалютаРеглУчета Тогда
		КоэффициентРуб = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Дата);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;	
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
			ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
			
			Возврат;
		КонецЕсли;
		
		КоэффициентРуб           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
		Реквизиты.КоэффициентРуб = КоэффициентРуб;
	КонецЕсли;
	
	ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ВалютаРеглУчета     = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ);
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	Если Отказ ИЛИ НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Дата, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Дата);
	
	ПараметрыПроведения.Вставить("ПлательщикНДФЛ", ПлательщикНДФЛ);
	
	Запрос.УстановитьПараметр("ПлательщикНДФЛ",                 ПлательщикНДФЛ);
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСН",        УчетнаяПолитика.ПрименяетсяУСН(
		Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСНПатент",  УчетнаяПолитика.ПрименяетсяУСНПатент(
		Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ВестиУчетПоВидамДеятельностиИП", УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(
		Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОсновнаяНоменклатурнаяГруппа",   УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(
		Реквизиты.Организация, Реквизиты.Дата));
	
	Для каждого Колонка Из ПараметрыПроведения.ТаблицаРеквизиты.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицыДокумента(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПрочееСписание(НомераТаблиц,         ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеНалогаИП(НомераТаблиц,   ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеЗарплаты(НомераТаблиц,   ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПеречислениеДепонентов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Если Реквизиты.ЭтоВыплатаЗарплаты Тогда
		ТаблицыОплатыТруда = ПолучитьТаблицыОплатыТруда(ПараметрыПроведения, ДокументСсылка);
		Если ТаблицыОплатыТруда <> Неопределено Тогда
			ПараметрыПроведения.Вставить("ПеречислениеЗарплаты", ТаблицыОплатыТруда);
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	Реквизиты.Содержание = ТекстСодержанияПроводокДокумента(Реквизиты);
	Если ПараметрыПроведения.РасшифровкаПлатежа <> Неопределено Тогда
		ПараметрыПроведения.РасшифровкаПлатежа.ЗаполнитьЗначения(Реквизиты.Содержание, "Содержание");
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
	|	Реквизиты.НалоговыйПериод КАК НалоговыйПериод,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	&ОрганизацияПрименяетУСН КАК УчитыватьЗадолженностьУСН,
	|	&ОрганизацияПрименяетУСНПатент КАК УчитыватьЗадолженностьУСНПатент,
	|	Реквизиты.НаправлениеДвижения КАК НаправлениеДвижения,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	ВЫРАЗИТЬ(Реквизиты.НазначениеПлатежа КАК СТРОКА(150)) КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// в данных видах операций табличная часть Расшифровка платежа не используется
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику Тогда 
		
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК РеквизитыДата,
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки,
	|	&Контрагент КАК РеквизитыКонтрагент,
	|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.Сделка,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам,
	|	&ПодразделениеОрганизации КАК РеквизитыПодразделениеОрганизации,
	|	&СчетБанк КАК РеквизитыСчетБанк, 
	|	&СчетОрганизации КАК РеквизитыСчетОрганизации,
	|	&СтатьяДвиженияДенежныхСредств КАК РеквизитыСтатьяДвиженияДенежныхСредств,
	|	ВЫРАЗИТЬ(&Содержание КАК СТРОКА(150)) КАК РеквизитыСодержание,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа,
	|	ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаПлатежа * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура погашения задолженности вызывается для операций:
	// - ОплатаПоставщику
	// - ВозвратПокупателю
	// - ПрочиеРасчетыСКонтрагентами
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически) КАК СпособПогашенияЗадолженности,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСодержание КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ?(ТекстЗапроса = "", "", ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	
КонецФункции

Функция ТекстЗапросаПрочееСписание(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура прочего списания вызывается для операций:
	// - ПрочееСписание
	// - ПеречислениеНалога
	// - ЛичныеСредстваПредпринимателя
	// - РасчетыПоКредитамИЗаймам
	// - ПеречислениеПодотчетномуЛицу
	// - ПереводНаДругойСчет
	// - ВыдачаЗаймаРаботнику
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
		|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
		|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
		|	Реквизиты.ПодразделениеДт КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению) КАК СчетДт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
		|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
		|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
		|	Реквизиты.ПодразделениеДт КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	Реквизиты.НалоговыйПериод КАК НалоговыйПериод,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК СубконтоДт1,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетБанк КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетОрганизации КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Период
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 НомерСтроки,
		|	Реквизиты.СчетРасчетовСПодотчетнымиЛицами КАК СчетДт,
		|	Реквизиты.ФизЛицо КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
		|	Реквизиты.СчетКонтрагента КАК СубконтоДт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	Реквизиты.ПодразделениеДт КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам) КАК СчетДт,
		|	Реквизиты.ФизЛицо КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СчетБанк КАК СчетКт,
		|	Реквизиты.СчетОрганизации КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	NULL КАК НалоговыйПериод,
		|	Реквизиты.Дата КАК Период
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежаПрочее", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежаПрочее", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ?(ТекстЗапроса = "", "", ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	
КонецФункции

Функция ТекстЗапросаПеречислениеЗарплаты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура перечисления зарплаты вызывается для операций:
	// - ПеречислениеЗП
	// - ПеречислениеЗаработнойПлатыРаботнику
	
	Если НЕ Реквизиты.ЭтоВыплатаЗарплаты Тогда
		ПараметрыПроведения.Вставить("ПеречислениеЗарплаты", Неопределено);
		Возврат "";
	КонецЕсли;
			
	НомераТаблиц.Вставить("ПеречислениеЗарплаты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
	|	Реквизиты.Контрагент КАК ФизическоеЛицо,
	|	0 КАК КомпенсацияЗаЗадержкуЗарплаты,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.СчетОрганизации КАК БанковскийСчет,
	|	Реквизиты.СчетБанк КАК СчетУчета,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаКомпенсации,
	|	Реквизиты.СубконтоДт1 КАК СубконтоУчетаКомпенсации1,
	|	Реквизиты.СубконтоДт2 КАК СубконтоУчетаКомпенсации2,
	|	Реквизиты.СубконтоДт3 КАК СубконтоУчетаКомпенсации3,
	|	Реквизиты.ПодразделениеДт КАК ПодразделениеУчетаКомпенсации,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ЛОЖЬ КАК ИспользуетсяЭлектронныйОбмен,
	|	НЕОПРЕДЕЛЕНО КАК Ведомость,
	|	Реквизиты.ПлатежнаяВедомость КАК ПлатежнаяВедомость
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПеречислениеДепонентов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		ПараметрыПроведения.Вставить("ПеречислениеДепонентов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
		И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно") Тогда
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Ведомость,
		|	Реквизиты.ФизЛицо КАК ФизическоеЛицо,
		|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Реквизиты.СчетОрганизации КАК БанковскийСчет,
		|	Реквизиты.СчетБанк КАК СчетУчета,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение
		|ИЗ
		|	Реквизиты КАК Реквизиты";
		
	Иначе
		
		НомераТаблиц.Вставить("ВТ_Документ", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ_Ведомости", НомераТаблиц.Количество());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Ведомость,
		|	Реквизиты.ФизЛицо КАК ФизическоеЛицо,
		|	Реквизиты.СуммаДокумента КАК СуммаКВыплате,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Реквизиты.СчетОрганизации КАК БанковскийСчет,
		|	Реквизиты.СчетБанк КАК СчетУчета,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Документ
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПеречислениеДепонентов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПеречислениеДепонентов.Ведомость КАК Ведомость,
		|	Реквизиты.ФизЛицо КАК ФизическоеЛицо,
		|	ТаблицаПеречислениеДепонентов.СуммаПлатежа КАК СуммаКВыплате
		|ПОМЕСТИТЬ ВТ_Ведомости
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета.ПеречислениеДепонентов КАК ТаблицаПеречислениеДепонентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаПеречислениеДепонентов.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ТаблицаПеречислениеДепонентов.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_Ведомости.НомерСтроки, 1) КАК НомерСтроки,
		|	ВТ_Документ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТ_Ведомости.Ведомость, НЕОПРЕДЕЛЕНО) КАК Ведомость,
		|	ВТ_Документ.БанковскийСчет КАК БанковскийСчет,
		|	ВТ_Документ.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ВТ_Документ.СчетУчета КАК СчетУчета,
		|	ВТ_Документ.Подразделение КАК Подразделение,
		|	ЕСТЬNULL(ВТ_Ведомости.СуммаКВыплате, ВТ_Документ.СуммаКВыплате) КАК СуммаКВыплате
		|ИЗ
		|	ВТ_Документ КАК ВТ_Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Ведомости КАК ВТ_Ведомости
		|		ПО ВТ_Документ.ФизическоеЛицо = ВТ_Ведомости.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
		
	НомераТаблиц.Вставить("ПеречислениеДепонентов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ПоступлениеМПЗИПРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ПоступлениеТоваровУслуг"" КАК ТипПоступления,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	НЕОПРЕДЕЛЕНО КАК ТипСклада,
	|	ИСТИНА КАК НДСВключенВСтоимость,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	Реквизиты.ВидОперации КАК ВидОперации
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Если НЕ ПараметрыПроведения.ПлательщикНДФЛ ИЛИ Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаУслуг", Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", Неопределено);
		Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
	"ВЫБРАТЬ
	|	"""" КАК ИмяСписка,
	|	"""" КАК СинонимСписка,
	|	1 КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	0 КАК НДС,
	|	0 КАК Количество,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
	|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.СубконтоДт1
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.СубконтоДт2
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА Реквизиты.СубконтоДт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.СубконтоДт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.СубконтоДт1
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.СубконтоДт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.СубконтоДт2
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ Реквизиты.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ Реквизиты.СубконтоДт3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА Реквизиты.СубконтоДт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидРасходовНУ,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	ВЫБОР
	|		КОГДА Реквизиты.СубконтоДт1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА Реквизиты.СубконтоДт2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт2 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА Реквизиты.СубконтоДт3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.СубконтоДт3 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПринятиеКналоговомуУчету,
	|	НЕОПРЕДЕЛЕНО КАК Партия
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаУслуг",          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПеречислениеНалогаИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ПараметрыПроведения.Вставить("ПеречислениеНалогаИПТаблица", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	"""" КАК ИмяСписка,
	|	"""" КАК СинонимСписка,
	|	1 КАК НомерСтроки,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетДт,
	|	Реквизиты.СубконтоДт1 КАК СубконтоДт1,
	|	Реквизиты.СубконтоДт2 КАК СубконтоДт2,
	|	Реквизиты.СубконтоДт3 КАК СубконтоДт3,
	|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	НомераТаблиц.Вставить("ПеречислениеНалогаИПТаблица", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПолучитьТаблицыОплатыТруда(ПараметрыПроведения, ДокументСсылка)
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	ПроверятьСоответствиеСуммыДокументаИВедомости = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		ИЛИ УчетЗарплатыИКадровВоВнешнейПрограмме И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам");
		
	Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
		Возврат Неопределено;
	Иначе
		ПараметрыПроведения.Вставить("ПеречислениеЗарплатыПроведение", ПараметрыПроведения.ПеречислениеЗарплаты);
		ПараметрыПроведения.Вставить("ПеречислениеЗарплаты", Неопределено);
	КонецЕсли;
	
	ПараметрыОплаты = Ложь;
	
	ДанныеДокумента = Новый Структура("СтатьяДвиженияДенежныхСредств,
		|Подразделение, СчетУчета, БанковскийСчет, СчетУчетаКомпенсации,
		|СубконтоУчетаКомпенсации1, СубконтоУчетаКомпенсации2, СубконтоУчетаКомпенсации3, ПодразделениеУчетаКомпенсации, ВидОперации,
		|ФизическоеЛицо, ПлатежнаяВедомость");
	
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, ПараметрыПроведения.ПеречислениеЗарплатыПроведение[0]);
	Если ДанныеДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ДанныеДокумента.ПлатежнаяВедомость);
		
		ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(
			ДокументСсылка, Ведомости, ДанныеДокумента.ФизическоеЛицо, Неопределено);
		
	Иначе
		
		Ведомости = ДокументСсылка.ПеречислениеЗаработнойПлаты.ВыгрузитьКолонку("Ведомость");
		
		Если Ведомости.Количество() <> 0 Тогда
			ПлатежнаяВедомость = Ведомости[0];
		КонецЕсли;
		
		ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(
			ДокументСсылка, Ведомости,, Ложь);
		
	КонецЕсли;
	
	УчетЗарплаты.ПодготовитьТаблицуВыплатыЗарплаты(ТаблицаВедомостей);
	
	Если ПараметрыОплаты Тогда
		ИспользуетсяЭлектронныйОбмен = Истина;
	Иначе
		ИспользуетсяЭлектронныйОбмен = Ложь;
	КонецЕсли;
	
	Если ТаблицаВедомостей.Количество() > 0 Тогда
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.Подразделение,                 "Подразделение");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СтатьяДвиженияДенежныхСредств, "СтатьяДвиженияДенежныхСредств");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СчетУчета,                     "СчетУчета");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.БанковскийСчет,                "БанковскийСчет");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СчетУчетаКомпенсации,          "СчетУчетаКомпенсации");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СубконтоУчетаКомпенсации1,     "СубконтоУчетаКомпенсации1");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СубконтоУчетаКомпенсации2,     "СубконтоУчетаКомпенсации2");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.СубконтоУчетаКомпенсации3,     "СубконтоУчетаКомпенсации3");
		ТаблицаВедомостей.ЗаполнитьЗначения(ДанныеДокумента.ПодразделениеУчетаКомпенсации, "ПодразделениеУчетаКомпенсации");
		ТаблицаВедомостей.ЗаполнитьЗначения(ИспользуетсяЭлектронныйОбмен,                  "ИспользуетсяЭлектронныйОбмен");
	Иначе
		Возврат ТаблицаВедомостей;
	КонецЕсли;
	
	Возврат ТаблицаВедомостей;
	
КонецФункции

Функция ТекстСодержанияПроводокДокумента(Реквизиты)
	
	ПозицияСуммы = Найти(Реквизиты.Содержание, "Сумма ");
	Если ПозицияСуммы = 0 Тогда
		ТекстНазначение = Реквизиты.Содержание;
	Иначе
		ТекстНазначение = Лев(Реквизиты.Содержание, ПозицияСуммы - 1);
	КонецЕсли;
	
	Содержание = СокрЛП(СтрЗаменить(ТекстНазначение, Символы.ПС, " "))
		+ " по вх.д. " + Реквизиты.НомерВходящегоДокумента
		+ " от " + Формат(Реквизиты.ДатаВходящегоДокумента, "ДЛФ=Д");
	
	Возврат Содержание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Списание с расчетного счета""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация, НомерВходящегоДокумента, ДатаВходящегоДокумента",
		"Контрагент", "НомерВходящегоДокумента", "ДатаВходящегоДокумента");
	
	Возврат Результат;
	
КонецФункции

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСумм") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПФ_MXL_РеестрПеречисленныхСумм", "Реестр перечисленных сумм", ПечатьРеестра(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьРеестра(МассивОбъектов, ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеСРасчетногоСчета.Организация КАК Организация,
	|	СписаниеСРасчетногоСчета.НалоговыйПериод КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА СписаниеСРасчетногоСчета.СубконтоДт2 ЕСТЬ NULL 
	|			ТОГДА СписаниеСРасчетногоСчета.Организация.РегистрацияВНалоговомОргане
	|		КОГДА СписаниеСРасчетногоСчета.СубконтоДт2 = НЕОПРЕДЕЛЕНО
	|			ТОГДА СписаниеСРасчетногоСчета.Организация.РегистрацияВНалоговомОргане
	|		ИНАЧЕ СписаниеСРасчетногоСчета.СубконтоДт2
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	СписаниеСРасчетногоСчета.Дата КАК ДатаПлатежа,
	|	СписаниеСРасчетногоСчета.НомерВходящегоДокумента КАК ПлатежноеПоручениеНомер,
	|	СписаниеСРасчетногоСчета.ДатаВходящегоДокумента КАК ПлатежноеПоручениеДата
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Ссылка В(&МассивОбъектов)
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Колонки.Найти("ГлавныйБухгалтер") = Неопределено Тогда
		РезультатЗапроса.Колонки.Добавить("ГлавныйБухгалтер", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		Если РезультатЗапроса.Колонки.Найти("Бухгалтер") = Неопределено Тогда
			РезультатЗапроса.Колонки.Добавить("Бухгалтер", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы ИЗ РезультатЗапроса Цикл
		ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаТаблицы.Организация, СтрокаТаблицы.ДатаПлатежа);
		СтрокаТаблицы.ГлавныйБухгалтер = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
	КонецЦикла;
	
	ТабличныйДокумент = УчетНДФЛ.РеестрПеречисленныхСуммНалога(РезультатЗапроса);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, МассивОбъектов);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#Область ОбработчикиОбновления

Процедура СформироватьДвиженияПоДокументамОплаты() Экспорт
	
	ОбменСБанкамиПоЗарплатнымПроектам.СформироватьДвиженияПоДокументамОплаты();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНастройкиУСНДляАктуальныхДокументов() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГраницаАктуальногоПериода",
		УчетУСН.ДатаНачалаАктуальногоПериодаДляПереходаНаУпрощеннуюНастройкуКУДиР());
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	ВидыОперацийРасчетыУСН = Новый Массив;
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	Запрос.УстановитьПараметр("ВидыОперацийРасчетыУСН", ВидыОперацийРасчетыУСН);
	
	ВидыОперацийПрочиеСписания = Новый Массив;
	ВидыОперацийПрочиеСписания.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	ВидыОперацийПрочиеСписания.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	Запрос.УстановитьПараметр("ВидыОперацийПрочиеСписания", ВидыОперацийПрочиеСписания);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходы,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходы,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.ДатаДокумента КАК ДатаДокумента,
	|	ВложенныйЗапрос.ВидОбработкиОбновления
	|ИЗ
	|	(ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|		СписаниеСРасчетногоСчета.Дата КАК ДатаДокумента,
	|		""ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы"" КАК ВидОбработкиОбновления
	|	ИЗ
	|		Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО СписаниеСРасчетногоСчета.Организация = ВТ_УчетнаяПолитика.Организация
	|				И СписаниеСРасчетногоСчета.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И СписаниеСРасчетногоСчета.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.УдалитьРучнаяНастройка_УСН
	|		И СписаниеСРасчетногоСчета.Дата >= &ГраницаАктуальногоПериода
	|		И ВТ_УчетнаяПолитика.ПрименяетсяУСНДоходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка,
	|		СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата,
	|		""ЗаполнитьРасходыУСНПрочиеРасчеты""
	|	ИЗ
	|		Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|				И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийРасчетыУСН)
	|		И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата >= &ГраницаАктуальногоПериода
	|		И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Графа7_УСН <> 0
	|		И ВТ_УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка,
	|		СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.РасходыУСН) = 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.Дата,
	|		""ОбработатьРучнуюНастройкуУСНПрочиеСписания""
	|	ИЗ
	|		Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО СписаниеСРасчетногоСчета.Организация = ВТ_УчетнаяПолитика.Организация
	|				И СписаниеСРасчетногоСчета.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И СписаниеСРасчетногоСчета.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.ВидОперации В(&ВидыОперацийПрочиеСписания)
	|		И СписаниеСРасчетногоСчета.Дата >= &ГраницаАктуальногоПериода
	|		И СписаниеСРасчетногоСчета.УдалитьРучнаяНастройка_УСН
	|		И ВТ_УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаПоДокументу Из РезультатЗапроса Цикл
		
		Попытка
			
			Если СтрокаПоДокументу.ВидОбработкиОбновления = "ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы" Тогда
				ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ЗаполнитьРасходыУСНПрочиеРасчеты" Тогда
				ЗаполнитьРасходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ОбработатьРучнуюНастройкуУСНПрочиеСписания" Тогда
				ОбработатьРучнуюНастройкуУСНПрочиеСписания(СтрокаПоДокументу);
			КонецЕсли;
			
		Исключение
			// Если не удалось обработать какой-либо документ, пропускаем и обрабатываем позднее (отложенно).
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать списание с расчетного счета: %1 по причине:
					|%2'"),
					СтрокаПоДокументу.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СписаниеСРасчетногоСчета, СтрокаПоДокументу.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходыОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСНДоходы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО СписаниеСРасчетногоСчета.Организация = ВТ_УчетнаяПолитика.Организация
	|			И СписаниеСРасчетногоСчета.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И СписаниеСРасчетногоСчета.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	СписаниеСРасчетногоСчета.УдалитьРучнаяНастройка_УСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать списание с расчетного счета: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СписаниеСРасчетногоСчета, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходыОтложенно
				|не удалось обработать некоторые списания с расчетного счета (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.СписаниеСРасчетногоСчета,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходыОтложенно
					|обработала очередную порцию списаний с расчетного счета: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасходыУСНПрочиеРасчетыОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	ВидыОперацийРасчетыУСН = Новый Массив;
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	ВидыОперацийРасчетыУСН.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	Запрос.УстановитьПараметр("ВидыОперацийРасчетыУСН", ВидыОперацийРасчетыУСН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСНДоходыМинусРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходыМинусРасходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|			И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийРасчетыУСН)
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Графа7_УСН <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка,
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата
	|
	|ИМЕЮЩИЕ
	|	СУММА(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.РасходыУСН) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ЗаполнитьРасходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать списание с расчетного счета: %1 по причине:
					|%2'"), 
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СписаниеСРасчетногоСчета, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьРасходыУСНПрочиеРасчетыОтложенно
				|не удалось обработать некоторые списания с расчетного счета (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.СписаниеСРасчетногоСчета,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьРасходыУСНПрочиеРасчетыОтложенно
					|обработала очередную порцию списаний с расчетного счета: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРучнуюНастройкуУСНПрочиеСписанияОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	ВидыОперацийПрочиеСписания = Новый Массив;
	ВидыОперацийПрочиеСписания.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	ВидыОперацийПрочиеСписания.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	Запрос.УстановитьПараметр("ВидыОперацийПрочиеСписания", ВидыОперацийПрочиеСписания);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСНДоходыМинусРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходыМинусРасходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО СписаниеСРасчетногоСчета.Организация = ВТ_УчетнаяПолитика.Организация
	|			И СписаниеСРасчетногоСчета.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И СписаниеСРасчетногоСчета.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации В(&ВидыОперацийПрочиеСписания)
	|	И СписаниеСРасчетногоСчета.УдалитьРучнаяНастройка_УСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьРучнуюНастройкуУСНПрочиеСписания(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать списание с расчетного счета: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СписаниеСРасчетногоСчета, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбработатьРучнуюНастройкуУСНПрочиеСписанияОтложенно
				|не удалось обработать некоторые списания с расчетного счета (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.СписаниеСРасчетногоСчета,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбработатьРучнуюНастройкуУСНПрочиеСписанияОтложенно
					|обработала очередную порцию списаний с расчетного счета: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

// Для списаний денежных средств, оформленных по организациям, применяющим УСН с объектом налогообложения "Доходы",
// в которых настройка УСН отредактирована пользователем вручную, устанавливается признак ручной корректировки движений
Процедура ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходы(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.СписаниеСРасчетногоСчета");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта
		ДокументОбъект.РучнаяКорректировка = Истина;
		ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет новые реквизиты "РасходыУСН" и "НДСУСН" в ТЧ "РасшифровкаПлатежа" у переданного документа
//
Процедура ЗаполнитьРасходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.СписаниеСРасчетногоСчета");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если ДокументОбъект.Графа7_УСН = ДокументОбъект.РасшифровкаПлатежа.Итог("РасходыУСН")
			И НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта.
		КоэффициентыРаспределения = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
		
		МассивРаспределенныхРасходов = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ДокументОбъект.Графа7_УСН, КоэффициентыРаспределения);
		Если МассивРаспределенныхРасходов <> Неопределено Тогда	
			ДокументОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивРаспределенныхРасходов, "РасходыУСН");
		КонецЕсли;
		
		МассивРаспределенногоНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ДокументОбъект.НДС_УСН, КоэффициентыРаспределения);
		Если МассивРаспределенногоНДС <> Неопределено Тогда	
			ДокументОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивРаспределенногоНДС, "НДСУСН"); 
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из ДокументОбъект.РасшифровкаПлатежа Цикл
			СтрокаТЧ.РаспределятьРасходыУСН = ДокументОбъект.РасходыЕНВД_УСН;
		КонецЦикла;
		
		Если ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			Если ДокументОбъект.Графа4_УСН <> 0 ИЛИ ДокументОбъект.Графа5_УСН <> 0 ИЛИ ДокументОбъект.ДоходыЕНВД_УСН Тогда
				ДокументОбъект.РучнаяКорректировка = Истина;
				ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для прочих списаний, в которых настройка УСН отредактирована пользователем вручную:
//    если отредактированы только расходы УСН, НДС по расходами и признак распределения расходов - ручная настройка УСН сбрасывается;
//    для остальных случаев - выставляется признак ручной корректировки движений.
Процедура ОбработатьРучнуюНастройкуУСНПрочиеСписания(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.СписаниеСРасчетногоСчета");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если НЕ ДокументОбъект.РучнаяКорректировка
			И (ДокументОбъект.Графа4_УСН <> 0 ИЛИ ДокументОбъект.Графа5_УСН <> 0 ИЛИ ДокументОбъект.ДоходыЕНВД_УСН) Тогда
			ДокументОбъект.РучнаяКорректировка = Истина;
			// Иначе: если заданы только расходы УСН (Графа 7, НДС, распределение расходов) - признак ручной корректировки не изменяем
		КонецЕсли;
		
		ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьНалоговыйПериодПриУплатеСтраховыхВзносовИП() Экспорт
	
	СчетаУчетаСтраховыхВзносовИП = Новый Массив;
	СчетаУчетаСтраховыхВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);
	СчетаУчетаСтраховыхВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
	СчетаУчетаСтраховыхВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.ФСС_СтраховойГод);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаУчетаСтраховыхВзносовИП", СчетаУчетаСтраховыхВзносовИП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом В(&СчетаУчетаСтраховыхВзносовИП)
	|	И СписаниеСРасчетногоСчета.НалоговыйПериод = ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.НалоговыйПериод = НачалоГода(Объект.Дата);
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось заполнить страховой период'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьКонтрагентаНаФизическоеЛицо(Параметры) Экспорт
	
	// Обработчик обновления заменен на монопольный ЗаменитьКонтрагентаНаФизическоеЛицоМонопольно()
	
	ЗаменитьКонтрагентаНаФизическоеЛицоМонопольно();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

//Производится перенос значения реквизита ФизическоеЛицо в реквизит Контрагент
//если сведений о физическом лице нет - оно создается на основании контрагента
//
Процедура ЗаменитьКонтрагентаНаФизическоеЛицоМонопольно() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	(СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику)
	|			ИЛИ СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов)
	|			ИЛИ СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику)
	|			ИЛИ СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу))
	|	И НЕ СписаниеСРасчетногоСчета.Контрагент ССЫЛКА Справочник.ФизическиеЛица
	|	И СписаниеСРасчетногоСчета.УдалитьФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Контрагент = ДокументОбъект.УдалитьФизЛицо;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет новый реквизиты "Налог"
//
Процедура ЗаполнитьРеквизитНалог() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеСРасчетногоСчета.Ссылка,
	|	СписаниеСРасчетногоСчета.Организация,
	|	СписаниеСРасчетногоСчета.Дата,
	|	СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом,
	|	СписаниеСРасчетногоСчета.СубконтоДт1,
	|	СписаниеСРасчетногоСчета.СубконтоДт2,
	|	СписаниеСРасчетногоСчета.СубконтоДт3,
	|	ЕСТЬNULL(ЕСТЬNULL(ПлатежноеПоручение1.Налог, ПлатежноеПоручение2.Налог), НЕОПРЕДЕЛЕНО) КАК Налог,
	|	ЕСТЬNULL(ЕСТЬNULL(ПлатежноеПоручение1.Ссылка, ПлатежноеПоручение2.Ссылка), НЕОПРЕДЕЛЕНО) КАК ПлатежноеПоручение
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение1
	|		ПО СписаниеСРасчетногоСчета.ДокументОснование = ПлатежноеПоручение1.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение2
	|		ПО СписаниеСРасчетногоСчета.Ссылка = ПлатежноеПоручение2.ДокументОснование
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.Налог = ЗНАЧЕНИЕ(Справочник.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Выборка.Налог) И (Выборка.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы) Тогда
			// Заполняем налог из платежного поручения
			Объект.Налог = Выборка.Налог;
		ИначеЕсли ЗначениеЗаполнено(Выборка.СчетУчетаРасчетовСКонтрагентом) Тогда
			// Попытаемся подобрать налог по счету учета и аналитике
			НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
				Выборка.СчетУчетаРасчетовСКонтрагентом, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
			УровеньБюджета = ?(НомерСубконто <> 0, Выборка["СубконтоДт" + НомерСубконто], Неопределено);
			
			ВидНалога = РасчетыСБюджетом.ВидНалогаПоСчетуУчета(Выборка.СчетУчетаРасчетовСКонтрагентом, Выборка.Организация, Выборка.Дата, УровеньБюджета);
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
			Если ЗначениеЗаполнено(Объект.Налог) И Объект.Налог <> Выборка.Налог И ЗначениеЗаполнено(Выборка.ПлатежноеПоручение) Тогда
				ОбъектПлатежноеПоручение = Выборка.ПлатежноеПоручение.ПолучитьОбъект();
				ОбъектПлатежноеПоручение.Налог = Объект.Налог;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектПлатежноеПоручение, Ложь);
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Налог) Тогда
			Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект, Ложь);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли