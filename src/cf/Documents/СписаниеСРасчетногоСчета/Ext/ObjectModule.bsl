#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ВводНаОсновании = Ложь;
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("Массив") Тогда
		Если ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк")
			ИЛИ ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
			ЗаполнитьПоВедомостям(ДанныеЗаполнения);
			ВводНаОсновании = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		ВводНаОсновании = Истина;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);
	
	Если НЕ Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	//определяем счет банка по валюте
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОплатаВВалюте = ЗначениеЗаполнено(ВалютаДокумента) И ВалютаДокумента <> ВалютаРегламентированногоУчета;
	
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.СпособПогашенияЗадолженности.Пустая() Тогда
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
	КонецЦикла;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) И НЕ ВводНаОсновании И ЗначениеЗаполнено(Контрагент)
		И Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		
		РасшифровкаПлатежа[0].ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(
			Новый Структура("ВидОперации, Организация, Контрагент, ДоговорКонтрагента, ОплатаВВалюте, ВалютаДокумента",
				ВидОперации,
				Организация,
				Контрагент,
				ДоговорКонтрагента,
				ОплатаВВалюте,
				ВалютаДокумента));
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(РасшифровкаПлатежа, "РасшифровкаПлатежа", ЭтотОбъект, Документы.СписаниеСРасчетногоСчета);
	
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(ЭтотОбъект, ПараметрыУСН);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата                    = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
	Ответственный           = Пользователи.ТекущийПользователь();
	ДокументОснование       = Неопределено;
	НомерВходящегоДокумента = "";
	ДатаВходящегоДокумента  = '00010101';
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Отключаем проверку реквизитов шапки
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетКонтрагента");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Налог");
	КонецЕсли;
	
	// Отключаем проверку реквизитов ТЧ РасшифровкаПлатежа
	
	МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сделка"); // Проверяем построчно
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
		
	КонецЕсли;
	
	// Отключаем проверку реквизитов, связанных с перечислением заработной платы
	// Если установлен флаг ручная корректировка - то заполненность полей по заработной плате не проверяем
	
	Если (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику)
			И НЕ РучнаяКорректировка Тогда
		
		ПроверятьСоответствиеСуммыДокументаИВедомости = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
			ИЛИ ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Найти(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") <> Неопределено;
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
			Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеЗаработнойПлаты.Ведомость");
			КонецЕсли;
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеЗаработнойПлаты");
			МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеЗаработнойПлаты.Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеЗаработнойПлаты.СуммаПлатежа");
			Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
		
		ПроверятьСоответствиеСуммыДокументаИВедомости = Ложь;
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеЗаработнойПлаты");
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеЗаработнойПлаты.Ведомость");
		МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеЗаработнойПлаты.СуммаПлатежа");
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа расшифровке платежа
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		
		Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ТекстСообщения = НСтр("ru = 'Не совпадают сумма документа и ее расшифровка'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа и ведомостей на выплату зарплаты
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
			И ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
		
		Если ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа и общая сумма по платежным ведомостям'");
			ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа и ведомости на выплату зарплаты
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		
		Если ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
			Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(Контрагент) Тогда
				
				Ведомости = Новый Массив;
				Ведомости.Добавить(ПлатежнаяВедомость);
				
				ТаблицаНеоплаченныхВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, Контрагент, Ложь);
				ТаблицаОплаченныхВедомостей   = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, Контрагент, Истина);
				
				Если ТаблицаНеоплаченныхВедомостей.Количество() = 0 И ТаблицаОплаченныхВедомостей.Количество() = 0 Тогда
					
					ШаблонСообщения = НСтр("ru = 'В выбранной ведомости отсутствуют сведения о заработной плате сотрудника %1!'");
					ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контрагент);
					ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Корректность", НСтр("ru = 'Ведомость'"),,, ШаблонСообщения);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПлатежнаяВедомость", "Объект", Отказ);
					
				Иначе
					
					Если ТаблицаОплаченныхВедомостей.Количество() <> 0 Тогда
							ШаблонСообщения = НСтр("ru = 'По текущей ведомости заработная плата сотрудника %1 выплачена ранее!'");
							ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контрагент);
							
							ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
							"Поле", "Корректность", НСтр("ru = 'Ведомость'"),,, ШаблонСообщения);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПлатежнаяВедомость", "Объект", Отказ);
					Иначе
						СтрокаВедомости = ТаблицаНеоплаченныхВедомостей[0];
						СуммаПоВедомости = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
						
						Если СуммаПоВедомости <> СуммаДокумента Тогда
							ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа (%1 руб.) и сумма по платежной ведомости (%2 руб.)'");
							ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СуммаДокумента, СуммаПоВедомости);
							
							ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
							"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка соответствия суммы выплаты депонентов с суммой ведомости
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов И НЕ РучнаяКорректировка Тогда
		Если (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
			И НЕ ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно"))
			ИЛИ ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
			Если ПеречислениеДепонентов.Количество() <> 0 Тогда
				
				СуммаПоВедомостям = ПеречислениеДепонентов.Итог("СуммаПлатежа");
				Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
					Если СуммаДокумента <> СуммаПоВедомостям Тогда
						ШаблонСообщения = НСтр("ru = 'Cумма документа (%1 руб.) не равна сумме по платежным ведомостям (%2 руб.)'");
						ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СуммаДокумента, СуммаПоВедомостям);
						
						ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
							"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
					КонецЕсли;
				Иначе
					Если СуммаДокумента < СуммаПоВедомостям Тогда
						ШаблонСообщения = НСтр("ru = 'Cумма документа (%1 руб.) не может быть меньше суммы по платежным ведомостям (%2 руб.)'");
						ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СуммаДокумента, СуммаПоВедомостям);
						
						ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
							"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		КонецЕсли;
	КонецЕсли;
	
	// Построчная проверка заполнения отдельных реквизитов ТЧ РасшифровкаПлатежа
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
		
		ШаблонТекстаСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Колонка", "Заполнение", "%1", "%2", НСтр("ru = 'Расшифровка платежа'"));
		
		Для каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
			
			Если СтрокаПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
					И НЕ ЗначениеЗаполнено(СтрокаПлатежа.Сделка) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщения, НСтр("ru = 'Документ расчетов'"), СтрокаПлатежа.НомерСтроки);
				Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки - 1), "ЧН=0; ЧГ=") + "].Сделка";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	// Для отдельных видов операций некоторые счета проверяются вне зависимости от настроек пользователя 
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		ПроверяемыеРеквизиты.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// Переопределим представление сообщения об ошибке для случая,
	// когда имя и синоним реквизита не соответствуют его роли.
	Сообщили = Новый Массив;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику 
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Если ПроверяемыеРеквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено 
			И Не ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет затрат'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "СчетУчетаРасчетовСКонтрагентом", "Объект", Отказ);
			Сообщили.Добавить("СчетУчетаРасчетовСКонтрагентом");
			
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, Сообщили);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.СписаниеСРасчетногоСчета.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.РасшифровкаПлатежа, ПараметрыПроведения.Реквизиты, Отказ);
	
	ТаблицаСуммовыхРазниц = УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты, Отказ);
	
	// Структура таблиц для отражения в налоговом учете УСН
	ТаблицаВыплатаЗарплаты    = УчетЗарплаты.ПолучитьТаблицуВыплатыЗарплатыДляУСН(ПараметрыПроведения.ПеречислениеЗарплаты);
	ТаблицаВыплатаДепонентов  = УчетЗарплаты.ПолучитьТаблицуВыплатыЗарплатыДляУСН(ПараметрыПроведения.ПеречислениеДепонентов);
	СтруктураТаблицУСН        = Новый Структура("ТаблицаРасчетов, ТаблицаВыплатаЗарплаты, ТаблицаВыплатаДепонентов",
		ТаблицаВзаиморасчеты, ТаблицаВыплатаЗарплаты, ТаблицаВыплатаДепонентов);
	
	// Учет доходов и расходов ИП
	ТаблицыОплатыПоставщикуИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыОплатыПоставщику(
		ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты);
	
	ТаблицаУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаУслуг,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты);
	
	СтруктураТаблицМПЗ = Новый Структура("ТаблицаУслуг", ТаблицаУслугИП);
	
	ТаблицыУплатыВзносовФОТИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыУплатыВзносовФОТ(
		ПараметрыПроведения.ПеречислениеНалогаИПТаблица, ПараметрыПроведения.Реквизиты);
	
	ТаблицыВыплатыЗарплатыИП   = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыВыплатыЗарплаты(
		ПараметрыПроведения.ПеречислениеЗарплаты, ПараметрыПроведения.Реквизиты);
	
	ТаблицыВыплатыДепонентовИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыВыплатыЗарплаты(
		ПараметрыПроведения.ПеречислениеДепонентов, ПараметрыПроведения.Реквизиты);
	
	ТаблицыПрочихУдержанийИП   = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыПеречислениеПрочихУдержаний(
		ПараметрыПроведения.РасшифровкаПлатежаПрочее, ПараметрыПроведения.Реквизиты);
		
	ТаблицаУплатыСтраховыхВзносовИП = УчетСтраховыхВзносовИП.ПодготовитьТаблицуУплатыСтраховыхВзносов(
		ПараметрыПроведения.РасшифровкаПлатежаПрочее, ПараметрыПроведения.Реквизиты);
		
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетВзаиморасчетов.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(ТаблицаСуммовыхРазниц,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияПеречислениеВыплатаЗарплаты(ЭтотОбъект, ПараметрыПроведения.ПеречислениеЗарплаты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияВыплатаДепонентов(ПараметрыПроведения.ПеречислениеДепонентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДенежныхСредств.СформироватьДвиженияПрочееСписание(ПараметрыПроведения.РасшифровкаПлатежаПрочее,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияПоНалогамИВзносамСФОТ(ПараметрыПроведения.РасшифровкаПлатежаПрочее,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчеты, Движения, Отказ);
	
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчеты, Движения, Отказ);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОплатаПоставщику(
		ТаблицыОплатыПоставщикуИП, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(СтруктураТаблицМПЗ,
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаВзаиморасчетов, ,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаНДФЛ(
		ПараметрыПроведения.ПеречислениеНалогаИПТаблица,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаВзносовФОТ(
		ТаблицыУплатыВзносовФОТИП.СписокВзносов, ТаблицыУплатыВзносовФОТИП.СписокПереплат,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВыплатаЗарплаты(
		ТаблицыВыплатыЗарплатыИП.СписокВыплат, ТаблицыВыплатыЗарплатыИП.СписокПереплат,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВыплатаЗарплаты(
		ТаблицыВыплатыДепонентовИП.СписокВыплат, ТаблицыВыплатыДепонентовИП.СписокПереплат,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПеречислениеПрочихУдержаний(
		ТаблицыПрочихУдержанийИП.СписокОплаченныхРасчетов, ТаблицыПрочихУдержанийИП.СписокОплаченныхУдержаний,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Учет страховых взносов ИП
	УчетСтраховыхВзносовИП.СформироватьДвиженияУплатаСтраховыхВзносов(ТаблицаУплатыСтраховыхВзносовИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкиДвиженийДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НеПодтвержденоВыпискойБанка И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимЗаписи    = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
		ТекстСообщения =
			НСтр("ru = 'Проведение документа возможно только после установки флага ""Подтверждено выпиской банка"". Документ записан без движений'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НеПодтвержденоВыпискойБанка", "Объект", Ложь);
	КонецЕсли;
	
	// Обновление реквизитов УСН выполняем всегда для учета возможных изменений в учетной политике.
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	Если НЕ УчетУСН.СодержаниеУСНРедактируетсяПользователем(ЭтотОбъект) Тогда
		Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
	КонецЕсли;
	НалоговыйУчетУСН.ЗаполнитьДоходыРасходыВсего(ЭтотОбъект, ПараметрыУСН);
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПлатежноеПоручениеОснование = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(Ссылка, ДокументОснование);
	Если ЗначениеЗаполнено(ПлатежноеПоручениеОснование) И ТипЗнч(ПлатежноеПоручениеОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ТекущийПризнакОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежноеПоручениеОснование, "Оплачено");
		НужныйПризнакОплаты  = РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если ТекущийПризнакОплаты <> НужныйПризнакОплаты Тогда
			ОснованиеОбъект = ПлатежноеПоручениеОснование.ПолучитьОбъект();
			Попытка
				ОснованиеОбъект.Заблокировать();
				ОснованиеОбъект.Оплачено = НужныйПризнакОплаты;
				ОснованиеОбъект.Записать();
				ОснованиеОбъект.Разблокировать()
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось изменить отметку об оплате для документа: %1.
					|Возможно, документ в настоящий момент редактируется.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПлатежноеПоручениеОснование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НеПодтвержденоВыпискойБанка", "Объект", Ложь);
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации) И РасшифровкаПлатежа.Количество() > 0 Тогда
		ДоговорКонтрагента            = РасшифровкаПлатежа[0].ДоговорКонтрагента;
		СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	Иначе
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) И НЕ ЗначениеЗаполнено(СчетОрганизации)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			СчетОрганизации, Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж)
	
	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);
	
	Если Не СтрокаПлатеж = Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ на основании массива ведомостей на выплату зарплаты
//
Процедура ЗаполнитьПоВедомостям(ПлатежныеВедомости)
	
	ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	
	ПлатежнаяВедомость = ПлатежныеВедомости[0];
	ДокументОснование  = ПлатежнаяВедомость;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежнаяВедомость, "Организация");
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, ПлатежныеВедомости,, Ложь);
	
	ТаблицаВедомостей.Свернуть("Ведомость", "СуммаКВыплате, КомпенсацияЗаЗадержкуЗарплаты");
	Если ТаблицаВедомостей.Количество() = 0 Тогда
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Если ПлатежныеВедомости.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'По выбранным документам нет сумм к выплате!'");
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 нет сумм к выплате!'"), ПлатежнаяВедомость);
			КонецЕсли;
		Иначе
			Если ПлатежныеВедомости.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Выбранные документы полностью оплачены!'");
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 полностью оплачен!'"), ПлатежнаяВедомость);
			КонецЕсли;
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
	Иначе
		Для каждого СтрокаВедомости Из ТаблицаВедомостей Цикл
			Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
				Если СтрокаВедомости.Ведомость.ВидМестаВыплаты <> Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет
					И СтрокаВедомости.Ведомость.ВидМестаВыплаты <> Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ %1 оплачивается через кассу!'"), СтрокаВедомости.Ведомость);
					ВызватьИсключение ТекстСообщения;
					
				КонецЕсли;
			КонецЕсли;
			
			СтрокаВедомость = ПеречислениеЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость = СтрокаВедомости.Ведомость;
			СуммаКВыплате = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			СтрокаВедомость.СуммаПлатежа = СуммаКВыплате;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате") + ТаблицаВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	РасшифровкаПлатежа.Добавить().СуммаПлатежа = СуммаДокумента;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание, СуммаКОплате = Неопределено)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	// Валюта документа должна соответствовать валюте банковского счета!
	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации, "ВалютаДенежныхСредств");
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДокументОснование = Основание;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		КурсДокумента      = 1;
		КратностьДокумента = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	ТипЗначенияОснования = ТипЗнч(Основание);
	
	Если ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеНМА")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  Тогда
			ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		КонецЕсли;
		
		ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента);
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов, УчетАгентскогоНДС");
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента = ДанныеДоговора.ВалютаВзаиморасчетов;
		Иначе
			ВалютаДокумента = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			СчетКонтрагента = Основание.БанковскийСчетКонтрагента;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеДоговора.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ТаблицаСуммОснования = Новый ТаблицаЗначений();
			ТаблицаСуммОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
			ТаблицаСуммОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаСуммОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
			
			СтрокаТаблицыСумм = ТаблицаСуммОснования.Добавить();
			
			СтрокаТаблицыСумм.СуммаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВознаграждения");
			СтрокаТаблицыСумм.СтавкаНДС    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СтавкаНДСВознаграждения");
			СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения") + Основание.Услуги.Итог("СуммаНДСВознаграждения");
		Иначе
			ТаблицаСуммОснования = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			ТаблицаСуммОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			
			Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				
				Если Основание.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
					ТаблицаСуммОснования.ЗаполнитьЗначения(0, "СуммаНДС");
					ТаблицаСуммОснования.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");
					Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "УдержатьВознаграждение") Тогда
						СуммаКоррПлатежа = ТаблицаСуммОснования.Итог("СуммаПлатежа")
							- ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВознаграждения");
						НоваяКолонкаСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
							СуммаКоррПлатежа, ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если НоваяКолонкаСумм <> Неопределено Тогда
							ТаблицаСуммОснования.ЗагрузитьКолонку(НоваяКолонкаСумм, "СуммаПлатежа");
						КонецЕсли;
					КонецЕсли;
					
					Если ДанныеДоговора.УчетАгентскогоНДС Тогда
						СуммаКоррНДС    = ТаблицаСуммОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДС");
						НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
							СуммаКоррНДС, ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если НоваяКолонкаНДС <> Неопределено Тогда
							ТаблицаСуммОснования.ЗагрузитьКолонку(НоваяКолонкаНДС, "СуммаПлатежа");
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТаблицаСуммОснования.Очистить();
				КонецЕсли;
				
			ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				
				ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Сумма, СуммаНДС, СтавкаНДС, СуммаВключаетНДС");
				
				Если ДанныеОснования.Сумма > 0 ИЛИ ДанныеОснования.СуммаНДС > 0 Тогда
					Если ТаблицаСуммОснования.Количество() = 0 Тогда
						СтрокаТаблицыСумм = ТаблицаСуммОснования.Добавить();
					Иначе
						СтрокаТаблицыСумм = ТаблицаСуммОснования[0];
					КонецЕсли;
					
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + ДанныеОснования.Сумма;
					СтрокаТаблицыСумм.СуммаНДС     = СтрокаТаблицыСумм.СуммаНДС + ДанныеОснования.СуммаНДС;
					Если НЕ ДанныеОснования.СуммаВключаетНДС Тогда
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + ДанныеОснования.СуммаНДС;
					КонецЕсли;
				КонецЕсли;
				
				ТаблицаСуммОснования.ЗаполнитьЗначения(ДанныеОснования.СтавкаНДС, "СтавкаНДС");
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Сумма платежа может несовпадать с итогом ТаблицаСуммОснования:
		СуммаПоОснованиям = ТаблицаСуммОснования.Итог("СуммаПлатежа");
		Если СуммаКОплате <> Неопределено И ТаблицаСуммОснования.Количество() > 0 И СуммаКОплате <> СуммаПоОснованиям Тогда
			Если ТаблицаСуммОснования.Количество() = 1 Тогда
				ТаблицаСуммОснования[0].СуммаНДС = Окр(СуммаКОплате * ТаблицаСуммОснования[0].СуммаНДС / ТаблицаСуммОснования[0].СуммаПлатежа, 2, 1);
				ТаблицаСуммОснования[0].СуммаПлатежа = СуммаКОплате;
			Иначе
				МассивСуммОснований = ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа");
				МассивСуммКОплате = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКОплате, МассивСуммОснований);
				Счетчик = 0;
				Для каждого СтрокаОснования Из ТаблицаСуммОснования Цикл
					СтрокаОснования.СуммаНДС = Окр(МассивСуммКОплате[Счетчик] * СтрокаОснования.СуммаНДС / СтрокаОснования.СуммаПлатежа, 2, 1);
					СтрокаОснования.СуммаПлатежа = МассивСуммКОплате[Счетчик];
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСуммОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,                     "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,      "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
		
		// При вводе на основании устанавливаем режим распределения оплаты "По документу",
		// кроме ввода на основании отчета комитенту - задолженность перед комитентом образуется другими документами
		// и ввода на основании счета поставщика - данный документ не формирует задолженности перед поставщиком
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") 
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
			ИЛИ НЕ ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.Автоматически, "СпособПогашенияЗадолженности");
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу,   "СпособПогашенияЗадолженности");
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "Сделка");
		КонецЕсли;
		
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
			"УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
			"КурсВзаиморасчетов, КратностьВзаиморасчетов, ВалютаДокумента");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			Если ДанныеДоговора.УчетАгентскогоНДС Тогда
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - СтрокаПлатеж.СуммаНДС;
				СтрокаПлатеж.СуммаНДС     = 0;
				СтрокаПлатеж.СтавкаНДС    = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
			Если ДанныеДоговора.РасчетыВУсловныхЕдиницах Тогда
				Если ДанныеОснования.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаПлатежа,
						ВалютаРегламентированногоУчета, ДанныеДоговора.ВалютаВзаиморасчетов,
						1, ДанныеОснования.КурсВзаиморасчетов,
						1, ДанныеОснования.КратностьВзаиморасчетов);
					
					СтрокаПлатеж.СуммаНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаНДС,
						ВалютаРегламентированногоУчета, ДанныеДоговора.ВалютаВзаиморасчетов,
						1, ДанныеОснования.КурсВзаиморасчетов,
						1, ДанныеОснования.КратностьВзаиморасчетов);
				КонецЕсли;
				
				СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатеж.СуммаВзаиморасчетов,
					ДанныеДоговора.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
					СтрокаПлатеж.КурсВзаиморасчетов, 1,
					СтрокаПлатеж.КратностьВзаиморасчетов, 1);
				
				СтрокаПлатеж.СуммаНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатеж.СуммаНДС,
					ДанныеДоговора.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
					СтрокаПлатеж.КурсВзаиморасчетов, 1,
					СтрокаПлатеж.КратностьВзаиморасчетов, 1);
				
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовЗаПосредническиеУслуги"), "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансамВыданным"), "СчетУчетаРасчетовПоАвансам");
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "УдержатьВознаграждение") Тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансам"), "СчетУчетаРасчетовСКонтрагентом");
			КонецЕсли;
			
			ТаблицаПлатежей.ЗагрузитьКолонку(
				ТаблицаПлатежей.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовПоАвансам");
			
		ИначеЕсли ТипЗначенияОснования <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			СчетУчетаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетУчетаРасчетов.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетУчетаРасчетов.СчетУчетаРасчетовПоАвансам,     "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
		НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(ЭтотОбъект);
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
			"ВидОперации, Налог, ВидНалоговогоОбязательства, Контрагент, Дата, Номер, СчетКонтрагента, ПоказательПериода,
			|НазначениеПлатежа, ДокументОснование, ПеречислениеВБюджет, ПлатежнаяВедомость, СуммаДокумента, ВидПеречисленияВБюджет, ДоговорКонтрагента,
			|КодОКАТО, КодБК, ПоказательОснования, ПоказательТипа, КПППлательщика, СтатьяДвиженияДенежныхСредств, СтавкаНДС, СуммаНДС");
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		
		ВидОперации  = ДанныеОснования.ВидОперации;
		
		ДатаВходящегоДокумента  = ДанныеОснования.Дата;
		НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеОснования.Номер, Истина, Истина);
		СчетКонтрагента = ДанныеОснования.СчетКонтрагента;
		
		Если ЗначениеЗаполнено(ДанныеОснования.ДокументОснование) И НЕ ДанныеОснования.ПеречислениеВБюджет 
			И ТипЗнч(ДанныеОснования.ДокументОснование)<> Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			Если ТипЗнч(ДанныеОснования.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") 
				ИЛИ ТипЗнч(ДанныеОснования.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
				Если  ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
					ДанныеЗаполнения = Новый Массив;
					ДанныеЗаполнения.Добавить(ДанныеОснования.ДокументОснование);
					ЗаполнитьПоВедомостям(ДанныеЗаполнения);
				Иначе
					ЗаполнитьПоДокументуОснованию(ДанныеОснования.ДокументОснование, ДанныеОснования.СуммаДокумента);
					ПлатежнаяВедомость = ДанныеОснования.ПлатежнаяВедомость;
					СуммаДокумента     = ДанныеОснования.СуммаДокумента;
				КонецЕсли;
			Иначе
				ЗаполнитьПоДокументуОснованию(ДанныеОснования.ДокументОснование, ДанныеОснования.СуммаДокумента);
			КонецЕсли;
			
			ДокументОснование = Основание;
			
			// установим Назначение платежа и СтатьюДДС из Платежного поручения
			НазначениеПлатежа = СтрЗаменить(ДанныеОснования.НазначениеПлатежа, Символы.ПС, " ");
			СтатьяДвиженияДенежныхСредств = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
			КоличествоСтрокРасшифровки = РасшифровкаПлатежа.Количество();
			Если КоличествоСтрокРасшифровки > 0 Тогда
				МассивДДС = Новый Массив;
				Для сч = 1 По КоличествоСтрокРасшифровки Цикл
					МассивДДС.Добавить(СтатьяДвиженияДенежныхСредств);
				КонецЦикла;
				
				РасшифровкаПлатежа.ЗагрузитьКолонку(МассивДДС, "СтатьяДвиженияДенежныхСредств");
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		НазначениеПлатежа             = СтрЗаменить(ДанныеОснования.НазначениеПлатежа, Символы.ПС, " ");
		СтатьяДвиженияДенежныхСредств = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
		
		РасшифровкаПлатежа.Очистить();
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
			
			СуммаДокумента  = ДанныеОснования.СуммаДокумента;
			ПлатежнаяВедомость = ДанныеОснования.ПлатежнаяВедомость;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
			
			СуммаДокумента = ДанныеОснования.СуммаДокумента;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			
			Налог = ДанныеОснования.Налог;
			
			СчетУчетаРасчетовСКонтрагентом = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ДанныеОснования.Дата);
			
			АналитикаРасчетов = Документы.СписаниеСРасчетногоСчета.ДанныеЗаполненияАналитикиНаСчетеРасчетовСБюджетом(
				СчетУчетаРасчетовСКонтрагентом,
				Организация,
				Контрагент,
				ДанныеОснования.КодОКАТО, // КодТерритории (ОКАТО/ОКТМО)
				ДанныеОснования.КПППлательщика,
				ДанныеОснования.КодБК,
				ДанныеОснования.ПоказательОснования,
				ДанныеОснования.ПоказательТипа,
				ДанныеОснования.ВидНалоговогоОбязательства);
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, АналитикаРасчетов);
			
			ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(ДанныеОснования.ПоказательПериода);
			Если ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
				НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(ДанныеОснования.Дата, -1));
			Иначе
				НалоговыйПериод = ОписаниеПериода.Дата;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Налог)
				И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога")) Тогда
				НалоговыйПериод = НачалоГода(НалоговыйПериод);
			КонецЕсли;
			
			СуммаДокумента  = ДанныеОснования.СуммаДокумента;
			
		Иначе
			
			ВалютаДокумента = ВалютаРегламентированногоУчета;
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Если ДанныеДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета И НЕ ДанныеДоговора.РасчетыВУсловныхЕдиницах Тогда
					ВалютаДокумента = ДанныеДоговора.ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
			СтрокаПлатеж.СуммаПлатежа = ДанныеОснования.СуммаДокумента;
			СтрокаПлатеж.СтавкаНДС    = ДанныеОснования.СтавкаНДС;
			СтрокаПлатеж.СуммаНДС     = ДанныеОснования.СуммаНДС;
			
			СписокВидовДоговора = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
			БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
				ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговора);
			
			СтрокаПлатеж.ДоговорКонтрагента      = ДоговорКонтрагента;
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СтруктураКурсаВзаиморасчетов         = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				?(ЗначениеЗаполнено(ДанныеДоговора.ВалютаВзаиморасчетов), ДанныеДоговора.ВалютаВзаиморасчетов, ВалютаДокумента), Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			СтрокаПлатеж.СуммаВзаиморасчетов     = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаПлатеж.СуммаПлатежа,
				ВалютаДокумента, ДанныеДоговора.ВалютаВзаиморасчетов,
				КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
				КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
			
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
				И ДанныеОснования.ПеречислениеВБюджет Тогда
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчетаРасчетовПоКБК(
					ДанныеОснования.КодБК);
			ИначеЕсли ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
				
				СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
					Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
				
				Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
					Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
						СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
					Иначе
						СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
					КонецЕсли;
					
					СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу;
		Контрагент  = Основание.ФизЛицо;
		
		ШаблонНазначенияПлатежа = НСтр("ru = 'Перечисление перерасхода по авансовому отчету %1 от %2'");
		НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНазначенияПлатежа,
			ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Основание.Номер, Истина, Ложь),
			Формат(Основание.Дата, "ДФ=dd.MM.yyyy"));
		
		СуммаАванса = Документы.АвансовыйОтчет.ПолучитьСуммуВыданныхАвансов(Основание);
		ПерерасходАванса = Макс(0, Основание.СуммаДокумента - СуммаАванса);
		СуммаДокумента = ПерерасходАванса;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли