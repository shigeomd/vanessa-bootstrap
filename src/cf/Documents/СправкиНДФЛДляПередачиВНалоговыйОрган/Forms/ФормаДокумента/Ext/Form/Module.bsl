&НаКлиенте
Перем ТекущийСотрудник;
&НаКлиенте
Перем ТекущийНомерСправки;
&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ФормаДополнена Тогда
		ДополнитьФорму();
	КонецЕсли;
	
	Если Параметры.Ключ = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ПустаяСсылка() Тогда
		ЗначенияДляЗаполнения = Новый Структура("Год, Организация, Ответственный", 
			"Объект.НалоговыйПериод",
			"Объект.Организация",
			"Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	УчетНДФЛФормы.СведенияОДоходахПриСозданииНаСервере(ЭтаФорма, "Объект.СведенияОДоходах.КодДохода", "СведенияОДоходахКодВычета", "СведенияОДоходахСуммаВычета");	
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		УстановитьИмяФайла();
	КонецЕсли;
	
	УчетНДФЛФормы.СправкиНДФЛЗаполнитьСписокКонтролируемыхПолей(ЭтаФорма);
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиентСервер.ВидимостьКнопкиЗашифроватьИОтправить(ЭтаФорма);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФНС");
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "Печать".
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Если Не ФормаДополнена Тогда
		ДополнитьФорму();
	КонецЕсли;	
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗарплатаКадрыОтображениеОшибок.ПриЧтенииДанныхВФорме(
		ЭтотОбъект,
		ТекущийОбъект,
		СоответствиеДанныхОбъектаДаннымФормы(),
		ОписаниеПодчиненностиДанных());

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗарплатаКадрыОтображениеОшибок.ПередЗаписьюДанныхВФорме(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ДокументПроведен = Объект.Проведен;
	
	УстановитьИмяФайла();
	ЗаполнитьСписокМесяцевНалоговогоПериода();
	УстановитьПредставлениеАдресов(Объект.Сотрудники);
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(Объект.Сотрудники, Объект.НалоговыйПериод);
	УстановитьДоступностьЭлементовФормы(ЭтаФорма);
	Если Элементы.Сотрудники.ТекущаяСтрока <> Неопределено Тогда
		ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
		
		Если ДанныеТекущейСтроки <> Неопределено Тогда
			УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьИнфонадписьИсправления(ИнфоНадписьИсправления, ДанныеТекущейСтроки, ДокументПроведен);
		КонецЕсли;	
	КонецЕсли;
	
	ЗарплатаКадрыОтображениеОшибок.ПослеЗаписиДанныхВФорме(
		ЭтотОбъект,
		ТекущийОбъект,
		СоответствиеДанныхОбъектаДаннымФормы(),
		ОписаниеПодчиненностиДанных());
		
	ЗаполнитьСтавкиНДФЛВТаблицеСотрудники()	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_СправкиНДФЛДляПередачиВНалоговыйОрган", ПараметрыЗаписи, Объект.Ссылка)
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеДанныхФизическогоЛица" Тогда
		
		ПрочитатьДанныеФизическогоЛица(Источник);	
		
	ИначеЕсли ИмяСобытия = "ИзмененаРегистрацияВНалоговомОргане" Тогда
		
		УстановитьПредставлениеРегистрацииВНО();
		
	ИначеЕсли ИмяСобытия = "ИзмененыДанныеСправки2НДФЛ" И Источник = ЭтаФорма Тогда
		
		ЗагрузитьДанныеСправкиИзХранилища(Параметр);
				
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "Объект");
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Не удалось провести документ.
                              |При проверке заполнения были обнаружены ошибки.'");
							  
		ЗарплатаКадрыОтображениеОшибок.ПослеПроверкиЗаполненияВФорме(
			ЭтотОбъект,
			ДокументОбъект,
			СоответствиеДанныхОбъектаДаннымФормы(),
			ОписаниеПодчиненностиДанных(),
			"Объект");
							  
		ВызватьИсключение ТекстСообщения;	
	Иначе
		ЗарплатаКадрыОтображениеОшибок.ПослеПроверкиЗаполненияВФорме(
			ЭтотОбъект,
			ДокументОбъект,
			СоответствиеДанныхОбъектаДаннымФормы(),
			ОписаниеПодчиненностиДанных(),
			"Объект");
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма);
	УчетНДФЛФормы.СправкаНДФЛУстановитьИнофнадписьОписаниеДоходовОрганизации(ЭтаФорма,,,,Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	
КонецПроцедуры	

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	НалоговыйПериодПриИзмененииНаСервере();
	
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные; 
	
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ"); 
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.Организация");	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(РегистрацияВНалоговомОрганеСписокВыбора);
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		ДанныеВыбора.Добавить("");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Объект.РегистрацияВНалоговомОргане = ВыбранноеЗначение.Регистрация;
		РегистрацияВНОПредставление = ВыбранноеЗначение.Представление;
		
		РегистрацияВНалоговомОрганеПриИзмененииНаСервере();
		
		ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные; 
		
		УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ"); 
		УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление");
		
	КонецЕсли;	
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "РегистрацияВНОПредставление");
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеОткрытие(Элемент, СтандартнаяОбработка)
	
	УчетНДФЛКлиент.СправкиНДФЛРегистрацияВНалоговомОрганеОткрытие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НеВключатьДоходыПоЦеннымБумагамПриИзменении(Элемент)
	НеВключатьДоходыПоЦеннымБумагамПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НалоговыйПериодПриИзмененииНаСервере()
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма);
	УчетНДФЛФормы.СправкаНДФЛУстановитьИнофнадписьОписаниеДоходовОрганизации(ЭтаФорма,,,,Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	
	Для Каждого ДанныеСправки Из Объект.Сотрудники Цикл
		Если Не ДанныеСправки.ФиксНалоги Тогда
			УдалитьСтрокиТаблицыДоходов(ДанныеСправки.Сотрудник);
			УдалитьСтрокиТаблицыВычетов(ДанныеСправки.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанные(
		Объект.Сотрудники, 
		Объект.СведенияОДоходах, 
		Объект.СведенияОВычетах, 
		Объект.НалоговыйПериод, 
		Объект.Дата, 
		Объект.Организация, 
		Объект.РегистрацияВНалоговомОргане, 
		Истина,
		Истина,
		Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	
	УстановитьПредставлениеАдресов(Объект.Сотрудники);
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(Объект.Сотрудники, Объект.НалоговыйПериод);
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьЗаголовокПоляРегистрацияВНО(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.Сотрудники.Очистить();
	Объект.СведенияОВычетах.Очистить();
	Объект.СведенияОДоходах.Очистить();
	
	Объект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиентСервер.ВидимостьКнопкиЗашифроватьИОтправить(ЭтаФорма);
	УстановитьИмяФайла();
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма);
	УчетНДФЛФормы.СправкаНДФЛУстановитьИнофнадписьОписаниеДоходовОрганизации(ЭтаФорма,,,,Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиентСервер.ВидимостьКнопкиЗашифроватьИОтправить(ЭтаФорма);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаСервере
Процедура РегистрацияВНалоговомОрганеПриИзмененииНаСервере()
	
	УчетНДФЛФормы.СправкаНДФЛУстановитьИнофнадписьОписаниеДоходовОрганизации(ЭтаФорма,,,,Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	УчетНДФЛФормы.СправкиНДФЛУстановитьКодИФНС(Объект.РегистрацияВНалоговомОргане, Объект.КодИФНС);
	
	ДанныеСправок = Новый Массив;
	Для Каждого ДанныеСправки Из Объект.Сотрудники Цикл
		
		Если Не ДанныеСправки.ФиксНалоги Тогда
			
			УдалитьСтрокиТаблицыДоходов(ДанныеСправки.Сотрудник);
			УдалитьСтрокиТаблицыВычетов(ДанныеСправки.Сотрудник);
			
			ДанныеСправок.Добавить(ДанныеСправки);
			
		КонецЕсли;
		
	КонецЦикла;	
		
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанныеОДоходахИНалогах(
		ДанныеСправок, 
		Объект.СведенияОДоходах, 
		Объект.СведенияОВычетах, 
		Объект.НалоговыйПериод, 
		Объект.Дата, 
		Объект.Организация, 
		Объект.РегистрацияВНалоговомОргане, 
		Истина, 
		Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);

КонецПроцедуры

&НаСервере
Процедура НеВключатьДоходыПоЦеннымБумагамПриИзмененииНаСервере()

	УчетНДФЛФормы.СправкаНДФЛУстановитьИнофнадписьОписаниеДоходовОрганизации(ЭтаФорма,,,,Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	
	ДанныеСправок = Новый Массив;
	Для Каждого ДанныеСправки Из Объект.Сотрудники Цикл
		
		Если Не ДанныеСправки.ФиксНалоги Тогда
			
			УдалитьСтрокиТаблицыДоходов(ДанныеСправки.Сотрудник);
			УдалитьСтрокиТаблицыВычетов(ДанныеСправки.Сотрудник);
			
			ДанныеСправок.Добавить(ДанныеСправки);
			
		КонецЕсли;
		
	КонецЦикла;	
		
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанныеОДоходахИНалогах(
		ДанныеСправок, 
		Объект.СведенияОДоходах, 
		Объект.СведенияОВычетах, 
		Объект.НалоговыйПериод, 
		Объект.Дата, 
		Объект.Организация, 
		Объект.РегистрацияВНалоговомОргане, 
		Истина, 
		Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);

КонецПроцедуры

&НаКлиенте
Процедура ВидСправокПриИзменении(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.ОснованиеДляПредставленияСправок");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	Если Элементы.Сотрудники.ТекущиеДанные <> Неопределено Тогда
	    АдресДанныхСправки = ПоместитьДанныеСправкиВоВременноеХранилище();
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресДанныхСправкиВХранилище", АдресДанныхСправки);
		ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыОткрытия.Вставить("ВнешниеДанные", Истина);
		
		ОткрытьФорму("Документ.СправкаНДФЛ.Форма.ФормаДокумента", ПараметрыОткрытия, ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	АдресДанныхСправки = ПоместитьДанныеСправкиВоВременноеХранилище(Истина);
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресДанныхСправкиВХранилище", АдресДанныхСправки);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыОткрытия.Вставить("ВнешниеДанные", Истина);
	
	ОткрытьФорму("Документ.СправкаНДФЛ.Форма.ФормаДокумента", ПараметрыОткрытия, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	СотрудникиПередУдалениемНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере(ТекущийСотрудник);	
	
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
	
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ"); 
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление"); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	Если Модифицированность Тогда 
		Записать();
	КонецЕсли;	
	
	Оповещение = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтотОбъект, Команда);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Проверить(Команда)
	
	Отказ = Ложь;
	ПроверитьДанныеДокумента(Отказ);
	
	Если Отказ Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'При встроенной проверке обнаружены ошибки.'"));
		Возврат;
	КонецЕсли;
		
	ТекстВопроса = НСтр("ru = 'При встроенной проверке ошибок не обнаружено. 
                        |Выполнить проверку программой Tester?'");		
						
	Оповещение = Новый ОписаниеОповещения("ПроверитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);				
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПроверитьСтороннейПрограммой();	
	КонецЕсли;	
	
КонецПроцедуры
	
&НаКлиенте
Процедура Заполнить(Команда)
	Если Объект.ОснованиеДляПредставленияСправок = ПредопределенноеЗначение("Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Автоматически заполняются только справки для ежегодной отчетности. 
							|Справки о невозможности удержания налога заполняются вручную.'"));
		Возврат;	
	КонецЕсли;

	Если НЕ ЗарплатаКадрыКлиент.ОрганизацияЗаполнена(Объект) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.РегистрацияВНалоговомОргане.Пустая() Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указаны %1.'"), Элементы.РегистрацияВНалоговомОргане.Заголовок));
		Возврат;
	КонецЕсли;	
	
	Если Не ЗарегистрированыДоходы Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'По %1 %2 не зарегистрированы доходы.'"), 
			РегистрацияВНОПредставление, 
			Элементы.РегистрацияВНалоговомОргане.Заголовок));
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьНаСервере();
	Если Объект.Сотрудники.Количество() = 0 Тогда
		ТекстСообщения = Нстр("ru = 'Не обнаружены данные для заполнения документа.'");
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Внимание.'"));
	Иначе
		Элементы.Сотрудники.ТекущаяСтрока = Объект.Сотрудники[0].ПолучитьИдентификатор();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора, МножественныйВыбор, ЗакрыватьПриВыборе", Истина, Истина, Ложь);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыОткрытия, Элементы.Сотрудники);
	
	//КадровыйУчетКлиент.ПодобратьФизическихЛицОрганизации(Элементы.Сотрудники, Объект.Организация, АдресСпискаПодобранныхСотрудников());
КонецПроцедуры

&НаКлиенте
Процедура Пронумеровать(Команда)
	ПронумероватьСправкиНаСервере(ТекущийСотрудник, ТекущийНомерСправки);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияДанныхСотрудника(Команда)
	ОтменитьИсправлениеДанныхСотрудника();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКарточкуСотрудника(Команда)
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено И ЗначениеЗаполнено(ДанныеТекущейСтроки.Сотрудник) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Ключ, АктивнаяСтраница", ДанныеТекущейСтроки.Сотрудник, "ЛичныеДанные");
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда=Неопределено)
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	
	Записать();
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		ПрисоединенныеФайлыКлиент.СохранитьФайлКак(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗавершение(Результат, Команда) Экспорт
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьНалоги(Команда)
	ОбновитьНалогиНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСтавкиНДФЛВТаблицеСотрудники()
	Для Каждого СтрокаТаблицы Из Объект.Сотрудники Цикл
		ЗаполнитьСтавкиВСтрокеТаблицыСотрудники(СтрокаТаблицы);		
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтавкиВСтрокеТаблицыСотрудники(СтрокаТаблицы)
	СтрокаТаблицы.Ставка09 = Перечисления.НДФЛСтавки.Ставка09;
	СтрокаТаблицы.Ставка13 = Перечисления.НДФЛСтавки.Ставка13;
	СтрокаТаблицы.Ставка15 = Перечисления.НДФЛСтавки.Ставка15;
	СтрокаТаблицы.Ставка30 = Перечисления.НДФЛСтавки.Ставка30;
	СтрокаТаблицы.Ставка35 = Перечисления.НДФЛСтавки.Ставка35;
КонецПроцедуры	

&НаСервере
Процедура ДополнитьФорму()
	ОписаниеЭлементовИндикации = ОписаниеЭлементовСИндикациейОшибок();
	ОписаниеПодчиненности = ОписаниеПодчиненностиДанных();
	ФормаДополнена = Истина;
	
	ЗарплатаКадрыОтображениеОшибок.ПриСозданииНаСервере(ЭтотОбъект, ОписаниеЭлементовИндикации, ОписаниеПодчиненности);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьПредставлениеРегистрацииВНО()
	УчетНДФЛФормы.СправкиНДФЛУстановитьПредставлениеРегистрацииВНО(ЭтаФорма);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСтороннейПрограммой()
	
	Если ЭтаФорма.Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	
	КаталогПрограммы = ПолучитьКаталогПрограммыПроверки();
	
	ПараметрыПроверки = Новый Структура(
		"КаталогПрограммы,
		|ОписаниеФайла");
	ПараметрыПроверки.КаталогПрограммы = КаталогПрограммы;
	ПараметрыПроверки.ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ДанныеФайла.ИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	// Если каталог не определен, надо его выбрать.
	ТекстСообщения = НСтр("ru = 'Для проверки файлов рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
	Обработчик = Новый ОписаниеОповещения("ПроверитьСтороннейПрограммойПослеПодключенияРасширения", ЭтотОбъект, ПараметрыПроверки);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтороннейПрограммойПослеПодключенияРасширения(Подключено, ПараметрыПроверки) Экспорт 
	
	Если Не Подключено Тогда
		// Расширение не установлено, просто скачиваем файл.
		ОписаниеФайла = ПараметрыПроверки.ОписаниеФайла;
		ПолучитьФайл(ОписаниеФайла.Хранение, ОписаниеФайла.Имя);
		Возврат;
	КонецЕсли;
	
	// Если каталог определен, проверим существует ли в каталоге файл программы.
	Если ЗначениеЗаполнено(ПараметрыПроверки.КаталогПрограммы) Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеИнициализацииФайла", ЭтотОбъект, ПараметрыПроверки);
		ВыбранныйКаталог = Новый Файл;
		ВыбранныйКаталог.НачатьИнициализацию(ОповещениеЗавершения, ПараметрыПроверки.КаталогПрограммы + "\Tester.exe");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = Нстр("ru = 'Не обнаружена программа проверки 2-НДФЛ. 
    					|Если Вы можете указать папку, в которую она установлена, нажмите «Да».'");
	Оповещение = Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеПредложенияВыбратьКаталог", ЭтотОбъект, ПараметрыПроверки);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , НСтр("ru='Предупреждение'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннейПрограммойПослеПредложенияВыбратьКаталог(РезультатВопроса, ПараметрыПроверки) Экспорт 
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Если пользователь согласился, предлагаем выбрать каталог.
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Заголовок = НСтр("ru = 'Выберите папку, в которую установлена программа проверки 2-НДФЛ'");
	ДиалогВыбораКаталога.Показать(Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеВыбораКаталога", ЭтотОбъект, ПараметрыПроверки));
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннейПрограммойПослеВыбораКаталога(ВыбранныеФайлы, ПараметрыПроверки) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Каталог выбран, надо проверить его.
	ПараметрыПроверки.КаталогПрограммы = ВыбранныеФайлы[0];
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеИнициализацииФайла", ЭтотОбъект, ПараметрыПроверки);
	ВыбранныйКаталог = Новый Файл;
	ВыбранныйКаталог.НачатьИнициализацию(ОповещениеЗавершения, ПараметрыПроверки.КаталогПрограммы + "\Tester.exe");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннейПрограммойПослеИнициализацииФайла(ФайлПрограммы, ПараметрыПроверки) Экспорт 
	
	// Проверяем на существование файл.
	ФайлПрограммы.НачатьПроверкуСуществования(
		Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеПроверкиСуществования", ЭтотОбъект, ПараметрыПроверки));
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннейПрограммойПослеПроверкиСуществования(Существует, ПараметрыПроверки) Экспорт 
	
	Если Не Существует Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В указанном каталоге программа проверки не обнаружена.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеПолученияФайлов", ЭтотОбъект, ПараметрыПроверки);
	
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ПараметрыПроверки.ОписаниеФайла);
	
	НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ПараметрыПроверки.КаталогПрограммы, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннейПрограммойПослеПолученияФайлов(ПолученныеФайлы, ПараметрыПроверки) Экспорт 
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЗаписатьКаталогПрограммыВНастройках(ПараметрыПроверки.КаталогПрограммы);

	СтрокаЗапускаПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2%3",
		"Tester.exe",
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПараметрыПроверки.КаталогПрограммы),
		ПараметрыПроверки.ОписаниеФайла.Имя);
	
	Обработчик = Новый ОписаниеОповещения("ПроверкаСтороннейПрограммойПослеЗапускаПриложения", ЭтотОбъект, ПараметрыПроверки);
	НачатьЗапускПриложения(Обработчик, СтрокаЗапускаПриложения, ПараметрыПроверки.КаталогПрограммы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннейПрограммойПослеЗапускаПриложения(КодВозврата, ПараметрыПроверки) Экспорт 
	
	НачатьУдалениеФайлов(, ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПараметрыПроверки.КаталогПрограммы) + ПараметрыПроверки.ОписаниеФайла.Имя); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКаталогПрограммыПроверки()
	
	КаталогПрограммы = ХранилищеОбщихНастроек.Загрузить("НастройкиПроверки2НДФЛ", "КаталогПрограммыПроверки"); 	
	
	Возврат КаталогПрограммы;
	
КонецФункции

&НаСервере
Процедура ЗаписатьКаталогПрограммыВНастройках(КаталогПрограммы)	
	ХранилищеОбщихНастроек.Сохранить("НастройкиПроверки2НДФЛ", "КаталогПрограммыПроверки", КаталогПрограммы);	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Отказ = Ложь;
	ПроверитьДанныеДокумента(Отказ);	
	
	Если Отказ Тогда
		
		ТекстВопроса = НСтр("ru = 'В документе обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
							
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
		
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеДокумента(Отказ)	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.СправкиНДФЛДляПередачиВНалоговыйОрган"));	
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ);
		
	ЗарплатаКадрыОтображениеОшибок.ПослеПроверкиЗаполненияВФорме(
		ЭтотОбъект,
		ДокументОбъект,
		СоответствиеДанныхОбъектаДаннымФормы(),
		ОписаниеПодчиненностиДанных(),
		"Объект");
КонецПроцедуры	

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ПрочитатьДанныеФормы();
	
	Если Объект.Сотрудники.Количество() > 0 Тогда
		
		Элементы.Сотрудники.ТекущаяСтрока = Объект.Сотрудники[0].ПолучитьИдентификатор();
	
		ДанныеТекущейСтроки = Объект.Сотрудники[0];
		УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьИнфонадписьИсправления(ИнфоНадписьИсправления, ДанныеТекущейСтроки, ДокументПроведен);
		
	КонецЕсли;	
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма);
	УчетНДФЛФормы.СправкаНДФЛУстановитьИнофнадписьОписаниеДоходовОрганизации(ЭтаФорма,,,,Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	
	УстановитьДоступностьЭлементовФормы(ЭтаФорма);
	УстановитьОтображениеНалоговПоСтавкам();
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьЗаголовокПоляРегистрацияВНО(ЭтаФорма);
	
	ТолькоПросмотр = Объект.СпециальныйДокумент2013года;
	
	ДокументПроведен = Объект.Проведен;
	
	ЗаполнитьСтавкиНДФЛВТаблицеСотрудники()
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовФормы(Форма)
	
	ДоступностьКоманд = Форма.ДокументПроведен;
	
	Форма.Элементы.ДокументПринятВНалоговыйОрган.Доступность = ДоступностьКоманд;	
		
	Форма.ТолькоПросмотр = Форма.Объект.ДокументПринятВНалоговыйОрган;
	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьДанныеФормы()
	УстановитьИмяФайла();
	ПрочитатьДанныеСправок();
	УстановитьПредставлениеАдресов(Объект.Сотрудники);
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(Объект.Сотрудники, Объект.НалоговыйПериод);
	ЗаполнитьСписокМесяцевНалоговогоПериода();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеСправок()
		
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанныеСотрудников(Объект.Сотрудники, Объект.НалоговыйПериод, Объект.Дата, Не ДокументПроведен);

КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокМесяцевНалоговогоПериода()	
	Для Каждого СтрокаДоходов Из Объект.СведенияОДоходах Цикл
		СтрокаДоходов.МесяцНалоговогоПериодаСтрокой = УчетНДФЛКлиентСервер.МесяцНалоговогоПериодаСтрокой(СтрокаДоходов.МесяцНалоговогоПериода);
	КонецЦикла;
КонецПроцедуры

#Область МетодыЗаполненияДанныхСправок

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Объект.Сотрудники.Очистить();
	Объект.СведенияОДоходах.Очистить();
	Объект.СведенияОВычетах.Очистить();
	
	НомерСправки = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.НомерПервойСправки(Объект.Дата, Объект.НалоговыйПериод, Объект.Организация);
	
	ДобавляемыеСотрудники = СотрудникиДляЗаполненияСправки();
	
	Для каждого Сотрудник Из ДобавляемыеСотрудники Цикл
		СтрокаТаблицы = Объект.Сотрудники.Добавить();
		СтрокаТаблицы.Сотрудник = Сотрудник;
		СтрокаТаблицы.НомерСправки = НомерСправки;
		
		НомерСправки = НомерСправки + 1;
	КонецЦикла;
	
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанные(
		Объект.Сотрудники, 
		Объект.СведенияОДоходах, 
		Объект.СведенияОВычетах, 
		Объект.НалоговыйПериод, 
		Объект.Дата, 
		Объект.Организация, 
		Объект.РегистрацияВНалоговомОргане, 
		Истина,
		Истина,
		Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
		
	ЗаполнитьСтавкиНДФЛВТаблицеСотрудники();	
	УстановитьОтображениеНалоговПоСтавкам();
		
	УстановитьПредставлениеАдресов(Объект.Сотрудники);
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(Объект.Сотрудники, Объект.НалоговыйПериод);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНаСервере(ДобавляемыеСотрудники)
	
	ИдентификаторТекущейСтроки = Элементы.Сотрудники.ТекущаяСтрока;
	
	Если Объект.Сотрудники.Количество() = 0 Тогда
		НомерСправки = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.НомерПервойСправки(Объект.Дата, Объект.НалоговыйПериод, Объект.Организация);
	Иначе
		НомерСправки = Объект.Сотрудники[Объект.Сотрудники.Количество() - 1].НомерСправки + 1;
	КонецЕсли;
	
	ДанныеСправок = Новый Массив;
	Для каждого Сотрудник Из ДобавляемыеСотрудники Цикл
		
		СтрокаТаблицы = Объект.Сотрудники.Добавить();
		СтрокаТаблицы.Сотрудник = Сотрудник;
		СтрокаТаблицы.НомерСправки = НомерСправки;
		
		ЗаполнитьСтавкиВСтрокеТаблицыСотрудники(СтрокаТаблицы);
		
		НомерСправки = НомерСправки + 1;
		
		ДанныеСправок.Добавить(СтрокаТаблицы);
		
		ИдентификаторТекущейСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
		
	КонецЦикла;
	
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанные(
		ДанныеСправок,
		Объект.СведенияОДоходах, 
		Объект.СведенияОВычетах, 
		Объект.НалоговыйПериод, 
		Объект.Дата, 
		Объект.Организация, 
		Объект.РегистрацияВНалоговомОргане, 
		Истина,
		Истина,
		Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
	
	УстановитьПредставлениеАдресов(Объект.Сотрудники);
	ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(Объект.Сотрудники, Объект.НалоговыйПериод);
	
	Элементы.Сотрудники.ТекущаяСтрока = ИдентификаторТекущейСтроки;
	
КонецПроцедуры

&НаСервере
Функция НомерПервойСправки()
	Если Объект.Сотрудники.Количество() = 0 Тогда
		Возврат Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.НомерПервойСправки(Объект.Дата, Объект.НалоговыйПериод, Объект.Организация);
	Иначе
		Возврат Объект.Сотрудники[Объект.Сотрудники.Количество() - 1].НомерСправки + 1;
	КонецЕсли;
КонецФункции	

&НаСервере
Процедура СотрудникПриИзмененииНаСервере(ТекущийСотрудник)
	
	ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		УдалитьСтрокиТаблицыДоходов(ТекущийСотрудник);
		УдалитьСтрокиТаблицыВычетов(ТекущийСотрудник);
		
		УчетНДФЛФормы.СправкиНДФЛОчиститьДанныеСправки(ДанныеТекущейСтроки);
		
		Если ДанныеТекущейСтроки.НомерСправки = 0 Тогда
			Если Объект.Сотрудники.Количество() = 1 Тогда
				ДанныеТекущейСтроки.НомерСправки = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.НомерПервойСправки(Объект.Дата, Объект.НалоговыйПериод, Объект.Организация);
			ИначеЕсли ДанныеТекущейСтроки.НомерСтроки = Объект.Сотрудники.Количество() Тогда
				ДанныеТекущейСтроки.НомерСправки = Объект.Сотрудники[Объект.Сотрудники.Количество() - 2].НомерСправки + 1;		
			Иначе	
				ДанныеТекущейСтроки.НомерСправки = Объект.Сотрудники[Объект.Сотрудники.Количество() - 1].НомерСправки + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.Сотрудник) Тогда 
			
			ДанныеСправок = Новый Массив;
			
			ДанныеСправок.Добавить(ДанныеТекущейСтроки);
			
			УчетНДФЛФормы.СправкиНДФЛПрочитатьДанные(
				ДанныеСправок, 
				Объект.СведенияОДоходах, 
				Объект.СведенияОВычетах, 
				Объект.НалоговыйПериод, 
				Объект.Дата, 
				Объект.Организация, 
				Объект.РегистрацияВНалоговомОргане, 
				Истина,
				Истина,
				Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
			
			УстановитьПредставлениеАдресов(ДанныеСправок);
			ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(ДанныеСправок, Объект.НалоговыйПериод);
			
		КонецЕсли;
				
	КонецЕсли;

	ТекущийСотрудник = ДанныеТекущейСтроки.Сотрудник;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеФизическогоЛица(ФизическоеЛицо)
	
	СтрокиПоСотруднику = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ФизическоеЛицо));
	
	Если СтрокиПоСотруднику.Количество() > 0 Тогда
		УчетНДФЛФормы.СправкиНДФЛПрочитатьДанныеСотрудников(СтрокиПоСотруднику, Объект.НалоговыйПериод, Объект.Дата, Истина);
		УстановитьПредставлениеАдресов(СтрокиПоСотруднику);
		ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(СтрокиПоСотруднику, Объект.НалоговыйПериод);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьИсправлениеДанныхСотрудника()
	
	Если Элементы.Сотрудники.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
		
		УчетНДФЛФормы.СправкиНДФЛОтменитьИсправлениеДанныхСотрудника(ЭтаФорма, ДанныеТекущейСтроки, Объект.НалоговыйПериод, Объект.Дата);
		
		ДанныеСправок = Новый Массив;
		ДанныеСправок.Добавить(ДанныеТекущейСтроки);
		
		УстановитьПредставлениеАдресов(ДанныеСправок);
		ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(ДанныеСправок, Объект.НалоговыйПериод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНалогиНаСервере()
	
	Если Элементы.Сотрудники.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);

		УдалитьСтрокиТаблицыДоходов(ДанныеТекущейСтроки.Сотрудник);
		УдалитьСтрокиТаблицыВычетов(ДанныеТекущейСтроки.Сотрудник);
		
		УчетНДФЛФормы.СправкиНДФЛОбновитьНалоги(
			ЭтаФорма,
			ДанныеТекущейСтроки,
			Объект.СведенияОДоходах, 
			Объект.СведенияОВычетах, 
			Объект.НалоговыйПериод, 
			Объект.Дата, 
			Объект.Организация, 
			Объект.РегистрацияВНалоговомОргане, 
			Истина, 
			Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
		
	КонецЕсли;	
		
КонецПроцедуры	

&НаСервере
Процедура СотрудникиПередУдалениемНаСервере()
	
	Для Каждого ИдентификаторСтроки Из Элементы.Сотрудники.ВыделенныеСтроки Цикл
		ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура УдалитьСтрокиТаблицыДоходов(Сотрудник)
	
	УдаляемыеСтрокиТаблицы = Объект.СведенияОДоходах.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиТаблицы Цикл
		Объект.СведенияОДоходах.Удалить(Объект.СведенияОДоходах.Индекс(УдаляемаяСтрока));
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура УдалитьСтрокиТаблицыВычетов(Сотрудник)
	
	УдаляемыеСтрокиТаблицы = Объект.СведенияОВычетах.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиТаблицы Цикл
		Объект.СведенияОВычетах.Удалить(Объект.СведенияОВычетах.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ПроставитьНовыйНомерСправки(СтарыйНомерСправки, НовыйНомерСправки, ТабличнаяЧасть) Экспорт
	
	НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерСправки",СтарыйНомерСправки));
	Для каждого СтрокаТЧ Из НайденныеСтроки  Цикл
		СтрокаТЧ.НомерСправки = НовыйНомерСправки
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПронумероватьСправкиНаСервере(ТекущийСотрудник, ТекущийНомерСправки)
	
	НомерПервойСправки = Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.НомерПервойСправки(Объект.Дата, Объект.НалоговыйПериод, Объект.Организация);
	
	ТаблицаДоходов = Объект.СведенияОДоходах.Выгрузить();
	ТаблицаВычетов = Объект.СведенияОВычетах.Выгрузить();
	Объект.СведенияОДоходах.Очистить();
	Объект.СведенияОВычетах.Очистить();
	СтруктураПоиска = Новый Структура("НомерСправки");
	Для каждого СтрокаТЧ Из Объект.Сотрудники Цикл
		СтруктураПоиска.НомерСправки = СтрокаТЧ.НомерСправки;
		СтрокаТЧ.НомерСправки = НомерПервойСправки;
		Для каждого СтрокаМассива Из ТаблицаДоходов.НайтиСтроки(СтруктураПоиска) Цикл
			НоваяСтрока = Объект.СведенияОДоходах.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМассива);
			НоваяСтрока.НомерСправки = НомерПервойСправки;
		КонецЦикла;
		Для каждого СтрокаМассива Из ТаблицаВычетов.НайтиСтроки(СтруктураПоиска) Цикл
			НоваяСтрока = Объект.СведенияОВычетах.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМассива);
			НоваяСтрока.НомерСправки = НомерПервойСправки;
		КонецЦикла;
		НомерПервойСправки = НомерПервойСправки + 1;
	КонецЦикла;
	
	Если Элементы.Сотрудники.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
		ТекущийНомерСправки = ДанныеТекущейСтроки.НомерСправки;
		ТекущийСотрудник = ДанныеТекущейСтроки.Сотрудник;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция СотрудникиДляЗаполненияСправки()

    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ГоловнаяОрганизация"));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("НалоговыйПериод", Объект.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецНП",КонецГода(Дата(Объект.НалоговыйПериод,1,1)));
	Запрос.УстановитьПараметр("НачалоНП", НачалоГода(Дата(Объект.НалоговыйПериод,1,1)));
	Запрос.УстановитьПараметр("ДатаПодачиСведений", Объект.Дата);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", Объект.РегистрацияВНалоговомОргане);
	
	Если Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам Тогда
		Запрос.Текст = 	
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДоходахНДФЛОбороты.ФизическоеЛицо КАК Сотрудник
		|ПОМЕСТИТЬ ВТФизическиеЛицаПолучавшиеДоходы
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛОбороты
		|ГДЕ
		|	СведенияОДоходахНДФЛОбороты.Период <= &ДатаПодачиСведений
		|	И СведенияОДоходахНДФЛОбороты.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И СведенияОДоходахНДФЛОбороты.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП
		|	И СведенияОДоходахНДФЛОбороты.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|	И СведенияОДоходахНДФЛОбороты.Организация = &Организация
		|	И НЕ СведенияОДоходахНДФЛОбороты.ВключатьВДекларациюПоНалогуНаПрибыль";
	Иначе
		Запрос.Текст = 	
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДоходахНДФЛОбороты.ФизическоеЛицо КАК Сотрудник
		|ПОМЕСТИТЬ ВТФизическиеЛицаПолучавшиеДоходы
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ.Обороты(
		|			,
		|			&ДатаПодачиСведений,
		|			,
		|			ГоловнаяОрганизация = &ГоловнаяОрганизация
		|				И (МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
		|				И РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|				И Организация = &Организация) КАК СведенияОДоходахНДФЛОбороты";
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 	
	"ВЫБРАТЬ ПЕРВЫЕ 3000
	|	ФизическиеЛицаПолучавшиеДоходы.Сотрудник,
	|	ФизическиеЛицаПолучавшиеДоходы.Сотрудник.Наименование КАК СотрудникНаименование
	|ИЗ
	|	ВТФизическиеЛицаПолучавшиеДоходы КАК ФизическиеЛицаПолучавшиеДоходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган КАК СправкиНДФЛДляПередачиВНалоговыйОрган
	|			ПО СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка = СправкиНДФЛДляПередачиВНалоговыйОрган.Ссылка
	|				И (СправкиНДФЛДляПередачиВНалоговыйОрган.Организация = &Организация)
	|				И (СправкиНДФЛДляПередачиВНалоговыйОрган.НалоговыйПериод = &НалоговыйПериод)
	|				И (СправкиНДФЛДляПередачиВНалоговыйОрган.Дата <= &ДатаПодачиСведений)
	|				И (СправкиНДФЛДляПередачиВНалоговыйОрган.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
	|				И (СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен)
	|		ПО ФизическиеЛицаПолучавшиеДоходы.Сотрудник = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
	|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка <> &Ссылка)
	|ГДЕ
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникНаименование";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Сотрудники = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Сотрудники.Добавить(Выборка.Сотрудник);
	КонецЦикла;
		
	Возврат Сотрудники;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьПредставлениеАдресов(ДанныеСправок)
	
	Для Каждого ДанныеСправкиПоСотруднику Из ДанныеСправок Цикл
		
		Если Не ПустаяСтрока(ДанныеСправкиПоСотруднику.Адрес) Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
					ДанныеСправкиПоСотруднику.Адрес, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
			УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, ДанныеСправкиПоСотруднику.АдресПредставление);
		Иначе
			ДанныеСправкиПоСотруднику.АдресПредставление = НСтр("ru = '<Не заполнен>'");
		КонецЕсли;
		
		Если Не ПустаяСтрока(ДанныеСправкиПоСотруднику.АдресЗарубежом) Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
					ДанныеСправкиПоСотруднику.АдресЗарубежом, Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица);
			УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, ДанныеСправкиПоСотруднику.АдресЗарубежомПредставление);
		Иначе
			ДанныеСправкиПоСотруднику.АдресЗарубежомПредставление = НСтр("ru = '<Не заполнен>'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьИнфоНадписиОДокументахУдостоверяющихЛичность(СтрокиПоСотрудникам, НалоговыйПериод)
	
	Если ТипЗнч(СтрокиПоСотрудникам) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокиПоСотрудникам.Сотрудник);
		СтрокиПоСотрудникам = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокиПоСотрудникам);
	ИначеЕсли ТипЗнч(СтрокиПоСотрудникам) = Тип("Массив") Тогда
		МассивСотрудников = Новый Массив;
		Для каждого СтрокаПоСотруднику Из СтрокиПоСотрудникам Цикл
			МассивСотрудников.Добавить(СтрокаПоСотруднику.Сотрудник);
		КонецЦикла;
	Иначе
		МассивСотрудников = СтрокиПоСотрудникам.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	ТекущиеУдостоверенияЛичности = КадровыйУчетФормы.ТекущиеУдостоверенияЛичностиФизическихЛиц(
		МассивСотрудников, КонецГода(Дата(НалоговыйПериод, 1, 1)));

	Для каждого СтрокаСотрудника Из СтрокиПоСотрудникам Цикл
		СтрокаСотрудника.ИнфоОДокументеУдостоверяющемЛичностьНадпись = КадровыйУчетФормы.ИнфоНадписьОДокументеУдостоверяющемЛичность(
			ТекущиеУдостоверенияЛичности, СтрокаСотрудника.Сотрудник, СтрокаСотрудника.ВидДокумента, СтрокаСотрудника.СерияДокумента, СтрокаСотрудника.НомерДокумента);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыДляРаботыСПрисоединеннымКОбъектуФайлом

&НаСервере
Процедура УстановитьИмяФайла()
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, , Ложь); 
	
	ИмяФайла = ?(ДанныеФайла = Неопределено, "", ДанныеФайла.ИмяФайла);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Ссылка, УникальныйИдентификатор = Неопределено, ПолучатьСсылкуНаДвоичныеДанные = Истина)	
	
	Возврат ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор, ПолучатьСсылкуНаДвоичныеДанные);	
	
КонецФункции	

&НаСервере
Функция СформироватьФайлНаСервере() Экспорт
	
	ДокументЗаписан = Ложь;
	
	НаличиеФайла = Объект.ФайлСформирован;
	СтруктураПараметровЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);	
	Объект.ФайлСформирован = Истина;
	ДокументЗаписан = Записать(СтруктураПараметровЗаписи);
	Объект.ФайлСформирован = ДокументЗаписан Или НаличиеФайла;	
	
	УстановитьДоступностьЭлементовФормы(ЭтаФорма);
	
	Возврат ДокументЗаписан;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииСтыковкиССервисомСдачиОтчетностиЧерезПредставителя

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	Записать();
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Результат, ДополнительныеПараметры) Экспорт

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеОтправки(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПротоколОтправки(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОткрытьПротоколОтправки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьИОтправить(Команда)
	
	Записать();
	
	Оповещение = Новый ОписаниеОповещения("ЗашифроватьИОтправитьЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьИОтправитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиент.ПриНажатииНаКнопкуЗашифроватьИОтправить(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Записать();
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Записать();
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, ДополнительныеПараметры) Экспорт

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеСправкиВоВременноеХранилище(НоваяСтрока = Ложь)
	Если НоваяСтрока Тогда
		ДанныеСотрудника = Новый Структура;
		ДанныеСотрудника.Вставить("НомерСправки", НомерПервойСправки());
		
		ОшибкиДанныхСправки = Новый Массив;
		СведенияОДоходах = Новый Массив;
		СведенияОВычетах = Новый Массив;
	Иначе	
		ДанныеСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
		
		ИндексСтроки = Объект.Сотрудники.Индекс(ДанныеСотрудника);
		
		ПутьКДанным = "Объект.Сотрудники[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=") + "]";
	
		ОшибкиДанныхСправки = ЗарплатаКадрыОтображениеОшибок.СообщениеОбОшибкахДляПередачиВФормуРедактированияСтрокиТаблицыФормы(
								ЭтотОбъект, 
								ПутьКДанным, 
								ОписаниеПодчиненностиДанных());										
		
		СтруктураПоиска = Новый Структура("Сотрудник", ДанныеСотрудника.Сотрудник);
		
		СведенияОДоходах = Объект.СведенияОДоходах.НайтиСтроки(СтруктураПоиска);
		СведенияОВычетах = Объект.СведенияОВычетах.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;	
	
	Возврат УчетНДФЛФормы.ПоместитьДанныеСправки2НДФЛВХранилище(
				ЭтотОбъект,
				ДанныеСотрудника,
				СведенияОДоходах,
				СведенияОВычетах,
				ДанныеСотрудника.НомерСправки,
				ОшибкиДанныхСправки,
				НоваяСтрока,
				,
				Объект.НалоговыйПериод >= Год(УчетНДФЛ.ДатаПереходаНаКодыОКТМО()) И Объект.НеВключатьДоходыПоЦеннымБумагам);
		
КонецФункции	

&НаСервере
Процедура ЗагрузитьДанныеСправкиИзХранилища(АдресДанныхСправкиВХранилище)
	
	ДанныеСправки = ПолучитьИзВременногоХранилища(АдресДанныхСправкиВХранилище);
	
	Если ДанныеСправки.НоваяСтрока Тогда
		ДанныеСотрудника = Объект.Сотрудники.Добавить();	
		Элементы.Сотрудники.ТекущаяСтрока = ДанныеСотрудника.ПолучитьИдентификатор();
		ЗаполнитьСтавкиВСтрокеТаблицыСотрудники(ДанныеСотрудника);
	Иначе	
		ДанныеСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(ДанныеСотрудника, ДанныеСправки);
		
	УдалитьСтрокиТаблицыДоходов(ДанныеСотрудника.Сотрудник);
	УдалитьСтрокиТаблицыВычетов(ДанныеСотрудника.Сотрудник);
	
	Для каждого СведениеОДоходе Из ДанныеСправки.МассивСведенийОДоходах Цикл
		НоваяСтрокаСведенийОДоходе = Объект.СведенияОДоходах.Добавить();
		НоваяСтрокаСведенийОДоходе.Сотрудник = ДанныеСправки.Сотрудник;
		НоваяСтрокаСведенийОДоходе.НомерСправки = ДанныеСотрудника.НомерСправки;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСведенийОДоходе, СведениеОДоходе);
	КонецЦикла;
	
	Для каждого СведениеОВычете Из ДанныеСправки.МассивСведенийОВычетах Цикл
		НоваяСтрокаСведений = Объект.СведенияОВычетах.Добавить();
		НоваяСтрокаСведений.Сотрудник = ДанныеСправки.Сотрудник;
		НоваяСтрокаСведенийОДоходе.НомерСправки = ДанныеСотрудника.НомерСправки;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСведений, СведениеОВычете);
	КонецЦикла;
	
	УстановитьОтображениеНалоговПоСтавкам();
	
	Модифицированность = Истина;
	
	ИндексСтроки = Объект.Сотрудники.Индекс(ДанныеСотрудника);
	
	ПутьКДанным = "Объект.Сотрудники[" +  Формат(ИндексСтроки, "ЧН=0; ЧГ=") + "]";
	                                                                  
	СоответсвиеПутиКДаннымТаблиц = Новый Соответствие;
	СоответсвиеПутиКДаннымТаблиц.Вставить("Объект.СведенияОДоходах", "Объект.СведенияОДоходах");
	СоответсвиеПутиКДаннымТаблиц.Вставить("Объект.СведенияОВычетах", "Объект.СведенияОВычетах");
	
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(ЭтотОбъект, ПутьКДанным + ".*"); 
	
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		ПутьКДанным,
		ОписаниеПодчиненностиДанных(),
		Истина);
		
	ОшибкиДанныхФормы = ЗарплатаКадрыОтображениеОшибок.ПоместитьСообщенияОбОшибкахИзФормыРедактированияСтрокиТаблицыФормыВОсновнуюФорму(
							ЭтотОбъект, 
							ПутьКДанным,
							ДанныеСправки.ОшибкиДанныхСправки,
							СоответсвиеПутиКДаннымТаблиц,
							ОписаниеПодчиненностиДанных());				
									
	ЗарплатаКадрыОтображениеОшибок.УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(
		ЭтотОбъект,
		ОшибкиДанныхФормы,
		ОписаниеПодчиненностиДанных());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеНалоговПоСтавкам()
	ЕстьВидимыеПоляИтогов = Ложь;
	Для Каждого СтавкаНДФЛ Из Перечисления.НДФЛСтавки Цикл
		ВидимостьПолей = ИтогиПоСтавкеЗаполнены(СтавкаНДФЛ);
		
		Если ВидимостьПолей Тогда
			ЕстьВидимыеПоляИтогов = Истина;
		КонецЕсли;
		
		УстановитьВидимостьПолейИтоговПоСтавке(СтавкаНДФЛ, ВидимостьПолей);
	КонецЦикла;
	
	Если Не ЕстьВидимыеПоляИтогов Тогда
		УстановитьВидимостьПолейИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка13, Истина);
	КонецЕсли;			
КонецПроцедуры

&НаСервере
Функция ИтогиПоСтавкеЗаполнены(Ставка)
	ИтогиПоСтавкеЗаполнены = Ложь;
	
	ИменаПолейИтоговПоСтавке = ИменаПолейИтоговПоСтавке(Ставка);
	
	Для Каждого ПолеИтогов Из ИменаПолейИтоговПоСтавке Цикл
		Если Объект.Сотрудники.Итог(ПолеИтогов) <> 0 Тогда
			ИтогиПоСтавкеЗаполнены = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ИтогиПоСтавкеЗаполнены;
КонецФункции	

&НаСервере
Процедура УстановитьВидимостьПолейИтоговПоСтавке(Стаква, Видимость)
	ИменаЭлементов = ИменаЭлементовОтображенияИтоговПоСтавке(Стаква);
	
	Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ИмяЭлемента,
			"Видимость",
			Видимость);
	КонецЦикла;		
КонецПроцедуры	

&НаСервере
Функция ИменаПолейИтоговПоСтавке(Ставка)
	ИменаПолейИтоговПоСтавкам = Новый Массив;
	
	Окончание = "";
	Если Ставка = Перечисления.НДФЛСтавки.Ставка09 Тогда
		Окончание = "9";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
		Окончание = "13";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка15 Тогда
		Окончание = "15";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка30 Тогда
		Окончание = "30";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка35 Тогда
		Окончание = "35";
	КонецЕсли;	
	
	Если Не ПустаяСтрока(Окончание) Тогда	
		ИменаПолейИтоговПоСтавкам.Добавить("ОбщаяСуммаДоходаПоСтавке" + Окончание);
		ИменаПолейИтоговПоСтавкам.Добавить("ОблагаемаяСуммаДоходаПоСтавке" + Окончание);
		ИменаПолейИтоговПоСтавкам.Добавить("ИсчисленоПоСтавке" + Окончание);
		ИменаПолейИтоговПоСтавкам.Добавить("УдержаноПоСтавке" + Окончание);
		ИменаПолейИтоговПоСтавкам.Добавить("ЗадолженностьПоСтавке" + Окончание);
		ИменаПолейИтоговПоСтавкам.Добавить("ИзлишнеУдержаноПоСтавке" + Окончание);
		ИменаПолейИтоговПоСтавкам.Добавить("ПеречисленоПоСтавке" + Окончание);	
	КонецЕсли;
	
	Возврат ИменаПолейИтоговПоСтавкам;	
КонецФункции	

&НаСервере
Функция ИменаЭлементовОтображенияИтоговПоСтавке(Ставка)
	ИменаЭлементовИтогов = Новый Массив;
	
	Окончание = "";
	Если Ставка = Перечисления.НДФЛСтавки.Ставка09 Тогда
		Окончание = "9";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
		Окончание = "13";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка15 Тогда
		Окончание = "15";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка30 Тогда
		Окончание = "30";
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка35 Тогда
		Окончание = "35";
	КонецЕсли;	
	
	Если Не ПустаяСтрока(Окончание) Тогда	
		ИменаЭлементовИтогов = Новый Массив;
		ИменаЭлементовИтогов.Добавить("СотрудникиСтавка" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиОбщаяСуммаДоходаПоСтавке" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиОблагаемаяСуммаДоходаПоСтавке" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиИсчисленоПоСтавке" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиУдержаноПоСтавке" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиЗадолженностьПоСтавке" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиИзлишнеУдержаноПоСтавке" + Окончание);
		ИменаЭлементовИтогов.Добавить("СотрудникиПеречисленоПоСтавке" + Окончание);	
	КонецЕсли;
	
	Возврат ИменаЭлементовИтогов;	
КонецФункции	

#КонецОбласти

#Область ИндикацияОшибок

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	КоллекцияОписанийЭлементов = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементовСИндикациейОшибок();
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Организация";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ОтображатьНепривязанныеОшибки = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.Организация";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ВидСправок";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ОснованиеДляПредставленияСправок";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РегистрацияВНалоговомОргане";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "РегистрацияВНОПредставление";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
		
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();
	ОписаниеЭлемента.ИмяЭлемента = "Сотрудники";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "Сотрудники";	
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.Сотрудники";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
				
	Возврат КоллекцияОписанийЭлементов;
КонецФункции	

&НаСервере
Функция СоответствиеДанныхОбъектаДаннымФормы()
	
	ОписаниеСоответствияДанныхОбъектовДаннымФормы = ЗарплатаКадрыОтображениеОшибок.ОписаниеСвязиДанных();
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,  
		"РегистрацияВНалоговомОргане", 
		"РегистрацияВНОПредставление");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,  
		"КодИФНС", 
		"Объект.Организация");	
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,  
		"НалоговыйПериод", 
		"Объект.Организация");		
							
	Возврат ОписаниеСоответствияДанныхОбъектовДаннымФормы;	
КонецФункции	

&НаСервере
Функция ОписаниеПодчиненностиДанных() 
	ОписаниеПодчиненностиДанных = ЗарплатаКадрыОтображениеОшибок.ОписаниеПодчиненностиДанныхФормы();
						
	КлючСвязиТаблицПоСотруднику = ЗарплатаКадрыОтображениеОшибок.КлючСвязиДанныхСтрокТаблиц();
	ЗарплатаКадрыОтображениеОшибок.ДобавитьЭлементКлючаСвязиПоПолямСтрокТаблиц(КлючСвязиТаблицПоСотруднику, "Сотрудник", "Сотрудник");
					
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеПодчиненностиДанныхСтрокТаблиц(
		ОписаниеПодчиненностиДанных,
		"Объект.Сотрудники",
		"Объект.СведенияОДоходах",
		КлючСвязиТаблицПоСотруднику);
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеПодчиненностиДанныхСтрокТаблиц(
		ОписаниеПодчиненностиДанных,
		"Объект.Сотрудники",
		"Объект.СведенияОВычетах",
		КлючСвязиТаблицПоСотруднику);
		
	Возврат ОписаниеПодчиненностиДанных;	
КонецФункции	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииОшибкиНажатие(Элемент, СтандартнаяОбработка)
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииОшибкиНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииПриАктивизацииЯчейки(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииПриАктивизацииЯчейки(ЭтотОбъект, Элемент);	
КонецПроцедуры	

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;

#КонецОбласти

#КонецОбласти
