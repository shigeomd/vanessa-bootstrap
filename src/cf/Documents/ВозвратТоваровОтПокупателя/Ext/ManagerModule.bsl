#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Функция УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаНДС", "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ОтразитьВКнигеПокупок");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовПоТаре",        "ВозвратнаяТараПереданная");
	
	// Табличная часть Товары
	
	//   Запасы (кроме оборудования, розницы в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",           "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Оборудование");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПереданныеСчетУчета", "ЗапасыОтгруженные");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОперацииСКомиссионером");
	
	//   Выручка (кроме оборудования, розницы в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов",  "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СобственныеЗапасы");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС", "СуммаНДС");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	
	//  Оборудование (тоже в табличной части Товары)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",     "ОборудованиеНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Оборудование");
	
	//   Выручка (для оборудования)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов",  "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",     "ВидДеятельности");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов", "Расходы");
	
	//   Запасы (розница в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",           "ЗапасыВЦенахПродажи");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПереданныеСчетУчета", "ЗапасыОтгруженные");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОперацииСКомиссионером");
	
	//   Выручка (розница в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов",  "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СобственныеЗапасы");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС", "СуммаНДС");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	
	// Способ учета НДС
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СпособУчетаНДС", "СпособУчетаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС", "СуммаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	
	// Табличная часть ВозвратнаяТара
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ВозвратнаяТара", "СчетУчета", "ВозвратнаяТараНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДеятельностьНаПатенте");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ОтразитьВКнигеПокупок");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "Оборудование", "ВидОперации");
	
	Возврат Правила;
	
КонецФункции

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт

	Если ДанныеЗаполнения.Свойство("Оборудование") Тогда
		
		ДанныеЗаполнения.Оборудование = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование);
		
	КонецЕсли;

КонецПроцедуры


#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьРеквизитыПриИзменении(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Параметры:
//  Объект		- ДокументОбъект
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВТабличнойЧасти(
		Объект,
		ИмяТабличнойЧасти);

КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  Объект                - ДокументОбъект или соответствующие данные формы
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - оставлен для совместимости; не используется
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре = Неопределено) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ИмяТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("Реквизиты",                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_РублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента",         НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	"""" КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Поставщик,
	|	Реквизиты.Контрагент.ИНН КАК ИННпоставщика,
	|	Реквизиты.Контрагент КАК ОбособленноеПодразделениеПоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Контрагент
	|		ИНАЧЕ ""он же""
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК Покупатель,
	|	Реквизиты.Организация.ИНН КАК ИННпокупателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПокупателя,
	|	Реквизиты.Организация КАК Грузополучатель,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.Представление КАК Основание,
	|	ИСТИНА КАК ЕстьТовары,
	|	"""" КАК АдресДоставки
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	ТаблицаТовары.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ТаблицаТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0) КАК СуммаБезНДСРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСРуб,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК КонтрагентСводныйСФ
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаТовары.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|			И (ТаблицаТовары.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// Вызывается документом СчетФактураВыданный на аванс при вводе на основании
//
Функция ТекстЗапросаСчетФактураВыданныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.Ссылка.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ТаблицаДокумента.Ссылка.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка) КАК СчетНаОплату,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.Сумма + ВЫБОР
	|			КОГДА ТаблицаДокумента.Ссылка.СуммаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаДокумента.СуммаНДС
	|		КОНЕЦ) КАК Сумма
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.Ссылка.ДоговорКонтрагента,
	|	ТаблицаДокумента.Ссылка.СчетУчетаРасчетовПоАвансам,
	|	ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка),
	|	ТаблицаДокумента.СтавкаНДС";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяВозвратнаяТара.Номенклатура,
	|	ВозвратТоваровОтПокупателяВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ИСТИНА КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ВозвратнаяТара
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара КАК ВозвратТоваровОтПокупателяВозвратнаяТара
	|ГДЕ
	|	ВозвратТоваровОтПокупателяВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
	|	И НЕ ВозвратТоваровОтПокупателяТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВозвратнаяТара.Номенклатура
	|				ИЗ
	|					ВозвратнаяТара КАК ВозвратнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратнаяТара.Номенклатура,
	|	ВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ВозвратнаяТара.ЦенаВключаетНДС
	|ИЗ
	|	ВозвратнаяТара КАК ВозвратнаяТара
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// При вводе на основании счета на оплату и поступления товаров и услуг, 
	// открывается форма, содержащая только ТЧ Товары или только ТЧ Услуги, если
	// у документа-основания заполнена только соответствующая таблица.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыДокумента = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыДокумента[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование, "ФормаДокументаОбщая");
	
	Возврат ФормыДокумента;

КонецФункции

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ВидОперацииОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
		Если ВидОперацииОснования = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия Тогда
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование;
		Конецесли;
		
	КонецЕсли;
	
	Возврат ВидОперации;

КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьПредъявленСчетФактура");
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	МассивРеквизитов.Добавить("УдалитьНомерВходящегоСчетаФактуры");
	МассивРеквизитов.Добавить("УдалитьДатаВходящегоСчетаФактуры");
	МассивРеквизитов.Добавить("УдалитьНДСПредъявленКВычету");
	МассивРеквизитов.Добавить("УдалитьКодВидаОперации");
	МассивРеквизитов.Добавить("УдалитьКодСпособаПолучения");
	
	Возврат МассивРеквизитов;
	
КонецФункции

// ЗАПОЛНЕНИЕ ДОКУМЕНТА

// Функция возвращает таблицу значений для заполнение табличной части Товары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДанныеОбъекта     - данные текущего объекта.
//  ДокументОснование - ссылка на документ основание.
//
Функция ТоварыПоДаннымОснования(ДанныеОбъекта, ДокументОснование) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ОснованиеРеализацияТоваров      = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ОснованиеОтражениеНачисленияНДС = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтражениеНачисленияНДС");
	ДокументОснованиеИмя            = ДокументОснование.Метаданные().Имя;
	
	ТаблицаЗначенийТовары = ДанныеОбъекта.Товары.Выгрузить().СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДанныеОбъекта.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",             ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,";
	
	Если ОснованиеРеализацияТоваров Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КурсВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КурсДокумента,
		|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
		|		Док.Ссылка.КратностьВзаиморасчетов
		|	ИНАЧЕ
		|		1
		|	КОНЕЦ КАК КратностьДокумента,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	1 КАК КратностьДокумента,
		|	1 КАК КурсДокумента,";
	КонецЕсли;
	
	Если ОснованиеОтражениеНачисленияНДС Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Ложь КАК СуммаВключаетНДС,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	Док.Ссылка.СуммаВключаетНДС,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.СтавкаНДС,
	|	Док.Цена,
	|	Док.НомерГТД,
	|	Док.СтранаПроисхождения,
	|	Док.СчетУчета КАК СчетУчета,
	|	Док.СчетДоходов КАК СчетДоходов";

	Если НЕ ОснованиеОтражениеНачисленияНДС Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	Док.СчетРасходов,
		|	Док.СчетУчетаНДСПоРеализации,
		|	Док.Субконто";
	КонецЕсли;
	
	ДополнительныеПоляЗапросаРегл = ",
	|	Док.ПереданныеСчетУчета";
	
	Если ОснованиеРеализацияТоваров Тогда
		Запрос.Текст = Запрос.Текст + ДополнительныеПоляЗапросаРегл + "
		|";
	КонецЕсли;
	
	Если ОснованиеОтражениеНачисленияНДС Тогда
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Документ." + ДокументОснованиеИмя + ".ТоварыИУслуги КАК Док
		|
		|ГДЕ
		|	Док.Ссылка = &ДокументОснование И НЕ Док.Номенклатура.Услуга";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Документ." + ДокументОснованиеИмя + ".Товары КАК Док
		|
		|ГДЕ
		|	Док.Ссылка = &ДокументОснование И НЕ Док.Номенклатура.Услуга";
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДанныеОбъекта.Ссылка,      ВалютаРегламентированногоУчета);
	КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДанныеОбъекта.Ссылка, ВалютаРегламентированногоУчета);
	
	Если ОснованиеОтражениеНачисленияНДС Тогда
		СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			ДанныеОбъекта.Организация,
			ОбщегоНазначения.ВыгрузитьКолонку(РезультатЗапроса.Выгрузить(), "Номенклатура", Истина),
			ДанныеОбъекта.Склад,
			ДанныеОбъекта.Дата);
	КонецЕсли;
	
	СоответствиеСтавокИСпособовУчетаНДС = УчетНДСРаздельный.ПолучитьСоответствиеСтавокИСпособовУчетаНДС();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = ТаблицаЗначенийТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		
		Если ОснованиеОтражениеНачисленияНДС Тогда
			СчетаУчета = СоответствиеСчетовУчета.Получить(Выборка.Номенклатура);
			Если СчетаУчета <> Неопределено Тогда
				СтрокаТабличнойЧасти.СчетРасходов             = СчетаУчета.СчетРасходов;
				СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
				СтрокаТабличнойЧасти.Субконто                 = СчетаУчета.Субконто1;
			КонецЕсли;
		КонецЕсли;
		
		СпособУчетаНДС = СоответствиеСтавокИСпособовУчетаНДС.Получить(Выборка.СтавкаНДС);
		Если СпособУчетаНДС <> Неопределено Тогда
			СтрокаТабличнойЧасти.СпособУчетаНДС = СпособУчетаНДС;
		КонецЕсли;
		
		// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
		Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена,
			Выборка.ВалютаДокумента,    ДанныеОбъекта.ВалютаДокумента,
			Выборка.КурсДокумента,      КурсДокумента,
			Выборка.КратностьДокумента, КратностьДокумента);
		
		СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			Выборка.СуммаВключаетНДС,
			ДанныеОбъекта.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначенийТовары;
	
КонецФункции

// Функция возвращает таблицу значений для заполнение табличной части Возвратной тары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДанныеОбъекта     - данные текущего объекта.
//  ДокументОснование - ссылка на документ основание.
//
Функция ВозратнаяТараПоДаннымРеализации(ДанныеОбъекта, ДокументОснование) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ВозвратнаяТараДокумента = ДанныеОбъекта.ВозвратнаяТара.Выгрузить().СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Док.Ссылка.КурсВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Док.Ссылка.КратностьВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КратностьДокумента,
	|	Док.СчетУчета,
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.Цена
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаВозвратнойТары = ВозвратнаяТараДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВозвратнойТары, Выборка);
		
		СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество   = Выборка.Количество;
		СтрокаВозвратнойТары.СчетУчета    = Выборка.СчетУчета;
		
		// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
		СтрокаВозвратнойТары.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
			Выборка.ВалютаДокумента, ДанныеОбъекта.ВалютаДокумента,
			Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ДанныеОбъекта, ВалютаРегламентированногоУчета),
			Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ДанныеОбъекта, ВалютаРегламентированногоУчета));
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаВозвратнойТары);
		
	КонецЦикла;
	
	Возврат ВозвратнаяТараДокумента;
	
КонецФункции

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;
	
	Реквизиты.Вставить("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Реквизиты.Вставить("РасчетыВВалюте",  Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРеглУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",  Реквизиты.РасчетыВВалюте);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц);
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	Реквизиты.Вставить("ПлательщикНДС",
		УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСН",
		УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы",
		УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСНПатент",
		УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Период));
	
	Запрос.УстановитьПараметр("ПрименяетсяУСН",        Реквизиты.ПрименяетсяУСН);
	Запрос.УстановитьПараметр("ПрименяетсяУСНПатент",  Реквизиты.ПрименяетсяУСНПатент);
	Запрос.УстановитьПараметр("ДеятельностьНаПатенте", Реквизиты.ДеятельностьНаПатенте);
	
	Запрос.УстановитьПараметр("МассивСчетовДляГТД", УчетНДСВызовСервераПовтИсп.СчетаУчетаДляГТД());
	Запрос.УстановитьПараметр("Субсчета10",
		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Материалы));
	
	Реквизиты.Вставить("ЭтоДоговорСКомиссионером",
		Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Запрос.УстановитьПараметр("ЭтоДоговорСКомиссионером", Реквизиты.ЭтоДоговорСКомиссионером);
	
	Реквизиты.Вставить("ЭтоРозница",
		ЗначениеЗаполнено(Реквизиты.Сделка) И ТипЗнч(Реквизиты.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	Запрос.УстановитьПараметр("ЭтоРозница", Реквизиты.ЭтоРозница);
	
	КорПодразделение = Неопределено;
	Если ЗначениеЗаполнено(Реквизиты.Сделка)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодразделениеОрганизации", Реквизиты.Сделка.Метаданные()) Тогда
		КорПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Сделка, "ПодразделениеОрганизации");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КорПодразделение) Тогда
		КорПодразделение = Реквизиты.Подразделение;
	КонецЕсли;
	
	Реквизиты.Вставить("КорПодразделение", КорПодразделение);
	Запрос.УстановитьПараметр("КорПодразделение", Реквизиты.КорПодразделение);
	
	Реквизиты.Вставить("ДокументРасчетов", ?(ЗначениеЗаполнено(Реквизиты.Сделка), Реквизиты.Сделка, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("ДокументРасчетов", Реквизиты.ДокументРасчетов);
	
	Запрос.УстановитьПараметр("СинонимТовары", НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимТара",   НСтр("ru = 'Возвратная тара'"));
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаВыручка(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРасходыУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары И Реквизиты.УказанДокументОтгрузки Тогда
		Если НЕ Реквизиты.ЭтоДоговорСКомиссионером Тогда
			СписаниеТоваровСписокНоменклатуры =
				ПараметрыПроведения.СписаниеТоваровТаблицаТовары.Скопировать( , "Номенклатура");
		Иначе
			СписаниеТоваровСписокНоменклатуры =
				ПараметрыПроведения.СписаниеТоваровТаблицаТоварыОтКомиссионера.Скопировать( , "Номенклатура");
		КонецЕсли;
		ПараметрыПроведения.Вставить("СписаниеТоваровСписокНоменклатуры", СписаниеТоваровСписокНоменклатуры);
	Иначе
		ПараметрыПроведения.Вставить("СписаниеТоваровСписокНоменклатуры", Неопределено);
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары Тогда
		Если НЕ Реквизиты.ЭтоДоговорСКомиссионером Тогда
			СписаниеТоваровСчетаУчета =
				ПараметрыПроведения.СписаниеТоваровТаблицаТовары.Скопировать( , "СчетУчета, Комиссионный");
		Иначе
			СписаниеТоваровСчетаУчета =
				ПараметрыПроведения.СписаниеТоваровТаблицаТоварыОтКомиссионера.Скопировать( , "СчетУчета, Комиссионный");
		КонецЕсли;
		СписаниеТоваровСчетаУчета.Свернуть("СчетУчета, Комиссионный");
		ПараметрыПроведения.Вставить("СписаниеТоваровСчетаУчета", СписаниеТоваровСчетаУчета);
	Иначе
		ПараметрыПроведения.Вставить("СписаниеТоваровСчетаУчета", Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьТара) КАК ЕстьТара
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьТара
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Организация,
	|	Реквизиты.Склад,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.ДеятельностьНаПатенте,
	|	Реквизиты.Патент,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	Реквизиты.Сделка,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеПервичныхДокументов.Документ ЕСТЬ NULL 
	|				И НЕ Реквизиты.Сделка ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	|				И НЕ Реквизиты.Сделка ССЫЛКА Документ.ОтражениеНачисленияНДС
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УказанДокументОтгрузки,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеПервичныхДокументов.Документ ЕСТЬ NULL 
	|				И НЕ Реквизиты.Сделка ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПоДокументу)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать)
	|	КОНЕЦ КАК СпособЗачетаАвансов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ОтразитьВКнигеПокупок,
	|	Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат,
	|	Реквизиты.СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА Реквизиты.ОтразитьВКнигеПокупок
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ)
	|					ИНАЧЕ Реквизиты.СчетУчетаНДС
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС)
	|	КОНЕЦ КАК СчетУчетаНДС,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетУчетаРасчетовПоТаре,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаРеализации
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Документ = Реквизиты.Сделка)
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Организация,
	|	Реквизиты.Склад,
	|	Реквизиты.ТипСклада,
	|	Реквизиты.ТипСклада КАК ТипСкладаОтправителя,
	|	Реквизиты.Склад КАК СкладПолучатель,
	|	Реквизиты.ТипСклада КАК ТипСкладаПолучателя,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеПолучатель,
	|	Реквизиты.ДеятельностьНаПатенте,
	|	Реквизиты.Патент,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Сделка,
	|	Реквизиты.УказанДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА Реквизиты.Сделка ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Реквизиты.Сделка
	|	КОНЕЦ КАК ДокументОтгрузки,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.СпособЗачетаАвансов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ОтразитьВКнигеПокупок,
	|	Реквизиты.СчетУчетаНДС КАК СчетУчетаНДС,
	|	Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетУчетаРасчетовПоТаре,
	|	НЕОПРЕДЕЛЕНО КАК НДСвСтоимостиТоваров,
	|	НЕОПРЕДЕЛЕНО КАК СчетСписанияНДС,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияНДС1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияНДС2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияНДС3,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТара, ЛОЖЬ) КАК ЕстьТара
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары",         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаВозвратнаяТара", НомераТаблиц.Количество());
	
	// В запросе выполняется явное приведение типа числовых полей через ВЫРАЗИТЬ(),
	// чтобы в результате запроса поля были как обычные числа, а не как в табличной части 
	// документа - неотрицательные, т.к. потом при формировании движений выполняется 
	// инвертирование знака (проводка сторно).
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Номенклатура.Услуга КАК ЭтоУслуга,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Себестоимость КАК ЧИСЛО(15, 2)) КАК Себестоимость,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
	|				ТОГДА ТаблицаТовары.Сумма
	|			ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВзаиморасчетов,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСВзаиморасчетов,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
	|				ТОГДА ТаблицаТовары.Сумма
	|			ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСРуб,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СпособУчетаНДС,
	|	ТаблицаТовары.СчетУчета,
	|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК СчетУчетаЗабалансовый,
	|	ТаблицаТовары.ПереданныеСчетУчета,
	|	ЕСТЬNULL(ТаблицаТовары.ПереданныеСчетУчета.Забалансовый, ЛОЖЬ) КАК ПереданныеСчетУчетаЗабалансовый,
	|	ТаблицаТовары.СчетДоходов,
	|	ВЫБОР
	|		КОГДА СчетаЕНВД.Счет ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоходЕНВД,
	|	ТаблицаТовары.СчетРасходов,
	|	ТаблицаТовары.Субконто,
	|	ТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.ОтражениеВУСН
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаЕНВД
	|		ПО ТаблицаТовары.СчетДоходов = СчетаЕНВД.Счет
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВозвратнаяТара.Ссылка,
	|	ТаблицаВозвратнаяТара.НомерСтроки,
	|	ТаблицаВозвратнаяТара.Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаВозвратнаяТара.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаВозвратнаяТара.Сумма КАК ЧИСЛО(15, 2)) КАК СуммаВзаиморасчетов,
	|	ВЫРАЗИТЬ(ТаблицаВозвратнаяТара.Сумма КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ТаблицаВозвратнаяТара.СчетУчета
	|ПОМЕСТИТЬ ТаблицаВозвратнаяТара
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара КАК ТаблицаВозвратнаяТара
	|ГДЕ
	|	ТаблицаВозвратнаяТара.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)

	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Результат    = Запрос.ВыполнитьПакет();
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары();
	КонецЕсли;
	Если Реквизиты.ЕстьТара Тогда
		СуммыТаблицыТара = Результат[НомераТаблиц["СуммыТаблицыТара"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТара, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТара", СуммыТаблицыТара);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТара();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;

КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаРуб,
		|	ВременнаяТаблицаТовары.СуммаНДСРуб
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	Если Реквизиты.ЕстьТара Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаВозвратнаяТара", "ПОМЕСТИТЬ ВременнаяТаблицаТара");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаВозвратнаяТара.Ссылка = &Ссылка", "ТаблицаВозвратнаяТара.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТара", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТара.НомерСтроки,
		|	ВременнаяТаблицаТара.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТара.СуммаРуб
		|ИЗ
		|	ВременнаяТаблицаТара КАК ВременнаяТаблицаТара"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТовары()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.ЭтоУслуга,
	|	ВременнаяТаблицаТовары.Количество,
	|	ВременнаяТаблицаТовары.Себестоимость,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.СпособУчетаНДС,
	|	ВременнаяТаблицаТовары.СчетУчета,
	|	ВременнаяТаблицаТовары.СчетУчетаЗабалансовый,
	|	ВременнаяТаблицаТовары.ПереданныеСчетУчета,
	|	ВременнаяТаблицаТовары.ПереданныеСчетУчетаЗабалансовый,
	|	ВременнаяТаблицаТовары.СчетДоходов,
	|	ВременнаяТаблицаТовары.ДоходЕНВД,
	|	ВременнаяТаблицаТовары.СчетРасходов,
	|	ВременнаяТаблицаТовары.Субконто,
	|	ВременнаяТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ВременнаяТаблицаТовары.НомерГТД,
	|	ВременнаяТаблицаТовары.СтранаПроисхождения,
	|	ВременнаяТаблицаТовары.ОтражениеВУСН
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеТара()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТара.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТара.СуммаВзаиморасчетов,
	|	СуммыТаблицыТара.СуммаРуб
	|ПОМЕСТИТЬ СуммыТаблицыТара
	|ИЗ
	|	&СуммыТаблицыТара КАК СуммыТаблицыТара
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТара.Ссылка,
	|	ВременнаяТаблицаТара.НомерСтроки,
	|	ВременнаяТаблицаТара.Номенклатура,
	|	ВременнаяТаблицаТара.Количество,
	|	СуммыТаблицыТара.СуммаВзаиморасчетов,
	|	СуммыТаблицыТара.СуммаРуб,
	|	ВременнаяТаблицаТара.СчетУчета
	|ПОМЕСТИТЬ ТаблицаВозвратнаяТара
	|ИЗ
	|	ВременнаяТаблицаТара КАК ВременнаяТаблицаТара
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТара КАК СуммыТаблицыТара
	|		ПО ВременнаяТаблицаТара.НомерСтроки = СуммыТаблицыТара.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("СписаниеТоваровРеквизиты",                   Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТоваровТаблицаТовары",               Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТоваровТаблицаТоварыОтКомиссионера", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("СписаниеТоваровРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.УказанДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанДокументОтгрузки
	|			ТОГДА Реквизиты.ДатаРеализации
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаДокументаРеализации,
	|	Реквизиты.Сделка,
	|	ВЫБОР
	|		КОГДА &ЭтоДоговорСКомиссионером
	|			ТОГДА ""Возврат товаров от комиссионера""
	|		ИНАЧЕ ""Возврат товаров от покупателя""
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если НЕ Реквизиты.ЭтоДоговорСКомиссионером Тогда
		
		НомераТаблиц.Вставить("СписаниеТоваровТаблицаТовары", НомераТаблиц.Количество());
		ПараметрыПроведения.Вставить("СписаниеТоваровТаблицаТоварыОтКомиссионера", Неопределено);
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.СчетУчетаЗабалансовый,
		|	ТаблицаТовары.СчетУчетаЗабалансовый КАК Комиссионный,
		|	ТаблицаТовары.Номенклатура,
		|	Реквизиты.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА Реквизиты.УказанДокументОтгрузки
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ Реквизиты.Ссылка
		|	КОНЕЦ КАК Партия,
		|	ТаблицаТовары.Себестоимость,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.СчетРасходов КАК КорСчетСписания,
		|	ТаблицаТовары.Субконто КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	1 КАК ВидКорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
		|	&КорПодразделение КАК КорПодразделение,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
		|	ТаблицаТовары.Себестоимость КАК СуммаСписания,
		|	ТаблицаТовары.Себестоимость КАК СуммаСписанияНУ,
		|	0 КАК СуммаСписанияПР,
		|	0 КАК СуммаСписанияВР,
		|	ТаблицаТовары.Себестоимость КАК СуммаКорСписания,
		|	ТаблицаТовары.Себестоимость КАК СуммаКорСписанияНУ,
		|	0 КАК СуммаКорСписанияПР,
		|	0 КАК СуммаКорСписанияВР
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		
		ПараметрыПроведения.Вставить("СписаниеТоваровТаблицаТовары", Неопределено);
		НомераТаблиц.Вставить("СписаниеТоваровТаблицаТоварыОтКомиссионера", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	Реквизиты.Дата КАК Период,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.ПереданныеСчетУчета КАК СчетУчета,
		|	ТаблицаТовары.ПереданныеСчетУчетаЗабалансовый КАК СчетУчетаЗабалансовый,
		|	ТаблицаТовары.СчетУчетаЗабалансовый КАК Комиссионный,
		|	ТаблицаТовары.Номенклатура,
		|	Реквизиты.Склад КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	ТаблицаТовары.Себестоимость,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.СчетУчета КАК КорСчетСписания,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура) КАК ВидКорСубконто1,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) КАК ВидКорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
		|	ТаблицаТовары.Номенклатура КАК КорСубконто1,
		|	Реквизиты.Склад КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	НЕОПРЕДЕЛЕНО КАК Комитент,
		|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
		|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
		|	0 КАК СуммаРасчетовСКомитентом,
		|	&КорПодразделение КАК КорПодразделение,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
		|	ТаблицаТовары.Себестоимость КАК СуммаСписания,
		|	ТаблицаТовары.Себестоимость КАК СуммаСписанияНУ,
		|	0 КАК СуммаСписанияПР,
		|	0 КАК СуммаСписанияВР,
		|	ТаблицаТовары.Себестоимость КАК СуммаКорСписания,
		|	ТаблицаТовары.Себестоимость КАК СуммаКорСписанияНУ,
		|	0 КАК СуммаКорСписанияПР,
		|	0 КАК СуммаКорСписанияВР
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПоступлениеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТара Тогда
		ПараметрыПроведения.Вставить("ПоступлениеТары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПоступлениеТары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ВозвратнаяТара"" КАК ИмяСписка,
	|	&СинонимТара КАК СинонимСписка,
	|	ТаблицаВозвратнаяТара.НомерСтроки,
	|	ТаблицаВозвратнаяТара.Номенклатура,
	|	ТаблицаВозвратнаяТара.Количество,
	|	ТаблицаВозвратнаяТара.СуммаВзаиморасчетов,
	|	ТаблицаВозвратнаяТара.СуммаРуб,
	|	ТаблицаВозвратнаяТара.СчетУчета,
	|	ВЫБОР
	|		КОГДА &ЭтоДоговорСКомиссионером
	|			ТОГДА ""Возврат тары от комиссионера""
	|		ИНАЧЕ ""Возврат тары от покупателя""
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	ТаблицаВозвратнаяТара КАК ТаблицаВозвратнаяТара
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВыручка(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("ВыручкаТовары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВыручкаТовары", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаРуб,
	|	ТаблицаТовары.СуммаНДСРуб,
	|	ТаблицаТовары.СуммаРуб КАК СуммаБУ,
	|	ТаблицаТовары.СуммаРуб КАК СуммаНУ,
	|	ТаблицаТовары.СчетДоходов,
	|	ТаблицаТовары.Субконто,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ВЫБОР
	|		КОГДА &ЭтоРозница
	|			ТОГДА Реквизиты.СчетУчетаРасчетовПоАвансам
	|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК КорСчет,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	Реквизиты.Ссылка КАК КорСубконто3,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаТовары.СчетУчетаЗабалансовый КАК ЭтоКомиссия,
	|	ТаблицаТовары.ЭтоУслуга,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	НЕОПРЕДЕЛЕНО КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК СчетАвансовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	0 КАК СуммаПоступленияОтКомитента
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоДоговорСКомиссионером  Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаДокумента", Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаАвансов",   Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента",       НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаТовары.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаТовары.СчетУчетаЗабалансовый
	|				ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовКомитента,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТаблицаТовары.СчетУчетаЗабалансовый
	|					И &ДеятельностьНаПатенте
	|				ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовПатент,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТаблицаТовары.СчетУчетаЗабалансовый
	|					И НЕ &ДеятельностьНаПатенте
	|					И ТаблицаТовары.ДоходЕНВД
	|				ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовЕНВД
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ПрименяетсяУСН КАК УчитыватьЗадолженностьУСН,
	|	&ПрименяетсяУСНПатент КАК УчитыватьЗадолженностьУСНПатент,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ИСТИНА КАК ЭтоВозврат,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	&КорПодразделение КАК КорПодразделение,
	|	Реквизиты.Сделка,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	ВЫБОР
	|		КОГДА &ЭтоДоговорСКомиссионером
	|			ТОГДА ""Возврат товаров от комиссионера""
	|		ИНАЧЕ ""Возврат товаров от покупателя""
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетРасчетов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах,
	|	Реквизиты.УчетАгентскогоНДС,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРуб,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовКомитента,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовЕНВД,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовПатент
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если Реквизиты.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаАвансов", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ЗачетАвансовТаблицаАвансов", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	Реквизиты.Контрагент,
		|	Реквизиты.ДоговорКонтрагента,
		|	Реквизиты.Сделка КАК ДокументАванса,
		|	0 КАК СуммаЗачета
		|ИЗ
		|	Реквизиты КАК Реквизиты"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоДоговорСКомиссионером Тогда
		ПараметрыПроведения.Вставить("РеализацияРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("РеализацияТаблицаДокумента", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеализацияРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеализацияТаблицаДокумента", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	&ДокументРасчетов КАК ДокументРасчетов,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаРуб,
	|	ТаблицаТовары.СуммаНДСРуб,
	|	ТаблицаТовары.СуммаРуб КАК СуммаБУ,
	|	ТаблицаТовары.СуммаРуб КАК СуммаНУ,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.СчетДоходов,
	|	ТаблицаТовары.Субконто,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ВЫБОР
	|		КОГДА &ЭтоРозница
	|			ТОГДА Реквизиты.СчетУчетаРасчетовПоАвансам
	|		ИНАЧЕ Реквизиты.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК КорСчет,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанДокументОтгрузки
	|				И НЕ &ЭтоРозница
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ Реквизиты.Ссылка
	|	КОНЕЦ КАК КорСубконто3,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.Контрагент КАК Покупатель,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаТовары.СчетУчетаЗабалансовый КАК ЭтоКомиссия,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанДокументОтгрузки
	|			ТОГДА Реквизиты.Сделка
	|		ИНАЧЕ Реквизиты.Ссылка
	|	КОНЕЦ КАК ДокументРасчетовСКомитентом,
	|	ВЫБОР
	|		КОГДА Реквизиты.УказанДокументОтгрузки
	|			ТОГДА Реквизиты.ДатаРеализации
	|		ИНАЧЕ Реквизиты.Дата
	|	КОНЕЦ КАК ДатаРеализации,
	|	НЕОПРЕДЕЛЕНО КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК СчетАвансовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	0 КАК СуммаПоступленияОтКомитента
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("ТоварыСГТД", Неопределено);
		ПараметрыПроведения.Вставить("КомиссионныеТоварыНДС",  Неопределено);
		ПараметрыПроведения.Вставить("ТоварыНДС",  Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТоварыСГТД", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА &ЭтоДоговорСКомиссионером
	|			ТОГДА ""Возврат товаров от комиссионера""
	|		ИНАЧЕ ""Возврат товаров от покупателя""
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И ТаблицаТовары.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.РОССИЯ)
	|	И ТаблицаТовары.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ТаблицаТовары.СчетУчета В (&МассивСчетовДляГТД)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если НЕ Реквизиты.ПлательщикНДС Тогда
		ПараметрыПроведения.Вставить("КомиссионныеТоварыНДС",  Неопределено);
		ПараметрыПроведения.Вставить("ТоварыНДС",  Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если НЕ Реквизиты.ЭтоДоговорСКомиссионером Тогда
		ПараметрыПроведения.Вставить("КомиссионныеТоварыНДС", Неопределено);
	Иначе
		НомераТаблиц.Вставить("КомиссионныеТоварыНДС", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.ПереданныеСчетУчета КАК СчетУчета,
		|	ТаблицаТовары.СчетУчета КАК СчетУчетаПолучатель,
		|	ТаблицаТовары.СпособУчетаНДС КАК НовыйСпособУчетаНДС,
		|	Реквизиты.Склад КАК СкладПолучатель
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ТаблицаТовары.СчетУчетаЗабалансовый
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТоварыНДС", НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		  |	""Товары"" КАК ИмяСписка,
		  |	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		  |	ТаблицаТовары.СпособУчетаНДС
		  |ИЗ
		  |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
		  |ГДЕ
		  |	ТаблицаТовары.Ссылка = &Ссылка
		  |
		  |УПОРЯДОЧИТЬ ПО
		  |	НомерСтроки"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРасходыУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ПрименяетсяУСНДоходыМинусРасходы
		ИЛИ НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("УСНРеквизиты",       Неопределено);
		ПараметрыПроведения.Вставить("УСНТаблицаРасходов", Неопределено);
		ПараметрыПроведения.Вставить("УСНРеквизитыСделки", Неопределено);
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Сделка) Тогда
		НомераТаблиц.Вставить("УСНРеквизиты",       НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УСНТаблицаРасходов", НомераТаблиц.Количество());
		ПараметрыПроведения.Вставить("УСНРеквизитыСделки", Неопределено);
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Организация,
		|	Реквизиты.Сделка,
		|	Реквизиты.ДоговорКонтрагента,
		|	Реквизиты.ВидДоговора,
		|	Реквизиты.ВалютаВзаиморасчетов КАК Валюта,
		|	Реквизиты.УчетАгентскогоНДС,
		|	ИСТИНА КАК ЭтоВозврат
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) КАК ВидРасхода,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
		|	ТаблицаТовары.Номенклатура КАК ЭлементРасхода,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчета В (&Субсчета10)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчета В (&Субсчета10)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоМатериал,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.Ссылка КАК Партия,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Себестоимость КАК Себестоимость,
		|	ТаблицаТовары.Себестоимость КАК Сумма,
		|	0 КАК НДС,
		|	ТаблицаТовары.ОтражениеВУСН КАК ОтражениеВУСН
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары";
	Иначе
		ПараметрыПроведения.Вставить("УСНРеквизиты",       Неопределено);
		ПараметрыПроведения.Вставить("УСНТаблицаРасходов", Неопределено);
		НомераТаблиц.Вставить("УСНРеквизитыСделки", НомераТаблиц.Количество());
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Реквизиты.ДатаРеализации КАК Дата,
		|	Реквизиты.ДатаРеализации КАК Период,
		|	Реквизиты.Сделка КАК Ссылка,
		|	Реквизиты.Сделка КАК Регистратор,
		|	Реквизиты.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОтгрузки
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ПроставитьСторноТаблиц(ТаблицаСписанныеТовары, ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов, ТаблицаРеквизиты) Экспорт

	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	СтруктураПолейДляСторно = Новый Структура("Количество, Себестоимость, СуммаСписания, СуммаСписанияНУ,
		|СуммаСписанияВР, СуммаСписанияПР, СуммаКорСписанияНУ, СуммаКорСписанияВР, СуммаКорСписанияПР");
	
	Если ТаблицаСписанныеТовары <> Неопределено Тогда
		МножительСписания = ?(Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, 1, -1);
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСписанныеТовары, СтруктураПолейДляСторно, МножительСписания);
	КонецЕсли;
	
	СтруктураПолейДляСторно = Новый Структура("Количество, СуммаВзаиморасчетов, СуммаРуб, СуммаНДСРуб,
		|СуммаБУ, СуммаНУ, СуммаРасчетовСКомитентом, СуммаПоступленияОтКомитента");
		
	Если ТаблицаСобственныеТоварыУслуги <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСобственныеТоварыУслуги, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
	Если ТаблицаТоварыУслугиКомитентов <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаТоварыУслугиКомитентов, СтруктураПолейДляСторно, -1);
	КонецЕсли;
	
	СтруктураПолейДляСторно = Новый Структура("Количество, Выручка, СуммаПоступления");
	
	Если ТаблицаРеализованныеТоварыКомитентов <> Неопределено Тогда
		УчетТоваров.ПроставитьСторноТаблицы(ТаблицаРеализованныеТоварыКомитентов, СтруктураПолейДляСторно, -1);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицыДляУСН(
			ПоступлениеРасходовУСНТаблицаРасходов,
			ТаблицаТовары,
			ТаблицаВзаиморасчеты,
			ТаблицаРеквизитыСделки,
			ТаблицаРеквизиты,
			СуммаСторноРасходов, // Рассчитывается и возвращается
			СуммаСторноНДС, // Рассчитывается и возвращается
			СуммаПризнанияНДС, // Рассчитывается и возвращается
			Отказ) Экспорт

	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаТовары = Неопределено ИЛИ ТаблицаТовары.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПорядокПризнанияРасходовПоНДС        = УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(Реквизиты.Организация, Реквизиты.Период);
	ПорядокПризнанияРасходовПоТоварам    = УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.Период);
	ПорядокПризнанияМатериальныхРасходов = УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Реквизиты.Организация, Реквизиты.Период);

	СуммаСторноНДС    = 0;
	СуммаПризнанияНДС = 0;

	Если Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		// Если это возврат от комиссионера, то движения по РасходамПриУСН делаются по данным других таблиц, а значит, надо вернуть Неопределено
		Возврат Неопределено;
	Иначе
		ВыделятьНДСУСН           = (ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
		ВыделятьНДСУСНРеализация = (ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

		ТоварыПоОплате    = (ПорядокПризнанияРасходовПоТоварам    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
		ТоварыПоОтгрузке  = (ПорядокПризнанияРасходовПоТоварам    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
		МатериалыПоОплате = (ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);

		Если ЗначениеЗаполнено(Реквизиты.Сделка) Тогда
			
			ТаблицаРасходыУСНПоСделке = РасходыПоСделкеУСН(Реквизиты.Сделка); 
			
			МассивНоменклатуры 	= ТаблицаТовары.ВыгрузитьКолонку("Номенклатура");
			ТаблицаПартииСделки = ПартииПоСделкеУСН(Реквизиты, МассивНоменклатуры);
			
			// 1. Подготовить пустую таблицу для формирования движений
			НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Реквизиты.Сделка);
			НаборЗаписей.Прочитать();
			ТаблицаДвиженийРасходов = НаборЗаписей.ВыгрузитьКолонки();
			// Добавить обязательные колонки
			ТаблицаДвиженийРасходов.Колонки.Добавить("ЭтоТовар", Новый ОписаниеТипов("Булево"));
			ТаблицаДвиженийРасходов.Колонки.Добавить("ЭтоМатериал", Новый ОписаниеТипов("Булево"));

			// 2. Добавим в партии информацию об изменении ОтражениеВУСН
			НалоговыйУчетУСН.ЗаполнитьОтражениеВНУпоСписанию(ТаблицаРеквизитыСделки[0], ТаблицаПартииСделки, "Реализация");

			// 3. Из движений по регистру РасходыПриУСН, сделанных документом Сделка, удалить приходы
			КолСтрок = ТаблицаРасходыУСНПоСделке.Количество();
			Для Н = 1 по КолСтрок Цикл
				Если ТаблицаРасходыУСНПоСделке[КолСтрок - Н].ВидДвижения = ВидДвиженияНакопления.Приход Тогда
					ТаблицаРасходыУСНПоСделке.Удалить(ТаблицаРасходыУСНПоСделке[КолСтрок - Н]);
				КонецЕсли;
			КонецЦикла;

			// 4. Формирование таблицы фильтров
			ТаблицаФильтров = Новый ТаблицаЗначений;
			ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			ТаблицаФильтров.Колонки.Добавить("Условие");

			Фильтр = ТаблицаФильтров.Добавить();
			Фильтр.ИмяПоля      = "ВидРасхода";
			Фильтр.ЗначениеПоля = Перечисления.ВидыРасходовУСН.Номенклатура;
			Фильтр.Условие      = "=";

			Фильтр = ТаблицаФильтров.Добавить();
			Фильтр.ИмяПоля      = "СтатусыПартийУСН";
			Фильтр.ЗначениеПоля = Перечисления.СтатусыПартийУСН.Списанные;
			Фильтр.Условие      = "=";

			МассивНоменклатуры = ТаблицаТовары.ВыгрузитьКолонку("Номенклатура");
			ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);

			Фильтр = ТаблицаФильтров.Добавить();
			Фильтр.ИмяПоля      = "ЭлементРасхода";
			Фильтр.ЗначениеПоля = МассивНоменклатуры;
			Фильтр.Условие      = "В";

			Фильтр = ТаблицаФильтров.Добавить();
			Фильтр.ИмяПоля      = "Партия";
			Фильтр.ЗначениеПоля = Реквизиты.Сделка;
			Фильтр.Условие      = "=";

			// 5. Из таблицы расходов выбираем соответствующие партии и элементы расходов
			ТаблицаОстатковРасходов = НалоговыйУчетУСН.ВыполнитьЗапросПоРасходам(
				Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая),
				Реквизиты.Организация,
				ТаблицаФильтров);

			ТаблицаПартииСделки.Индексы.Добавить("Номенклатура");
			ТаблицаРасходыУСНПоСделке.Индексы.Добавить("ЭлементРасхода,Партия");
			ТаблицаОстатковРасходов.Индексы.Добавить("ЭлементРасхода");

			// 6 .Цикл по товарам, ...
			Для Каждого Строка Из ТаблицаТовары Цикл

				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);

				НайденныеСтроки = ТаблицаПартииСделки.НайтиСтроки(СтруктураОтбора);

				СтатусСписания = Перечисления.ОтражениеВУСН.ПустаяСсылка();
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтатусСписания = НайденныеСтроки[0].СтатусСписания;
				КонецЕсли;

				//Добавить строки поступления по партиям
				КоличествоОсталосьСписать = Строка.Количество;
				Для Каждого СтрокаПартии Из НайденныеСтроки Цикл
					Если НЕ КоличествоОсталосьСписать > 0 Тогда
						Прервать;
					КонецЕсли;
					Если НЕ СтрокаПартии.Количество > 0 Тогда
						Продолжить;
					КонецЕсли;

					КоличествоСписать         = Мин(КоличествоОсталосьСписать, СтрокаПартии.Количество);
					КоличествоОсталосьСписать = КоличествоОсталосьСписать - КоличествоСписать;
					СтрокаПартии.Количество   = СтрокаПартии.Количество - КоличествоСписать;

					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("ЭлементРасхода", Строка.Номенклатура);

					СтруктураОтбораПоПартиям = Новый Структура;
					СтруктураОтбораПоПартиям.Вставить("ЭлементРасхода", Строка.Номенклатура);
					СтруктураОтбораПоПартиям.Вставить("Партия",         СтрокаПартии.ДокументОприходования);

					НайденныеСтрокиСписано = ТаблицаРасходыУСНПоСделке.НайтиСтроки(СтруктураОтбораПоПартиям);
					НайденныеСтрокиОстаток = ТаблицаОстатковРасходов.НайтиСтроки(СтруктураОтбора);

					КоличествоОсталосьСписатьРасход = КоличествоСписать;
					Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
						Если НЕ СтрокаСписания.Количество > 0 Тогда
							Продолжить;
						КонецЕсли;
						Для Каждого СтрокаОстатка Из НайденныеСтрокиОстаток Цикл
							Если НЕ СтрокаСписания.Количество > 0 Тогда
								Продолжить;
							КонецЕсли;
							Если НЕ КоличествоОсталосьСписатьРасход > 0 Тогда
								Прервать;
							КонецЕсли;
							Если НЕ СтрокаОстатка.Количество > 0 Тогда
								Продолжить;
							КонецЕсли;

							КоличествоСписатьРасход = Мин(КоличествоОсталосьСписатьРасход, СтрокаСписания.Количество, СтрокаОстатка.Количество);
							Коэфф = ?(СтрокаОстатка.Количество = 0, 0, КоличествоСписатьРасход/СтрокаОстатка.Количество);
							//Добавить строки поступления по расходам
							НоваяСтрокаРасход = ТаблицаДвиженийРасходов.Добавить();
							НоваяСтрокаПриход = ТаблицаДвиженийРасходов.Добавить();

							ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, СтрокаОстатка);
							ЗаполнитьЗначенияСвойств(НоваяСтрокаПриход, СтрокаОстатка);

							НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
							НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
							НоваяСтрокаПриход.СтатусыПартийУСН  = СтрокаСписания.СтатусыПартийУСН;
							НоваяСтрокаПриход.Партия            = СтрокаСписания.Партия;
							Если (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем)
									ИЛИ (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН  = Перечисления.СтатусыРасходовУСН.НеРаспределено) Тогда
								НоваяСтрокаПриход.СтатусыОплатыРасходовУСН   = Перечисления.СтатусыРасходовУСН.НеСписано;
							Иначе
								НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
							КонецЕсли;
							//Движение расход
							НоваяСтрокаРасход.Сумма      = Коэфф*СтрокаОстатка.Сумма;
							НоваяСтрокаРасход.НДС        = Коэфф*СтрокаОстатка.НДС;
							НоваяСтрокаРасход.Количество = КоличествоСписатьРасход;
							//Движение приход
							НоваяСтрокаПриход.Сумма      = Коэфф * СтрокаОстатка.Сумма;
							НоваяСтрокаПриход.НДС        = Коэфф * СтрокаОстатка.НДС;
							НоваяСтрокаПриход.Количество = КоличествоСписатьРасход;

							КоличествоОсталосьСписатьРасход = КоличествоОсталосьСписатьРасход - КоличествоСписатьРасход;
							СтрокаСписания.Количество       = СтрокаСписания.Количество - НоваяСтрокаПриход.Количество;
							СтрокаСписания.Сумма            = СтрокаСписания.Сумма - НоваяСтрокаПриход.Сумма;
							СтрокаСписания.НДС              = СтрокаСписания.НДС - НоваяСтрокаПриход.НДС;

							СтрокаОстатка.Количество = СтрокаОстатка.Количество - НоваяСтрокаПриход.Количество;
							СтрокаОстатка.Сумма      = СтрокаОстатка.Сумма - НоваяСтрокаПриход.Сумма;
							СтрокаОстатка.НДС        = СтрокаОстатка.НДС - НоваяСтрокаПриход.НДС;

							Если (Реквизиты.Период >= Дата("20060101"))
									И (ТоварыПоОтгрузке)
									И (НоваяСтрокаРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем)
									И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
									И (СтатусСписания <> Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

								КурсВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяСтрокаПриход.Валюта, Реквизиты.Период);

								КурсВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяСтрокаПриход.Валюта, Реквизиты.Период);
								СуммаСторноРасходов = СуммаСторноРасходов
									+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										НоваяСтрокаПриход.Сумма,
										НоваяСтрокаПриход.Валюта,
										Константы.ВалютаРегламентированногоУчета.Получить(),
										КурсВалюты.Курс, 1,
										КурсВалюты.Кратность, 1);
								СуммаСторноНДС = СуммаСторноНДС
									+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										НоваяСтрокаПриход.НДС,
										НоваяСтрокаПриход.Валюта,
										Константы.ВалютаРегламентированногоУчета.Получить(),
										КурсВалюты.Курс, 1,
										КурсВалюты.Кратность, 1);

							ИначеЕсли (ВыделятьНДСУСН)
									И (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано)
									И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
									И (СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

								КурсВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяСтрокаПриход.Валюта, Реквизиты.Период);
								СуммаПризнанияНДС = СуммаПризнанияНДС
									+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										НоваяСтрокаПриход.НДС,
										НоваяСтрокаПриход.Валюта,
										Константы.ВалютаРегламентированногоУчета.Получить(),
										КурсВалюты.Курс, 1,
										КурсВалюты.Кратность, 1);

							КонецЕсли;

						КонецЦикла;
					КонецЦикла;

					Если КоличествоОсталосьСписатьРасход > 0 Тогда
						Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
							Если НЕ СтрокаСписания.Количество > 0 Тогда
								Продолжить;
							КонецЕсли;
							КоличествоСписатьРасход = Мин(КоличествоОсталосьСписатьРасход, СтрокаСписания.Количество);
							Коэфф = ?(СтрокаСписания.Количество = 0, 0, КоличествоСписатьРасход/СтрокаСписания.Количество);

							//Добавить строки поступления по расходам
							НоваяСтрокаПриход = ТаблицаДвиженийРасходов.Добавить();
							Для Каждого Кол Из ТаблицаДвиженийРасходов.Колонки Цикл
								Если ПустаяСтрока(Кол.Имя) ИЛИ Кол.Имя = "QuieryId" Тогда
									Продолжить;
								КонецЕсли;
								НоваяСтрокаПриход[Кол.Имя] = СтрокаСписания[Кол.Имя];
							КонецЦикла;
							НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;

							//Определим сумму сторнируемых расходов
							ЭтоТовар	= БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(Строка.СчетУчета, ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)
								ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(Строка.СчетУчета, ПланыСчетов.Хозрасчетный.Товары);
							ЭтоМатериал	= БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(Строка.СчетУчета, ПланыСчетов.Хозрасчетный.Материалы);
							
							РасходыПоОплате = ((ТоварыПоОплате И ЭтоТовар) ИЛИ (МатериалыПоОплате И ЭтоМатериал));
						
							Если (РасходыПоОплате) И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда
								НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
							Иначе
								НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
							КонецЕсли;

							//Движение приход
							НоваяСтрокаПриход.Сумма      = Коэфф*СтрокаСписания.Сумма;
							НоваяСтрокаПриход.НДС        = Коэфф*СтрокаСписания.НДС;
							НоваяСтрокаПриход.Количество = КоличествоСписатьРасход;

							КоличествоОсталосьСписатьРасход = КоличествоОсталосьСписатьРасход - КоличествоСписатьРасход;
							СтрокаСписания.Количество       = СтрокаСписания.Количество - НоваяСтрокаПриход.Количество;
							СтрокаСписания.Сумма            = СтрокаСписания.Сумма - НоваяСтрокаПриход.Сумма;
							СтрокаСписания.НДС              = СтрокаСписания.НДС - НоваяСтрокаПриход.НДС;

							Если (НЕ ВыделятьНДСУСНРеализация) И (ВыделятьНДСУСН) Тогда
								НоваяСтрокаПриход.Сумма = НоваяСтрокаПриход.Сумма - НоваяСтрокаПриход.НДС;
							КонецЕсли;

							Если (НЕ РасходыПоОплате) И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
									И (НЕ СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

								КурсВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяСтрокаПриход.Валюта, Реквизиты.Период);
								СуммаСторноРасходов = СуммаСторноРасходов
									+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										НоваяСтрокаПриход.Сумма,
										НоваяСтрокаПриход.Валюта,
										Константы.ВалютаРегламентированногоУчета.Получить(),
										КурсВалюты.Курс, 1,
										КурсВалюты.Кратность, 1);
								СуммаСторноНДС = СуммаСторноНДС
									+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										НоваяСтрокаПриход.НДС,
										НоваяСтрокаПриход.Валюта,
										Константы.ВалютаРегламентированногоУчета.Получить(),
										КурсВалюты.Курс, 1,
										КурсВалюты.Кратность, 1);

							ИначеЕсли (ВыделятьНДСУСН)
									И (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано)
									И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
									И (СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

								КурсВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяСтрокаПриход.Валюта, Реквизиты.Период);
								СуммаПризнанияНДС = СуммаПризнанияНДС
									+ РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										НоваяСтрокаПриход.НДС,
										НоваяСтрокаПриход.Валюта,
										Константы.ВалютаРегламентированногоУчета.Получить(),
										КурсВалюты.Курс, 1,
										КурсВалюты.Кратность, 1);

							КонецЕсли;

						КонецЦикла;
					КонецЕсли;
				КонецЦикла;

				Если КоличествоОсталосьСписать > 0 Тогда
					//Оприходовать по документу возврата
				КонецЕсли;

			КонецЦикла;

			//Недостающие поля.
			ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
			ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Реквизиты.Период, "Период");
			ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
			ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Истина, "Активность");

			Возврат ТаблицаДвиженийРасходов;

		Иначе // Поле "Сделка" пустое

			// Никакой подготовки не требуется, таблица уже подготовлена в запросе
			ТаблицаДвиженийРасходов = ПоступлениеРасходовУСНТаблицаРасходов.Скопировать();
			Возврат ТаблицаДвиженийРасходов;

		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция РасходыПоСделкеУСН(Сделка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка",     Сделка);
	Запрос.УстановитьПараметр("Субсчета10", БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Материалы));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыПриУСН.Период,
	|	РасходыПриУСН.Регистратор,
	|	РасходыПриУСН.НомерСтроки,
	|	РасходыПриУСН.Активность,
	|	РасходыПриУСН.ВидДвижения,
	|	РасходыПриУСН.Организация,
	|	РасходыПриУСН.СтатусыОплатыРасходовУСН,
	|	РасходыПриУСН.РасчетныйДокумент,
	|	РасходыПриУСН.Партия,
	|	РасходыПриУСН.ВидРасхода,
	|	РасходыПриУСН.ЭлементРасхода,
	|	РасходыПриУСН.СтатусыПартийУСН,
	|	РасходыПриУСН.СчетУчета,
	|	РасходыПриУСН.Валюта,
	|	РасходыПриУСН.ДоговорКонтрагента,
	|	РасходыПриУСН.ОтражениеВУСН,
	|	РасходыПриУСН.НомерСтрокиДокумента,
	|	РасходыПриУСН.РеквизитыДокументаОплаты,
	|	РасходыПриУСН.Количество,
	|	РасходыПриУСН.Сумма,
	|	РасходыПриУСН.НДС,
	|	РасходыПриУСН.ЭтапПроведения,
	|	РасходыПриУСН.СтатусСписания,
	|	ВЫБОР
	|		КОГДА РасходыПриУСН.СчетУчета В (&Субсчета10)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоТовар,
	|	ВЫБОР
	|		КОГДА РасходыПриУСН.СчетУчета В (&Субсчета10)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоМатериал,
	|	РасходыПриУСН.МоментВремени
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.Регистратор = &Сделка";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПартииПоСделкеУСН(Реквизиты, МассивНоменклатуры)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Сделка",      		Реквизиты.Сделка);
	Запрос.УстановитьПараметр("Организация", 		Реквизиты.Организация);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
 	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Сделка КАК Сделка,
	|	ИСТИНА КАК НепосредственнаяСделка
	|ПОМЕСТИТЬ ВременнаяТаблицаСделки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыВозвратаТоваров.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ДокументыВозвратаТоваров
	|ГДЕ
	|	ДокументыВозвратаТоваров.Сделка = &Сделка
	|	И ДокументыВозвратаТоваров.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.СубконтоКт1 КАК Номенклатура,
	|	Партии.СубконтоКт2 КАК ДокументОприходования,
	|	Партии.КоличествоОборотКт КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаПартии
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			,
	|			&Период,
	|			Регистратор,
	|			,
	|			,
	|			,
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И СубконтоКт1 В (&МассивНоменклатуры)) КАК Партии
	|ГДЕ
	|	Партии.Регистратор В
	|			(ВЫБРАТЬ
	|				Сделки.Сделка
	|			ИЗ
	|				ВременнаяТаблицаСделки КАК Сделки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.ДокументОприходования КАК ДокументОприходования,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		Партии.Номенклатура КАК Номенклатура,
	|		Партии.ДокументОприходования КАК ДокументОприходования,
	|		Партии.Количество КАК Количество
	|	ИЗ
	|		ВременнаяТаблицаПартии КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСделки КАК Сделки
	|			ПО Партии.Регистратор = Сделки.Сделка
	|				И (Сделки.НепосредственнаяСделка)
	|	ГДЕ
	|		Партии.Количество > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Партии.Номенклатура,
	|		Партии.ДокументОприходования,
	|		Партии.Количество
	|	ИЗ
	|		ВременнаяТаблицаПартии КАК Партии
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСделки КАК Сделки
	|			ПО Партии.Регистратор = Сделки.Сделка
	|				И (НЕ Сделки.НепосредственнаяСделка)
	|	ГДЕ
	|		Партии.Количество < 0) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ДокументОприходования
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПодготовитьТаблицуВыручкиОтРеализацииИП(ТаблицаВыручки, ТаблицаРеквизиты) Экспорт

	Если ТаблицаВыручки = Неопределено ИЛИ ТаблицаВыручки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаМПЗ	= ТаблицаВыручки.Скопировать();
	ТаблицаМПЗ.Колонки.Добавить("НоменклатурнаяГруппа",		Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаМПЗ.Колонки.Добавить("Продукция",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМПЗ.Колонки.Добавить("СчетЗатрат",				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМПЗ.Колонки.Добавить("ПринятиеКналоговомуУчету",	Новый ОписаниеТипов("Булево"));
	ТаблицаМПЗ.Колонки.Добавить("СтатьяЗатрат",				Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаМПЗ.Колонки.Добавить("ВидРасходовНУ",			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	ТаблицаМПЗ.Колонки.Добавить("Партия",					Документы.ТипВсеСсылки());
	ТаблицаМПЗ.Колонки.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат"));
	
	ТаблицаМПЗ.Колонки.СуммаРуб.Имя		= "Сумма";
	ТаблицаМПЗ.Колонки.СуммаНДСРуб.Имя	= "НДС";
	
	ВестиУчетПоВидамДеятельностиИП	= УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Период);
	Если ВестиУчетПоВидамДеятельностиИП Тогда
		ТаблицаМПЗ.ЗагрузитьКолонку(ТаблицаМПЗ.ВыгрузитьКолонку("Субконто"), "НоменклатурнаяГруппа");
	Иначе
		ОсновнаяНоменклатурнаяГруппа	= УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация, Реквизиты.Период);
		ТаблицаМПЗ.ЗаполнитьЗначения(ОсновнаяНоменклатурнаяГруппа, "НоменклатурнаяГруппа");
	КонецЕсли;
	
	ТаблицаМПЗ.ЗаполнитьЗначения(Истина, "ПринятиеКналоговомуУчету");
	
	Возврат ТаблицаМПЗ;

КонецФункции

// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

Процедура СформироватьДвиженияЗачетАвансаПоВозвратуОтПокупателя(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];

	Если ТипЗнч(Реквизиты.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		Возврат;
	КонецЕсли;

	Проводки = Движения.Хозрасчетный;

	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчеты Цикл

		Если СтрокаВзаиморасчетов.ДокументРасчетов = Реквизиты.Регистратор Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;
			Проводка.Сумма       = - СтрокаВзаиморасчетов.СуммаРуб;

			СчетАванса = ?(ЗначениеЗаполнено(Реквизиты.СчетУчетаРасчетовПоАвансам),
				Реквизиты.СчетУчетаРасчетовПоАвансам,
				Реквизиты.СчетУчетаРасчетовСКонтрагентом);

			Проводка.СчетДт = СчетАванса;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

			Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
			Если ЗначениеЗаполнено(Реквизиты.Сделка) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Сделка);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
			КонецЕсли;

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаДт.Валютный Тогда
				Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			КонецЕсли;
			Если СвойстваСчетаКт.Валютный Тогда
				Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			КонецЕсли;

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.КорПодразделение;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СформироватьДвиженияПоРегистрамУСН(
				ДокументОбъект,
				ТаблицаРасходовДляУСН,
				ТаблицаСписанныеТовары,
				ТаблицаВзаиморасчеты,
				ТаблицаРеквизитыСделки,
				ТаблицаРеквизиты,
				СуммаСторноРасходов,
				СуммаСторноНДС,
				СуммаПризнанияНДС,
				Движения, Отказ) Экспорт

	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];

	Если НЕ УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;

	// Может быть как возврат из реализации (если вид договора = "С комиссионером"),
	//  так и возврат от покупателя

	Если Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		СтруктураДопПараметров = Новый Структура("ТаблицаТМЦ", ТаблицаСписанныеТовары);
		НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъект, СтруктураДопПараметров);
	Иначе
		Если ЗначениеЗаполнено(Реквизиты.Сделка) Тогда
			// По регистру РасходыПриУСН
			СформироватьДвиженияВозвратПоДокументуСоСделкойУСН(ТаблицаРасходовДляУСН, Движения, Отказ);
			// По регистру КУДиР
			СформироватьДвиженияКУДиР(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, СуммаСторноРасходов, СуммаПризнанияНДС, СуммаСторноНДС, Движения, Отказ);
		Иначе
			СформироватьДвиженияКУДиР(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, СуммаСторноРасходов, 0, 0, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияВозвратПоДокументуСоСделкойУСН(ТаблицаРасходовДляУСН, Движения, Отказ)

	Если ТаблицаРасходовДляУСН = Неопределено ИЛИ ТаблицаРасходовДляУСН.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.РасходыПриУСН.Очистить();
	
	Для каждого ТекущаяЗапись Из ТаблицаРасходовДляУСН Цикл
		НоваяЗапись = Движения.РасходыПриУСН.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущаяЗапись);
	КонецЦикла;
	
	Движения.РасходыПриУСН.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияКУДиР(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, СуммаСторноРасходов, СуммаПризнанияНДС = 0, СуммаСторноНДС = 0, Движения, Отказ)

	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];

	ДвиженияКУДиР = Движения.КнигаУчетаДоходовИРасходов;

	ДвиженияКУДиР.Очистить();

	Если СуммаПризнанияНДС <> 0 Тогда
		СтрокаКниги  = ДвиженияКУДиР.Добавить();
		СтрокаКниги.Организация     = Реквизиты.Организация;
		СтрокаКниги.СтрокаДокумента = 0;
		СтрокаКниги.Период          = Реквизиты.Период;
		СтрокаКниги.Содержание      = "При возврате от покупателя признаны расходы, сторнированные не основании реализации (признаны расходы на уплату НДС).";
		СтрокаКниги.Графа7          = СуммаПризнанияНДС;
		СтрокаКниги.НДС             = 0;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Реквизиты.Регистратор);
	КонецЕсли;

	Если СуммаСторноРасходов <> 0 Тогда
		СтрокаКниги  = ДвиженияКУДиР.Добавить();
		СтрокаКниги.Организация     = Реквизиты.Организация;
		СтрокаКниги.СтрокаДокумента = 0;
		СтрокаКниги.Период          = Реквизиты.Период;
		СтрокаКниги.Содержание      = "Расходы уменьшены на стоимость товаров, возвращенных покупателем.";
		СтрокаКниги.Графа7          = - СуммаСторноРасходов;
		СтрокаКниги.НДС             = - СуммаСторноНДС;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Реквизиты.Регистратор);
	КонецЕсли;

	ДвиженияКУДиР.Записывать = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Возврат от покупателя
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Возврат от покупателя'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Счет-фактура от поставщика
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураПолученный";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура за поставщика'");
	КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиСчетовФактурПолученных";
	
	// Справка-расчет "Рублевые суммы документа в валюте"
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьРублевыхСуммДокументовВВалюте";
	КомандаПечати.Идентификатор = "РублевыеСуммыДокументаВВалюте";
	КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Рублевые суммы документа в валюте""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Возврат товаров от покупателя""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
																"Накладная",
																"Возврат от покупателя",
																ПечатьВозвратаОтПокупателя(МассивОбъектов, ОбъектыПечати),
																,
																"Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_Накладная");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаОтПокупателя(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровОтПокупателя_Накладная";
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыНакладная();

	Шапка = Запрос.Выполнить().Выбрать();

	ПервыйДокумент = Истина;

	Пока Шапка.Следующий() Цикл

		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_Накладная");

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		// Выводим шапку накладной

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, "Возврат от покупателя");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");

		СведенияОКонтрагенте     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
		ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеОрганизации;
		ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеКонтрагента;
		ОбластьМакета.Параметры.Получатель = Шапка.Контрагент;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Артикул";
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Код";
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

		Сумма    = 0;
		СуммаНДС = 0;
		СуммаНП  = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;

		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

		КонецЦикла;
		
		ВыборкаСтрокТовары = Шапка.ВозвратнаяТара.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;

		КонецЦикла;

		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС

		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		Если СуммаНДС <> 0 Тогда
			ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
			ОбластьДанных.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьСуммы.Параметры.ВсегоНДС = "-";
			ОбластьДанных.Параметры.НДС      = "Без налога (НДС)";
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ВыборкаСтрокТовары.Количество()
		+ ", на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);

		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыНакладная()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Номер,
	|	ВозвратТоваровОтПокупателя.Дата,
	|	ВозвратТоваровОтПокупателя.ДоговорКонтрагента,
	|	ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент,
	|	ВозвратТоваровОтПокупателя.Организация,
	|	ВозвратТоваровОтПокупателя.ПодразделениеОрганизации,
	|	ВозвратТоваровОтПокупателя.СуммаДокумента,
	|	ВозвратТоваровОтПокупателя.ВалютаДокумента,
	|	ВозвратТоваровОтПокупателя.СуммаВключаетНДС,
	|	ВозвратТоваровОтПокупателя.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ВозвратТоваровОтПокупателя.Товары.Номенклатура.Артикул
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|				ТОГДА ВозвратТоваровОтПокупателя.Товары.Номенклатура.Код
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|				ТОГДА """"
	|		КОНЕЦ КАК Артикул,
	|		Количество,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаНДС
	|	),
	|	ВозвратТоваровОтПокупателя.ВозвратнаяТара.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ВозвратТоваровОтПокупателя.ВозвратнаяТара.Номенклатура.Артикул
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|				ТОГДА ВозвратТоваровОтПокупателя.ВозвратнаяТара.Номенклатура.Код
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|				ТОГДА """"
	|		КОНЕЦ КАК Артикул,
	|		Количество,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма
	|	)
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровОтПокупателя.Дата,
	|	ВозвратТоваровОтПокупателя.Ссылка";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРублевыеСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РегистрСведенийРублевыеСуммыДокументовВВалюте",             НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ТаблицаОстаткаДолгаПоСделке",                            НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаОстаткаДолгаПоСделке",                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_РегистрСведенийРублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.УчетАгентскогоНДС, ЛОЖЬ) КАК УчетАгентскогоНДС,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДанныеОбрабатываемогоДокумента.Сделка
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.РасчетыВУсловныхЕдиницах,
	|	ВТ_ТаблицаПоШапкеДокумента.УчетАгентскогоНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РублевыеСуммыДокументовВВалюте.Всего,
	|	РублевыеСуммыДокументовВВалюте.НДС,
	|	РублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО РублевыеСуммыДокументовВВалюте.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ТабличнаяЧастьДокумента,
	|	НомерСтрокиДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|					И Хозрасчетный.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|					И Хозрасчетный.Регистратор <> ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|				ТОГДА Хозрасчетный.Сумма
	|			КОГДА ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|					И Хозрасчетный.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|					И Хозрасчетный.Регистратор <> ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|				ТОГДА Хозрасчетный.Сумма * -1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПредоплатыРуб,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|					И Хозрасчетный.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|					И Хозрасчетный.Регистратор <> ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|				ТОГДА Хозрасчетный.ВалютнаяСуммаДт
	|			КОГДА ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|					И Хозрасчетный.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|					И Хозрасчетный.Регистратор <> ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|				ТОГДА Хозрасчетный.ВалютнаяСуммаКт * -1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПредоплатыВал,
	|	ХозрасчетныйСубконто.Значение КАК Документ,
	|	СУММА(ВЫБОР
	|			КОГДА Хозрасчетный.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|					И ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|					И Хозрасчетный.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|				ТОГДА Хозрасчетный.ВалютнаяСуммаДт * -1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВалПоДокументу,
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО ХозрасчетныйСубконто.Значение = ВТ_ТаблицаПоШапкеДокумента.Сделка
	|			И (НЕ ЕСТЬNULL(ВТ_ТаблицаПоШапкеДокумента.Сделка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО)
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|			И ХозрасчетныйСубконто.Период <= ВТ_ТаблицаПоШапкеДокумента.Ссылка.Дата
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ХозрасчетныйСубконто.Регистратор = Хозрасчетный.Регистратор
	|			И ХозрасчетныйСубконто.НомерСтроки = Хозрасчетный.НомерСтроки
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|ГДЕ
	|	(Хозрасчетный.СчетДт В
	|				(ВЫБРАТЬ
	|					ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|				ИЗ
	|					ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента)
	|			ИЛИ Хозрасчетный.СчетКт В
	|				(ВЫБРАТЬ
	|					ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|				ИЗ
	|					ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
	|	ХозрасчетныйСубконто.Значение,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаВалПоДокументу < ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыВал
	|			ТОГДА ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаВалПоДокументу * (ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыРуб / ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыВал)
	|		ИНАЧЕ ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыРуб
	|	КОНЕЦ КАК СуммаПредоплатыРуб,
	|	ВЫБОР
	|		КОГДА ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаВалПоДокументу < ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыВал
	|			ТОГДА ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаВалПоДокументу
	|		ИНАЧЕ ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыВал
	|	КОНЕЦ КАК СуммаПредоплатыВал,
	|	ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.Документ,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.Документ) КАК ДокументПредоплатыПредставление,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента
	|ИЗ
	|	ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата КАК ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.Документ = ДанныеПервичныхДокументов.Документ
	|			И ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаВалПоДокументу < ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыВал
	|				ТОГДА ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаВалПоДокументу
	|			ИНАЧЕ ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата.СуммаПредоплатыВал
	|		КОНЕЦ <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРуб),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДляПолученияОстаткаДолгаПоСделкеНаМоментВозврата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Ссылка,
	|	ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Товар,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование КАК ТоварНаименование,
	|	ВозвратТоваровОтПокупателяТовары.Сумма КАК ВсегоВал,
	|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК НДСВал,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК ВсегоРуб,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДСРуб,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДСРуб
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ВозвратТоваровОтПокупателяТовары.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ВозвратТоваровОтПокупателяТовары.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровОтПокупателяТовары.Ссылка,
	|	ВозвратТоваровОтПокупателяТовары.НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРуб),
	|	СУММА(НДСРуб),
	|	СУММА(НалоговаяБазаНДСРуб)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли