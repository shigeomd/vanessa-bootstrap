&НаКлиенте
Перем СтрокаПоискаПоКБК;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		
		// Если документ скопирован и есть расчеты в у.е., пересчитаем суммы взаиморасчетов на дату документа
		Если ЕстьРасчетыВУсловныхЕдиницах И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПересчитатьСуммыВзаиморасчетов();
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ПериодСобытия") Тогда
		
		Если ТипЗнч(Параметры.Правило) = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
			ПравилоУплатыНалогов   = Параметры.Правило;
			ПериодСобытияКалендаря = Параметры.ПериодСобытия;
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	КомандаНапечататьЧек = Элементы.Вставить("ФормаНапечататьЧек", Тип("КнопкаФормы"), Элементы.ГруппаГлобальныеКоманды);
	КомандаНапечататьЧек.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КомандаНапечататьЧек.ИмяКоманды = "НапечататьЧек";
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтотОбъект, Элементы.ИнформационныеСсылки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// Инициализируем свойства платежа
	ИнициализироватьСвойстваПлатежаНаСервере(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
			КлючеваяОперация = "ПроведениеРасходныйКассовыйОрдерУплатаНалога";
		Иначе
			КлючеваяОперация = "ПроведениеРасходныйКассовыйОрдер";
		КонецЕсли;
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Документы.РасходныйКассовыйОрдер.УстановитьВидНалоговогоОбязательства(ТекущийОбъект, ВидНалоговогоОбязательства);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
	//Если задано правило уплаты налогов, зарегистрируем документ в регистре
	Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога И ЗначениеЗаполнено(ЭтаФорма.ПравилоУплатыНалогов) Тогда
		РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(ТекущийОбъект.Организация, ТекущийОбъект.Ссылка, ЭтаФорма.ПравилоУплатыНалогов, ЭтаФорма.ПериодСобытияКалендаря);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
		ПараметрыНалога = Новый Структура;
		ПараметрыНалога.Вставить("ДокументОснование", Объект.ДокументОснование);
		ПараметрыНалога.Вставить("ПоказательПериода", Объект.ПоказательПериода);
		ПараметрыНалога.Вставить("КБК",               Объект.КодБК);
		ПараметрыНалога.Вставить("ОКАТО",             Объект.КодОКАТО);
		ПараметрыНалога.Вставить("Ссылка",            Объект.Ссылка);
		ПараметрыНалога.Вставить("Оплачено",          Истина);
		ПараметрыНалога.Вставить("Сумма",             Объект.СуммаДокумента);
		Оповестить("Запись_ПлатежныйДокумент_УплатаНалогов", ПараметрыНалога);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(
		ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ВыборРеквизитовПлатежейВБюджет" И Источник = ЭтотОбъект Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
			ОрганизацияПриИзмененииСервер();
		Иначе
			УстановитьФункциональныеОпцииФормы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.РеквизитыУплатыНалоговИПлатежейВБюджет") Тогда
		
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога");
			ВидОперацииПриИзмененииСервер();
		КонецЕсли;
		
		ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект, ВыбранноеЗначение);
		
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		
		Если ВыбранноеЗначение.Свойство("СчетДт") Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = ВыбранноеЗначение.СчетДт;
			ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов  = Новый Массив;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидНалоговогоОбязательства");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если есть договоры в у.е., то необходимо получение курсов валют.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ЕстьРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	// Если определили, что Изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		ВидОперацииПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
	
		АктуализированыРеквизитыПлатежаВБюджет = Ложь;
		НалогПриИзмененииНаСервере(Новый Массив, АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК);
		
		Если АктуализированыРеквизитыПлатежаВБюджет Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Коды бюджетной классификации успешно обновлены'"),
				"e1cib/data/Справочник.ВидыНалоговИПлатежейВБюджет.Форма.ФормаСписка",
				НСтр("ru = 'Налоги и взносы'"),
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(Параметры.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(Параметры.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидНалоговогоОбязательстваПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
		ВидНалоговогоОбязательстваПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОтраженияБУНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Счет",        Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("Субконто1",   Объект.СубконтоДт1);
	ПараметрыФормы.Вставить("Субконто2",   Объект.СубконтоДт2);
	ПараметрыФормы.Вставить("Субконто3",   Объект.СубконтоДт3);
	ПараметрыФормы.Вставить("Направление", "Дт");
	
	ОткрытьФорму("ОбщаяФорма.ПорядокОтраженияБУ", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		СчетКонтрагентаПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКассаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетКасса) Тогда
		Возврат;
	КонецЕсли;
	
	СчетКассаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДокументаПриИзмененииСервер(Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	УстановитьПодразделениеДт(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаСписка",
		Новый Структура("РежимВыбора", Истина), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	ПараметрыОбъекта.Вставить("ВыдатьФизЛицо", ВыбранноеЗначение);
	НовыеПараметры   = НовыеПараметрыПриВыбореВыдать(ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Выдать, ПоДокументу");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
		Если ПрименениеУСН И НЕ ПрименениеУСНДоходы
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам") Тогда
			ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, ЭтотОбъект);
			ОбновитьИтогиУСН(ЭтотОбъект);
		КонецЕсли;
		
		ОбновитьИтоги(ЭтотОбъект);
	Иначе
		Если ПрименениеУСН И НЕ ПрименениеУСНДоходы
			И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход")) Тогда
			ЗаполнитьОтражениеВУСННаСервере(Истина, Ложь);
			УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		СчетУчетаПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		// Требуется серверный вызов для отражения в УСН.
		// В ходе этого же серверного вызова заполним счета.
		СтатьяДвиженияДенежныхСредствПрочиеИзменениеДляУСН();
	Иначе
		// Серверный вызов может понадобиться только для заполнения счета.
		// А может и не понадобиться, если счета заполняются перед записью.
		СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(НачатьЗаполнениеСчетовУчета("СтатьяДвиженияДенежныхСредств", Объект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗадержкаЗарплатыПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаРасчетовСКонтрагентом,, "ЗадержкаЗарплаты", Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	
	ПоляОбъекта.Вставить("Подразделение", "ПодразделениеДт");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентом, Объект, ПоляОбъекта,, ЗначенияСубконто);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
		СформироватьТекстРасходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "СубконтоДт%Индекс%");
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплатыПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "СубконтоДт%Индекс%");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуПриИзменении(Элемент)
	
	Объект.СуммаДокумента = СуммаВыплаченнойЗарплатыРаботнику(
		Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Элемент = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		Элемент = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",  Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.Касса"));
		
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора",
			Новый Структура("ПараметрыОтбораСписка, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
	Иначе
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ФормаВыбора",
			Новый Структура("Отбор, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееРасходыУСНПриИзменении(Элемент)
	
	ОграничитьПринимаемыеРасходыДляУСН();
	ОграничитьНДСДляУСН();
	
	УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееНДСУСНПриИзменении(Элемент)
	ОграничитьНДСДляУСН();
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлатежейВБюджетНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРедактированияРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПлатежаВБюджет(Форма, НастройкаЗаполнения = Неопределено)
	
	Объект = Форма.Объект;
	
	Если НастройкаЗаполнения = Неопределено
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога")
		И Объект.Налог = ПредопределенноеЗначение("Справочник.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъекта = ПлатежиВБюджетКлиентСерверПереопределяемый.НовыеРеквизитыПлатежаВБюджет(Объект, (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога")));
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
		ЗаполнитьРеквизитыПлатежаВБюджетНаСервере(РеквизитыОбъекта, ИсточникДанныхКонтекстаПлатежногоДокумента(Форма), НастройкаЗаполнения);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта);
	
	Форма.НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИсточникДанныхКонтекстаПлатежногоДокумента(Форма)
	
	Объект = Форма.Объект;
	
	СтруктураДанныхОбъекта = Новый Структура("СчетУчетаРасчетовСКонтрагентом, СубконтоДт1, СубконтоДт3, СубконтоДт3");
	ЗаполнитьЗначенияСвойств(СтруктураДанныхОбъекта, Объект);
	
	ИсточникДанныхКонтекста = Новый Структура;
	ИсточникДанныхКонтекста.Вставить("Период",                      Объект.Дата);
	ИсточникДанныхКонтекста.Вставить("Организация",                 Объект.Организация);
	ИсточникДанныхКонтекста.Вставить("Получатель",                  Объект.Контрагент);
	ИсточникДанныхКонтекста.Вставить("СчетПолучателя",              Объект.СчетКонтрагента);
	ИсточникДанныхКонтекста.Вставить("Налог",                       Объект.Налог);
	ИсточникДанныхКонтекста.Вставить("ВидНалоговогоОбязательства",  Форма.ВидНалоговогоОбязательства);
	ИсточникДанныхКонтекста.Вставить("РегистрацияВНалоговомОргане", ПолучитьРегистрациюВНалоговомОргане(СтруктураДанныхОбъекта));
	
	Возврат ИсточникДанныхКонтекста;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРегистрациюВНалоговомОргане(Знач СтруктураДанныхОбъекта)
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	Если ЗначениеЗаполнено(СтруктураДанныхОбъекта.СчетУчетаРасчетовСКонтрагентом) И НалоговыйУчетОбособленныхПодразделений.УчетВРазрезеНалоговыхОрганов() Тогда
		
		НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
			СтруктураДанныхОбъекта.СчетУчетаРасчетовСКонтрагентом, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"]);
		
		Если НомерСубконто <> 0 Тогда
			РегистрацияВНалоговомОргане = СтруктураДанныхОбъекта["СубконтоДт" + НомерСубконто];
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат РегистрацияВНалоговомОргане;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПлатежаВБюджетНаСервере(РеквизитыОбъекта, Знач ИсточникДанных, Знач НастройкаЗаполнения)
	
	Если НастройкаЗаполнения <> Неопределено Тогда
		ДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
			НастройкаЗаполнения, ИсточникДанных.Период);
	КонецЕсли;
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(
		РеквизитыОбъекта, ИсточникДанных, ДанныеЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИзменениеПериодаУплаты(ЭтотОбъект, "Объект.НалоговыйПериод", "НалоговыйПериодСтрока", Направление);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	ИзменениеПериодаУплаты(ЭтотОбъект, "Объект.НалоговыйПериод", "НалоговыйПериодСтрока");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Значение = Объект.НалоговыйПериод;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НалоговыйПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		Новый Структура("Значение, РежимВыбораПериода, ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ИнициализироватьСвойстваПлатежаНаКлиенте();
		ЗаполнитьЗначенияСвойств(Элементы.РасшифровкаПлатежа.ТекущиеДанные, СвойстваПлатежа);
	КонецЕсли;
	
	Если НоваяСтрока И ЕстьРасчетыВУсловныхЕдиницах Тогда
		ЗаполнитьНадписиВРасшифровке(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ОбновитьИтоги(ЭтотОбъект);
	ОбновитьИтогиУСН(ЭтотОбъект);
	ОпределитьНаличиеРасчетовВУсловныхЕдиницах(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ОбновитьИтоги(ЭтотОбъект);
		ОбновитьИтогиУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = Объект.РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента = СвойстваПлатежа.ДоговорКонтрагента Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	
	ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУсловныхЕдиницах ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	
	ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ЗначенияЗаполнения = Новый Структура;
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора));
	
	ЗначенияЗаполнения.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	Если ОплатаВВалюте Тогда
		ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
		ЗначенияЗаполнения.Вставить("Валютный", ОплатаВВалюте);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств <> СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу") Тогда
		СтрокаПлатеж.Сделка = Неопределено;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета("РасшифровкаПлатежа.СпособПогашенияЗадолженности", Объект, СтрокаПлатеж);
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю") Тогда
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана дата.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана организация.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан контрагент.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан договор.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            Объект.Контрагент);
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
		ПараметрыОбъекта.Вставить("СчетУчета",             СчетУчета);
	КонецЕсли;
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",        "Метаданные.Документы.РасходныйКассовыйОрдер.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",      СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата" ,                   Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПроверкаКурсовВалют(СтрокаПлатеж, ЭтотОбъект);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И КратностьДокумента <> 0 Тогда
		СуммаРуб = СтрокаПлатеж.СуммаПлатежа * КурсДокумента / КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ЗаполнитьОтражениеСтрокиВУСН(СтрокаТЧ, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасходыУСНПриИзменении(Элемент)

	СтрокаТЧ = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ОграничитьПринимаемыеРасходыДляУСНПоСтроке(СтрокаТЧ);
	
	Если СтрокаТЧ.РасходыУСН = 0 Тогда
		СтрокаТЧ.РаспределятьРасходыУСН = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВыплатаЗаработнойПлаты

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	
	СуммаКВыплатеДоИзменения = СтрокаПлатеж.СуммаКВыплате;
	
	СтрокаПлатеж.СуммаКВыплате = СуммаВыплаченнойЗарплатыПоВедомости(
		СтрокаПлатеж.Ведомость, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
		УчетЗарплатыИКадровВоВнешнейПрограмме);
		
	Если СуммаКВыплатеДоИзменения <> СтрокаПлатеж.СуммаКВыплате Тогда
		ТекстСообщения = НСтр("ru = 'Состав оплачиваемых ведомостей был изменен. Сумма документа пересчитана!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПроверитьДублиВедомостей(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущаяВедомость = ТекущиеДанные.Ведомость;
			Если ПроверитьДублиВедомостей(ТекущаяВедомость) Тогда
				Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные.Ведомость     = "";
				Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные.СуммаКВыплате = 0;
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
		Иначе
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",  Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.Касса"));
		
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора", Новый Структура("ПараметрыОтбораСписка", ПараметрыФормы), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВыплатаДепонентов

&НаКлиенте
Процедура ВыплатаДепонентовПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.ВыплатаДепонентов.Итог("СуммаКВыплате");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаДепонентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.ВыплатаДепонентов.ТекущиеДанные;
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
		Иначе
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаДепонентовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВыплатаДепонентов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущаяВедомость = ТекущиеДанные.Ведомость;
			Если ПроверитьДублиВедомостей(ТекущаяВедомость, "ВыплатаДепонентов") Тогда
				Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные.Ведомость     = "";
				Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные.СуммаКВыплате = 0;
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.ВыплатаДепонентов.Итог("СуммаКВыплате");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаДепонентовВедомостьПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ВыплатаДепонентов.ТекущиеДанные;
	СтрокаПлатеж.СуммаКВыплате = СуммаНеВыплаченнойЗарплатыРаботнику(
		Объект.Ссылка, Объект.Контрагент, СтрокаПлатеж.Ведомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаДепонентовВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",  Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.Касса"));
		
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора", Новый Структура("ПараметрыОтбораСписка", ПараметрыФормы), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаДепонентовВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВыплатаДепонентов.ТекущиеДанные;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаДепонентовВедомостьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПроверитьДублиВедомостей(ВыбранноеЗначение, "ВыплатаДепонентов") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура НапечататьЧекВыполнить()
	
	НапечататьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПлатежиВБюджет(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимВыбора", Истина);
	
	СписокОрганизаций   = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Объект.Организация);
	СписокОрганизаций.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	
	СтруктураОтбора     = Новый Структура("Организация", СписокОрганизаций);
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.Форма.ФормаВыбора", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РеестрУплатыНДФЛ(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда		
		ТекстСообщения = НСтр("ru = 'Печать реестра уплаты НДФЛ возможна только после проведения документа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;		
	КонецЕсли;
		
	УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраНДФЛ(Новый Структура("МенеджерПечати, Ссылка, Форма", 
		"Документ.РасходныйКассовыйОрдер", Объект.Ссылка, ЭтаФорма));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУсловногоОформления = Новый Структура();
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость();
	
	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)
	
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("РасшифровкаПлатежаПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами Тогда
		
		Форма.УстановитьУсловноеОформлениеРасшифровкаПлатежа();
		
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ВыплатаЗаработнойПлатыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплаты Тогда
		
		Форма.УстановитьУсловноеОформлениеВыплатаЗаработнойПлаты();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()
	
	// ПорядокОтраженияБУ
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокОтраженияБУ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокОтраженияБУЗаполнен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Реквизиты не используются при расчетах по кредитам и займам.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты используются только при расчетах в у.е.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ЕстьРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Контрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРасшифровкаПлатежа() Экспорт
	
	НастройкиУсловногоОформления.Вставить("РасшифровкаПлатежаПроинициализировано", Истина);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.Автоматически);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Нет>'"));
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.Сделка",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<документ>'"));
	
	// РасшифровкаПлатежаСпособПогашенияЗадолженности
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<способ погашения>'"));
	
	// РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Статья движения ден. средств>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет расчетов>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет авансов>'"));
	
	// РасшифровкаПлатежаРасходыУСН
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаРасходыУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСНДоходы",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.РасходыУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не принимаются>'"));
	
	// РасшифровкаПлатежаРаспределятьРасходыУСН
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаРаспределятьРасходыУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.РасходыУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВыплатаЗаработнойПлаты() Экспорт
	
	НастройкиУсловногоОформления.Вставить("ВыплатаЗаработнойПлатыПроинициализировано", Истина);
	
	// ВедомостьЗарплатаРаботнику
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВедомостьЗарплатаРаботнику");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ПроверятьСоответствиеСуммыДокументаИВедомости",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ВыплатаЗаработнойПлаты
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыплатаЗаработнойПлаты");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ПроверятьСоответствиеСуммыДокументаИВедомости",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// СчетУчетаЗадержкаЗарплаты
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаЗадержкаЗарплаты");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек()
	
	ОчиститьСообщения();
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПКлиент.ПроверитьВозможностьПечатиЧека(ЭтотОбъект) Тогда
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НапечататьЧекЗавершение", ЭтотОбъект);
			МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ФискальныйРегистратор",
				НСтр("ru = 'Выберите фискальный регистратор'"), НСтр("ru = 'Фискальный регистратор не подключен.'"));
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьСвойстваПлатежаНаКлиенте(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьПринимаемыеРасходыДляУСН()
	
	МаксРасход = Объект.СуммаДокумента;
	Если ОплатаВВалюте Тогда
		МаксРасход = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаДокумента,
			Объект.ВалютаДокумента, ВалютаРегламентированногоУчета,
			КурсДокумента,      1,
			КратностьДокумента, 1);
	КонецЕсли;
	
	Объект.Графа7_УСН = Мин(Объект.Графа7_УСН, МаксРасход);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьПринимаемыеРасходыДляУСНПоСтроке(СтрокаТЧ)
	
	МаксРасход = СтрокаТЧ.СуммаПлатежа;
	
	Если ОплатаВВалюте Тогда
		МаксРасход = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаПлатежа,
			Объект.ВалютаДокумента, ВалютаРегламентированногоУчета,
			КурсДокумента,      1,
			КратностьДокумента, 1);
	КонецЕсли;
	
	СтрокаТЧ.РасходыУСН = Мин(СтрокаТЧ.РасходыУСН, МаксРасход);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьНДСДляУСН()
	
	Если Объект.НДС_УСН > Объект.Графа7_УСН Тогда
		Объект.НДС_УСН = Объект.Графа7_УСН;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяДвиженияДенежныхСредствПрочиеИзменениеДляУСН()
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета("СтатьяДвиженияДенежныхСредств", Объект));
	ЗаполнитьОтражениеВУСННаСервере(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДублиВедомостей(ТекущаяВедомость, ТабличнаяЧасть = "ВыплатаЗаработнойПлаты")
	
	ЕстьДублиВедомостей = Ложь;
	
	СтрокаПоиска    = Новый Структура("Ведомость", ТекущаяВедомость);
	НайденныеСтроки = Объект[ТабличнаяЧасть].НайтиСтроки(СтрокаПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Если НайденныеСтроки.Количество() = 1 Тогда
			Если Элементы[ТабличнаяЧасть].ТекущиеДанные.НомерСтроки <> НайденныеСтроки[0].НомерСтроки Тогда
				ЕстьДублиВедомостей = Истина;
			КонецЕсли;
		Иначе
			ЕстьДублиВедомостей = Истина;
		КонецЕсли;
		
		Если ЕстьДублиВедомостей Тогда
			ТекстСообщения = НСтр("ru = 'Указанная ведомость уже выбрана в документе!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьДублиВедомостей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭтоУплатаНалога = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога"));
	ЭтоУплатаНДФЛ = ЭтоУплатаНалога И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(Форма.ВидНалога);
	ЭтоУплатаФиксированныхВзносов  = ЭтоУплатаНалога И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(Форма.ВидНалога);
	ЭтоОбязательныеСтраховыеВзносы = ЭтоУплатаНалога И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоОбязательныеСтраховыеВзносы(Форма.ВидНалога);
	
	Элементы.Налог.Видимость                      = ЭтоУплатаНалога;
	Элементы.ВидНалоговогоОбязательства.Видимость = ЭтоУплатаНалога;
	
	Элементы.ГруппаПериодУплаты.Видимость = Форма.ИспользоватьНачислениеЗарплаты И ЭтоУплатаНДФЛ
		Или ЭтоОбязательныеСтраховыеВзносы И Форма.ПрименениеУСНДоходы;
	Элементы.РеестрУплатыНДФЛ.Видимость   = Форма.ИспользоватьНачислениеЗарплаты И ЭтоУплатаНДФЛ;
	Элементы.СтраховойПериод.Видимость    = ЭтоУплатаФиксированныхВзносов;
	
	Элементы.ФормаПрочиеПлатежиВБюджет.Видимость  = ЭтоУплатаНалога;
	Элементы.НомерВходящегоДокумента.Видимость    = ЭтоУплатаНалога;
	
	Элементы.Контрагент.Видимость   = (Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя"));
	Элементы.Контрагент.Доступность =
		Объект.ВидОперации   <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.Инкассация")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход");
	
	Элементы.СчетКонтрагента.Видимость   = ЭтоУплатаНалога;
	Элементы.СчетКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.ГруппаПорядокОтраженияБУ.Видимость = Форма.ПользовательУправляетСчетамиУчета И ЭтоУплатаНалога;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.Инкассация") Тогда
		
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаРасчетовСКонтрагентом,, "", Истина);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям") Тогда
		
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаРасчетовСКонтрагентом,, "ЗадержкаЗарплаты", Истина);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
		
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаРасчетовСКонтрагентом,, "", Ложь);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк") Тогда
		
		ИзменитьПараметрыВыбораСчетаБанка(Форма);
		
	КонецЕсли;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Элементы.ВалютаДокумента.Доступность = Форма.ОплатаВВалюте И ДокументМожетБытьОформленВВалюте(Объект.ВидОперации);
	Иначе
		Элементы.ВалютаДокумента.Доступность = ДокументМожетБытьОформленВВалюте(Объект.ВидОперации);
	КонецЕсли;
	
	Элементы.СтатьяДвиженияДенежныхСредств.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаРаботнику"));
	
	УправлениеЭлементамиОтраженияВУСН(Форма);
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ИтогоСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Форма.ИтогоВсегоНДС     = Объект.РасшифровкаПлатежа.Итог("СуммаНДС");
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(Форма.ИтогоСуммаПлатежа, "ЧЦ=12; ЧДЦ=2");
		Элементы.РасшифровкаПлатежаСуммаНДС.ТекстПодвала     = Формат(Форма.ИтогоВсегоНДС,     "ЧЦ=12; ЧДЦ=2");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж)
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПроверкаКурсовВалют(СтрокаПлатеж, Форма)
	
	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	Объект = Форма.Объект;
	ПроверкаКурсовВалют(СтрокаПлатеж, Форма);
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		Объект.ВалютаДокумента,   СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Форма.КурсДокумента,      СтрокаПлатеж.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма)
	
	Объект = Форма.Объект;
	
	ЕстьРасчетыВУЕ = Ложь;
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			ЕстьРасчетыВУЕ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУЕ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Префикс = "", Постфикс = "", ЕстьПодразделение, ЭтоТаблица = Ложь)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "СубконтоДт1" + Постфикс,
		Префикс + "СубконтоДт2" + Постфикс,
		Префикс + "СубконтоДт3" + Постфикс);
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто1" + Постфикс, "ЗаголовокСубконто2" + Постфикс, "ЗаголовокСубконто3" + Постфикс);
	
	Если ЕстьПодразделение Тогда
		ПоляФормы.Вставить("Подразделение", Префикс + "ПодразделениеДт" + Постфикс);
		ЗаголовкиПолей.Вставить("Подразделение", "ЗаголовокПодразделение");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей, ЭтоТаблица);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоДт%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "СубконтоДт%Индекс%", "СубконтоДт%Индекс%", ПараметрыДокумента);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "СубконтоДт%Индекс%", "СубконтоДт%Индекс%ЗадержкаЗарплаты", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru='Введите ИНН или наименование'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДепонентов")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаРаботнику") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодразделениеДт(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДепонентов")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
		
		Объект.ПодразделениеДт = Неопределено;
		
	Иначе
		// В следующих операциях в проводках в подразделение дебета всегда подставляется подразделение организации:
		//  - Инкассация
		//  - ПрочийРасход
		//  - ЛичныеСредстваПредпринимателя
		//  - ВыдачаПодотчетномуЛицу
		//  - ВзносНаличнымиВБанк
		//  - ВыдачаЗаймаРаботнику
		Объект.ПодразделениеДт = Объект.ПодразделениеОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораСчетаБанка(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив;
	Для каждого СтарыйПараметр Из Элементы.СчетБанк.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПараметрыВыбораСчетаУчета()
	
	НовыйМассивПараметров = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   МассивСчетовИнкассации));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОплатаВВалюте));
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		
		МассивСчетовУплатыНалогов = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовУплатыНалогов,
			БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию));
		
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивСчетовУплатыНалогов)));
		Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
			И МассивСчетовУплатыНалогов.Найти(Объект.СчетУчетаРасчетовСКонтрагентом) = Неопределено Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			СчетУчетаПриИзмененииСервер();
		КонецЕсли;
		
	Иначе
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",   Новый ФиксированныйМассив(ВидыДоговора)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Форма.ОплатаВВалюте));
	Если Форма.ОплатаВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораВалютыДокумента(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	Если НЕ Форма.ОплатаВВалюте И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ВалютаРегламентированногоУчета));
	КонецЕсли;
	
	Элементы.ВалютаДокумента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж)
	
	СтрокаПлатеж.НадписьКурс   = НСтр("ru = 'Курс'");
	СтрокаПлатеж.НадписьСумма  = НСтр("ru = 'Сумма'");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиУСН(Форма)
	
	Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
		Объект = Форма.Объект;
		Объект.Графа7_УСН = Объект.РасшифровкаПлатежа.Итог("РасходыУСН");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтражениеСтрокиВУСН(СтрокаТЧ, Форма)
	
	Объект = Форма.Объект;
	
	Если Форма.ПрименениеУСН
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам") Тогда
		
		ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
		ДанныеСтроки = Новый Структура("СуммаПлатежа, РасходыУСН, РаспределятьРасходыУСН, СчетУчетаРасчетовСКонтрагентом");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТЧ);
		ЗаполнитьОтражениеСтрокиВУСННаСервере(ДанныеСтроки, ПараметрыУСН);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьТекстРасходыУСН(Форма)
	
	Если Не Форма.ПрименениеУСН Или Форма.ПрименениеУСНДоходы  Тогда
		Форма.ТекстРасходыУСН = "";
		Возврат;
	КонецЕсли;
	
	Объект     = Форма.Объект;
	ВалютаРегл = Форма.ВалютаРегламентированногоУчета;
	СтрФорматСумм = "Л=ru; ЧРД=,; ЧРГ=' '; ЧН=0; ЧГ=3,0";
	
	СуммаРасходыВсего = Объект.СуммаДокумента;
	Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета Тогда
		СуммаРасходыВсего = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаРасходыВсего,
			Объект.ВалютаДокумента,   Форма.ВалютаРегламентированногоУчета,
			Форма.КурсДокумента,      1,
			Форма.КратностьДокумента, 1);
	КонецЕсли;
	
	ТекстРасходы = "";
	
	СуммаРасходыНеПринимаемые = СуммаРасходыВсего - Объект.Графа7_УСН;
	Если СуммаРасходыВсего = 0 Тогда
		ТекстРасходы = НСтр("ru = 'Сумма документа не указана'");
	ИначеЕсли СуммаРасходыНеПринимаемые = 0 Тогда
		ТекстРасходы = НСтр("ru = 'Расходы принимаются полностью'");
	ИначеЕсли Объект.Графа7_УСН = 0 Тогда
		ТекстРасходы = НСтр("ru = 'Принимаемые расходы отсутствуют'");
	Иначе
		ТекстРасходы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Непринимаемые расходы: %1 %2'"),
			Формат(СуммаРасходыНеПринимаемые, СтрФорматСумм), ВалютаРегл);
	КонецЕсли;
	
	Форма.ТекстРасходыУСН = ТекстРасходы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиОтраженияВУСН(Форма)
	
	Если Не Форма.ПрименениеУСН Или Форма.ПрименениеУСНДоходы  Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Форма.ВалютаРасходовУСН = Форма.ВалютаРегламентированногоУчета;
	
	Элементы.ГруппаОтражениеВУСН.ОтображатьЗаголовок = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход"));
	Элементы.ГруппаОтражениеВУСН.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход")
		Или (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога")
				И Форма.ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ПрочиеНалогиИСборы")));
	
	Элементы.НДСУСН.Доступность                = (Объект.Графа7_УСН <> 0);
	Элементы.РаспределятьРасходУСН.Доступность = (Объект.Графа7_УСН <> 0);
	
	СформироватьТекстРасходыУСН(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРасшифровкаПлатежа(ВидОперации)
	
	ЕстьРасшифровка = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам"));
	
	Возврат ЕстьРасшифровка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор Тогда
		
		СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		
		Возврат СвойстваПлатежа;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента, ПрименениеУСН,
			|СтатьяДвиженияДенежныхСредств");
		
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		
		Если ПараметрыОбъекта.ВалютаДокумента = ПараметрыОбъекта.ВалютаРегламентированногоУчета Тогда
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Ложь);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		Иначе
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Истина);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		КонецЕсли;
		
		Возврат СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор);
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПустаяСтруктураСвойстваПлатежа()
	
	СвойстваПлатежа = Новый Структура("ДоговорКонтрагента,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаРасчетыВУсловныхЕдиницах,
		|СпособПогашенияЗадолженности, СтавкаНДС,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СтатьяДвиженияДенежныхСредств");
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеПараметрыОбъекта(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Налог, Контрагент, СчетКонтрагента, ВалютаДокумента, СчетКасса");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,   Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,   Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                  Форма.ОплатаВВалюте);
	ПараметрыОбъекта.Вставить("ПрименениеУСН",                  Форма.ПрименениеУСН);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику") Тогда
		ПараметрыОбъекта.Вставить("ПлатежнаяВедомость", Объект.ПлатежнаяВедомость);
		ПараметрыОбъекта.Вставить("Ссылка",             Объект.Ссылка);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДепонентов") Тогда
		ПараметрыОбъекта.Вставить("ВыплатаДепонентов",  Объект.ВыплатаДепонентов);
		ПараметрыОбъекта.Вставить("Ссылка",             Объект.Ссылка);
	КонецЕсли;
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)
	
	Объект = Форма.Объект;
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Организация", Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",   Объект.СчетУчетаРасчетовСКонтрагентом);
	
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежаСервер(Знач ПараметрыПлатежа, Знач ПолучатьДоговор)
	
	СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		ПараметрыПлатежа.ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
	КонецЕсли;
	
	СвойстваПлатежа.ДоговорКонтрагента            = ПараметрыПлатежа.ДоговорКонтрагента;
	СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ПараметрыПлатежа.СтатьяДвиженияДенежныхСредств;
	
	Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах;
		
		Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
			СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СвойстваПлатежа.СтавкаНДС     = УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(ПараметрыПлатежа.ДоговорКонтрагента);
		ИначеЕсли ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
			СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			Если ПараметрыПлатежа.ПрименениеУСН Тогда
				СвойстваПлатежа.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				СвойстваПлатежа.СтавкаНДС = УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(ПараметрыПлатежа.ДоговорКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
	КонецЕсли;
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаСервере
Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатежа)
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
	
	СтрокаПлатежа.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатежа.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатежа, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииКонтрагента(Знач ПараметрыОбъекта, УчетЗарплатыИКадровВоВнешнейПрограмме, ВедетсяУчетРасчетовПоЗарплатеСводно)
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		СвойстваКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.Контрагент,
			"ЮридическоеФизическоеЛицо, ДокументУдостоверяющийЛичность, Наименование, НаименованиеПолное");
		НовыеПараметры.Вставить("ПоДокументу",
			?(СвойстваКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
				СвойстваКонтрагента.ДокументУдостоверяющийЛичность, ""));
		НовыеПараметры.Вставить("Выдать", ?(ПустаяСтрока(СвойстваКонтрагента.НаименованиеПолное),
			СвойстваКонтрагента.Наименование, СвойстваКонтрагента.НаименованиеПолное));
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата, Ложь);
		НовыеПараметры = Новый Структура("Выдать, ПоДокументу",
			ДанныеФизЛица.Представление, ДанныеФизЛица.ПредставлениеДокумента);
		
		Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			НовыеПараметры.Вставить("СуммаДокумента", СуммаВыплаченнойЗарплатыРаботнику(
				ПараметрыОбъекта.Ссылка, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ПлатежнаяВедомость,
				УчетЗарплатыИКадровВоВнешнейПрограмме));
		ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
			Если НЕ УчетЗарплатыИКадровВоВнешнейПрограмме ИЛИ
				УчетЗарплатыИКадровВоВнешнейПрограмме И НЕ ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
				СуммаДокумента    = 0;
				ВыплатаДепонентов = Новый ТаблицаЗначений;
				ЗаполнитьДепонированнымиСуммамиНаСервере(
					ПараметрыОбъекта, СуммаДокумента, ВыплатаДепонентов, УчетЗарплатыИКадровВоВнешнейПрограмме, ВедетсяУчетРасчетовПоЗарплатеСводно);
				НовыеПараметры.Вставить("СуммаДокумента",    СуммаДокумента);
				НовыеПараметры.Вставить("ВыплатаДепонентов", ВыплатаДепонентов);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
		ИЛИ ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику Тогда
		
		ДанныеФизЛица  = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата, Ложь);
		НовыеПараметры = Новый Структура("Выдать, ПоДокументу",
			ДанныеФизЛица.Представление, ДанныеФизЛица.ПредставлениеДокумента);
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		
		ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
			ПараметрыОбъекта.Организация, 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОбъекта.Организация, "ИндивидуальныйПредприниматель"), 
			ПараметрыОбъекта.Дата, Ложь);
		НовыеПараметры = Новый Структура("Выдать, ПоДокументу",
			ДанныеФизЛица.Представление, ДанныеФизЛица.ПредставлениеДокумента);
		
		НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				НовыйСчетКонтрагента, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ВалютаДокумента);
		КонецЕсли;
		
		НовыеПараметры.Вставить("СчетКонтрагента", НовыйСчетКонтрагента);
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииСчетаКассы(Знач ПараметрыОбъекта)
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОбъекта.СчетКасса).Валютный
		И ДокументМожетБытьОформленВВалюте(ПараметрыОбъекта.ВидОперации);
	
	Если НЕ ОплатаВВалюте Тогда
		ПараметрыОбъекта.ВалютаДокумента = ПараметрыОбъекта.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	НовыеПараметрыПриИзмененииОплатаВВалюте(НовыеПараметры, ОплатаВВалюте, ПараметрыОбъекта);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НовыеПараметрыПриИзмененииОплатаВВалюте(НовыеПараметры, ОплатаВВалюте, ПараметрыОбъекта)
	
	НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
			И ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				НовыйСчетОрганизации,
				ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.ВалютаДокумента,
				Истина);
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетОрганизации", НовыйСчетОрганизации);
	НовыеПараметры.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
	НовыеПараметры.Вставить("ОплатаВВалюте",   ОплатаВВалюте);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииВалютыДокумента(Знач ПараметрыОбъекта)
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ОплатаВВалютеНов = ПараметрыОбъекта.ОплатаВВалюте;
	Иначе
		ОплатаВВалютеНов = ПараметрыОбъекта.ВалютаДокумента <> ПараметрыОбъекта.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		Если НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			ОплатаВВалютеТек = ПараметрыОбъекта.ОплатаВВалюте;
			ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалютеНов;
			НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
			ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалютеТек;
		Иначе
			НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		КонецЕсли;
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметрыПриИзмененииОплатаВВалюте(
		НовыеПараметры,
		ОплатаВВалютеНов,
		ПараметрыОбъекта);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыОбъекта.ВалютаДокумента, ПараметрыОбъекта.Дата);
	НовыеПараметры.Вставить("ВалютаДокумента",    ПараметрыОбъекта.ВалютаДокумента);
	НовыеПараметры.Вставить("КурсДокумента",      СтруктураКурса.Курс);
	НовыеПараметры.Вставить("КратностьДокумента", СтруктураКурса.Кратность);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриВыбореВыдать(Знач ПараметрыОбъекта)
	
	ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.ВыдатьФизЛицо, ПараметрыОбъекта.Дата, Ложь);
	
	НовыеПараметры = Новый Структура("Выдать, ПоДокументу",
		ДанныеФизЛица.Представление, ДанныеФизЛица.ПредставлениеДокумента);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаВыплаченнойЗарплатыПоВедомости(Знач ПлатежнаяВедомость, Знач Ссылка, Знач НомерСтроки, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	Ведомости = Новый Массив;
	Ведомости.Добавить(ПлатежнаяВедомость);
	
	ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости);
	
	ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать(, "Ведомость");
	ТаблицаДокументовОплаты.Свернуть("Ведомость",);
	
	ВедомостьОплачена = Ложь;
	Если ТаблицаВедомостей.Количество() = 0 Тогда
		ВедомостьОплачена = Истина;
	КонецЕсли;
	
	Если ВедомостьОплачена Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ %1 полностью оплачен!'"), ПлатежнаяВедомость.Ссылка);
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
		"Колонка", "Корректность", НСтр("ru = 'Ведомость'"), НомерСтроки, НСтр("ru = 'Выплата заработной платы'"), ТекстСообщения);
		ШаблонПоля = "ВыплатаЗаработнойПлаты[%1].Ведомость";
		Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
		СуммаДокумента = 0;
	Иначе
		СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате") + ТаблицаВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач ФизЛицо, Знач ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо);
		
		Если ТаблицаВедомостей.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В выбранной ведомости отсутствуют сведения о заработной плате сотрудника!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			
		Иначе
			ВедомостьОплачена = ТаблицаВедомостей.Количество() = 0;
			
			Если ВедомостьОплачена Тогда
				ТекстСообщения = НСтр("ru = 'По текущей ведомости для выбранного сотрудника заработная плата выплачена ранее!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			Иначе
				СтрокаВедомости = ТаблицаВедомостей[0];
				СуммаДокумента = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаНеВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач ФизЛицо, Знач ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(ФизЛицо);
		
		НевыплаченныеДепоненты = УчетЗарплаты.НевыплаченныеДепоненты(
		Ссылка, Ссылка.Организация, Ссылка.Дата, МассивФизическихЛиц);
		
		Если НевыплаченныеДепоненты.Найти(ПлатежнаяВедомость, "Ведомость") = Неопределено Тогда
			СуммаДокумента = 0;
		Иначе
			СуммаДокумента = НевыплаченныеДепоненты[0].Сумма;
		КонецЕсли;
		
		Если СуммаДокумента = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В выбранной ведомости отсутствуют сведения о депонированной заработной плате сотрудника!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Ведомость");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьОтражениеСтрокиВУСННаСервере(СтрокаТЧ, Знач ПараметрыУСН)
	
	НалоговыйУчетУСН.ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаТЧ, ПараметрыУСН);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДепонированнымиСуммамиНаСервере(Знач Объект, СуммаДокумента, НевыплаченныеДепоненты, УчетЗарплатыИКадровВоВнешнейПрограмме, ВедетсяУчетРасчетовПоЗарплатеСводно)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан получатель!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме И ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
		Возврат;
	Иначе
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(Объект.Контрагент);
		
		НевыплаченныеДепоненты = УчетЗарплаты.НевыплаченныеДепоненты(
			Объект.Ссылка, Объект.Организация, Объект.Дата, МассивФизическихЛиц);
		
		НевыплаченныеДепоненты.Колонки.Сумма.Имя = "СуммаКВыплате";
		СуммаДокумента = НевыплаченныеДепоненты.Итог("СуммаКВыплате");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРасшифровкуПлатежа(СохранитьСтатьюДДС = Истина)
	
	ИнициализироватьСвойстваПлатежаНаСервере();
	Если НЕ СохранитьСтатьюДДС Тогда
		СвойстваПлатежа.Вставить("СтатьяДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
		
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
		ОбновитьИтоги(ЭтотОбъект);
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СчетаУчетаВДокументах.ЗаполнитьСтроки(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаПлатеж),
			"РасшифровкаПлатежа",
			Объект,
			Документы.РасходныйКассовыйОрдер,
			Ложь);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи = Ложь, ПолучатьДоговор = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
			Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента",            Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
				ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
			
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ИспользоватьНачислениеЗарплаты        = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	ИспользоватьФорматОбменаЗУП25         = ПолучитьФункциональнуюОпцию("ИспользоватьФорматОбменаЗУП25",
		Новый Структура("Организация", Объект.Организация));
	ИспользоватьФорматОбменаЗУП30 = УчетЗарплаты.ИспользуетсяОбменСЗУП30(Объект.Организация);
	
	ЕстьУчетПоРаботникам = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам");
	ПроверятьСоответствиеСуммыДокументаИВедомости = ИспользоватьНачислениеЗарплаты
		ИЛИ ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
			И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам");
	
	// Заполнение реквизитов формы
	
	ТекущаяДатаДокумента           = Объект.Дата;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Объект.ПлатежнаяВедомость = Документы.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка();
		Иначе
			Объект.ПлатежнаяВедомость = Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.Заголовок = ?(ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств"),
		НСтр("ru = 'Договор / Статья ДДС'"), НСтр("ru = 'Договор'"));
	
	ЗаголовокСтатьяДДС = НСтр("ru = 'Статья движения ден. средств:'");
	
	НалоговыйПериодСтрока = Объект.НалоговыйПериод;
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		
		Если ЗначениеЗаполнено(Объект.Налог) Тогда
			ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
		КонецЕсли;
		
		ЗначениеПериодаУплаты = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, "Объект.НалоговыйПериод");
		
		Если Параметры.Ключ.Пустая() Тогда
			ЗначениеПериодаУплаты = ?(ЗначениеЗаполнено(ЗначениеПериодаУплаты), ЗначениеПериодаУплаты, НачалоМесяца(Объект.Дата));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "НалоговыйПериодСтрока",
			Формат(ЗначениеПериодаУплаты, "ДФ='MMMM yyyy'"));
	КонецЕсли;
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.СчетКасса) Тогда
		ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетКасса).Валютный;
	Иначе
		ОплатаВВалюте = ЗначениеЗаполнено(Объект.ВалютаДокумента) И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	УстановитьКурсДокумента();
	
	СвойстваПлатежа = Неопределено; // При открытии формы структуру не инициализируем, будет создана при первом обращении.
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// Заполнение свойств элементов формы
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	УстановитьПараметрыВыбораВалютыДокумента(ЭтотОбъект);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	
	// Управление внешним видом формы
	ЗаполнитьВидНалоговогоОбязательстваНаСервере();
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере();
	УправлениеЭлементамиОтраженияВУСНСервер();
	УстановитьВидимостьСтраницНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	Элементы.ГруппаСтраницы.Видимость = (Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
		И Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога
		И Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя
		И Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику);
	
	Если Не Элементы.ГруппаСтраницы.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	// т.к. Расшифровка платежа теперь есть у многих видов операций,
	// сначала отработаем формы-исключения
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаЗарплатыСводно);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаЗарплаты);
	МассивСтраниц.Добавить(Элементы.ГруппаВзносНаличнымиВБанк);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаДепонентов);
	МассивСтраниц.Добавить(Элементы.ГруппаПрочее);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		Элементы.ГруппаВыплатаЗарплатыСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыОперации;
		Если ВедетсяУчетРасчетовПоЗарплатеСводно И УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыСводно;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплаты;
			Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоВедомостям;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		Элементы.ГруппаВыплатаЗарплатыСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыОперации;
		Если ВедетсяУчетРасчетовПоЗарплатеСводно И УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыСводно;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплаты;
			Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВзносНаличнымиВБанк;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаДепонентов;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрочее;
	// а затем тех, кто использует основную форму Расшифровки платежа
	ИначеЕсли ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		Если УчетЗарплатыИКадровВоВнешнейПрограмме И ИспользоватьФорматОбменаЗУП25 Тогда
			Элементы.ГруппаВыплатаЗарплатыСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Иначе
			Элементы.ГруппаВыплатаЗарплатыСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		Если ВедетсяУчетРасчетовПоЗарплатеСводно И УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Элементы.ГруппаВыплатаДепонентовСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаДепонентовПустая;
		Иначе
			Элементы.ГруппаВыплатаДепонентовСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаДепонентовВедомость;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	ПрименениеУСН       = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация,       Объект.Дата);
	ПрименениеУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	ПлательщикЕНВД      = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация,       Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРасчетыВУсловныхЕдиницах = Ложь;
	МассивДоговоров    = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].РасчетыВУсловныхЕдиницах;
			
			ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУсловныхЕдиницах
				ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьРасчетыВУсловныхЕдиницах Тогда
		Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
			ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств()
	
	// Счет кассы
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	
	СчетаИсключений = Новый Массив;
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументы);
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал);
	
	СчетаКассы = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь,, СчетаИсключений);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаКассы)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Если НЕ ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Ложь));
	КонецЕсли;
	Элементы.СчетКасса.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	// Счет банка
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);    // 52
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета); // 55
	
	СчетаБанка = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаБанка)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	// Счет учета (Инкассация, Уплата налога, Прочие)
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);
	
	СчетаИсключений = Новый Массив;
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты);
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты);
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);
	СчетаИнкассации = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь,, СчетаИсключений);
	// Счета инкассации сохраняются в реквизит формы
	МассивСчетовИнкассации = Новый ФиксированныйМассив(СчетаИнкассации);
	
	НовыйМассивПараметров = Новый Массив;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   МассивСчетовИнкассации));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОплатаВВалюте));
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		МассивСчетовУплатыНалогов = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
		МассивСчетовУплатыВзносов = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
		Для Каждого СчетУплатыВзносов Из МассивСчетовУплатыВзносов Цикл
			МассивСчетовУплатыНалогов.Добавить(СчетУплатыВзносов);
		КонецЦикла;
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивСчетовУплатыНалогов));
	Иначе
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
	// Если валюта договора совпадает с валютой документа, то перезаполним курсы взаиморасчетов
	Для каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		
		Если Объект.ВалютаДокумента = СтрокаРасшифровкиПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов
			И НЕ СтрокаРасшифровкиПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			
			СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
			СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыВзаиморасчетов()
	
	Отбор = Новый Структура("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Истина);
	ПлатежиВУсловныхЕдиницах = Объект.РасшифровкаПлатежа.НайтиСтроки(Отбор);
	Для каждого СтрокаПлатеж Из ПлатежиВУсловныхЕдиницах Цикл
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ВидОперацииОбработатьИзменение(Новый Массив);
	
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект);
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере();
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере();
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		УправлениеЭлементамиОтраженияВУСНСервер();
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтотОбъект);
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("ВидОперации");
	
	УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	Если Элементы.Контрагент.ОграничениеТипа.Типы().Количество() = 0 Тогда
		Объект.Контрагент = Неопределено;
		ПричиныИзменения.Добавить("Контрагент");
	Иначе
		Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
		ПричиныИзменения.Добавить("Контрагент");
	КонецЕсли;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Объект.Налог           = Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка();
		Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Объект.СчетОрганизации    = Справочники.БанковскиеСчета.ПустаяСсылка();
	Объект.ПлатежнаяВедомость = Неопределено;
	Объект.СтавкаНДС          = Перечисления.СтавкиНДС.ПустаяСсылка();
	Объект.Основание          = "";
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
		ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
		СвойстваПлатежа  = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
		
		Если Объект.СчетКасса <> ПланыСчетов.Хозрасчетный.КассаОрганизации Тогда
			ВалютаДокументаПриИзмененииСервер(ПричиныИзменения);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход") Тогда
		
		ИзменитьПараметрыВыбораСчетаУчета();
		Объект.СчетУчетаРасчетовСКонтрагентом = Неопределено;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк") Тогда
		
		ИзменитьПараметрыВыбораСчетаБанка(ЭтотОбъект);
		
		НовыйСчетОрганизации   = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(НовыйСчетОрганизации,
			Объект.Организация, ВалютаРегламентированногоУчета, НЕ ОплатаВВалюте);
		Объект.СчетОрганизации = НовыйСчетОрганизации;
		
	ИначеЕсли ОплатаВВалюте И НЕ ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		
		ОплатаВВалюте          = Ложь;
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		УстановитьПараметрыВыбораВалютыДокумента(ЭтотОбъект);
		ВалютаДокументаПриИзмененииСервер(ПричиныИзменения);
		
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("ВидОперации", ПричиныИзменения);
	
	ПерезаполнитьРасшифровкуПлатежа(Ложь);
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьКурсДокумента();
	ПересчитатьСуммыВзаиморасчетов();
	
	ЗаполнитьОтражениеВУСННаСервере(Истина, Ложь);
	УправлениеЭлементамиОтраженияВУСНСервер();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВидОперацииОрганизации(ПричиныИзменения)
	
	ДоступныеОперации = Перечисления.ВидыОперацийРКО.ПолучитьСписокДоступныхЗначений(Новый Структура("Организация", Объект.Организация));
	
	Если ДоступныеОперации.Количество() > 0 
		И ДоступныеОперации.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		
		Объект.ВидОперации = ДоступныеОперации[0].Значение;
		ВидОперацииОбработатьИзменение(ПричиныИзменения);
		ОбновитьУсловноеОформление(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	ИспользоватьФорматОбменаЗУП25 = ПолучитьФункциональнуюОпцию("ИспользоватьФорматОбменаЗУП25",
		Новый Структура("Организация", Объект.Организация));
	ИспользоватьФорматОбменаЗУП30 = УчетЗарплаты.ИспользуетсяОбменСЗУП30(Объект.Организация);
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");
	
	ПроверитьВидОперацииОрганизации(ПричиныИзменения);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			Объект.СчетОрганизации,
			Объект.Организация,
			Объект.ВалютаДокумента,
			Истина);
	Иначе
		Объект.СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ОсновноеПодразделение, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ОсновноеПодразделение;
	КонецЕсли;
	
	Если Объект.ВидОперации  = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("Организация", ПричиныИзменения);
	
	ИнициализироватьСвойстваПлатежаНаСервере(, Истина);
	ПерезаполнитьРасшифровкуПлатежа();
	
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	
	УстановитьПодразделениеДт(ЭтотОбъект);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		УправлениеЭлементамиОтраженияВУСНСервер();
	КонецЕсли;
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииСервер(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("ВалютаДокумента");
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект); // Текущие значения реквизитов объекта
	НовыеПараметры   = НовыеПараметрыПриИзмененииВалютыДокумента(ПараметрыОбъекта); // Возможно, изменятся: курс, кратность, ОплатаВВалюте, банковский счет
	
	Если НовыеПараметры.Свойство("ОплатаВВалюте") Тогда
		ОплатаВВалютеПриИзмененииСервер(ПараметрыОбъекта, НовыеПараметры);
	КонецЕсли;
	
	// перезаполнить значения, даже если валюта осталась та же
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметры, "КурсДокумента, КратностьДокумента");
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	
	ЗаполнитьСчетаУчета("ВалютаДокумента", ПричиныИзменения);
	
	ПерезаполнитьРасшифровкуПлатежа();
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	
	УстановитьЗаголовкиКолонокУСН();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОплатаВВалютеПриИзмененииСервер(ПараметрыОбъекта, НовыеПараметры)
	
	ПараметрыОбъекта.ВалютаДокумента = НовыеПараметры.ВалютаДокумента;
	ПараметрыОбъекта.ОплатаВВалюте   = НовыеПараметры.ОплатаВВалюте;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметры, "ОплатаВВалюте");
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ВалютаДокумента, СчетОрганизации");
	
КонецПроцедуры

&НаСервере
Процедура НалогПриИзмененииНаСервере(ПричиныИзменения, АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК)
	
	АктуализированыРеквизитыПлатежаВБюджет = Ложь;
	Если Не Справочники.ВидыНалоговИПлатежейВБюджет.РеквизитыАктуальны(Объект.Налог, Объект.Дата) Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.ОбновитьПоставляемыеДанныеИзКлассификатора();
		АктуализированыРеквизитыПлатежаВБюджет = Истина;
	КонецЕсли;
	
	НалогОбработатьИзменение(ПричиныИзменения, СтрокаПоискаПоКБК);
	
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере();
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НалогОбработатьИзменение(ПричиныИзменения, СтрокаПоискаПоКБК = "")
	
	ПричиныИзменения.Добавить("Налог");
	
	Документы.РасходныйКассовыйОрдер.УстановитьВидНалоговогоОбязательства(Объект, 
		Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(СтрокаПоискаПоКБК, Объект.Дата));
	
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
	ЗаполнитьВидНалоговогоОбязательстваНаСервере();
	
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога) Тогда
		Объект.НалоговыйПериод = НачалоГода(Объект.Дата);
	Иначе
		Объект.НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(Объект.Дата, -1));
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "НалоговыйПериодСтрока", Формат(Объект.НалоговыйПериод, "ДФ='MMMM yyyy'"));
	
	Если Объект.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		Объект.Контрагент = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Объект.Налог, Объект.Организация, Объект.Дата);
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			КонтрагентОбработатьИзменение(ПричиныИзменения);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("Налог", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура ВидНалоговогоОбязательстваПриИзмененииНаСервере()
	
	Документы.РасходныйКассовыйОрдер.УстановитьВидНалоговогоОбязательства(Объект, ВидНалоговогоОбязательства);
	
	ШаблонКБК = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(Объект.КодБК) + ПлатежиВБюджетКлиентСервер.ШаблонКБК(Объект.КодБК, Истина);
	
	Объект.КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
		ШаблонКБК, ВидНалога, ВидНалоговогоОбязательства, Объект.Дата);
	
	РеквизитыОбъекта = Новый Структура("КодБК, Налог, ВидНалоговогоОбязательства, Организация, Дата, ПоказательПериода");
	РеквизитыОбъекта.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
	ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
	Объект.Основание = ОснованиеПриИзмененииПоказателяПериода(РеквизитыОбъекта);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере();
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	КонтрагентОбработатьИзменение(Новый Массив);
	
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере();
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("Контрагент");
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(
		ПараметрыОбъекта, УчетЗарплатыИКадровВоВнешнейПрограмме,
		ВедетсяУчетРасчетовПоЗарплатеСводно);
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СуммаДокумента");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		Если НЕ УчетЗарплатыИКадровВоВнешнейПрограмме ИЛИ
			УчетЗарплатыИКадровВоВнешнейПрограмме И НЕ ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
			ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СуммаДокумента");
			ПерезаполнитьВыплатуДепонентов(НовыеПараметры.ВыплатаДепонентов);
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетКонтрагента");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Выдать, ПоДокументу");
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		СчетКонтрагентаОбработатьИзменение(ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("Контрагент", ПричиныИзменения);
	
	ПерезаполнитьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииСервер()
	
	СчетКонтрагентаОбработатьИзменение(Новый Массив);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаОбработатьИзменение(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("СчетКонтрагента");
	
	ЗаполнитьСчетаУчета("СчетКонтрагента", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура СчетКассаПриИзмененииСервер()
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("СчетКасса");
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаКассы(ПараметрыОбъекта);
	
	Если НовыеПараметры.ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		ОплатаВВалютеПриИзмененииСервер(ПараметрыОбъекта, НовыеПараметры);
		УстановитьПараметрыВыбораВалютыДокумента(ЭтотОбъект);
		ВалютаДокументаПриИзмененииСервер(ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("СчетКасса", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура СчетУчетаПриИзмененииСервер()
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаРасчетовСКонтрагентом,,, Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	
	ПоляОбъекта.Вставить("Подразделение", "ПодразделениеДт");
	ПоляОбъекта.Вставить("Организация",   Объект.Организация);
	
	ЗначенияСубконто = Новый Соответствие;
	Если Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда
		ЗначенияСубконто.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, 
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	КонецЕсли;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентом, Объект, ПоляОбъекта,, ЗначенияСубконто);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(ИдСтроки)
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.ДоговорКонтрагента",
		Объект,
		СтрокаПлатеж);
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РасходныйКассовыйОрдер,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"РасшифровкаПлатежа",
		СтрокаПлатеж);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, Изменения);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж,    Изменения);
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьВыплатуДепонентов(НевыплаченныеДепоненты)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ВыплатаДепонентов = Объект.ВыплатаДепонентов;
		Для каждого СтрокаТаблицы Из НевыплаченныеДепоненты Цикл
			НайденныеСтроки = ВыплатаДепонентов.НайтиСтроки(Новый Структура("Ведомость", СтрокаТаблицы.Ведомость));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.СуммаКВыплате = СтрокаТаблицы.СуммаКВыплате;
				КонецЦикла;
			Иначе
				НоваяСтрока = ВыплатаДепонентов.Добавить();
				НоваяСтрока.Ведомость = СтрокаТаблицы.Ведомость;
				НоваяСтрока.СуммаКВыплате = СтрокаТаблицы.СуммаКВыплате;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Объект.ВыплатаДепонентов.Очистить();
		Объект.ВыплатаДепонентов.Загрузить(НевыплаченныеДепоненты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТаблицуПоСтавкамНДС(ВходныеПараметры, НомерСекции)
	
	ТаблицаПлатежей = Новый ТаблицаЗначений();
	ТаблицаПлатежей.Колонки.Добавить("Сумма");
	ТаблицаПлатежей.Колонки.Добавить("СуммаНДС");
	ТаблицаПлатежей.Колонки.Добавить("НДС");
	
	Для каждого Позиция Из Объект.РасшифровкаПлатежа Цикл
		СтрокаТаблицы          = ТаблицаПлатежей.Добавить();
		СтрокаТаблицы.Сумма    = Позиция.СуммаПлатежа;
		СтрокаТаблицы.СуммаНДС = Позиция.СуммаНДС;
		СтрокаТаблицы.НДС      = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Позиция.СтавкаНДС);
	КонецЦикла;
	
	ТаблицаПлатежей.Свернуть("НДС", "Сумма, СуммаНДС");
	
	// Подготовка таблицы товаров
	ТаблицаТоваров = Новый Массив();
	
	Для каждого Позиция Из ТаблицаПлатежей Цикл
		СтрокаТаблицыТоваров = Новый СписокЗначений();
		СтрокаТаблицыТоваров = Новый СписокЗначений();
		СтрокаТаблицыТоваров.Добавить(НСтр("ru = 'Выдать:'") + " " + Объект.Выдать + Символы.ПС
			+ НСтр("ru = 'Основание:'") + " " + Объект.Основание); //  1 - Наименование
		СтрокаТаблицыТоваров.Добавить("");                         //  2 - Штрихкод
		СтрокаТаблицыТоваров.Добавить("");                         //  3 - Артикул
		СтрокаТаблицыТоваров.Добавить(НомерСекции);                //  4 - Номер отдела
		СтрокаТаблицыТоваров.Добавить(Позиция.Сумма);              //  5 - Цена за позицию без скидки
		СтрокаТаблицыТоваров.Добавить(1);                          //  6 - Количество
		СтрокаТаблицыТоваров.Добавить("");                         //  7 - Наименование скидки/наценки
		СтрокаТаблицыТоваров.Добавить(0);                          //  8 - Сумма скидки/наценки
		СтрокаТаблицыТоваров.Добавить(0);                          //  9 - Процент скидки/наценки
		СтрокаТаблицыТоваров.Добавить(Позиция.Сумма);              // 10 - Сумма позиции со скидкой
		СтрокаТаблицыТоваров.Добавить(1);                          // 11 - Номер налога (1)
		СтрокаТаблицыТоваров.Добавить(Позиция.СуммаНДС);           // 12 - Сумма налога (1)
		СтрокаТаблицыТоваров.Добавить(Позиция.НДС);                // 13 - Процент налога (1)
		СтрокаТаблицыТоваров.Добавить(0);                          // 14 - Номер налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                          // 15 - Сумма налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                          // 16 - Процент налога (2)
		СтрокаТаблицыТоваров.Добавить("");                         // 17 - Наименование секции форматирования товарной строки
		
		ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
	КонецЦикла;
	
	// Подготовка таблицы оплат
	ТаблицаОплат = Новый Массив();
	
	СтрокаОплаты = Новый СписокЗначений();
	СтрокаОплаты.Добавить(0);
	СтрокаОплаты.Добавить(Объект.СуммаДокумента);
	СтрокаОплаты.Добавить("");
	СтрокаОплаты.Добавить("");
	
	ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Подготовка таблицы общих параметров
	ОбщиеПараметры = Новый Массив();
	ОбщиеПараметры.Добавить(1);                     //  1 - Тип чека
	ОбщиеПараметры.Добавить(Истина);                //  2 - Признак фискального чека
	ОбщиеПараметры.Добавить(Неопределено);          //  3 - Печать на подкладном документе
	ОбщиеПараметры.Добавить(Объект.СуммаДокумента); //  4 - Сумма по чеку без скидок/наценок
	ОбщиеПараметры.Добавить(Объект.СуммаДокумента); //  5 - Сумма по чеку с учетом всех скидок/наценок
	ОбщиеПараметры.Добавить("");                    //  6 - Номер дисконтной карты
	ОбщиеПараметры.Добавить("");                    //  7 - Текст шапки
	ОбщиеПараметры.Добавить("");                    //  8 - Текст подвала
	ОбщиеПараметры.Добавить(0);                     //  9 - Номер смены (для копии чека)
	ОбщиеПараметры.Добавить(0);                     // 10 - Номер чека (для копии чека)
	ОбщиеПараметры.Добавить(0);                     // 11 - Номер документа (для копии чека)
	ОбщиеПараметры.Добавить(0);                     // 12 - Дата документа (для копии чека)
	ОбщиеПараметры.Добавить("");                    // 13 - Имя кассира (для копии чека)
	ОбщиеПараметры.Добавить("");                    // 14 - Пароль кассира
	ОбщиеПараметры.Добавить(0);                     // 15 - Номер шаблона
	ОбщиеПараметры.Добавить("");                    // 16 - Наименование секции форматирования шапки
	ОбщиеПараметры.Добавить("");                    // 17 - Наименование секции форматирования подвала
	
	ВходныеПараметры.Добавить(ТаблицаТоваров);
	ВходныеПараметры.Добавить(ТаблицаОплат);
	ВходныеПараметры.Добавить(ОбщиеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиОтраженияВУСНСервер()
	
	// ТЧ "Расшифровка платежа"
	ПрименениеУСНДоходыРасходы = ПрименениеУСН И НЕ ПрименениеУСНДоходы;
	
	ВидимостьРасходыУСН = ПрименениеУСНДоходыРасходы И УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Объект.ВидОперации);
	ВидимостьРаспределятьРасходы = ВидимостьРасходыУСН И ПлательщикЕНВД;
	
	Элементы.РасшифровкаПлатежаРасходыУСН.Видимость = ВидимостьРасходыУСН;
	Элементы.РасшифровкаПлатежаРаспределятьРасходыУСН.Видимость = ВидимостьРаспределятьРасходы;
	
	Если ПрименениеУСНДоходыРасходы Тогда
		УстановитьЗаголовкиКолонокУСН();
	КонецЕсли;
	
	// Страница "Прочее"
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		Элементы.ГруппаОтражениеВУСН.Видимость   = Ложь;
		Элементы.НДСУСН.Видимость                = Ложь;
		Элементы.РаспределятьРасходУСН.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Элементы.ГруппаОтражениеВУСН.Видимость   = ПрименениеУСНДоходыРасходы;
		Элементы.НДСУСН.Видимость                = Ложь;
		Элементы.РаспределятьРасходУСН.Видимость = Ложь;
	Иначе
		// ПрочийРасход
		Элементы.ГруппаОтражениеВУСН.Видимость   = ПрименениеУСНДоходыРасходы;
		Элементы.НДСУСН.Видимость                = ПрименениеУСНДоходыРасходы;
		Элементы.РаспределятьРасходУСН.Видимость = ПлательщикЕНВД И ПрименениеУСНДоходыРасходы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонокУСН()
	
	Если НЕ ПрименениеУСН И НЕ УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокРасходыУСН = НСтр("ru = 'Расходы УСН'");
	Если ОплатаВВалюте Тогда
		ЗаголовокРасходыУСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расходы УСН, %1'"), ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаРасходыУСН.Заголовок = ЗаголовокРасходыУСН;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтражениеВУСННаСервере(ЗаполнитьСуммы = Истина, ЗаполнитьСодержание = Ложь)
	
	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(ЭтотОбъект);
	
	Если ЗаполнитьСуммы Тогда
		НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Объект, ПараметрыУСН);
	КонецЕсли;
	
	Если ЗаполнитьСодержание И УчетУСН.СодержаниеУСНРедактируетсяПользователем(Объект) Тогда
		НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(Объект, ПараметрыУСН);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НадписьРеквизитыПлатежейВБюджет(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПлатежиВБюджетКлиентСервер.НадписьРеквизитыПлатежейВБюджет(Объект);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияРеквизитовПлатежаВБюджет(ИсправитьОшибки = Ложь, АдресОшибок = "")
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение", ЭтотОбъект);
	
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	
	// Заполним показатели
	Для каждого ОписаниеРеквизита Из ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_РасходныйКассовыйОрдер() Цикл
		РеквизитыПлатежаВБюджет[ОписаниеРеквизита.Ключ] = Объект[ОписаниеРеквизита.Значение];
	КонецЦикла;
	
	// Заполним контекст
	СвойстваКонтекста = Новый Структура;
	СвойстваКонтекста.Вставить("Период",                     Объект.Дата);
	СвойстваКонтекста.Вставить("Организация",                Объект.Организация);
	СвойстваКонтекста.Вставить("СчетПолучателя",             Объект.СчетКонтрагента);
	СвойстваКонтекста.Вставить("Налог",                      Объект.Налог);
	СвойстваКонтекста.Вставить("ВидНалоговогоОбязательства", ВидНалоговогоОбязательства);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Реквизиты",                РеквизитыПлатежаВБюджет);
	ПараметрыФормы.Вставить("СвойстваКонтекста",        СвойстваКонтекста);
	ПараметрыФормы.Вставить("ТолькоПросмотр",           ТолькоПросмотр);
	ПараметрыФормы.Вставить("ИсправитьОшибки",          ИсправитьОшибки);
	ПараметрыФормы.Вставить("АдресИнформацииОбОшибках", АдресОшибок);
	ПараметрыФормы.Вставить("Ссылка",                   Объект.Ссылка);
	
	ОткрытьФорму(
		"ОбщаяФорма.РеквизитыПлатежаВБюджет",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПериодаУплаты(Данные, ПутьРеквизита, ПутьРеквизитаПредставления, Направление = Неопределено)
	
	Если Направление = Неопределено Тогда
		Значение = Объект.Дата;
	Иначе
		Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Данные, ПутьРеквизита);
		Значение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Данные, ПутьРеквизита, Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Данные, ПутьРеквизитаПредставления, Формат(Значение, "ДФ='MMMM yyyy'"));
	
КонецПроцедуры

&НаСервере
Процедура ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере()
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере();
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере();
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере()
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Возврат;
	КонецЕсли;
	
	// Представление порядка отражения в БУ
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СчетУчета", Объект.СчетУчетаРасчетовСКонтрагентом);
	Для НомерСубконто = 1 По 3 Цикл
		СтруктураПараметров.Вставить("Субконто" + НомерСубконто, Объект["СубконтоДт" + НомерСубконто]);
	КонецЦикла;
	СтруктураОтраженияБУ = ПлатежиВБюджетПереопределяемый.ПредставлениеПорядкаОтраженияБУ(СтруктураПараметров);
	
	ПорядокОтраженияБУ         = СтруктураОтраженияБУ.Представление;
	ПорядокОтраженияБУЗаполнен = СтруктураОтраженияБУ.Заполнен;
	
	Элементы.ПорядокОтраженияБУ.ПропускатьПриВводе = СтруктураОтраженияБУ.Заполнен;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидНалоговогоОбязательстваНаСервере()
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Возврат;
	КонецЕсли;
	
	ВидНалоговогоОбязательства = Документы.РасходныйКассовыйОрдер.ПолучитьВидНалоговогоОбязательства(Объект);
	
	СписокВидовНалоговыхОбязательств = Перечисления.ВидыПлатежейВГосБюджет.СписокВидовНалоговыхОбязательств(Объект.Налог, Объект.Дата);
	Если СписокВидовНалоговыхОбязательств.НайтиПоЗначению(ВидНалоговогоОбязательства) = Неопределено Тогда
		СписокВидовНалоговыхОбязательств.Добавить(ВидНалоговогоОбязательства);
	КонецЕсли;
	
	ЗаполнитьСписокВыбора(Элементы.ВидНалоговогоОбязательства, СписокВидовНалоговыхОбязательств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбора(Элемент, СписокДанных)
	
	Элемент.СписокВыбора.Очистить();
	Для каждого ЭлементДанных Из СписокДанных Цикл
		Элемент.СписокВыбора.Добавить(ЭлементДанных.Значение, ЭлементДанных.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораНалогаПоКБК(Знач КодБК)
	
	Возврат Справочники.ВидыНалоговИПлатежейВБюджет.ДанныеВыбораПоКБК(КодБК);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтотОбъект.ИмяФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура ОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РеквизитыДокумента = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_РасходныйКассовыйОрдер();
	Для каждого РеквизитПлатежаВБюджет Из Результат Цикл
		ИмяРеквизита = РеквизитыДокумента[РеквизитПлатежаВБюджет.Ключ];
		Если ИмяРеквизита <> Неопределено Тогда
			Объект[ИмяРеквизита] = РеквизитПлатежаВБюджет.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыОбъекта = Новый Структура("КодБК, Налог, ВидНалоговогоОбязательства, Организация, Дата, ПоказательПериода");
	РеквизитыОбъекта.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
	ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
	Объект.Основание = ОснованиеПриИзмененииПоказателяПериода(РеквизитыОбъекта);
	
	НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	
	// Подключаем ФР
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		//Готовим данные
		ВходныеПараметры    = Новый Массив();
		ВыходныеПараметры   = Неопределено;
		
		ПараметрыУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(ИдентификаторУстройства);
		НомерСекции         = ПараметрыУстройства.НомерСекции;
		
		ПодготовитьТаблицуПоСтавкамНДС(ВходныеПараметры, НомерСекции);
		
		// Печатаем чек.
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
			ИдентификаторУстройства,
			"PrintReceipt",
			ВходныеПараметры,
			ВыходныеПараметры);
		
		Если Результат Тогда
			// Установить полученное значение номера чека реквизиту документа.
			Объект.НомерЧекаККМ = ВыходныеПараметры[1];
			Модифицированность  = Истина;
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Иначе
			ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
				|Чек не напечатан на фискальном регистраторе.
				|Дополнительное описание:
				|%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ВыходныеПараметры[1]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		// Отключаем ФР
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
	Иначе
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйПериод = РезультатЗакрытия;
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "НалоговыйПериодСтрока", Формат(НалоговыйПериод, "ДФ='MMMM yyyy'"));
	Если Объект.НалоговыйПериод <> НалоговыйПериод Тогда
		Объект.НалоговыйПериод = НалоговыйПериод;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОснованиеПриИзмененииПоказателяПериода(Знач РеквизитыОбъекта)
	
	НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
		РеквизитыОбъекта.Налог,
		РеквизитыОбъекта.ВидНалоговогоОбязательства,
		РеквизитыОбъекта.Организация,
		РеквизитыОбъекта.Дата,
		ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(РеквизитыОбъекта.ПоказательПериода));
	
	Возврат НазначениеПлатежа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("СчетКасса");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("СчетБанк");
	ЭлементыСчетов.Добавить("СчетУчета");
	ЭлементыСчетов.Добавить("ГруппаОтражениеВБУ");
	ЭлементыСчетов.Добавить("ГруппаЗадержкаЗарплаты");
	ЭлементыСчетов.Добавить("ДекорацияПорядокОтраженияБУ");
	ЭлементыСчетов.Добавить("ПорядокОтраженияБУ");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	// Вне зависимости от настроек пользователя для отдельных видов операций некоторые счета видны
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Элементы.СчетУчета.Видимость          = Истина;
		Элементы.ГруппаОтражениеВБУ.Видимость = Истина;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам Тогда
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументМожетБытьОформленВВалюте(ВидОперации)
	
	Возврат   ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДепонентов")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаРаботнику")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричинаИзменения, ПричиныИзменения)
	
	Если СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		
		ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
		
		Если ПричиныИзменения.Найти("СчетКасса") <> Неопределено Тогда
			// Если видны счета, то при изменении счета может быть изменена валюта.
			// А изменение валюты в общем случае приводит к установке счета кассы.
			// В конкретном случае этого нужно избежать.
			ПараметрыЗаполнения.КЗаполнению.Удалить("СчетКасса");
		КонецЕсли;
		
		Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			
			// В этом режиме только автоматическое изменение валюты (запрет оформления в иностранной валюте)
			// должен приводить к смене счета.
			
			Если ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
				ПараметрыЗаполнения.КЗаполнению.Удалить("СчетКасса");
			КонецЕсли;
			
		КонецЕсли;
		
		СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"РасходныйКассовыйОрдер",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// ВалютаДокумента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетКасса");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;

	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;

	// СтатьяДвиженияДенежныхСредств
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// ПодразделениеОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;

	// РасшифровкаПлатежа.СпособПогашенияЗадолженности
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;

	// Налог
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Налог") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// СубконтоДт1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДт1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВалютаДокумента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКасса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
		КонецЕсли;

		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
		КонецЕсли;

		// СтатьяДвиженияДенежныхСредств
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// ПодразделениеОрганизации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// РасшифровкаПлатежа.СпособПогашенияЗадолженности
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
		КонецЕсли;

		// Налог
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Налог") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// СубконтоДт1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДт1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

#КонецОбласти
