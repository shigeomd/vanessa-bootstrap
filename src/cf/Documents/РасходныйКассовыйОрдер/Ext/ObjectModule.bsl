#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ВводНаОсновании = Ложь;
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ТипДанныхЗаполнения = Тип("Структура") Тогда
			ЗаполнитьПоСтруктуре(ДанныеЗаполнения);
			ВводНаОсновании = Истина;
		ИначеЕсли ТипДанныхЗаполнения = Тип("Массив") Тогда
			Если ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") 
				ИЛИ ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
				ЗаполнитьПоВедомостям(ДанныеЗаполнения);
				ВводНаОсновании = Истина;
			КонецЕсли;
		ИначеЕсли Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
			ВводНаОсновании = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОплатаВВалюте = ЗначениеЗаполнено(ВалютаДокумента) И ВалютаДокумента <> ВалютаРегламентированногоУчета;
	
	Если НЕ Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИзаймам Тогда
		ОграничениеТипаКонтрагента = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику Тогда
		ОграничениеТипаКонтрагента = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Иначе
		ОграничениеТипаКонтрагента = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	
	Если ОграничениеТипаКонтрагента.Типы().Количество() = 0 Тогда
		Контрагент = Неопределено;
	Иначе
		Контрагент = ОграничениеТипаКонтрагента.ПривестиЗначение(Контрагент);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) И НЕ ВводНаОсновании И ЗначениеЗаполнено(Контрагент)
		И Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		
		РасшифровкаПлатежа[0].ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(
			Новый Структура("ВидОперации, Организация, Контрагент, ДоговорКонтрагента, ОплатаВВалюте, ВалютаДокумента",
				ВидОперации,
				Организация,
				Контрагент,
				ДоговорКонтрагента,
				ОплатаВВалюте,
				ВалютаДокумента));
				
		СчетаУчетаВДокументах.ЗаполнитьСтроки(РасшифровкаПлатежа, "РасшифровкаПлатежа", ЭтотОбъект, Документы.РасходныйКассовыйОрдер);
		
	КонецЕсли;
	
	Если (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИзаймам)
		И ПустаяСтрока(Выдать) И ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "НаименованиеПолное, Наименование");
		Выдать = ?(ПустаяСтрока(ДанныеКонтрагента.НаименованиеПолное), ДанныеКонтрагента.Наименование, ДанныеКонтрагента.НаименованиеПолное);
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику)
		И (ПустаяСтрока(Выдать) ИЛИ ПустаяСтрока(ПоДокументу)) И ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Организация, Контрагент, Дата);
		Если ПустаяСтрока(Выдать) Тогда
			Выдать = ДанныеФизЛица.Представление;
		КонецЕсли;
		Если ПустаяСтрока(ПоДокументу) Тогда
			ПоДокументу = ДанныеФизЛица.ПредставлениеДокумента;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
			Организация, 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИндивидуальныйПредприниматель"), 
			Дата, Ложь);
		Если ПустаяСтрока(Выдать) Тогда
			Выдать = ДанныеФизЛица.Представление;
		КонецЕсли;
		Если ПустаяСтрока(ПоДокументу) Тогда
			ПоДокументу = ДанныеФизЛица.ПредставлениеДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(ЭтотОбъект, ПараметрыУСН);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата              = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный     = Пользователи.ТекущийПользователь();
	ДокументОснование = Неопределено;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Отключаем проверку реквизитов шапки
	
	Если ВидОперации <> Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВозвратПокупателю
		И ВидОперации <> Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИзаймам
		И ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		ИЛИ НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетКонтрагента");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Налог");
	КонецЕсли;
	
	// Отключаем проверку реквизитов ТЧ РасшифровкаПлатежа
	МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сделка");              // Проверяем построчно
	МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов"); // Проверяем построчно
	
	ВидыОперацийСчетаУчета = Документы.РасходныйКассовыйОрдер.ВидыОперацийСчетаУчета();
	Если ВидыОперацийСчетаУчета.Найти(ВидОперации) = Неопределено Тогда
	
		Если ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИзаймам Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Отключаем проверку реквизитов, связанных с выплатой заработной платы
	// Если установлен флаг ручная корректировка - то заполненность полей по заработной плате не проверяем
	
	Если (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
			И НЕ РучнаяКорректировка Тогда
		
		ПроверятьСоответствиеСуммыДокументаИВедомости = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
			ИЛИ ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ВидыСубконто.Найти(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") <> Неопределено;
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
			Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты.Ведомость");
			КонецЕсли;
		Иначе 
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты.Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты.СуммаПлатежа");
			Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
						
		ПроверятьСоответствиеСуммыДокументаИВедомости = Ложь;		
		МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
		МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты.Ведомость");
		МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты.СуммаКВыплате");
		МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа расшифровке платежа
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИзаймам Тогда
		
		Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа и ее расшифровка'");
			ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа и ведомостей на выплату зарплаты
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям		
			И ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
		
		Если ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате") <> СуммаДокумента Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа и общая сумма по платежным ведомостям'");
			ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа и ведомости на выплату зарплаты
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику		
			И ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
		
		Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(Контрагент) Тогда
			
			Ведомости = Новый Массив;
			Ведомости.Добавить(ПлатежнаяВедомость);
			
			ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, Контрагент);
			
			Если ТаблицаВедомостей.Количество() <> 0 Тогда
				СтрокаВедомости  = ТаблицаВедомостей[0];
				СуммаПоВедомости = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			Иначе
				СуммаПоВедомости = 0;
			КонецЕсли;
			
			Если СуммаПоВедомости <> СуммаДокумента Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа (%1 руб.) и сумма по платежной ведомости (%2 руб.)'");
				ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СуммаДокумента, СуммаПоВедомости);
				
				ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка соответствия суммы выплаты депонентов с суммой ведомости
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов И НЕ РучнаяКорректировка Тогда		
		Если (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
			И НЕ ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно"))
			ИЛИ ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
			Если ВыплатаДепонентов.Количество() <> 0 Тогда
				СуммаПоВедомостям = ВыплатаДепонентов.Итог("СуммаКВыплате");
				Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
					Если СуммаДокумента <> СуммаПоВедомостям Тогда
						ШаблонСообщения = НСтр("ru = 'Cумма документа (%1 руб.) не равна сумме по платежным ведомостям (%2 руб.)'");
						ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СуммаДокумента, СуммаПоВедомостям);
						
						ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения); 
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
					КонецЕсли;
				Иначе
					Если СуммаДокумента < СуммаПоВедомостям Тогда
						ШаблонСообщения = НСтр("ru = 'Cумма документа (%1 руб.) не может быть меньше суммы по платежным ведомостям (%2 руб.)'");
						ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СуммаДокумента, СуммаПоВедомостям);
						
						ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения); 
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	// Построчная проверка заполнения отдельных реквизитов ТЧ РасшифровкаПлатежа
	
	ЕстьРасчетыСПоставщикамиПокупателями = ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
	
	ШаблонТекстаСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
		"Колонка", "Заполнение", "%1", "%2", НСтр("ru = 'Расшифровка платежа'"));
	
	Для каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) 
			И СтрокаПлатежа.СуммаПлатежа > 0
			И СтрокаПлатежа.СуммаВзаиморасчетов = 0 Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаСообщения, НСтр("ru = 'Сумма расчетов'"), СтрокаПлатежа.НомерСтроки);
			Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СуммаВзаиморасчетов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
		Если ЕстьРасчетыСПоставщикамиПокупателями
			И СтрокаПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
			И НЕ ЗначениеЗаполнено(СтрокаПлатежа.Сделка) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаСообщения, НСтр("ru = 'Документ расчетов'"), СтрокаПлатежа.НомерСтроки);
			Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].Сделка";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	// Для отдельных видов операций некоторые счета проверяются вне зависимости от настроек пользователя 
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		ПроверяемыеРеквизиты.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам Тогда
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// Переопределим представление сообщения об ошибке для случая,
	// когда имя и синоним реквизита не соответствуют его роли.
	Сообщили = Новый Массив;
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику 
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		Если ПроверяемыеРеквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено 
			И Не ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет затрат'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "СчетУчетаРасчетовСКонтрагентом", "Объект", Отказ);
			Сообщили.Добавить("СчетУчетаРасчетовСКонтрагентом");
			
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, Сообщили);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Обновление реквизитов УСН выполняем всегда для учета возможных изменений в учетной политике.
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	Если НЕ УчетУСН.СодержаниеУСНРедактируетсяПользователем(ЭтотОбъект) Тогда
		Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
	КонецЕсли;
	НалоговыйУчетУСН.ЗаполнитьДоходыРасходыВсего(ЭтотОбъект, ПараметрыУСН);
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации)
		И РасшифровкаПлатежа.Количество() > 0 Тогда
		ДоговорКонтрагента            = РасшифровкаПлатежа[0].ДоговорКонтрагента;
		СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	Иначе
		ДоговорКонтрагента            = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		И ЗначениеЗаполнено(Организация) И НЕ ЗначениеЗаполнено(СчетОрганизации)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			СчетОрганизации, Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.РасходныйКассовыйОрдер.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.РасшифровкаПлатежа, ПараметрыПроведения.Реквизиты, Отказ);
	
	ТаблицаСуммовыхРазниц = УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты, Отказ);
	
	// Структура таблиц для отражения в налоговом учете УСН
	ТаблицаВыплатаЗарплаты    = УчетЗарплаты.ПолучитьТаблицуВыплатыЗарплатыДляУСН(ПараметрыПроведения.ВыплатаЗарплаты);
	ТаблицаВыплатаДепонентов  = УчетЗарплаты.ПолучитьТаблицуВыплатыЗарплатыДляУСН(ПараметрыПроведения.ВыплатаДепонентов);
	СтруктураТаблицУСН        = Новый Структура("ТаблицаРасчетов, ТаблицаВыплатаЗарплаты, ТаблицаВыплатаДепонентов",
		ТаблицаВзаиморасчеты, ТаблицаВыплатаЗарплаты, ТаблицаВыплатаДепонентов);
	
	// Учет доходов и расходов ИП
	ТаблицыОплатыПоставщикуИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыОплатыПоставщику(
		ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты);
	
	ТаблицаУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаУслуг,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты);
	
	СтруктураТаблицМПЗ = Новый Структура("ТаблицаУслуг", ТаблицаУслугИП);
	
	ТаблицыУплатыВзносовФОТИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыУплатыВзносовФОТ(
		ПараметрыПроведения.ПеречислениеНалогаИПТаблица, ПараметрыПроведения.Реквизиты);
	
	ТаблицыВыплатыЗарплатыИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыВыплатыЗарплаты(
		ПараметрыПроведения.ВыплатаЗарплаты, ПараметрыПроведения.Реквизиты);
	
	ТаблицыВыплатыДепонентовИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыВыплатыЗарплаты(
		ПараметрыПроведения.ВыплатаДепонентов, ПараметрыПроведения.Реквизиты);
	
	ТаблицаУплатыСтраховыхВзносовИП = УчетСтраховыхВзносовИП.ПодготовитьТаблицуУплатыСтраховыхВзносов(
		ПараметрыПроведения.РасшифровкаПлатежаПрочее, ПараметрыПроведения.Реквизиты);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетВзаиморасчетов.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(ТаблицаСуммовыхРазниц,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияПеречислениеВыплатаЗарплаты(ЭтотОбъект, ПараметрыПроведения.ВыплатаЗарплаты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияВыплатаДепонентов(ПараметрыПроведения.ВыплатаДепонентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДенежныхСредств.СформироватьДвиженияПрочееСписание(ПараметрыПроведения.РасшифровкаПлатежаПрочее,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияПоНалогамИВзносамСФОТ(ПараметрыПроведения.РасшифровкаПлатежаПрочее,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчеты, Движения, Отказ);
	
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчеты, Движения, Отказ);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОплатаПоставщику(
		ТаблицыОплатыПоставщикуИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(СтруктураТаблицМПЗ,
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаВзаиморасчетов,,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаНДФЛ(
		ПараметрыПроведения.ПеречислениеНалогаИПТаблица,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаВзносовФОТ(
		ТаблицыУплатыВзносовФОТИП.СписокВзносов, ТаблицыУплатыВзносовФОТИП.СписокПереплат,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВыплатаЗарплаты(
		ТаблицыВыплатыЗарплатыИП.СписокВыплат,
		ТаблицыВыплатыЗарплатыИП.СписокПереплат,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВыплатаЗарплаты(
		ТаблицыВыплатыДепонентовИП.СписокВыплат,
		ТаблицыВыплатыДепонентовИП.СписокПереплат,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Учет страховых взносов ИП
	УчетСтраховыхВзносовИП.СформироватьДвиженияУплатаСтраховыхВзносов(ТаблицаУплатыСтраховыхВзносовИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкиДвиженийДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
КонецПроцедуры 

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт
	
	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);
	
	СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

// Заполняет документ на основании массива ведомостей на выплату зарплаты
//
Процедура ЗаполнитьПоВедомостям(ПлатежныеВедомости)
	
	ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	
	ПлатежнаяВедомость = ПлатежныеВедомости[0];
	
	ДокументОснование  = ПлатежнаяВедомость;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежнаяВедомость, "Организация");
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	
	ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, ПлатежныеВедомости);
	
	ТаблицаВедомостей.Свернуть("Ведомость", "СуммаКВыплате, КомпенсацияЗаЗадержкуЗарплаты");
	
	Если ТаблицаВедомостей.Количество() = 0 Тогда
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Если ПлатежныеВедомости.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'По выбранным документам нет сумм к выплате!'");
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 нет сумм к выплате!'"), ПлатежнаяВедомость.Ссылка);
			КонецЕсли;
		Иначе
			Если ПлатежныеВедомости.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Выбранные документы полностью оплачены!'");
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 полностью оплачен!'"), ПлатежнаяВедомость.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
	Иначе
		Для каждого СтрокаВедомости Из ТаблицаВедомостей Цикл
			
			Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
				Если СтрокаВедомости.Ведомость.ВидМестаВыплаты <> Перечисления.ВидыМестВыплатыЗарплаты.Касса
					И СтрокаВедомости.Ведомость.ВидМестаВыплаты <> Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 оплачивается через банк!'"), СтрокаВедомости.Ведомость);
					ВызватьИсключение ТекстСообщения;
					
				КонецЕсли;
			КонецЕсли;
			
			СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость = СтрокаВедомости.Ведомость;
			СтрокаВедомость.СуммаКВыплате = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате") + ТаблицаВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	РасшифровкаПлатежа.Добавить().СуммаПлатежа = СуммаДокумента;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	ДокументОснование = Основание;
	
	ТипЗначенияОснования = ТипЗнч(Основание);
	
	Если ТипЗначенияОснования <> Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ВалютаВзаиморасчетовДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Основание.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;
	КонецЕсли;
	
	Если ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") 
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеНМА") 
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  Тогда
			ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		КонецЕсли; 
		
		Контрагент         = Основание.Контрагент;
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента);
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента = ВалютаВзаиморасчетовДоговора;
		Иначе
			ВалютаДокумента = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетовДоговора, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			
			СтрокаТаблицыСумм.СуммаПлатежа = Основание.СуммаВознаграждения;
			СтрокаТаблицыСумм.СтавкаНДС    = Основание.СтавкаНДСВознаграждения;
			СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения");
			Если НЕ Основание.СуммаВключаетНДС Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа+СтрокаТаблицыСумм.СуммаНДС;
			КонецЕсли;
		Иначе
			СуммаДокументаОснования = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				Если Основание.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
					СуммаДокументаОснования.ЗаполнитьЗначения(0, "СуммаНДС");
					СуммаДокументаОснования.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");
					Если Основание.УдержатьВознаграждение Тогда 
						СуммаКоррПлатежа = СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.СуммаВознаграждения;
						НоваяКолонкаСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКоррПлатежа,
							СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если НоваяКолонкаСумм <> Неопределено Тогда
							СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаСумм, "СуммаПлатежа");
						КонецЕсли; 
						
						Если НЕ Основание.СуммаВключаетНДС Тогда
							СуммаКоррНДС    = СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДСВознаграждения");
							НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКоррНДС,
								СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
							Если НоваяКолонкаНДС <> Неопределено Тогда
								СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС, "СуммаПлатежа");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДоговорКонтрагента)
							И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "УчетАгентскогоНДС") Тогда
						СуммаКоррНДС    = СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДС");
						НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
							СуммаКоррНДС, СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если НоваяКолонкаНДС <> Неопределено Тогда
							СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС, "СуммаПлатежа");
						КонецЕсли;
					КонецЕсли;
				Иначе
					СуммаДокументаОснования.Очистить();
				КонецЕсли;
			ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				Если НЕ (Основание.Сумма = 0 И Основание.СуммаНДС = 0) Тогда
					Если СуммаДокументаОснования.Количество() = 0 Тогда
						СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
					Иначе
						СтрокаТаблицыСумм = СуммаДокументаОснования[0];
					КонецЕсли;
					
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.Сумма;
					СтрокаТаблицыСумм.СуммаНДС     = СтрокаТаблицыСумм.СуммаНДС     + Основание.СуммаНДС;
					Если НЕ Основание.СуммаВключаетНДС Тогда
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.СуммаНДС;
					КонецЕсли;
				КонецЕсли;
				
				СуммаДокументаОснования.ЗаполнитьЗначения(Основание.СтавкаНДС, "СтавкаНДС");
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,                     "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,      "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
		
		// При вводе на основании устанавливаем режим распределения оплаты "По документу",
		// кроме ввода на основании отчета комитенту - задолженность перед комитентом образуется другими документами
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			ИЛИ НЕ ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.Автоматически, "СпособПогашенияЗадолженности");
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу, "СпособПогашенияЗадолженности");
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "Сделка");
		КонецЕсли;
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			Если ЗначениеЗаполнено(ДоговорКонтрагента)
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "УчетАгентскогоНДС") Тогда
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - СтрокаПлатеж.СуммаНДС;
				СтрокаПлатеж.СуммаНДС     = 0;
				СтрокаПлатеж.СтавкаНДС    = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
			Если ЗначениеЗаполнено(ДоговорКонтрагента)
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах") Тогда
				Если Основание.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
						ВалютаРегламентированногоУчета, ВалютаВзаиморасчетовДоговора,
						1, Основание.КурсВзаиморасчетов, 1, Основание.КратностьВзаиморасчетов);
					СтрокаПлатеж.СуммаНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаНДС,
						ВалютаРегламентированногоУчета, ВалютаВзаиморасчетовДоговора,
						1, Основание.КурсВзаиморасчетов, 1, Основание.КратностьВзаиморасчетов);
				КонецЕсли;
				
				СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
					ВалютаВзаиморасчетовДоговора, ВалютаРегламентированногоУчета,
					СтрокаПлатеж.КурсВзаиморасчетов, 1, СтрокаПлатеж.КратностьВзаиморасчетов, 1);
				СтрокаПлатеж.СуммаНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаНДС,
					ВалютаВзаиморасчетовДоговора, ВалютаРегламентированногоУчета,
					СтрокаПлатеж.КурсВзаиморасчетов, 1, СтрокаПлатеж.КратностьВзаиморасчетов, 1);
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовЗаПосредническиеУслуги, "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоАвансамВыданным,      "СчетУчетаРасчетовПоАвансам");
			
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			Если Основание.УдержатьВознаграждение Тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовСКонтрагентом");
			КонецЕсли;
			
			ТаблицаПлатежей.ЗагрузитьКолонку(
				ТаблицаПлатежей.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовПоАвансам");
			
		ИначеЕсли ТипЗначенияОснования <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоАвансам,     "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж   = РасшифровкаПлатежа[0];
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		ЗаполнитьПоПКО();
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу;
		Контрагент  = Основание.ФизЛицо;
		
		ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
			Основание.Организация, Основание.ФизЛицо, Дата, Ложь);
		Выдать = ДанныеФизЛица.Представление;
		ПоДокументу = ДанныеФизЛица.ПредставлениеДокумента;
		
		ШаблонОснования = "Выдача перерасхода по авансовому отчету %1 от %2";
		ЭтотОбъект.Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования,
			ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Основание.Номер, Истина, Ложь),
			Формат(Основание.Дата, "ДФ=dd.MM.yyyy"));
			
		СуммаАванса = Документы.АвансовыйОтчет.ПолучитьСуммуВыданныхАвансов(Основание);
		ПерерасходАванса = Макс(0, Основание.СуммаДокумента - СуммаАванса);
		СуммаДокумента = ПерерасходАванса;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ на основании приходного кассового ордера
//
Процедура ЗаполнитьПоПКО()
	
	ВидОперацииДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ВидОперации");
	Если ВидОперацииДокументаОснования = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ВалютаДокумента, Дата, Контрагент");
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаОснования = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования      = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;
		
		ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
		Контрагент  = ДокументОснование.Контрагент;
		
		Для каждого СтрокаОснование Из ДокументОснование.РасшифровкаПлатежа Цикл
			
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента      = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов"), Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;
			
			// При вводе на основании устанавливаем режим распределения оплаты "По документу"
			Если ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
				СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
				СтрокаПлатеж.Сделка = ДокументОснование;
			Иначе
				СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			КонецЕсли;
			
			СтрокаПлатеж.СтавкаНДС = СтрокаОснование.СтавкаНДС;
			
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СтрокаОснование.СчетУчетаРасчетовПоАвансам;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СтрокаОснование.СчетУчетаРасчетовСКонтрагентом;
			
		КонецЦикла;
		
		Для Индекс = 0 По ДокументОснование.РасшифровкаПлатежа.Количество() - 1 Цикл
			СтрокаПлатеж    = РасшифровкаПлатежа[Индекс];
			СтрокаОснование = ДокументОснование.РасшифровкаПлатежа[Индекс];
			ВалютаВзаиморасчетовДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОснование.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
				И СтрокаПлатеж.ДоговорКонтрагента = СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
				
				СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа,
					ДокументОснование.ВалютаДокумента, ВалютаВзаиморасчетовДоговора,
					КурсОснования, СтрокаОснование.КурсВзаиморасчетов,
					КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
					ВалютаВзаиморасчетовДоговора, ВалютаДокумента,
					СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
					СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
			Иначе
				Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовДоговора) Тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов  = 1;
					СтрокаПлатеж.КратностьВзаиморасчетов = 1;
				Иначе
					СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
						ВалютаДокумента, ВалютаВзаиморасчетовДоговора,
						КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
						КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
				КонецЕсли;
			КонецЕсли;
			
			ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
			СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
		КонецЦикла;
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ИначеЕсли ВидОперацииДокументаОснования = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКасса).Валютный;
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк;
		СчетУчетаРасчетовСКонтрагентом = ?(ОплатаВВалюте,
			ПланыСчетов.Хозрасчетный.ВалютныеСчета,
			ПланыСчетов.Хозрасчетный.РасчетныеСчета);
		
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(НовыйСчетОрганизации,
			Организация, ВалютаРегламентированногоУчета, НЕ ОплатаВВалюте);
		
		СчетОрганизации = НовыйСчетОрганизации;
		СуммаДокумента  = ДокументОснование.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Иначе
		// Документ НЕ вводится на основании ПКО с другими видами операций
		ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения)
	
	Перем РегистрацияВНалоговомОргане, УровеньБюджета;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	УчетДенежныхСредствБП.ЗаполнитьРеквизитыПлатежногоДокумента(ЭтотОбъект);
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		
		Если ДанныеЗаполнения.Свойство("СчетУчета")
			И ДанныеЗаполнения.Свойство("Субконто1")
			И ДанныеЗаполнения.Свойство("Субконто2")
			И ДанныеЗаполнения.Свойство("Субконто3") Тогда
			
			СчетУчетаРасчетовСКонтрагентом = ДанныеЗаполнения.СчетУчета;
			СубконтоДт1 = ДанныеЗаполнения.Субконто1;
			СубконтоДт2 = ДанныеЗаполнения.Субконто2;
			СубконтоДт3 = ДанныеЗаполнения.Субконто3;
			
			// ВидНалоговогоОбязательства
			НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(ДанныеЗаполнения.СчетУчета,
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["ВидыПлатежейВГосБюджет"]);
			Если НомерСубконто <> 0 Тогда
				ВидНалоговогоОбязательства = ДанныеЗаполнения["Субконто" + НомерСубконто];
			Иначе
				ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			КонецЕсли;
			
			// РегистрацияВНалоговомОргане
			Если НалоговыйУчетОбособленныхПодразделений.УчетВРазрезеНалоговыхОрганов() Тогда
				НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(ДанныеЗаполнения.СчетУчета,
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"]);
				Если НомерСубконто <> 0 Тогда
					РегистрацияВНалоговомОргане = ДанныеЗаполнения["Субконто" + НомерСубконто];
				КонецЕсли;
			КонецЕсли;
			
			// УровниБюджета
			НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(ДанныеЗаполнения.СчетУчета,
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["УровниБюджетов"]);
			Если НомерСубконто <> 0 Тогда
				УровеньБюджета = ДанныеЗаполнения["Субконто" + НомерСубконто];
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Налог) Тогда
				ВидНалога =  РасчетыСБюджетом.ВидНалогаПоСчетуУчета(ДанныеЗаполнения.СчетУчета, Организация, Дата, УровеньБюджета);
				Налог     = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
				Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога) Тогда
					НалоговыйПериод = НачалоГода(Дата);
				Иначе
					НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(Дата, -1));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Налог, Организация, Дата);
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент, ВалютаДокумента);
		КонецЕсли;
		
		ИсточникДанныхКонтекста = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
		ИсточникДанныхКонтекста.Период         = Дата;
		ИсточникДанныхКонтекста.Организация    = Организация;
		ИсточникДанныхКонтекста.Получатель     = Контрагент;
		ИсточникДанныхКонтекста.СчетПолучателя = СчетКонтрагента;
		ИсточникДанныхКонтекста.Налог          = Налог;
		ИсточникДанныхКонтекста.ВидНалоговогоОбязательства  = ВидНалоговогоОбязательства;
		ИсточникДанныхКонтекста.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
		
		РеквизитыОбъекта = ПлатежиВБюджетКлиентСерверПереопределяемый.НовыеРеквизитыПлатежаВБюджет(ЭтотОбъект);
		Документы.РасходныйКассовыйОрдер.ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(
			РеквизитыОбъекта, ИсточникДанныхКонтекста, ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли