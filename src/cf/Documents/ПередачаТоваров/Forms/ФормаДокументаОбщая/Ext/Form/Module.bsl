////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если РасчетыВУЕ Тогда
		//Уведомим об изменениях в правилах переоценки задолженности в у.е. с 2015 года
		НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("ПереоценкаЗадолженностиПоДоговорамВУЕ2015");
	КонецЕсли;	

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары",         "Товары");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		Модифицированность = Истина;
		
		ВидОперацииОбработатьИзменение();
		
		УстановитьЗаголовокФормы();
		УстановитьВидимость();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПередачаТоваров.Форма.ФормаПодбора" Тогда
		ОбработкаВыбораЗаполнить(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РасчетыВУЕ Тогда
		ПодключитьОбработчикОжидания("УведомитьОбИзмененияхПравилПереоценкиЗадолженностейВУЕ", 0.60, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПередачаТоваров";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПередачаТоваров", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект. ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
		УведомитьОбИзмененияхПравилПереоценкиЗадолженностейВУЕ();
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|СчетУчета, СчетПередачи");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Возвратная тара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)
	ЗаполненаВозвратнаяТара = (Объект.ВозвратнаяТара.Количество() > 0);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= Новый Структура(
		"Номенклатура, Количество,
		|СчетУчета");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта	= Новый Структура(
		"Дата, ВидОперации, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ТекущиеДанные.Сумма = Окр(ТекущиеДанные.Цена * ТекущиеДанные.Количество, 2);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ТекущиеДанные.Сумма = Окр(ТекущиеДанные.Цена * ТекущиеДанные.Количество, 2);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ТоварыЗаполнитьПоПродукцииИСпецификации(Команда)

	// Открываем форму подбора.
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("ИмяТаблицы", "Товары");

	ОткрытьФорму("Документ.ПередачаТоваров.Форма.ФормаПодбора", СтруктураПараметровПодбора, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаполнитьПродукциюПоОстаткам(Команда)

	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса	= НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиПоОстаткамЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ЗаполнитьТоварыПоОстаткамНаСервере(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаполнитьПоОтчетуКомитенту(Команда)

	ЗаполнитьТоварыПоОтчетуКомитенту("Заполнить");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДобавитьИзОтчетаКомитенту(Команда)

	ЗаполнитьТоварыПоОтчетуКомитенту("Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаполнитьПоОстаткамСчета002(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Не выбран договор контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса	= НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиПо002Завершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ЗаполнитьТоварыПоОстаткамНаСервере(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодбор(Команда)

	ДействиеПодбор("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПодбор(Команда)

	ДействиеПодбор("ВозвратнаяТара");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ТоварыСчетУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСчетПередачи

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетПередачи");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыОперацийПередачаТоваров.ВПереработку);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СчетУчетаРасчетовПоТаре

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовПоТаре");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЗаполненаВозвратнаяТара", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации(Объект.ВидОперации, СписокВидовДоговоров);
	
	УстановитьПараметрыВыбораДоговора();
	
	Если ДоговорУказан Тогда
		РасчетыВУЕ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
	Иначе
		
		РасчетыВУЕ = Ложь;
		
		Если ЗначениеЗаполнено(Объект.Контрагент)
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменениеНаСервере();
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить(Объект.Товары.Количество(),		  "ГруппаТовары");
	Страницы.Добавить(Объект.ВозвратнаяТара.Количество(), "ГруппаВозвратнаяТара");

	Для Каждого Страница Из Страницы Цикл
		Если Страница.Значение > 0 И Элементы[Страница.Представление].Видимость Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[Страница.Представление];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполненаВозвратнаяТара = (Объект.ВозвратнаяТара.Количество() > 0);
	
	УстановитьЗаголовокФормы();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДоговора()
	
	НовыеПараметры = Новый Массив;
	
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(СписокВидовДоговоров.ВыгрузитьЗначения())));
	
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ИспользоватьВозвратнуюТару = ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ЗаполнитьПоПродукцииИСпецификации.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);
		
	Элементы.ЗаполнитьПродукциюПоОстаткам.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);
	
	Элементы.ЗаполнитьПоОтчетуКомитенту.Видимость   = (Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту);
	Элементы.ДобавитьИзОтчетаКомитенту.Видимость    = (Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту);
	Элементы.ЗаполнитьПоОстаткамСчета002.Видимость  = (Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ТекстЗаголовка = НСтр("ru = 'Передача товаров'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка + " (" + Строка(Объект.ВидОперации) + ")";

КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()

	ОпределитьСписокДоступныхВидовДоговоровПоОперации(Объект.ВидОперации, СписокВидовДоговоров, Объект.ДоговорКонтрагента);
	
	УстановитьПараметрыВыбораДоговора();
	
	Если Объект.Товары.Количество() + Объект.ВозвратнаяТара.Количество() > 0 
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПередачаТоваров.ИзПереработки") Тогда
	
		ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменениеНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()

	ДанныеШапки = Новый Структура("Ссылка, ВидОперации, Дата, Организация, Контрагент, ДоговорКонтрагента");
	
	ЗаполнитьЗначенияСвойств(ДанныеШапки, Объект);
	
	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ДанныеШапки, СписокВидовДоговоров);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеШапки);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ДоговорКонтрагентаОбработатьИзменение();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	РасчетыВУЕ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");

	Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаРасчетов(Объект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратнаяТара");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоОстаткамНаСервере(СчетУчета)

	ДокументОбъект	= РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТоварыПоОстаткам(СчетУчета);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоОтчетуКомитенту(СпособЗаполнения)

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Не выбран контрагент!'"));
		Возврат;
	КонецЕсли;
	
	Если СпособЗаполнения = "Заполнить" И Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса	= НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениеТабличнойЧастиПоОтчетуКомитентаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуВыбораОтчетаКомитента();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоОтчетуКомитентуЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОтчетКомитентуОПродажах = РезультатЗакрытия;
	
	Если НЕ ЗначениеЗаполнено(ОтчетКомитентуОПродажах) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСтрокиТабличнойЧастиНаСервере(ОтчетКомитентуОПродажах);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиТабличнойЧастиНаСервере(ОтчетКомитентуОПродажах)
	
	ДокументОбъект	= РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТоварыПоОснованию(ОтчетКомитентуОПродажах);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
 // Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ИмяТаблицы)

	Если ИмяТаблицы = "Товары" Тогда
		ЕстьЦена = Ложь;
	Иначе // ВозвратнаяТара
		ЕстьЦена = Истина;
	КонецЕсли;

	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(,"По справочнику");

	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в документ %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru ='" + ИмяТаблицы + "'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",       ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("ТипЦен",             Неопределено);
	СтруктураПараметровПодбора.Вставить("Валюта",             ВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", Неопределено);
	СтруктураПараметровПодбора.Вставить("Контрагент",         Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация",        Объект.Организация);
	СтруктураПараметровПодбора.Вставить("Склад",              Объект.Склад);
	СтруктураПараметровПодбора.Вставить("Подразделение",      Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьКоличество",     Истина);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена",           ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("Заголовок",          ЗаголовокПодбора);
	СтруктураПараметровПодбора.Вставить("СписокПодборов",     СписокЗапросов);
	СтруктураПараметровПодбора.Вставить("ИмяТаблицы",         ИмяТаблицы);
	СтруктураПараметровПодбора.Вставить("Услуги",             Ложь);
	СтруктураПараметровПодбора.Вставить("ПоказыватьОстатки",  Истина);
	СтруктураПараметровПодбора.Вставить("ПоказыватьСчетУчета",Истина);

	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", СтруктураПараметровПодбора, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
// Выполняет необходимые действия после подбора
//
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
		
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		
		Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СчетаУчета);
		
	КонецЦикла;

	Если ИмяТаблицы = "ВозвратнаяТара" Тогда
		ЗаполненаВозвратнаяТара = (Объект.ВозвратнаяТара.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выполняет необходимые действия после заполнения по продукции и спецификации
//
Процедура ОбработкаВыбораЗаполнить(ВыбранноеЗначение, ИмяТабличнойЧасти)

	Объект[ИмяТабличнойЧасти].Очистить();

	ТаблицаМатериалов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресМатериаловВХранилище);

	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаМатериалов);

	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти);

	Если ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		ЗаполненаВозвратнаяТара = (Объект.ВозвратнаяТара.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Договор - это изменяемый параметр. Он будет очищен, если его вид не доступен при переданном виде операции.
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации(ВидОперации, СписокВидовДоговоров, Договор = Неопределено)

	СписокВидовДоговоров = Новый СписокЗначений;

	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	КонецЕсли;

	// Проверить текущий договор
	Если ЗначениеЗаполнено(Договор) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидДоговора");
		Если СписокВидовДоговоров.НайтиПоЗначению(ВидДоговора) = Неопределено Тогда
			// Договор не соответствует виду операции
			Договор = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ПередачаТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратнаяТара", СведенияОНоменклатуре);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТоварыПоОстаткамНаСервере(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиПо002Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТоварыПоОстаткамНаСервере(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораОтчетаКомитента()
	
	Отбор	= Новый Структура;
	Отбор.Вставить("Организация",			Объект.Организация);
	Отбор.Вставить("ВидОперации",			ПредопределенноеЗначение("Перечисление.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках"));
	Отбор.Вставить("Контрагент",			Объект.Контрагент);
	Отбор.Вставить("ДоговорКонтрагента",	Объект.ДоговорКонтрагента);
	Отбор.Вставить("Проведен",				Истина);
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТоварыПоОтчетуКомитентуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ОтчетКомитентуОПродажах.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениеТабличнойЧастиПоОтчетуКомитентаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		ОткрытьФормуВыбораОтчетаКомитента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомитьОбИзмененияхПравилПереоценкиЗадолженностейВУЕ()
	
	Если РасчетыВУЕ Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ПереоценкаЗадолженностиПоДоговорамВУЕ2015", , НастройкиПредупреждений);
	КонецЕсли;	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать