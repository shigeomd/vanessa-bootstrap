#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект, Знач СчетаУчета = Неопределено) Экспорт
	
	Если СчетаУчета = Неопределено Тогда
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Объект.Организация, 
			Объект.Контрагент, 
			Объект.ДоговорКонтрагента);
	КонецЕсли;

	Объект.СчетУчетаРасчетовПоТаре = СчетаУчета.СчетУчетаТарыПокупателя;
	
КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьДанныеДляПечатиУниверсальныхПередаточныхДокументов(ДокументОснование) Экспорт
	
	ДанныеДляПечати = Новый Структура("Реквизиты, ТаблицаДокумента");
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументОснование,
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|					ТОГДА Реквизиты.Организация.ЦифровойИндексОбособленногоПодразделения
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения,
	|	Реквизиты.Организация КАК Поставщик,
	|	Реквизиты.Организация.ИНН КАК ИННпоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Грузоотправитель
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	Реквизиты.Контрагент.ИНН КАК ИННпокупателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузополучатель.ОбособленноеПодразделение
	|				И Реквизиты.Грузополучатель.ГоловнойКонтрагент = Реквизиты.Контрагент
	|				И Реквизиты.Грузополучатель.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Грузополучатель
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК ОбособленноеПодразделениеПокупателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Грузополучатель
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент = Реквизиты.Контрагент
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Грузополучатель,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.Представление КАК Основание,
	|	НЕОПРЕДЕЛЕНО КАК Исполнитель,
	|	НЕОПРЕДЕЛЕНО КАК ОтпускПроизвел,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьНомер,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьДата,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьВыдана,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьЧерезКого,
	|	НЕОПРЕДЕЛЕНО КАК ЗаЗаказчикаНаОсновании,
	|	ИСТИНА КАК ЕстьТовары,
	|	ЛОЖЬ КАК СводныйСФКомиссияПоЗакупке,
	|	ЛОЖЬ КАК СводныйСФКомиссияПоПродаже,
	|	"""" КАК АдресДоставки
	|ИЗ
	|	Документ.ПередачаТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Номенклатура КАК Товар,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ТаблицаДокумента.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ТаблицаДокумента.Номенклатура.Артикул
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТоварКод,
	|	ТаблицаДокумента.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ЕСТЬNULL(ТаблицаДокумента.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия
	|ИЗ
	|	Документ.ПередачаТоваров.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[0].Пустой() ИЛИ Результат[1].Пустой() Тогда
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	ТаблицаРеквизиты = Результат[0].Выгрузить();
	ТаблицаДокумента = Результат[1].Выгрузить();
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ДокументОснование);
	
	ДатаНач = Новый Граница(Новый МоментВремени(Реквизиты.ДатаОснования, ДокументОснование), ВидГраницы.Включая);
	ДатаКон = ДатаНач;
	
	ТаблицаСуммСписанияПоДокументам = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(МассивОбъектов, 
		ДатаНач, ДатаКон);
	СтруктураПоиска = Новый Структура("Регистратор, Номенклатура");
	СтруктураПоиска.Регистратор = ДокументОснование;
	
	ТаблицаДокумента.Колонки.Добавить("СтранаПроисхождения",    Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));
	ТаблицаДокумента.Колонки.Добавить("ПредставлениеСтраны",    ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаДокумента.Колонки.Добавить("СтранаПроисхожденияКод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	ТаблицаДокумента.Колонки.Добавить("НомерГТД",         Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
	ТаблицаДокумента.Колонки.Добавить("ПредставлениеГТД", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	ТаблицаДокумента.Колонки.Добавить("Акциз", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	ТаблицаДокумента.Колонки.Добавить("Цена",        ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДокумента.Колонки.Добавить("Всего",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДокумента.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДокумента.Колонки.Добавить("СуммаНДС",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДокумента.Колонки.Добавить("СтавкаНДС",   Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		СтруктураПоиска.Номенклатура = СтрокаДокумента.Товар;
		
		НайденныйСтроки = ТаблицаСуммСписанияПоДокументам.НайтиСтроки(СтруктураПоиска);
		Если НайденныйСтроки.Количество() <> 0 Тогда
			СтрокаСуммСписания = НайденныйСтроки[0];
			СтрокаДокумента.Цена        = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			СтрокаДокумента.Всего       = СтрокаДокумента.Цена * СтрокаДокумента.Количество;
			СтрокаДокумента.СуммаБезНДС = СтрокаДокумента.Всего;
		КонецЕсли;
		СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		СтрокаДокумента.Акциз     = НСтр("ru = 'без акциза'");
		
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("Реквизиты",        ТаблицаРеквизиты);
	ДанныеДляПечати.Вставить("ТаблицаДокумента", ТаблицаДокумента);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов() Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка) КАК СчетФактура,
	|	ПередачаТоваров.Дата КАК Дата,
	|	ПередачаТоваров.Номер КАК Номер,
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК Руководитель,
	|	НЕОПРЕДЕЛЕНО КАК ГлавныйБухгалтер,
	|	ИСТИНА КАК СчетФактураБезНДС,
	|	ЛОЖЬ КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ИСТИНА КАК УдалитьПрефиксыИзНомера,
	|	ИСТИНА КАК ЭтоСчетФактураВыданный,
	|	ИСТИНА КАК ВыводитьСуммуБезНДС,
	|	ПередачаТоваров.Ссылка КАК ДокументОснование,
	|	1 КАК НомерСтроки,
	|	ПередачаТоваров.Контрагент,
	|	ПередачаТоваров.ДоговорКонтрагента,
	|	"""" КАК КППСчетаФактуры,
	|	ПередачаТоваров.Дата КАК ДатаСведений
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Ссылка В(&МассивОбъектов)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// Возвращаяет массив документов, для которых выписка счетов-фактур не требуется
//
Функция ПолучитьДокументыСчетФактураНеТребуются(МассивДокументов) Экспорт
	
	ДокументыСчетФактураНеТребуются = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат ДокументыСчетФактураНеТребуются
	КонецЕсли;
	
	Для Каждого Документ Из МассивДокументов Цикл
		ДокументыСчетФактураНеТребуются.Добавить(Документ);
	КонецЦикла;
	
	Возврат ДокументыСчетФактураНеТребуются;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// При вводе на основании счета на оплату и поступления товаров и услуг, 
	// открывается форма, содержащая только ТЧ Товары или только ТЧ Услуги, если
	// у документа-основания заполнена только соответствующая таблица.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыДокумента = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыДокумента[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту, "ФормаДокументаОбщая");
	
	Возврат ФормыДокумента;

КонецФункции

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту;
	КонецЕсли;
	
	Возврат ВидОперации;

КонецФункции

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчета") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту
			И НЕ СчетаУчета.СчетУчетаЯвляетсяЗабалансовым Тогда
			
			СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение; // 002
			
		Иначе
			
			Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
				СтрокаТабличнойЧасти.СчетУчета = СчетаУчета.СчетУчета;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			
			Если ЗначениеЗаполнено(СчетаУчета.СчетПередачи) Тогда
				СтрокаТабличнойЧасти.СчетПередачи = БухгалтерскийУчетВызовСервераПовтИсп.СчетУчетаМатериалыПереданныеВПереработку(СчетаУчета.СчетПередачи);
			КонецЕсли;
			
		ИначеЕсли ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
			
			Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
				СтрокаТабличнойЧасти.СчетПередачи = СчетаУчета.СчетУчета;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			СтрокаТабличнойЧасти.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаДокумента,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ПередачаТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если НЕ УчетнаяПолитика.Существует(Выборка.Организация, Выборка.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Выборка.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
		КоэффициентРуб = 1;
	Иначе
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			Выборка.ВалютаВзаиморасчетов, Выборка.Период);
		КоэффициентРуб = СтруктураКурсаВзаиморасчетов.Курс / СтруктураКурсаВзаиморасчетов.Кратность;
	КонецЕсли;
	Если Выборка.ВалютаВзаиморасчетов = Выборка.ВалютаДокумента Тогда
		КоэффициентВзаиморасчетов = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			Выборка.ВалютаДокумента, Выборка.Период);
		КоэффициентВзаиморасчетов = (СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность) / КоэффициентРуб;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КоэффициентВзаиморасчетов", КоэффициентВзаиморасчетов);
	Запрос.УстановитьПараметр("КоэффициентРуб",	КоэффициентРуб);
	Запрос.УстановитьПараметр("СинонимТовары",	НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимТара",	НСтр("ru = 'Возвратная тара'"));
	Запрос.УстановитьПараметр("СодержаниеПроводкиПередачаТоваровВПереработку",	НСтр("ru = 'Передача материалов для переработки на сторону'"));
	Запрос.УстановитьПараметр("СодержаниеПроводкиПередачаТоваровКомитенту",		НСтр("ru = 'Передача товаров комитенту'"));
	Запрос.УстановитьПараметр("СодержаниеПроводкиПередачаТары",					НСтр("ru = 'Передача тары'"));
	
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаТаблицыДокумента(НомераТаблиц)
		+ ТекстЗапросаСписаниеТоваров(НомераТаблиц)
		+ ТекстЗапросаСписаниеТары(НомераТаблиц)
		+ ТекстЗапросаКорректировкаСтоимостиТары(НомераТаблиц)
		+ ТекстЗапросаНДС(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();
	
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаТара", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.СчетПередачи
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ПередачаТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТара.Ссылка,
	|	ТаблицаТара.НомерСтроки,
	|	ТаблицаТара.Номенклатура,
	|	ТаблицаТара.Количество,
	|	ТаблицаТара.Цена,
	|	ТаблицаТара.Сумма,
	|	ВЫРАЗИТЬ(ТаблицаТара.Сумма * &КоэффициентВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаВзаиморасчетов,
	|	ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТара.Сумма * &КоэффициентВзаиморасчетов КАК ЧИСЛО(15, 2))) * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ТаблицаТара.СчетУчета
	|ПОМЕСТИТЬ ТаблицаТара
	|ИЗ
	|	Документ.ПередачаТоваров.ВозвратнаяТара КАК ТаблицаТара
	|ГДЕ
	|	ТаблицаТара.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц)
	
	НомераТаблиц.Вставить("СписаниеТоваровРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеТоваровТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту)
	|			ТОГДА Реквизиты.Контрагент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту)
	|			ТОГДА &СодержаниеПроводкиПередачаТоваровКомитенту
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачаТоваров.ВПереработку)
	|			ТОГДА &СодержаниеПроводкиПередачаТоваровВПереработку
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	Документ.ПередачаТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.Ссылка.Дата КАК Период,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Ссылка.Склад КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	0 КАК Себестоимость,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Ссылка.ПодразделениеОрганизации КАК КорПодразделение,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТовары.СчетПередачи
	|	КОНЕЦ КАК КорСчетСписания,
	|	ТаблицаТовары.Ссылка.Контрагент КАК КорСубконто1,
	|	ТаблицаТовары.Ссылка.ДоговорКонтрагента КАК КорСубконто2,
	|	ТаблицаТовары.Номенклатура КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры) КАК ВидКорСубконто2,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура) КАК ВидКорСубконто3,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	(ТаблицаТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачаТоваров.ВПереработку)
	|			ИЛИ ТаблицаТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачаТоваров.ПередачаТоваровКомитенту))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСписаниеТары(НомераТаблиц)
	
	НомераТаблиц.Вставить("СписаниеТарыРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеТарыТаблицаТара", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	&СодержаниеПроводкиПередачаТары КАК Содержание
	|ИЗ
	|	Документ.ПередачаТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвратнаяТара"" КАК ИмяСписка,
	|	&СинонимТара КАК СинонимСписка,
	|	ТаблицаТара.Ссылка.Дата КАК Период,
	|	ТаблицаТара.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТара.СчетУчета,
	|	ТаблицаТара.Номенклатура,
	|	ТаблицаТара.Ссылка.Склад КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	0 КАК Себестоимость,
	|	ТаблицаТара.Количество,
	|	ТаблицаТара.СуммаРуб КАК СуммаРуб,
	|	ТаблицаТара.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаТара.Ссылка.ПодразделениеОрганизации КАК КорПодразделение,
	|	ТаблицаТара.Ссылка.СчетУчетаРасчетовПоТаре КАК КорСчетСписания,
	|	ТаблицаТара.Ссылка.Контрагент КАК КорСубконто1,
	|	ТаблицаТара.Ссылка.ДоговорКонтрагента КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры) КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом
	|ИЗ
	|	ТаблицаТара КАК ТаблицаТара
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаКорректировкаСтоимостиТары(НомераТаблиц)
	
	НомераТаблиц.Вставить("КорректировкаСтоимостиТарыРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("КорректировкаСтоимостиТарыТаблицаТара", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоТаре,
	|	&СодержаниеПроводкиПередачаТары КАК Содержание
	|ИЗ
	|	Документ.ПередачаТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвратнаяТара"" КАК ИмяСписка,
	|	ТаблицаТара.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТара.Номенклатура,
	|	ТаблицаТара.Количество,
	|	ТаблицаТара.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаТара.СуммаРуб КАК СуммаРуб
	|ИЗ
	|	ТаблицаТара КАК ТаблицаТара
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц)

	НомераТаблиц.Вставить("РеквизитыНДС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТоварыНДС",    НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ДействиеНДСВСтоимостиТоваров.НеИзменять) КАК НДСвСтоимостиТоваров,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетСписанияНДС,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияНДС1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияНДС2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияНДС3,
	|	Реквизиты.Склад.ТипСклада КАК ТипСкладаОтправителя,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладПолучатель,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ПустаяСсылка) КАК ТипСкладаПолучателя,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеПолучатель,
	|	Реквизиты.Контрагент
	|ИЗ
	|	Документ.ПередачаТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.СчетУчета КАК СчетУчета,
	|	ТаблицаТовары.СчетПередачи КАК СчетУчетаПолучатель,
	|	ТаблицаТовары.Ссылка.Склад КАК СкладПолучатель,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка) КАК НовыйСпособУчетаНДС
	|ИЗ
	|	Документ.ПередачаТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачаТоваров.ВПереработку)";
		
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Накладная на отпуск материалов на сторону (М-15)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М15";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на отпуск материалов на сторону (М-15)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Товарная накладная (ТОРГ-12)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'Товарная накладная (ТОРГ-12)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Транспортная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьТранспортнойНакладной";
	КомандаПечати.Идентификатор = "ТранспортнаяНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Транспортная накладная'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Товарно-транспортная накладная (1-Т)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьТТН";
	КомандаПечати.Идентификатор = "ТТН";
	КомандаПечати.Представление = НСтр("ru = 'Товарно-транспортная накладная (1-Т)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Универсальный передаточный документ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ (УПД)'");
	КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиУниверсальныхПередаточныхДокументов";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Передача товаров""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М15") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М15", "М-15 (Накладная)",
			ПечатьМ15(МассивОбъектов, ОбъектыПечати), , "ОбщийМакет.ПФ_MXL_М15");
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12", "ТОРГ-12 (Товарная накладная)",
			ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати), , "ОбщийМакет.ПФ_MXL_ТОРГ12");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры


// Функция формирует табличный документ унифицированной формы М-15
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ15(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ПолеСверху			= 10;
	ТабДокумент.ПолеСнизу			= 10;
	ТабДокумент.ПолеСправа			= 0;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_М15";
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева          = 0;
	Иначе
		ТабДокумент.ПолеСлева          = 10;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаТоваров.Ссылка КАК Ссылка,
	|	ПередачаТоваров.Номенклатура КАК Номенклатура,
	|	ПередачаТоваров.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПередачаТоваров.Количество КАК КоличествоПринято,
	|	ПередачаТоваров.СчетУчета.Представление КАК СчетУчета,
	|	ПередачаТоваров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВложенныйЗапрос
	|ИЗ
	|	Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПередачаТоваров.Ссылка КАК Ссылка,
	|	ПередачаТоваров.Номер КАК НомерДокумента,
	|	ПередачаТоваров.Дата КАК ДатаДокумента,
	|	ПередачаТоваров.Дата КАК ДатаНач,
	|	ПередачаТоваров.Дата КАК ДатаКон,
	|	ПередачаТоваров.Дата КАК ДатаСоставления,
	|	ПередачаТоваров.Организация КАК Организация,
	|	ПередачаТоваров.Склад КАК Склад,
	|	ПередачаТоваров.Склад.Наименование КАК СкладНаименование,
	|	ПередачаТоваров.ВалютаДокумента КАК ВалютаДокумента,
	|	ПередачаТоваров.Контрагент.Код КАК КонтрагентКод,
	|	ПередачаТоваров.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПередачаТоваров.Контрагент КАК Контрагент,
	|	ПередачаТоваров.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПередачаТоваров.ДоговорКонтрагента.Наименование КАК ДоговорКонтрагентаНаименование,
	|	ПередачаТоваров.ДоговорКонтрагента.Номер КАК ДоговорКонтрагентаНомер,
	|	ПередачаТоваров.ДоговорКонтрагента.Дата КАК ДоговорКонтрагентаДата
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПередачаТоваров.Дата,
	|	ПередачаТоваров.Ссылка
	|ИТОГИ
	|	МИНИМУМ(ДатаНач),
	|	МАКСИМУМ(ДатаКон)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Ссылка.Номер КАК НомерДокумента,
	|	ВложенныйЗапрос.Ссылка.Дата КАК ДатаДокумента,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ВложенныйЗапрос.Номенклатура.Артикул
	|		ИНАЧЕ ВложенныйЗапрос.Номенклатура.Код
	|	КОНЕЦ КАК НоменклатурныйНомер,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.КоличествоПринято КАК Количество,
	|	ВложенныйЗапрос.СчетУчета КАК СчетУчета
	|ИЗ
	|	ВложенныйЗапрос КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ДатаДокумента,
	|	НомерСтроки";

	Результат = Запрос.ВыполнитьПакет();
	ШапкаИтоги= Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВсеСтроки = Результат[2].Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ВсеСтроки.Индексы.Добавить("Ссылка,НомерСтроки");

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М15");
	
	СтруктураПоиска = Новый Структура();
	
	Если ШапкаИтоги.Следующий() Тогда
	
		ДатаНач = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаНач), ШапкаИтоги.ДатаНач, '00010101');
		ДатаКон	= ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаКон), ШапкаИтоги.ДатаКон, '00010101');
	
		ТаблицаСуммСписанияПоДокументам = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(МассивОбъектов, ДатаНач, ДатаКон);
		
		ПервыйДокумент = Истина;

		Шапка = ШапкаИтоги.Выбрать();
		Пока Шапка.Следующий() Цикл

			Если Не ПервыйДокумент Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;

			ПервыйДокумент = Ложь;
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

			// Выводим общие реквизиты шапки
			СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаСоставления);

			ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");

			ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
			ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДокумента, Истина, Ложь);

			СведенияОКонтрагенте     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаСоставления);
			ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
			ОбластьМакетаШапка.Параметры.КонтрагентНаименование = ПредставлениеКонтрагента;
			ОбластьМакетаШапка.Параметры.Получатель             = ПредставлениеКонтрагента;
			ОбластьМакетаШапка.Параметры.Основание              = Шапка.ДоговорКонтрагентаНаименование;

			ТабДокумент.Вывести(ОбластьМакетаШапка);

			Запрос.УстановитьПараметр("ТекущийДокумент", Шапка.Ссылка);
			СтрокиТоваров = ВсеСтроки.НайтиСтроки(Новый Структура("Ссылка", Шапка.Ссылка));

			// Выводим заголовок таблицы
			ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

			НомерСтраницы   = 1;
			КоличествоСтрок = СтрокиТоваров.Количество();

			// Инициализация итогов в документе
			ИтогоКоличествоПринято = 0;
			ИтогоСуммаБезНДС       = 0;
			ИтогоСуммаНДС          = 0;
			ИтогоВсегоСНДС         = 0;
			НомерСтроки            = 0;

			// Выводим многострочную часть документа
			Для Каждого ТекущаяСтрока Из СтрокиТоваров Цикл
			
				НомерСтроки = НомерСтроки + 1;
				
				СтруктураПоиска.Вставить("Регистратор", 	Шапка.Ссылка);
				СтруктураПоиска.Вставить("Номенклатура", 	ТекущаяСтрока.Номенклатура);
				НайденныеСтроки = ТаблицаСуммСписанияПоДокументам.НайтиСтроки(СтруктураПоиска);
				
				Количество = ТекущаяСтрока.Количество;
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					ВсегоСНДС = 0;
					Цена = 0;
				Иначе
					СтрокаСуммСписания = НайденныеСтроки[0];
					Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
					ВсегоСНДС = Окр(Цена * Количество, 2, 1);
				КонецЕсли;
				
				ОбластьМакетаСтрока.Параметры.Заполнить(ТекущаяСтрока);
				
				ОбластьМакетаСтрока.Параметры.СуммаСНДС           = ВсегоСНДС;
				ОбластьМакетаСтрока.Параметры.СуммаБезНДС         = ВсегоСНДС;
				ОбластьМакетаСтрока.Параметры.СуммаНДС            = 0;
				ОбластьМакетаСтрока.Параметры.Цена                = Цена;
				ОбластьМакетаСтрока.Параметры.ТоварНаименование   = СокрЛП(ТекущаяСтрока.ТоварНаименование);
				ОбластьМакетаСтрока.Параметры.КоррСчет            = СокрЛП(ТекущаяСтрока.СчетУчета);
				
				// Проверим вывод
				СтрокаСПодвалом = Новый Массив;
				Если НомерСтроки = 1 Тогда
					СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
				КонецЕсли;                                                   // помещаться заголовок
				СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
				Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал); // помещаться и подвал документа
				КонецЕсли;

				Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

					Если КоличествоСтрок > 1 Тогда

						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

						// Очистим итоги по странице
						ИтогоМестНаСтранице       = 0;
						ИтогоКоличествоНаСтранице = 0;
						ИтогоСуммаНаСтранице      = 0;
						ИтогоНДСНаСтранице        = 0;
						ИтогоСуммаСНДСНаСтранице  = 0;

						// Выведем заголовок таблицы
						НомерСтраницы = НомерСтраницы + 1;
						ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
						ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

					КонецЕсли;

				КонецЕсли;

				ТабДокумент.Вывести(ОбластьМакетаСтрока);

				ИтогоКоличествоПринято = ИтогоКоличествоПринято + Количество;
				ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС;
				ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

			КонецЦикла;

			// Выводим итоги по документу
			ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);

			ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;

			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
			Руководитель  = Руководители.РуководительПредставление;
			Бухгалтер     = Руководители.ГлавныйБухгалтерПредставление;

			ОбластьМакетаПодвал.Параметры.ФИОРуководителя   		= Руководитель;
			ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера 		= Бухгалтер;
			ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя	= Руководители.РуководительДолжностьПредставление;
			ОбластьМакетаПодвал.Параметры.ДолжностьГлавБух		= Руководители.ГлавныйБухгалтерДолжностьПредставление;
			
			Если Шапка.Склад <> Справочники.Склады.ПустаяСсылка() Тогда 
				МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Шапка.Склад, Шапка.ДатаДокумента);
				ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, МОЛ, Шапка.ДатаДокумента);
				ОбластьМакетаПодвал.Параметры.ДолжностьКладовщика = ДанныеФизЛица.Должность;
				ОбластьМакетаПодвал.Параметры.ФИОКладовщика = ДанныеФизЛица.Представление;
			КонецЕсли;

			ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
			ОбластьМакетаПодвал.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоВсегоСНДС, Шапка.ВалютаДокумента);
			ОбластьМакетаПодвал.Параметры.ИтогНДС = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(0, Шапка.ВалютаДокумента);

			ТабДокумент.Вывести(ОбластьМакетаПодвал);

			// В табличном документе зададим имя области, в которую был
			// выведен объект. Нужно для возможности печати покомплектно.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

		КонецЦикла;
	
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	ТабДокумент  = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ПолеСверху			= 0;
	ТабДокумент.ПолеСнизу			= 0;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_ТОРГ12";
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСправа		   = 0;
	Иначе
		ТабДокумент.ПолеСлева          = 10;
		ТабДокумент.ПолеСправа		   = 10;
	КонецЕсли;


	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТОРГ12");

	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаТоваров.Ссылка КАК Ссылка,
	|	ПередачаТоваров.Номенклатура КАК Номенклатура,
	|	ПередачаТоваров.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ПередачаТоваров.Количество) КАК Количество,
	|	МИНИМУМ(ПередачаТоваров.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВложенныйЗапрос
	|ИЗ
	|	Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПередачаТоваров.Ссылка,
	|	ПередачаТоваров.Номенклатура,
	|	ПередачаТоваров.Номенклатура.ЕдиницаИзмерения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПередачаТоваров.Ссылка,
	|	ПередачаТоваров.Номер КАК НомерДокумента,
	|	ПередачаТоваров.Дата КАК ДатаДокумента,
	|	ПередачаТоваров.Дата КАК ДатаНач,
	|	ПередачаТоваров.Дата КАК ДатаКон,
	|	ПередачаТоваров.Организация КАК Организация,
	|	ПередачаТоваров.Организация КАК ЮрФизЛицо,
	|	ПередачаТоваров.Организация КАК Поставщик,
	|	ПередачаТоваров.Организация КАК Контрагент,
	|	ПередачаТоваров.Организация КАК Руководители,
	|	ВЫБОР
	|		КОГДА ПередачаТоваров.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ПередачаТоваров.Контрагент
	|		ИНАЧЕ ПередачаТоваров.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ПередачаТоваров.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ПередачаТоваров.Организация
	|		ИНАЧЕ ПередачаТоваров.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ПередачаТоваров.Контрагент КАК Покупатель,
	|	ПередачаТоваров.Контрагент КАК Плательщик,
	|	ПередачаТоваров.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПередачаТоваров.ДоговорКонтрагента.Представление КАК Основание,
	|	ПередачаТоваров.ВалютаДокумента,
	|	ПередачаТоваров.ПодразделениеОрганизации,
	|	1 КАК Кратность,
	|	ПередачаТоваров.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	ПередачаТоваров.ДоговорКонтрагента.Номер КАК ОснованиеНомер
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПередачаТоваров.Дата,
	|	ПередачаТоваров.Ссылка
	|ИТОГИ
	|	МИНИМУМ(ДатаНач),
	|	МАКСИМУМ(ДатаКон)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Ссылка.Номер КАК НомерДокумента,
	|	ВложенныйЗапрос.Ссылка.Дата КАК ДатаДокумента,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ВложенныйЗапрос.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ВложенныйЗапрос.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК ТоварКод,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Представление КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Представление КАК ВидУпаковки,
	|	1 КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.Количество КАК Количество
	|ИЗ
	|	ВложенныйЗапрос КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	НомерСтроки";

	Результат = Запрос.ВыполнитьПакет();
	ШапкаИтоги = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВсеСтроки = Результат[2].Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ВсеСтроки.Индексы.Добавить("Ссылка,НомерСтроки");

	Если ШапкаИтоги.Следующий() Тогда

		ДатаНач = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаНач), ШапкаИтоги.ДатаНач, '00010101');
		ДатаКон = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаКон), ШапкаИтоги.ДатаКон, '00010101');
		
		ТаблицаСуммСписанияПоДокументам = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(МассивОбъектов, ДатаНач, ДатаКон);
		СтруктураПоиска = Новый Структура("Регистратор, Номенклатура");

		ПервыйДокумент = Истина;
		Шапка = ШапкаИтоги.Выбрать();
		Пока Шапка.Следующий() Цикл

			Если Не ПервыйДокумент Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;

			ПервыйДокумент = Ложь;
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

			// Выводим общие реквизиты шапки
			СведенияОПоставщике       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента);
			СведенияОГрузоотправителе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
			СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
			СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);

			ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
			ОбластьМакетаШапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДокумента, Истина, Ложь);
			ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
			
			Основание = Шапка.Основание;
			Если 0 = Найти(Основание, "№") и 0 = Найти(Основание, " от ") Тогда
				Если ЗначениеЗаполнено(Шапка.ОснованиеНомер) Тогда 
					Основание = Основание + " №" + Шапка.ОснованиеНомер;
				КонецЕсли;
				Если ЗначениеЗаполнено(Шапка.ОснованиеДата) Тогда 
					Основание = Основание + " от " + Формат(Шапка.ОснованиеДата, "ДЛФ=ДД");
				КонецЕсли;
				ОбластьМакетаШапка.Параметры.Основание = Основание;
			КонецЕсли;

			Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
				ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике);
			Иначе
				ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
					СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			КонецЕсли;

			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузополучателе,"НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");

			ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике);
			ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе);

			// Выводим всевозможные коды
			ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
			ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
			ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";

			ТабДокумент.Вывести(ОбластьМакетаШапка);

			Запрос.УстановитьПараметр("ТекущийДокумент", Шапка.Ссылка);

			Если Шапка.ВалютаДокумента = Шапка.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				// Документ оформлен в валюте взаиморасчетов
				Запрос.УстановитьПараметр("Курс", 1);
				Запрос.УстановитьПараметр("Кратность", 1);
			Иначе
				// Документ оформлен в валюте регламентированного учета
				Запрос.УстановитьПараметр("Курс", 1);
				Запрос.УстановитьПараметр("Кратность", 1);
			КонецЕсли;

			// Инициализация счетчика страниц
			НомерСтраницы = 1;

			// Инициализация итогов по странице
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаНаСтранице      = 0;
			ИтогоНДСНаСтранице        = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;

			// Инициализация итогов по документу
			ИтогоКоличество = 0;
			ИтогоСуммаСНДС  = 0;
			ИтогоСумма      = 0;
			ИтогоНДС        = 0;

			// Таблитца товаров по текущему документу
			ТоварыДокумента = ВсеСтроки.НайтиСтроки(Новый Структура("Ссылка", Шапка.Ссылка));

			// Инициализация счетчика строк
			НомерСтроки     = 0;
			КоличествоСтрок = ТоварыДокумента.Количество();

			// Выводим заголовок многострочной части
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

			// Выводим многострочную часть документа
			Для Каждого ВыборкаСтрок Из ТоварыДокумента Цикл

				НомерСтроки = НомерСтроки + 1;

				ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);

				ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;

				ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
				ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";

				ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);

				СтруктураПоиска.Вставить("Регистратор", Шапка.Ссылка);
				СтруктураПоиска.Вставить("Номенклатура", ВыборкаСтрок.Номенклатура);

				НайденныйСтроки = ТаблицаСуммСписанияПоДокументам.НайтиСтроки(СтруктураПоиска);
				Если НайденныйСтроки.Количество() = 0 Тогда
					СуммаСНДС = 0;
					Цена = 0;
				Иначе
					СтрокаСуммСписания = НайденныйСтроки[0];
					Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
					СуммаСНДС = Цена * ВыборкаСтрок.Количество;
				КонецЕсли;

				Количество  = ВыборкаСтрок.Количество;
				СуммаНДС    = 0;
				СуммаБезНДС = СуммаСНДС - СуммаНДС;

				ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
				ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
				ОбластьМакетаСтрока.Параметры.СтавкаНДС   = "";
				ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
				ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);

				// Проверим вывод
				СтрокаСПодвалом = Новый Массив;
				Если НомерСтроки = 1 Тогда
					СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
				КонецЕсли;                                                   // помещаться заголовок
				СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
				СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
				Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
					СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
				КонецЕсли;

				Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

					Если КоличествоСтрок > 1 Тогда

						// Выводим итоги по странице
						ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
						ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
						ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
						ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
						ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);

						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

						// Очистим итоги по странице
						ИтогоМестНаСтранице       = 0;
						ИтогоКоличествоНаСтранице = 0;
						ИтогоСуммаНаСтранице      = 0;
						ИтогоНДСНаСтранице        = 0;
						ИтогоСуммаСНДСНаСтранице  = 0;

						// Выведем заголовок таблицы
						НомерСтраницы = НомерСтраницы + 1;
						ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
						ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

					КонецЕсли;

				КонецЕсли;

				ТабДокумент.Вывести(ОбластьМакетаСтрока);

				// Увеличим итоги по странице
				ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
				ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
				ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
				ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

				// Увеличим итоги по документу
				ИтогоКоличество = ИтогоКоличество + Количество;
				ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
				ИтогоНДС        = ИтогоНДС        + СуммаНДС;
				ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

			КонецЦикла;

			// Выводим итоги по странице
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;

			ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);

			// Выводим итоги по документу в целом
			ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
			ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
			ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
			ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;

			ТабДокумент.Вывести(ОбластьМакетаВсего);

			// Выводим подвал документа

			ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;

			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);

			ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = Руководители.РуководительПредставление;
			ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = Руководители.ГлавныйБухгалтерПредставление;
			ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжностьПредставление;

			ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
			ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);

			ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
			ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
			ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
			ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;

			ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
			ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
			ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);

			ТабДокумент.Вывести(ОбластьМакетаПодвал);

			// В табличном документе зададим имя области, в которую был
			// выведен объект. Нужно для возможности печати покомплектно.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

		КонецЦикла;
		
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыТТН()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(1) КАК Количество,
	|	СписокТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КоличествоТоваров
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПередачаТоваров.Ссылка КАК Ссылка,
	|		ПередачаТоваров.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
	|	ГДЕ
	|		ПередачаТоваров.Ссылка В(&МассивДокументов)) КАК СписокТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокТоваров.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПередачаТоваров.Ссылка,
	|	ПередачаТоваров.Дата,
	|	ПередачаТоваров.Номер,
	|	ПередачаТоваров.Организация,
	|	ВЫБОР
	|		КОГДА ПередачаТоваров.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА ПередачаТоваров.Контрагент
	|		ИНАЧЕ ПередачаТоваров.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ПередачаТоваров.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА ПередачаТоваров.Организация
	|		ИНАЧЕ ПередачаТоваров.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ПередачаТоваров.Организация КАК Руководители,
	|	&ПустойСчет КАК БанковскийСчетОрганизации,
	|	ПередачаТоваров.Контрагент КАК Покупатель,
	|	"""" КАК АдресДоставки,
	|	ПередачаТоваров.Контрагент КАК Контрагент,
	|	ПередачаТоваров.ДоговорКонтрагента.Представление КАК Основание,
	|	ПередачаТоваров.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ПередачаТоваров.ПодразделениеОрганизации,
	|	ВЫРАЗИТЬ(ПередачаТоваров.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200)) КАК ПредставлениеПодразделения,
	|	ПередачаТоваров.ВалютаДокумента КАК ВалютаДокумента,
	|	1 КАК Курс,
	|	1 КАК Кратность,
	|	ЛОЖЬ КАК ЦенаВключаетНДС,
	|	ЕСТЬNULL(КоличествоТоваров.Количество, 0) КАК КоличествоНаименований,
    |   """" КАК Руководитель,
    |   """" КАК ГлавныйБухгалтер,
    |   """" КАК ЗаРуководителяПоПриказу,
    |   """" КАК ЗаГлавногоБухгалтераПоПриказу,
    |   """" КАК ОтпускПроизвел,
    |   """" КАК ДоверенностьНомер,
    |   """" КАК ДоверенностьДата,
    |   """" КАК ДоверенностьВыдана,
    |   """" КАК ДоверенностьЧерезКого
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоТоваров КАК КоличествоТоваров
	|		ПО ПередачаТоваров.Ссылка = КоличествоТоваров.Ссылка
	|ГДЕ
	|	ПередачаТоваров.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПередачаТоваров.Ссылка КАК Ссылка,
	|	ПередачаТоваров.НомерСтроки КАК НомерСтроки,
	|	ПередачаТоваров.Номенклатура,
	|	ПередачаТоваров.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ПередачаТоваров.Номенклатура.Код КАК ТоварКод,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПередачаТоваров.Номенклатура.Артикул
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Артикул,
	|	ПередачаТоваров.Количество,
	|	ПередачаТоваров.Количество КАК КоличествоМест,
	|	ПередачаТоваров.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	ПередачаТоваров.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ПередачаТоваров.Номенклатура.ЕдиницаИзмерения КАК ВидУпаковки,
	|	1 КАК Коэффициент,
	|	1 КАК КоличествоВОдномМесте,
	|	0 КАК Цена,
	|	0 КАК Сумма,
	|	0 КАК СуммаНДС,
	|	0 КАК СуммаВВалютеДокумента,
	|	0 КАК СуммаНДСВВалютеДокумента,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	1 КАК КоэффициентПерерасчета,
	|	ЛОЖЬ КАК Весовой
	|ИЗ
	|	Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
		
	Возврат ТекстЗапроса;

КонецФункции

// Получить данные объектов для печати ТТН
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// Возвращаемое значение:
//  Структура с данными объектов для печати ТТН.
//
Функция ПолучитьДанныеДляПечатнойФормыТТН(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыТТН();
	
	МассивРезультатов 			= Запрос.ВыполнитьПакет();
	РезультатПоШапке			= МассивРезультатов[1];
	РезультатПоТабличнойЧасти 	= МассивРезультатов[2];
	
	СтруктураДанныхДляПечати 	= Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти",
		РезультатПоШапке,
		РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы транспортной накладной
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыТранспортнойНакладной()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПередачаТоваров.Ссылка,
	|	ПередачаТоваров.Дата,
	|	ПередачаТоваров.Номер,
	|	ПередачаТоваров.Организация,
	|	ВЫБОР
	|		КОГДА ПередачаТоваров.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА ПередачаТоваров.Контрагент
	|		ИНАЧЕ ПередачаТоваров.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ПередачаТоваров.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА ПередачаТоваров.Организация
	|		ИНАЧЕ ПередачаТоваров.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ПередачаТоваров.Организация КАК Руководители,
	|	ПередачаТоваров.Контрагент КАК Покупатель,
	|	ПередачаТоваров.Контрагент КАК Контрагент,
	|	ПередачаТоваров.Контрагент КАК ЗаказчикПеревозок,
	|	ПередачаТоваров.ДоговорКонтрагента.Представление КАК Основание
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Ссылка В(&МассивДокументов)";
		
	Возврат ТекстЗапроса;
КонецФункции

// Получить данные объектов для печати транспортной накладной
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// Возвращаемое значение:
//  Структура с данными объектов для печати транспортной накладной.
//
Функция ПолучитьДанныеДляПечатнойФормыТранспортнаяНакладная(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыТранспортнойНакладной();
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация, Валюта", "Контрагент", "Неопределено");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли