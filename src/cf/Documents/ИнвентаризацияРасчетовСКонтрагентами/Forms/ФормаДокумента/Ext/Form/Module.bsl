////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Разделяет табличную часть "Контрагенты" на отдельные таблицы значений
//
&НаСервере
Процедура ЗагрузитьИзДокументаДебиторовИКредиторов()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Контрагент,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.СчетРасчетов,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Подтверждено,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НеПодтверждено,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ИстекСрокДавности,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Подтверждено + ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НеПодтверждено КАК Всего
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСконтрагентами.Контрагенты КАК ИнвентаризацияРасчетовСконтрагентамиКонтрагенты
	|ГДЕ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Ссылка = &Ссылка
	|	И ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ВидЗадолженности = ЗНАЧЕНИЕ(перечисление.ВидыЗадолженности.Дебиторская)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|ВЫБРАТЬ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Контрагент,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.СчетРасчетов,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Подтверждено,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НеПодтверждено,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ИстекСрокДавности,
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Подтверждено + ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.НеПодтверждено КАК Всего
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСконтрагентами.Контрагенты КАК ИнвентаризацияРасчетовСконтрагентамиКонтрагенты
	|ГДЕ
	|	ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.Ссылка = &Ссылка
	|	И ИнвентаризацияРасчетовСконтрагентамиКонтрагенты.ВидЗадолженности = ЗНАЧЕНИЕ(перечисление.ВидыЗадолженности.Кредиторская)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Дебиторы.Загрузить(РезультатыЗапроса[0].Выгрузить());
	Кредиторы.Загрузить(РезультатыЗапроса[1].Выгрузить());

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.КоличествоДебиторов        = Форма.Дебиторы.Количество();
	Форма.КоличествоКредиторов       = Форма.Кредиторы.Количество();
	Форма.ВсегоДебиторы              = Форма.Дебиторы.Итог("Всего");
	Форма.ВсегоКредиторы             = Форма.Кредиторы.Итог("Всего");
	Форма.ПодтвержденоДебиторы       = Форма.Дебиторы.Итог("Подтверждено");
	Форма.ПодтвержденоКредиторы      = Форма.Кредиторы.Итог("Подтверждено");
	Форма.НеПодтвержденоДебиторы     = Форма.Дебиторы.Итог("НеПодтверждено");
	Форма.НеПодтвержденоКредиторы    = Форма.Кредиторы.Итог("НеПодтверждено");
	Форма.ИстекСрокДавностиДебиторы  = Форма.Дебиторы.Итог("ИстекСрокДавности");
	Форма.ИстекСрокДавностиКредиторы = Форма.Кредиторы.Итог("ИстекСрокДавности");

КонецПроцедуры

// Заполняет табличную часть "СчетаРасчетов" значениями по умолчению
//
&НаСервере
Процедура ЗаполнитьСчетаПоУмолчаниюНаСервере()

	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
	НоваяСтрокаСчета = ТаблицаСчетов.Добавить();
	НоваяСтрокаСчета.СчетРасчетов = ПланыСчетов.Хозрасчетный.СпециальныеСчета;
	НоваяСтрокаСчета = ТаблицаСчетов.Добавить();
	НоваяСтрокаСчета.СчетРасчетов = ПланыСчетов.Хозрасчетный.ФинансовыеВложения;
	ТаблицаСчетов.Колонки.Добавить("УчаствуетВРасчетах");
	ТаблицаСчетов.ЗаполнитьЗначения(Истина, "УчаствуетВРасчетах");
	Объект.СчетаРасчетов.Загрузить(ТаблицаСчетов);

КонецПроцедуры

// Заполняет таблицу значений задолженностью указанного вида
&НаСервере
Процедура ЗаполнитьТаблицуДолговНаСервере(ИмяВидаЗадолженности)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",        	  Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", 	  Объект.Организация);
	
	МассивСчетов = Новый Массив();
	Для каждого СтрокаСчета Из Объект.СчетаРасчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.СчетРасчетов) И СтрокаСчета.УчаствуетВРасчетах Тогда
			МассивСчетов.Добавить(СтрокаСчета.СчетРасчетов);
		КонецЕсли; 
	КонецЦикла;
	
	МассивИсключаемыхСчетов = Новый Массив();
	МассивИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.Паи);
	МассивИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.Акции);
	МассивИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДолговыеЦенныеБумаги);
	
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("МассивИсключаемыхСчетов", МассивИсключаемыхСчетов);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	Если ИмяВидаЗадолженности = "Дебиторская" Тогда
		ТекстУсловия = "ХозрасчетныйОстатки.Счет.Вид = Значение(ВидСчета.Активный)
						|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0";
	Иначе 
		ТекстУсловия = "ХозрасчетныйОстатки.Счет.Вид = Значение(ВидСчета.Пассивный)
						|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0";
	КонецЕсли; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ МассивСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетов)
	|	И Хозрасчетный.Ссылка НЕ В (&МассивИсключаемыхСчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = Значение(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = Значение(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Всего
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет В (ВЫБРАТЬ
	|					МассивСчетов.Счет
	|				ИЗ
	|					МассивСчетов), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	(" + ТекстУсловия + ")
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1.Наименование,
	|	ХозрасчетныйОстатки.Счет.Порядок";

	РезультатЗапроса = Запрос.Выполнить();

	Если ИмяВидаЗадолженности = "Кредиторская" Тогда
		Кредиторы.Загрузить(РезультатЗапроса.Выгрузить());
	Иначе 
		Дебиторы.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

// Заполняет таблицы значений как дебиторской, так и кредиторской задолженностью
&НаСервере
Процедура ЗаполнитьВсеДолгиНаСервере()

	Дебиторы.Очистить();
	ЗаполнитьТаблицуДолговНаСервере("Дебиторская");
	Кредиторы.Очистить();
	ЗаполнитьТаблицуДолговНаСервере("Кредиторская");

КонецПроцедуры

// Проверяет готовность документа к автоматическому заполнению данными учета
//
&НаКлиенте
Функция ОбъектГотовКЗаполнению(ИмяВидаЗадолженности = Неопределено)

	Если Объект.СчетаРасчетов.Количество() = 0 И ИмяВидаЗадолженности <> Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не задан список счетов, по которым должен формироваться документ!'");
		ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПолучитьТекстВопроса(ИмяВидаЗадолженности)

	ТекстВопроса = "";
	Если ИмяВидаЗадолженности = Неопределено И (Дебиторы.Количество() > 0 ИЛИ Кредиторы.Количество() > 0) Тогда
		ТекстВопроса = НСтр("ru = 'При изменении значения реквизита все строки задолженностей будут удалены. "
							+ Символы.ПС + "Продолжить?'");
	ИначеЕсли ИмяВидаЗадолженности = "Дебиторская" И Дебиторы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением все строки дебиторской задолженности будут удалены. "
							+ Символы.ПС + "Продолжить?'");
	ИначеЕсли ИмяВидаЗадолженности = "Кредиторская" И Кредиторы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением все строки кредиторской задолженности будут удалены. "
							+ Символы.ПС + "Продолжить?'");
	ИначеЕсли ИмяВидаЗадолженности = "Общая" И Кредиторы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением все строки задолженности контрагентов будут удалены. "
							+ Символы.ПС + "Продолжить?'");
	КонецЕсли;

	Возврат ТекстВопроса;

КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммыВСтроке(СтрокаТаблицы, ИмяТаблицы)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Подтверждено + СтрокаТаблицы.НеПодтверждено;
	Если СтрокаТаблицы.ИстекСрокДавности > СтрокаТаблицы.Всего Тогда

		// ошибка выведется только однократно, после чего поле "ИстекСрокДавности" заполнится правильными данными.
		// В обработке проверки заполнения это проверять не нужно.
		ИндексСтроки = ЭтаФорма[ИмяТаблицы].Индекс(СтрокаТаблицы);
		ИмяПоля = ИмяТаблицы + "[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=") + "].ИстекСрокДавности"; 
		ТекстСообщения = НСтр("ru = 'Сумма с истекшим сроком давности не может быть больше общей суммы задолженности'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяПоля);

		СтрокаТаблицы.ИстекСрокДавности = СтрокаТаблицы.Всего;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФлагиПредседателя(СтрокаТЧ)

	СтрокаПредседателя = ?(СтрокаТЧ <> Неопределено И СтрокаТЧ.Председатель, СтрокаТЧ, Неопределено);

	Для Каждого СтрокаКомиссии Из Объект.ИнвентаризационнаяКомиссия Цикл

		Если СтрокаКомиссии.Председатель И СтрокаПредседателя = Неопределено Тогда
			СтрокаПредседателя = СтрокаКомиссии;
			Продолжить;
		КонецЕсли;

		Если СтрокаКомиссии.Председатель И СтрокаКомиссии <> СтрокаПредседателя Тогда
			СтрокаКомиссии.Председатель = Ложь;
		КонецЕсли;

	КонецЦикла;

	Если СтрокаПредседателя = Неопределено И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяОрганизация 	 = Объект.Организация;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗагрузитьИзДокументаДебиторовИКредиторов();
	Иначе
		Дебиторы.Очистить();
		Кредиторы.Очистить();
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Элементы.ДокументОснованиеВид.СписокВыбора.Очистить();
	Элементы.ДокументОснованиеВид.СписокВыбора.Добавить("Приказ");
	Элементы.ДокументОснованиеВид.СписокВыбора.Добавить("Постановление");
	Элементы.ДокументОснованиеВид.СписокВыбора.Добавить("Распоряжение");

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВсеСчетаУчетаБудутУдаленыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСчетаПоУмолчаниюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТаблицуДебиторскаяЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Дебиторы.Очистить();
		ЗаполнитьТаблицуДолговНаСервере("Дебиторская");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТаблицуКредиторскаяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Кредиторы.Очистить();
		ЗаполнитьТаблицуДолговНаСервере("Кредиторская");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьВсеТаблицыЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьВсеДолгиНаСервере();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьДебиторскуюЗадолженность(Команда)

	Если НЕ ОбъектГотовКЗаполнению("Дебиторская") Тогда
		Возврат;
	КонецЕсли;
	ТекстВопроса = ПолучитьТекстВопроса("Дебиторская");
	
	Если ТекстВопроса = "" Тогда
		ЗаполнитьТаблицуДолговНаСервере("Дебиторская");
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВопросОчиститьТаблицуДебиторскаяЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКредиторскуюЗадолженность(Команда)

	Если НЕ ОбъектГотовКЗаполнению("Кредиторская") Тогда
		Возврат;
	КонецЕсли;

	ТекстВопроса = ПолучитьТекстВопроса("Кредиторская");

	Если ТекстВопроса = "" Тогда
		ЗаполнитьТаблицуДолговНаСервере("Кредиторская");
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВопросОчиститьТаблицуКредиторскаяЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетаПоУмолчанию(Команда)

	Если Объект.СчетаРасчетов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением все счета учета будут удалены. " + Символы.ПС + "Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросВсеСчетаУчетаБудутУдаленыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
	Иначе
		ЗаполнитьСчетаПоУмолчаниюНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссии(Команда)

	ПараметрыФормы = Новый Структура("ЗакрыватьприВыборе,МножественныйВыбор", Ложь, Истина);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элементы.ИнвентаризационнаяКомиссия);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеЗадолженности(Команда)

	Если НЕ ОбъектГотовКЗаполнению("Общая") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = ПолучитьТекстВопроса("Общая");

	Если ТекстВопроса = "" Тогда
		ЗаполнитьВсеДолгиНаСервере();
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВопросОчиститьВсеТаблицыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если НЕ ОбъектГотовКЗаполнению(Неопределено) Тогда
		Объект.Организация = ТекущаяОрганизация;
		Возврат;
	КонецЕсли;

	ТекущаяОрганизация = Объект.Организация;

	Объект.Контрагенты.Очистить();
	Дебиторы.Очистить();
	Кредиторы.Очистить();
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "Дебиторы"

&НаКлиенте
Процедура ДебиторыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПослеУдаления(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Дебиторы.ТекущиеДанные, "Дебиторы");

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыНеПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Дебиторы.ТекущиеДанные, "Дебиторы");

КонецПроцедуры

&НаКлиенте
Процедура ДебиторыИстекСрокДавностиПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Дебиторы.ТекущиеДанные, "Дебиторы");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "Кредиторы"

&НаКлиенте
Процедура КредиторыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КредиторыПослеУдаления(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КредиторыПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Кредиторы.ТекущиеДанные, "Кредиторы");

КонецПроцедуры

&НаКлиенте
Процедура КредиторыНеПодтвержденоПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Кредиторы.ТекущиеДанные, "Кредиторы");

КонецПроцедуры

&НаКлиенте
Процедура КредиторыИстекСрокДавностиПриИзменении(Элемент)

	ПересчитатьСуммыВСтроке(Элементы.Кредиторы.ТекущиеДанные, "Кредиторы");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "ИнвентаризационнаяКомиссия"

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПроверитьФлагиПредседателя(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		ПроверитьФлагиПредседателя(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
		Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.Председатель = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		СтрокиФЛ = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", 
													Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо));
		Если СтрокиФЛ.Количество() > 1 Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru = 'Физическое лицо %физлицо% уже включено в состав комиссии!'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%физлицо%", 
												Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо);
			ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
			Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные.ФизЛицо = Неопределено;
			ТекущийЭлемент = Элементы.ИнвентаризационнаяКомиссияФизЛицо;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокДоВыбора = Объект.ИнвентаризационнаяКомиссия.Количество();
	Для Каждого ВыбранныйЭлемент Из ВыбранноеЗначение Цикл
		
		СтрокиФизЛица = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранныйЭлемент));
		Если СтрокиФизЛица.Количество() = 0 Тогда
			СтрокаФизЛица = Объект.ИнвентаризационнаяКомиссия.Добавить();
			СтрокаФизЛица.ФизЛицо = ВыбранныйЭлемент;
		Иначе
			СтрокаФизЛица = СтрокиФизЛица[0];
			ИндексСтроки = Объект.ИнвентаризационнаяКомиссия.Индекс(СтрокаФизЛица);
			ИмяПоля = "ИнвентаризационнаяКомиссия[" + Формат(ИндексСтроки, "ЧДЦ=0; ЧГ=") + "].ФизЛицо"; 
			ТекстСообщения = НСтр("ru = 'Физическое лицо %1 уже добавлено в список комиссии'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыбранныйЭлемент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ИмяПоля);
		КонецЕсли; 
		Элементы.ИнвентаризационнаяКомиссия.ТекущаяСтрока = СтрокаФизЛица;
	
	КонецЦикла;
	
	Если СтрокДоВыбора = 0 И Объект.ИнвентаризационнаяКомиссия.Количество() > 0 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;  
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если НЕ Отказ Тогда
		Объект.Контрагенты.Очистить();

		Для Каждого СтрокаКонтрагента Из Дебиторы Цикл
			НоваяСтрока = Объект.Контрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтрагента);
			НоваяСтрока.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская");
		КонецЦикла;

		Для Каждого СтрокаКонтрагента Из Кредиторы Цикл
			НоваяСтрока = Объект.Контрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтрагента);
			НоваяСтрока.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская");
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Документы.ИнвентаризацияРасчетовСКонтрагентами.ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты, ЭтаФорма, Истина);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать
