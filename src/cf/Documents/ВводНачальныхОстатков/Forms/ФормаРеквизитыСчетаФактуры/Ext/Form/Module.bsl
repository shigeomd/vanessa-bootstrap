&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда 
		
		Если НЕ ПеренестиВДокумент Тогда
			
			Отказ = Истина;
			
			ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
			Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
			
		ИначеЕсли Не Отказ Тогда
			Отказ = НЕ ПроверитьЗаполнениеНаКлиенте();
			Если Отказ Тогда
				ПеренестиВДокумент = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйСчетФактураПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ЗначенияЗаполнения);
	
	Если Параметры.ЗначенияЗаполнения.Свойство("КорректировочныйСчетФактура") Тогда 
		СтандартныйСчетФактура = Не Параметры.ЗначенияЗаполнения.КорректировочныйСчетФактура;
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным Тогда
		// Для авансов всегда один код, его показывать не требуется.
		Элементы.ГруппаКодВидаОперации.Видимость = Ложь;
		Элементы.ГруппаКодВидаОперацииКорректировочный.Видимость = Ложь;
	Иначе
		ИспользоватьКоды2015 			= Ложь;
		ИспользоватьДополнительныеКоды  = Ложь;
		Если Параметры.ЗначенияЗаполнения.Свойство("ДатаДокумента")
			И Параметры.ЗначенияЗаполнения.ДатаДокумента >= '20150101' Тогда 
			ИспользоватьКоды2015 				= Истина;
			ИспользоватьДополнительныеКоды  	= Истина;
		КонецЕсли;	

		Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный Тогда
			УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
				Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры, 
				Элементы.КодВидаОперации.СписокВыбора,
				ИспользоватьКоды2015,
				ИспользоватьДополнительныеКоды);

			УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
				Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры, 
				Элементы.КодВидаОперацииКорректировочный.СписокВыбора,
				ИспользоватьКоды2015,
				ИспользоватьДополнительныеКоды);
		Иначе
			УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
				Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры, 
				Элементы.КодВидаОперации.СписокВыбора,
				ИспользоватьКоды2015,
				ИспользоватьДополнительныеКоды);

			УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
				Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры, 
				Элементы.КодВидаОперацииКорректировочный.СписокВыбора,
				ИспользоватьКоды2015,
				ИспользоватьДополнительныеКоды);
		КонецЕсли;

	КонецЕсли;
	
	Если ТребуетсяСчетФактура Тогда
		Если НЕ ЗначениеЗаполнено(КодВидаОперации) И Элементы.КодВидаОперации.СписокВыбора.Количество() > 0 Тогда
			КодВидаОперации = Элементы.КодВидаОперации.СписокВыбора[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьНадписьВидаОперации(ЭтотОбъект);
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Реквизиты счета-фактуры (строка %1)'"),
		НомерСтрокиДокумента);
		
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
		
	Если Форма.ТребуетсяСчетФактура Тогда
		Элементы.СтраницаПризнакПредъявлен.ТекущаяСтраница = Элементы.СтраницаТребуетсяСчетФактура;
	Иначе
		Элементы.СтраницаПризнакПредъявлен.ТекущаяСтраница = Элементы.СтраницаНеТребуетсяСчетФактура;
	КонецЕсли;
		
	Если Форма.ПредъявленСФ Или Форма.ТребуетсяСчетФактура Тогда 
		
		Элементы.СтраницыПредъявленСчетФактура.ТекущаяСтраница = Элементы.СтраницаПредъявлен;
		
		Если Форма.СтандартныйСчетФактура Тогда 
			Элементы.СтраницыВидыСчетовФактур.ТекущаяСтраница = Элементы.СтраницаСчетФактураАванс;
			Если Форма.ПродавецДоступен Тогда 
				Элементы.СтраницыПродавец.ТекущаяСтраница = Элементы.СтраницаТребуетсяПродавец;
			Иначе
				Элементы.СтраницыПродавец.ТекущаяСтраница = Элементы.СтраницаНеТребуетсяПродавец;
			КонецЕсли;
		Иначе
			Элементы.СтраницыВидыСчетовФактур.ТекущаяСтраница = Элементы.СтраницаКорректировочныйСчетФактура;
			Если Форма.ПродавецДоступен Тогда 
				Элементы.СтраницыПродавецКорректировка.ТекущаяСтраница = Элементы.СтраницаТребуетсяПродавецКорректировка;
			Иначе 
				Элементы.СтраницыПродавецКорректировка.ТекущаяСтраница = Элементы.СтраницаНеТребуетсяПродавецКорректировка;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе 
		Элементы.СтраницыПредъявленСчетФактура.ТекущаяСтраница = Элементы.СтраницаНеПредъявлен;
	КонецЕсли;
	
	Элементы.НомерИсправления.Доступность	=  Форма.Исправление;
	Элементы.ДатаИсправления.Доступность	=  Форма.Исправление;
	
	Элементы.НомерИсправленияКорректировочного.Доступность	=  Форма.Исправление;
	Элементы.ДатаИсправленияКорректировочного.Доступность	=  Форма.Исправление;
	
	Элементы.НомерИсправленияИсходного.Доступность	=  Форма.УчитыватьИсправлениеИсходногоДокумента;
	Элементы.ДатаИсправленияИсходного.Доступность	=  Форма.УчитыватьИсправлениеИсходногоДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ПеренестиВДокумент = Истина;
	Если ПроверитьЗаполнениеНаКлиенте() Тогда 
		РезультатЗакрытия = ВернутьСтруктуруЗакрытия();
		Закрыть(РезультатЗакрытия);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	ПродавецДоступен = ПродавецДоступен(ПредъявленСФ, ДоговорКонтрагента);
	Если НЕ ПродавецДоступен Тогда
		Продавец = Неопределено;
	КонецЕсли;
  	
	Если НЕ ЗначениеЗаполнено(КодВидаОперации) И Элементы.КодВидаОперации.СписокВыбора.Количество() > 0 Тогда
		// При вводе нового счета-фактуры подставим код вида операции по умолчанию.
		КодВидаОперации = Элементы.КодВидаОперации.СписокВыбора[0].Значение;
		ОтобразитьНадписьВидаОперации(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПродавецДоступен(Знач ПредъявленСФ, Знач ДоговорКонтрагента)

	ПродавецДоступен = ПредъявленСФ
		И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
	Возврат ПродавецДоступен;

КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()

	Отказ = Ложь;
	
	Если ПредъявленСФ Или ТребуетсяСчетФактура Тогда
		Если СтандартныйСчетФактура Тогда 
			Если Не ЗначениеЗаполнено(НомерСФ) Тогда 
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номер счета-фактуры'"));
				Поле = "НомерСФ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);		
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДатаСФ) Тогда 
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
				Поле = "ДатаСФ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);		
			КонецЕсли;
			
			Если Исправление Тогда 
				Если Не ЗначениеЗаполнено(НомерИсправления) Тогда 
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номер исправления счета-фактуры'"));
					Поле = "НомерИсправления";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);		
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(ДатаИсправления) Тогда 
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата исправления счета-фактуры'"));
					Поле = "ДатаИсправления";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);		
				КонецЕсли;	
			КонецЕсли;
			
			Если РазделУчета <> ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным") Тогда
				Если Не ЗначениеЗаполнено(КодВидаОперации) Тогда 
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Код вида операции'"));
					Поле = "КодВидаОперации";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);		
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если Не ЗначениеЗаполнено(НомерСФ) Тогда 
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номер корректировочного счета-фактуры'"));
				Поле = "НомерКорректировочногоСФ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);		
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДатаСФ) Тогда 
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата корректировочного счета-фактуры'"));
				Поле = "ДатаСФ1";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);		
			КонецЕсли;
			
			Если Исправление Тогда 
				Если Не ЗначениеЗаполнено(НомерИсправления) Тогда 
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номер исправления корректировочного счета-фактуры'"));
					Поле = "НомерИсправленияКорректировочного";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);		
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(ДатаИсправления) Тогда 
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата исправления корректировочного счета-фактуры'"));
					Поле = "ДатаИсправленияКорректировочного";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);		
				КонецЕсли;	
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НомерИсходногоДокумента) Тогда 
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Номер корректируемого счета-фактуры'"));
				Поле = "НомерИсходногоДокумента";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДатаИсходногоДокумента) Тогда 
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата корректируемого счета-фактуры'"));
				Поле = "ДатаИсходногоДокумента";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);				
			КонецЕсли;
			
			Если РазделУчета <> ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным") Тогда
				Если Не ЗначениеЗаполнено(КодВидаОперации) Тогда 
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Код вида операции'"));
					Поле = "КодВидаОперации";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);		
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не Отказ;

КонецФункции

&НаКлиенте
Процедура ИсправлениеКорректировочногоПриИзменении(Элемент)
	
	ПриИзмененииПризнакаИсправления();
		
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьИсправлениеИсходногоПриИзменении(Элемент)
	
	Если НЕ УчитыватьИсправлениеИсходногоДокумента Тогда
		НомерИсправленияИсходногоДокумента	= 0;
		ДатаИсправленияИсходногоДокумента	= '00010101';
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеПриИзменении(Элемент)
	
	ПриИзмененииПризнакаИсправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПризнакаИсправления()
	
	Если НЕ Исправление Тогда
		НомерИсправления	= 0;
		ДатаИсправления	= '00010101';
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперации = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(КодВидаОперации);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение",ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		КодВидаОперации = ВыбранныйКод.Значение;
		ОтобразитьНадписьВидаОперации(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВернутьСтруктуруЗакрытия()
	
	Структура = Новый Структура();
	
	Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты() Цикл
		Структура.Вставить(Реквизит.Имя, ЭтаФорма[Реквизит.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ВопросСохранитьИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнениеНаКлиенте() Тогда
			Модифицированность = Ложь;
			ПеренестиВДокумент = Истина;
			РезультатЗакрытия = ВернутьСтруктуруЗакрытия();
			Закрыть(РезультатЗакрытия);
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНадписьВидаОперации(Форма)

	ТекущийКод = Форма.Элементы.КодВидаОперации.СписокВыбора.НайтиПоЗначению(Форма.КодВидаОперации);

	Если ТекущийКод <> Неопределено Тогда
		Форма.НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		Форма.НадписьВидОперации = "";
	КонецЕсли;

КонецПроцедуры
