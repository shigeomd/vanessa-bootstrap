////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УправлениеФормойСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
    	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <МПЗОтгруженные>

&НаКлиенте
Процедура МПЗОтгруженныеПриАктивизацииСтроки(Элемент)

	ДанныеСФУстановитьОтборСтрок();
	ОборотыУстановитьОтборСтрок();
	УправлениеГруппойНДСиИП(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеПередУдалением(Элемент, Отказ)

	СтрокаТаблицы	= Элементы.МПЗОтгруженные.ТекущиеДанные;

	ПодчиненныеСтроки	= Объект.ДанныеПоСФ.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Если ПодчиненныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого Строка Из ПодчиненныеСтроки Цикл
		Объект.ДанныеПоСФ.Удалить(Строка);
	КонецЦикла;
	
	ПодчиненныеСтроки	= Объект.Обороты.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));
	
	Если ПодчиненныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого Строка Из ПодчиненныеСтроки Цикл
		Объект.Обороты.Удалить(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы	= Элементы.МПЗОтгруженные.ТекущиеДанные;
	Если НЕ Копирование Тогда
		СтрокаТаблицы.Валюта			= ВалютаРегламентированногоУчета;
		СтрокаТаблицы.СтатусыПартийУСН	= ПредопределенноеЗначение("Перечисление.СтатусыПартийУСН.НаРеализации");
		СтрокаТаблицы.ОтражениеВУСН		= ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.Принимаются");
	КонецЕсли;
	
	СтрокаТаблицы.Ключ	= Новый УникальныйИдентификатор;
	ДанныеСФУстановитьОтборСтрок();
	ОборотыУстановитьОтборСтрок();

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеСчетУчетаПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.МПЗОтгруженные.ТекущиеДанные;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти();
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
	ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);
	
	ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, ПараметрыДокумента);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
	
	Если ПлательщикНДФЛ Тогда
		Если СтрокаТаблицы.СчетУчета <> ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная") Тогда
			ПодчиненныеСтроки	= Объект.Обороты.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));
			Если ПодчиненныеСтроки.Количество() <> 0 Тогда
				Для каждого Строка Из ПодчиненныеСтроки Цикл
					Объект.Обороты.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;			
		КонецЕсли;
		Если СтрокаТаблицы.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная") Тогда
			ПодчиненныеСтроки	= Объект.ДанныеПоСФ.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));
			Если ПодчиненныеСтроки.Количество() <> 0 Тогда
				Для каждого Строка Из ПодчиненныеСтроки Цикл
					Объект.ДанныеПоСФ.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;			
		КонецЕсли;
		УправлениеГруппойНДСиИП(ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеНоменклатураПриИзменении(Элемент)

	ДанныеСФУстановитьОтборСтрок();
	ОборотыУстановитьОтборСтрок();

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеПокупательПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.МПЗОтгруженные.ТекущиеДанные;

	ПараметрыСтроки = ПоляСтрокиТабличнойЧасти();
	ПараметрыОбъекта = Новый Структура("ВалютаРегламентированногоУчета, Организация",
							ВалютаРегламентированногоУчета, Объект.Организация);

	ПокупательПриИзмененииСервер(ПараметрыСтроки, ПараметрыОбъекта);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеПокупательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы	= Элементы.МПЗОтгруженные.ТекущиеДанные;
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.Покупатель Тогда
		СтрокаТаблицы.ДокументОтгрузки	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеДоговорПокупателяПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.МПЗОтгруженные.ТекущиеДанные;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти();
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, ПараметрыДокумента);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеДоговорПокупателяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы	= Элементы.МПЗОтгруженные.ТекущиеДанные;
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.ДоговорПокупателя Тогда
		СтрокаТаблицы.ДокументОтгрузки	= Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеДокументОтгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.МПЗОтгруженные.ТекущиеДанные;

	Если СтрокаТаблицы.ДоговорПокупателяВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") Тогда

		ПараметрыОтбора	= Новый Структура;
		ПараметрыОтбора.Вставить("ВидОперации",			ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности"));
		ПараметрыОтбора.Вставить("Организация",			Объект.Организация);
		ПараметрыОтбора.Вставить("Контрагент",			СтрокаТаблицы.Покупатель);
		ПараметрыОтбора.Вставить("ДоговорКонтрагента",	СтрокаТаблицы.ДоговорПокупателя);

		ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаВыбора", ПараметрыФормы, Элемент);

	Иначе

		ПараметрыОбъекта	= Новый Структура;
		ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
		ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
		ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
		ПараметрыОбъекта.Вставить("Контрагент",				СтрокаТаблицы.Покупатель);
		ПараметрыОбъекта.Вставить("ДоговорКонтрагента",		СтрокаТаблицы.ДоговорПокупателя);
		ПараметрыОбъекта.Вставить("СчетУчета",				СтрокаТаблицы.СчетУчета);
		ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
		ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.МПЗОтгруженные.Реквизиты.ДокументОтгрузки.Тип");
		ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

		ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
		ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеПоставщикПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.МПЗОтгруженные.ТекущиеДанные;

	ПараметрыСтроки = ПоляСтрокиТабличнойЧасти();
	ПараметрыОбъекта = Новый Структура("ВалютаРегламентированногоУчета, Организация",
							ВалютаРегламентированногоУчета, Объект.Организация);

	ПоставщикПриИзмененииСервер(ПараметрыСтроки, ПараметрыОбъекта);

	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы	= Элементы.МПЗОтгруженные.ТекущиеДанные;
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.Поставщик Тогда
		СтрокаТаблицы.Партия	= Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеДоговорПоставщикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы	= Элементы.МПЗОтгруженные.ТекущиеДанные;
	Если НЕ ВыбранноеЗначение = СтрокаТаблицы.ДоговорПоставщика Тогда
		СтрокаТаблицы.Партия	= Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка	= Ложь;

	СтрокаТаблицы	= Элементы.МПЗОтгруженные.ТекущиеДанные;

	ПараметрыОбъекта	= Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("Контрагент",				СтрокаТаблицы.Поставщик);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",		СтрокаТаблицы.ДоговорПоставщика);
	ПараметрыОбъекта.Вставить("СчетУчета",				СтрокаТаблицы.СчетУчета);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.МПЗОтгруженные.Реквизиты.Партия.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.МПЗОтгруженные.ТекущиеДанные;

	ПараметрыСтроки		= ПоляСтрокиТабличнойЧасти();
	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);

	ЗаполнитьСуммы(СтрокаТаблицы, ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеНДСПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.МПЗОтгруженные.ТекущиеДанные;

	Если СтрокаТаблицы.Валюта = ВалютаРегламентированногоУчета Тогда
		СтрокаТаблицы.ВалютныйНДС = СтрокаТаблицы.НДС;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеСуммаНУПриИзменении(Элемент)

	ЗаполнитьСуммуВР(Элементы.МПЗОтгруженные.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура МПЗОтгруженныеСуммаПРПриИзменении(Элемент)

	ЗаполнитьСуммуВР(Элементы.МПЗОтгруженные.ТекущиеДанные);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ДанныеПоСФ>

&НаКлиенте
Процедура ДанныеПоСФПриИзменении(Элемент)

	ОбновитьИтогиДанныеПоСФ();

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы	= Элементы.ДанныеПоСФ.ТекущиеДанные;
	СтрокаТаблицы.Ключ	= Элементы.ДанныеПоСФ.ОтборСтрок.Ключ;

	ДанныеПоСФИтогКоличество	= ДанныеПоСФИтогКоличество + СтрокаТаблицы.Количество;
	ДанныеПоСФИтогСтоимость		= ДанныеПоСФИтогСтоимость + СтрокаТаблицы.Стоимость;
	ДанныеПоСФИтогНДС			= ДанныеПоСФИтогНДС + СтрокаТаблицы.НДС;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы = Элементы.ДанныеПоСФ.ТекущиеДанные;

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеПоСФИтогКоличество	= ДанныеПоСФИтогКоличество - СтрокаТаблицы.Количество;
	ДанныеПоСФИтогСтоимость		= ДанныеПоСФИтогСтоимость - СтрокаТаблицы.Стоимость;
	ДанныеПоСФИтогНДС			= ДанныеПоСФИтогНДС - СтрокаТаблицы.НДС;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицыМПЗ = Элементы.МПЗОтгруженные.ТекущиеДанные;
	
	СтандартнаяОбработка	= Ложь;

	СтрокаТаблицы	= Элементы.ДанныеПоСФ.ТекущиеДанные;

	ПараметрыОбъекта	= Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("Контрагент",				СтрокаТаблицыМПЗ.Покупатель);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",		СтрокаТаблицыМПЗ.ДоговорПокупателя);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ДанныеПоСФ.Реквизиты.СчетФактура.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФВидЦенностиПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.ДанныеПоСФ.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда

		Если СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги")
			ИЛИ СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.КомандировочныеРасходы")
			ИЛИ СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПосредническиеУслуги")
			ИЛИ СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПредставительскиеРасходы")	Тогда
			
			СтрокаТаблицы.СчетУчетаНДС	= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам");
			
		ИначеЕсли СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НМА") Тогда
			
			СтрокаТаблицы.СчетУчетаНДС	= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам");
			
		ИначеЕсли СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.Оборудование")
			ИЛИ СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОС") Тогда
			
			СтрокаТаблицы.СчетУчетаНДС = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств");
			
		Иначе

			СтрокаТаблицыМПЗ = Элементы.МПЗОтгруженные.ТекущиеДанные;

			СчетаУчета = ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТаблицыМПЗ.Номенклатура);

			Если СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ТаможенныеПлатежи")
				ИЛИ СтрокаТаблицы.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ТаможенныеПлатежиОС") Тогда
				
				СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетНДСТаможни;
				
			Иначе
				
				СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
				
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элементы.ДанныеПоСФ.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСтоимостьПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элементы.ДанныеПоСФ.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСуммаБезНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкаНДС(Элементы.ДанныеПоСФ.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Обороты>

&НаКлиенте
Процедура ОборотыПриИзменении(Элемент)

	ОбновитьИтогиОбороты();

КонецПроцедуры

&НаКлиенте
Процедура ОборотыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы	= Элементы.Обороты.ТекущиеДанные;
	СтрокаТаблицы.Ключ	= Элементы.Обороты.ОтборСтрок.Ключ;

	ОборотыИтогСтоимость = ОборотыИтогСтоимость + СтрокаТаблицы.Сумма;
	ОборотыИтогНДС       = ОборотыИтогНДС + СтрокаТаблицы.НДС;

КонецПроцедуры

&НаКлиенте
Процедура ОборотыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы = Элементы.Обороты.ТекущиеДанные;

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОборотыИтогСтоимость = ОборотыИтогСтоимость + СтрокаТаблицы.Сумма;
	ОборотыИтогНДС       = ОборотыИтогНДС + СтрокаТаблицы.НДС;

КонецПроцедуры

&НаКлиенте
Процедура ОборотыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицыМПЗ = Элементы.МПЗОтгруженные.ТекущиеДанные;
	
	СтандартнаяОбработка	= Ложь;

	СтрокаТаблицы	= Элементы.Обороты.ТекущиеДанные;

	ПараметрыОбъекта	= Новый Структура;
	ПараметрыОбъекта.Вставить("НачалоПериода",			'00010101');
	ПараметрыОбъекта.Вставить("КонецПериода",			КонецДня(Объект.Дата));
	ПараметрыОбъекта.Вставить("Организация",			Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",			"Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",			"Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.Обороты.Реквизиты.Партия.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",	ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоРеквизитам"));

	ПараметрыФормы	= Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежима(Команда)

	ПараметрыНастройкиРежима	= Новый Структура;
	ПараметрыНастройкиРежима.Вставить("ОтражатьВБухгалтерскомУчете",	Объект.ОтражатьВБухгалтерскомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьВНалоговомУчете",		Объект.ОтражатьВНалоговомУчете);
	ПараметрыНастройкиРежима.Вставить("ОтражатьПоСпециальнымРегистрам",	Объект.ОтражатьПоСпециальнымРегистрам);
	ПараметрыНастройкиРежима.Вставить("Организация",					Объект.Организация);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиРежимаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаНастройкиРежима",
		ПараметрыНастройкиРежима,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиРежимаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатНастройкиРежима = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатНастройкиРежима) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатНастройкиРежима);
		
		Если Объект.ОтражатьВБухгалтерскомУчете И Объект.ОтражатьВНалоговомУчете И Объект.ОтражатьПоСпециальнымРегистрам Тогда
			Объект.Дата	= РезультатНастройкиРежима.ДатаВводаОстатков;
			ДатаПриИзмененииСервер();
		Иначе
			УправлениеФормойСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеРаздела(Команда)

	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",		 Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
	ДанныеЗаполнения.Вставить("РазделУчета", Объект.РазделУчета);

	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСправки", Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения), ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// МПЗОтгруженныеСуммаНУ, МПЗОтгруженныеСуммаПР, МПЗОтгруженныеСуммаВР

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МПЗОтгруженныеСуммаНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МПЗОтгруженныеСуммаПР");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МПЗОтгруженныеСуммаВР");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.МПЗОтгруженные.СчетУчетаНалоговыйУчет", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ДанныеПоСФНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// МПЗОтгруженныеДоговорПоставщика

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МПЗОтгруженныеДоговорПоставщика");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.МПЗОтгруженные.КонтрагентЮрЛицо", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	ТекущаяДатаДокумента			= Объект.Дата;

	МассивСчетов	= Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);
	СчетаТоварыОтгруженные	= БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетов, Ложь);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.МПЗОтгруженныеСчетУчета, СчетаТоварыОтгруженные);

	МассивСчетовНДС	= Новый Массив;
	МассивСчетовНДС.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	СчетаНДС	= БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетовНДС, Ложь);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.ДанныеПоСФСчетУчетаНДС, СчетаНДС);
	
	ВидыДоговоровПокупателя	= Новый Массив;
	ВидыДоговоровПокупателя.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ВидыДоговоровПокупателя.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	ПараметрыВыбораДоговоровПокупателя	= Новый Массив;
	ПараметрыВыбораДоговоровПокупателя.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговоровПокупателя)));
	Элементы.МПЗОтгруженныеДоговорПокупателя.ПараметрыВыбора	= Новый ФиксированныйМассив(ПараметрыВыбораДоговоровПокупателя);
	
	ВидыДоговоровПоставщика	= Новый Массив;
	ВидыДоговоровПоставщика.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ВидыДоговоровПоставщика.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	ПараметрыВыбораДоговоровПоставщика	= Новый Массив;
	ПараметрыВыбораДоговоровПоставщика.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговоровПоставщика)));
	Элементы.МПЗОтгруженныеДоговорПоставщика.ПараметрыВыбора	= Новый ФиксированныйМассив(ПараметрыВыбораДоговоровПоставщика);
	
	ПрочитатьПараметрыУчетнойПолитики();
	
	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Параметры.Свойство("ОткрытиеИзОбработкиВводаНачальныхОстатков", ОткрытиеИзОбработкиВводаНачальныхОстатков);
	КонецЕсли;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ЗаголовокДанныеПоСФ = НСтр("ru='Данные по счетам-фактурам:'");
	ЗаголовокОборотыИП  = НСтр("ru='Материалы, неоплаченные поставщикам:'");

	Элементы.ПодразделениеОрганизации.Видимость = ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Документы.ВводНачальныхОстатков.УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьСостояниеДокумента();
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыУчетнойПолитики()

	ДатаУчетнойПолитики = Объект.Дата + 86400;

	ПлательщикНДФЛ						= УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, ДатаУчетнойПолитики);
	РаздельныйУчетНДС					= УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, ДатаУчетнойПолитики)
		И УчетнаяПолитика.СистемаНалогообложения(Объект.Организация, ДатаУчетнойПолитики) <> Перечисления.СистемыНалогообложения.Упрощенная;
	РаздельныйУчетНДСНаСчете19 			= УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, ДатаУчетнойПолитики);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойСервер()

	// Установка режима "Только просмотр" для поля "Дата"
	Элементы.Дата.ТолькоПросмотр =
		ЗначениеЗаполнено(Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация))
		И Объект.ОтражатьВБухгалтерскомУчете
		И объект.ОтражатьВНалоговомУчете
		И Объект.ОтражатьПоСпециальнымРегистрам;
		
	ДатаУчетнойПолитики = Объект.Дата + 86400;	
	РаздельныйУчетНДС					= УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, ДатаУчетнойПолитики);
	РаздельныйУчетНДСНаСчете19 			= УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, ДатаУчетнойПолитики);
	ПрименяетсяУСНДоходыМинусРасходы	= УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, ДатаУчетнойПолитики);
	ИспользоватьВалютныйУчет			= БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ОценкаМПЗПоСредней					= УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, ДатаУчетнойПолитики) = Перечисления.СпособыОценки.ПоСредней;
		
	ПоказыватьПартии = РаздельныйУчетНДС ИЛИ ПрименяетсяУСНДоходыМинусРасходы ИЛИ НЕ ОценкаМПЗПоСредней;
	
	Элементы.МПЗОтгруженныеПартия.Видимость					= ПоказыватьПартии;
	Элементы.МПЗОтгруженныеПартия.АвтоОтметкаНезаполненного	= ПоказыватьПартии;
	
	Элементы.ГруппаВалютаМПЗОтгруженные.Видимость	= ПрименяетсяУСНДоходыМинусРасходы И ИспользоватьВалютныйУчет;
	
	Элементы.ГруппаДанныеПоСФ.Видимость	= РаздельныйУчетНДС;
	
	Элементы.ДанныеПоСФСтоимость.Видимость            = НЕ РаздельныйУчетНДСНаСчете19;
	Элементы.ДанныеПоСФНДСВключенВСтоимость.Видимость = НЕ РаздельныйУчетНДСНаСчете19;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	ЭтаФорма.Элементы,
	"ФормаОткрытьФормуНастройкиРежима",
	"Видимость",
	НЕ ОткрытиеИзОбработкиВводаНачальныхОстатков);
	
	Если НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
		Элементы.МПЗОтгруженныеПоставщик.ВыбиратьТип = Ложь;
	Иначе
		Элементы.МПЗОтгруженныеПоставщик.ВыбиратьТип = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ПараметрыДокумента	= Новый Структура("ВалютаРегламентированногоУчета, РазделУчета, Организация",
		ВалютаРегламентированногоУчета, Объект.РазделУчета, Объект.Организация);
	
	Для каждого СтрокаТаблицы Из Объект.МПЗОтгруженные Цикл

		ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_МПЗОтгруженные(СтрокаТаблицы, ПараметрыДокумента);

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_МПЗОтгруженные(СтрокаТаблицы, ПараметрыДокумента)
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
		СвойстваСчета	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		СтрокаТаблицы.СчетУчетаНалоговыйУчет		= СвойстваСчета.НалоговыйУчет;
	КонецЕсли;
	
	СтрокаТаблицы.ДоговорПокупателяВидДоговора	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДоговорПокупателя, "ВидДоговора");
	СтрокаТаблицы.КонтрагентЮрЛицо          	= ТипЗнч(СтрокаТаблицы.Поставщик) = Тип("СправочникСсылка.Контрагенты");
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	ПрочитатьПараметрыУчетнойПолитики();
	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ДатаВводаОстатков	= Документы.ВводНачальныхОстатков.ПолучитьДатуВводаОстатков(Объект.Организация);
	
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Объект.Дата = ДатаВводаОстатков;
	КонецЕсли;

	ПрочитатьПараметрыУчетнойПолитики();
	Документы.ВводНачальныхОстатков.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	УправлениеФормойСервер();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПокупательПриИзмененииСервер(ПараметрыСтроки, Знач ПараметрыДокумента)

	МассивВидовДоговоров	= Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ПараметрыСтроки.ДоговорПокупателя,
		ПараметрыСтроки.Покупатель, ПараметрыДокумента.Организация, МассивВидовДоговоров);
		
	ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, ПараметрыДокумента);

КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ПоставщикПриИзмененииСервер(ПараметрыСтроки, Знач ПараметрыДокумента)

	ПараметрыСтроки.КонтрагентЮрЛицо = ТипЗнч(ПараметрыСтроки.Поставщик) = Тип("СправочникСсылка.Контрагенты");
	Если ПараметрыСтроки.КонтрагентЮрЛицо Тогда		
		МассивВидовДоговоров	= Новый Массив;
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ПараметрыСтроки.ДоговорПоставщика,
			ПараметрыСтроки.Поставщик, ПараметрыДокумента.Организация, МассивВидовДоговоров);
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ДоговорСчетПриИзмененииСервер(ПараметрыСтроки, Знач ПараметрыДокумента)

	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы_МПЗОтгруженные(ПараметрыСтроки, ПараметрыДокумента);
	
	Если ПараметрыСтроки.ДоговорПокупателяВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		И ЗначениеЗаполнено(ПараметрыСтроки.ДокументОтгрузки)
		И НЕ ТипЗнч(ПараметрыСтроки.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ПараметрыСтроки.ДокументОтгрузки = Неопределено;
		
	КонецЕсли;

	ЗаполнитьСуммы(ПараметрыСтроки, ПараметрыДокумента);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСуммы(ПараметрыСтроки, Знач ПараметрыДокумента)

	Если ПараметрыСтроки.Валюта = ПараметрыДокумента.ВалютаРегламентированногоУчета Тогда
		ПараметрыСтроки.ВалютнаяСумма	= ПараметрыСтроки.Сумма;
		ПараметрыСтроки.ВалютныйНДС		= ПараметрыСтроки.НДС;
	КонецЕсли;
	
	ПараметрыСтроки.СуммаНУ = ПараметрыСтроки.Сумма;
	Если НЕ ПараметрыСтроки.СчетУчетаНалоговыйУчет Тогда
		ПараметрыСтроки.СуммаПР = 0;
	КонецЕсли;	
	
	ЗаполнитьСуммуВР(ПараметрыСтроки);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСуммуВР(ПараметрыСтроки)

	ПараметрыСтроки.СуммаВР	= ПараметрыСтроки.Сумма - ПараметрыСтроки.СуммаНУ - ПараметрыСтроки.СуммаПР;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(СтрокаТаблицы)

	Если РаздельныйУчетНДСНаСчете19 Тогда
		
		СтрокаТаблицы.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.СуммаБезНДС,
			Ложь,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
	Иначе
		
		СтрокаТаблицы.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Стоимость,
			Истина,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
	КонецЕсли; 

	ОбновитьИтогиДанныеПоСФ();

КонецПроцедуры

&НаКлиенте
Процедура ДанныеСФУстановитьОтборСтрок()

	СтрокаТаблицы = Элементы.МПЗОтгруженные.ТекущиеДанные;

	Если СтрокаТаблицы <> Неопределено Тогда

		Элементы.ДанныеПоСФ.ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", СтрокаТаблицы.Ключ);

		ТекстЗаголовка = НСтр("ru = 'Данные по счетам-фактурам полученным по номенклатуре ""%1"":'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, СтрокаТаблицы.Номенклатура);
		ЗаголовокДанныеПоСФ = ТекстЗаголовка;

	Иначе

		Элементы.ДанныеПоСФ.ОтборСтрок = Неопределено;
		ЗаголовокДанныеПоСФ = НСтр("ru = 'Данные по счетам-фактурам:'");

	КонецЕсли;

	ОбновитьИтогиДанныеПоСФ();

	Элементы.ДанныеПоСФ.Доступность = НЕ СтрокаТаблицы = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиДанныеПоСФ()

	ДанныеПоСФИтогКоличество	= 0;
	ДанныеПоСФИтогСтоимость		= 0;
	ДанныеПоСФИтогНДС			= 0;

	СтрокаТаблицы = Элементы.МПЗОтгруженные.ТекущиеДанные;

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивСтрок = Объект.ДанныеПоСФ.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Для каждого ЭлементМассиваСтрок Из МассивСтрок Цикл

		ДанныеПоСФИтогКоличество	= ДанныеПоСФИтогКоличество + ЭлементМассиваСтрок.Количество;
		ДанныеПоСФИтогСтоимость		= ДанныеПоСФИтогСтоимость + ЭлементМассиваСтрок.Стоимость;
		ДанныеПоСФИтогНДС			= ДанныеПоСФИтогНДС + ЭлементМассиваСтрок.НДС;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОборотыУстановитьОтборСтрок()

	СтрокаТаблицы = Элементы.МПЗОтгруженные.ТекущиеДанные;

	Если СтрокаТаблицы <> Неопределено Тогда

		Элементы.Обороты.ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", СтрокаТаблицы.Ключ);

		ТекстЗаголовка = НСтр("ru='Материалы, неоплаченные поставщикам, израсходованные на производство номенклатуры ""%1"":'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, СтрокаТаблицы.Номенклатура);
		ЗаголовокОборотыИП = ТекстЗаголовка;

	Иначе

		Элементы.Обороты.ОтборСтрок = Неопределено;
		ЗаголовокОборотыИП = НСтр("ru='Материалы, неоплаченные поставщикам:'");

	КонецЕсли;

	ОбновитьИтогиОбороты();

	Элементы.Обороты.Доступность = НЕ СтрокаТаблицы = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиОбороты()

	ОборотыИтогСтоимость = 0;
	ОборотыИтогНДС = 0;

	СтрокаТаблицы = Элементы.Обороты.ТекущиеДанные;

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивСтрок = Объект.Обороты.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Ключ));

	Для каждого ЭлементМассиваСтрок Из МассивСтрок Цикл

		ОборотыИтогСтоимость = ОборотыИтогСтоимость + ЭлементМассиваСтрок.Сумма;
		ОборотыИтогНДС       = ОборотыИтогНДС + ЭлементМассиваСтрок.НДС;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПоляСтрокиТабличнойЧасти()

	СтрокаТаблицы = Элементы.МПЗОтгруженные.ТекущиеДанные;

	ПараметрыСтроки = Новый Структура("СчетУчета, СчетУчетаНалоговыйУчет,
			|Покупатель, ДоговорПокупателя, ДокументОтгрузки,
			|Поставщик, ДоговорПоставщика,
			|Сумма, НДС,
			|СуммаНУ, СуммаПР, СуммаВР, 
			|Валюта, ВалютнаяСумма, ВалютныйНДС,
			|ДоговорПокупателяВидДоговора, КонтрагентЮрЛицо");
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТаблицы);

	Возврат ПараметрыСтроки;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСчетаУчетаНоменклатуры(Знач Организация, Знач Номенклатура)

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура);
	Возврат СчетаУчета;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеГруппойНДСиИП(Форма)
	
	Элементы = Форма.Элементы;
	Если Форма.ПлательщикНДФЛ Тогда
		СтрокаТаблицы = Элементы.МПЗОтгруженные.ТекущиеДанные;
		Если СтрокаТаблицы = Неопределено Тогда
			Элементы.ГруппаОборотыИП.Доступность = Ложь;
			Возврат;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				Элементы.ГруппаОборотыИП.Доступность = Ложь;
				Возврат;
			КонецЕсли;
			
			Если Форма.РаздельныйУчетНДС Тогда
				Если СтрокаТаблицы.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная") Тогда
					Элементы.ГруппаДанныеПоСФОборотыИП.ТекущаяСтраница = Элементы.ГруппаОборотыИП;
					Элементы.ГруппаОборотыИП.Доступность = Истина;
				Иначе
					Элементы.ГруппаДанныеПоСФОборотыИП.ТекущаяСтраница = Элементы.ГруппаДанныеПоСФ;
					Элементы.ГруппаОборотыИП.Доступность = Ложь;
				КонецЕсли;
			Иначе
				Элементы.ГруппаДанныеПоСФОборотыИП.ТекущаяСтраница = Элементы.ГруппаОборотыИП;
				Если СтрокаТаблицы.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная") Тогда
					Элементы.ГруппаОборотыИП.Доступность = Истина;
				Иначе
					Элементы.ГруппаОборотыИП.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ГруппаДанныеПоСФОборотыИП.ТекущаяСтраница = Элементы.ГруппаДанныеПоСФ;
	КонецЕсли;
	
КонецПроцедуры
	