
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокументыОснования" Тогда
		Модифицированность	= Истина;
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСчетаФактурыВыданныеПокупателям" Тогда
		ОбработкаВыбораСчетаФактурыВыданныеПокупателямНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаПродавцы" Тогда
		ОбработкаВыбораПродавцовНаСервере(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Модифицированность	= Истина;
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСчетФактураПолученныйНаПоступление";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	ПредставлениеДокумента = Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	УчетНДСКлиентСервер.ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи);
	ПараметрыЗаписи.ДокументыОснования	= ОбщегоНазначения.ВыгрузитьКолонку(ТекущийОбъект.ДокументыОснования, "ДокументОснование", Истина);
	ПараметрыЗаписи.РеквизитыСФ = УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреПолученном(ТекущийОбъект.Ссылка);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УчетНДСКлиентСервер.ДополнитьПараметрыСобытияЗаписьСчетаФактуры(ПараметрыЗаписи); // На 8.2 в web-клиенте ПараметрыЗаписи могут быть не инициализированы
	
	Оповестить("Запись_СчетФактураПолученный", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьКонтрагентовПриОткрытии();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПриИзмененииДаты()
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	ЗапуститьПроверкуКонтрагентов();

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	КонтрагентПриИзмененииНаСервере();
	
	ЗапуститьПроверкуКонтрагентов(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКППКонтрагентаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров	= Новый Структура("Контрагент, КППКонтрагента, РольКонтрагента");
	СтруктураПараметров.РольКонтрагента	= "Поставщик";
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКПП", СтруктураПараметров, ЭтаФорма)

КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)
	ЗапуститьПроверкуКонтрагентов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СубкомиссионерПриИзменении(Элемент)
	ЗапуститьПроверкуКонтрагентов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Если Объект.Дата >= '20150101' Тогда 
		Объект.СуммаДокументаКомиссия = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСДокументаПриИзменении(Элемент)
	
	Если Объект.Дата >= '20150101' Тогда 
		Объект.СуммаНДСДокументаКомиссия = Объект.СуммаНДСДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураВыборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетаФактурыВыданныеПокупателюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьСчетаФактурыНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНесколькоПродавцовВыборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПродавцов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьПродавцовНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПродавцов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНесколькоПродавцовСсылкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПродавцов();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	Элементы.ГруппаСостояниеЭД.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	ТекущаяДатаДокумента	= Объект.Дата;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПредставлениеДокумента = Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	ЗаполнитьСписокКодовОпераций();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КППКонтрагента			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
	Иначе
		КППКонтрагента			= "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ВидДоговораКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	Иначе
		ВидДоговораКонтрагента	= Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Для каждого СтрокаОснования Из Объект.ДокументыОснования Цикл
		Если ЗначениеЗаполнено(СтрокаОснования.ДокументОснование) Тогда
			НаОснованииОтчетаКомитенту = (ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.Ключ.Пустая() И НаОснованииОтчетаКомитенту Тогда
		Объект.КодВидаОперации = "04";
	КонецЕсли;
	
	ПоставщикРезидентТаможенногоСоюза = УчетНДС.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент);
	
	УстановитьВидимость();
	
	ДекорацияОрганизация = НСтр("ru = 'Организация:'");
	ДекорацияОтветственный = НСтр("ru = 'Ответственный:'");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ИспользуетсяПостановлениеНДС1137	= УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Объект.Дата);
	
	ПравилаПостановления735 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Объект.Дата) = 3;
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	
	ОтражатьСуммыВЖурнале = Объект.Дата >= '20150101' И (ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов"));
		
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()

	Если ИспользуетсяПостановлениеНДС1137
		И (ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку
		ИЛИ Объект.ВозвратЧерезКомиссионера) Тогда
		
		// Счет-фактура полученный покупателем-комитентом от комиссионера
		
		Если Объект.Дата < '20150101' Тогда
			Элементы.ГруппаПродавец.Видимость = Истина;
			Элементы.ГруппаНесколькоПродавцов.Видимость = Ложь;
		Иначе
			Элементы.ГруппаПродавец.Видимость = Ложь;
			Элементы.ГруппаНесколькоПродавцов.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаНесколькоПродавцов.Видимость = Ложь;
		Элементы.ГруппаПродавец.Видимость = Ложь;
	КонецЕсли;
	
	Если ИспользуетсяПостановлениеНДС1137
		И ПравилаПостановления735
		И ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		
		// Счет-фактура полученный комиссионером от комитента-продавца
		
		Если Объект.Дата < '20150101' Тогда
			Элементы.ГруппаСчетФактураСубкомиссионер.Видимость = Истина;
			Элементы.ГруппаСводныйСчетФактура.Видимость = Ложь;
		Иначе	
			Элементы.ГруппаСводныйСчетФактура.Видимость = Истина;
			Элементы.ГруппаСчетФактураСубкомиссионер.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСводныйСчетФактура.Видимость = Ложь;
		Элементы.ГруппаСчетФактураСубкомиссионер.Видимость = Ложь;
	КонецЕсли;
		
	Элементы.ПредставлениеКППКонтрагента.Видимость	= ИспользуетсяПостановлениеНДС1137 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮридическоеФизическоеЛицо") <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;

	ВычетНеОтражается = Объект.Исправление ИЛИ НаОснованииОтчетаКомитенту;
	
	Элементы.ГруппаПолучениеСчетаФактуры.Видимость 	= НЕ ПоставщикРезидентТаможенногоСоюза;
	Элементы.НДСПредъявленКВычету.Видимость			= УчетНДСКлиентСервер.Версия(Объект.Дата) > 1 
		И НЕ ВычетНеОтражается 
		И НЕ РаздельныйУчетНДСНаСчете19
		И НЕ ПоставщикРезидентТаможенногоСоюза
		И ПлательщикНДС;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Если Объект.СформированПриВводеНачальныхОстатковНДС Тогда
		Форма.ТолькоПросмотр	= Истина;
	КонецЕсли;
	
	Элементы.Контрагент.ТолькоПросмотр			= Форма.НаОснованииОтчетаКомитенту;
	Элементы.ГруппаПродавец.Доступность			= ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		ИЛИ Объект.ВозвратЧерезКомиссионера;
	
	Элементы.НомерИсправленияСистемный.Доступность	= Объект.Исправление;
	Элементы.ДатаИсправленияСистемная.Доступность	= Объект.Исправление;
	
	Элементы.ГруппаВидаОперации.Видимость 		= Форма.ИспользуетсяПостановлениеНДС1137;
	Элементы.ГруппаСпособПолучения.Видимость 	= Форма.ИспользуетсяПостановлениеНДС1137;
	
	Если Форма.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление Тогда
		Элементы.ГруппаТекущиеНомераИДаты.ТекущаяСтраница 	= Элементы.ГруппаИсправляемый;  
		Элементы.ГруппаРеквизитыИсправления.Видимость 		= Истина;  
		Форма.НадписьСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерВходящегоДокумента,Формат(Объект.ДатаВходящегоДокумента,"ДЛФ=Д"));
	Иначе
		Элементы.ГруппаТекущиеНомераИДаты.ТекущаяСтраница 	= Элементы.ГруппаТекущий;
		Элементы.ГруппаРеквизитыИсправления.Видимость 		= Ложь;  
	КонецЕсли;
	
	НадписьВыбор = НСтр("ru = 'Выбор'");
	
	Если Объект.Дата >= '20150101' Тогда
		
		// Счет-фактура полученный комиссионером от комитента-продавца
		КоличествоСчетовФактурВыданныхПокупателям = Объект.СчетаФактурыВыданныеПокупателям.Количество();
		
		Если КоличествоСчетовФактурВыданныхПокупателям = 0 Тогда
			Форма.НадписьСчетФактураВыбор = НадписьВыбор;
			Элементы.ГруппаСчетаФактурыВыданныеПокупателям.ТекущаяСтраница = Элементы.ГруппаСчетФактураВыбор;
		ИначеЕсли КоличествоСчетовФактурВыданныхПокупателям = 1 Тогда 
			Элементы.ГруппаСчетаФактурыВыданныеПокупателям.ТекущаяСтраница = Элементы.ГруппаОдинСчетФактураВыданныйПокупателю;
		Иначе
			Элементы.ГруппаСчетаФактурыВыданныеПокупателям.ТекущаяСтраница = Элементы.ГруппаНесколькоСчетовФактурВыданныхПокупателям;
			
			ФормСтрока     = "Л = ru_RU; ЧДЦ=0";
			ПарПредмета    = "документ,документа,документов,м,,,,0";
			ПрописьЧисла   = ЧислоПрописью(КоличествоСчетовФактурВыданныхПокупателям, ФормСтрока, ПарПредмета);
			ИндексПредмета = Найти(ПрописьЧисла, "док");
			ТекстДокументы = Строка(КоличествоСчетовФактурВыданныхПокупателям) 
				+ " " 
				+ Сред(ПрописьЧисла, ИндексПредмета, СтрДлина(ПрописьЧисла)- ИндексПредмета - 3);
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2 и еще %3)'"), 
				ТекстДокументы, 
				Строка(Объект.СчетаФактурыВыданныеПокупателям[0].СчетФактура), 
				КоличествоСчетовФактурВыданныхПокупателям - 1);
				
			Форма.НадписьСчетаФактурыВыданныеПокупателю = ТекстНадписи;
			
		КонецЕсли;

		// Счет-фактура полученный покупателем-комитентом от комиссионера
		КоличествоПродавцов = Объект.Продавцы.Количество();
		
		Если КоличествоПродавцов = 0 Тогда
			Форма.НадписьНесколькоПродавцовВыбор = НадписьВыбор;
			Элементы.ГруппаНесколькоПродавцовСтраницы.ТекущаяСтраница = Элементы.ГруппаНесколькоПродавцовВыбор;
		ИначеЕсли КоличествоПродавцов = 1 Тогда
			Элементы.ГруппаНесколькоПродавцовСтраницы.ТекущаяСтраница = Элементы.ГруппаОдинПродавец;
		Иначе
			Элементы.ГруппаНесколькоПродавцовСтраницы.ТекущаяСтраница = Элементы.ГруппаНесколькоПродавцовСсылка;
			
			ФормСтрока     = "Л = ru_RU; ЧДЦ=0";
			ПарПредмета    = "продавец,продавца,продавцов,м,,,,0";
			ПрописьЧисла   = ЧислоПрописью(КоличествоПродавцов, ФормСтрока, ПарПредмета);
			ИндексПредмета = Найти(ПрописьЧисла, "прод");
			ТекстДокументы = Строка(КоличествоПродавцов) 
				+ " " 
				+ Сред(ПрописьЧисла, ИндексПредмета, СтрДлина(ПрописьЧисла)- ИндексПредмета - 3);
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2 и еще %3)'"), 
				ТекстДокументы, 
				Строка(Объект.Продавцы[0].Продавец), 
				КоличествоПродавцов - 1);
				
			Форма.НадписьНесколькоПродавцовСсылка = ТекстНадписи;
		
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоОснований = Объект.ДокументыОснования.Количество();
	
	Если КоличествоОснований = 0 Тогда
		Форма.НадписьВыбор = НадписьВыбор;
		Элементы.СтраницыОснования.ТекущаяСтраница = Элементы.СтраницаВыбора;
	ИначеЕсли КоличествоОснований = 1 Тогда 
		Элементы.СтраницыОснования.ТекущаяСтраница = Элементы.СтраницаОснования;
	Иначе
		
		Элементы.СтраницыОснования.ТекущаяСтраница = Элементы.СтраницаОснований;
		
		ФормСтрока      = "Л = ru_RU; ЧДЦ=0";
		ПарПредмета     = "документ,документа,документов,м,,,,0";
		ПрописьЧисла    = ЧислоПрописью(КоличествоОснований, ФормСтрока, ПарПредмета);
		ИндексПредмета  = Найти(ПрописьЧисла, "док");
		ТекстДокументы  = Строка(КоличествоОснований) + " " + Сред(ПрописьЧисла, ИндексПредмета, СтрДлина(ПрописьЧисла)- ИндексПредмета - 3);
		ТекстНадписи    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (%2 и еще %3)'"), 
			ТекстДокументы, 
			Строка(Объект.ДокументыОснования[0].ДокументОснование), 
			КоличествоОснований - 1);
		
		Форма.НадписьДокументыОснования = ТекстНадписи;
		
	КонецЕсли;
	
	Если Форма.ОтражатьСуммыВЖурнале Тогда
		Элементы.СтраницыКомиссия.ТекущаяСтраница = Элементы.ГруппаЕстьКомиссия;
	Иначе
		Элементы.СтраницыКомиссия.ТекущаяСтраница = Элементы.ГруппаНетКомиссии;
	КонецЕсли;

	ТекущийКод = Элементы.КодВидаОперации.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда 
		Форма.НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		Форма.НадписьВидОперации = "";
	КонецЕсли;
	
	Элементы.СуммаДокумента.ТолькоПросмотр		= НЕ Форма.НаОснованииОтчетаКомитенту ИЛИ Объект.Дата >= '20150101';
	Элементы.СуммаНДСДокумента.ТолькоПросмотр	= НЕ Форма.НаОснованииОтчетаКомитенту ИЛИ Объект.Дата >= '20150101';
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ПустаяСтрока(Объект.КППКонтрагента) Тогда
			ЗначениеКППКонтрагента	= Объект.КППКонтрагента;
		Иначе
			ЗначениеКППКонтрагента	= Форма.КППКонтрагента;
		КонецЕсли;
		
		Форма.ПредставлениеКППКонтрагента	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'КПП %1'"), ?(ПустаяСтрока(ЗначениеКППКонтрагента), "<не задан>", ЗначениеКППКонтрагента));
	Иначе
		Форма.ПредставлениеКППКонтрагента	= "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма, ПредставлениеДокумента)
	
	Форма.Заголовок = ПредставлениеДокумента.СчетФактураПредставление;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Объект.Дата < '20111001' Тогда
		
		Если Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.Корректировочный") Тогда
			Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаПоступление");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ИспользуетсяПостановлениеНДС1137 Тогда
		
		Исправление      = Ложь;
		НомерИсправления = 0;
		ДатаИсправления  = '00010101';
		
		Объект.Продавец = Неопределено;
		
	КонецЕсли;
	
	Если ТекущаяДатаДокумента < '20150101'
		И Объект.Дата >= '20150101' Тогда 
		ЗаполнитьСписокКодовОпераций();
	КонецЕсли;
	
	УстановитьПорядокОтраженияВычетаНаСервере();
	
	УстановитьКодВидаОперацииНаСервере();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКодовОпераций()
	
	СписокВыбораКодов = Элементы.КодВидаОперации.СписокВыбора;
	
	ИспользоватьКоды2015 = Ложь;
	Если Объект.Дата >= '20150101' Тогда 
		ИспользоватьКоды2015 = Истина;
	КонецЕсли;

	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры, 
		СписокВыбораКодов,
		ИспользоватьКоды2015);
		
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	КонтрагентОбработатьИзменениеНаСервере();
	
	УстановитьПорядокОтраженияВычетаНаСервере();
	
	УстановитьКодВидаОперацииНаСервере();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()

	Объект.ДокументОснование	= Неопределено;
	Объект.ДоговорКонтрагента	= Неопределено;
	ВидДоговораКонтрагента 		= Неопределено;
	Объект.СуммаДокумента 		= 0;
	Объект.СуммаНДСДокумента	= 0;
	Объект.ДокументыОснования.Очистить();
		
	КППКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "КПП");
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		Объект.КППКонтрагента	= УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(Объект.ДокументыОснования[0].ДокументОснование, "Грузоотправитель");
	Иначе
		Объект.КППКонтрагента	= "";
	КонецЕсли;
	
	ПоставщикРезидентТаможенногоСоюза = УчетНДС.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодВидаОперацииНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата",						Объект.Дата);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",				Объект.ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",					Объект.Исправление);
	СтруктураПараметров.Вставить("КодВидаОперацииОснования",	Неопределено);
	СтруктураПараметров.Вставить("ВидДоговора",					ВидДоговораКонтрагента);
	СтруктураПараметров.Вставить("ДокументыОснования",			Объект.ДокументыОснования.Выгрузить(,"ДокументОснование"));
	СтруктураПараметров.Вставить("СчетФактураБезНДС",			Объект.СчетФактураБезНДС);
	
	Объект.КодВидаОперации	= Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ДокументыОснованияДокументОснованиеПриИзмененииНаСервере()

	ПараметрыСчетаФактуры = ПолучитьПараметрыСчетаФактуры();
	
	ЗаполнитьЗначенияСвойствОбъекта(Объект, ПараметрыСчетаФактуры);
	
	Если Объект.ДокументыОснования.Количество() = 1
			И НЕ Объект.ДокументыОснования[0].ДокументОснование = Объект.ДокументОснование Тогда
		Объект.ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
	КонецЕсли;

	Объект.ДоговорКонтрагента = ПараметрыСчетаФактуры.Договор;
	
	ВидДоговораКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	
	Если ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		Объект.Продавец	= Неопределено;
	КонецЕсли;
	
	Если Объект.ВозвратЧерезКомиссионера Тогда 
		Объект.ВозвратЧерезКомиссионера = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
	УстановитьПорядокОтраженияВычетаНаСервере();
	
	УстановитьКодВидаОперацииНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьПорядокОтраженияВычетаНаСервере()
	
	Если РаздельныйУчетНДСНаСчете19 Тогда
		Объект.НДСПредъявленКВычету = Ложь;
	Иначе
		СтруктураПараметров	= Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
		Объект.НДСПредъявленКВычету	= Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыСчетаФактуры()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат УчетНДСПереопределяемый.ПолучитьПараметрыСчетаФактуры(ДокОбъект);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияСвойствОбъекта(Объект, ПараметрыСчетаФактуры)
	
	ИсключенныеСвойства = "Организация, Контрагент";	
		
	Если ЭлектронныеДокументы.ЕстьРабочийЭСФ(Объект.Ссылка) Тогда
		ИсключенныеСвойства = ИсключенныеСвойства + ", ВалютаДокумента,
			|СуммаДокумента, СуммаДокумента, СуммаУвеличение, СуммаУменьшение, СуммаНДСУвеличение, СуммаНДСУменьшение";
	КонецЕсли;
	
	Если ПараметрыСчетаФактуры.Свойство("Продавец") Тогда
		Если ПараметрыСчетаФактуры.Продавец = Неопределено 
			ИЛИ ПараметрыСчетаФактуры.Продавец = Справочники.Контрагенты.ПустаяСсылка() Тогда
			
			ИсключенныеСвойства = ИсключенныеСвойства + ", Продавец";
		
		КонецЕсли
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыСчетаФактуры,,ИсключенныеСвойства);

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснование()
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьСтруктуруПараметровФормы();
		
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаДокументыОснования",
			ПараметрыФормы,
			ЭтаФорма);
					
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы()
	
	СтруктураПараметров = Новый Структура();
	ЗначенияЗаполнения 	= Новый Структура();
	ЗначениеОтбора 		= Новый Структура();
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда 
		ЗначенияЗаполнения.Вставить("СписокДокументовОснований", Новый СписокЗначений);
		Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
			ЗначенияЗаполнения.СписокДокументовОснований.Добавить(СтрокаТаблицы.ДокументОснование)
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("ТипСчетаФактуры", "Полученный");
	ЗначенияЗаполнения.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ЗначенияЗаполнения.Вставить("Исправление", Объект.Исправление);
	ЗначенияЗаполнения.Вставить("СчетФактура", Объект.Ссылка);
	
	ЗначениеОтбора.Вставить("Организация", Объект.Организация);
	ЗначениеОтбора.Вставить("Контрагент", Объект.Контрагент);
	ЗначениеОтбора.Вставить("Договор", Объект.ДоговорКонтрагента);
	ЗначениеОтбора.Вставить("Валюта", Объект.ВалютаДокумента);
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения); 
	СтруктураПараметров.Вставить("Отбор", ЗначениеОтбора);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура НадписьДокументыОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	Объект.ДокументыОснования.Очистить();
	Для Каждого СтрокаСписка Из ВыбранноеЗначение Цикл
		Если СтрокаСписка.Значение.Пустая() Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТаблицы = Объект.ДокументыОснования.Добавить();
		СтрокаТаблицы.ДокументОснование = СтрокаСписка.Значение;
	КонецЦикла;

	ДокументыОснованияДокументОснованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СчетФактураВыданныйПокупателюПриИзмененииНаСервере()
	
	ОснованиеСчетаФактурыВыданного	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетФактураВыданныйПокупателю, "ДокументОснование");
	Если ТипЗнч(ОснованиеСчетаФактурыВыданного) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		Объект.Субкомиссионер =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеСчетаФактурыВыданного, "Контрагент");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСчетаФактурыВыданныеПокупателям()
	
	ЕстьОшибкиЗаполнения = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаВходящегоДокумента", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	АдресХранилищаСчетаФактурыВыданныеПокупателям = ПоместитьСчетаФактурыВыданныеПокупателямВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаСчетаФактурыВыданныеПокупателям", АдресХранилищаСчетаФактурыВыданныеПокупателям);
	
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ДокументОснование", Объект.ДокументОснование);
	ПараметрыФормы.Вставить("ДатаВходящегоДокумента", Объект.ДатаВходящегоДокумента);
	ПараметрыФормы.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ПараметрыФормы.Вставить("Комитент", Объект.Контрагент);
		
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаСчетаФактурыВыданныеПокупателям",
			ПараметрыФормы,
			ЭтаФорма);
					
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПродавцов()
	
	АдресХранилищаПродавцов = ПоместитьПродавцовВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаПродавцов", АдресХранилищаПродавцов);
	
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаПродавцы",
			ПараметрыФормы,
			ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Функция ПоместитьСчетаФактурыВыданныеПокупателямВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.СчетаФактурыВыданныеПокупателям.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьПродавцовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.Продавцы.Выгрузить(), УникальныйИдентификатор);

КонецФункции	

&НаСервере
Процедура ОбработкаВыбораСчетаФактурыВыданныеПокупателямНаСервере(ВыбранноеЗначение)

	ТаблицаСчетаФактурыВыданныеПокупателям = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаСчетаФактурыВыданныеПокупателям);
	
	Объект.СчетаФактурыВыданныеПокупателям.Загрузить(ТаблицаСчетаФактурыВыданныеПокупателям);

	КоличествоСФВыданныхПокупателю = Объект.СчетаФактурыВыданныеПокупателям.Количество();
	Если КоличествоСФВыданныхПокупателю > 0 Тогда
		Объект.СчетФактураВыданныйПокупателю = Объект.СчетаФактурыВыданныеПокупателям[0].СчетФактура;
		Если КоличествоСФВыданныхПокупателю > 1 Тогда
			Объект.КодВидаОперации = "27";
		КонецЕсли;
	Иначе
		Объект.СчетФактураВыданныйПокупателю = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	Объект.СуммаДокумента            = Объект.СчетаФактурыВыданныеПокупателям.Итог("Сумма");
	Объект.СуммаДокументаКомиссия    = Объект.СчетаФактурыВыданныеПокупателям.Итог("Сумма");
	Объект.СуммаНДСДокумента         = Объект.СчетаФактурыВыданныеПокупателям.Итог("НДС");
	Объект.СуммаНДСДокументаКомиссия = Объект.СчетаФактурыВыданныеПокупателям.Итог("НДС");
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПродавцовНаСервере(ВыбранноеЗначение)

	ТаблицаПродавцов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаПродавцов);
	
	Объект.Продавцы.Загрузить(ТаблицаПродавцов);

	КоличествоПродавцов = Объект.Продавцы.Количество();
	Если КоличествоПродавцов > 0 Тогда
		Объект.Продавец = Объект.Продавцы[0].Продавец;
		Если КоличествоПродавцов > 1 Тогда
			Объект.КодВидаОперации = "27";
		КонецЕсли;
	Иначе
		Объект.Продавец = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПолучитьРежимЗаписи();
	Если ЭтаФорма.Записать(Новый Структура("РежимЗаписи", РежимЗаписи)) Тогда 
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРежимЗаписи()
	
	Проводить = Истина;
	
	Для Каждого Стр из Объект.ДокументыОснования Цикл
		Если Стр.ДокументОснование <> Неопределено
			И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ДокументОснование, "Проведен") Тогда
			Проводить = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Проводить Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДатаПолученияПриИзменении(Элемент)
	
	Если Объект.Исправление Тогда
		Если Объект.Дата < Объект.ДатаИсправления Тогда 
			Объект.Дата = Объект.ДатаИсправления;
		КонецЕсли;
	Иначе
		Если Объект.Дата < Объект.ДатаВходящегоДокумента Тогда 
			Объект.Дата = Объект.ДатаВходящегоДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаВходящегоДокумента;
	ПриИзмененииДаты();
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьНажатие(Элемент)
	
	ВыбратьОснование();

КонецПроцедуры

&НаКлиенте
Процедура ДатаИсправленияПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаИсправления;
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВыборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		Объект.КодВидаОперации = ВыбранныйКод.Значение;
		НадписьВидОперации = Сред(ВыбранныйКод.Представление, 5);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетФактураВыданныйПокупателюПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетФактураВыданныйПокупателю) Тогда
		
		СчетФактураВыданныйПокупателюПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтотОбъект);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтотОбъект, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтотОбъект, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтотОбъект, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти
