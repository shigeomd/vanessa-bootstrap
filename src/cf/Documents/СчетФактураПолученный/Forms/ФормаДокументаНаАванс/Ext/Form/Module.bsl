&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОснованийСчетаФактуры.Форма.ФормаВыбораОснованияСчетаФактуры" Тогда 
		Объект.ДокументОснование  = ВыбранноеЗначение.Документ;	
		Объект.ДоговорКонтрагента = ВыбранноеЗначение.Договор;
		Модифицированность = Истина;
		ПриИзмененииДоговора();
		ПриИзмененииДокументаОснования();
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСчетаФактурыВыданныеПокупателям" Тогда
		ОбработкаВыбораСчетаФактурыВыданныеПокупателямНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаПродавцы" Тогда
		ОбработкаВыбораПродавцовНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаПлатежныеДокументы" Тогда
		ОбработкаВыбораПлатежныеДокументыНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСчетФактураПолученныйНаАванс";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	ПредставлениеДокумента = Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьКонтрагентовПриОткрытии();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СчетФактураПолученный", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПолученияПриИзменении(Элемент)

	Если Объект.Исправление Тогда
		Если Объект.Дата < Объект.ДатаИсправления Тогда 
			Объект.Дата = Объект.ДатаИсправления;
		КонецЕсли;
	Иначе
		Если Объект.Дата < Объект.ДатаВходящегоДокумента Тогда 
			Объект.Дата = Объект.ДатаВходящегоДокумента;
		КонецЕсли;
	КонецЕсли;

	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСчетаФактурыПриИзменении(Элемент)

	ВидСчетаФактурыПриИзмененииНаСервере();
	ЗапуститьПроверкуКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Объект.ДокументОснование	= Неопределено;
	Объект.ДоговорКонтрагента	= Неопределено;
	Объект.ДокументыОснования.Очистить();
	
	ДанныеОбъекта	= Новый Структура("Организация, Контрагент, ДоговорКонтрагента,
		|СуммаДокумента, ВалютаДокумента, Продавец,
		|ВидДоговораКонтрагента, ИспользуетсяПостановлениеНДС1137");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВидДоговораКонтрагента			= ВидДоговораКонтрагента;
	ДанныеОбъекта.ИспользуетсяПостановлениеНДС1137	= ИспользуетсяПостановлениеНДС1137;
	
	КонтрагентПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	ВидДоговораКонтрагента	= ДанныеОбъекта.ВидДоговораКонтрагента;
	
	УправлениеФормой(ЭтаФорма);
	
	ЗапуститьПроверкуКонтрагентов(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура КомитентПриИзменении(Элемент)

	ДанныеОбъекта	= Новый Структура("Организация, Комитент, ДоговорКомитента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	КомитентПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	УправлениеФормой(ЭтаФорма);
	
	ЗапуститьПроверкуКонтрагентов(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Элемент.СписокВыбора, Элемент, ТекущийКод);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)
	ЗапуститьПроверкуКонтрагентов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураВыданныйПокупателюПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетФактураВыданныйПокупателю) Тогда
		
		СчетФактураВыданныйПокупателюПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СубкомиссионерПриИзменении(Элемент)
	ЗапуститьПроверкуКонтрагентов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураВыборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетаФактурыВыданныеПокупателюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьСчетаФактурыНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСчетаФактурыВыданныеПокупателям();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНесколькоПродавцовВыборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПродавцов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьПродавцовНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПродавцов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНесколькоПродавцовСсылкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПродавцов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПлатежныеДокументыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПлатежныеДокументы();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Авансы>

&НаКлиенте
Процедура АвансыПриИзменении(Элемент)

	Объект.СуммаДокумента		= Объект.Авансы.Итог("Сумма");
	Объект.СуммаНДСДокумента	= Объект.Авансы.Итог("СуммаНДС");
	Если ОтражатьСуммыВЖурнале
		И Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАвансКомитента")Тогда 
		Объект.СуммаДокументаКомиссия		= Объект.Авансы.Итог("Сумма");
		Объект.СуммаНДСДокументаКомиссия	= Объект.Авансы.Итог("СуммаНДС");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвансыПередУдалением(Элемент, Отказ)
	
	Если Объект.Авансы.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыСуммаПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.Авансы.ТекущиеДанные;
	
	ТекущиеДанные.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.Сумма,
		Истина,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

&НаКлиенте
Процедура АвансыСтавкаНДСПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.Авансы.ТекущиеДанные;
	
	ТекущиеДанные.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ТекущиеДанные.Сумма,
		Истина,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	ТекущаяДатаДокумента	= Объект.Дата;
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Элементы.ГруппаСостояниеЭД.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	Комиссия = ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов");
	
	Элементы.ВидСчетаФактуры.Видимость 			= Комиссия;
	Элементы.СтраницыКомитентПродавец.Видимость = Комиссия;
	
	СписокТиповДляВыбора.ЗагрузитьЗначения(УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыПолученного(Объект.ВидСчетаФактуры, Объект.Исправление));
	
	ЗаполнитьСписокКодовОпераций();
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ВидДоговораКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	Иначе
		ВидДоговораКонтрагента	= Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	НаОснованииОтчетаКомитенту	= (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	
	Если Параметры.Ключ.Пустая() И НаОснованииОтчетаКомитенту Тогда
		Если Объект.Авансы.Количество() = 0 Тогда
			СтрокаАвансы = Объект.Авансы.Добавить();
		КонецЕсли;
		
		Если Объект.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс
			И Объект.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
			Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
		КонецЕсли;
		
		Модифицированность = Ложь;
	КонецЕсли;
	
	ПредставлениеДокумента = Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Объект.КодВидаОперации = ПолучитьКодВидаОперации(Объект.ВидСчетаФактуры, НаОснованииОтчетаКомитенту);
	КонецЕсли;
	
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	ДекорацияОрганизация = НСтр("ru = 'Организация:'");
	ДекорацияОтветственный = НСтр("ru = 'Ответственный:'");
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	УпрощенныйУчетНДС	= УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	
	ПравилаПостановления735 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Объект.Дата) = 3;
	
	ИспользуетсяПостановлениеНДС1137	= УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Объект.Дата);
	
	ОтражатьСуммыВЖурнале = Объект.Дата >= '20150101' И (ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов"));
		
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	Если Объект.СформированПриВводеНачальныхОстатковНДС Тогда
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.Контрагент.ТолькоПросмотр			= Форма.НаОснованииОтчетаКомитенту;
	Элементы.Продавец.Доступность				= ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ДоговорКомитента.Доступность		= ЗначениеЗаполнено(Объект.Комитент);
	
	Элементы.НомерИсправленияСистемный.Доступность	= Объект.Исправление;
	Элементы.ДатаИсправлениясистемная.Доступность	= Объект.Исправление;
	
	Элементы.ГруппаВидСчетаФактуры.Доступность	= Форма.ИспользуетсяПостановлениеНДС1137;
	Элементы.ГруппаВидаОперации.Видимость 		= Форма.ИспользуетсяПостановлениеНДС1137;
	Элементы.ГруппаСпособПолучения.Видимость 	= Форма.ИспользуетсяПостановлениеНДС1137;
	
	Если Форма.ИспользуетсяПостановлениеНДС1137 И Форма.ПравилаПостановления735
		И Форма.ВидДоговораКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом") Тогда
		
		Если Объект.Дата < '20150101' Тогда
			Элементы.ГруппаСчетФактураСубкомиссионер.Видимость = Истина;
			Элементы.ГруппаСводныйСчетФактура.Видимость = Ложь;
			Элементы.ГруппаРеквизитыСчетаФактурыНаАванс.Видимость = Истина;
		Иначе	
			Элементы.ГруппаСводныйСчетФактура.Видимость = Истина;
			Элементы.ГруппаСчетФактураСубкомиссионер.Видимость = Ложь;
			Элементы.ГруппаРеквизитыСчетаФактурыНаАванс.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСводныйСчетФактура.Видимость = Ложь;
		Элементы.ГруппаСчетФактураСубкомиссионер.Видимость = Ложь;
		Элементы.ГруппаРеквизитыСчетаФактурыНаАванс.Видимость = Истина;
	КонецЕсли;
	
	НадписьВыбор = НСтр("ru = 'Выбор'");
	Форма.НадписьПлатежныеДокументы = "Платежные документы";
	
	Если Объект.Дата >= '20150101' Тогда
		
		КоличествоСчетовФактурВыданныхПокупателям = Объект.СчетаФактурыВыданныеПокупателям.Количество();
		
		Если КоличествоСчетовФактурВыданныхПокупателям = 0 Тогда
			Форма.НадписьСчетФактураВыбор = НадписьВыбор;
			Элементы.ГруппаСчетаФактурыВыданныеПокупателям.ТекущаяСтраница = Элементы.ГруппаСчетФактураВыбор;
		ИначеЕсли КоличествоСчетовФактурВыданныхПокупателям = 1 Тогда 
			Элементы.ГруппаСчетаФактурыВыданныеПокупателям.ТекущаяСтраница = Элементы.ГруппаОдинСчетФактураВыданныйПокупателю;
		Иначе
			Элементы.ГруппаСчетаФактурыВыданныеПокупателям.ТекущаяСтраница = Элементы.ГруппаНесколькоСчетовФактурВыданныхПокупателям;
			
			ФормСтрока     = "Л = ru_RU; ЧДЦ=0";
			ПарПредмета    = "документ,документа,документов,м,,,,0";
			ПрописьЧисла   = ЧислоПрописью(КоличествоСчетовФактурВыданныхПокупателям, ФормСтрока, ПарПредмета);
			ИндексПредмета = Найти(ПрописьЧисла, "док");
			ТекстДокументы = Строка(КоличествоСчетовФактурВыданныхПокупателям) 
				+ " " 
				+ Сред(ПрописьЧисла, ИндексПредмета, СтрДлина(ПрописьЧисла)- ИндексПредмета - 3);
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2 и еще %3)'"), 
				ТекстДокументы, 
				Строка(Объект.СчетаФактурыВыданныеПокупателям[0].СчетФактура), 
				КоличествоСчетовФактурВыданныхПокупателям - 1);
				
			Форма.НадписьСчетаФактурыВыданныеПокупателю = ТекстНадписи;
			
		КонецЕсли;

	КонецЕсли;
	
	Если Форма.ИспользуетсяПостановлениеНДС1137 И Объект.Исправление Тогда
		Элементы.ГруппаТекущиеНомераИДаты.ТекущаяСтраница 	= Элементы.ГруппаИсправляемый;  
		Элементы.ГруппаРеквизитыИсправления.Видимость 		= Истина;  
		Форма.НадписьСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерВходящегоДокумента,Формат(Объект.ДатаВходящегоДокумента,"ДЛФ=Д"));
	Иначе
		Элементы.ГруппаТекущиеНомераИДаты.ТекущаяСтраница 	= Элементы.ГруппаТекущий;
		Элементы.ГруппаРеквизитыИсправления.Видимость 		= Ложь;  
	КонецЕсли;
	
	ТекущийКод = Элементы.КодВидаОперации.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда 
		Форма.НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		Форма.НадписьВидОперации = "";
	КонецЕсли;
	
	Элементы.ГруппаПлатежныеДокументы.Видимость = Ложь;
	Элементы.ГруппаНаАвансКомиссинеруПоЗакупкеСводный.Видимость = Ложь;
	Элементы.СтраницыКомитентПродавец.Видимость = Истина;
	
	НДСПредъявленКВычетуДоступен = 
		(УчетНДСКлиентСервер.Версия(Объект.Дата) > 1 ИЛИ Форма.УпрощенныйУчетНДС)
		И НЕ Форма.НаОснованииОтчетаКомитенту
		И НЕ (Форма.ИспользуетсяПостановлениеНДС1137 И Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАвансКомитента"))
		И Форма.ПлательщикНДС;

	Если НДСПредъявленКВычетуДоступен Тогда
		Элементы.ГруппаНДСПредъявленКВычетуСтраницы.ТекущаяСтраница = Элементы.ГруппаНДСПредъявленКВычету;
	Иначе
		Элементы.ГруппаНДСПредъявленКВычетуСтраницы.ТекущаяСтраница = Элементы.ГруппаНДСПредъявленКВычетуПусто;
	КонецЕсли;
			
	Если Форма.ИспользуетсяПостановлениеНДС1137
		И Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАвансКомитента") Тогда
		
		Элементы.СтраницыКомитентПродавец.ТекущаяСтраница	= Элементы.СтраницаНаАвансКомитента;
		
		Если Форма.ИспользуетсяПостановлениеНДС1137
			И Форма.ПравилаПостановления735
			И Форма.ВидДоговораКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом") Тогда
			Элементы.СтраницыКомитентПродавец.Доступность 		= Ложь;
		Иначе	
			Элементы.СтраницыКомитентПродавец.Доступность 		= Истина;
		КонецЕсли;
		
	ИначеЕсли Форма.ИспользуетсяПостановлениеНДС1137
		И Форма.ВидДоговораКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку") Тогда
		
		// Счет-фактура полученный покупателем-комитентом от комиссионера
		
		Элементы.СтраницыКомитентПродавец.Доступность 		= Истина;
		Элементы.ГруппаИтоги.ТекущаяСтраница = Элементы.ГруппаНетКомиссии;
		
		Если Объект.Дата < '20150101' Тогда
			Элементы.СтраницыКомитентПродавец.ТекущаяСтраница	= Элементы.СтраницаНаАвансКомиссинеруПоЗакупке;
		Иначе
			Элементы.ГруппаПлатежныеДокументы.Видимость = Истина;
			Элементы.ГруппаНаАвансКомиссинеруПоЗакупкеСводный.Видимость = Истина;
			Элементы.СтраницыКомитентПродавец.Видимость = Ложь;
			
			КоличествоПродавцов = Объект.Продавцы.Количество();
			
			Если КоличествоПродавцов = 0 Тогда
				Форма.НадписьНесколькоПродавцовВыбор = НадписьВыбор;
				Элементы.ГруппаНесколькоПродавцовСтраницы.ТекущаяСтраница = Элементы.ГруппаНесколькоПродавцовВыбор;
			ИначеЕсли КоличествоПродавцов = 1 Тогда
				Элементы.ГруппаНесколькоПродавцовСтраницы.ТекущаяСтраница = Элементы.ГруппаОдинПродавец;
			Иначе
				Элементы.ГруппаНесколькоПродавцовСтраницы.ТекущаяСтраница = Элементы.ГруппаНесколькоПродавцовСсылка;
				
				ФормСтрока     = "Л = ru_RU; ЧДЦ=0";
				ПарПредмета    = "продавец,продавца,продавцов,м,,,,0";
				ПрописьЧисла   = ЧислоПрописью(КоличествоПродавцов, ФормСтрока, ПарПредмета);
				ИндексПредмета = Найти(ПрописьЧисла, "прод");
				ТекстДокументы = Строка(КоличествоПродавцов) 
				+ " " 
				+ Сред(ПрописьЧисла, ИндексПредмета, СтрДлина(ПрописьЧисла)- ИндексПредмета - 3);
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2 и еще %3)'"), 
				ТекстДокументы, 
				Строка(Объект.Продавцы[0].Продавец), 
				КоличествоПродавцов - 1);
				
				Форма.НадписьНесколькоПродавцовСсылка = ТекстНадписи;
				
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		Элементы.СтраницыКомитентПродавец.Доступность 		= Ложь;
		Элементы.СтраницыКомитентПродавец.ТекущаяСтраница	= Элементы.СтраницаНаАвансКомитента;
		Элементы.ГруппаИтоги.ТекущаяСтраница = Элементы.ГруппаНетКомиссии;
	КонецЕсли;
	
	Если Объект.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАвансКомитента")
		И Форма.ОтражатьСуммыВЖурнале Тогда
		Элементы.ГруппаИтоги.ТекущаяСтраница = Элементы.ГруппаЕстьКомиссия;
	Иначе
		Элементы.ГруппаИтоги.ТекущаяСтраница = Элементы.ГруппаНетКомиссии;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма, ПредставлениеДокумента)
	
	Форма.Заголовок = ПредставлениеДокумента.СчетФактураПредставление;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетФактуруНаАвансНаСервере(Знач ДокументОснование)
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьСчетФактуруНаАванс(ДокументОснование, ДокументОбъект.Ссылка, Объект.ДоговорКонтрагента);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Функция ДатаПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		Объект.КодВидаОперации	= ПолучитьКодВидаОперации(Объект.ВидСчетаФактуры, НаОснованииОтчетаКомитенту);
	Иначе
		
		Объект.КодВидаОперации	= "";
		
		Объект.Исправление		= Ложь;
		Объект.НомерИсправления	= 0;
		Объект.ДатаИсправления	= '00010101';
		
		Объект.ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыПолученного.НаАванс;
		
		Объект.Продавец	= Неопределено;
		
		Объект.Комитент			= Неопределено;
		Объект.ДоговорКомитента	= Неопределено;
		
	КонецЕсли;
	
	Если ТекущаяДатаДокумента < '20150101'
		И Объект.Дата >= '20150101' Тогда 
		ЗаполнитьСписокКодовОпераций();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокКодовОпераций()
	
	СписокВыбораКодов = Элементы.КодВидаОперации.СписокВыбора;
	
	ИспользоватьКоды2015 = Ложь;
	Если Объект.Дата >= '20150101' Тогда 
		ИспользоватьКоды2015 = Истина;
	КонецЕсли;

	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры, 
		СписокВыбораКодов,
		ИспользоватьКоды2015);
		
КонецПроцедуры

&НаСервере
Процедура ВидСчетаФактурыПриИзмененииНаСервере()

	Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		Объект.НДСПредъявленКВычету	= Ложь;
		Если ОтражатьСуммыВЖурнале Тогда 
			Объект.СуммаДокументаКомиссия		= Объект.Авансы.Итог("Сумма");
			Объект.СуммаНДСДокументаКомиссия	= Объект.Авансы.Итог("СуммаНДС");
		КонецЕсли;
	ИначеЕсли Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		Объект.Комитент			= Неопределено;
		Объект.ДоговорКомитента	= Неопределено;
		Объект.СуммаДокументаКомиссия		= 0;
		Объект.СуммаНДСДокументаКомиссия	= 0;
		Если УчетНДСКлиентСервер.Версия(Объект.Дата) >= 2 Тогда
			Объект.НДСПредъявленКВычету	= Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		Объект.КодВидаОперации	= ПолучитьКодВидаОперации(Объект.ВидСчетаФактуры, НаОснованииОтчетаКомитенту);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	ПредставлениеДокумента = Документы.СчетФактураПолученный.ПолучитьПредставлениеДокумента(Объект.Ссылка, Объект.ВидСчетаФактуры);
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	Объект.ДокументОснование	= Неопределено;
	Объект.ДокументыОснования.Очистить();
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииНаСервере(ДанныеОбъекта)

	ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеОбъекта);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеОбъекта)

	СвойстваДоговора	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОбъекта.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, ВидДоговора");
	
	ДанныеОбъекта.ВалютаДокумента			= СвойстваДоговора.ВалютаВзаиморасчетов;
	ДанныеОбъекта.ВидДоговораКонтрагента	= СвойстваДоговора.ВидДоговора;
	
	Если ДанныеОбъекта.ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		ДанныеОбъекта.Продавец	= Неопределено;
	КонецЕсли;
	
	ДанныеОбъекта.СуммаДокумента	= 0;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура КомитентПриИзмененииНаСервере(ДанныеОбъекта)

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ДанныеОбъекта.ДоговорКомитента,
		ДанныеОбъекта.Комитент, ДанныеОбъекта.Организация, ПолучитьМассивВидовДоговоровКомитента());

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоровКомитента()

	МассивВидов	= Новый Массив;
	МассивВидов.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	
	Возврат МассивВидов;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКодВидаОперации(ВидСчетаФактуры, НаОснованииОтчетаКомитенту)

	КодВидаОперации	= "";
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента
		ИЛИ НаОснованииОтчетаКомитенту Тогда
		КодВидаОперации	= "05";
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		КодВидаОперации	= "02";
	КонецЕсли;
	
	Возврат КодВидаОперации;

КонецФункции

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДокументаОснования()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаполнитьСчетФактуруНаАвансНаСервере(Объект.ДокументОснование);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы()
	
	СтруктураПараметров = Новый Структура;
	
	ЗначенияЗаполнения = Новый Структура();
	
	ЗначенияЗаполнения.Вставить("ТипСчетаФактуры", "Полученный");
	ЗначенияЗаполнения.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ЗначенияЗаполнения.Вставить("Исправление", Объект.Исправление);
	ЗначенияЗаполнения.Вставить("СчетФактура", Объект.Ссылка);
	
	ЗначениеОтбора = Новый Структура();
	
	ЗначениеОтбора.Вставить("Организация", Объект.Организация);
	ЗначениеОтбора.Вставить("Контрагент", Объект.Контрагент);
	
	СтруктураПараметров.Вставить("Документ", Объект.ДокументОснование);
	СтруктураПараметров.Вставить("Договор", Объект.ДоговорКонтрагента);
    СтруктураПараметров.Вставить("Отбор", ЗначениеОтбора);
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения); 
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьОснование()
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьСтруктуруПараметровФормы();
		
	ОткрытьФорму("Обработка.ПодборОснованийСчетаФактуры.Форма.ФормаВыбораОснованияСчетаФактуры", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
					
КонецПроцедуры 

&НаКлиенте
Процедура Изменить(Команда)
	
	ВыбратьОснование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДоговора()
	
	ДанныеОбъекта	= Новый Структура("Организация, Контрагент, ДоговорКонтрагента,
		|СуммаДокумента, ВалютаДокумента, Продавец,
		|ВидДоговораКонтрагента, ИспользуетсяПостановлениеНДС1137");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВидДоговораКонтрагента	= ВидДоговораКонтрагента;
	ДанныеОбъекта.ИспользуетсяПостановлениеНДС1137	= ИспользуетсяПостановлениеНДС1137;
	
	ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	ВидДоговораКонтрагента	= ДанныеОбъекта.ВидДоговораКонтрагента;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКомитентаПриИзменении(Элемент)
	ПриИзмененииДоговора();
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидОперации = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидОперации = "";
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаВходящегоДокумента;
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДаты()
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	ЗапуститьПроверкуКонтрагентов();

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьОснование();

КонецПроцедуры

&НаКлиенте
Процедура ДатаИсправленияПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаИсправления;
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(ВыбранныйКод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйКод <> Неопределено Тогда
		Модифицированность = Истина;
		Объект.КодВидаОперации = ВыбранныйКод.Значение;
		НадписьВидОперации = Сред(ВыбранныйКод.Представление, 5);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СчетФактураВыданныйПокупателюПриИзмененииНаСервере()
	
	ОснованиеСчетаФактурыВыданного	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетФактураВыданныйПокупателю, "ДокументОснование");
	Если ТипЗнч(ОснованиеСчетаФактурыВыданного) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		Объект.Субкомиссионер =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеСчетаФактурыВыданного, "Контрагент");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСчетаФактурыВыданныеПокупателям()
	
	ЕстьОшибкиЗаполнения = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаВходящегоДокумента", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	АдресХранилищаСчетаФактурыВыданныеПокупателям = ПоместитьСчетаФактурыВыданныеПокупателямВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаСчетаФактурыВыданныеПокупателям", АдресХранилищаСчетаФактурыВыданныеПокупателям);
	
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ДокументОснование", Объект.ДокументОснование);
	ПараметрыФормы.Вставить("ДатаВходящегоДокумента", Объект.ДатаВходящегоДокумента);
	ПараметрыФормы.Вставить("ВидСчетаФактуры", Объект.ВидСчетаФактуры);
	ПараметрыФормы.Вставить("Комитент", Объект.Контрагент);
		
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаСчетаФактурыВыданныеПокупателям",
			ПараметрыФормы,
			ЭтаФорма);
					
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПродавцов()
	
	АдресХранилищаПродавцов = ПоместитьПродавцовВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаПродавцов", АдресХранилищаПродавцов);
	
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаПродавцы",
			ПараметрыФормы,
			ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПлатежныеДокументы()
	
	АдресХранилищаПлатежныеДокументы = ПоместитьПлатежныеДокументыВоВременноеХранилищеНаСервере();

	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресХранилищаПлатежныеДокументы", АдресХранилищаПлатежныеДокументы);
	
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаПлатежныеДокументы",
			ПараметрыФормы,
			ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьСчетаФактурыВыданныеПокупателямВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.СчетаФактурыВыданныеПокупателям.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьПродавцовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.Продавцы.Выгрузить(), УникальныйИдентификатор);

КонецФункции	

&НаСервере
Функция ПоместитьПлатежныеДокументыВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ПлатежноРасчетныеДокументы.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораСчетаФактурыВыданныеПокупателямНаСервере(ВыбранноеЗначение)

	ТаблицаСчетаФактурыВыданныеПокупателям = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаСчетаФактурыВыданныеПокупателям);
	
	Объект.СчетаФактурыВыданныеПокупателям.Загрузить(ТаблицаСчетаФактурыВыданныеПокупателям);

	КоличествоСФВыданныхПокупателю = Объект.СчетаФактурыВыданныеПокупателям.Количество();
	Если КоличествоСФВыданныхПокупателю > 0  Тогда
		Объект.СчетФактураВыданныйПокупателю = Объект.СчетаФактурыВыданныеПокупателям[0].СчетФактура;
		Если КоличествоСФВыданныхПокупателю > 1 Тогда
			Объект.КодВидаОперации = "28";
		КонецЕсли;
	Иначе
		Объект.СчетФактураВыданныйПокупателю = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	Объект.СуммаДокумента            = Объект.СчетаФактурыВыданныеПокупателям.Итог("Сумма");
	Объект.СуммаДокументаКомиссия    = Объект.СчетаФактурыВыданныеПокупателям.Итог("Сумма");
	Объект.СуммаНДСДокумента         = Объект.СчетаФактурыВыданныеПокупателям.Итог("НДС");
	Объект.СуммаНДСДокументаКомиссия = Объект.СчетаФактурыВыданныеПокупателям.Итог("НДС");
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПродавцовНаСервере(ВыбранноеЗначение)

	ТаблицаПродавцов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаПродавцов);
	
	Объект.Продавцы.Загрузить(ТаблицаПродавцов);

	КоличествоПродавцов = Объект.Продавцы.Количество();
	Если КоличествоПродавцов > 0 Тогда
		Объект.Продавец = Объект.Продавцы[0].Продавец;
		Если КоличествоПродавцов > 1 Тогда
			Объект.КодВидаОперации = "28";
		КонецЕсли;
	Иначе
		Объект.Продавец = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПлатежныеДокументыНаСервере(ВыбранноеЗначение)

	ТаблицаПлатежныхДокументов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаПлатежныеДокументы);
	
	Объект.ПлатежноРасчетныеДокументы.Загрузить(ТаблицаПлатежныхДокументов);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АвансыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Авансы.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
		"Объект.Авансы.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтотОбъект);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтотОбъект, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтотОбъект, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтотОбъект, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
