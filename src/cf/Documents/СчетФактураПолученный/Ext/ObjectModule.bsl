#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ЗаполнениеПоДаннымОснования = Ложь;
	ВидСчетаФактурыЗаполнения 	= Неопределено;
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") Тогда 
		
		ОснованиеДокумента = ДанныеЗаполнения;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование")
		И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		
		Если ДанныеЗаполнения.Свойство("ВидСчетаФактуры") Тогда
			ВидСчетаФактурыЗаполнения = ДанныеЗаполнения.ВидСчетаФактуры;
			ОснованиеДокумента = ДанныеЗаполнения.ДокументОснование;
		Иначе
			ЗаполнитьСчетФактуруНаАванс(ДанныеЗаполнения.ДокументОснование);
			ЗаполнениеПоДаннымОснования = Истина;
		КонецЕсли;
			
	КонецЕсли;
	
	Если ОснованиеДокумента <> Неопределено 
		И Метаданные().ВводитсяНаОсновании.Содержит(ОснованиеДокумента.Метаданные()) Тогда
		
		ЗаполнитьПоДокументуОснованию(ОснованиеДокумента, ВидСчетаФактурыЗаполнения);
		ЗаполнениеПоДаннымОснования = Истина;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента)Тогда
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();	
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			ВалютаДокумента = ВалютаРегламентированногоУчета;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗаполнениеПоДаннымОснования Тогда
		СтруктураПараметров	= Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
		НДСПредъявленКВычету = Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	УстановитьПредставлениеНомера();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Возврат;	
	КонецЕсли; 
	
	Если ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	
	СводныйКомиссионный = Ложь;

	Если ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		
		// Счет-фактура полученный покупателем-комитентом от комиссионера
		
		Если ЗначениеЗаполнено(Продавец)
			И Продавцы.Количество() = 0 Тогда
		
			НоваяСтрока = Продавцы.Добавить();
			НоваяСтрока.Продавец = Продавец;
		
		КонецЕсли; 
		
		Если Продавцы.Количество() > 1 Тогда
			
			Если Дата < '20150101' Тогда
				Продавцы.Очистить();
				НоваяСтрока = Продавцы.Добавить();
				НоваяСтрока.Продавец = Продавец;
			Иначе
				СводныйКомиссионный = Истина;
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		// Счет-фактура полученный комиссионером от комитента-продавца
		
		Если ЗначениеЗаполнено(СчетФактураВыданныйПокупателю)
			И СчетаФактурыВыданныеПокупателям.Количество() = 0 Тогда
		
			НоваяСтрока = СчетаФактурыВыданныеПокупателям.Добавить();
			НоваяСтрока.СчетФактура = СчетФактураВыданныйПокупателю;
			НоваяСтрока.Субкомиссионер = Субкомиссионер;
			НоваяСтрока.НДС = СуммаНДСДокумента;
			НоваяСтрока.Сумма = СуммаДокумента;
		
		КонецЕсли;
		
		Если СчетаФактурыВыданныеПокупателям.Количество() > 1 Тогда
			
			Если Дата < '20150101' Тогда
			
				СчетаФактурыВыданныеПокупателям.Очистить();
				НоваяСтрока = СчетаФактурыВыданныеПокупателям.Добавить();
				НоваяСтрока.СчетФактура = СчетФактураВыданныйПокупателю;
				НоваяСтрока.Субкомиссионер = Субкомиссионер;
				НоваяСтрока.НДС = СуммаНДСДокумента;
				НоваяСтрока.Сумма = СуммаДокумента;
				
			Иначе
				СводныйКомиссионный = Истина;
			КонецЕсли;
				
		КонецЕсли;
		
		// Реквизиты такого счета-фактуры вносятся вручную
		СчетФактураБезНДС = СуммаНДСДокумента = 0;
		
		Возврат;
		
	КонецЕсли;

	Если ЕстьДублиСчетаФактуры() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	УчетНДС.ОбновитьРеквизитыСвязанныхСчетовФактур(ЭтотОбъект, "СчетФактураПолученный", Отказ);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		
		СуммаДокумента = Авансы.Итог("Сумма");
		
		Если СводныйКорректировочный Тогда
			СводныйКорректировочный = Ложь;
		КонецЕсли;

	Иначе
		
		ОбновлятьРеквизитыПриЗаписи = ?(ДополнительныеСвойства.Свойство("ОбновлятьРеквизитыПриЗаписи"), ДополнительныеСвойства.ОбновлятьРеквизитыПриЗаписи, Истина);
		Если ОбновлятьРеквизитыПриЗаписи Тогда
			ОпределениеПараметровСчетаФактуры();
		КонецЕсли;
		
		Если ДокументыОснования.Количество() > 0 Тогда
			ДокументОснование = ДокументыОснования[0].ДокументОснование;
		Иначе
			ДокументОснование = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Документы.КорректировкаПоступления.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Дата);
	
	ЕстьРабочийЭСФ = ЭлектронныеДокументы.ЕстьРабочийЭСФ(Ссылка);
	
	ВидДоговораКонтрагента	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ДокументыОснования.ДокументОснование");
		
		Если Дата >= '20150101' 
			И ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Авансы.Сумма");
			МассивНепроверяемыхРеквизитов.Добавить("Авансы.СтавкаНДС");
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");
		
		Если ДокументыОснования.Количество() = 0 И НЕ ЕстьРабочийЭСФ Тогда
			ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Документы-основания счета-фактуры""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьВыбор",, Отказ);			
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из ДокументыОснования Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование)  
				И НЕ ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") 
				И НЕ СтрокаТЧ.ДокументОснование.Проведен Тогда
					ТекстСообщения = НСтр("ru = 'Документ не проведен. Счет-фактуру можно провести только на основании проведенного документа.'");
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", 
						"Корректность", 
						"Документ-основание", 
						СтрокаТЧ.НомерСтроки, 
						"Документы-основания счета-фактуры", 
						ТекстСообщения);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
			КонецЕсли;
		КонецЦикла;
		
		ДокументыОснованияСвернуто	= ДокументыОснования.Выгрузить(, "ДокументОснование");
		ДокументыОснованияСвернуто.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
		ДокументыОснованияСвернуто.ЗаполнитьЗначения(1, "Количество");
		ДокументыОснованияСвернуто.Свернуть("ДокументОснование", "Количество");
		Для Каждого СтрокаДокументОснование Из ДокументыОснованияСвернуто Цикл
			
			Если ЗначениеЗаполнено(СтрокаДокументОснование.ДокументОснование)
				И СтрокаДокументОснование.Количество > 1 Тогда
				
				Отбор	= Новый Структура("ДокументОснование", СтрокаДокументОснование.ДокументОснование);
				
				СтрокиТЧ	= ДокументыОснования.НайтиСтроки(Отбор);
				Если СтрокиТЧ.Количество() < 2 Тогда 
					Продолжить;
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 уже выбран в строке %2. Повторный выбор не допускается.'"),
					СтрокаДокументОснование.ДокументОснование,
					СтрокиТЧ[0].НомерСтроки);
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", 
					"Корректность", 
					"Документ - основание для выписки счета-фактуры", 
					СтрокиТЧ[1].НомерСтроки, 
					"Документы-основания счета-фактуры", 
					ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
					
				КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный И ИспользуетсяПостановлениеНДС1137 Тогда
		
		Для каждого СтрокаТЧ Из ДокументыОснования Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерИсходногоДокумента)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаИсходногоДокумента) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру для документа-основания в строке %1 списка ""Документы-основания счета-фактуры""'"), СтрокаТЧ.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
			КонецЕсли;
			
			Если НЕ СтрокаТЧ.УчитыватьИсправлениеИсходногоДокумента Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерИсправленияИсходногоДокумента)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаИсправленияИсходногоДокумента) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру для документа-основания в строке %1 списка ""Документы-основания счета-фактуры""'"), СтрокаТЧ.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьДокументыОснования",, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		
		Если НЕ Исправление Тогда
			МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаИсправления");
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаИсправления");
		МассивНепроверяемыхРеквизитов.Добавить("КодВидаОперации");
		
	КонецЕсли;
	
	Если НЕ ИспользуетсяПостановлениеНДС1137
		ИЛИ (НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление
				И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс)
		ИЛИ НЕ ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Продавец");
		
	КонецЕсли;
	
	Если НЕ ИспользуетсяПостановлениеНДС1137
		ИЛИ НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента 
		ИЛИ (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента 
			И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Комитент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКомитента");
		
	КонецЕсли;
	
	Если БланкСтрогойОтчетности Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КодВидаОперации");
	КонецЕсли;
	
	Если ЕстьРабочийЭСФ Тогда
	    МассивНепроверяемыхРеквизитов.Добавить("ДокументОснование");
		МассивНепроверяемыхРеквизитов.Добавить("ДокументыОснования.ДокументОснование");	
	КонецЕсли; 	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
		
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка  ИЛИ СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.СчетФактураПолученный.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ 
		ИЛИ ПараметрыПроведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаУчетаСчетовФактурПоступлениеАванс = УчетНДС.ПодготовитьЗаписьЖурналаУчетаСчетовФактур(
		ПараметрыПроведения.ЗаписьЖурналаПоступлениеАванс);
		
	ЗаписьЖурналаУчетаСчетовФактурКорректировка = УчетНДС.ПодготовитьЗаписьЖурналаУчетаСчетовФактур(
		ПараметрыПроведения.ЗаписьЖурналаКорректировка);
		
	ТаблицаПредъявленногоНДС = УчетНДСБП.ПодготовитьТаблицуПредъявленногоНДС(
		ПараметрыПроведения.РеквизитыПоступление, Отказ);
		
	ТаблицаСторноНаВыданныйАванс = УчетНДС.ПодготовитьТаблицуСторноНаВыданныйАванс(
		ПараметрыПроведения.РеквизитыАванс, Отказ);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ДОКУМЕНТА
	
	УчетНДС.СформироватьДвиженияПолученСчетФактураНаПоступление(
		ПараметрыПроведения.РеквизитыПоступление, ТаблицаПредъявленногоНДС, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияПолученСчетФактураНаВыданныйАванс(
		ПараметрыПроведения.РеквизитыАванс, ПараметрыПроведения.ТаблицаАвансов, ТаблицаСторноНаВыданныйАванс, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(
		ЗаписьЖурналаУчетаСчетовФактурПоступлениеАванс, Движения, Отказ);
	
	УчетНДС.СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(
		ЗаписьЖурналаУчетаСчетовФактурКорректировка, Движения, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО") 
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяНДФЛИП")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
		ИЛИ ПолучитьФункциональнуюОпцию("РегистрироватьСчетаФактурыСпецРежимы")) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.РегистрироватьСчетаФактурыСпецРежимы.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры() Экспорт
	
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументыОснования.Количество()=0 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание НЕ выбрано, параметры НЕ определяем
		Возврат;
	КонецЕсли; 
	
	ПараметрыСФ = Неопределено;
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Дата);
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЕстьРабочийЭСФ = ЭлектронныеДокументы.ЕстьРабочийЭСФ(ЭтотОбъект.Ссылка);
	
	Если ДокументОснование <> ДокументыОснования[0].ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	ВидСчетаФактурыПоОснованию = УчетНДСПереопределяемый.ОпределитьВидСчетаФактурыПолученногоПоТипуОснования(ДокументОснование);
	Если ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыПолученного.НаПоступление
		ИЛИ ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		
		Перезаполнить = Ложь;
		Если НЕ ВидСчетаФактуры = ВидСчетаФактурыПоОснованию Тогда
			ВидСчетаФактуры = ВидСчетаФактурыПоОснованию;
			Перезаполнить	= Истина;
		КонецЕсли;	
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда 
			ИсправлениеОснования = ДокументОснование.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
			Если Перезаполнить ИЛИ Исправление <> ИсправлениеОснования Тогда
				ОснованиеСчетаФактуры = ДокументОснование;
				ДокументыОснования.Очистить();
				ДокументОснование = Неопределено;
				Если Не ИсправлениеОснования Тогда 
					Исправление = Ложь;
					НомерИсправления = 0;
					ДатаИсправления = '00010101';
					НомерВходящегоДокумента = "";
					ДатаВходящегоДокумента = '00010101';
				КонецЕсли;
				ЗаполнитьНаОснованииИсправления(ОснованиеСчетаФактуры);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыСФ = УчетНДСПереопределяемый.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект);
	
	Если НЕ ПараметрыСФ.Организация = Неопределено 
		И НЕ ПараметрыСФ.Организация = Организация
		И НЕ ЕстьРабочийЭСФ Тогда
		Номер = "";
		Организация = ПараметрыСФ.Организация;
	КонецЕсли;
	
	Если НЕ ПараметрыСФ.Контрагент = Неопределено 
		И НЕ ПараметрыСФ.Контрагент = Контрагент
		И НЕ ЕстьРабочийЭСФ Тогда
		Контрагент		= ПараметрыСФ.Контрагент;
		КППКонтрагента	= "";
	КонецЕсли;
	
	Если НЕ ПараметрыСФ.Договор = Неопределено 
		И НЕ ПараметрыСФ.Договор = ДоговорКонтрагента Тогда
		ДоговорКонтрагента = ПараметрыСФ.Договор;
	КонецЕсли;
	
	Если СуммаДокумента <> ПараметрыСФ.СуммаДокумента И НЕ ЕстьРабочийЭСФ Тогда
		СуммаДокумента = ПараметрыСФ.СуммаДокумента;
	КонецЕсли;
	
	Если СуммаУвеличение <> ПараметрыСФ.СуммаУвеличение И НЕ ЕстьРабочийЭСФ Тогда
		СуммаУвеличение = ПараметрыСФ.СуммаУвеличение;
	КонецЕсли;
	
	Если СуммаУменьшение <> ПараметрыСФ.СуммаУменьшение И НЕ ЕстьРабочийЭСФ Тогда
		СуммаУменьшение = ПараметрыСФ.СуммаУменьшение;
	КонецЕсли;
	
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		
		Если СчетФактураБезНДС <> ПараметрыСФ.СчетФактураБезНДС Тогда
			СчетФактураБезНДС = ПараметрыСФ.СчетФактураБезНДС;
		КонецЕсли;
		Если СуммаНДСДокумента <> ПараметрыСФ.СуммаНДСДокумента И НЕ ЕстьРабочийЭСФ Тогда
			СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
		КонецЕсли; 
		Если СуммаНДСУвеличение <> ПараметрыСФ.СуммаНДСУвеличение И НЕ ЕстьРабочийЭСФ Тогда
			СуммаНДСУвеличение = ПараметрыСФ.СуммаНДСУвеличение;
		КонецЕсли; 
		Если СуммаНДСУменьшение <> ПараметрыСФ.СуммаНДСУменьшение И НЕ ЕстьРабочийЭСФ Тогда
			СуммаНДСУменьшение = ПараметрыСФ.СуммаНДСУменьшение;
		КонецЕсли;
		
		Если Дата >= '20150101' Тогда 
			Если СуммаУвеличениеКомиссия <> ПараметрыСФ.СуммаУвеличениеКомиссия И НЕ ЕстьРабочийЭСФ Тогда
				СуммаУвеличениеКомиссия = ПараметрыСФ.СуммаУвеличениеКомиссия;
			КонецЕсли;
			Если СуммаУменьшениеКомиссия <> ПараметрыСФ.СуммаУменьшениеКомиссия И НЕ ЕстьРабочийЭСФ Тогда
				СуммаУменьшениеКомиссия = ПараметрыСФ.СуммаУменьшениеКомиссия;
			КонецЕсли;
			Если СуммаДокументаКомиссия <> ПараметрыСФ.СуммаДокументаКомиссия И НЕ ЕстьРабочийЭСФ Тогда
				СуммаДокументаКомиссия = ПараметрыСФ.СуммаДокументаКомиссия;
			КонецЕсли;
			Если СуммаНДСДокументаКомиссия <> ПараметрыСФ.СуммаНДСДокументаКомиссия И НЕ ЕстьРабочийЭСФ Тогда
				СуммаНДСДокументаКомиссия = ПараметрыСФ.СуммаНДСДокументаКомиссия;
			КонецЕсли;
			Если СуммаНДСУвеличениеКомиссия <> ПараметрыСФ.СуммаНДСУвеличениеКомиссия И НЕ ЕстьРабочийЭСФ Тогда
				СуммаНДСУвеличениеКомиссия = ПараметрыСФ.СуммаНДСУвеличениеКомиссия;
			КонецЕсли; 
			Если СуммаНДСУменьшениеКомиссия <> ПараметрыСФ.СуммаНДСУменьшениеКомиссия И НЕ ЕстьРабочийЭСФ Тогда
				СуммаНДСУменьшениеКомиссия = ПараметрыСФ.СуммаНДСУменьшениеКомиссия;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПараметрыСФ.ВалютаДокумента = Неопределено 
		И НЕ ВалютаДокумента = ПараметрыСФ.ВалютаДокумента
		И НЕ ЕстьРабочийЭСФ Тогда
		ВалютаДокумента = ПараметрыСФ.ВалютаДокумента;
	КонецЕсли;
	
	Если ЭтоНовый() И ИспользуетсяПостановлениеНДС1137 И НЕ ЗначениеЗаполнено(КодВидаОперации) Тогда
		Если НЕ ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			КодВидаОперации = ПолучитьКодВидаОперации();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		РезультатПоискаИсправляемыйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(
			ДокументыОснования[0].ДокументОснование.ИсправляемыйДокументПоступления);
		Если РезультатПоискаИсправляемыйСчетФактура = Неопределено Тогда
			РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
	Иначе
		РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка();
	КонецЕсли;
	
	Если ИсправляемыйСчетФактура <> РезультатПоискаИсправляемыйСчетФактура Тогда
		ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура;
		Если Исправление Тогда 
			РеквизитыИсправляемогоСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсправляемыйСчетФактура, "ДатаВходящегоДокумента, НомерВходящегоДокумента");
			НомерВходящегоДокумента = РеквизитыИсправляемогоСчетаФактуры.НомерВходящегоДокумента;
			ДатаВходящегоДокумента	= РеквизитыИсправляемогоСчетаФактуры.ДатаВходящегоДокумента;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументОснование <> ДокументыОснования[0].ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
 
	Если ПустаяСтрока(КППКонтрагента)
		И ТипЗнч(ДокументыОснования[0].ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		КППКонтрагента	= УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(ДокументыОснования[0].ДокументОснование, "Грузоотправитель");
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный 
		И ПараметрыСФ.РеквизитыОснований.Количество() > 0 Тогда
		
		Для Каждого Основание Из ДокументыОснования Цикл
			
			СтрокаСРеквизитами = ПараметрыСФ.РеквизитыОснований.Найти(Основание.ДокументОснование, "ДокументОснование");	
			Если СтрокаСРеквизитами <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Основание, СтрокаСРеквизитами); 
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаОснований = ПараметрыСФ.РеквизитыОснований;
		ТаблицаОснований.Свернуть("НомерИсходногоДокумента, ДатаИсходногоДокумента");
		
		Если ТаблицаОснований.Количество() > 1 Тогда
			ПараметрСводныйКорректировочный = Истина;
		Иначе
			ПараметрСводныйКорректировочный = Ложь;
		КонецЕсли; 
	Иначе
		ПараметрСводныйКорректировочный = Ложь;
	КонецЕсли;
	
	Если СводныйКорректировочный <> ПараметрСводныйКорректировочный Тогда
		СводныйКорректировочный = ПараметрСводныйКорректировочный;
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьКодВидаОперации(КодВидаОперацииОснования = Неопределено)

	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Дата",                     Дата);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",          ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",              Исправление);
	СтруктураПараметров.Вставить("ВидДоговора",              ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДоговорКонтрагента, "ВидДоговора"));
	СтруктураПараметров.Вставить("СчетФактураБезНДС",        СчетФактураБезНДС);
	СтруктураПараметров.Вставить("КодВидаОперации",          КодВидаОперации);
	СтруктураПараметров.Вставить("КодВидаОперацииОснования", КодВидаОперацииОснования);
	СтруктураПараметров.Вставить("ДокументыОснования",       ДокументыОснования.Выгрузить(,"ДокументОснование"));
	
	Возврат Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(СтруктураПараметров);

КонецФункции

Процедура ЗаполнитьСчетФактуруНаАванс(Основание, СчетФактура = Неопределено, ДоговорКонтрагента = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	ПараметрыЗаполнения = Документы.СчетФактураПолученный.ПодготовитьПараметрыЗаполненияАванс(Основание, СчетФактура, ДоговорКонтрагента, Отказ);
	
	Если Отказ Тогда
		ТекстСообщения = ?(ТипЗнч(ПараметрыЗаполнения) = Тип("Строка"), 
			ПараметрыЗаполнения,
			НСтр("ru='Нет данных для счета-фактуры на аванс.'"));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаполнения.Реквизиты);
	
	Авансы.Очистить();
	Для каждого СтрокаСФ Из ПараметрыЗаполнения.Авансы Цикл
		НоваяСтрока = Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСФ);
	КонецЦикла;
	
	Если УчетНДСКлиентСервер.Версия(Дата) >= 2 Тогда
		НДСПредъявленКВычету = Истина;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента
		И Дата >= '20150101' Тогда
		СуммаДокументаКомиссия 		= Авансы.Итог("Сумма");
		СуммаНДСДокументаКомиссия 	= Авансы.Итог("СуммаНДС");
	Иначе
		СуммаДокументаКомиссия 		= 0;
		СуммаНДСДокументаКомиссия 	= 0;
	КонецЕсли;
	
	СуммаДокумента 		= Авансы.Итог("Сумма");
	СуммаНДСДокумента 	= Авансы.Итог("СуммаНДС");
	
	ДокументыОснования.Очистить();
	Основания = ДокументыОснования.Добавить();
	Основания.ДокументОснование = Основание;
	
	ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(Основание);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДатаНомер);
	
	КодВидаОперацииОснования   = "";
	ЭтотОбъект.КодВидаОперации = ПолучитьКодВидаОперации(КодВидаОперацииОснования);
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруНаПоступление(Основание)
	
	СтруктураОтбора = Новый Структура("ВозвратЧерезКомиссионера", Ложь);
	СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Основание,,,СтруктураОтбора);
	
	Если ЗначениеЗаполнено(СуществующийСФ) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='На основании документа %1 уже введен %2'"), 
			Основание, 
			СуществующийСФ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Дата = Основание.Дата;
	
	ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
	
	Основания = ДокументыОснования.Добавить();
	Основания.ДокументОснование = Основание;
	
	ОпределениеПараметровСчетаФактуры();
	
	СтруктураПараметров	= Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
	НДСПредъявленКВычету	= Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьПоСчетуФактуреНаАванс(Основание)
	
	Если НЕ Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
		И НЕ Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Исправленные счета-фактуры с видом ""%1"" вводятся на основании документа ""Корректировка поступления""'"), 
			Основание.ВидСчетаФактуры);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, , "Номер, Дата, СформированПриВводеНачальныхОстатковНДС, Проведен, ПометкаУдаления");
	
	Для каждого СтрокаАванса Из Основание.Авансы Цикл 
		НоваяСтрока = Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
	КонецЦикла;
	
	Если Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		НДСПредъявленКВычету = Истина;
	КонецЕсли;
	
	Исправление = Истина;
	
	Если Основание.Исправление Тогда
		ИсправляемыйСчетФактура = Основание.ИсправляемыйСчетФактура;
		НомерИсправления = Основание.НомерИсправления + 1;
	Иначе
		ИсправляемыйСчетФактура = Основание;
		НомерИсправления = НомерИсправления + 1;
	КонецЕсли;	
	
	Основания = ДокументыОснования.Добавить();
	Основания.ДокументОснование = Основание.ДокументОснование;
	ДокументОснование           = Основание.ДокументОснование;
	
	СуммаДокумента		= Авансы.Итог("Сумма");
	СуммаНДСДокумента	= Авансы.Итог("СуммаНДС");
	
КонецПроцедуры	

Процедура ЗаполнитьНаОснованииОтчетаКомитенту(Основание, ВидСчетаФактурыЗаполнения = Неопределено)
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Организация, Контрагент, ДоговорКонтрагента");
	Дата = РеквизитыОснования.Дата;
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ВидСчетаФактурыЗаполнения <> Неопределено Тогда
		ВидСчетаФактуры	= ВидСчетаФактурыЗаполнения;
	КонецЕсли;
	
	Основания = ДокументыОснования.Добавить();
	Основания.ДокументОснование = Основание;
	
	Авансы.Очистить();
	НДСПредъявленКВычету = Ложь;
	
	ОпределениеПараметровСчетаФактуры();
	
	СуммаДокумента    = 0;
	СуммаНДСДокумента = 0;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
		И НЕ ЗначениеЗаполнено(Организация) Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОснования, "Организация, Контрагент, ДоговорКонтрагента");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание, ВидСчетаФактурыЗаполнения = Неопределено)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ВидОперацииОснования	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
		
		Если ВидОперацииОснования = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ВызватьИсключение НСтр("ru = 'При поступлении в переработку счет-фактура не регистрируется'");
		Иначе
			
			Если ЗначениеЗаполнено(Основание.ДоговорКонтрагента) Тогда 
				РеквизитыДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Основание.ДоговорКонтрагента, "УчетАгентскогоНДС,ВидДоговора");
				Если РеквизитыДоговора.УчетАгентскогоНДС Тогда
					ВызватьИсключение НСтр("ru = 'При поступлении по договору налогового агента счет-фактура не регистрируется'");
				КонецЕсли;
				
				Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					ВызватьИсключение НСтр("ru = 'При поступлении по договору с комитентом счет-фактура не регистрируется'");
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ВыставляетсяСчетФактура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПокупателемВыставляетсяСчетФактураНаВозврат");
		Если НЕ ВыставляетсяСчетФактура Тогда
			ВызватьИсключение НСтр("ru = 'Для создания счета-фактуры по этому документу установите флаг ""Покупателем выставляется счет-фактура на возврат"" на вкладке ""НДС""'");	
		КонецЕсли;
		
	КонецЕсли;
	
	СписокТиповНаАванс = Новый Массив;
	СписокТиповНаАванс.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТиповНаАванс.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	СписокТиповНаАванс.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТиповНаАванс.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	СписокТиповНаАванс.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	СписокТиповНаАванс.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ЗаполнитьПоСчетуФактуреНаАванс(Основание);
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		// Для документа "Корректировка поступления" возможен ввод двух видов счетов-фактур
		// на аванс (на суммы переплат) или на поступившие ценности (исправленный или корректировочный)
		
		СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Основание);
		Если НЕ ЗначениеЗаполнено(СуществующийСФ) Тогда
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ДокументПоступления, ВидОперации");
			Если УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(РеквизитыОснования.ДокументПоступления) <> Неопределено Тогда
				//Нет СФ на приобретенные ценности - создаем его
				ЗаполнитьНаОснованииИсправления(Основание);
			Иначе
				Если РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
					ВызватьИсключение НСтр("ru = 'Перед добавлением исправления счета-фактуры создайте счет-фактуру у документа-основания'");
				Иначе
					ВызватьИсключение НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у документа-основания'");
				КонецЕсли;
			КонецЕсли;
		Иначе
			// СФ на приобретенные ценности найден, попробуем создать счет-фактуру на аванс
			ЗаполнитьСчетФактуруНаАванс(Основание);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ЗаполнитьНаОснованииОтчетаКомитенту(Основание, ВидСчетаФактурыЗаполнения);
	ИначеЕсли СписокТиповНаАванс.Найти(ТипЗнч(Основание)) = Неопределено Тогда
		ЗаполнитьСчетФактуруНаПоступление(Основание);
	Иначе
		ЗаполнитьСчетФактуруНаАванс(Основание);
	КонецЕсли;
   	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииИсправления(Основание)

	Дата = Основание.Дата;
	
	ЭтотОбъект.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		УточнениеСообщения = "корректировочных"; 
	Иначе
		УточнениеСообщения = "исправленных";
	КонецЕсли;
	
	ИсходныйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Основание.ДокументПоступления);
	Если НЕ ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		ВызватьИсключение НСтр("ru = 'Не определен исправляемый документ'");
	КонецЕсли;
	
	ЭтотОбъект.ДокументОснование = Основание;
	СтрокаОснования = ДокументыОснования.Добавить();
	СтрокаОснования.ДокументОснование = Основание;
	
	МетаданныеДокумента = ИсходныйДокумент.Метаданные();
	ДанныеИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент, 
		Новый Структура("ВалютаДокумента,РасчетыВУсловныхЕдиницах", 
		"ВалютаДокумента", "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах"));
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
	КонецЕсли;
	
	Если Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		ЭтотОбъект.Исправление = Истина;
		ЭтотОбъект.ДатаИсправления = ЭтотОбъект.Дата;
	КонецЕсли;
		
	// Определение кода вида операции для исправления
	// и номера исправления и данных корректировки
	КодВидаОперацииОснования = "";
	НомерИсправленияСФ       = 0;
	
	ДокументПоступления = Основание.ДокументПоступления;
	
	ПереопределятьПараметрыИсходногоДокумента = Ложь;
	ТипИсправляемогоДокумента = ТипЗнч(УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь));
	КорректировкаКорректировочногоСчетаФактуры = ТипИсправляемогоДокумента = Тип("ДокументСсылка.КорректировкаПоступления") 
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	
	ИсправляемыйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(
		Основание.ИсправляемыйДокументПоступления, "СчетФактураПолученный");
		
	Если ЭтотОбъект.Исправление ИЛИ ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.Исправление КАК Исправление,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КорректировочныйСчетФактура,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсправления КАК ДатаИсправления,
		|	СчетФактураПолученныйДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
		|	СчетФактураПолученныйДокументыОснования.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
		|			ТОГДА СчетФактураПолученныйДокументыОснования.НомерИсходногоДокумента
		|		ИНАЧЕ СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента
		|	КОНЕЦ КАК НомерИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
		|			ТОГДА СчетФактураПолученныйДокументыОснования.ДатаИсходногоДокумента
		|		ИНАЧЕ СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента
		|	КОНЕЦ КАК ДатаИсходногоДокумента,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.Продавец КАК Продавец
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	(СчетФактураПолученныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
		|			ИЛИ СчетФактураПолученныйДокументыОснования.Ссылка = &ИсходныйДокумент)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса.Количество() > 0 Тогда
			
			ТекущаяСтрока = РезультатЗапроса[0];
			КодВидаОперацииОснования = ТекущаяСтрока.КодВидаОперации;
				
			Если КорректировкаКорректировочногоСчетаФактуры Тогда
				
				СтрокаОснования.НомерИсходногоДокумента = ТекущаяСтрока.НомерВходящегоДокумента;
				СтрокаОснования.ДатаИсходногоДокумента  = ТекущаяСтрока.ДатаВходящегоДокумента;
				
				Если ТекущаяСтрока.Исправление Тогда
					СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина;
					СтрокаОснования.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправления;
					СтрокаОснования.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.ДатаИсправления;
				КонецЕсли;
				
			Иначе
				
				НомерИсправленияСФ  = ТекущаяСтрока.НомерИсправления;
				
				Если ТекущаяСтрока.КорректировочныйСчетФактура Тогда
					ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
				КонецЕсли;
				
				Если НЕ ТекущаяСтрока.КорректировочныйСчетФактура 
					И ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
					ЭтотОбъект.НомерВходящегоДокумента = "";
					ЭтотОбъект.ДатаВходящегоДокумента  = "";
				Иначе
					ЭтотОбъект.НомерВходящегоДокумента = ТекущаяСтрока.НомерВходящегоДокумента;
					ЭтотОбъект.ДатаВходящегоДокумента  = ТекущаяСтрока.ДатаВходящегоДокумента;
				КонецЕсли;
				
				Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
					СтрокаОснования.НомерИсходногоДокумента    = ТекущаяСтрока.НомерИсходногоДокумента;
					СтрокаОснования.ДатаИсходногоДокумента     = ТекущаяСтрока.ДатаИсходногоДокумента;
					Если ТекущаяСтрока.Исправление И НЕ ТекущаяСтрока.КорректировочныйСчетФактура Тогда
						СтрокаОснования.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправления;
						СтрокаОснования.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.ДатаИсправления;	
						ПереопределятьПараметрыИсходногоДокумента = Истина;
					ИначеЕсли ТекущаяСтрока.КорректировочныйСчетФактура Тогда
						СтрокаОснования.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправленияИсходногоДокумента;
						СтрокаОснования.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.ДатаИсправленияИсходногоДокумента;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаОснования.ДатаИсправленияИсходногоДокумента) 
					ИЛИ ЗначениеЗаполнено(СтрокаОснования.НомерИсправленияИсходногоДокумента) Тогда
					СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
				
				ЭтотОбъект.Продавец = ТекущаяСтрока.Продавец;
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныйДокумент", Основание.ДокументПоступления);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Исправление КАК Исправление,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсправления КАК ДатаИсправления,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.КППКонтрагента КАК КППКонтрагента
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
	|	И НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		КППКонтрагента	= Выборка.КППКонтрагента;
		
		Если Выборка.Исправление Тогда
			
			НомерИсправленияСФ = Макс(НомерИсправленияСФ, Выборка.НомерИсправления);
			
			Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				Если НЕ СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента ИЛИ ПереопределятьПараметрыИсходногоДокумента Тогда
					Если ЗначениеЗаполнено(Выборка.НомерИсправления) Тогда
						СтрокаОснования.НомерИсправленияИсходногоДокумента = Выборка.НомерИсправления;
						СтрокаОснования.ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправления;
						СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтотОбъект.Исправление Тогда
		ЭтотОбъект.НомерИсправления = НомерИсправленияСФ + 1;
	КонецЕсли;
	
	ЭтотОбъект.КодВидаОперации = ПолучитьКодВидаОперации(КодВидаОперацииОснования);
	
	Если ПустаяСтрока(КППКонтрагента)
		И ТипЗнч(ДокументыОснования[0].ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		КППКонтрагента	= УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(ДокументыОснования[0].ДокументОснование, "Грузоотправитель");
	КонецЕсли;
	
	ПараметрыСчетаФактуры = УчетНДСПереопределяемый.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСчетаФактуры, , "Продавец");
	
КонецПроцедуры

Функция ЕстьДублиСчетаФактуры()
	
	ЕстьДубли = Ложь;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		
		Для каждого СтрокаОснования Из ДокументыОснования Цикл
			
			Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет")
				ИЛИ ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
				ИЛИ ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(
				СтрокаОснования.ДокументОснование, Ссылка);
			Если ЗначениеЗаполнено(СуществующийСФ) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='На основании документа %1 уже введен %2'"),
					СтрокаОснования.ДокументОснование, СуществующийСФ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
				ЕстьДубли = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученныйНаАванс(
			ДокументОснование, Ссылка, ДоговорКонтрагента, НомерИсправления);
		Если ЗначениеЗаполнено(СуществующийСФ) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='На основании документа %1 уже введен %2'"),
				ДокументОснование, СуществующийСФ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
			ЕстьДубли = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьДубли;

КонецФункции

Процедура УстановитьПредставлениеНомера()
	
	Если НЕ ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
		Возврат;	
	КонецЕсли;
	
	Если Исправление Тогда
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			ПредставлениеНомера = НомерВходящегоДокумента + " (испр. "+ НомерИсправления+")";
		Иначе
			ПредставлениеНомера = НомерВходящегоДокумента + " (испр. "+ НомерИсправления+")";
		КонецЕсли;
	Иначе
		ПредставлениеНомера = НомерВходящегоДокумента;		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли