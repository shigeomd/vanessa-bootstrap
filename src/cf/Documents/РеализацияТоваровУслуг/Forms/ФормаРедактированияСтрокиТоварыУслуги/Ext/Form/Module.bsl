////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним реквизиты формы из параметров.
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,
		"Дата, ИмяТаблицы, Организация, СчетУчета, Номенклатура,
		|Субконто, СчетДоходов, СчетРасходов,
		|СчетУчетаНДСПоРеализации, СуммаНДС, ДокументБезНДС");

	УстановитьФункциональныеОпцииФормы();
	
	НаименованиеНоменклатуры = "";
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ДанныеОбъекта = Новый Структура("Дата, Организация", Дата, Организация);
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
			Номенклатура, ДанныеОбъекта, Ложь);
		НаименованиеНоменклатуры = СведенияОНоменклатуре.Наименование;
		НоменклатурнаяГруппа	 = СведенияОНоменклатуре.НоменклатурнаяГруппа;
	ИначеЕсли ИспользоватьОднуНоменклатурнуюГруппу Тогда
		НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	КонецЕсли;
	
	Элементы.СчетУчетаНДСПоРеализации.Видимость = Не ДокументБезНДС;
	
	// Снимем видимость с полей, которые не применяются для текущего вида операции.
	ЭтоУслуги 	= ИмяТаблицы = "Услуги";
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Счета учета: %1'"),
		НаименованиеНоменклатуры);
	
	Элементы.СчетУчетаНДСПоРеализации.ОтметкаНезаполненного = СуммаНДС <> 0;
	
	Если ЭтоУслуги Тогда
		Элементы.СчетУчета.Видимость = Ложь;
		Элементы.СчетРасходов.ОтметкаНезаполненного = ТребуетсяСчетРасходовПоОказаниюУслуг;
	Иначе
		// Форма используется как для товаров, так и для услуг,
		// но в товарах счетов указывается больше. Чтобы высота формы не менялась
		// и не появлялись полосы прокрутки при переключении между товарами и услугами,
		// в случае услуг показываем пустую строку - местодержатель, 
		// а для товаров ее не показываем.
		Элементы.ДекорацияПустаяСтрока.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		СвойстваСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
		СчетУчетаЗабалансовый = СвойстваСчетаУчета.Забалансовый;
	КонецЕсли;
	
	УстановитьДоступностьСубконтоНаСервере();

	УстановитьУсловноеОформление();
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, ЭтаФорма.Элементы.ИнформационныеСсылки);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность И НЕ ПеренестиВДокумент Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	КонецЕсли;

	Если ПеренестиВДокумент И НЕ Отказ Тогда
		Отказ = НЕ ПроверитьЗаполнениеНаКлиенте();
	КонецЕсли;

	Если Отказ Тогда
		ПеренестиВДокумент = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	Если ПеренестиВДокумент Тогда
		СтруктураРезультат = Новый Структура("СчетУчета,
			|СчетДоходов, СчетРасходов, СчетУчетаНДСПоРеализации,
			|Субконто, ИмяТаблицы");
		 
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, ЭтаФорма);
		ОповеститьОВыборе(СтруктураРезультат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ФормаРедактированияСтроки_Закрыть" И Источник = ВладелецФормы Тогда
		// Сообщение от основной формы документа при нажатии там Esc.
		// Сбрасываем флаг модифицированности и закрываем форму редактирования строки без вопросов.
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
	СчетУчетаЗабалансовый = СвойстваСчета.Забалансовый;

КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)

	УстановитьДоступностьСубконтоНаСервере();
	
	Если СчетДоходовВедетсяУчетПоНоменклатурнымГруппам 
		И НЕ ЗначениеЗаполнено(Субконто) Тогда
		Субконто = НоменклатурнаяГруппа;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// Субконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Субконто");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СчетДоходов, СчетРасходов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетДоходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетРасходов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СчетУчетаНДСПоРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаНДСПоРеализации");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СчетРасходов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетРасходов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЭтоУслуги", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТребуетсяСчетРасходовПоОказаниюУслуг", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтаФорма, Организация, Дата);
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	
	ТребуетсяСчетРасходовПоОказаниюУслуг = 
		РегистрыНакопления.РеализацияУслуг.ТребуетсяСчетРасходовПоОказаниюУслуг(Дата, Организация);

КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()

	Отказ = Ложь;

	Если НЕ ЭтоУслуги Тогда

		Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет учета'"));
			Поле = "СчетУчета";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;

	КонецЕсли;

	Если ЭтоУслуги ИЛИ НЕ СчетУчетаЗабалансовый Тогда
		Если НЕ ЗначениеЗаполнено(СчетДоходов) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет доходов'"));
			Поле = "СчетДоходов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если ПлательщикНДФЛ 
		И ЗначениеЗаполнено(СчетДоходов)
		И СчетДоходовВедетсяУчетПоНоменклатурнымГруппам
		И НЕ ЗначениеЗаполнено(Субконто) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Субконто'"));
		Поле = "Субконто";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
	КонецЕсли;

	Если НЕ ЭтоУслуги ИЛИ ТребуетсяСчетРасходовПоОказаниюУслуг Тогда
		Если НЕ ЗначениеЗаполнено(СчетРасходов) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет расходов'"));
			Поле = "СчетРасходов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаНДС <> 0 И НЕ СчетУчетаЗабалансовый Тогда
		Если НЕ ЗначениеЗаполнено(СчетУчетаНДСПоРеализации) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет учета НДС по реализации'"));
			Поле = "СчетУчетаНДСПоРеализации";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
	КонецЕсли;

	Возврат Не Отказ;

КонецФункции

&НаСервере
Процедура УстановитьДоступностьСубконтоНаСервере()
	
	ПоляОбъекта = Новый Структура;
	ПоляОбъекта.Вставить("Субконто1", "Субконто");
	ПоляОбъекта.Вставить("Организация", Организация);
	
	ЗаголовкиПолей = Новый Структура;
	ЗаголовкиПолей.Вставить("Субконто1", "ЗаголовокСубконто");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(СчетДоходов, ЭтаФорма, ПоляОбъекта, ЗаголовкиПолей, Ложь);
	ПоляОбъекта = Новый Структура;
	ПоляОбъекта.Вставить("Субконто1", "Субконто");
	ПоляОбъекта.Вставить("Организация", Организация);
	
	ЗаголовкиПолей = Новый Структура;
	ЗаголовкиПолей.Вставить("Субконто1", "ЗаголовокСубконто");
	
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"), 
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РеализацияПрочегоИмущества"));
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(СчетДоходов, ЭтаФорма, ПоляОбъекта, ЗаголовкиПолей, Ложь);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СчетДоходов, ЭтаФорма, ПоляОбъекта, Ложь, ЗначенияСубконто);
	
	Если ЗначениеЗаполнено(СчетДоходов) Тогда
		СвойстваСчетаДоходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДоходов);
		СчетДоходовВедетсяУчетПоНоменклатурнымГруппам =
			(СвойстваСчетаДоходов.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Элементы.Субконто.Заголовок = СвойстваСчетаДоходов.ВидСубконто1Наименование;
	Иначе
		СчетДоходовВедетсяУчетПоНоменклатурнымГруппам = Ложь;
		Элементы.Субконто.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

