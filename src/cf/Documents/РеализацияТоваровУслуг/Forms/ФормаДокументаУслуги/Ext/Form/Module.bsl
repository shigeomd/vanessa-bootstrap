&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ЭтоНоваяСтрока;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	РеализацияТоваровУслугФормы.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПокупателю.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияПоСчетуНаКлиенте(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаРедактированияСтрокиТоварыУслуги" Тогда
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаРеквизитыОрганизацииКонтрагентаУслуги" Тогда
		РеализацияТоваровУслугФормыКлиент.ОбработкаВыбораРеквизитыОрганизацииКонтрагента(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		// Статус документа изменен в форме списка
		Если Не Объект.Ссылка.Пустая() И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РасчетыВУЕ Тогда
		ПодключитьОбработчикОжидания("УведомитьОбИзмененияхПравилПереоценкиЗадолженностейВУЕ", 0.60, Истина);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриОткрытии();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	РеализацияТоваровУслугФормы.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РеализацияТоваровУслугФормыКлиент.ПередЗаписью(
		ЭтаФорма, Отказ, ПараметрыЗаписи);
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтотОбъект);

	УстановитьТекстСостоянияЭДНаСервере();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	РеализацияТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтаФорма);
	
	РеализацияТоваровУслугФормы.ПослеЗаписиНаСервере(ЭтаФорма, Объект, ПараметрыЗаписи);

	УстановитьСостояниеДокумента();
	
	УстановитьСтатусДокумента();
	
	ПроверкаКонтрагентов.ОпределитьНаличиеИзмененияВСчетеФактуре(ЭтотОбъект, СчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверкаКонтрагентов.ПередЗаписьюНаСервере(ЭтотОбъект, СчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если КонтрагентыВСчетеФактуреИзменилисьПослеЗаписи Тогда
		ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактура);
	КонецЕсли;
	
	РеализацияТоваровУслугФормыКлиент.ПослеЗаписи(
		ЭтаФорма, ПараметрыЗаписи);
		
	Оповестить("Запись_РеализацияТоваровУслуг", ПараметрыЗаписи, Объект.Ссылка);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = РеализацияТоваровУслугФормыКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(ЭтаФорма);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// Покажем оповещение о появлении механизма рабочей даты.
	Если НастройкиПредупреждений.РабочаяДатаИзДокумента 
		И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("РабочаяДатаИзДокумента", , НастройкиПредупреждений);
	КонецЕсли;
	
	ЗапуститьПроверкуКонтрагентов(Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитыОрганизацииКонтрагентаНажатие(Элемент)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", 				ТолькоПросмотр);
	ПараметрыФормы.Вставить("Организация", 					Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент",					Объект.Контрагент);
	ПараметрыФормы.Вставить("БанковскийСчетОрганизации", 	Объект.БанковскийСчетОрганизации);
	ПараметрыФормы.Вставить("Руководитель",					Объект.Руководитель);
	ПараметрыФормы.Вставить("ЗаРуководителяПоПриказу", 		Объект.ЗаРуководителяПоПриказу);
	ПараметрыФормы.Вставить("ГлавныйБухгалтер",				Объект.ГлавныйБухгалтер);
	ПараметрыФормы.Вставить("ЗаГлавногоБухгалтераПоПриказу",Объект.ЗаГлавногоБухгалтераПоПриказу);
	ПараметрыФормы.Вставить("ДоверенностьЧерезКого",		Объект.ДоверенностьЧерезКого);
	ПараметрыФормы.Вставить("ЗаЗаказчикаНаОсновании",		Объект.ЗаЗаказчикаНаОсновании);
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаРеквизитыОрганизацииКонтрагентаУслуги", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаПатентеПриИзменении(Элемент)
	
	РеализацияТоваровУслугФормыКлиентСервер.ДеятельностьНаПатентеПриИзменении(ЭтаФорма, Элемент);	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	
	РеализацияТоваровУслугФормыКлиент.ПатентПриИзменении(ЭтаФорма, Элемент);	

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении()

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	ЗапуститьПроверкуКонтрагентов(Элементы.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ОткрытиеФормыВыбораКонтрагенты");

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
		УведомитьОбИзмененияхПравилПереоценкиЗадолженностейВУЕ();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПокупателюПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.СчетНаОплатуПокупателю) Тогда
		ОбработкаЗаполненияПоСчетуНаКлиенте(Объект.СчетНаОплатуПокупателю, "Услуги");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)

	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();

	РеализацияТоваровУслугФормыКлиент.ПорядокУчетаРасчетовНажатие(
		ЭтаФорма, Элемент, СтандартнаяОбработка, АдресХранилищаЗачетАвансов);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПокупателюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораСчетаНаОплату(ЭтаФорма, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураВыданный");
	ЗапуститьПроверкуКонтрагентов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Услуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "УслугиАналитикаУчета" Тогда
		ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриАктивизацииЯчейки(Элемент)

	Если Элементы.Услуги.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНоваяСтрока Тогда
		ТекущаяКолонкаТаблицы = Элементы.Услуги.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "УслугиАналитикаУчета"
			И НЕ Элементы.Услуги.ТекущиеДанные.АналитикаУчетаЗаполнена Тогда
			ВыбраннаяСтрока = Элементы.Услуги.ТекущаяСтрока;
			ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ЭтоНоваяСтрока = НоваяСтрока;

	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы	= Элементы.Услуги.ТекущиеДанные;
	СтрокаТаблицы.СтавкаНДС = УчетНДСКлиент.ПолучитьСтавкуНДСПоУмолчанию(ПлательщикНДС);
	СтрокаТаблицы.АналитикаУчета = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если ОтменаРедактирования И НоваяСтрока Тогда
		// Закроем форму редактирования строки, т.к. пользователь отменяет ввод
		Оповестить("ФормаРедактированияСтроки_Закрыть", Неопределено, ЭтаФорма);
	КонецЕсли;

	ЭтоНоваяСтрока = Ложь;

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = РеализацияТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиУслугиНоменклатураПриИзменении(
		ЭтаФорма, ТекущиеДанные);

	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаУчета",          ТекущиеДанные.АналитикаУчета);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаУчетаЗаполнена", ТекущиеДанные.АналитикаУчетаЗаполнена);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
	
	УслугиНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы,
		ПараметрыОбработки.ДанныеОбъекта,
		ПараметрыОбработки.СчетаУчетаКЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ОткрытиеФормыВыбораНоменклатура");

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1);

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги", 1);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиАналитикаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Услуги.ТекущаяСтрока;
	ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборУслуги(Команда)

	РеализацияТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "Услуги", Команда);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
	Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
		ОписаниеКоманды = УправлениеПечатьюКлиентПовтИсп.ОписаниеКомандыПечати(Команда.Имя, ЭтаФорма.Команды.Найти("АдресКомандПечатиВоВременномХранилище").Действие);
		Если ОписаниеКоманды.Идентификатор = "СчетФактура" Тогда
			ПодключитьОбработчикОжидания("ПоказатьПредупреждениеОбИзменениях_УПД", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Услуги" Тогда
		Для каждого СтрокаТаблицы Из Объект.Услуги Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	ТекущаяДатаДокумента          = Объект.Дата;
	ДатыИзмененияОтветственныхЛиц = Новый ФиксированныйМассив(
		ОтветственныеЛицаБППовтИсп.ДатыИзмененияОтветственныхЛицОрганизаций(Объект.Организация));
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
		ВалютаВзаиморасчетов 	= РеквизитыДоговора.ВалютаВзаиморасчетов;
		РасчетыВУЕ 				= РеквизитыДоговора.РасчетыВУсловныхЕдиницах;	
		ТребуетсяСчетФактура	= Истина;
		
	Иначе

		ВалютаВзаиморасчетов 	= ВалютаРегламентированногоУчета;
		РасчетыВУЕ 				= Ложь;	
		ТребуетсяСчетФактура	= Ложь;

		Если ЗначениеЗаполнено(Объект.Контрагент)
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентПриИзмененииНаСервере();
		КонецЕсли;
		
	КонецЕсли;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	РеализацияТоваровУслугФормы.ЗаполнитьСписокВыбораПатента(ЭтаФорма);
	
	РеализацияТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма);	
	
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	РеализацияТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьВидЭД();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидЭД()
	
	ДоступныеЗначения = Документы.РеализацияТоваровУслуг.ПолучитьДоступныеВидыЭдПоВидуОперации(Объект.ВидОперации);
	
	Элементы.ВидЭД.СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из ДоступныеЗначения Цикл 
		Элементы.ВидЭД.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидЭлектронногоДокумента = Документы.РеализацияТоваровУслуг.ПолучитьВидЭдПоУмолчанию(Объект.ВидОперации); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВидовДоговоров() Экспорт

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтаФорма);
	РеализацияТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	ПлательщикНДС			= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);	
	ПлательщикНДФЛ			= УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	ПрименяетсяУСНПатент	= УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	ПлательщикЕНВД			= УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата);
	ПрименяетсяОсобыйПорядокНалогообложения
		= УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	ПрименяетсяТолькоУСНПатент	= ПрименяетсяУСНПатент И НЕ ПлательщикЕНВД И ПрименяетсяОсобыйПорядокНалогообложения;
	ИспользоватьТипыЦенНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");	 
	ЕстьВалютныйУчет 				 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();

	// Используется в условном оформлении
	ТребуетсяСчетРасходовПоОказаниюУслуг = 
	РегистрыНакопления.РеализацияУслуг.ТребуетсяСчетРасходовПоОказаниюУслуг(Объект.Дата, Объект.Организация);
		
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// УслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиАналитикаУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиАналитикаУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.АналитикаУчетаЗаполнена", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);


	// УслугиСтавкаНДС, УслугиСуммаНДС, УслугиВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Форма.ПрименяетсяУСНПатент Тогда
		Если НЕ Элементы.ГруппаПатент.Видимость Тогда
			Элементы.ГруппаПатент.Видимость = Истина;
		КонецЕсли;
		Если Форма.ПрименяетсяТолькоУСНПатент Тогда
			Элементы.ГруппаДеятельностьНаПатенте.ТекущаяСтраница = Элементы.ГруппаДекорацияДеятельностьНаПатенте;
		ИначеЕсли Форма.ПрименяетсяУСНПатент Тогда
			Элементы.ГруппаДеятельностьНаПатенте.ТекущаяСтраница = Элементы.ГруппаВыборДеятельностиНаПатенте;
		Иначе
			Элементы.ГруппаДеятельностьНаПатенте.ТекущаяСтраница = Элементы.ГруппаДеятельностьНеНаПатенте;
		КонецЕсли;
		
		Элементы.Патент.Доступность	= Объект.ДеятельностьНаПатенте ИЛИ Форма.ПрименяетсяТолькоУСНПатент;
	Иначе
		Если Элементы.ГруппаПатент.Видимость Тогда
			Элементы.ГруппаПатент.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	Элементы.ПорядокУчетаРасчетов.Доступность = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	// Счет-фактура
	Если Форма.ТребуетсяСчетФактура И НЕ ЗначениеЗаполнено(Форма.СчетФактура) Тогда
		Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница = Элементы.ГруппаВыписатьСчетФактуру;
	Иначе
		Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница = Элементы.ГруппаСчетФактураСсылка;
	КонецЕсли;
	
	Элементы.НадписьСчетФактура.Гиперссылка = Форма.ТребуетсяСчетФактура;
	
	Элементы.ГруппаСчетФактура.Видимость	= Не Объект.ДокументБезНДС;
	Элементы.ИтогиВсегоНДС.Видимость 		= Не Объект.ДокументБезНДС;
	
	ОбновитьИтоги(Форма);
	РеализацияТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
	
КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ДатаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	РеализацияТоваровУслугФормы.ОрганизацияПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.КонтрагентПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ДоговорКонтрагентаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
КонецПроцедуры
// Пересчеты реквизитов в строках табличных частей

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)

	РеализацияТоваровУслугФормы.УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогиВсего    = Объект.Услуги.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.Услуги.Итог("СуммаНДС");
	
КонецПроцедуры

// Прочий функционал:

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, Знач ПараметрыОбъекта)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

	ЗаполнитьАналитикуУчета(СтрокаТаблицы, ПараметрыОбъекта);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбъекта.Вставить("ДокументБезНДС", 	Объект.ДокументБезНДС);
	ПараметрыОбъекта.Вставить("ПлательщикНДФЛ", 	Форма.ПлательщикНДФЛ);
	ПараметрыОбъекта.Вставить("ТребуетсяСчетРасходовПоОказаниюУслуг", Форма.ТребуетсяСчетРасходовПоОказаниюУслуг);
	ПараметрыОбъекта.Вставить("СчетУчетаРасчетовСКонтрагентом", Объект.СчетУчетаРасчетовСКонтрагентом);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	Если Не СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтрокаТабличнойЧасти.Свойство("АналитикаУчета") Тогда
		Возврат;
	КонецЕсли;
	
	// При вызове с клиента: чтобы сократить обмен с сервером, передадим только нужные данные
	ДанныеЗаполнения = Новый Структура;// См. РеквизитыЗаСсылками
	ДанныеЗаполнения.Вставить("СчетДоходов");
	ДанныеЗаполнения.Вставить("Субконто");
	ДанныеЗаполнения.Вставить("СчетУчетаНДСПоРеализации");
	ДанныеЗаполнения.Вставить("СчетРасходов");
	
	ДанныеЗаполнения.Вставить("СуммаНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаТабличнойЧасти);
	
	ОписаниеАналитикиУчета = ОписаниеАналитикиУчета(ДанныеЗаполнения, ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ОписаниеАналитикиУчета);
		
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ОписаниеАналитикиУчета(Знач ДанныеСтроки, Знач ПараметрыОбъекта)
	
	Результат = Новый Структура;
	Результат.Вставить("АналитикаУчета",          "");
	Результат.Вставить("АналитикаУчетаЗаполнена", Истина);

	ВидСубконтоНГ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	
	// Счет доходов - всегда
    Если Не ЗначениеЗаполнено(ДанныеСтроки.СчетДоходов) Тогда
    	Результат.АналитикаУчета 	      = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
		Результат.АналитикаУчетаЗаполнена = Ложь;
    Иначе
		СвойстваСчета			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетДоходов);
		Результат.АналитикаУчета = "" + СвойстваСчета.Код;
		
		Если СвойстваСчета.КоличествоСубконто >= 1 Тогда
			
			Если ЗначениеЗаполнено(ДанныеСтроки.Субконто) Тогда
				ТипСубконто = ТипЗнч(ДанныеСтроки.Субконто);
				ПредставлениеСубконто = "";
				
				Если Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
					ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
				ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
					ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
				Иначе
					ПредставлениеСубконто = Строка(ДанныеСтроки.Субконто);
				КонецЕсли;
				Если НЕ (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ И БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу()) Тогда
					Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + ПредставлениеСубконто;
				КонецЕсли;
			Иначе
				Результат.АналитикаУчета = Результат.АналитикаУчета + ", <...>";
				
				// Заполнение субконто обязательно для ИП, когда на счете есть субконто "Номенклатурные группы".
				Если ПараметрыОбъекта.ПлательщикНДФЛ
					И (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ
						ИЛИ СвойстваСчета.ВидСубконто2 = ВидСубконтоНГ
						ИЛИ СвойстваСчета.ВидСубконто3 = ВидСубконтоНГ) Тогда
					Результат.АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
    КонецЕсли;
	
    // Счет расходов
    Если ЗначениеЗаполнено(ДанныеСтроки.СчетРасходов) Тогда
		СвойстваСчета			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетРасходов);
		Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
    Иначе
    	Если ПараметрыОбъекта.ТребуетсяСчетРасходовПоОказаниюУслуг Тогда
			Результат.АналитикаУчетаЗаполнена = Ложь;
		КонецЕсли;
    КонецЕсли;

	Если Не ПараметрыОбъекта.ДокументБезНДС Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДСПоРеализации) Тогда
			СвойстваСчета			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчетаНДСПоРеализации);
			Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
		Иначе
			Если ДанныеСтроки.СуммаНДС <> 0 Тогда
				Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
				Результат.АналитикаУчетаЗаполнена = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;


КонецФункции

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	РеализацияТоваровУслугФормы.ЗаполнитьРассчитатьСуммы(
		ЭтаФорма,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС);

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	ДобавленныеСтроки = РеализацияТоваровУслугФормы.ОбработкаВыбораПодбор(ЭтаФорма, ВыбранноеЗначение, ИмяТаблицы);
	
	Для Каждого СтрокаТаблицы Из ДобавленныеСтроки.Услуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	РеализацияТоваровУслугФормы.ОбработкаВыбораПорядокУчетаРасчетов(ЭтаФорма, ВыбранноеЗначение);

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаполненияПоСчетуНаКлиенте(ВыбранноеЗначение, ТабличнаяЧасть)
	
	Если ЗначениеЗаполнено(ТабличнаяЧасть) И Объект[ТабличнаяЧасть].Количество() = 0 Тогда
	
		ОбработкаЗаполненияПоСчетуНаСервере(ВыбранноеЗначение, ТабличнаяЧасть);
	
	Иначе

		ТекстВопроса = "Заполнить документ по счету?";
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);

		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоСчетуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоСчетуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработкаЗаполненияПоСчетуНаСервере(ДополнительныеПараметры.ВыбранноеЗначение, ДополнительныеПараметры.ТабличнаяЧасть);
	Иначе
		Объект.СчетНаОплатуПокупателю = ДополнительныеПараметры.ВыбранноеЗначение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияПоСчетуНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	РеализацияТоваровУслугФормы.ОбработкаЗаполненияПоСчету(ЭтаФорма, ВыбранноеЗначение, ТабличнаяЧасть);

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВыписатьСчетФактуру(Команда)
	
	РеализацияТоваровУслугФормыКлиент.ВыписатьСчетФактуру(ЭтаФорма, Команда);
	УправлениеФормой(ЭтаФорма);
	ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактура);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ДанныеСтроки 	= Объект.Услуги.НайтиПоИдентификатору(ВыбранноеЗначение);
			
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",	ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата", 			Объект.Дата);
	ПараметрыФормы.Вставить("Организация", 		Объект.Организация);
	ПараметрыФормы.Вставить("ИмяТаблицы",		"Услуги");
	ПараметрыФормы.Вставить("ДокументБезНДС", 	Объект.ДокументБезНДС);
	
	ПараметрыФормы.Вставить("СчетДоходов", 	ДанныеСтроки.СчетДоходов);
	ПараметрыФормы.Вставить("Субконто", 	ДанныеСтроки.Субконто);
	ПараметрыФормы.Вставить("СчетРасходов", ДанныеСтроки.СчетРасходов);
	ПараметрыФормы.Вставить("СчетУчетаНДСПоРеализации", ДанныеСтроки.СчетУчетаНДСПоРеализации);
	ПараметрыФормы.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("СуммаНДС", 	ДанныеСтроки.СуммаНДС);
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаРедактированияСтрокиТоварыУслуги", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ЗначенияВыбранныеВФормеАналитикиУчета)

	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияВыбранныеВФормеАналитикиУчета);
	
	Модифицированность = Истина;
	
	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);
	ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОбИзменениях_УПД()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("УниверсальныеПередаточныйДокумент", , НастройкиПредупреждений);
	
КонецПроцедуры

&НаКлиенте
Процедура УведомитьОбИзмененияхПравилПереоценкиЗадолженностейВУЕ()
	
	Если РасчетыВУЕ Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ПереоценкаЗадолженностиПоДоговорамВУЕ2015", , НастройкиПредупреждений);
	КонецЕсли;	
	
КонецПроцедуры	

// Конец СтандартныеПодсистемы.Печать

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтотОбъект);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтотОбъект, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтотОбъект, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтотОбъект, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("УслугиАналитикаУчета");
	
	// Поле формы ПорядокУчетаРасчетов содержит счета и другие реквизиты.
	// Поэтому видимостью этого поля управляем в УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов()
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция ПолучитьСтатусДокумента(Знач Организация, Знач Ссылка)
	
	Возврат (РегистрыСведений.СтатусыДокументов.ПолучитьСтатусДокумента(Организация, Ссылка) =
		Перечисления.СтатусыДокументовРеализации.Подписан);
	
КонецФункции

&НаСервере
Процедура УстановитьСтатусДокумента()
	
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусДокумента(Объект.Ссылка, ?(СтатусДокумента,
		Перечисления.СтатусыДокументовРеализации.Подписан,Перечисления.СтатусыДокументовРеализации.НеПодписан));
	
КонецПроцедуры

#КонецОбласти

ЭтоНоваяСтрока = Ложь;
