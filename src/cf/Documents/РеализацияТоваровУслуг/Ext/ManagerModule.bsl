#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетРасчетов");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТребуетсяУчетАвансов");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовПоТаре",        "ВозвратнаяТараПереданная");
	
	// Табличная часть Товары
	
	//   Запасы (кроме оборудования, розницы в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",           "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Оборудование");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПереданныеСчетУчета", "ЗапасыОтгруженные");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОперацииСКомиссионером");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПереданныеСчетУчета", "ЗапасыОтгруженные");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОтгрузкаБезПереходаПраваСобственности");
	
	//   Выручка (кроме оборудования, розницы в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СобственныеЗапасы");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	
	// При отгрузке без перехода права собственности счета выручки также указываются в этом документе, но используются при проведении другого документа.
	
	//  Оборудование (тоже в табличной части Товары)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",     "ОборудованиеНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Оборудование");
	
	//   Выручка (для оборудования)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов",  "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",     "ВидДеятельности");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов", "Расходы");
	
	//   Запасы (розница в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",           "ЗапасыВЦенахПродажи");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТоварыВЦенахПродажи");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПереданныеСчетУчета", "ЗапасыОтгруженные");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОперацииСКомиссионером");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПереданныеСчетУчета", "ЗапасыОтгруженные");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОтгрузкаБезПереходаПраваСобственности");
	
	//   Выручка (розница в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СобственныеЗапасы");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	
	// Табличная часть ВозвратнаяТара
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ВозвратнаяТара", "СчетУчета", "ВозвратнаяТараНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	// Табличная часть Услуги
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Услуги", "СчетДоходов", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ТребуетсяСчетРасходовПоОказаниюУслуг");
	
	// Табличная часть Агентские услуги
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "АгентскиеУслуги", "СчетРасчетов", "РасчетыСКомитентом");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент",         "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДеятельностьНаПатенте");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДоговорКонтрагента");   
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "СпособЗачетаАвансов");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ОтгрузкаБезПереходаПраваСобственности", "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "Оборудование",                          "ВидОперации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ТребуетсяУчетРасчетов",                 "ВидОперации, ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, "ТребуетсяУчетАвансов",                  "ВидОперации, ДоговорКонтрагента");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("ОтгрузкаБезПереходаПраваСобственности") Тогда
		
		ДанныеЗаполнения.ОтгрузкаБезПереходаПраваСобственности = 
			(ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Оборудование") Тогда
		
		ДанныеЗаполнения.Оборудование = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ТребуетсяУчетРасчетов") Или ДанныеЗаполнения.Свойство("ТребуетсяУчетАвансов") Тогда
		
		ОсобенностиДокумента = ОсобенностиУчетаРасчетов(ДанныеЗаполнения.ВидОперации, ДанныеЗаполнения.ДоговорКонтрагента);
			
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ОсобенностиДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьРеквизитыПриИзменении(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Параметры:
//  Объект		- ДокументОбъект
//  СчетаУчета	- оставлен для совместимости; не используется
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект, СчетаУчета = Неопределено) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВТабличнойЧасти(
		Объект,
		ИмяТабличнойЧасти);

КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  Объект                - ДокументОбъект или соответствующие данные формы
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - оставлен для совместимости; не используется
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре = Неопределено) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ИмяТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция РеквизитыЗаСсылками(ВидОперации) Экспорт
	
	РеквизитыЗаСсылками = Новый Соответствие;
	
	// Прячутся за "ПорядокУчетаРасчетов"
	Для Каждого ОписаниеРеквизита Из УчетВзаиморасчетовФормы.РеквизитыДокументаПорядокУчетаРасчетов() Цикл
		РеквизитыЗаСсылками.Вставить(ОписаниеРеквизита.Ключ, "ПорядокУчетаРасчетов");
	КонецЦикла;
	
	// Прячутся за "АналитикаУчета"
	АналитикаУчета = Новый Массив;
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		
		АналитикаУчета.Добавить("Услуги.СчетДоходов");
		АналитикаУчета.Добавить("Услуги.Субконто");
		АналитикаУчета.Добавить("Услуги.СчетУчетаНДСПоРеализации");
		АналитикаУчета.Добавить("Услуги.СчетРасходов");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары Тогда
		
		АналитикаУчета.Добавить("Товары.СчетУчета");
		АналитикаУчета.Добавить("Товары.СчетДоходов");
		АналитикаУчета.Добавить("Товары.Субконто");
		АналитикаУчета.Добавить("Товары.СчетУчетаНДСПоРеализации");
		АналитикаУчета.Добавить("Товары.СчетРасходов");
		
	КонецЕсли;
	
	Для Каждого ИмяРеквизита Из АналитикаУчета Цикл
		РеквизитыЗаСсылками.Вставить(ИмяРеквизита, "АналитикаУчета");
	КонецЦикла;
	
	Возврат РеквизитыЗаСсылками;
	
КонецФункции

Функция ИспользоватьПростуюФорму(ВидОперации) Экспорт
	
	Возврат
		(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги)
		Или
		(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары);
	
КонецФункции

Функция ОсобенностиУчетаРасчетов(ВидОперации, ДоговорКонтрагента) Экспорт
	
	ОсобенностиДокумента = УчетВзаиморасчетовФормы.НовыйОсобенностиУчетаРасчетовДокумента();
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		ОсобенностиДокумента.ТребуетсяУчетРасчетов = Ложь;
	ИначеЕсли Не ИспользоватьПростуюФорму(ВидОперации) И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ОсобенностиДокумента.ТребуетсяУчетРасчетов = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОсобенностиДокумента.ТребуетсяУчетРасчетов Тогда
		ОсобенностиДокумента.ТребуетсяУчетАвансов = Ложь;
	КонецЕсли;
	
	Возврат ОсобенностиДокумента;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("ВременнаяТаблицаНаличиеТоваров", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_РублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НаличиеТоваров
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|					ТОГДА Реквизиты.Организация.ЦифровойИндексОбособленногоПодразделения
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация.ГоловнаяОрганизация.ИНН
	|		ИНАЧЕ Реквизиты.Организация.ИНН
	|	КОНЕЦ КАК ИННпоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация
	|		КОГДА Реквизиты.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Грузоотправитель
	|		ИНАЧЕ ""он же""
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	Реквизиты.Контрагент.ИНН КАК ИННпокупателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузополучатель.ОбособленноеПодразделение
	|				И Реквизиты.Грузополучатель.ГоловнойКонтрагент = Реквизиты.Контрагент
	|				И Реквизиты.Грузополучатель.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Грузополучатель
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК ОбособленноеПодразделениеПокупателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Грузополучатель
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Грузополучатель,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.Представление КАК Основание,
	|	Реквизиты.Руководитель КАК Исполнитель,
	|	Реквизиты.ЗаРуководителяПоПриказу КАК ИсполнительПоПриказу,
	|	Реквизиты.ОтпускПроизвел,
	|	Реквизиты.ДоверенностьНомер,
	|	Реквизиты.ДоверенностьДата,
	|	Реквизиты.ДоверенностьВыдана,
	|	Реквизиты.ДоверенностьЧерезКого,
	|	Реквизиты.ЗаЗаказчикаНаОсновании,
	|	ВЫБОР
	|		КОГДА НаличиеТоваров.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТовары,
	|	Реквизиты.АдресДоставки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаличиеТоваров КАК НаличиеТоваров
	|		ПО Реквизиты.Ссылка = НаличиеТоваров.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	ТаблицаТовары.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ТаблицаТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0) КАК СуммаБезНДСРуб,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК КонтрагентСводныйСФ
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаТовары.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|			И (ТаблицаТовары.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУслуги.НомерСтроки,
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.Номенклатура.Код,
	|	ТаблицаУслуги.Номенклатура.Артикул,
	|	ТаблицаУслуги.Содержание,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ТаблицаУслуги.Номенклатура.ЕдиницаИзмерения,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.СуммаНДС,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ИСТИНА,
	|	ТаблицаУслуги.Ссылка.СуммаВключаетНДС,
	|	ТаблицаУслуги.Ссылка,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0),
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаУслуги.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|			И (ТаблицаУслуги.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаАгентскиеУслуги.НомерСтроки,
	|	ТаблицаАгентскиеУслуги.Номенклатура,
	|	ТаблицаАгентскиеУслуги.Номенклатура.Код,
	|	ТаблицаАгентскиеУслуги.Номенклатура.Артикул,
	|	ТаблицаАгентскиеУслуги.Содержание,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ТаблицаАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения,
	|	ТаблицаАгентскиеУслуги.Количество,
	|	ТаблицаАгентскиеУслуги.Цена,
	|	ТаблицаАгентскиеУслуги.Сумма,
	|	ТаблицаАгентскиеУслуги.СуммаНДС,
	|	ТаблицаАгентскиеУслуги.СтавкаНДС,
	|	ИСТИНА,
	|	ТаблицаАгентскиеУслуги.Ссылка.СуммаВключаетНДС,
	|	ТаблицаАгентскиеУслуги.Ссылка,
	|	ИСТИНА,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0),
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаАгентскиеУслуги.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|			И (ТаблицаАгентскиеУслуги.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаАгентскиеУслуги.Ссылка = &ДокументОснование";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов() Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка) КАК СчетФактура,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаФактуры,
	|	РеализацияТоваровУслуг.Руководитель,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер,
	|	ИСТИНА КАК СчетФактураБезНДС,
	|	ЛОЖЬ КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ИСТИНА КАК УдалитьПрефиксыИзНомера,
	|	ИСТИНА КАК ЭтоСчетФактураВыданный,
	|	ИСТИНА КАК ВыводитьСуммуБезНДС,
	|	РеализацияТоваровУслуг.Ссылка КАК ДокументОснование,
	|	1 КАК НомерСтроки,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	"""" КАК КППСчетаФактуры,
	|	РеализацияТоваровУслуг.Дата КАК ДатаСведений
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура,
	|	РеализацияТоваровУслугВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ИСТИНА КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ВозвратнаяТара
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|ГДЕ
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|	И НЕ РеализацияТоваровУслугТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВозвратнаяТара.Номенклатура
	|				ИЗ
	|					ВозвратнаяТара КАК ВозвратнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
	|	И НЕ РеализацияТоваровУслугУслуги.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВозвратнаяТара.Номенклатура
	|				ИЗ
	|					ВозвратнаяТара КАК ВозвратнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратнаяТара.Номенклатура,
	|	ВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ВозвратнаяТара.ЦенаВключаетНДС
	|ИЗ
	|	ВозвратнаяТара КАК ВозвратнаяТара
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
	|	РеализацияТоваровУслугАгентскиеУслуги.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
	|ГДЕ
	|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка
	|	И НЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВозвратнаяТара.Номенклатура
	|				ИЗ
	|					ВозвратнаяТара КАК ВозвратнаяТара)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	
	Возврат МассивРеквизитов;
	
КонецФункции

// Возвращаяет массив документов, для которых выписка счетов-фактур не требуется
//
Функция ПолучитьДокументыСчетФактураНеТребуются(МассивДокументов) Экспорт
	
	ДокументыСчетФактураНеТребуются = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат ДокументыСчетФактураНеТребуются
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ЕстьНДС
	|ПОМЕСТИТЬ ВТ_ДокументыСНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|	И РеализацияТоваровУслуг.СуммаНДС > 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|	И РеализацияТоваровУслуг.СуммаНДС > 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|	И РеализацияТоваровУслуг.СуммаНДС > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Организация,
	|	ЕСТЬNULL(ВТ_ДокументыСНДС.ЕстьНДС, ЛОЖЬ) КАК ЕстьНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыСНДС КАК ВТ_ДокументыСНДС
	|		ПО (ВТ_ДокументыСНДС.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|	И РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|	И РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Организация,
	|	ЕСТЬNULL(ВТ_ДокументыСНДС.ЕстьНДС, ЛОЖЬ) КАК ЕстьНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыСНДС КАК ВТ_ДокументыСНДС
	|		ПО (ВТ_ДокументыСНДС.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|	И РеализацияТоваровУслуг.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
	|	И РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Отгрузки без перехода права собственности
	ВыборкаБезПереходаПраваСобственности = Результат[1].Выбрать();
	Пока ВыборкаБезПереходаПраваСобственности.Следующий() Цикл
		
		Если НЕ УчетнаяПолитика.НачислятьНДСПоОтгрузке(ВыборкаБезПереходаПраваСобственности.Организация, ВыборкаБезПереходаПраваСобственности.Дата) Тогда
			ДокументыСчетФактураНеТребуются.Добавить(ВыборкаБезПереходаПраваСобственности.Ссылка);
		ИначеЕсли НЕ ВыборкаБезПереходаПраваСобственности.ЕстьНДС
			И (НЕ УчетнаяПолитика.ПлательщикНДС(ВыборкаБезПереходаПраваСобственности.Организация, ВыборкаБезПереходаПраваСобственности.Дата) 
			ИЛИ УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ВыборкаБезПереходаПраваСобственности.Дата) = 3 
			И Не УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(ВыборкаБезПереходаПраваСобственности.Организация, ВыборкаБезПереходаПраваСобственности.Дата)) Тогда
			ДокументыСчетФактураНеТребуются.Добавить(ВыборкаБезПереходаПраваСобственности.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Отгрузки по договорам комиссии
	ВыборкаКомиссия = Результат[2].Выбрать();
	Пока ВыборкаКомиссия.Следующий() Цикл
		ДокументыСчетФактураНеТребуются.Добавить(ВыборкаКомиссия.Ссылка);
	КонецЦикла;
	
	// Прочие реализации
	ВыборкаРеализация = Результат[3].Выбрать();
	Пока ВыборкаРеализация.Следующий() Цикл
		
		Если НЕ ВыборкаРеализация.ЕстьНДС
			И (НЕ УчетнаяПолитика.ПлательщикНДС(ВыборкаРеализация.Организация, ВыборкаРеализация.Дата) 
			ИЛИ УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ВыборкаРеализация.Дата) = 3 
			И НЕ УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(ВыборкаРеализация.Организация, ВыборкаРеализация.Дата)) Тогда
			ДокументыСчетФактураНеТребуются.Добавить(ВыборкаРеализация.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыСчетФактураНеТребуются;
	
КонецФункции

Функция ЕстьРеализацияПоДокументуОтгрузки(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтгрузкаБезПереходаПраваСобственности", Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
	Запрос.УстановитьПараметр("Партия", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
	|		ПО (РеализацияТоваровУслуг.Ссылка = РеализацияОтгруженныхТоваров.ДокументОтгрузки
	|				И РеализацияОтгруженныхТоваров.Проведен)
	|ГДЕ
	|	РеализацияТоваровУслуг.ВидОперации = &ОтгрузкаБезПереходаПраваСобственности
	|	И РеализацияОтгруженныхТоваров.ДокументОтгрузки ЕСТЬ NULL 
	|	И РеализацияТоваровУслуг.Ссылка = &Партия";
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации	= Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// При вводе на основании счета на оплату и поступления товаров и услуг, 
	// открывается форма, содержащая только ТЧ Товары или только ТЧ Услуги, если
	// у документа-основания заполнена только соответствующая таблица.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыРеализацииТоваровУслуг = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыРеализацииТоваровУслуг[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
		Параметры.Вставить("ИзменитьВидОперации");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//  КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	// Расходная накладная
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "Накладная";
	КомандаОтправки.Представление = НСтр("ru='Расходная накладная'");
	
	// Акт об оказании услуг
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "Акт";
	КомандаОтправки.Представление = НСтр("ru='Акт об оказании услуг'");
	
	// Товарная накладная (ТОРГ-12) с услугами
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "ТОРГ12";
	КомандаОтправки.Представление = НСтр("ru='Товарная накладная (ТОРГ-12) с услугами'");
	
	// Товарная накладная (ТОРГ-12)
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "ТОРГ12_БезУслуг";
	КомандаОтправки.Представление = НСтр("ru='Товарная накладная (ТОРГ-12)'");
	
	// Счет-фактура
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "СчетФактура";
	КомандаОтправки.Представление = НСтр("ru='Счет-фактура'");
	КомандаОтправки.Обработчик    = "ОтправкаПочтовыхСообщений.ОтправитьСчетФактураВыданный";
	
	// Универсальный передаточный документ
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "УниверсальныйПередаточныйДокумент";
	КомандаОтправки.Представление = НСтр("ru='Универсальный передаточный документ (УПД)'");
	КомандаОтправки.Обработчик    = "ОтправкаПочтовыхСообщений.ОтправитьУПД";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыРеализацияТоваровУслуг = Новый Соответствие;
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Товары, "ФормаДокументаТовары");
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Услуги, "ФормаДокументаУслуги");
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, 						"ФормаДокументаОбщая");
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности, 	"ФормаДокументаОбщая");
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, 							"ФормаДокументаОбщая");
	
	Возврат ФормыРеализацияТоваровУслуг;

КонецФункции 

Функция ПолучитьДоступныеВидыЭдПоВидуОперации(ВидОперации) Экспорт
	
	Результат = Новый СписокЗначений;
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		Результат.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец, "ТОРГ-12");
	КонецЕсли;
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Товары 
		И ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		Результат.Добавить(Перечисления.ВидыЭД.АктИсполнитель, "Акт об оказании услуг");
	КонецЕсли;
	Результат.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав, "Акт на передачу прав");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВидЭдПоУмолчанию(ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		Возврат Перечисления.ВидыЭД.АктИсполнитель;
	Иначе
		Возврат Перечисления.ВидыЭД.ТОРГ12Продавец;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт
	
	Результат = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	ОсуществляетсяРеализацияТоваровУслугКомитентов			 = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров	 = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров");
	ВедетсяОтгрузкаБезПереходаПраваСобственности   			 = ПолучитьФункциональнуюОпцию("ВедетсяОтгрузкаБезПереходаПраваСобственности");
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК ЕстьТовары,
		|	0 КАК ЕстьУслуги,
		|	0 КАК ЕстьВозвратнаяТара,
		|	0 КАК ЕстьОборудование
		|ПОМЕСТИТЬ ВТ_Таблицы
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК ДокОснование
		|ГДЕ
		|	ДокОснование.Ссылка = &Ссылка
		|	И НЕ ЕСТЬNULL(ДокОснование.Номенклатура.Услуга, ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	0,
		|	1,
		|	0,
		|	0
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК ДокОснование
		|ГДЕ
		|	ДокОснование.Ссылка = &Ссылка
		|	И ЕСТЬNULL(ДокОснование.Номенклатура.Услуга, ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	0,
		|	0,
		|	1,
		|	0
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК ДокОснование
		|ГДЕ
		|	ДокОснование.Ссылка = &Ссылка";
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	0 КАК ЕстьТовары,
		|	0 КАК ЕстьУслуги,
		|	0 КАК ЕстьВозвратнаяТара,
		|	1 КАК ЕстьОборудование
		|ПОМЕСТИТЬ ВТ_Таблицы
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ДокОснование
		|ГДЕ
		|	ДокОснование.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК ЕстьТовары,
		|	0 КАК ЕстьУслуги,
		|	0 КАК ЕстьВозвратнаяТара,
		|	0 КАК ЕстьОборудование
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ДокОснование
		|ГДЕ
		|	ДокОснование.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	0 КАК ЕстьТовары,
		|	0 КАК ЕстьУслуги,
		|	1 КАК ЕстьВозвратнаяТара,
		|	0 КАК ЕстьОборудование
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ДокОснование
		|ГДЕ
		|	ДокОснование.Ссылка = &Ссылка
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() + 
	"ВЫБРАТЬ
	|	СУММА(ВТ_Таблица.ЕстьТовары) КАК ЕстьТовары,
	|	СУММА(ВТ_Таблица.ЕстьУслуги) КАК ЕстьУслуги,
	|	СУММА(ВТ_Таблица.ЕстьВозвратнаяТара) КАК ЕстьВозвратнаяТара,
	|	СУММА(ВТ_Таблица.ЕстьОборудование) КАК ЕстьОборудование
	|ИЗ
	|	ВТ_Таблицы КАК ВТ_Таблица";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьТовары 	= Ложь;
	ЕстьУслуги	= Ложь;
	ЕстьВозвратнаяТара	= Ложь;
	ЕстьОборудование 	= Ложь;
	Если Выборка.Следующий() Тогда
		ЕстьТовары 	= ЗначениеЗаполнено(Выборка.ЕстьТовары) И Выборка.ЕстьТовары > 0;
		ЕстьУслуги	= ЗначениеЗаполнено(Выборка.ЕстьУслуги) И Выборка.ЕстьУслуги > 0;
		ЕстьВозвратнаяТара	= ЗначениеЗаполнено(Выборка.ЕстьВозвратнаяТара) И Выборка.ЕстьВозвратнаяТара > 0;
		ЕстьОборудование	= ЗначениеЗаполнено(Выборка.ЕстьОборудование) И Выборка.ЕстьОборудование > 0;
	КонецЕсли;

	Если ЕстьТовары И (ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров ИЛИ ВедетсяОтгрузкаБезПереходаПраваСобственности) Тогда
	    // Предложим пользователю выбрать необходимую форму
		Результат = Неопределено;
	
	ИначеЕсли ЕстьОборудование ИЛИ ЕстьВозвратнаяТара Тогда
		// Реализация оборудования и использование возвратной тары выполняется через основную форму
	
	ИначеЕсли ЕстьТовары И ЕстьУслуги Тогда
		// Одновременная реализация товаров и услуг выполняется через основную форму
	
	ИначеЕсли ЕстьТовары Тогда
		Результат = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
	
	ИначеЕсли ЕстьУслуги Тогда
		// Если осуществляется реализация товаров и услуг комитентов, то могут быть агентские услуги, которые 
		// указываются в основной форме, иначе отображаем форму только для собственных услуг.
		Если НЕ ОсуществляетсяРеализацияТоваровУслугКомитентов Тогда
		
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		
		КонецЕсли; 
		
	КонецЕсли;

	// Все остальные случаи - через основную форму.
	Возврат Результат;

КонецФункции

// Перечень табличных частей, данные которых не используются 
// в контексте документа, скрыты от пользователя
Функция НеИспользуемыеТабличныеЧасти(ВидОперации, Комиссия) Экспорт
	
	ТабличныеЧасти = Новый Массив;
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары Тогда

		// Все, кроме товаров
		ТабличныеЧасти.Добавить("Услуги");
		ТабличныеЧасти.Добавить("АгентскиеУслуги");
		ТабличныеЧасти.Добавить("ВозвратнаяТара");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда

		// Все, кроме услуг
		ТабличныеЧасти.Добавить("Товары");
		ТабличныеЧасти.Добавить("АгентскиеУслуги");
		ТабличныеЧасти.Добавить("ВозвратнаяТара");
	
	Иначе
	
		// Услуги не доступны при комиссии и отгрузке без перехода права собственности
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности 
			ИЛИ Комиссия Тогда
			ТабличныеЧасти.Добавить("Услуги");
			ТабличныеЧасти.Добавить("АгентскиеУслуги");
		КонецЕсли;
		
		// Возвратная тара доступна только, если включена соответствующая опция
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
			ТабличныеЧасти.Добавить("ВозвратнаяТара");
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ТабличныеЧасти;
	
КонецФункции

Функция ПодготовитьСтруктуруТаблицУСН(ТаблицаРеквизиты, ТаблицаДокумента, ТаблицаВзаиморасчеты) Экспорт
	
	Параметры = ПодготовитьПараметрыСтруктурыТаблицУСН(ТаблицаРеквизиты, 
															ТаблицаДокумента, 
															ТаблицаВзаиморасчеты);
															
	ТаблицаПрочихРасчетовУСН = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	Взаиморасчеты = Параметры.Взаиморасчеты;
	
	СтруктураВозврата = Новый Структура("ТаблицаПрочихРасчетовУСН, ТаблицаВзаиморасчетыУСН", 
											ТаблицаПрочихРасчетовУСН, Взаиморасчеты);

	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаДокумента.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0]; 
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ ПрименяетсяУСН Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ЕстьЭквайринг = ПроверитьНаличиеЭквайринга(Взаиморасчеты);
	
	Если НЕ ЕстьЭквайринг Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
	СтруктураПараметров	= Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПрочиеРасчеты");
	
	ЗначенияБлокировки	= Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период",		Новый Диапазон(, Реквизиты.Период)); 
	ЗначенияБлокировки.Вставить("Организация",	Реквизиты.Организация);
	
	ОплатыПлатежнойКартойДляБлокировкиПрочихРасчетов = 
		ПодготовитьТаблицуОплатаПлатежнойКартойДляБлокировкиПрочихРасчетов(Взаиморасчеты);
	
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("РасчетныйДокумент", "ДокументРасчетов");
	
	СтруктураПараметров.Вставить("ИсточникДанных",
		ОплатыПлатежнойКартойДляБлокировкиПрочихРасчетов);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	
	МассивДокументов = ТаблицаВзаиморасчеты.ВыгрузитьКолонку("ДокументРасчетов");
	
	ГраницаОстатка = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ДатаОстатка", ГраницаОстатка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток
	|ПОМЕСТИТЬ ВТОстатковПрочихРасчетов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И РасчетныйДокумент В (&МассивДокументов)) КАК ПрочиеРасчетыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстатковПрочихРасчетов.Организация,
	|	ВТОстатковПрочихРасчетов.СчетУчета,
	|	ВТОстатковПрочихРасчетов.Контрагент,
	|	ВТОстатковПрочихРасчетов.РасчетныйДокумент,
	|	ВТОстатковПрочихРасчетов.ДоговорКонтрагента,
	|	ВТОстатковПрочихРасчетов.СуммаОстаток,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервичногоДокумента
	|ИЗ
	|	ВТОстатковПрочихРасчетов КАК ВТОстатковПрочихРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТОстатковПрочихРасчетов.РасчетныйДокумент = ДанныеПервичныхДокументов.Документ
	|			И ВТОстатковПрочихРасчетов.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПервичногоДокумента";
	
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТаблицаРезультата.Индексы.Добавить("РасчетныйДокумент");
	
	ТаблицаВзаиморасчетыУСН = УчетВзаиморасчетов.ПустаяТаблицаВзаиморасчетовЗачетАвансов();
	
	Для Каждого СтрокаТаблицы Из Взаиморасчеты Цикл
		
		СуммаДляЗакрытия = СтрокаТаблицы.СуммаРуб;
		
		СуммаВзаиморасчетовВзаиморасчеты	= СтрокаТаблицы.СуммаВзаиморасчетов;
		СуммаРубВзаиморасчеты				= СтрокаТаблицы.СуммаРуб;
		
		КурсСуммыВзаиморасчетов = ?(СуммаВзаиморасчетовВзаиморасчеты = 0, 0,
										СуммаРубВзаиморасчеты/СуммаВзаиморасчетовВзаиморасчеты);
		КурсАванса				= ?(СуммаВзаиморасчетовВзаиморасчеты = 0, 0,
										СтрокаТаблицы.СуммаРубПоКурсуАванса/СуммаВзаиморасчетовВзаиморасчеты);
										
		СуммаВзаиморасчетовЕНВДВзаиморасчеты		= СтрокаТаблицы.СуммаВзаиморасчетовЕНВД;
		СуммаВзаиморасчетовКомитентаВзаиморасчеты	= СтрокаТаблицы.СуммаВзаиморасчетовКомитента;
		СуммаВзаиморасчетовПатентВзаиморасчеты		= СтрокаТаблицы.СуммаВзаиморасчетовПатент;
		
		СуммаРубЕНВД		= СтрокаТаблицы.СуммаРуб_ЕНВД;
		СуммаРубКомитента	= СтрокаТаблицы.СуммаРуб_Комитента;
		СуммаРубПатент		= СтрокаТаблицы.СуммаРуб_Патент;
		
		СтруктураПоиска = Новый Структура("РасчетныйДокумент", СтрокаТаблицы.ДокументРасчетов);
		
		МассивНайденныхСтрок = ТаблицаРезультата.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ЭлементМассива Из МассивНайденныхСтрок Цикл
			
			СуммаДвижения = Мин(СуммаДляЗакрытия, ЭлементМассива.СуммаОстаток);
			
			НоваяСтрока = ТаблицаПрочихРасчетовУСН.Добавить();
			
			//Свойства
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			//Измерения и ресурсы
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
			НоваяСтрока.Сумма		= СуммаДвижения;
			
			НоваяСтрока = ТаблицаПрочихРасчетовУСН.Добавить();
			
			//Свойства
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			//Измерения и ресурсы
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
			НоваяСтрока.РасчетныйДокумент	= Реквизиты.Регистратор;
			НоваяСтрока.Сумма				= СуммаДвижения;
			
			// Создадим строки таблицы взаиморасчетов для УСН
			ВзаиморасчетыУСН = ТаблицаВзаиморасчетыУСН.Добавить();
			
			ЗаполнитьЗначенияСвойств(ВзаиморасчетыУСН, СтрокаТаблицы);
			
			ВзаиморасчетыУСН.СуммаРуб				= СуммаДвижения;
			ВзаиморасчетыУСН.СуммаВзаиморасчетов	= ?(КурсСуммыВзаиморасчетов = 0, 0,
															СуммаДвижения/КурсСуммыВзаиморасчетов);
															
			ВзаиморасчетыУСН.СуммаРубПоКурсуАванса = ВзаиморасчетыУСН.СуммаВзаиморасчетов*КурсАванса;
			
			КоэффициентВзаиморасчетов = ?(СуммаВзаиморасчетовВзаиморасчеты = 0, 0,
											ВзаиморасчетыУСН.СуммаВзаиморасчетов/СуммаВзаиморасчетовВзаиморасчеты);
			
			ВзаиморасчетыУСН.СуммаВзаиморасчетовЕНВД		= СуммаВзаиморасчетовЕНВДВзаиморасчеты*КоэффициентВзаиморасчетов;
			ВзаиморасчетыУСН.СуммаВзаиморасчетовКомитента	= СуммаВзаиморасчетовКомитентаВзаиморасчеты*КоэффициентВзаиморасчетов;
			ВзаиморасчетыУСН.СуммаВзаиморасчетовПатент		= СуммаВзаиморасчетовПатентВзаиморасчеты*КоэффициентВзаиморасчетов;
			
			КоэффициентРуб = ?(СуммаРубВзаиморасчеты = 0, 0,
												ВзаиморасчетыУСН.СуммаРуб/СуммаРубВзаиморасчеты);
			
			ВзаиморасчетыУСН.СуммаРУб_ЕНВД		= СуммаРубЕНВД*КоэффициентРуб;
			ВзаиморасчетыУСН.СуммаРуб_Комитента = СуммаРубКомитента*КоэффициентРуб;
			ВзаиморасчетыУСН.СуммаРуб_Патент	= СуммаРубПатент*КоэффициентРуб;
			
			ВзаиморасчетыУСН.ДокументРасчетов		= Реквизиты.Регистратор;
			ВзаиморасчетыУСН.ДатаДокументаРасчетов	= Реквизиты.Период;
			ВзаиморасчетыУСН.ВидДоговора			= Неопределено;
			
			СуммаДляЗакрытия = СуммаДляЗакрытия - НоваяСтрока.Сумма;
			
			Если СуммаДляЗакрытия <= 0 Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если СуммаДляЗакрытия > 0 Тогда
			
			// Создадим строки таблицы взаиморасчетов для УСН
			ВзаиморасчетыУСН = ТаблицаВзаиморасчетыУСН.Добавить();
			
			ЗаполнитьЗначенияСвойств(ВзаиморасчетыУСН, СтрокаТаблицы);
			
			ВзаиморасчетыУСН.СуммаРуб				= СуммаДляЗакрытия;
			ВзаиморасчетыУСН.СуммаВзаиморасчетов	= ?(КурсСуммыВзаиморасчетов = 0, 0,
															СуммаДляЗакрытия/КурсСуммыВзаиморасчетов);
			ВзаиморасчетыУСН.СуммаРубПоКурсуАванса = ВзаиморасчетыУСН.СуммаВзаиморасчетов*КурсАванса;
			
			КоэффициентВзаиморасчетов = ?(СуммаВзаиморасчетовВзаиморасчеты = 0, 0,
											ВзаиморасчетыУСН.СуммаВзаиморасчетов/СуммаВзаиморасчетовВзаиморасчеты);
			
			ВзаиморасчетыУСН.СуммаВзаиморасчетовЕНВД		= СуммаВзаиморасчетовЕНВДВзаиморасчеты*КоэффициентВзаиморасчетов;
			ВзаиморасчетыУСН.СуммаВзаиморасчетовКомитента	= СуммаВзаиморасчетовКомитентаВзаиморасчеты*КоэффициентВзаиморасчетов;
			ВзаиморасчетыУСН.СуммаВзаиморасчетовПатент		= СуммаВзаиморасчетовПатентВзаиморасчеты*КоэффициентВзаиморасчетов;
			
			КоэффициентРуб = ?(СуммаРубВзаиморасчеты = 0, 0,
											ВзаиморасчетыУСН.СуммаРуб/СуммаРубВзаиморасчеты);
			
			ВзаиморасчетыУСН.СуммаРУб_ЕНВД		= СуммаРубЕНВД*КоэффициентРуб;
			ВзаиморасчетыУСН.СуммаРуб_Комитента = СуммаРубКомитента*КоэффициентРуб;
			ВзаиморасчетыУСН.СуммаРуб_Патент	= СуммаРубПатент*КоэффициентРуб;
			
		КонецЕсли;	
		
	КонецЦикла;
		
	СвернутьТаблицуВзаиморасчетовУСН(ТаблицаВзаиморасчетыУСН);
	
	ТаблицаВзаиморасчетыУСН.Индексы.Добавить("ДокументРасчетов");
	
	Для Каждого СтрокаДокумента Из Параметры.ТаблицаДокумента Цикл
		
		НераспределеннаяСумма = СтрокаДокумента.СуммаВзаиморасчетов;
		
		Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетыУСН Цикл
			
			Если СтрокаВзаиморасчетов.ДокументРасчетов = Реквизиты.Регистратор Тогда
				Продолжить;
			КонецЕсли;
			
			НераспределеннаяСумма = НераспределеннаяСумма - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			
		КонецЦикла;
		
		СтрокаВзаиморасчетов = ТаблицаВзаиморасчетыУСН.Найти(Реквизиты.Регистратор, "ДокументРасчетов");
		
		Если НЕ СтрокаВзаиморасчетов = Неопределено Тогда
			
			Если Реквизиты.УчитыватьЗадолженностьУСН ИЛИ Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
				
				КоэффициентЕНВД = ?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0,
					СтрокаДокумента.СуммаВзаиморасчетовЕНВД / СтрокаДокумента.СуммаВзаиморасчетов);
				
				КоэффициентПатент = ?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0,
					СтрокаДокумента.СуммаВзаиморасчетовПатент / СтрокаДокумента.СуммаВзаиморасчетов);
				
				КоэффициентКомитента = ?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0,
					СтрокаДокумента.СуммаВзаиморасчетовКомитента / СтрокаДокумента.СуммаВзаиморасчетов);
					
				КоэффициентРуб = ?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0,
					СтрокаДокумента.СуммаРуб / СтрокаДокумента.СуммаВзаиморасчетов);	
				
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД		= Окр(НераспределеннаяСумма * КоэффициентЕНВД, 2);
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент		= Окр(НераспределеннаяСумма * КоэффициентПатент, 2);
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента	= Окр(НераспределеннаяСумма * КоэффициентКомитента, 2);
				
				СтрокаВзаиморасчетов.СуммаРуб_ЕНВД		= Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД * КоэффициентРуб, 2);
				СтрокаВзаиморасчетов.СуммаРуб_Патент	= Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент * КоэффициентРуб, 2);
				СтрокаВзаиморасчетов.СуммаРуб_Комитента = Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента * КоэффициентРуб, 2);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
		
	СтруктураВозврата.ТаблицаПрочихРасчетовУСН	= ТаблицаПрочихРасчетовУСН;
	СтруктураВозврата.ТаблицаВзаиморасчетыУСН	= ТаблицаВзаиморасчетыУСН;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура СвернутьТаблицуВзаиморасчетовУСН(ТаблицаВзаиморасчетыУСН)
	
	СписокГруппируемыхКолонок = ""
	+"Контрагент," 
	+"ДоговорКонтрагента,"
	+"ВалютаВзаиморасчетов,"
	+"ДокументРасчетов,"
	+"ДатаДокументаРасчетов,"
	+"Подразделение,"
	+"ПодразделениеРасчетов,"
	+"СчетРасчетов,"
	+"СчетАвансов,"
	+"ВидДоговора,"
	+"РасчетыВВалюте,"
	+"РасчетыВУсловныхЕдиницах,"
	+"УчетАгентскогоНДС";
	
	СписокСуммируемыхКолонок = ""
	+"ОстатокВзаиморасчетов,"
	+"СуммаВзаиморасчетов,"
	+"СуммаРуб,"
	+"СуммаРубПоКурсуАванса,"
	+"СуммаВзаиморасчетовЕНВД,"
	+"СуммаРуб_ЕНВД,"
	+"СуммаВзаиморасчетовПатент,"
	+"СуммаРуб_Патент,"
	+"СуммаВзаиморасчетовКомитента,"
	+"СуммаРуб_Комитента";
	
	ТаблицаВзаиморасчетыУСН.Свернуть(СписокГруппируемыхКолонок, СписокСуммируемыхКолонок);
	
КонецПроцедуры	

Функция ПодготовитьПараметрыСтруктурыТаблицУСН(ТаблицаРеквизиты, ТаблицаДокумента, ТаблицаВзаиморасчеты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаДокумента
	
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"						// <СправочникСсылка.Контрагенты> - контрагент, аванс по которому зачитывается
	+ "ДоговорКонтрагента,"				// <СправочникСсылка.ДоговорыКонтрагентов> - договор, аванс по которому зачитывается
	+ "ВалютаВзаиморасчетов,"			// <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "ВидДоговора,"					//
	+ "РасчетыВУсловныхЕдиницах,"		// <Булево> - Истина для договора с расчетами в условных единицах
	+ "УчетАгентскогоНДС,"				// <Булево> - Истина договор предусматривает исполнение обязанностей налогового агента по НДС
	+ "РасчетыВВалюте,"					// <Булево> - Истина для договора с расчетами в любой валюте, кроме рублей (в т.ч и в условных единицах)
	+ "ДокументРасчетов,"				// <ДокументСсылка> - документ-регистратор
	+ "СчетРасчетов,"					// <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "СчетАвансов,"					// <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом по авансам
	+ "Подразделение,"					// <Ссылка на справочник подразделений>
	+ "СуммаВзаиморасчетов,"			// <Число,15,2> - сумма поступления или реализации в валюте взаиморасчетов
	+ "СуммаРуб,"						// <Число,15,2> - сумма поступления или реализации в рублях
	+ "СуммаВзаиморасчетовКомитента,"	// <Число,15,2> - сумма в валюте взаиморасчетов реализованных товаров и услуг комитентов по организации на УСН
	+ "СуммаВзаиморасчетовПатент,"		// <Число,15,2> - сумма в валюте взаиморасчетов реализованных товаров и услуг по деяетльности на патенте
	+ "СуммаВзаиморасчетовЕНВД";		// <Число,15,2> - сумма в валюте взаиморасчетов реализованных товаров и услуг по деятельности ЕНВД по организации на УСН

	Параметры.Вставить("ТаблицаДокумента", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДокумента, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"								// <Дата> - период движений - дата документа
	+ "Регистратор,"						// <ДокументСсылка>
	+ "Организация,"						// <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"					// <СправочникСсылка.Валюты>
	+ "СпособЗачетаАвансов,"				// <ПеречислениеСсылка.СпособыЗачетаАвансов>
	+ "УчитыватьЗадолженностьУСН,"			// <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент,"	// <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения,"				// <Строка> - "Поступление" при зачете авансов, выданных поставщикам (при поступлении материальных ценностей)
											// - "Выбытие" при зачете авансов, полученных от покупателей (при выбытии материальных ценностей)
	+ "ЭтоВозврат";							// <Булево> - Истина при возврате материальных ценностей (от покупателя или поставщику)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"						// <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"				// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"				// <ДокументСсылка>
	+ "ДатаДокументаРасчетов,"			// <Дата> - дата документа расчетов
	+ "ВидДоговора,"					//
	+ "ВалютаВзаиморасчетов,"			// <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "РасчетыВУсловныхЕдиницах,"		// <Булево> - флаг расчетов в условных единицах
	+ "СчетРасчетов,"					// <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "СчетАвансов,"					// <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов по авансам
	+ "Подразделение,"					// <Ссылка на справочник подразделений> - подразделение по счету авансов
	+ "ПодразделениеРасчетов,"			// <Ссылка на справочник подразделений> - подразделение по счету расчетов
	+ "РасчетыВВалюте,"					// <Булево>  - флаг расчетов в валюте (в т.ч. и в условных единицах)
	+ "УчетАгентскогоНДС,"				// <Булево>  - флаг того, что контрагент исполняет обязанности налогового агента по НДС
	+ "ОстатокВзаиморасчетов,"			// <Число,15,2> - сумма остатка в валюте взаиморасчетов на счете учета аванса,
	+ "СуммаВзаиморасчетов,"			// <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаРубПоКурсуАванса,"			// <Число,15,2> - сумма в рублях по курсу на дату аванса
	+ "СуммаРуб,"						// <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)
	+ "СуммаВзаиморасчетовЕНВД,"		// <Число,15,2> - сумма в валюте расчетов по договору по деятельности ЕНВД
	+ "СуммаРуб_ЕНВД,"					// <Число,15,2> - сумма в рублях по деятельности ЕНВД
	+ "СуммаВзаиморасчетовПатент,"		// <Число,15,2> - сумма в валюте расчетов по договору по деятельности на патенте
	+ "СуммаРуб_Патент,"				// <Число,15,2> - сумма в рублях по деятельности на патенте
	+ "СуммаВзаиморасчетовКомитента,"	// <Число,15,2> - сумма в валюте расчетов по договору при реализации товаров и услуг комитентов
	+ "СуммаРуб_Комитента";				// <Число,15,2> - сумма в рублях при реализации товаров и услуг комитентов
	
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьТаблицуОплатаПлатежнойКартойДляБлокировкиПрочихРасчетов(Взаиморасчеты)
	
	ТаблицаДляВозврата = Взаиморасчеты.Скопировать(, "ДокументРасчетов");
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляВозврата Цикл
		
		Если ТипЗнч(СтрокаТаблицы.ДокументРасчетов) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
		
		ТаблицаДляВозврата.Удалить(ЭлементМассива);
		
	КонецЦикла;
	
	Возврат ТаблицаДляВозврата;
	
КонецФункции

Функция ПроверитьНаличиеЭквайринга(Взаиморасчеты)
	
	Для Каждого СтрокаТаблицы Из Взаиморасчеты Цикл
		
		Если ТипЗнч(СтрокаТаблицы.ДокументРасчетов) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПодготовитьСтруктуруТаблицИП(ТаблицаРеквизиты, ТаблицаВзаиморасчеты) Экспорт
	
	Параметры = ПодготовитьПараметрыСтруктурыТаблицИП(ТаблицаРеквизиты, ТаблицаВзаиморасчеты);
	
	ТаблицаПрочихРасчетовИП = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	ТаблицаВзаиморасчетыИП = Параметры.ТаблицаВзаиморасчетыИП;
	
	СтруктураВозврата = Новый Структура("ТаблицаВзаиморасчетыИП, ТаблицаПрочихРасчетовИП", 
										ТаблицаВзаиморасчетыИП, ТаблицаПрочихРасчетовИП);
	
	Если Параметры.Реквизиты.Количество() = 0 
		или ТаблицаВзаиморасчеты = Неопределено Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Взаиморасчеты = Параметры.Взаиморасчеты;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Организация		= Реквизиты.Организация;
	Период			= Реквизиты.Период;
	Регистратор		= Реквизиты.Регистратор;
	Контрагент		= Реквизиты.Контрагент;
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период);
	
	Если НЕ ПлательщикНДФЛ Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ЕстьЭквайринг = ПроверитьНаличиеЭквайринга(Взаиморасчеты);
	
	Если ЕстьЭквайринг Тогда
	
		// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
		СтруктураПараметров	= Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПрочиеРасчеты");
		
		ЗначенияБлокировки	= Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",		Новый Диапазон(, Реквизиты.Период)); 
		ЗначенияБлокировки.Вставить("Организация",	Реквизиты.Организация);
		
		ОплатыПлатежнойКартойДляБлокировкиПрочихРасчетов = 
			ПодготовитьТаблицуОплатаПлатежнойКартойДляБлокировкиПрочихРасчетов(Взаиморасчеты);
		
		ОписаниеИсточника = Новый Структура;
		ОписаниеИсточника.Вставить("РасчетныйДокумент", "ДокументРасчетов");
		
		СтруктураПараметров.Вставить("ИсточникДанных",
			ОплатыПлатежнойКартойДляБлокировкиПрочихРасчетов);
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		
		КонецПериода = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
		
		МассивДокументов = Взаиморасчеты.ВыгрузитьКолонку("ДокументРасчетов");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		
		// Сначала выполним запрос по остаткам прочих расчетов, 
		// если остатки есть, то значит реализация проходит по 
		// эквайрингу, а если нет, то выполнять запрос к оборотам
		// нет смысла.
		Запрос.Текст = ТекстЗапросаПоОстаткамПрочихРасчетов();
		
		ТаблицаОстатковПрочихРасчетов = Запрос.Выполнить().Выгрузить();
		
		// если нет остатков по прочим расчетам, то нет смысла выполнять действия по распределению
		Если ТаблицаОстатковПрочихРасчетов.Количество() > 0 Тогда
		
			СуммаРаспределения = Взаиморасчеты.Итог("СуммаРуб");
			
			ТаблицаОстатковПрочихРасчетов.Индексы.Добавить("НеоплаченныйОстаток, РасчетныйДокумент");
			
			Отбор = Новый Структура;
			Отбор.Вставить("НеоплаченныйОстаток", Ложь);
			
			ТаблицаТолькоНеоплаченныхОстатков = ТаблицаОстатковПрочихРасчетов.Скопировать(Отбор);
			
			Для Каждого  СтрокаТаблицы Из ТаблицаТолькоНеоплаченныхОстатков Цикл
				
				СуммаДвижения = Мин(СуммаРаспределения, СтрокаТаблицы.СуммаОстаток);
				
				НоваяСтрока = ТаблицаПрочихРасчетовИП.Добавить();
				
				//Свойства
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
				
				//Измерения и ресурсы
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Сумма	= СуммаДвижения;
				
				СуммаРаспределения = СуммаРаспределения - НоваяСтрока.Сумма;
				
				Если СуммаРаспределения <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если СуммаРаспределения > 0 Тогда
				
				Для Каждого СтрокаТаблицы Из ТаблицаВзаиморасчеты Цикл
					
					СуммаДляЗакрытия = Мин(СуммаРаспределения, СтрокаТаблицы.СуммаРуб);
					
					СтруктураПоиска = Новый Структура("НеоплаченныйОстаток, РасчетныйДокумент", Истина, СтрокаТаблицы.ДокументРасчетов);
					
					НайденныеСтроки = ТаблицаОстатковПрочихРасчетов.НайтиСтроки(СтруктураПоиска);
					
					Для Каждого ЭлементМассива Из НайденныеСтроки Цикл
						
						СуммаДвижения = Мин(СуммаДляЗакрытия, ЭлементМассива.СуммаОстаток);
						
						НоваяСтрока = ТаблицаПрочихРасчетовИП.Добавить();
						
						//Свойства
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
						НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
						
						//Измерения и ресурсы
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
						НоваяСтрока.Сумма		= СуммаДвижения;
						
						НоваяСтрока = ТаблицаПрочихРасчетовИП.Добавить();
						
						//Свойства
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
						НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
						
						//Измерения и ресурсы
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
						НоваяСтрока.РасчетныйДокумент	= Реквизиты.Регистратор;
						НоваяСтрока.Сумма				= СуммаДвижения;
						
						СуммаДляЗакрытия = СуммаДляЗакрытия - НоваяСтрока.Сумма;
						
						Если СуммаДляЗакрытия <= 0 Тогда
							Прервать;
						КонецЕсли;	
						
					КонецЦикла;
					
					СуммаРаспределения = СуммаРаспределения - СтрокаТаблицы.СуммаРуб + СуммаДляЗакрытия;
					
					Если СуммаРаспределения <= 0 Тогда
						Прервать;
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Т.к. это точно эквайринг, то ТаблицаВзаиморасчетовИП подлежит переформированию,
			// а значит должна быть очищена
			ТаблицаВзаиморасчетыИП.Очистить();
			
			// Если нет никаких строк, то и к оборотам обращаться не нужно
			Если ТаблицаПрочихРасчетовИП.Количество() > 0 Тогда
			
				// Подготовим таблицу Взаиморасчеты исключив из неё строку по начислению задолженности
				// для целей записей в КУДиР ИП данные записи не нужны.
				Взаиморасчеты.Индексы.Добавить("ДокументРасчетов");
				
				СтрокаСРегистратором = Взаиморасчеты.Найти(Регистратор, "ДокументРасчетов");
				
				Если НЕ СтрокаСРегистратором = Неопределено Тогда
					Взаиморасчеты.Удалить(СтрокаСРегистратором);
				КонецЕсли;
				
				//Зачет средств полученных через эквайера
				ТаблицаПрочихРасчетовИП.Индексы.Добавить("РасчетныйДокумент");
				
				РегистраторыПоОстаткамПрочихРасчетов = ТаблицаПрочихРасчетовИП.ВыгрузитьКолонку("РасчетныйДокумент");
				
				Запрос.УстановитьПараметр("РегистраторыПоОстаткамПрочихРасчетов", 
											РегистраторыПоОстаткамПрочихРасчетов);
				
				Запрос.Текст = ТекстЗапросаПоОборотамПрочихРасчетов();
				
				Результат = Запрос.Выполнить();
				
				// если по оборотам ничего не нашлось, то и обрабатывать их не нужно
				Если НЕ Результат.Пустой() Тогда
					
					ВыборкаПоДокументамРасчетов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПоДокументамРасчетов.Следующий() Цикл
						
						ДокументРасчетов = ВыборкаПоДокументамРасчетов.РасчетныйДокумент;
						
						СтрокаВзаиморасчетов = Взаиморасчеты.Найти(ДокументРасчетов, "ДокументРасчетов");
						
						Если СтрокаВзаиморасчетов = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						СуммаДляРаспределения = СтрокаВзаиморасчетов.СуммаРуб;
						
						ВыборкаДетальная = ВыборкаПоДокументамРасчетов.Выбрать();
						
						Пока ВыборкаДетальная.Следующий() Цикл
							
							ДокументРегистратор = ВыборкаДетальная.Регистратор;
							
							СтрокаТаблицыПрочихРасчетов = ТаблицаПрочихРасчетовИП.Найти(ДокументРегистратор, "РасчетныйДокумент");
							
							НоваяСтрока = ТаблицаВзаиморасчетыИП.Добавить();
							
							НоваяСтрока.Контрагент				= Контрагент;
							НоваяСтрока.ДокументРасчетов		= ДокументРегистратор;
							НоваяСтрока.ДатаДокументаРасчетов	= ВыборкаДетальная.ДатаДокументаРасчетов;
							НоваяСтрока.СуммаРуб				= Мин(СуммаДляРаспределения, СтрокаТаблицыПрочихРасчетов.Сумма);
							
							СуммаДляРаспределения = СуммаДляРаспределения - НоваяСтрока.СуммаРуб;
							
							Если СуммаДляРаспределения <= 0 Тогда
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
						Если СуммаДляРаспределения > 0 Тогда
							СтрокаВзаиморасчетов.СуммаРуб = СуммаДляРаспределения;
						Иначе
							Взаиморасчеты.Удалить(СтрокаВзаиморасчетов);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			//Если остались строки, значит есть авансы, полученные не через эквайринг
			Для Каждого СтрокаТаблицы Из Взаиморасчеты Цикл
				
				// Если аванс по документу "Оплата платежной картой", 
				// то значит по этому авансу ещё не получены "живые" деньги,
				// а значит мы не должны зачитывать этот аванс для целей КУДиР ИП
				Если ТипЗнч(СтрокаТаблицы.ДокументРасчетов) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаВзаиморасчетыИП.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
			КонецЦикла;
				
			
		КонецЕсли;
		
	КонецЕсли;
		
	СтруктураВозврата.ТаблицаПрочихРасчетовИП	= ТаблицаПрочихРасчетовИП;
	СтруктураВозврата.ТаблицаВзаиморасчетыИП	= ТаблицаВзаиморасчетыИП;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПодготовитьПараметрыСтруктурыТаблицИП(ТаблицаРеквизитов, ТаблицаВзаиморасчетов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"						// <Дата> - период движений - дата документа
	+ "Регистратор,"				// <ДокументСсылка>
	+ "Организация,"				// <СправочникСсылка.Организации>
	+ "Контрагент";					// <СправочникСсылка.Контрагенты>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.ВзаиморасчетыИП
	
	СписокОбязательныхКолонок = ""
	+"Контрагент,"				// <СправочникСсылка.Контрагенты>
	+"ДокументРасчетов,"			//<ДокументСсылка>
	+"ДатаДокументаРасчетов,"	// <Дата> - период движений - дата документа
	+"СуммаРуб";					//<Число 15, 2>
	
	Параметры.Вставить("ТаблицаВзаиморасчетыИП", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Взаиморасчеты
	
	СписокОбязательныхКолонок = ""
	+"Контрагент,"				// <СправочникСсылка.Контрагенты>
	+"ДокументРасчетов,"			//<ДокументСсылка>
	+"ДатаДокументаРасчетов,"	// <Дата> - период движений - дата документа
	+"СуммаРуб";					//<Число 15, 2>
	
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции	

Функция ТекстЗапросаПоОстаткамПрочихРасчетов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПрочиеРасчетыОстатки.Контрагент = &Контрагент
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НеоплаченныйОстаток,
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток
	|ПОМЕСТИТЬ ВТОстаткиПрочихРасчетов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И (НЕ Контрагент = &Контрагент
	|						И РасчетныйДокумент В (&МассивДокументов)
	|					ИЛИ Контрагент = &Контрагент)) КАК ПрочиеРасчетыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстаткиПрочихРасчетов.НеоплаченныйОстаток,
	|	ВТОстаткиПрочихРасчетов.Организация КАК Организация,
	|	ВТОстаткиПрочихРасчетов.СчетУчета,
	|	ВТОстаткиПрочихРасчетов.Контрагент,
	|	ВТОстаткиПрочихРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВТОстаткиПрочихРасчетов.ДоговорКонтрагента,
	|	ВТОстаткиПрочихРасчетов.СуммаОстаток,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервичногоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаРасчетов
	|ПОМЕСТИТЬ ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента
	|ИЗ
	|	ВТОстаткиПрочихРасчетов КАК ВТОстаткиПрочихРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТОстаткиПрочихРасчетов.РасчетныйДокумент = ДанныеПервичныхДокументов.Документ
	|			И ВТОстаткиПрочихРасчетов.Организация = ДанныеПервичныхДокументов.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.НеоплаченныйОстаток,
	|	ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.Организация,
	|	ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.СчетУчета,
	|	ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.Контрагент,
	|	ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.РасчетныйДокумент,
	|	ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.ДоговорКонтрагента,
	|	ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.СуммаОстаток,
	|	ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.ДатаДокументаРасчетов КАК ДатаДокументаРасчетов
	|ИЗ
	|	ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента КАК ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПервичногоДокумента";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаПоОборотамПрочихРасчетов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОбороты.Регистратор КАК Регистратор,
	|	ПрочиеРасчетыОбороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОбороты.СуммаРасход КАК СуммаРасход,
	|	ПрочиеРасчетыОбороты.Организация КАК Организация
	|ПОМЕСТИТЬ ВТОборотыПрочихРасчетов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Обороты(
	|			,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И РасчетныйДокумент В (&МассивДокументов)) КАК ПрочиеРасчетыОбороты
	|ГДЕ
	|	ПрочиеРасчетыОбороты.Регистратор В (&РегистраторыПоОстаткамПрочихРасчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОборотыПрочихРасчетов.Регистратор,
	|	ВТОборотыПрочихРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВТОборотыПрочихРасчетов.СуммаРасход,
	|	ВТОборотыПрочихРасчетов.Организация,
	|	ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.ДатаДокументаРасчетов КАК ДатаДокументаРасчетов
	|ИЗ
	|	ВТОборотыПрочихРасчетов КАК ВТОборотыПрочихРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента КАК ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента
	|		ПО ВТОборотыПрочихРасчетов.Регистратор = ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.РасчетныйДокумент
	|			И ВТОборотыПрочихРасчетов.Организация = ВТОстаткиПрочихРасчетовСдатойПервичногоДокумента.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПервичногоДокумента
	|ИТОГИ ПО
	|	РасчетныйДокумент";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.УстановитьПараметр("СчетВыручка", ПланыСчетов.Хозрасчетный.Выручка);
	Запрос.УстановитьПараметр("СчетаТоваровКомитентов", 
		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию));
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;
	
	Реквизиты.Вставить("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Реквизиты.Вставить("РасчетыВВалюте",  Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРеглУчета);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РасчетыВВалюте", Реквизиты.РасчетыВВалюте);
	
	Реквизиты.Вставить("ПрименяетсяУСН",
		УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПрименяетсяУСНПатент", 
		УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ПрименяетсяУСН",        Реквизиты.ПрименяетсяУСН);
	Запрос.УстановитьПараметр("ПрименяетсяУСНПатент",  Реквизиты.ПрименяетсяУСНПатент);
	Запрос.УстановитьПараметр("ДеятельностьНаПатенте", Реквизиты.ДеятельностьНаПатенте);
	
	Реквизиты.Вставить("ПлательщикНДС", УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ВедетсяУчетНДСПоФЗ134", УчетНДС.ВедетсяУчетНДСПоФЗ134(Реквизиты.Период));
	
	Реквизиты.Вставить("УчетПоПродажнойСтоимости", Реквизиты.ЕстьТовары
		И УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период) 
			= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	Запрос.УстановитьПараметр("УчетПоПродажнойСтоимости", Реквизиты.УчетПоПродажнойСтоимости);

	Реквизиты.Вставить("ЭтоДоговорСПокупателем", 
		Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Реквизиты.Вставить("ЭтоДоговорСКомиссионером", 
		Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Реквизиты.Вставить("ЭтоОтгрузкаБезПереходаПраваСобственности", 
		Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
	Запрос.УстановитьПараметр("ЭтоДоговорСКомиссионером", Реквизиты.ЭтоДоговорСКомиссионером);
	Запрос.УстановитьПараметр("ЭтоОтгрузкаБезПереходаПраваСобственности", Реквизиты.ЭтоОтгрузкаБезПереходаПраваСобственности);
	Если Реквизиты.ЭтоДоговорСКомиссионером ИЛИ Реквизиты.ЭтоОтгрузкаБезПереходаПраваСобственности Тогда
		Запрос.УстановитьПараметр("ИспользоватьСчет45", Истина);
		Запрос.УстановитьПараметр("ВидКорСубконто1",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		Запрос.УстановитьПараметр("ВидКорСубконто2",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Иначе
		Запрос.УстановитьПараметр("ИспользоватьСчет45", Ложь);
		Запрос.УстановитьПараметр("ВидКорСубконто1",    1);
		Запрос.УстановитьПараметр("ВидКорСубконто2",    Неопределено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Субсчета91",    БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы));
	Запрос.УстановитьПараметр("СинонимТовары", НСтр("ru='Товары'"));
	Запрос.УстановитьПараметр("СинонимТара",   НСтр("ru='Возвратная тара'"));
	Запрос.УстановитьПараметр("ПустойСчет",    ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаСписаниеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаЗачетАвансовКомитентов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПереоценкаТоваровВРознице(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРеализацияУслуг(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаТоварыНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРублевыеСуммыДокументовВВалюте(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции 

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьТоварыКомитентов) КАК ЕстьТоварыКомитентов,
	|	МАКСИМУМ(СоставДокумента.ЕстьУслуги) КАК ЕстьУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьАгентскиеУслуги) КАК ЕстьАгентскиеУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьТара) КАК ЕстьТара
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьТоварыКомитентов,
	|		ЛОЖЬ КАК ЕстьУслуги,
	|		ЛОЖЬ КАК ЕстьАгентскиеУслуги,
	|		ЛОЖЬ КАК ЕстьТара
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ТаблицаДокумента.СчетУчета В(&СчетаТоваровКомитентов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.СпособЗачетаАвансов,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Склад,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.ДеятельностьНаПатенте,
	|	Реквизиты.Патент,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам,
	|	Реквизиты.СчетУчетаРасчетовПоТаре
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.СпособЗачетаАвансов,
	|	Реквизиты.Склад,
	|	Реквизиты.ТипСклада,
	|	Реквизиты.ДеятельностьНаПатенте,
	|	Реквизиты.Патент,
	|	""Реализация"" КАК ТипСписания,
	|	Реквизиты.Ссылка КАК ДокументРеализации,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТоварыКомитентов, ЛОЖЬ) КАК ЕстьТоварыКомитентов,
	|	ЕСТЬNULL(СоставДокумента.ЕстьУслуги, ЛОЖЬ) КАК ЕстьУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьАгентскиеУслуги, ЛОЖЬ) КАК ЕстьАгентскиеУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТара, ЛОЖЬ) КАК ЕстьТара
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)

	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары ИЛИ Реквизиты.ЕстьУслуги Тогда	
		НомераТаблиц.Вставить("ВременнаяТаблицаСчетаЕНВД", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	СчетаДоходовИРасходовЕНВД.Счет
		|ПОМЕСТИТЬ СчетаЕНВД
		|ИЗ
		|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
		|ГДЕ
		|	СчетаДоходовИРасходовЕНВД.Счет В ИЕРАРХИИ(&СчетВыручка)
		|	И НЕ СчетаДоходовИРасходовЕНВД.Счет.ЗапретитьИспользоватьВПроводках"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли; 
	
	Если Реквизиты.ЕстьТовары Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСРуб,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения,
		|	ТаблицаТовары.СчетУчета,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчета В (&СчетаТоваровКомитентов)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоКомиссия,
		|	ТаблицаТовары.ПереданныеСчетУчета,
		|	ТаблицаТовары.СчетУчетаНДСПоРеализации,
		|	ТаблицаТовары.СчетДоходов,
		|	ВЫБОР
		|		КОГДА СчетаЕНВД.Счет ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДоходЕНВД,
		|	ТаблицаТовары.СчетРасходов,
		|	ТаблицаТовары.Субконто,
		|	ТаблицаТовары.ДокументОприходования,
		|	ТаблицаТовары.Себестоимость
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЕНВД КАК СчетаЕНВД
		|		ПО ТаблицаТовары.СчетДоходов = СчетаЕНВД.Счет
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьТара Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаВозвратнаяТара", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаВозвратнаяТара.Ссылка,
		|	ТаблицаВозвратнаяТара.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВозвратнаяТара.Номенклатура,
		|	ТаблицаВозвратнаяТара.Количество,
		|	ТаблицаВозвратнаяТара.Сумма КАК СуммаВзаиморасчетов,
		|	ТаблицаВозвратнаяТара.Сумма КАК СуммаРуб,
		|	ТаблицаВозвратнаяТара.СчетУчета
		|ПОМЕСТИТЬ ТаблицаВозвратнаяТара
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК ТаблицаВозвратнаяТара
		|ГДЕ
		|	ТаблицаВозвратнаяТара.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Ссылка,
		|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Количество,
		|	ТаблицаУслуги.Содержание,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.Сумма
		|		ИНАЧЕ ТаблицаУслуги.Сумма + ТаблицаУслуги.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаУслуги.Сумма
		|		ИНАЧЕ ТаблицаУслуги.Сумма + ТаблицаУслуги.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСРуб,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СчетУчетаНДСПоРеализации,
		|	ТаблицаУслуги.СчетДоходов,
		|	ВЫБОР
		|		КОГДА СчетаЕНВД.Счет ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДоходЕНВД,
		|	ТаблицаУслуги.СчетРасходов,
		|	ТаблицаУслуги.Субконто
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЕНВД КАК СчетаЕНВД
		|		ПО ТаблицаУслуги.СчетДоходов = СчетаЕНВД.Счет
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		НомераТаблиц.Вставить("ВременнаяТаблицаАгентскиеУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаАгентскиеУслуги.Ссылка,
		|	ТаблицаАгентскиеУслуги.НомерСтроки КАК НомерСтроки,
		|	ТаблицаАгентскиеУслуги.Номенклатура,
		|	ТаблицаАгентскиеУслуги.Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаАгентскиеУслуги.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.Сумма
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма + ТаблицаАгентскиеУслуги.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаАгентскиеУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ТаблицаАгентскиеУслуги.Ссылка.СуммаВключаетНДС
		|			ТОГДА ТаблицаАгентскиеУслуги.Сумма
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма + ТаблицаАгентскиеУслуги.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаАгентскиеУслуги.СуммаНДС КАК СуммаНДСРуб,
		|	ТаблицаАгентскиеУслуги.СтавкаНДС,
		|	ТаблицаАгентскиеУслуги.Контрагент,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаАгентскиеУслуги.СчетРасчетов
		|ПОМЕСТИТЬ ТаблицаАгентскиеУслуги
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|ГДЕ
		|	ТаблицаАгентскиеУслуги.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Результат    = Запрос.ВыполнитьПакет();
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары();
	КонецЕсли;
	Если Реквизиты.ЕстьТара Тогда
		СуммыТаблицыТара = Результат[НомераТаблиц["СуммыТаблицыТара"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТара, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТара", СуммыТаблицыТара);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТара();
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		СуммыТаблицыУслуги = Результат[НомераТаблиц["СуммыТаблицыУслуги"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыУслуги, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыУслуги", СуммыТаблицыУслуги);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеУслуги();
	КонецЕсли;
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		СуммыТаблицыАгентскиеУслуги = Результат[НомераТаблиц["СуммыТаблицыАгентскиеУслуги"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыАгентскиеУслуги, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыАгентскиеУслуги", СуммыТаблицыАгентскиеУслуги);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеАгентскиеУслуги();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат    = Запрос.ВыполнитьПакет();
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)

	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаРуб,
		|	ВременнаяТаблицаТовары.СуммаНДСРуб
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	Если Реквизиты.ЕстьТара Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаВозвратнаяТара", "ПОМЕСТИТЬ ВременнаяТаблицаТара");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаВозвратнаяТара.Ссылка = &Ссылка", "ТаблицаВозвратнаяТара.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТара", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТара.НомерСтроки,
		|	ВременнаяТаблицаТара.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТара.СуммаРуб
		|ИЗ
		|	ВременнаяТаблицаТара КАК ВременнаяТаблицаТара"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаУслуги", "ПОМЕСТИТЬ ВременнаяТаблицаУслуги");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаУслуги.Ссылка = &Ссылка", "ТаблицаУслуги.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаУслуги.НомерСтроки,
		|	ВременнаяТаблицаУслуги.СтавкаНДС,
		|	ВременнаяТаблицаУслуги.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаУслуги.СуммаРуб,
		|	ВременнаяТаблицаУслуги.СуммаНДСРуб
		|ИЗ
		|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаАгентскиеУслуги", "ПОМЕСТИТЬ ВременнаяТаблицаАгентскиеУслуги");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаАгентскиеУслуги.Ссылка = &Ссылка", "ТаблицаАгентскиеУслуги.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыАгентскиеУслуги", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаАгентскиеУслуги.НомерСтроки,
		|	ВременнаяТаблицаАгентскиеУслуги.СтавкаНДС,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаРуб,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаНДСРуб
		|ИЗ
		|	ВременнаяТаблицаАгентскиеУслуги КАК ВременнаяТаблицаАгентскиеУслуги"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТовары()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.НомерГТД,
	|	ВременнаяТаблицаТовары.СтранаПроисхождения,
	|	ВременнаяТаблицаТовары.СчетУчета,
	|	ВременнаяТаблицаТовары.ЭтоКомиссия,
	|	ВременнаяТаблицаТовары.ПереданныеСчетУчета,
	|	ВременнаяТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ВременнаяТаблицаТовары.СчетДоходов,
	|	ВременнаяТаблицаТовары.ДоходЕНВД,
	|	ВременнаяТаблицаТовары.СчетРасходов,
	|	ВременнаяТаблицаТовары.Субконто,
	|	ВременнаяТаблицаТовары.ДокументОприходования,
	|	ВременнаяТаблицаТовары.Себестоимость
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеТара()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТара.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТара.СуммаВзаиморасчетов,
	|	СуммыТаблицыТара.СуммаРуб
	|ПОМЕСТИТЬ СуммыТаблицыТара
	|ИЗ
	|	&СуммыТаблицыТара КАК СуммыТаблицыТара
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТара.Ссылка,
	|	ВременнаяТаблицаТара.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТара.Номенклатура,
	|	ВременнаяТаблицаТара.Количество,
	|	СуммыТаблицыТара.СуммаВзаиморасчетов,
	|	СуммыТаблицыТара.СуммаРуб,
	|	ВременнаяТаблицаТара.СчетУчета
	|ПОМЕСТИТЬ ТаблицаВозвратнаяТара
	|ИЗ
	|	ВременнаяТаблицаТара КАК ВременнаяТаблицаТара
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТара КАК СуммыТаблицыТара
	|		ПО ВременнаяТаблицаТара.НомерСтроки = СуммыТаблицыТара.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеУслуги()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыУслуги.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаРуб,
	|	СуммыТаблицыУслуги.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыУслуги
	|ИЗ
	|	&СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаУслуги.Ссылка,
	|	ВременнаяТаблицаУслуги.НомерСтроки,
	|	ВременнаяТаблицаУслуги.Номенклатура,
	|	ВременнаяТаблицаУслуги.Количество,
	|	ВременнаяТаблицаУслуги.Содержание,
	|	СуммыТаблицыУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыУслуги.СуммаРуб,
	|	СуммыТаблицыУслуги.СуммаНДСРуб,
	|	ВременнаяТаблицаУслуги.СтавкаНДС,
	|	ВременнаяТаблицаУслуги.СчетУчетаНДСПоРеализации,
	|	ВременнаяТаблицаУслуги.СчетДоходов,
	|	ВременнаяТаблицаУслуги.ДоходЕНВД,
	|	ВременнаяТаблицаУслуги.СчетРасходов,
	|	ВременнаяТаблицаУслуги.Субконто
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	ВременнаяТаблицаУслуги КАК ВременнаяТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыУслуги КАК СуммыТаблицыУслуги
	|		ПО ВременнаяТаблицаУслуги.НомерСтроки = СуммыТаблицыУслуги.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеАгентскиеУслуги()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыАгентскиеУслуги.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыАгентскиеУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаРуб,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыАгентскиеУслуги
	|ИЗ
	|	&СуммыТаблицыАгентскиеУслуги КАК СуммыТаблицыАгентскиеУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаАгентскиеУслуги.Ссылка,
	|	ВременнаяТаблицаАгентскиеУслуги.НомерСтроки,
	|	ВременнаяТаблицаАгентскиеУслуги.Номенклатура,
	|	ВременнаяТаблицаАгентскиеУслуги.Количество,
	|	СуммыТаблицыАгентскиеУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаРуб,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСРуб,
	|	ВременнаяТаблицаАгентскиеУслуги.СтавкаНДС,
	|	ВременнаяТаблицаАгентскиеУслуги.Контрагент,
	|	ВременнаяТаблицаАгентскиеУслуги.ДоговорКонтрагента,
	|	ВременнаяТаблицаАгентскиеУслуги.ВалютаВзаиморасчетов,
	|	ВременнаяТаблицаАгентскиеУслуги.СчетРасчетов
	|ПОМЕСТИТЬ ТаблицаАгентскиеУслуги
	|ИЗ
	|	ВременнаяТаблицаАгентскиеУслуги КАК ВременнаяТаблицаАгентскиеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыАгентскиеУслуги КАК СуммыТаблицыАгентскиеУслуги
	|		ПО ВременнаяТаблицаАгентскиеУслуги.НомерСтроки = СуммыТаблицыАгентскиеУслуги.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("СписаниеТоваровРеквизиты",     Неопределено);
		ПараметрыПроведения.Вставить("СписаниеТоваровТаблицаТовары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("СписаниеТоваровРеквизиты",     НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеТоваровТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Склад,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	ВЫБОР
	|		КОГДА &ЭтоДоговорСКомиссионером
	|			ТОГДА ""Передача товаров на комиссию""
	|		КОГДА &ЭтоОтгрузкаБезПереходаПраваСобственности
	|			ТОГДА ""Отгрузка без перехода права собственности""
	|		ИНАЧЕ ""Реализация товаров""
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаТовары.ДокументОприходования,
	|	ТаблицаТовары.Себестоимость,
	|	ТаблицаТовары.Количество,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	&ПустойСчет КАК СчетАвансовСКомитентом,
	|	&ПустойСчет КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСчет45
	|			ТОГДА ТаблицаТовары.ПереданныеСчетУчета
	|		ИНАЧЕ ТаблицаТовары.СчетРасходов
	|	КОНЕЦ КАК КорСчетСписания,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСчет45
	|			ТОГДА Реквизиты.Контрагент
	|		ИНАЧЕ ТаблицаТовары.Субконто
	|	КОНЕЦ КАК КорСубконто1,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСчет45
	|			ТОГДА ТаблицаТовары.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	&ВидКорСубконто1 КАК ВидКорСубконто1,
	|	&ВидКорСубконто2 КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
	|	ТаблицаТовары.СчетУчетаНДСПоРеализации
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСписаниеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТара Тогда
		ПараметрыПроведения.Вставить("ТараРеквизиты",     Неопределено);
		ПараметрыПроведения.Вставить("ТараТаблицаТовары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТараРеквизиты",     НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТараТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Склад,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.СчетУчетаРасчетовПоТаре,
	|	""Передача тары"" КАК Содержание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвратнаяТара"" КАК ИмяСписка,
	|	&СинонимТара КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаВозвратнаяТара.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВозвратнаяТара.СчетУчета,
	|	ТаблицаВозвратнаяТара.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	0 КАК Себестоимость,
	|	ТаблицаВозвратнаяТара.Количество,
	|	ТаблицаВозвратнаяТара.СуммаРуб КАК СуммаРуб,
	|	ТаблицаВозвратнаяТара.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	&ПустойСчет КАК СчетАвансовСКомитентом,
	|	&ПустойСчет КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	Реквизиты.СчетУчетаРасчетовПоТаре КАК КорСчетСписания,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры) КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3
	|ИЗ
	|	ТаблицаВозвратнаяТара КАК ТаблицаВозвратнаяТара
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтгрузкаБезПереходаПраваСобственности
		ИЛИ Реквизиты.ЭтоДоговорСКомиссионером Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовРеквизиты",        Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаДокумента", Неопределено);
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаАвансов",   Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСуммВзаиморасчетов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовКомитента) КАК СуммаВзаиморасчетовКомитента,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовЕНВД) КАК СуммаВзаиморасчетовЕНВД,
	|	СУММА(ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовПатент) КАК СуммаВзаиморасчетовПатент
	|ПОМЕСТИТЬ ТаблицаСуммВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК СуммаВзаиморасчетов,
	|		0 КАК СуммаРуб,
	|		0 КАК СуммаВзаиморасчетовКомитента,
	|		0 КАК СуммаВзаиморасчетовЕНВД,
	|		0 КАК СуммаВзаиморасчетовПатент
	|	ГДЕ
	|		ЛОЖЬ";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|		ТаблицаТовары.СуммаРуб КАК СуммаРуб,
		|		ВЫБОР
		|			КОГДА ТаблицаТовары.ЭтоКомиссия
		|				ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаВзаиморасчетовКомитента,
		|		ВЫБОР
		|			КОГДА НЕ ТаблицаТовары.ЭтоКомиссия
		|					И НЕ &ДеятельностьНаПатенте
		|					И ТаблицаТовары.ДоходЕНВД
		|				ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаВзаиморасчетовЕНВД,
		|		ВЫБОР
		|			КОГДА НЕ ТаблицаТовары.ЭтоКомиссия
		|					И &ДеятельностьНаПатенте
		|				ТОГДА ТаблицаТовары.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаВзаиморасчетовПатент
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары";
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаУслуги.СуммаВзаиморасчетов,
		|		ТаблицаУслуги.СуммаРуб,
		|		0,
		|		ВЫБОР
		|			КОГДА НЕ &ДеятельностьНаПатенте
		|					И ТаблицаУслуги.ДоходЕНВД
		|				ТОГДА ТаблицаУслуги.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА &ДеятельностьНаПатенте
		|				ТОГДА ТаблицаУслуги.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	ИЗ
		|		ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаАгентскиеУслуги.СуммаВзаиморасчетов,
		|		ТаблицаАгентскиеУслуги.СуммаРуб,
		|		ТаблицаАгентскиеУслуги.СуммаВзаиморасчетов,
		|		0,
		|		0
		|	ИЗ
		|		ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ") КАК ТаблицаСуммВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ПрименяетсяУСН КАК УчитыватьЗадолженностьУСН,
	|	&ПрименяетсяУСНПатент КАК УчитыватьЗадолженностьУСНПатент,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументРасчетов,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВидДоговора,
	|	Реквизиты.ВалютаВзаиморасчетов,
	|	Реквизиты.РасчетыВУсловныхЕдиницах,
	|	Реквизиты.УчетАгентскогоНДС,
	|	&РасчетыВВалюте КАК РасчетыВВалюте,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов,
	|	ТаблицаСуммВзаиморасчетов.СуммаРуб,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовКомитента,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовЕНВД,
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетовПатент
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммВзаиморасчетов КАК ТаблицаСуммВзаиморасчетов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаСуммВзаиморасчетов.СуммаВзаиморасчетов ЕСТЬ НЕ NULL "
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если Реквизиты.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаАвансов", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ЗачетАвансовТаблицаАвансов",   НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	РеализацияТоваровУслугЗачетАвансов.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
		|	Реквизиты.Контрагент,
		|	Реквизиты.ДоговорКонтрагента,
		|	РеализацияТоваровУслугЗачетАвансов.ДокументАванса,
		|	РеализацияТоваровУслугЗачетАвансов.СуммаЗачета
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ЗачетАвансов КАК РеализацияТоваровУслугЗачетАвансов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	РеализацияТоваровУслугЗачетАвансов.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ЭтоОтгрузкаБезПереходаПраваСобственности
		ИЛИ Реквизиты.ЭтоДоговорСКомиссионером 
		ИЛИ (НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьУслуги И НЕ Реквизиты.ЕстьАгентскиеУслуги) Тогда
		ПараметрыПроведения.Вставить("РеализацияТаблицаДокумента", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеализация", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеализацияТаблицаДокумента", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	NULL КАК ИмяСписка,
	|	NULL КАК НомерСтроки,
	|	NULL КАК Номенклатура,
	|	NULL КАК Количество,
	|	NULL КАК СуммаВзаиморасчетов,
	|	NULL КАК СуммаРуб,
	|	NULL КАК СуммаНДСРуб,
	|	NULL КАК СчетУчета,
	|	NULL КАК СчетДоходов,
	|	NULL КАК Субконто,
	|	NULL КАК СтавкаНДС,
	|	NULL КАК СчетУчетаНДСПоРеализации,
	|	NULL КАК Ссылка,
	|	NULL КАК ЭтоКомиссия,
	|	NULL КАК ЭтоУслуга,
	|	NULL КАК Комитент,
	|	NULL КАК ДоговорКомиссии,
	|	NULL КАК СчетРасчетовСКомитентом,
	|	NULL КАК СчетАвансовСКомитентом,
	|	NULL КАК ВалютаРасчетовСКомитентом
	|ПОМЕСТИТЬ ВременнаяТаблицаРеализация
	|ГДЕ
	|	ЛОЖЬ";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаРуб КАК СуммаРуб,
		|	ТаблицаТовары.СуммаНДСРуб КАК СуммаНДСРуб,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.СчетДоходов КАК СчетДоходов,
		|	ТаблицаТовары.Субконто КАК Субконто,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.ЭтоКомиссия КАК ЭтоКомиссия,
		|	ЛОЖЬ КАК ЭтоУслуга,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Комитент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКомиссии,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаРасчетовСКомитентом
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары";
	КонецЕсли;
	Если Реквизиты.ЕстьУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Услуги"",
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.Количество,
		|	ТаблицаУслуги.СуммаВзаиморасчетов,
		|	ТаблицаУслуги.СуммаРуб,
		|	ТаблицаУслуги.СуммаНДСРуб,
		|	ТаблицаУслуги.СчетРасходов,
		|	ТаблицаУслуги.СчетДоходов,
		|	ТаблицаУслуги.Субконто,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СчетУчетаНДСПоРеализации,
		|	ТаблицаУслуги.Ссылка,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""АгентскиеУслуги"",
		|	ТаблицаАгентскиеУслуги.НомерСтроки,
		|	ТаблицаАгентскиеУслуги.Номенклатура,
		|	ТаблицаАгентскиеУслуги.Количество,
		|	ТаблицаАгентскиеУслуги.СуммаВзаиморасчетов,
		|	ТаблицаАгентскиеУслуги.СуммаРуб,
		|	ТаблицаАгентскиеУслуги.СуммаНДСРуб,
		|	&ПустойСчет,
		|	ТаблицаАгентскиеУслуги.СчетРасчетов,
		|	ТаблицаАгентскиеУслуги.Контрагент,
		|	ТаблицаАгентскиеУслуги.СтавкаНДС,
		|	&ПустойСчет,
		|	ТаблицаАгентскиеУслуги.Ссылка,
		|	ИСТИНА,
		|	ИСТИНА,
		|	ТаблицаАгентскиеУслуги.Контрагент,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента,
		|	ТаблицаАгентскиеУслуги.СчетРасчетов,
		|	ТаблицаАгентскиеУслуги.СчетРасчетов,
		|	ТаблицаАгентскиеУслуги.ВалютаВзаиморасчетов
		|ИЗ
		|	ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() + 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРеализация.ИмяСписка КАК ИмяСписка,
	|	ВременнаяТаблицаРеализация.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаРеализация.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаРеализация.Количество КАК Количество,
	|	ВременнаяТаблицаРеализация.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВременнаяТаблицаРеализация.СуммаРуб КАК СуммаРуб,
	|	ВременнаяТаблицаРеализация.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ВременнаяТаблицаРеализация.СуммаРуб КАК СуммаБУ,
	|	ВременнаяТаблицаРеализация.СуммаРуб КАК СуммаНУ,
	|	ВременнаяТаблицаРеализация.СчетУчета КАК СчетУчета,
	|	ВременнаяТаблицаРеализация.СчетДоходов КАК СчетДоходов,
	|	ВременнаяТаблицаРеализация.Субконто КАК Субконто,
	|	ВременнаяТаблицаРеализация.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаРеализация.СчетУчетаНДСПоРеализации,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
	|	Реквизиты.Контрагент КАК КорСубконто1,
	|	Реквизиты.ДоговорКонтрагента КАК КорСубконто2,
	|	Реквизиты.Ссылка КАК КорСубконто3,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.Контрагент КАК Покупатель,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ВременнаяТаблицаРеализация.ЭтоКомиссия КАК ЭтоКомиссия,
	|	ВременнаяТаблицаРеализация.ЭтоУслуга КАК ЭтоУслуга,
	|	ВременнаяТаблицаРеализация.Комитент КАК Комитент,
	|	ВременнаяТаблицаРеализация.ДоговорКомиссии КАК ДоговорКомиссии,
	|	Реквизиты.Ссылка КАК ДокументРасчетовСКомитентом,
	|	Реквизиты.Дата КАК ДатаРеализации,
	|	ВременнаяТаблицаРеализация.СчетРасчетовСКомитентом КАК СчетРасчетовСКомитентом,
	|	ВременнаяТаблицаРеализация.СчетАвансовСКомитентом КАК СчетАвансовСКомитентом,
	|	ВременнаяТаблицаРеализация.ВалютаРасчетовСКомитентом КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	0 КАК СуммаПоступленияОтКомитента
	|ИЗ
	|	ВременнаяТаблицаРеализация КАК ВременнаяТаблицаРеализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаЗачетАвансовКомитентов(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТоварыКомитентов
		И НЕ Реквизиты.ЕстьАгентскиеУслуги Тогда
		ПараметрыПроведения.Вставить("ЗачетАвансовКомитентовРеквизиты", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ЗачетАвансовКомитентовРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаПереоценкаТоваровВРознице(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТовары
		ИЛИ НЕ Реквизиты.УчетПоПродажнойСтоимости 
		ИЛИ Реквизиты.ТипСклада <> Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		ПараметрыПроведения.Вставить("ПереоценкаТоваровВРозницеРеквизиты",     Неопределено);
		ПараметрыПроведения.Вставить("ПереоценкаТоваровВРозницеТаблицаТовары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПереоценкаТоваровВРозницеРеквизиты",     НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПереоценкаТоваровВРозницеТаблицаТовары", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.Склад,
	|	Реквизиты.ТипСклада КАК ТипСклада
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ТипСклада КАК ТипСклада,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СчетРасходов КАК КорСчетСписания,
	|	ТаблицаТовары.Субконто КАК КорСубконтоСписания1,
	|	ТаблицаТовары.СуммаРуб КАК Сумма
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРеализацияУслуг(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьУслуги Тогда
		ПараметрыПроведения.Вставить("ТаблицаРеализацияУслуг", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаРеализацияУслуг", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""Услуги"" КАК ИмяСписка,
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУслуги.СчетРасходов,
	|	ТаблицаУслуги.Субконто КАК НоменклатурнаяГруппа,
	|	ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаНДСРуб КАК Сумма
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|ГДЕ
	|	НЕ ТаблицаУслуги.СчетРасходов В (&Субсчета91)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	

Функция ТекстЗапросаТоварыНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЭтоОтгрузкаБезПереходаПраваСобственности
		ИЛИ НЕ Реквизиты.ЭтоДоговорСПокупателем 
		ИЛИ НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("НДСТоварыРеализация", Неопределено);
	Иначе
		НомераТаблиц.Вставить("НДСТоварыРеализация", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения,
		|	ТаблицаТовары.Количество КАК Количество
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	НЕ ТаблицаТовары.ЭтоКомиссия
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента" 
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
		
	Если Реквизиты.ЭтоОтгрузкаБезПереходаПраваСобственности
		ИЛИ НЕ Реквизиты.ЭтоДоговорСПокупателем 
		ИЛИ НЕ Реквизиты.ЕстьТоварыКомитентов Тогда
		ПараметрыПроведения.Вставить("НДСТоварыНаКомиссииРеализация", Неопределено);
	Иначе
		НомераТаблиц.Вставить("НДСТоварыНаКомиссииРеализация", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения,
		|	ТаблицаТовары.Количество КАК Количество
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.ЭтоКомиссия
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЭтоОтгрузкаБезПереходаПраваСобственности
		ИЛИ НЕ Реквизиты.ЭтоДоговорСКомиссионером 
		ИЛИ НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("НДСТоварыОтгрузкаКомиссионеру", Неопределено);
	Иначе
		НомераТаблиц.Вставить("НДСТоварыОтгрузкаКомиссионеру", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения,
		|	ТаблицаТовары.Количество КАК Количество
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	НЕ ТаблицаТовары.ЭтоКомиссия
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента" 
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если НЕ Реквизиты.ЭтоОтгрузкаБезПереходаПраваСобственности 
		ИЛИ НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("НДСТоварыОтгрузка", Неопределено);
	Иначе
		НомераТаблиц.Вставить("НДСТоварыОтгрузка", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		  |	""Товары"" КАК ИмяСписка,
		  |	&СинонимТовары КАК СинонимСписка,
		  |	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		  |	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
		  |	ТаблицаТовары.Номенклатура,
		  |	ТаблицаТовары.СтавкаНДС,
		  |	ТаблицаТовары.СчетУчета,
		  |	ТаблицаТовары.НомерГТД,
		  |	ТаблицаТовары.СтранаПроисхождения,
		  |	ТаблицаТовары.Количество КАК Количество,
		  |	ЛОЖЬ КАК ЭтоУслуга,
		  |	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		  |	ТаблицаТовары.СуммаРуб КАК СуммаРуб,
		  |	ТаблицаТовары.СуммаРуб КАК СуммаБУ,
		  |	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаБезНДСРуб,
		  |	ТаблицаТовары.СуммаНДСРуб КАК СуммаНДСРуб,
		  |	НЕОПРЕДЕЛЕНО КАК СчетДоходов,
		  |	НЕОПРЕДЕЛЕНО КАК Субконто,
		  |	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке) КАК СчетУчетаНДСПоРеализации,
		  |	Реквизиты.Контрагент КАК Контрагент,
		  |	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		  |	Реквизиты.ПодразделениеОрганизации КАК Подразделение
		  |ИЗ
		  |	ТаблицаТовары КАК ТаблицаТовары
		  |		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		  |		ПО (ИСТИНА)
		  |ГДЕ
		  |	НЕ ТаблицаТовары.СчетУчета.Забалансовый
		  |
		  |УПОРЯДОЧИТЬ ПО
		  |	НомерСтрокиДокумента" 
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРублевыеСуммыДокументовВВалюте(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если (НЕ Реквизиты.ЭтоОтгрузкаБезПереходаПраваСобственности
		И НЕ Реквизиты.ЭтоДоговорСКомиссионером) 
		ИЛИ (НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьУслуги И НЕ Реквизиты.ЕстьАгентскиеУслуги) Тогда
		ПараметрыПроведения.Вставить("РублевыеСуммыДокументаВВалюте", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РублевыеСуммыДокументаВВалюте", НомераТаблиц.Количество());
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.СуммаРуб КАК СуммаБу,
		|	ТаблицаТовары.СуммаНДСРуб КАК СуммаНДСРуб,
		|   ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаБезНДСРуб,
		|	ТаблицаТовары.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары";
		
	КонецЕсли;
	
	Если Реквизиты.ЕстьУслуги Тогда
		
		Если Реквизиты.ЕстьТовары Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	""Услуги"",
		|	ТаблицаУслуги.НомерСтроки,
		|	ТаблицаУслуги.СуммаРуб,
		|	ТаблицаУслуги.СуммаНДСРуб,
		|   ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаНДСРуб,
		|	ТаблицаУслуги.Ссылка
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги";
	КонецЕсли;
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		
		Если Реквизиты.ЕстьТовары или Реквизиты.ЕстьУслуги Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""АгентскиеУслуги"",
		|	ТаблицаАгентскиеУслуги.НомерСтроки,
		|	ТаблицаАгентскиеУслуги.Номенклатура,
		|	ТаблицаАгентскиеУслуги.СуммаРуб,
		|	ТаблицаАгентскиеУслуги.СуммаНДСРуб,
		|   ТаблицаАгентскиеУслуги.СуммаРуб - ТаблицаАгентскиеУслуги.СуммаНДСРуб,
		|	ТаблицаАгентскиеУслуги.Ссылка
		|ИЗ
		|	ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		Если СтрокаТаблицы.ЭтоУслуга Тогда
			СтрокаТаблицы.Содержание = "Реализация услуг";
		Иначе
			СтрокаТаблицы.Содержание = "Реализация товаров";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Расходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Расходная накладная'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая,ФормаДокументаТовары";

	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая,ФормаДокументаУслуги";
	
	// Акт на передачу прав
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктНаПередачуПрав";
	КомандаПечати.Представление = НСтр("ru = 'Акт на передачу прав'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая,ФормаДокументаТовары,ФормаДокументаУслуги";

	// Товарная накладная (ТОРГ-12) с услугами
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'Товарная накладная (ТОРГ-12) с услугами'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая,ФормаДокументаУслуги";

	// Товарная накладная (ТОРГ-12)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12_БезУслуг";
	КомандаПечати.Представление = НСтр("ru = 'Товарная накладная (ТОРГ-12)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая,ФормаДокументаТовары";

	// Накладная на отпуск материалов на сторону (М-15)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М15";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на отпуск материалов на сторону (М-15)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая,ФормаДокументаТовары";

	// Транспортная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьТранспортнойНакладной";
	КомандаПечати.Идентификатор = "ТранспортнаяНакладная";
	КомандаПечати.Представление = НСтр("ru = 'Транспортная накладная'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая,ФормаДокументаТовары";
	
	// Товарно-транспортная накладная (1-Т)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьТТН";
	КомандаПечати.Идентификатор = "ТТН";
	КомандаПечати.Представление = НСтр("ru = 'Товарно-транспортная накладная (1-Т)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая,ФормаДокументаТовары";	
	
	// Счет-фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиСчетовФактур";
	
	// Справка-расчет "Рублевые суммы документа в валюте"
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьРублевыхСуммДокументовВВалюте";
	КомандаПечати.Идентификатор = "РублевыеСуммыДокументаВВалюте";
	КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Рублевые суммы документа в валюте""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
	
	// Универсальный передаточный документ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ (УПД)'");
	КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиУниверсальныхПередаточныхДокументов";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Реализация (акт, накладная)""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", "Расходная накладная", 
			ПечатьДокумента(МассивОбъектов, ОбъектыПечати),,"Документ.РеализацияТоваровУслуг.ПФ_MXL_Накладная");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		ТаблицаСведенийАктаОбОказанииУслуг = ПолучитьТаблицуСведенийАктаОбОказанииУслуг(МассивОбъектов);
		СтруктураПараметровПечати = Новый Структура;
		СтруктураПараметровПечати.Вставить("ВидДокументаПечати",  "РеализацияТоваровУслуг");
		СтруктураПараметровПечати.Вставить("ИмяПараметровПечати", "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт");
		СтруктураПараметровПечати.Вставить("ИмяМакетаПечати",     "Документ.РеализацияТоваровУслуг.ПФ_MXL_Акт");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт", "Акт об оказании услуг", 
			ПечатьТорговыхДокументов.ПечатьАктаОбОказанииУслуг(ТаблицаСведенийАктаОбОказанииУслуг, ОбъектыПечати, СтруктураПараметровПечати),, 
					"Документ.РеализацияТоваровУслуг.ПФ_MXL_Акт");
		ПараметрыВывода.Вставить("ФормироватьЭД", Истина);
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктНаПередачуПрав") Тогда
		ТаблицаСведенийАктаНаПередачуПрав = ПолучитьТаблицуСведенийАктаНаПередачуПрав(МассивОбъектов);
		СтруктураПараметровПечати = Новый Структура;
		СтруктураПараметровПечати.Вставить("ВидДокументаПечати",  "РеализацияТоваровУслуг");
		СтруктураПараметровПечати.Вставить("ИмяПараметровПечати", "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_АктНаПередачуПрав");
		СтруктураПараметровПечати.Вставить("ИмяМакетаПечати",     "Документ.РеализацияТоваровУслуг.ПФ_MXL_АктНаПередачуПрав");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктНаПередачуПрав", "Акт на передачу прав", 
			ПечатьТорговыхДокументов.ПечатьАктаНаПередачуПрав(ТаблицаСведенийАктаНаПередачуПрав, ОбъектыПечати, СтруктураПараметровПечати),, 
					"Документ.РеализацияТоваровУслуг.ПФ_MXL_АктНаПередачуПрав");
 	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		ВключатьУслуги = Истина;
		ТаблицаСведенийТОРГ12 = ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, ВключатьУслуги);
		ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12", "ТОРГ-12 (Товарная накладная с услугами)", 
			ПечатьТорговыхДокументов.ПечатьТОРГ12(ТаблицаСведенийТОРГ12, ОбъектыПечати, ИмяПараметровПечати),,"ОбщийМакет.ПФ_MXL_ТОРГ12");
		ПараметрыВывода.Вставить("ФормироватьЭД", Истина);
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12_БезУслуг") Тогда
		ВключатьУслуги = Ложь;
		ТаблицаСведенийТОРГ12 = ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, ВключатьУслуги);
		ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12_БезУслуг", "ТОРГ-12 (Товарная накладная)",
			ПечатьТорговыхДокументов.ПечатьТОРГ12(ТаблицаСведенийТОРГ12, ОбъектыПечати, ИмяПараметровПечати),,"ОбщийМакет.ПФ_MXL_ТОРГ12");
		ПараметрыВывода.Вставить("ФормироватьЭД", Истина);
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М15") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М15", "М-15 (Накладная)", 
			ПечатьМ15(МассивОбъектов, ОбъектыПечати),,"ОбщийМакет.ПФ_MXL_М15");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументРеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	ДокументРеализацияТоваровУслуг.Номер КАК Номер,
	|	ДокументРеализацияТоваровУслуг.Дата КАК Дата,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДокументРеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	ДокументРеализацияТоваровУслуг.Организация КАК Организация,
	|	ДокументРеализацияТоваровУслуг.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДокументРеализацияТоваровУслуг.Организация КАК Поставщик,
	|	ДокументРеализацияТоваровУслуг.Ссылка.Склад КАК Склад,
	|	ДокументРеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	ДокументРеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	|	ДокументРеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.СтранаПроисхождения КАК СтранаПроисхождения,
	|	РеализацияТоваровУслуг.НомерГТД КАК НомерГТД,
	|	СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|	МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ВложенныйЗапросПоТоварам
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ПРАВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
	|	ПО РеализацияТоваровУслуг.Ссылка = ДокументРеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	ДокументРеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	РеализацияТоваровУслуг.СтранаПроисхождения,
	|	РеализацияТоваровУслуг.НомерГТД,
	|	ДокументРеализацияТоваровУслуг.Ссылка,
	|	ДокументРеализацияТоваровУслуг.Номер,
	|	ДокументРеализацияТоваровУслуг.Дата,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента,
	|	ДокументРеализацияТоваровУслуг.Контрагент,
	|	ДокументРеализацияТоваровУслуг.Организация,
	|	ДокументРеализацияТоваровУслуг.Склад,
	|	ДокументРеализацияТоваровУслуг.ПодразделениеОрганизации,
	|	ДокументРеализацияТоваровУслуг.СуммаДокумента,
	|	ДокументРеализацияТоваровУслуг.ВалютаДокумента,
	|	ДокументРеализацияТоваровУслуг.СуммаВключаетНДС,
	|	ДокументРеализацияТоваровУслуг.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапросПоТоварам.Ссылка КАК Ссылка,
	|	ВложенныйЗапросПоТоварам.Номер КАК Номер,
	|	ВложенныйЗапросПоТоварам.Дата КАК Дата,
	|	ВложенныйЗапросПоТоварам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВложенныйЗапросПоТоварам.Получатель КАК Получатель,
	|	ВложенныйЗапросПоТоварам.Организация КАК Организация,
	|	ВложенныйЗапросПоТоварам.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВложенныйЗапросПоТоварам.Организация КАК Поставщик,
	|	ВложенныйЗапросПоТоварам.Ссылка.Склад КАК Склад,
	|	ВложенныйЗапросПоТоварам.СуммаДокумента КАК СуммаДокумента,
	|	ВложенныйЗапросПоТоварам.ВалютаДокумента КАК ВалютаДокумента,
	|	ВложенныйЗапросПоТоварам.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВложенныйЗапросПоТоварам.Номенклатура,
	|	ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК Товар,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ВложенныйЗапросПоТоварам.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ВложенныйЗапросПоТоварам.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК Артикул,
	|	ВложенныйЗапросПоТоварам.Количество,
	|	ВложенныйЗапросПоТоварам.КоличествоМест,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапросПоТоварам.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаХранения,
	|	ВложенныйЗапросПоТоварам.Цена,
	|	ВложенныйЗапросПоТоварам.Сумма,
	|	ВложенныйЗапросПоТоварам.СуммаНДС,
	|	ВложенныйЗапросПоТоварам.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВложенныйЗапросПоТоварам.НомерГТД КАК НомерГТД,
	|	ВложенныйЗапросПоТоварам.НомерСтроки,
	|	1 КАК ID
	|ИЗ
	|	ВТ_ВложенныйЗапросПоТоварам КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Ссылка.Номер,
	|	РеализацияТоваровУслуг.Ссылка.Дата,
	|	РеализацияТоваровУслуг.Ссылка.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.ПодразделениеОрганизации,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.Склад,
	|	РеализацияТоваровУслуг.Ссылка.СуммаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.ВалютаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	0,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Ссылка.Номер,
	|	РеализацияТоваровУслуг.Ссылка.Дата,
	|	РеализацияТоваровУслуг.Ссылка.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.ПодразделениеОрганизации,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.Склад,
	|	РеализацияТоваровУслуг.Ссылка.СуммаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.ВалютаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА (НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """")
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА (НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """")
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """")
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА (НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """")
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	3
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Ссылка.Номер,
	|	РеализацияТоваровУслуг.Ссылка.Дата,
	|	РеализацияТоваровУслуг.Ссылка.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.ПодразделениеОрганизации,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.Склад,
	|	РеализацияТоваровУслуг.Ссылка.СуммаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.ВалютаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА (НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """")
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА (НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """")
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """")
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА (НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """")
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	4
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	ID,
	|	ВложенныйЗапросПоТоварам.НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_Накладная");

		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка.Ссылка, "Расходная накладная");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		СведенияОбОрганизации   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик 				= Шапка.Поставщик;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		СведенияОКонтрагенте    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
		ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ЕстьСкидки = Ложь;

		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Артикул";
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Код";
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		ОбластьКолонкаТовар = Макет.Область("Товар");

		Если НЕ ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
												Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		Если НЕ ЕстьСкидки Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
												Макет.Область("СуммаБезСкидки").ШиринаКолонки +
												Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
        КоличествоСтрок = 0;

		НомерСтроки = 0;

		Пока Шапка.Следующий() Цикл 
			
			Если Шапка.Номенклатура = Null Тогда 
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;

			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(Шапка);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(Шапка);
			ОбластьДанных.Параметры.Товар = СокрЛП(Шапка.Товар);
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			Скидка = 0;
			
			ОбластьСуммы.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Сумма          = Сумма       + ?(ЗначениеЗаполнено(Шапка.Сумма), Шапка.Сумма, 0);
			СуммаНДС       = СуммаНДС    + ?(ЗначениеЗаполнено(Шапка.СуммаНДС), Шапка.СуммаНДС, 0);
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			
			КоличествоСтрок = КоличествоСтрок + 1;

		КонецЦикла;

		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоНДС
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		Если СуммаНДС <> 0 Тогда
			ОбластьСуммы.Параметры.ВсегоНДС  = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
			ОбластьДанных.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьСуммы.Параметры.ВсегоНДС  = "-";
			ОбластьДанных.Параметры.НДС      = "Без налога (НДС)";
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
				
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + КоличествоСтрок
			+ ", на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		Если Шапка.Склад <> Справочники.Склады.ПустаяСсылка() Тогда 
			МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Шапка.Склад, Шапка.Дата);
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, МОЛ, Шапка.Дата);
			Представление = ?(ЗначениеЗаполнено(ДанныеФизЛица.Должность), Строка(ДанныеФизЛица.Должность) + " ", "");
			Представление = Представление + ?(ЗначениеЗаполнено(ДанныеФизЛица.Представление), Строка(ДанныеФизЛица.Представление), "");
			ОбластьМакета.Параметры.ОтветственныйПредставление = Представление;
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьМакета);

		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Функция выполняет расчет рублевых сумм для вывода таблиц документа на печать
//
Функция ПодготовитьТаблицуДокументаДляПечати(ВыборкаСтрок, ТаблицаПоТоварам, ПечататьТовары, ПечататьУслуги)

	ТаблицаПоТоварам.Очистить();

	ВалютаРегламентированногоУчета   = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	МассивРаспределения = Новый Массив;

	СуммаВзаиморасчетов 	= 0;
	СуммаВзаиморасчетовНДС 	= 0;
	ПерваяСтрокаДокумента 	= Истина;
	СуммаВключаетНДС 		= Неопределено;
	РасчетыВУсловныхЕдиницах= Неопределено;
	ДатаДокумента			= Неопределено;

	Пока ВыборкаСтрок.Следующий() Цикл
		
		СтрокаТаблицы = ТаблицаПоТоварам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаСтрок);
		
		Если ПерваяСтрокаДокумента Тогда

			СуммаВключаетНДС 			= ВыборкаСтрок.СуммаВключаетНДС;
			РасчетыВУсловныхЕдиницах 	= ВыборкаСтрок.РасчетыВУсловныхЕдиницах;
			ДатаДокумента				= ВыборкаСтрок.ДатаДокумента;
			
			НуженПересчетВРубли = Ложь;
			
			Если ВыборкаСтрок.Проведен 
				И (ВыборкаСтрок.РасчетыВУсловныхЕдиницах
				ИЛИ (ВыборкаСтрок.ВалютаДокумента <> ВалютаРегламентированногоУчета И ВыборкаСтрок.ДатаДокумента >= '20090101000000')) Тогда
				НуженПересчетВРубли = Истина;
			КонецЕсли;
			
			ПерваяСтрокаДокумента = Ложь;
			
		КонецЕсли;
		
		Если НуженПересчетВРубли Тогда
			
			Если  СтрокаТаблицы.ВсегоРуб = 0 Тогда
				
				СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма;
				СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.СуммаНДС;
				
			Иначе
				
				СтрокаТаблицы.Сумма = СтрокаТаблицы.ВсегоРуб - ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДСРуб);
				СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.НДСРуб;
				
			КонецЕсли;	
			
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
			
			СтрокаТаблицы.Цена = ?(СтрокаТаблицы.Количество = 0, 0, Окр(СтрокаТаблицы.Сумма/СтрокаТаблицы.Количество,2));
			
		КонецЕсли;	
				
		
	КонецЦикла;
	
	Если НЕ ПечататьТовары ИЛИ НЕ ПечататьУслуги Тогда
		// Исключим строки из табличный частей, которые не удовлетворяют условиям печати. При выборке запросом их необходимо получать, 
		// чтобы распределять сумма взаиморасчетов в рублях на все строки документа.
		Инд = ТаблицаПоТоварам.Количество() - 1;
		Пока Инд >= 0 Цикл
			СтрокаТовар = ТаблицаПоТоварам[Инд];
			
			Если СтрокаТовар.ID = 1 ИЛИ СтрокаТовар.ID = 2 Тогда // Товары или ВозвратнаяТара
				Если НЕ ПечататьТовары Тогда
					ТаблицаПоТоварам.Удалить(Инд);
				КонецЕсли;			
			ИначеЕсли СтрокаТовар.ID = 3 ИЛИ СтрокаТовар.ID = 4 Тогда // Услуги или АгентскиеУслуги
				Если НЕ ПечататьУслуги Тогда
					ТаблицаПоТоварам.Удалить(Инд);
				КонецЕсли;
			КонецЕсли;
			
			Инд = Инд - 1;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаПоТоварам;

КонецФункции

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийТОРГ12()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДляПолученияСведений,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Дата КАК ДатаПодписанияДокумента,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Организация.ОбособленноеПодразделение
	|			ТОГДА РеализацияТоваровУслуг.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ РеализацияТоваровУслуг.Организация
	|	КОНЕЦ КАК Поставщик,
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК Подразделение,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетПродавца,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Договор,
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю КАК ДокументОснование,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Руководитель,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер,
	|	РеализацияТоваровУслуг.ОтпускПроизвел КАК Кладовщик,
	|	РеализацияТоваровУслуг.ЗаРуководителяПоПриказу,
	|	РеализацияТоваровУслуг.ЗаГлавногоБухгалтераПоПриказу,
	|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РеализацияТоваровУслуг.Организация = ДанныеПервичныхДокументов.Организация
	|			И РеализацияТоваровУслуг.Ссылка = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыДляПечати.Ссылка
	|			ИЗ
	|				ДокументыДляПечати КАК ДокументыДляПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура КАК Товар,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ КАК ТоварКод,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.КоличествоМест,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ВидУпаковки,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ЕдиницаИзмерения.Код, """") КАК ВидУпаковкиКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ЕдиницаИзмерения.Наименование, """") КАК ВидУпаковкиНаименование,
	|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоВРублях,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСВРублях,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуществуютЗаписиРублевыхСумм
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ВозвратнаяТара),
	|	2,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	0,
	|	NULL,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ВозвратнаяТара))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги),
	|	3,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	0,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	РеализацияТоваровУслуг.Цена,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|ГДЕ
	|	&ВключатьУслуги = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги),
	|	4,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	0,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	РеализацияТоваровУслуг.Цена,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|ГДЕ
	|	&ВключатьУслуги = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуСведенийТОРГ12(Знач МассивДокументов, Знач ВключатьУслуги) Экспорт
	
	ТаблицаСведений = ПечатьТорговыхДокументов.ПолучитьОписаниеТОРГ12();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", 	МассивДокументов);
	Запрос.УстановитьПараметр("ВключатьУслуги", 	ВключатьУслуги);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийТОРГ12();
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВалютаРегУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	РеквизитыВалютыРегУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаРегУчета, "Код, Наименование");
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	СтрокиДокументов = РезультатыЗапроса[3].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		СведенияОДокументе.Валюта             = ВалютаРегУчета;
		СведенияОДокументе.ВалютаКод          = РеквизитыВалютыРегУчета.Код;
		СведенияОДокументе.ВалютаНаименование = РеквизитыВалютыРегУчета.Наименование;
		
		ТаблицаДокумента = ПечатьТорговыхДокументов.ПолучитьОписаниеТаблицыТОРГ12();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		НуженПересчетВРубли = НЕ (Выборка.ВалютаДокумента = ВалютаРегУчета);
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
			Если НуженПересчетВРубли Тогда
				Если Строка.СуществуютЗаписиРублевыхСумм Тогда
					СтрокаТаблицыДокумента.СуммаНДС 	= Строка.НДСВРублях;
					СтрокаТаблицыДокумента.СуммаБезНДС 	= Строка.ВсегоВРублях - Строка.НДСВРублях;
				Иначе
					Кратность = ?(Выборка.Кратность   	= 0, 1, Выборка.Кратность);
					СтрокаТаблицыДокумента.СуммаНДС 	= Строка.СуммаНДС * Выборка.Курс / Кратность;;
					СтрокаТаблицыДокумента.СуммаБезНДС  = (Строка.СуммаБезНДС + Строка.СуммаНДС) * Выборка.Курс / Кратность - СтрокаТаблицыДокумента.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицыДокумента.СуммаСНДС = СтрокаТаблицыДокумента.СуммаБезНДС + СтрокаТаблицыДокумента.СуммаНДС;
			
			Если НуженПересчетВРубли 
					ИЛИ (Выборка.СуммаВключаетНДС И СтрокаТаблицыДокумента.СуммаНДС <> 0) Тогда
				СтрокаТаблицыДокумента.Цена = ?(СтрокаТаблицыДокумента.Количество = 0,
					СтрокаТаблицыДокумента.СуммаБезНДС,
					СтрокаТаблицыДокумента.СуммаБезНДС / СтрокаТаблицыДокумента.Количество);
			КонецЕсли;
			
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		ПорядокЗаполнения = Новый Структура("ЗаполнятьРуководителя, ЗаполнятьГлавногоБухгалтера, ЗаполнятьКладовщика");
		ПечатьТорговыхДокументов.ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, ПорядокЗаполнения);
	
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийАктаОбОказанииУслуг()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДляПолученияСведений,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.ДоговорКонтрагента) КАК ПредставлениеДоговора,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК Подразделение,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетПродавца,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ВалютаДокумента.Код, """") КАК ВалютаКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ВалютаДокумента.Наименование, """") КАК ВалютаНаименование,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю КАК ДокументОснование,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Руководитель,
	|	РеализацияТоваровУслуг.ЗаРуководителяПоПриказу,
	|	РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ПредставительЗаказчика,
	|	РеализацияТоваровУслуг.ЗаЗаказчикаНаОсновании
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РеализацияТоваровУслуг.Организация = ДанныеПервичныхДокументов.Организация
	|			И РеализацияТоваровУслуг.Ссылка = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыДляПечати.Ссылка
	|			ИЗ
	|				ДокументыДляПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК НоменклатураКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	РеализацияТоваровУслуг.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоВРублях,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСВРублях,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуществуютЗаписиРублевыхСумм
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги),
	|	2,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуСведенийАктаОбОказанииУслуг(Знач МассивОбъектов) Экспорт
	
	ТаблицаСведений = ПечатьТорговыхДокументов.ПолучитьОписаниеАктаОбОказанииУслуг();
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийАктаОбОказанииУслуг();
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	СтрокиДокументов = РезультатыЗапроса[3].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	ВалютаРегУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	РеквизитыВалютыРегУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаРегУчета, "Код, Наименование");
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		Если Выборка.РасчетыВУсловныхЕдиницах Тогда
			СведенияОДокументе.Валюта             = ВалютаРегУчета;
			СведенияОДокументе.ВалютаКод          = РеквизитыВалютыРегУчета.Код;
			СведенияОДокументе.ВалютаНаименование = РеквизитыВалютыРегУчета.Наименование;
		КонецЕсли;
		
		ТаблицаДокумента = ПечатьТорговыхДокументов.ПолучитьОписаниеТаблицыАктаОбОказанииУслуг();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		НуженПересчетВРубли = Ложь;
		Если Выборка.Валюта <> ВалютаРегУчета
			И Выборка.РасчетыВУсловныхЕдиницах Тогда
			НуженПересчетВРубли = Истина;
		КонецЕсли;
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
			Если НуженПересчетВРубли Тогда
				Если Строка.СуществуютЗаписиРублевыхСумм Тогда
					СтрокаТаблицыДокумента.СуммаНДС = Строка.НДСВРублях;
					СтрокаТаблицыДокумента.СуммаБезНДС = Строка.ВсегоВРублях - Строка.НДСВРублях;
				Иначе
					Кратность = ?(Выборка.Кратность = 0, 1, Выборка.Кратность);
					СтрокаТаблицыДокумента.СуммаНДС = Строка.СуммаНДС * Выборка.Курс / Кратность;;
					СтрокаТаблицыДокумента.СуммаБезНДС = (Строка.СуммаБезНДС + Строка.СуммаНДС) * Выборка.Курс / Кратность - СтрокаТаблицыДокумента.СуммаНДС;
				КонецЕсли;
				СтрокаТаблицыДокумента.Сумма = СтрокаТаблицыДокумента.СуммаБезНДС + ?(Выборка.СуммаВключаетНДС, СтрокаТаблицыДокумента.СуммаНДС, 0);
				СтрокаТаблицыДокумента.Цена  = ?(СтрокаТаблицыДокумента.Количество=0, СтрокаТаблицыДокумента.Сумма, СтрокаТаблицыДокумента.Сумма / СтрокаТаблицыДокумента.Количество);
			КонецЕсли;
			СтрокаТаблицыДокумента.СуммаСНДС = СтрокаТаблицыДокумента.СуммаБезНДС + СтрокаТаблицыДокумента.СуммаНДС;
			
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		ПечатьТорговыхДокументов.ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, Новый Структура("ЗаполнятьРуководителя"));
		
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийАктаНаПередачуПрав()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДляПолученияСведений,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Дата КАК ДатаПодписанияДокумента,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК Подразделение,
	|	РеализацияТоваровУслуг.Организация КАК Лицензиар,
	|	РеализацияТоваровУслуг.Контрагент КАК Лицензиат,
	|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетЛицензиара,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Договор,
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю КАК ДокументОснование,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.Руководитель,
	|	РеализацияТоваровУслуг.ЗаРуководителяПоПриказу,
	|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РеализацияТоваровУслуг.Организация = ДанныеПервичныхДокументов.Организация
	|			И РеализацияТоваровУслуг.Ссылка = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыДляПечати.Ссылка
	|			ИЗ
	|				ДокументыДляПечати КАК ДокументыДляПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура КАК Товар,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ КАК ТоварКод,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.КоличествоМест,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ВидУпаковки,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ЕдиницаИзмерения.Код, """") КАК ВидУпаковкиКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ЕдиницаИзмерения.Наименование, """") КАК ВидУпаковкиНаименование,
	|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоВРублях,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСВРублях,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуществуютЗаписиРублевыхСумм
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги),
	|	3,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	0,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное, """"),
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	РеализацияТоваровУслуг.Цена,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуСведенийАктаНаПередачуПрав(Знач МассивДокументов) Экспорт
	
	ТаблицаСведений = ПечатьТорговыхДокументов.ПолучитьОписаниеАктаНаПередачуПрав();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", 	МассивДокументов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийАктаНаПередачуПрав();
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВалютаРегУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	РеквизитыВалютыРегУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаРегУчета, "Код, Наименование");
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	СтрокиДокументов = РезультатыЗапроса[3].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		СведенияОДокументе.Валюта             = ВалютаРегУчета;
		СведенияОДокументе.ВалютаКод          = РеквизитыВалютыРегУчета.Код;
		СведенияОДокументе.ВалютаНаименование = РеквизитыВалютыРегУчета.Наименование;
		
		ТаблицаДокумента = ПечатьТорговыхДокументов.ПолучитьОписаниеТаблицыАктаНаПередачуПрав();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		НуженПересчетВРубли = Ложь;
		Если Выборка.ВалютаДокумента <> ВалютаРегУчета Тогда
			НуженПересчетВРубли	= Истина;
		КонецЕсли;
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
			Если НуженПересчетВРубли Тогда
				Если Строка.СуществуютЗаписиРублевыхСумм Тогда
					СтрокаТаблицыДокумента.СуммаНДС 	= Строка.НДСВРублях;
					СтрокаТаблицыДокумента.СуммаБезНДС 	= Строка.ВсегоВРублях - Строка.НДСВРублях;
				Иначе
					Кратность = ?(Выборка.Кратность   	= 0, 1, Выборка.Кратность);
					СтрокаТаблицыДокумента.СуммаНДС 	= Строка.СуммаНДС * Выборка.Курс / Кратность;;
					СтрокаТаблицыДокумента.СуммаБезНДС  = (Строка.СуммаБезНДС + Строка.СуммаНДС) * Выборка.Курс / Кратность - СтрокаТаблицыДокумента.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
			СтрокаТаблицыДокумента.СуммаСНДС = СтрокаТаблицыДокумента.СуммаБезНДС + СтрокаТаблицыДокумента.СуммаНДС;
			СтрокаТаблицыДокумента.Цена 	 = ?(СтрокаТаблицыДокумента.Количество = 0, СтрокаТаблицыДокумента.СуммаБезНДС, 
														СтрокаТаблицыДокумента.СуммаБезНДС / СтрокаТаблицыДокумента.Количество);
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		ПорядокЗаполнения = Новый Структура("ЗаполнятьРуководителя");
		ПечатьТорговыхДокументов.ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, ПорядокЗаполнения);
	
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыМ15()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРеализацияТоваровУслуг.Номер КАК Номер,
	|	ДокументРеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	ДокументРеализацияТоваровУслуг.Дата КАК ДатаСоставления,
	|	ДокументРеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	ДокументРеализацияТоваровУслуг.Организация,
	|	ДокументРеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	ДокументРеализацияТоваровУслуг.Организация КАК Руководители,
	|	ДокументРеализацияТоваровУслуг.Склад КАК Склад,
	|	ДокументРеализацияТоваровУслуг.Склад.Наименование КАК СкладНаименование,
	|	ДокументРеализацияТоваровУслуг.Контрагент.Код КАК КонтрагентКод,
	|	ДокументРеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	ДокументРеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	ДокументРеализацияТоваровУслуг.ВалютаДокумента,
	|	ДокументРеализацияТоваровУслуг.ВидОперации,
	|	ДокументРеализацияТоваровУслуг.Проведен,
	|	ДокументРеализацияТоваровУслуг.СуммаВключаетНДС,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ДоговорВид,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ДокументРеализацияТоваровУслуг.ПодразделениеОрганизации,
	|	ДокументРеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ДокументРеализацияТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ КАК НоменклатурныйНомер,
	|	РеализацияТоваровУслуг.СчетУчета.Код КАК СчетУчетаКод,
	|	РеализацияТоваровУслуг.ПереданныеСчетУчета.Код КАК ПереданныеСчетУчетаКод,
	|	РеализацияТоваровУслуг.СчетРасходов.Код КАК СчетРасходовКод,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.Цена
	|		КОГДА ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.Цена * ДокументРеализацияТоваровУслуг.КурсВзаиморасчетов / ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.Сумма
	|		КОГДА ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.Сумма * ДокументРеализацияТоваровУслуг.КурсВзаиморасчетов / ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.СуммаНДС
	|		КОГДА ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.СуммаНДС * ДокументРеализацияТоваровУслуг.КурсВзаиморасчетов / ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаНДС,
	|	РеализацияТоваровУслуг.Сумма КАК СуммаВВалютеДокумента,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДСВВалютеДокумента,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	1 КАК ID,
	|	РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслуг.СчетДоходов,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	РеализацияТоваровУслуг.Ссылка.Ответственный,
	|	ДокументРеализацияТоваровУслуг.Руководитель,
	|	ДокументРеализацияТоваровУслуг.ЗаРуководителяПоПриказу,
	|	ДокументРеализацияТоваровУслуг.ГлавныйБухгалтер,
	|	ДокументРеализацияТоваровУслуг.ЗаГлавногоБухгалтераПоПриказу,
	|	ДокументРеализацияТоваровУслуг.ОтпускПроизвел,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0) КАК СуммаБезНДСРуб
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ПО (РеализацияТоваровУслуг.Ссылка = ДокументРеализацияТоваровУслуг.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|			И (ДокументРеализацияТоваровУслуг.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|ГДЕ
	|	ДокументРеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументРеализацияТоваровУслуг.Номер,
	|	ДокументРеализацияТоваровУслуг.Ссылка,
	|	ДокументРеализацияТоваровУслуг.Дата,
	|	ДокументРеализацияТоваровУслуг.Дата,
	|	ДокументРеализацияТоваровУслуг.Организация,
	|	ДокументРеализацияТоваровУслуг.Организация,
	|	ДокументРеализацияТоваровУслуг.Организация,
	|	ДокументРеализацияТоваровУслуг.Склад,
	|	ДокументРеализацияТоваровУслуг.Склад.Наименование,
	|	ДокументРеализацияТоваровУслуг.Контрагент.Код,
	|	ДокументРеализацияТоваровУслуг.Контрагент,
	|	ДокументРеализацияТоваровУслуг.КурсВзаиморасчетов,
	|	ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов,
	|	ДокументРеализацияТоваровУслуг.ВалютаДокумента,
	|	ДокументРеализацияТоваровУслуг.ВидОперации,
	|	ДокументРеализацияТоваровУслуг.Проведен,
	|	ДокументРеализацияТоваровУслуг.СуммаВключаетНДС,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента.Наименование,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
	|	ДокументРеализацияТоваровУслуг.ПодразделениеОрганизации,
	|	ДокументРеализацияТоваровУслуг.БанковскийСчетОрганизации,
	|	ДокументРеализацияТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.СчетРасходов.Код,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.Цена
	|		КОГДА ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.Цена * ДокументРеализацияТоваровУслуг.КурсВзаиморасчетов / ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.Сумма
	|		КОГДА ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.Сумма * ДокументРеализацияТоваровУслуг.КурсВзаиморасчетов / ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.СуммаНДС
	|		КОГДА ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.СуммаНДС * ДокументРеализацияТоваровУслуг.КурсВзаиморасчетов / ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	3,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.СчетДоходов,
	|	ЛОЖЬ,
	|	РеализацияТоваровУслуг.Ссылка.Ответственный,
	|	ДокументРеализацияТоваровУслуг.Руководитель,
	|	ДокументРеализацияТоваровУслуг.ЗаРуководителяПоПриказу,
	|	ДокументРеализацияТоваровУслуг.ГлавныйБухгалтер,
	|	ДокументРеализацияТоваровУслуг.ЗаГлавногоБухгалтераПоПриказу,
	|	ДокументРеализацияТоваровУслуг.ОтпускПроизвел,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|		ПО (РеализацияТоваровУслуг.Ссылка = ДокументРеализацияТоваровУслуг.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|			И (ДокументРеализацияТоваровУслуг.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|ГДЕ
	|	ДокументРеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументРеализацияТоваровУслуг.Номер,
	|	ДокументРеализацияТоваровУслуг.Ссылка,
	|	ДокументРеализацияТоваровУслуг.Дата,
	|	ДокументРеализацияТоваровУслуг.Дата,
	|	ДокументРеализацияТоваровУслуг.Организация,
	|	ДокументРеализацияТоваровУслуг.Организация,
	|	ДокументРеализацияТоваровУслуг.Организация,
	|	ДокументРеализацияТоваровУслуг.Склад,
	|	ДокументРеализацияТоваровУслуг.Склад.Наименование,
	|	ДокументРеализацияТоваровУслуг.Контрагент.Код,
	|	ДокументРеализацияТоваровУслуг.Контрагент,
	|	ДокументРеализацияТоваровУслуг.КурсВзаиморасчетов,
	|	ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов,
	|	ДокументРеализацияТоваровУслуг.ВалютаДокумента,
	|	ДокументРеализацияТоваровУслуг.ВидОперации,
	|	ДокументРеализацияТоваровУслуг.Проведен,
	|	ДокументРеализацияТоваровУслуг.СуммаВключаетНДС,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента.Наименование,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
	|	ДокументРеализацияТоваровУслуг.ПодразделениеОрганизации,
	|	ДокументРеализацияТоваровУслуг.БанковскийСчетОрганизации,
	|	ДокументРеализацияТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.Цена
	|		КОГДА ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.Цена * ДокументРеализацияТоваровУслуг.КурсВзаиморасчетов / ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.Сумма
	|		КОГДА ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.Сумма * ДокументРеализацияТоваровУслуг.КурсВзаиморасчетов / ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокументРеализацияТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.СуммаНДС
	|		КОГДА ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.СуммаНДС * ДокументРеализацияТоваровУслуг.КурсВзаиморасчетов / ДокументРеализацияТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	4,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	NULL,
	|	ИСТИНА,
	|	РеализацияТоваровУслуг.Ссылка.Ответственный,
	|	ДокументРеализацияТоваровУслуг.Руководитель,
	|	ДокументРеализацияТоваровУслуг.ЗаРуководителяПоПриказу,
	|	ДокументРеализацияТоваровУслуг.ГлавныйБухгалтер,
	|	ДокументРеализацияТоваровУслуг.ЗаГлавногоБухгалтераПоПриказу,
	|	ДокументРеализацияТоваровУслуг.ОтпускПроизвел,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
	|		ПО (РеализацияТоваровУслуг.Ссылка = ДокументРеализацияТоваровУслуг.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|			И (ДокументРеализацияТоваровУслуг.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|ГДЕ
	|	ДокументРеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Ссылка,
	|	ID,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует табличный документ унифицированной формы М-15
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-15.
//
Функция ПечатьМ15(МассивОбъектов, ОбъектыПечати)
	
	Перем ПодразделениеОтветственныхЛиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ПолеСверху			= 10;
	ТабличныйДокумент.ПолеСнизу				= 10;
	ТабличныйДокумент.ПолеСправа			= 0;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_М15";
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабличныйДокумент.ПолеСлева			= 0;
	Иначе
		ТабличныйДокумент.ПолеСлева			= 10;
	КонецЕсли;

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М15");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыМ15();

	ВыборкаШапки = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);

	ВыборкаСтрок = Новый ТаблицаЗначений;
			
	ВыборкаСтрок.Колонки.Добавить("Номенклатура");
	ВыборкаСтрок.Колонки.Добавить("ТоварНаименование");
	ВыборкаСтрок.Колонки.Добавить("НоменклатурныйНомер");
	ВыборкаСтрок.Колонки.Добавить("СчетУчетаКод");
	ВыборкаСтрок.Колонки.Добавить("ПереданныеСчетУчетаКод");
	ВыборкаСтрок.Колонки.Добавить("СчетРасходовКод");
	ВыборкаСтрок.Колонки.Добавить("Количество", ОписаниеТиповЧисло15_3);
	ВыборкаСтрок.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ВыборкаСтрок.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ВыборкаСтрок.Колонки.Добавить("Цена");
	ВыборкаСтрок.Колонки.Добавить("СуммаВключаетНДС");
	ВыборкаСтрок.Колонки.Добавить("Сумма", 						ОписаниеТиповЧисло15_2);
	ВыборкаСтрок.Колонки.Добавить("СуммаНДС", 					ОписаниеТиповЧисло15_2);
	ВыборкаСтрок.Колонки.Добавить("СуммаВВалютеДокумента", 		ОписаниеТиповЧисло15_2);
	ВыборкаСтрок.Колонки.Добавить("СуммаНДСВВалютеДокумента", 	ОписаниеТиповЧисло15_2);
	ВыборкаСтрок.Колонки.Добавить("СтавкаНДС");
    ВыборкаСтрок.Колонки.Добавить("СуммаБезНДСВВалютеДокумента",ОписаниеТиповЧисло15_2);
	ВыборкаСтрок.Колонки.Добавить("КоррСчет");
	ВыборкаСтрок.Колонки.Добавить("КоррКод");
	ВыборкаСтрок.Колонки.Добавить("СуммаСНДС", 					ОписаниеТиповЧисло15_2);
	ВыборкаСтрок.Колонки.Добавить("ID");
	ВыборкаСтрок.Колонки.Добавить("СуммаБезНДС", 				ОписаниеТиповЧисло15_2);
	ВыборкаСтрок.Колонки.Добавить("СуммаРублевая", 				ОписаниеТиповЧисло15_2);
	ВыборкаСтрок.Колонки.Добавить("ЭтоКомиссия",   				Новый ОписаниеТипов("Булево"));
	ВыборкаСтрок.Колонки.Добавить("ВсегоРуб", 					ОписаниеТиповЧисло15_2);
	ВыборкаСтрок.Колонки.Добавить("НДСРуб", 					ОписаниеТиповЧисло15_2);
	ВыборкаСтрок.Колонки.Добавить("СуммаБезНДСРуб", 			ОписаниеТиповЧисло15_2);

	Пока ВыборкаШапки.СледующийПоЗначениюПоля("Ссылка") Цикл

		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ВыборкаСтрок 	  = ПодготовитьТаблицуДокументаДляПечати(ВыборкаШапки, ВыборкаСтрок, Истина, Ложь);
		
		// Получаем области макета для вывода в табличный документ
		Шапка            = Макет.ПолучитьОбласть("Шапка");
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		СтрокаТаблицы    = Макет.ПолучитьОбласть("Строка");
		Подвал           = Макет.ПолучитьОбласть("Подвал");	
		
		// Выведем шапку документа
		Шапка.Параметры.Заполнить(ВыборкаШапки);
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаШапки.ЮрФизЛицо, ВыборкаШапки.ДатаСоставления, ВыборкаШапки.БанковскийСчет);
		СведенияОКонтрагенте  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаШапки.Контрагент, ВыборкаШапки.ДатаСоставления);
		
		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
		Шапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		Шапка.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаШапки.Номер, Истина, Ложь);
		Шапка.Параметры.КонтрагентНаименование   = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		Шапка.Параметры.Основание                = "Договор " + СокрЛП(ВыборкаШапки.ДоговорНаименование);
		
		ТабличныйДокумент.Вывести(Шапка);
		
		Для каждого СтрокаВыборки Из ВыборкаСтрок Цикл

			СуммаНДС    = ?(ЗначениеЗаполнено(СтрокаВыборки.СуммаНДС), СтрокаВыборки.СуммаНДС, 0);
			Количество  = ?(ЗначениеЗаполнено(СтрокаВыборки.Количество), СтрокаВыборки.Количество, 0);
			СуммаСНДС   = (?(ЗначениеЗаполнено(СтрокаВыборки.Сумма), СтрокаВыборки.Сумма, 0) + ?(ВыборкаШапки.СуммаВключаетНДС, 0, ?(ЗначениеЗаполнено(СтрокаВыборки.СуммаНДС), СтрокаВыборки.СуммаНДС, 0)));
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			
			СтрокаВыборки.КоррСчет          = ?((ВыборкаШапки.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером ИЛИ ВыборкаШапки.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности), СтрокаВыборки.ПереданныеСчетУчетаКод, СтрокаВыборки.СчетРасходовКод);
			СтрокаВыборки.КоррКод           = СтрокаВыборки.НоменклатурныйНомер;
			СтрокаВыборки.ТоварНаименование = СокрЛП(СтрокаВыборки.ТоварНаименование);
			СтрокаВыборки.СуммаСНДС         = СуммаСНДС;
			СтрокаВыборки.СуммаБезНДС       = СуммаБезНДС;
			СтрокаВыборки.Цена              = СуммаБезНДС / ?(Количество = 0, 1, Количество);
			
		КонецЦикла;
		
		// Заполним подвал документа

		Подвал.Параметры.Заполнить(ВыборкаШапки);
		
		ПодразделениеОтветственныхЛиц = ВыборкаШапки.ПодразделениеОрганизации;
		
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(ВыборкаШапки.Организация, ВыборкаШапки.ДатаДокумента, ВыборкаШапки.ПодразделениеОрганизации);
		
		Если ЗначениеЗаполнено(ВыборкаШапки.Руководитель) Тогда
			Если ВыборкаШапки.Руководитель = ОтветственныеЛицаОрганизации.Руководитель Тогда 
				Подвал.Параметры.ФИОРуководителя = ОтветственныеЛицаОрганизации.РуководительПредставление;
				Подвал.Параметры.ДолжностьРуководителя = "" + ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление;
			Иначе
				ДанныеОтветственногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(ВыборкаШапки.Организация, ВыборкаШапки.Руководитель, ВыборкаШапки.ДатаДокумента);
                ЗаместительПоПриказу = "" + ДанныеОтветственногоЛица.Представление;
				Если ЗначениеЗаполнено(ВыборкаШапки.ЗаРуководителяПоПриказу) Тогда 
					ЗаместительПоПриказу = ЗаместительПоПриказу + ", " + ВыборкаШапки.ЗаРуководителяПоПриказу;
				КонецЕсли;
				Подвал.Параметры.ФИОРуководителя = ЗаместительПоПриказу;
				ДанныеОтветственногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(ВыборкаШапки.Организация, ВыборкаШапки.Руководитель, ВыборкаШапки.ДатаДокумента);
				Если ЗначениеЗаполнено(ДанныеОтветственногоЛица.Должность) Тогда
					Подвал.Параметры.ДолжностьРуководителя = "" + ДанныеОтветственногоЛица.Должность;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Подвал.Параметры.ФИОРуководителя = ОтветственныеЛицаОрганизации.РуководительПредставление;
			Подвал.Параметры.ДолжностьРуководителя = "" + ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление;
		КонецЕсли;
		
        Если ЗначениеЗаполнено(ВыборкаШапки.ГлавныйБухгалтер) И ВыборкаШапки.ГлавныйБухгалтер <> ОтветственныеЛицаОрганизации.ГлавныйБухгалтер Тогда
            ДанныеОтветственногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(ВыборкаШапки.Организация, ВыборкаШапки.ГлавныйБухгалтер, ВыборкаШапки.ДатаДокумента);
            ЗаместительПоПриказу = "" + ДанныеОтветственногоЛица.Представление;
            Если ЗначениеЗаполнено(ВыборкаШапки.ЗаГлавногоБухгалтераПоПриказу) Тогда 
                ЗаместительПоПриказу = ЗаместительПоПриказу + ", " + ВыборкаШапки.ЗаГлавногоБухгалтераПоПриказу;
            КонецЕсли;
            Подвал.Параметры.ФИОГлавБухгалтера     = ЗаместительПоПриказу;
            Если ЗначениеЗаполнено(ДанныеОтветственногоЛица.Должность) Тогда
                Подвал.Параметры.ДолжностьГлавБух = "" + ДанныеОтветственногоЛица.Должность;
            КонецЕсли;
        Иначе
            ДанныеОтветственногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(ВыборкаШапки.Организация, ВыборкаШапки.ГлавныйБухгалтер, ВыборкаШапки.ДатаДокумента);
            Подвал.Параметры.ФИОГлавБухгалтера     = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерПредставление;
            Подвал.Параметры.ДолжностьГлавБух      = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерДолжностьПредставление;
        КонецЕсли;
        
		Если ЗначениеЗаполнено(ВыборкаШапки.ОтпускПроизвел) Тогда 
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(ВыборкаШапки.Организация,ВыборкаШапки.ОтпускПроизвел,ВыборкаШапки.ДатаДокумента);
			Подвал.Параметры.ДолжностьКладовщика = ДанныеФизЛица.Должность;
			Подвал.Параметры.ФИОКладовщика = ДанныеФизЛица.Представление;
		КонецЕсли;
		
		ИтогНДС      = ВыборкаСтрок.Итог("СуммаНДС");
		
		Подвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ВыборкаСтрок.Количество(), ,",,,с,,,,,0");
		Подвал.Параметры.СуммаПрописью                              = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ВыборкаСтрок.Итог("СуммаСНДС"), ВалютаРегламентированногоУчета);
		Подвал.Параметры.ИтогНДС                                    = ?(ЗначениеЗаполнено(ИтогНДС), Формат(Цел(ИтогНДС), "ЧДЦ=0") + " руб. " + Формат((ИтогНДС - Цел(ИтогНДС)) * 100, "ЧЦ=2; ЧВН=") + " коп. ", "______ руб. ______ коп.");
		
		// Инициализируем счетчик страниц
		НомерСтраницы = 1;
		
		// Выведем заголовок табличной части
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		// Выведем выборку строк
		Для каждого СтрокаВыборки Из ВыборкаСтрок Цикл

			СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
			
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			//СтрокаСПодвалом.Добавить(ПодвалТаблицы);
			
			// Если обрабатываемая строка - последняя, будем проверять, помещается ли подвал документа
			Если ВыборкаСтрок.Индекс(СтрокаВыборки) = ВыборкаСтрок.Количество() - 1 Тогда 
				СтрокаСПодвалом.Добавить(Подвал);
			КонецЕсли;

			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
				//ТабличныйДокумент.Вывести(ПодвалТаблицы);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				НомерСтраницы = НомерСтраницы + 1;
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(СтрокаТаблицы);

		КонецЦикла;
		
		// Выведем все подвалы
		
		ТабличныйДокумент.Вывести(Подвал);

		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаШапки.Ссылка);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыТТН()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
    |   СУММА(1) КАК Количество,
    |   СписокТоваров.Ссылка КАК Ссылка
    |ПОМЕСТИТЬ КоличествоТоваров
    |ИЗ
    |   (ВЫБРАТЬ РАЗЛИЧНЫЕ
    |       РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
    |       РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
    |   ИЗ
    |       Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
    |   ГДЕ
    |       РеализацияТоваровУслугТовары.Ссылка В(&МассивДокументов)) КАК СписокТоваров
    |
    |СГРУППИРОВАТЬ ПО
    |   СписокТоваров.Ссылка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   РеализацияТоваровУслуг.Ссылка,
    |   РеализацияТоваровУслуг.Дата,
    |   РеализацияТоваровУслуг.Номер,
    |   РеализацияТоваровУслуг.Организация,
    |   ВЫБОР
    |       КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
    |           ТОГДА РеализацияТоваровУслуг.Контрагент
    |       ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
    |   КОНЕЦ КАК Грузополучатель,
    |   ВЫБОР
    |       КОГДА РеализацияТоваровУслуг.Грузоотправитель = &ПустойКонтрагент
    |           ТОГДА РеализацияТоваровУслуг.Организация
    |       ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
    |   КОНЕЦ КАК Грузоотправитель,
    |   РеализацияТоваровУслуг.Организация КАК Руководители,
    |   РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
    |   РеализацияТоваровУслуг.Контрагент КАК Покупатель,
    |   РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
    |   РеализацияТоваровУслуг.Контрагент КАК Контрагент,
    |   РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
    |   РеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
    |   РеализацияТоваровУслуг.ПодразделениеОрганизации,
    |   ВЫРАЗИТЬ(РеализацияТоваровУслуг.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200)) КАК ПредставлениеПодразделения,
    |   РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
    |   РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
    |   РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
    |   РеализацияТоваровУслуг.СуммаВключаетНДС КАК ЦенаВключаетНДС,
    |   ЕСТЬNULL(КоличествоТоваров.Количество, 0) КАК КоличествоНаименований,
    |   РеализацияТоваровУслуг.Руководитель КАК Руководитель,
    |   РеализацияТоваровУслуг.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
    |   РеализацияТоваровУслуг.ЗаРуководителяПоПриказу КАК ЗаРуководителяПоПриказу,
    |   РеализацияТоваровУслуг.ЗаГлавногоБухгалтераПоПриказу КАК ЗаГлавногоБухгалтераПоПриказу,
    |   РеализацияТоваровУслуг.ОтпускПроизвел КАК ОтпускПроизвел,
    |   РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
    |   РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
    |   РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
    |   РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого
    |ИЗ
    |   Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
    |       ЛЕВОЕ СОЕДИНЕНИЕ КоличествоТоваров КАК КоличествоТоваров
    |       ПО РеализацияТоваровУслуг.Ссылка = КоличествоТоваров.Ссылка
    |ГДЕ
    |   РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   РеализацияТоваровУслуг.Ссылка КАК Ссылка,
    |   РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки,
    |   РеализацияТоваровУслуг.Номенклатура,
    |   РеализацияТоваровУслуг.ТоварНаименование,
    |   РеализацияТоваровУслуг.ТоварКод КАК ТоварКод,
    |   РеализацияТоваровУслуг.Артикул КАК Артикул,
    |   РеализацияТоваровУслуг.Количество,
    |   РеализацияТоваровУслуг.КоличествоМест,
    |   РеализацияТоваровУслуг.БазоваяЕдиницаНаименование,
    |   РеализацияТоваровУслуг.БазоваяЕдиницаКодПоОКЕИ,
    |   РеализацияТоваровУслуг.ВидУпаковки,
    |   РеализацияТоваровУслуг.Коэффициент,
    |   РеализацияТоваровУслуг.КоличествоВОдномМесте,
    |   РеализацияТоваровУслуг.Цена,
    |   РеализацияТоваровУслуг.Сумма,
    |   РеализацияТоваровУслуг.СуммаНДС,
    |   РеализацияТоваровУслуг.СуммаВВалютеДокумента,
    |   РеализацияТоваровУслуг.СуммаНДСВВалютеДокумента,
    |   РеализацияТоваровУслуг.СтавкаНДС,
    |   РеализацияТоваровУслуг.ЭтоВозвратнаяТара,
    |   РеализацияТоваровУслуг.КоэффициентПерерасчета,
    |   РеализацияТоваровУслуг.Весовой
    |ПОМЕСТИТЬ ВТ_ТаблицаПоТоварам
    |ИЗ
    |   &ТаблицаПоТоварам КАК РеализацияТоваровУслуг
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   РеализацияТоваровУслуг.Ссылка КАК Ссылка,
    |   РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки,
    |   РеализацияТоваровУслуг.Номенклатура,
    |   РеализацияТоваровУслуг.ТоварНаименование,
    |   РеализацияТоваровУслуг.ТоварКод КАК ТоварКод,
    |   РеализацияТоваровУслуг.Артикул КАК Артикул,
    |   РеализацияТоваровУслуг.Количество,
    |   РеализацияТоваровУслуг.КоличествоМест,
    |   РеализацияТоваровУслуг.БазоваяЕдиницаНаименование,
    |   РеализацияТоваровУслуг.БазоваяЕдиницаКодПоОКЕИ,
    |   РеализацияТоваровУслуг.ВидУпаковки,
    |   РеализацияТоваровУслуг.Коэффициент,
    |   РеализацияТоваровУслуг.КоличествоВОдномМесте,
    |   РеализацияТоваровУслуг.Цена,
    |   РеализацияТоваровУслуг.Сумма,
    |   РеализацияТоваровУслуг.СуммаНДС,
    |   РеализацияТоваровУслуг.СуммаВВалютеДокумента,
    |   РеализацияТоваровУслуг.СуммаНДСВВалютеДокумента,
    |   РеализацияТоваровУслуг.СтавкаНДС,
    |   РеализацияТоваровУслуг.ЭтоВозвратнаяТара,
    |   РеализацияТоваровУслуг.КоэффициентПерерасчета,
    |   РеализацияТоваровУслуг.Весовой
    |ИЗ
    |   ВТ_ТаблицаПоТоварам КАК РеализацияТоваровУслуг
    |
    |УПОРЯДОЧИТЬ ПО
    |   РеализацияТоваровУслуг.Ссылка,
    |   РеализацияТоваровУслуг.НомерСтроки
    |ИТОГИ ПО
    |   Ссылка";
		
	Возврат ТекстЗапроса;

КонецФункции

// Получить данные объектов для печати ТТН
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// Возвращаемое значение:
//  Структура с данными объектов для печати ТТН.
//
Функция ПолучитьДанныеДляПечатнойФормыТТН(МассивОбъектов) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Ссылка.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка.Проведен, ЛОЖЬ) КАК Проведен,
	|	РеализацияТоваровУслуг.Ссылка.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка.СуммаВключаетНДС, ЛОЖЬ) КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Артикул,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.КоличествоМест,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ВидУпаковки,
	|	РеализацияТоваровУслуг.Коэффициент,
	|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Ссылка.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.Цена
	|		КОГДА РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.Цена * РеализацияТоваровУслуг.Ссылка.КурсВзаиморасчетов / РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Ссылка.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.Сумма
	|		КОГДА РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.Сумма * РеализацияТоваровУслуг.Ссылка.КурсВзаиморасчетов / РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Ссылка.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.СуммаНДС
	|		КОГДА РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.СуммаНДС * РеализацияТоваровУслуг.Ссылка.КурсВзаиморасчетов / РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаНДС,
	|	РеализацияТоваровУслуг.Сумма КАК СуммаВВалютеДокумента,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДСВВалютеДокумента,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	1 КАК КоэффициентПерерасчета,
	|	ЛОЖЬ КАК Весовой,
	|	1 КАК ID,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0) КАК СуммаБезНДСРуб
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|			И (РеализацияТоваровУслуг.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Ссылка.Дата,
	|	РеализацияТоваровУслуг.Ссылка.ВалютаДокумента,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка.Проведен, ЛОЖЬ),
	|	РеализацияТоваровУслуг.Ссылка.СчетУчетаРасчетовСКонтрагентом,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка.СуммаВключаетНДС, ЛОЖЬ),
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код,
	|	NULL,
	|	1,
	|	1,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Ссылка.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.Цена
	|		КОГДА РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.Цена * РеализацияТоваровУслуг.Ссылка.КурсВзаиморасчетов / РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Ссылка.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.Сумма
	|		КОГДА РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.Сумма * РеализацияТоваровУслуг.Ссылка.КурсВзаиморасчетов / РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Ссылка.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.СуммаНДС
	|		КОГДА РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.СуммаНДС * РеализацияТоваровУслуг.Ссылка.КурсВзаиморасчетов / РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЛОЖЬ,
	|	1,
	|	ЛОЖЬ,
	|	3,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|			И (РеализацияТоваровУслуг.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Ссылка.Дата,
	|	РеализацияТоваровУслуг.Ссылка.ВалютаДокумента,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка.Проведен, ЛОЖЬ),
	|	РеализацияТоваровУслуг.Ссылка.СчетУчетаРасчетовСКонтрагентом,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка.СуммаВключаетНДС, ЛОЖЬ),
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код,
	|	NULL,
	|	1,
	|	1,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Ссылка.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.Цена
	|		КОГДА РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.Цена * РеализацияТоваровУслуг.Ссылка.КурсВзаиморасчетов / РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Ссылка.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.Сумма
	|		КОГДА РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.Сумма * РеализацияТоваровУслуг.Ссылка.КурсВзаиморасчетов / РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Ссылка.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|			ТОГДА РеализацияТоваровУслуг.СуммаНДС
	|		КОГДА РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслуг.СуммаНДС * РеализацияТоваровУслуг.Ссылка.КурсВзаиморасчетов / РеализацияТоваровУслуг.Ссылка.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЛОЖЬ,
	|	1,
	|	ЛОЖЬ,
	|	4,
	|	ИСТИНА,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|			И (РеализацияТоваровУслуг.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Ссылка,
	|	ID,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(РасчетыВУсловныхЕдиницах),
	|	МАКСИМУМ(Проведен),
	|	МАКСИМУМ(СчетУчетаРасчетовСКонтрагентом),
	|	МАКСИМУМ(СуммаВключаетНДС)
	|ПО
	|	Ссылка";

	РезультатЗапросаТЧ = Запрос.Выполнить();
	ВыборкаПоРегистраторам = РезультатЗапросаТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ТаблицаПоТоварам = Новый ТаблицаЗначений;
	КолонкиЗапроса = РезультатЗапросаТЧ.Колонки;
	Для Каждого Колонка Из КолонкиЗапроса Цикл
		ТаблицаПоТоварам.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	ТаблицаПоТоварам.Колонки.Добавить("СуммаБезНДС", 				ОписаниеТиповЧисло15_2);
	ТаблицаПоТоварам.Колонки.Добавить("СуммаРублевая", 				ОписаниеТиповЧисло15_2);
	
	ТаблицаПоТоварамДоп  = ТаблицаПоТоварам.СкопироватьКолонки();
	
	Пока ВыборкаПоРегистраторам.Следующий() Цикл 
		
		ВыборкаСтрок = ВыборкаПоРегистраторам.Выбрать();
		ТаблицаПоТоварамДоп.Очистить();
		
		ТаблицаПоТоварамДоп = ПодготовитьТаблицуДокументаДляПечати(ВыборкаСтрок, ТаблицаПоТоварамДоп, Истина, Ложь);
	
		// Копируем в общую таблицу
		Для Каждого СтрокаТовар Из ТаблицаПоТоварамДоп Цикл
			НоваяСтрока = ТаблицаПоТоварам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовар);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаПоТоварам", ТаблицаПоТоварам);
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыТТН();
	
	МассивРезультатов 			= Запрос.ВыполнитьПакет();
	РезультатПоШапке			= МассивРезультатов[1];
	РезультатПоТабличнойЧасти 	= МассивРезультатов[3];
	
	СтруктураДанныхДляПечати 	= Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти",
		РезультатПоШапке,
		РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы транспортной накладной
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыТранспортнойНакладной()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Организация,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Контрагент КАК ЗаказчикПеревозок,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)";
		
	Возврат ТекстЗапроса;
КонецФункции

// Получить данные объектов для печати транспортной накладной
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// Возвращаемое значение:
//  Структура с данными объектов для печати транспортной накладной.
//
Функция ПолучитьДанныеДляПечатнойФормыТранспортнаяНакладная(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыТранспортнойНакладной();
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРублевыеСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РегистрСведенийРублевыеСуммыДокументовВВалюте",             НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ПоДокументамЗачетнныхАвансов",                           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ПоДокументамЗачетнныхАвансов",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_РегистрСведенийРублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.УчетАгентскогоНДС, ЛОЖЬ) КАК УчетАгентскогоНДС,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.РасчетыВУсловныхЕдиницах,
	|	ВТ_ТаблицаПоШапкеДокумента.УчетАгентскогоНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РублевыеСуммыДокументовВВалюте.Всего,
	|	РублевыеСуммыДокументовВВалюте.НДС,
	|	РублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО РублевыеСуммыДокументовВВалюте.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ТабличнаяЧастьДокумента,
	|	НомерСтрокиДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Ссылка,
	|	Хозрасчетный.Сумма КАК СуммаПредоплатыРуб,
	|	Хозрасчетный.ВалютнаяСуммаДт КАК СуммаПредоплатыВал,
	|	ХозрасчетныйСубконто.Значение КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйСубконто.Значение) КАК ДокументПредоплатыПредставление,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация
	|ПОМЕСТИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО Хозрасчетный.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|			И Хозрасчетный.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам
	|			И Хозрасчетный.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Хозрасчетный.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка КАК Ссылка,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыРуб КАК СуммаПредоплатыРуб,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыВал КАК СуммаПредоплатыВал,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДокументПредоплатыПредставление,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента
	|ИЗ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента КАК ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Организация = ДанныеПервичныхДокументов.Организация
	|			И ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРуб),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбрабатываемаяТаблица.Ссылка КАК Ссылка,
	|	2 КАК ПорядокТабличныхЧастей,
	|	ОбрабатываемаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ОбрабатываемаяТаблица.Номенклатура КАК Товар,
	|	ОбрабатываемаяТаблица.Номенклатура.Наименование КАК ТоварНаименование,
	|	ОбрабатываемаяТаблица.Сумма КАК ВсегоВал,
	|	ОбрабатываемаяТаблица.СуммаНДС КАК НДСВал,
	|	ОбрабатываемаяТаблица.СтавкаНДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК ВсегоРуб,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДСРуб,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДСРуб
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ОбрабатываемаяТаблица.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ОбрабатываемаяТаблица.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбрабатываемаяТаблица.Ссылка,
	|	1,
	|	ОбрабатываемаяТаблица.НомерСтроки,
	|	ОбрабатываемаяТаблица.Номенклатура,
	|	ОбрабатываемаяТаблица.Номенклатура.Наименование,
	|	ОбрабатываемаяТаблица.Сумма,
	|	ОбрабатываемаяТаблица.СуммаНДС,
	|	ОбрабатываемаяТаблица.СтавкаНДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ОбрабатываемаяТаблица.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ОбрабатываемаяТаблица.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбрабатываемаяТаблица.Ссылка,
	|	3,
	|	ОбрабатываемаяТаблица.НомерСтроки,
	|	ОбрабатываемаяТаблица.Номенклатура,
	|	ОбрабатываемаяТаблица.Номенклатура.Наименование,
	|	ОбрабатываемаяТаблица.Сумма,
	|	ОбрабатываемаяТаблица.СуммаНДС,
	|	ОбрабатываемаяТаблица.СтавкаНДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК ОбрабатываемаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ОбрабатываемаяТаблица.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ОбрабатываемаяТаблица.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|ГДЕ
	|	ОбрабатываемаяТаблица.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПорядокТабличныхЧастей,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРуб),
	|	СУММА(НДСРуб),
	|	СУММА(НалоговаяБазаНДСРуб)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация, Подписан", "Контрагент", "СтатусыДокументов.Статус");
	
	ПолеТовары = "	Таб.Товары.(КОЛИЧЕСТВО(Ссылка)";
	Результат.Вставить("Товары",          ПолеТовары                                           + " КАК ЕстьТовары)");
	Результат.Вставить("Услуги",          СтрЗаменить(ПолеТовары, "Товары", "Услуги")          + " КАК ЕстьУслуги)");
	Результат.Вставить("АгентскиеУслуги", СтрЗаменить(ПолеТовары, "Товары", "АгентскиеУслуги") + " КАК ЕстьУслуги)");
	
	Возврат Результат;
	
КонецФункции

// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ ИБ

Процедура ЗаменитьВидыОперацийНаПростыеПриПереходеС20Отложенно(Параметры) Экспорт

	Запрос = Новый Запрос;
	
	КонецПериодаВыборки = '20191231235959';
	
	Если Параметры.Свойство("КонецПериодаВыборки")
		И ТипЗнч(Параметры.КонецПериодаВыборки) = Тип("Дата") Тогда
		КонецПериодаВыборки = Параметры.КонецПериодаВыборки;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", 	КонецПериодаВыборки);	
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Дата
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата <= &КонецПериодаВыборки
	|	И РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)
	|	И РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслуг.Дата УБЫВ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка,
	|	ТаблицаДокументов.Дата,
	|	СУММА(ТаблицаДокументов.ЕстьТовары) КАК ЕстьТовары,
	|	СУММА(ТаблицаДокументов.ЕстьВозвратнаяТара) КАК ЕстьВозвратнаяТара,
	|	СУММА(ТаблицаДокументов.ЕстьУслуги) КАК ЕстьУслуги,
	|	СУММА(ТаблицаДокументов.ЕстьАгентскиеУслуги) КАК ЕстьАгентскиеУслуги
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Документы.Ссылка КАК Ссылка,
	|		ВТ_Документы.Дата КАК Дата,
	|		ЕСТЬNULL(СтрокиТЧ.НомерСтроки, 0) КАК ЕстьТовары,
	|		0 КАК ЕстьВозвратнаяТара,
	|		0 КАК ЕстьУслуги,
	|		0 КАК ЕстьАгентскиеУслуги
	|	ИЗ
	|		ВТ_Документы КАК ВТ_Документы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК СтрокиТЧ
	|			ПО ВТ_Документы.Ссылка = СтрокиТЧ.Ссылка
	|				И (СтрокиТЧ.НомерСтроки = 1)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Документы.Ссылка,
	|		ВТ_Документы.Дата,
	|		0,
	|		ЕСТЬNULL(СтрокиТЧ.НомерСтроки, 0),
	|		0,
	|		0
	|	ИЗ
	|		ВТ_Документы КАК ВТ_Документы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК СтрокиТЧ
	|			ПО ВТ_Документы.Ссылка = СтрокиТЧ.Ссылка
	|				И (СтрокиТЧ.НомерСтроки = 1)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Документы.Ссылка,
	|		ВТ_Документы.Дата,
	|		0,
	|		0,
	|		ЕСТЬNULL(СтрокиТЧ.НомерСтроки, 0),
	|		0
	|	ИЗ
	|		ВТ_Документы КАК ВТ_Документы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК СтрокиТЧ
	|			ПО ВТ_Документы.Ссылка = СтрокиТЧ.Ссылка
	|				И (СтрокиТЧ.НомерСтроки = 1)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Документы.Ссылка,
	|		ВТ_Документы.Дата,
	|		0,
	|		0,
	|		0,
	|		ЕСТЬNULL(СтрокиТЧ.НомерСтроки, 0)
	|	ИЗ
	|		ВТ_Документы КАК ВТ_Документы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК СтрокиТЧ
	|			ПО ВТ_Документы.Ссылка = СтрокиТЧ.Ссылка
	|				И (СтрокиТЧ.НомерСтроки = 1)) КАК ТаблицаДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.Ссылка,
	|	ТаблицаДокументов.Дата
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаДокументов.ЕстьТовары) + СУММА(ТаблицаДокументов.ЕстьВозвратнаяТара) + СУММА(ТаблицаДокументов.ЕстьУслуги) + СУММА(ТаблицаДокументов.ЕстьАгентскиеУслуги) = 1 И
	|	(СУММА(ТаблицаДокументов.ЕстьТовары) = 1
	|		ИЛИ СУММА(ТаблицаДокументов.ЕстьУслуги) = 1)";

	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	ВыборкаПоДокументам = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Попытка
			
			ЗаменитьВДокументеВидОперацииНаПростойПриПереходеС20(ВыборкаПоДокументам);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			КонецПериодаВыборки = ВыборкаПоДокументам.Дата; // Запоминаем дату, с которой будем начинать в следующий раз.
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать реализацию товаров и услуг: %1 по причине:
					|%2'"),
					ВыборкаПоДокументам.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РеализацияТоваровУслуг, ВыборкаПоДокументам.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	// Запоминаем дату, с которой будем начинать в следующий раз.
	Параметры.Вставить("КонецПериодаВыборки", КонецПериодаВыборки);
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаменитьВидыОперацийНаПростыеПриПереходеС20
				|не удалось обработать некоторые реализации товаров и услуг (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РеализацияТоваровУслуг,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаменитьВидыОперацийНаПростыеПриПереходеС20
					|обработала очередную порцию реализаций товаров и услуг: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;


КонецПроцедуры

Процедура ЗаменитьВДокументеВидОперацииНаПростойПриПереходеС20(ВыборкаПоДокументам)
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.РеализацияТоваровУслуг");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоДокументам.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДокументОбъект = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		НовыйВидОперации = Неопределено;
		
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
			Если ДокументОбъект.Товары.Количество() > 0
				И ДокументОбъект.ВозвратнаяТара.Количество() = 0
				И ДокументОбъект.Услуги.Количество() = 0
				И ДокументОбъект.АгентскиеУслуги.Количество() = 0 Тогда

				НовыйВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
			
			ИначеЕсли ДокументОбъект.Товары.Количество() = 0
				И ДокументОбъект.ВозвратнаяТара.Количество() = 0
				И ДокументОбъект.Услуги.Количество() > 0
				И ДокументОбъект.АгентскиеУслуги.Количество() = 0 Тогда

				НовыйВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НовыйВидОперации) Тогда
			// Документ уже обработан либо его данные перестали удовлетворять условию замены вида операции
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ДокументОбъект.ВидОперации = НовыйВидОперации;
		
		// Запись обработанного объекта (без перепроведения).
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Формирует пакеты электронных документов стандарта CML 2.08 содержащих в себе документы
// реализация (акт, накладная), реквизиты организации и счет-фактура.
// 
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на документы РеализацияТоваровИУслуг.
// 
// Возвращаемое значение:
//  Массив - содержит структуры со свойствами:
//    * Представление - Строка - наименование пакета электронных документов
//    * АдресВоВременномХранилище - Строка - адрес данных электронного документа во временном хранилище
//
Функция СформироватьРеализациюТоваровИУслугВXML(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	РеализацияТоваровУслугУслуги.Ссылка КАК ДокументРеализации
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	                      |ГДЕ
	                      |	РеализацияТоваровУслугУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	                      |	И РеализацияТоваровУслугУслуги.Ссылка В(&СсылкиНаДокументы)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализации,
	                      |	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.Ссылка, ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)) КАК СчетФактура,
	                      |	РеализацияТоваровУслуг.Организация,
	                      |	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Ссылка) КАК ДокументРеализацииПредставление,
	                      |	РеализацияТоваровУслуг.Контрагент.ИНН,
	                      |	РеализацияТоваровУслуг.Организация.ИНН
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	                      |		ПО (СчетФактураВыданныйДокументыОснования.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
	                      |ГДЕ
	                      |	РеализацияТоваровУслуг.Ссылка В(&СсылкиНаДокументы)");
	
	Запрос.УстановитьПараметр("СсылкиНаДокументы", МассивОбъектов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[1].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументыСУслугойСтрокой = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("ДокументРеализации");
	ВыборкаДанных = РезультатЗапроса[1].Выбрать();
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("Ссылка");
	СчетаФактурыРеализаций = Новый Соответствие;
	Пока ВыборкаДанных.Следующий() Цикл
		
		ДокументРеализации = ВыборкаДанных.ДокументРеализации;
		ДокументРеализацииПредставление = ВыборкаДанных.ДокументРеализацииПредставление;
		Если ДокументыСУслугойСтрокой.Найти(ДокументРеализации) <> Неопределено Тогда
			
			ШаблонСообщения = НСтр("ru = 'Сообщение будет отправлено без электронного документа %1. Имеются позиции, отсутствующие в справочнике ""Номенклатура"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, """" + ДокументРеализацииПредставление + """");
			ЗаписьЖурналаРегистрации("Обмен ЭД через электронную почту", УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РеализацияТоваровУслуг,, ТекстСообщения);
				
			Продолжить;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаДанных.КонтрагентИНН) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Сообщение будет отправлено без электронного документа %1. Не заполнен ИНН контрагента.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, """" + ДокументРеализацииПредставление + """");
			ЗаписьЖурналаРегистрации("Обмен ЭД через электронную почту", УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РеализацияТоваровУслуг,, ТекстСообщения);	
				
			Продолжить;
			
		КонецЕсли;		
		
		Если Не ЗначениеЗаполнено(ВыборкаДанных.ОрганизацияИНН) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Сообщение будет отправлено без электронного документа %1. Не заполнен ИНН организации.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, """" + ДокументРеализацииПредставление + """");
			ЗаписьЖурналаРегистрации("Обмен ЭД через электронную почту", УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РеализацияТоваровУслуг,, ТекстСообщения);	
				
			Продолжить;
			
		КонецЕсли;		
		
		НоваяСтрока = ТаблицаСсылок.Добавить();
		НоваяСтрока.Ссылка = ВыборкаДанных.ДокументРеализации;
			
		Если ЗначениеЗаполнено(ВыборкаДанных.СчетФактура) Тогда
			
			НоваяСтрока = ТаблицаСсылок.Добавить();
			НоваяСтрока.Ссылка = ВыборкаДанных.СчетФактура;
			СчетаФактурыРеализаций.Вставить(ВыборкаДанных.ДокументРеализации, ВыборкаДанных.СчетФактура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСсылок.Свернуть("Ссылка");
	
	// не сериализуем счета-фактуры с неверно заполненым адресом
	СчетФактурыУдаление = Новый Массив;
	Для Каждого СтрокаДанных Из ТаблицаСсылок Цикл
	
		Если ТипЗнч(СтрокаДанных.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			СсылкаНаОбъект = СтрокаДанных.Ссылка;
			СтруктураАдресаКонтрагента = Новый Структура;
			ТекстОшибки = "";
			ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(СтруктураАдресаКонтрагента,
				СсылкаНаОбъект.Контрагент,
				"Ссылка",
				"Юр",
				ТекстОшибки);
			
			СтруктураАдресаОрганизации = Новый Структура;
			ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(СтруктураАдресаОрганизации,
				СсылкаНаОбъект.Организация,
				"Ссылка",
				"Юр",
				ТекстОшибки);
			
			Если ПустаяСтрока(СтруктураАдресаКонтрагента.КодРегион) ИЛИ ПустаяСтрока(СтруктураАдресаОрганизации.КодРегион) Тогда
				СчетФактурыУдаление.Добавить(СтрокаДанных);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из СчетФактурыУдаление Цикл
		ТаблицаСсылок.Удалить(ЭлементМассива);
	КонецЦикла;
	
	ПакетыЭД = Новый Массив;
	ТаблицаЭД = ПодготовитьДанныеДляЗаполненияДокументов(ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"), СчетаФактурыРеализаций);
	Если ТаблицаЭД <> Неопределено Тогда
		
		Для Каждого СтрокаДанных Из ТаблицаЭД Цикл
			
			СтруктураВложения = Новый Структура("АдресВоВременномХранилище, Представление");
			СтруктураВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтрокаДанных.ДвоичныеДанныеПакета, Новый УникальныйИдентификатор);
			СтруктураВложения.Представление = СтрокаДанных.НаименованиеФайла + "zip";
			ПакетыЭД.Добавить(СтруктураВложения);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ПакетыЭД;
	
КонецФункции

// Читает данные электронных документов вида реализация товаров и услуг стандарта CML 2.08
//
// Параметры:
//  АдресаXMLФайлов - Массив - массив строк с адресами данных электронных документов во временном хранилище
//
// Возвращаемое значение:
//  ДанныеСчетов - ТаблицаЗначений - таблица значений с данными прочитанных электронных документов.
//   описание колонок таблицы см. в функции.
//
Функция РазобратьРеализациюТоваровИУслугВXML(МассивДанныхЭД) Экспорт
	
	ДанныеРТиУ = Новый ТаблицаЗначений;
	ДанныеРТиУ.Колонки.Добавить("Показывать"       , Новый ОписаниеТипов("Булево"));
	ДанныеРТиУ.Колонки.Добавить("Наименование"     , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ДанныеРТиУ.Колонки.Добавить("ИНН"              , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(12)));
	ДанныеРТиУ.Колонки.Добавить("КПП"              , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(9)));
	ДанныеРТиУ.Колонки.Добавить("УИД"              , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(32)));
	ДанныеРТиУ.Колонки.Добавить("СчетФактураУИД"   , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(32)));
	ДанныеРТиУ.Колонки.Добавить("ВидЭД"            , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(30)));
	ДанныеРТиУ.Колонки.Добавить("Документ"         , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ДанныеРТиУ.Колонки.Добавить("НомерДокумента"   , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ДанныеРТиУ.Колонки.Добавить("ДатаДокумента"    , Новый ОписаниеТипов("Дата"));
	ДанныеРТиУ.Колонки.Добавить("СуммаДокумента"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеРТиУ.Колонки.Добавить("ДанныеДокумента"  , Новый ОписаниеТипов("Структура"));
	ДанныеРТиУ.Колонки.Добавить("ТабличныйДокумент", Новый ОписаниеТипов("ТабличныйДокумент"));
	ДанныеРТиУ.Колонки.Добавить("ФайлДанных");
	ДанныеРТиУ.Колонки.Добавить("ФайлТабличногоДокумента");
	ДанныеРТиУ.Колонки.Добавить("РасширениеФайла"   , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(4)));
	ДанныеРТиУ.Колонки.Добавить("НомерСчФ"   , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ДанныеРТиУ.Колонки.Добавить("ВидДокумента"   , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10)));
	ДанныеРТиУ.Колонки.Добавить("ДатаСчФ"   , Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеРТиУ.Колонки.Добавить("ТекстОшибки"       , Новый ОписаниеТипов("Строка"));
	
	ДанныеРТиУ.Индексы.Добавить("ИНН, КПП, НомерДокумента");
	
	Для Каждого ДанныеЭД Из МассивДанныхЭД Цикл
				
		ПолученныеДанные = ПолучитьИзВременногоХранилища(ДанныеЭД);		
		Если ТипЗнч(ПолученныеДанные) = Тип("Структура") Тогда
			
			ВидДокумента = "";
			Если ПолученныеДанные.Свойство("ВидДокумента") Тогда
					
					ВидДокумента = ПолученныеДанные.ВидДокумента;
					
			КонецЕсли;
			ДанныеКарточкиЭД = ПрочитатьДанныеКарточкиЭД(ПолученныеДанные.ДвоичныеДанные, ВидДокумента);
			
		Иначе	
			
			ДанныеКарточкиЭД = ПрочитатьДанныеКарточкиЭД(ПолученныеДанные);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеКарточкиЭД) Тогда		
			
			Если ДанныеКарточкиЭД.Свойство("НомерДокумента") Тогда
				Отбор = Новый Структура("ИНН, КПП, НомерДокумента",
					ДанныеКарточкиЭД.ИНН,
					ДанныеКарточкиЭД.КПП,
					ДанныеКарточкиЭД.НомерДокумента);
				
				Если ДанныеРТиУ.НайтиСтроки(Отбор).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДанныхРТиУ = ДанныеРТиУ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанныхРТиУ, ДанныеКарточкиЭД);
						
			Если ТипЗнч(ПолученныеДанные) = Тип("Структура") Тогда
				
				СтрокаДанныхРТиУ.РасширениеФайла = ПолученныеДанные.РасширениеФайла;				
				СтрокаДанныхРТиУ.ВидДокумента = ВидДокумента;				
				Если ПолученныеДанные.Свойство("ФайлТабличногоДокумента") Тогда
				
					СтрокаДанныхРТиУ.ФайлТабличногоДокумента = ПолученныеДанные.ФайлТабличногоДокумента;
					Если ПолученныеДанные.РасширениеФайла = "mxl" Тогда
					
						ТабДок = Новый ТабличныйДокумент;						
						ТабДок.ОтображатьЗаголовки = Ложь;
						ТабДок.ОтображатьСетку = Истина;						
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
						ПолученныеДанные.ФайлТабличногоДокумента.Записать(ИмяВременногоФайла);
						ТабДок.Прочитать(ИмяВременногоФайла);					
						СтрокаДанныхРТиУ.ТабличныйДокумент = ТабДок;
						УдалитьФайлы(ИмяВременногоФайла);
					
					КонецЕсли;
					
				КонецЕсли;								
				Если ПолученныеДанные.Свойство("НомерСчФ") Тогда
					
					СтрокаДанныхРТиУ.НомерСчФ = ПолученныеДанные.НомерСчФ;
					СтрокаДанныхРТиУ.ДатаСчФ = ПолученныеДанные.ДатаСчФ;				
					
				КонецЕсли;			
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеРТиУ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПрочитатьДанныеКарточкиЭД(ДвоичныеДанные, ВидДокумента = "")
	
	Перем ДеревоРазбора;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	РазделительПути = ПолучитьРазделительПути();
	
	ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ТекущийКаталогВременныхФайлов() + РазделительПути
		+ "Ext" + РазделительПути + УникальныйИдентификатор + РазделительПути;
		
	СоздатьКаталог(ПапкаДляРаспаковки);
	
	ИмяФайлаАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяФайлаАрхива);
	
	ЧтениеЗИП = Новый ЧтениеZIPФайла(ИмяФайлаАрхива);
	Попытка
		ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРаспаковки);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРаспаковки) Тогда
			ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
		КонецЕсли;
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru='Распаковка архива ЭД'"),
			ТекстОшибки, ТекстСообщения);
		
		УдалитьФайлы(ИмяФайлаАрхива);
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Неопределено;
	КонецПопытки;
	
	МассивФайлов = НайтиФайлы(ПапкаДляРаспаковки, "card*.xml", Истина);
	
	Если МассивФайлов.Количество() > 0 Тогда
		ФайлКарточки = МассивФайлов[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
	ТипXDTO = ФабрикаXDTO.Тип("http://api-invoice.taxcom.ru/card", "Card");
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
	
	Если СокрЛП(НРег(ОбъектXDTO.Type.Name)) = НРег("Invoice") Тогда
		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
	ИначеЕсли СокрЛП(НРег(ОбъектXDTO.Type.Name)) = НРег("Statement") Тогда
		ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
	ИначеЕсли СокрЛП(НРег(ОбъектXDTO.Type.Name)) = НРег("Consignment") Тогда
		ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
	ИначеЕсли СокрЛП(НРег(ОбъектXDTO.Type.Name)) = НРег("Other") Тогда
		Если СокрЛП(НРег(ОбъектXDTO.Description.Title)) = НРег("РеквизитыОрганизации") Тогда
			ВидЭД = "РеквизитыОрганизации";
		КонецЕсли;
	КонецЕсли;
	
	Если ВидЭД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДанных.Вставить("ИНН"         , ОбъектXDTO.Sender.Abonent.Inn);
	СтруктураДанных.Вставить("КПП"         , ОбъектXDTO.Sender.Abonent.Kpp);
	СтруктураДанных.Вставить("Наименование", ОбъектXDTO.Sender.Abonent.Name);
	СтруктураДанных.Вставить("Показывать"  , Ложь);
	СтруктураДанных.Вставить("УИД"         , ОбъектXDTO.Identifiers.ExternalIdentifier);
	СтруктураДанных.Вставить("ВидЭД"       , ВидЭД);	
	Если Не ЗначениеЗаполнено(СтруктураДанных.ИНН) Тогда
		
		ШаблонСообщения = НСтр("ru = 'У отправителя ""%1"" не указан ИНН'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураДанных.Наименование);				
		СтруктураДанных.Вставить("ТекстОшибки", ТекстОшибки);
		
	КонецЕсли;	
	
	ТипЭД = Обработки.ПрямойОбменЭД.ТипДокументаПоСтрокеТакском(ОбъектXDTO.Type.Name);  	
	ИмяФайлаДанных = Обработки.ПрямойОбменЭД.ПолучитьИмяФайлаДанных(ПапкаДляРаспаковки);	
	Если Не СтруктураДанных.Свойство("ТекстОшибки") Или ТипЭД = Перечисления.ТипыЭД.Прочее Тогда
			
		ДанныеДокумента = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайлаДанных,
			Перечисления.НаправленияЭД.Входящий);		
		СтруктураДанных.Вставить("ДанныеДокумента", ДанныеДокумента);
	
	КонецЕсли;
	
	ЧтениеXML.ОткрытьФайл(ИмяФайлаДанных);
	ИННОрганизации = "";
	Если ТипЭД = Перечисления.ТипыЭД.АктВыполненныхРабот Тогда
		
		ТипXDTO = ФабрикаXDTO.Тип("IAKTPRM", "Файл");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
		
		СуммаДокумента = 0;
		Для Каждого ЭлементСписка Из ОбъектXDTO.Документ.СвАктИ.ОписРабот Цикл
			СуммаДокумента = СуммаДокумента + ЭлементСписка.СумУчНДСИт;
		КонецЦикла;
		
		Документ = ОбъектXDTO.Документ.СвАктИ.НаимПервДок + " " 
			+ ОбъектXDTO.Документ.СвАктИ.НомАкт + " " + НСтр("ru='от'") + " " + ОбъектXDTO.Документ.СвАктИ.ДатаАкт;
		
		СтруктураДанных.Вставить("Документ"      , Документ);
		СтруктураДанных.Вставить("НомерДокумента", ОбъектXDTO.Документ.СвАктИ.НомАкт);
		СтруктураДанных.Вставить("ДатаДокумента" , ОбъектXDTO.Документ.СвАктИ.ДатаАкт);
		СтруктураДанных.Вставить("СуммаДокумента", СуммаДокумента);
		СтруктураДанных.Вставить("Показывать"    , Истина);
		ДанныеГрузополучателя = ОбъектXDTO.Документ.СвАктИ.Заказчик.ИдСв;
		Если ДанныеГрузополучателя.СвЮЛ = Неопределено Тогда
			
			ИННОрганизации = ДанныеГрузополучателя.СвФЛ.ИННФЛ;
			
		Иначе		
			
			ИННОрганизации = ДанныеГрузополучателя.СвЮЛ.ИННЮЛ;
			
		КонецЕсли;
		Если Не СтруктураДанных.Свойство("ТекстОшибки") И ОбъектXDTO.Документ.СвАктИ.Исполнитель.Адрес <> Неопределено Тогда
			
			ДанныеАдреса = ОбъектXDTO.Документ.СвАктИ.Исполнитель.Адрес.АдрРФ;
			АдресСтруктурой = Новый Структура;
			АдресСтруктурой.Вставить("Город");
			АдресСтруктурой.Вставить("Дом");
			АдресСтруктурой.Вставить("Индекс");
			АдресСтруктурой.Вставить("Квартира");
			АдресСтруктурой.Вставить("КодРегиона");
			АдресСтруктурой.Вставить("Корпус");
			АдресСтруктурой.Вставить("НаселПункт");
			АдресСтруктурой.Вставить("Район");
			АдресСтруктурой.Вставить("Улица");
			Если ДанныеАдреса <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(АдресСтруктурой, ДанныеАдреса);
				АдресСтруктурой.КодРегиона = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеАдреса.КодРегион);
				АдресСтруктурой.Квартира = ДанныеАдреса.Кварт;
			КонецЕсли;
			
			ДеревоРазбора = ДанныеДокумента.ДеревоРазбора; 		
			НайденныеСтроки = ДеревоРазбора.Строки.Найти("ЭлектронныеДокументы","ТипОбъекта");		
			СтрокаОбъекта = НайденныеСтроки.Строки[0];
			ИндексСтрокиКонтрагента = ЭлектронныеДокументыБП.ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Контрагент", Истина);	
			СтрокаКонтрагента = ДеревоРазбора.Строки.Найти(ИндексСтрокиКонтрагента, "ИндексСтроки", Истина);
			Адрес = СтрокаКонтрагента.Строки.Добавить();
			Адрес.Реквизит = "АдресСтруктурой";
			Адрес.ЗначениеРеквизита = АдресСтруктурой;
		
		КонецЕсли;   
		
	ИначеЕсли ТипЭД = Перечисления.ТипыЭД.ТоварнаяНакладная Тогда
		
		ТипXDTO = ФабрикаXDTO.Тип("OTORG12", "Файл");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);		
		Документ = ?(ВидДокумента = "УПД", "УПД ", ОбъектXDTO.Документ.СвТНО.НомФорм + " (" 
			+ ОбъектXDTO.Документ.СвТНО.НаимПервДок + ") ") + ОбъектXDTO.Документ.СвТНО.ТН.НомТН
			+ " " + НСтр("ru='от'") + " " + ОбъектXDTO.Документ.СвТНО.ТН.ДатаТН;
		
		СтруктураДанных.Вставить("Документ"      , Документ);
		СтруктураДанных.Вставить("НомерДокумента", ОбъектXDTO.Документ.СвТНО.ТН.НомТН);
		СтруктураДанных.Вставить("ДатаДокумента" , ОбъектXDTO.Документ.СвТНО.ТН.ДатаТН);
		СтруктураДанных.Вставить("СуммаДокумента", ОбъектXDTO.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс);
		СтруктураДанных.Вставить("Показывать"    , Истина);
		ДанныеГрузополучателя = ОбъектXDTO.Документ.СвТНО.ГрузПолуч.ИдСв;
		Если ДанныеГрузополучателя.СвЮЛ = Неопределено Тогда
			
			ИННОрганизации = ДанныеГрузополучателя.СвФЛ.ИННФЛ;
			
		Иначе
			
			ИННОрганизации = ДанныеГрузополучателя.СвЮЛ.ИННЮЛ;
			
		КонецЕсли;
		Если Не СтруктураДанных.Свойство("ТекстОшибки") И ОбъектXDTO.Документ.СвТНО.Поставщик.Адрес <> Неопределено Тогда
			
			ДанныеПоставщика = ОбъектXDTO.Документ.СвТНО.Поставщик;
			АдресСтруктурой = Новый Структура;
			АдресСтруктурой.Вставить("Город");
			АдресСтруктурой.Вставить("Дом");
			АдресСтруктурой.Вставить("Индекс");
			АдресСтруктурой.Вставить("Квартира");
			АдресСтруктурой.Вставить("КодРегиона");
			АдресСтруктурой.Вставить("Корпус");
			АдресСтруктурой.Вставить("НаселПункт");
			АдресСтруктурой.Вставить("Район");
			АдресСтруктурой.Вставить("Улица");
			Если ДанныеПоставщика.Адрес.АдрРФ <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(АдресСтруктурой, ДанныеПоставщика.Адрес.АдрРФ);
				АдресСтруктурой.КодРегиона = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеПоставщика.Адрес.АдрРФ.КодРегион);
				АдресСтруктурой.Квартира = ДанныеПоставщика.Адрес.АдрРФ.Кварт;
			КонецЕсли;
			
			ДеревоРазбора = ДанныеДокумента.ДеревоРазбора;
			НайденныеСтроки = ДеревоРазбора.Строки.Найти("ЭлектронныеДокументы","ТипОбъекта");
			СтрокаОбъекта = НайденныеСтроки.Строки[0];
			ИндексСтрокиКонтрагента = ЭлектронныеДокументыБП.ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Контрагент", Истина);
			СтрокаКонтрагента = ДеревоРазбора.Строки.Найти(ИндексСтрокиКонтрагента, "ИндексСтроки", Истина);
			Адрес = СтрокаКонтрагента.Строки.Добавить();
			Адрес.Реквизит = "АдресСтруктурой";
			Адрес.ЗначениеРеквизита = АдресСтруктурой;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	Если ТипЭД <> Перечисления.ТипыЭД.Прочее Тогда
		
		Если Не ЗначениеЗаполнено(ИННОрганизации) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не указан ИНН организации-получателя'");		
			СтруктураДанных.Вставить("ТекстОшибки", ТекстОшибки);	
			
		Иначе
			
			СсылкаНаОрганизацию = ЭлектронныеДокументыПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИННОрганизации, Неопределено);
			Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
				
				ШаблонСообщения = НСтр("ru = 'Не удалось найти организацию-получателя с ИНН %1'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИННОрганизации);				
				СтруктураДанных.Вставить("ТекстОшибки", ТекстОшибки);	
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если СтруктураДанных.Показывать Тогда
		ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(
			ИмяФайлаДанных, Перечисления.НаправленияЭД.Входящий, УникальныйИдентификатор);
		СтруктураДанных.Вставить("ТабличныйДокумент", ТабличныйДокумент);
		СтруктураДанных.Вставить("ФайлДанных"       , Новый ДвоичныеДанные(ИмяФайлаДанных));
	КонецЕсли;
	
	МассивФайлов = НайтиФайлы(ПапкаДляРаспаковки, "add_data*.xml", Истина);
	Если МассивФайлов.Количество() > 0 Тогда
		
		ФайлДопИнформации = МассивФайлов[0];
		ЧтениеXML.ОткрытьФайл(ФайлДопИнформации.ПолноеИмя);
		ТипXDTO = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "anyType");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
		
		СтруктураДанных.Вставить("СчетФактураУИД", ОбъектXDTO.ИдСчетаФактуры);
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаАрхива);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияДокументов(МассивСсылокНаОбъект, СчетаФактурыРеализаций = Неопределено) Экспорт
	
	ТаблицаЭД = Новый ТаблицаЗначений;
	ТаблицаЭД.Колонки.Добавить("ПолноеИмяФайла");
	ТаблицаЭД.Колонки.Добавить("НаименованиеФайла");
	ТаблицаЭД.Колонки.Добавить("НаправлениеЭД");
	ТаблицаЭД.Колонки.Добавить("Контрагент");
	ТаблицаЭД.Колонки.Добавить("УникальныйИдентификатор");
	ТаблицаЭД.Колонки.Добавить("ВладелецЭД");
	ТаблицаЭД.Колонки.Добавить("АдресХранилища");
	ТаблицаЭД.Колонки.Добавить("ДвоичныеДанныеПакета");
	ТаблицаЭД.Колонки.Добавить("ПолноеИмяДопФайла");
	ТаблицаЭД.Колонки.Добавить("ИдентификаторДопФайла");
	
	НастройкиОбъектов = Новый Соответствие;
	Для Каждого СсылкаНаОбъект Из МассивСсылокНаОбъект Цикл
		
		НастройкиОбмена = ЭлектронныеДокументыСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаОбъект);
		
		НастройкиОбмена.Вставить("ИдентификаторОрганизации", ЭлектронныеДокументыПереопределяемый.ПолучитьИДКонтрагента(
			НастройкиОбмена.Организация, "Организация"));
		НастройкиОбмена.Вставить("ИдентификаторКонтрагента", ЭлектронныеДокументыПереопределяемый.ПолучитьИДКонтрагента(
			НастройкиОбмена.Контрагент, "Контрагент"));
		
		НастройкиОбмена.Вставить("ПрофильНастроекЭДО", Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.БыстрыйОбмен));
		НастройкиОбмена.Вставить("СоглашениеЭД", "");
		НастройкиОбмена.Вставить("ВерсияФормата", ЭлектронныеДокументыПовтИсп.ВерсияСхемыCML2());
		
		НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
			
			НастройкиОбмена.Вставить("ВидЭД", Документы.РеализацияТоваровУслуг.ПолучитьВидЭдПоУмолчанию(СсылкаНаОбъект.ВидОперации));
			
		КонецЕсли;
		
		Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			НастройкиОбмена.Вставить("ВерсияРегламентаЭДО", Перечисления.ВерсииРегламентаОбмена1С.Версия10);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтруктурОбмена = ЭлектронныеДокументыСлужебный.СформироватьХМЛФайлыДокументов(МассивСсылокНаОбъект,
		НастройкиОбъектов);
		
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
		ПолноеИмяФайла = ЭлектронныеДокументыСлужебный.ПолучитьПолноеИмяФайлаЭД(СтруктураОбмена);
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЭД.Добавить();
		НоваяСтрока.ПолноеИмяФайла = ПолноеИмяФайла;
		СтруктураОбмена.Свойство("ПолноеИмяДопФайла"    , НоваяСтрока.ПолноеИмяДопФайла);
		СтруктураОбмена.Свойство("ИдентификаторДопФайла", НоваяСтрока.ИдентификаторДопФайла);
		
		НоваяСтрока.НаименованиеФайла       = ИмяСохраняемогоФайла(СтруктураОбмена.СтруктураЭД.ВладелецЭД);
		НоваяСтрока.НаправлениеЭД           = СтруктураОбмена.СтруктураЭД.НаправлениеЭД;
		НоваяСтрока.Контрагент              = СтруктураОбмена.СтруктураЭД.Контрагент;
		НоваяСтрока.УникальныйИдентификатор = СтруктураОбмена.СтруктураЭД.ВладелецЭД.УникальныйИдентификатор();
		НоваяСтрока.ВладелецЭД              = СтруктураОбмена.СтруктураЭД.ВладелецЭД;
		
		НоваяСтрока.ДвоичныеДанныеПакета = СформироватьЭДПрисоединенныйФайлПакетаТакском(СтруктураОбмена, СчетаФактурыРеализаций);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТаблицаЭД) Тогда
		Возврат ТаблицаЭД;
	Иначе
		Возврат Неопределено;
		
		ТекстОшибки = НСтр("ru = 'Произошла ошибка при формировании пакета однократной сделки. %1 Подробности см. Журнал Регистрации'");
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Символы.ПС); 
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьЭДПрисоединенныйФайлПакетаТакском(СтруктураОбмена, СчетаФактурыРеализаций) 
	
	СтруктураОбмена.СтруктураЭД.Вставить("ПрофильНастроекЭДО", Новый Структура("СпособОбменаЭД",
		Перечисления.СпособыОбменаЭД.БыстрыйОбмен));
	
	ТекстОшибки = "";
	АдресХранилища = Неопределено;
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог("Send");
	НаименованиеФайла = ИмяСохраняемогоФайла(СтруктураОбмена.СтруктураЭД.ВладелецЭД);
	
	ИмяФайлаПДФ = ЭлектронныеДокументыСлужебный.СформироватьДопДокумент(СтруктураОбмена, Перечисления.ФорматыФайловОбменаЭД.PDF);
	КопироватьФайл(ИмяФайлаПДФ, АдресКаталога + НаименованиеФайла + "pdf");
	
	КопироватьФайл(СтруктураОбмена.ПолноеИмяФайла, АдресКаталога + НаименованиеФайла + "xml");
	
	СтруктураФайловЭД = Новый Структура;
	СтруктураФайловЭД.Вставить("ГлавныйФайл", НаименованиеФайла + "xml");
	СтруктураФайловЭД.Вставить("ФайлДляПросмотра", НаименованиеФайла + "pdf");
	
	ПутьКДопФайлу = "";
	Если СтруктураОбмена.Свойство("ПолноеИмяДопФайла", ПутьКДопФайлу) И ЗначениеЗаполнено(ПутьКДопФайлу) Тогда
		ИмяДопФайла = Строка(СтруктураОбмена.ИдентификаторДопФайла);
		КопироватьФайл(ПутьКДопФайлу, АдресКаталога + ИмяДопФайла + "xml");
		СтруктураФайловЭД.Вставить("ДополнительныйФайл", ИмяДопФайла + "xml");
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("Картинки") И ЗначениеЗаполнено(СтруктураОбмена.Картинки) Тогда
		ПутьКДопФайлу = ПолучитьИмяВременногоФайла();
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СтруктураОбмена.Картинки);
		ДвоичныеДанныеФайла.Записать(ПутьКДопФайлу);
		КопироватьФайл(ПутьКДопФайлу, АдресКаталога + "Additional files" + "zip");
		СтруктураФайловЭД.Вставить("ДополнительныйФайл", "Additional files" + "zip");
	КонецЕсли;
	
	// Формируем meta.xml.
	ЭлектронныеДокументыВнутренний.СформироватьЭДТранспортнойИнформацииТакском(СтруктураОбмена.СтруктураЭД,
		СтруктураФайловЭД, АдресКаталога, ТекстОшибки);
	
	// Формируем card.xml.
	ЭлектронныеДокументыВнутренний.СформироватьЭДКарточкиТакском(СтруктураОбмена.СтруктураЭД, АдресКаталога, ТекстОшибки);
	
	ВладелецЭД = СтруктураОбмена.СтруктураЭД.ВладелецЭД;
	Если ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И СчетаФактурыРеализаций.Получить(ВладелецЭД) <> Неопределено Тогда
		
		ИдСчетаФактуры = Строка(СчетаФактурыРеализаций.Получить(ВладелецЭД).УникальныйИдентификатор());
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(АдресКаталога + "add_data.xml");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Корень");
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСчетаФактуры");
		ЗаписьXML.ЗаписатьТекст(ИдСчетаФактуры);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ЗипКонтейнер = Новый ЗаписьZipФайла();
		ИмяФайлаАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		
		ЗипКонтейнер.Открыть(ИмяФайлаАрхива);
		
		ОбъектыДобавляемыеВАрхив = АдресКаталога + "*";
		ЗипКонтейнер.Добавить(ОбъектыДобавляемыеВАрхив, РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		
		Попытка
			ЗипКонтейнер.Записать();
			ДвоичныеДанныеПакета = Новый ДвоичныеДанные(ИмяФайлаАрхива);
		Исключение
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'Формирование пакета ЭД - однократная сделка'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		КонецПопытки;
	Иначе
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураОбмена.ВидЭД,
			ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	УдалитьФайлы(АдресКаталога);
	
	Возврат ДвоичныеДанныеПакета;
	
КонецФункции

Функция ИмяСохраняемогоФайла(ВладелецЭД)
	
	НаименованиеФайла = "";
	ЭлектронныеДокументыПереопределяемый.ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла);
	Если ЗначениеЗаполнено(ВладелецЭД) И НЕ ЗначениеЗаполнено(НаименованиеФайла) Тогда
		
		Если ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ШаблонФайла = НСтр("ru='Электронный %1 № %2 от %3'");
		Иначе
			ШаблонФайла = НСтр("ru='Электронная %1 № %2 от %3'");
		КонецЕсли;
		
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "Номер, Дата");
		НаименованиеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонФайла,
			НРег(Строка(ТипЗнч(ВладелецЭД))),
			ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтруктураРеквизитов.Номер, Истина),
			Формат(СтруктураРеквизитов.Дата, "ДЛФ=DD"));
		
		НаименованиеФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеФайла);
		
	КонецЕсли;
	
	Возврат НаименованиеФайла;
	
КонецФункции

#КонецЕсли