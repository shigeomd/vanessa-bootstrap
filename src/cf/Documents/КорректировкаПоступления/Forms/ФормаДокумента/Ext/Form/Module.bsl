&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТовары Тогда

		НадоИнициализировать = Ложь;
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если Форма.ПрименяютсяСтавки4и2
			И НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			Форма.УстановитьУсловноеОформлениеТовары();
		КонецЕсли;
	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаУслуги Тогда

		НадоИнициализировать = Ложь;
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если НЕ (Форма.ПрименяетсяУСН ИЛИ Форма.ПлательщикНДФЛ)
			И НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиНУПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если Форма.ПрименяютсяСтавки4и2
			И НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			Форма.УстановитьУсловноеОформлениеУслуги();
		КонецЕсли;

	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаАгентскиеУслуги
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("АгентскиеУслугиПроинициализировано") Тогда
		
		Форма.УстановитьУсловноеОформлениеАгентскиеУслуги();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// ТоварыЦенаВРознице, ТоварыСуммаВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоНТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаВРозницеДоИзменения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоНТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоНТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ТоварыСвернуты", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДСВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоНТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РазделениеПоСтавкамВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Реквизиты ТЧ Товары, используемые только при исправления корректировки

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНадписьДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Реквизиты ТЧ Услуги, используемые только при исправления корректировки

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНадписьДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Реквизиты ТЧ АгентскиеУслуги, используемые только при исправления корректировки

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиНадписьДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// УслугиСчетЗатратНУ, УслугиСубконтоНУ1, УслугиСубконтоНУ2, УслугиСубконтоНУ3

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетЗатратНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ3");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяетсяУСН", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДСДоИзменения, УслугиСтавкаНДСДоИзменения, АгентскиеУслугиСтавкаНДСДоИзменения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСтавкаНДСДоИзменения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЭтоКомиссияПоПродаже", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РозницаВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);


	// УслугиСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);


	// ТоварыСчетУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РозницаВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);


	// УслугиОтражениеВУСН

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиОтражениеВУСН");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяетсяУСН", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименениеУСНДоходы", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыОтражениеВУСН

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыОтражениеВУСН");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяетсяУСН", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименениеУСНДоходы", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"ЭтоНТТ", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"РозницаВПродажныхЦенах", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыКонтрагент, ТоварыДоговорКонтрагента, ТоварыСчетРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВозможнаКомиссияПоЗакупке", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	
	// Субконто БУ и НУ
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	Для Сч = 1 По 3 Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		// ПрочееСубконтоНУ
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.СубконтоНУ" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;
	
	
	// Субконто БУ
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Субконто НУ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоНУ1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоНУ2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоНУ3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("ТоварыОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеТоварыОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("ТоварыПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеТоварыПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыОбщее()

	НастройкиУсловногоОформления.Вставить("ТоварыОбщееПроинициализировано", Истина);


	// При автоматическом отражении в БУ и НУ не доступны для редактирования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаВРозницеДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерГТДДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхожденияДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДСДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	// Определяются из документа-основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаВРознице");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСВРознице");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыОтражениеВУСН");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Товары свернуты

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦена");
	

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТоварыСвернуты", ВидСравненияКомпоновкиДанных.Равно, Истина);


	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.НеРавно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


	// ТоварыСтранаПроисхождения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НомерГТД", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("ТоварыПрименяютсяСтавки4и2Проинициализировано", Истина);


	// ТоварыСтавкаНДСДоИзменения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСДоИзменения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// ТоварыСтавкаНДСДоИзменения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСДоИзменения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));


	// ТоварыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// ТоварыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслуги() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиНУПроинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиНУ();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиОбщее()

	НастройкиУсловногоОформления.Вставить("УслугиОбщееПроинициализировано", Истина);


	// При автоматическом отражении в БУ и НУ не доступны для редактирования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСодержаниеДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДСДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Определяются по данным документа - основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетЗатрат");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто3");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиПодразделениеЗатрат");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиОтражениеВУСН");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// УслугиПодразделениеЗатрат

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиПодразделениеЗатрат");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ПодразделениеЗатратДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.НеРавно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиНУ()

	Если ПрименяетсяУСН ИЛИ ПлательщикНДФЛ Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("УслугиНУПроинициализировано", Истина);


	// УслугиСчетЗатратНУ, УслугиСубконтоНУ1, УслугиСубконтоНУ2, УслугиСубконтоНУ3

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетЗатратНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ1");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ2");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ3");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("УслугиПрименяютсяСтавки4и2Проинициализировано", Истина);


	// УслугиСтавкаНДСДоИзменения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДСДоИзменения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// УслугиСтавкаНДСДоИзменения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДСДоИзменения");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДСДоИзменения", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеАгентскиеУслуги() Экспорт

	НастройкиУсловногоОформления.Вставить("АгентскиеУслугиПроинициализировано", Истина);


	// При автоматическом отражении в БУ и НУ не доступны для редактирования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСодержаниеДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДСДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	// АгентскиеУслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Определяются по данным документа - основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСчетРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АгентскиеУслуги.ЕстьВДокументеПоступления", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректироватьБУиНУ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// АгентскиеУслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	УстановитьТекстСостоянияЭДНаСервере();
	
	ТекущаяДатаДокумента		= Объект.Дата;
	ТекущийВидОперации 			= Объект.ВидОперации;
		
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	УчетВПродажныхЦенах         = СпособОценкиТоваровВРознице= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	ДокументПоступленияСсылка   = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
	
	РеквизитыДокументаПоступления = Неопределено;
	Если ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
		РеквизитыДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступленияСсылка, "Дата");
	КонецЕсли;
	ДатаДокументаПоступления	= ?(РеквизитыДокументаПоступления <> Неопределено, РеквизитыДокументаПоступления.Дата, '00010101');
	ДоступнаКорректировкаБУиНУ  = Документы.КорректировкаПоступления.ДоступнаКорректировкаБУиНУ(Объект.ДокументПоступления);
	
	РеквизитыДоговора			= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВидДоговора, УчетАгентскогоНДС, НДСПоСтавкам4и2");
		
	ВидДоговораДокумента        = РеквизитыДоговора.ВидДоговора;
	УчетАгентскогоНДС			= РеквизитыДоговора.УчетАгентскогоНДС;
	ПрименяютсяСтавки4и2		= РеквизитыДоговора.НДСПоСтавкам4и2;
	
	Если ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
		ВидОперацииПоступления      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступленияСсылка, "ВидОперации");
	КонецЕсли;
	
	ТипСкладаДокумента          = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада");

	ЭтоКомиссияПоПродаже        = ВидДоговораДокумента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		И НЕ ТипЗнч(Объект.ДокументПоступления) = Тип("ДокументСсылка.СчетФактураПолученный");
	ВозможнаКомиссияПоЗакупке	= НЕ ЭтоКомиссияПоПродаже
		И ЗначениеЗаполнено(ДокументПоступленияСсылка)
		И ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг");
	
	ЭтоНТТ                      = ТипСкладаДокумента = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	РозницаВПродажныхЦенах      = НЕ ТипСкладаДокумента = Перечисления.ТипыСкладов.ОптовыйСклад
		И УчетВПродажныхЦенах И НЕ ЭтоКомиссияПоПродаже;
		
	Если ЭтоНТТ И РозницаВПродажныхЦенах И Объект.Товары.Количество() > 0 Тогда
		ТоварыСвернуты	= Истина;
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				ТоварыСвернуты	= Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТоварыСвернуты	= Ложь;
	КонецЕсли;
		
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	
				
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		Иначе
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
		КонецЕсли;
		ИсправлениеКорректировки = Ложь;
	Иначе
		Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		ИсправлениеКорректировки = ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
    КонецЕсли;
	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Для Каждого СтрокаТаблицы из Объект.Товары Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы из Объект.Услуги Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы из Объект.АгентскиеУслуги Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	
	Корректировать = ?(Объект.КорректироватьБУиНУ,1,?(Объект.КорректироватьНДС,0,2));
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Попытаемся найти счет-фактуру
	ТребуетсяСчетФактура = НЕ Корректировать = 2 И НЕ УчетАгентскогоНДС И Не ЭтоКомиссияПоПродаже
		И ВидОперацииПоступления <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
		
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	Если ЗначениеЗаполнено(СчетФактура) Тогда 
		ОшибкиЗаполненияСчетаФактуры();
	КонецЕсли;
	
	ПредставлениеДокумента = Документы.КорректировкаПоступления.ПолучитьПредставлениеДокумента(Объект.Ссылка);		
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьДоступностьСубконто();
	
	ОбновитьИтоги(ЭтаФорма);
	
	// Установим текущую страницу.
	УстановитьТекущуюСтраницуОсновнойПанели();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС       = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПрименяетсяУСН      = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименениеУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	ПлательщикНДФЛ      = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
 	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Установить видимость реквизитов и заголовков колонок.
	Элементы.ГруппаТовары.Видимость = НЕ (ЗначениеЗаполнено(Форма.ДокументПоступленияСсылка)
		И ТипЗнч(Форма.ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов"))
		ИЛИ Объект.Товары.Количество() > 0;
	
	Элементы.ГруппаУслуги.Видимость = НЕ Форма.ЭтоКомиссияПоПродаже ИЛИ Объект.Услуги.Количество() > 0;
	Элементы.ГруппаАгентскиеУслуги.Видимость = Форма.ВозможнаКомиссияПоЗакупке ИЛИ Объект.АгентскиеУслуги.Количество() > 0;
	
	Элементы.ГруппаНомерДата.Видимость = НЕ ЗначениеЗаполнено(Объект.ВидОперации) 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение");
	Элементы.ГруппаНомерДатаДокумента.Видимость = НЕ ЗначениеЗаполнено(Объект.ВидОперации) 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение");
	Элементы.ГруппаНомерДатаИсправления.Видимость = 
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки");
	Элементы.ГруппаДатаНомерПолучения.Видимость = 
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки");
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументПоступления) ИЛИ Объект.ДокументПоступления = Объект.ИсправляемыйДокументПоступления Тогда
		Элементы.ГруппаИсправляемыйДокументПоступления.ТекущаяСтраница = Элементы.ГруппаТотЖеИсправляемыйДокумент;
	Иначе
		Элементы.ГруппаИсправляемыйДокументПоступления.ТекущаяСтраница = Элементы.ГруппаДругойИсправляемыйДокумент;
	КонецЕсли; 
	
	Если Форма.ДоступнаКорректировкаБУиНУ Тогда
		Если Элементы.Корректировать.СписокВыбора.НайтиПоЗначению(1) = Неопределено Тогда
			Элементы.Корректировать.СписокВыбора.Вставить(0, 1, "Во всех разделах учета");
		КонецЕсли;
	Иначе
		ЭлементСписка = Элементы.Корректировать.СписокВыбора.НайтиПоЗначению(1);
		Если НЕ ЭлементСписка = Неопределено Тогда
			Элементы.Корректировать.СписокВыбора.Удалить(ЭлементСписка);
			Если Форма.Корректировать = 1 Тогда
				Форма.Корректировать = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки") Тогда
		Если Элементы.Корректировать.СписокВыбора.НайтиПоЗначению(2) = Неопределено Тогда
			Элементы.Корректировать.СписокВыбора.Добавить(2, "Только в печатной форме");
		КонецЕсли;
	Иначе
		ЭлементСписка = Элементы.Корректировать.СписокВыбора.НайтиПоЗначению(2);
		Если НЕ ЭлементСписка = Неопределено Тогда
			Элементы.Корректировать.СписокВыбора.Удалить(ЭлементСписка);
			Если Форма.Корректировать = 2 Тогда
				Форма.Корректировать = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КорректировочныйСчетФактура =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение");
		
	ИсправлениеКорректировки = 
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки")
		И ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
		
	Если ЗначениеЗаполнено(Объект.ДокументПоступления) 
		И Год(Форма.ДатаДокументаПоступления) < Год(Объект.Дата)
		И Объект.КорректироватьБУиНУ Тогда
		Элементы.ГруппаДоходыИРасходы.ТекущаяСтраница = Элементы.ГруппаПрошлыйГод;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументПоступления) 
		И Месяц(Форма.ДатаДокументаПоступления) < Месяц(Объект.Дата)
		И Объект.Услуги.Количество() > 0
		И Объект.КорректироватьБУиНУ Тогда
		Элементы.ГруппаДоходыИРасходы.ТекущаяСтраница = Элементы.ГруппаПрошлыйМесяцУслуги;
	Иначе
		Элементы.ГруппаДоходыИРасходы.ТекущаяСтраница = Элементы.ГруппаТекущийМесяц;
	КонецЕсли;
	
	Если КорректировочныйСчетФактура Тогда 
		ТекстЗаголовка = НСтр("ru='Корр. счет-фактура:'");
		ТекстКнопки = НСтр("ru='Зарегистрировать корректировочный счет-фактуру'");
		Элементы.НомераСчетаФактуры.ТекущаяСтраница = Элементы.СтраницаНомерСчетаФактуры;
	Иначе
		Если Форма.ИсправлениеКорректировки Тогда
			ТекстЗаголовка = НСтр("ru='Корр. счет-фактура:'");
		Иначе
			ТекстЗаголовка = НСтр("ru='Счет-фактура:'");
		КонецЕсли;
		ТекстКнопки = НСтр("ru='Зарегистрировать исправленный счет-фактуру'");
		Элементы.НомераСчетаФактуры.ТекущаяСтраница = Элементы.СтраницаНомерИсправленияСчетаФактуры;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.СчетФактура) И Форма.ТребуетсяСчетФактура Тогда
		Элементы.ГруппаСчетФактурыСтраницы.ТекущаяСтраница = Элементы.ГруппаЗарегистрироватьСчетФактуру;
	Иначе
		Элементы.ГруппаСчетФактурыСтраницы.ТекущаяСтраница = Элементы.ГруппаСчетФактураСсылка;
	КонецЕсли;
     
	Элементы.ДекорацияСчетФактура1.Заголовок = ТекстЗаголовка;
	Элементы.ДекорацияСчетФактура2.Заголовок = ТекстЗаголовка;

	Элементы.ЗарегистрироватьСчетФактуру.Заголовок = ТекстКнопки; 
	
	Элементы.НадписьСчетФактура.Гиперссылка = Форма.ТребуетсяСчетФактура;
	
	Элементы.ГруппаОтступИтогиСтраницы.ТекущаяСтраница = 
		?((КорректировочныйСчетФактура ИЛИ ИсправлениеКорректировки) И НЕ Форма.РаздельныйУчетНДСНаСчете19,
		Элементы.СтраницаВосстановитьНДС, 
		Элементы.СтраницаИтогиОтступ);
		
	ЗаполнитьСписокВыбораСтавокНДС(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавокНДС(Форма)

	Элементы = Форма.Элементы;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ТоварыСтавкаНДС.СписокВыбора);
	МассивЭлементов.Добавить(Элементы.ТоварыСтавкаНДСДоИзменения.СписокВыбора);
	МассивЭлементов.Добавить(Элементы.УслугиСтавкаНДС.СписокВыбора);
	МассивЭлементов.Добавить(Элементы.УслугиСтавкаНДСДоИзменения.СписокВыбора);
	
	Для Каждого СписокВыбора Из МассивЭлементов Цикл
		
		Если Форма.ПрименяютсяСтавки4и2 Тогда
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"), "4%");
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"), "2%");
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
			
		Иначе
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуру(Форма, РеквизитыСФ = Неопределено)

	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруПолученный(
		Форма, 
		РеквизитыСФ, 
		Форма.ТребуетсяСчетФактура);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()

	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТовары;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Постфикс = "", ЕстьПодразделение, ЭтоТаблица = Ложь)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
								"УслугиСубконто" + Постфикс + "1",
								"УслугиСубконто" + Постфикс + "2",
								"УслугиСубконто" + Постфикс + "3");

	Если ЕстьПодразделение Тогда
		ПоляФормы.Вставить("Подразделение", "ПрочееПодразделениеЗатрат");
	КонецЕсли;

	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, ЭтоТаблица);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, Объект, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация"   , Форма.Объект.Организация);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)

	Если Форма.Элементы.Услуги.ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект.Услуги.НайтиПоИдентификатору(Форма.Элементы.Услуги.ТекущаяСтрока);
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "Субконто%Индекс%");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто%Индекс%", "УслугиСубконто%Индекс%", ПараметрыДокумента);
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоНУ%Индекс%");
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "СубконтоНУ%Индекс%", "УслугиСубконтоНУ%Индекс%", ПараметрыДокумента);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего					= СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоДоИзменения		= СтрокаТаблицы.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоИзменения);
	СтрокаТаблицы.ВсегоДоКорректировки	= СтрокаТаблицы.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки);
	
	Если СтрокаТаблицы.Свойство("СчетУчета") Тогда
		СтрокаТаблицы.СчетУчетаЗабалансовый = 
			ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
			И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета).Забалансовый;
	КонецЕсли;
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, СуммаВключаетНДС)

	СтрокаТаблицы.Всего					= СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоДоИзменения		= СтрокаТаблицы.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоИзменения);
	СтрокаТаблицы.ВсегоДоКорректировки	= СтрокаТаблицы.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки);
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	
	Если СтрокаТаблицы.Свойство("СчетЗатрат") Тогда

	
		СвойстваСчетаБУ	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Индекс = 1 По 3 Цикл
			СтрокаТаблицы["Субконто"   + Индекс + "Доступность"] = (Индекс <= СвойстваСчетаБУ.КоличествоСубконто);
		КонецЦикла;
		СтрокаТаблицы.ПодразделениеЗатратДоступность = СвойстваСчетаБУ.УчетПоПодразделениям;
		
	КонецЕсли;
		
	Если СтрокаТаблицы.Свойство("СчетЗатратНУ") Тогда
		
		СвойстваСчетаНУ	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратНУ);
	
		Для Индекс = 1 По 3 Цикл
			СтрокаТаблицы["СубконтоНУ" + Индекс + "Доступность"] = (Индекс <= СвойстваСчетаНУ.КоличествоСубконто);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, СуммаВключаетНДС)

	СтрокаТаблицы.Всего					= СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	СтрокаТаблицы.ВсегоДоИзменения		= СтрокаТаблицы.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоИзменения);
	СтрокаТаблицы.ВсегоДоКорректировки	= СтрокаТаблицы.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки);

	ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы)
	
	СтрокаТаблицы.НадписьДоКорректировки = НСтр("ru = 'до корректировки:'");
	СтрокаТаблицы.НадписьДоИзменения     =  НСтр("ru = 'до изменения:'");
	СтрокаТаблицы.НадписьПослеИзменения  =  НСтр("ru = 'после изменения:'");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары,Услуги,АгентскиеУслуги", ",");

	СуммаИтогов    = 0;
	СуммаНДСИтогов = 0;

	Для Каждого ТекущаяТабличнаяЧасть Из МассивТабличныхЧастейДляРасчетаИтогов Цикл
		СуммаИтогов    = СуммаИтогов    + Объект[ТекущаяТабличнаяЧасть].Итог("Всего");
		СуммаНДСИтогов = СуммаНДСИтогов + Объект[ТекущаяТабличнаяЧасть].Итог("СуммаНДС");
	КонецЦикла;

	Форма.ИтогиВсего    = СуммаИтогов;
	Форма.ИтогиВсегоНДС = СуммаНДСИтогов;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(Элемент)

	СтрокаТаблицы = Элементы[Элемент.Родитель.Родитель.Имя].ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(Элемент, ИмяТабличнойЧасти)

	СтрокаТаблицы = Элементы[Элемент.Родитель.Родитель.Имя].ТекущиеДанные;
	Если ИмяТабличнойЧасти = "Услуги"
		ИЛИ ИмяТабличнойЧасти = "АгентскиеУслуги" Тогда
		ЗначениеПустогоКоличества = 1;
	Иначе
		ЗначениеПустогоКоличества = 0;
	КонецЕсли;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, ЗначениеПустогоКоличества);

	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2 И ИмяТабличнойЧасти <> "АгентскиеУслуги");
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("СуммаВРознице") Тогда
		СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.Количество * СтрокаТаблицы.ЦенаВРознице;
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(Элемент)

	ИмяТЧ = Элемент.Родитель.Родитель.Имя;
	
	СтрокаТаблицы = Элементы[ИмяТЧ].ТекущиеДанные;

	Если СтрокаТаблицы.Свойство("Количество") Тогда
		Если СтрокаТаблицы.Количество = 0 Тогда
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2 И ИмяТЧ <> "АгентскиеУслуги");
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;

	ДанныеОбъекта.Вставить("ЭтоКомиссия", 
		(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, 
		ДанныеОбъекта, 
		Ложь);
		
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
		СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
		СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
		
		СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.ПрименяютсяСтавки4и2);
	КонецЕсли;
	
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.КорректировкаПоступления,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);

	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;

	ДанныеОбъекта.Вставить("ЭтоКомиссия", 
		(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
		
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура,
		ДанныеОбъекта,
		Ложь);
		
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТабличнойЧасти.Содержание		= СведенияОНоменклатуре.НаименованиеПолное;
		СтрокаТабличнойЧасти.Цена			= СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
		
		СтрокаТабличнойЧасти.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.ПрименяютсяСтавки4и2);
	КонецЕсли;
	
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.КорректировкаПоступления,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Изменения);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетЗатрат, СтрокаТабличнойЧасти, ПоляОбъекта);
		
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
	БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъекта);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура АгентскиеУслугиНоменклатураПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТаблицы.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТаблицы.Цена			= СведенияОНоменклатуре.Цена;
	СтрокаТаблицы.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Функция КомитентПриИзмененииСервер(Знач СтрокаТаблицы, Знач Объект, Знач ИмяТабличнойЧасти, Знач СчетаУчетаКЗаполнению)

	Изменения = Новый Структура;
	
	МассивВидовАгентскихДоговоров = Новый Массив;
	МассивВидовАгентскихДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);

	Если БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		СтрокаТаблицы.ДоговорКонтрагента,
		СтрокаТаблицы.Контрагент, 
		Объект.Организация, 
		МассивВидовАгентскихДоговоров) Тогда
		
		Изменения.Вставить("ДоговорКонтрагента", СтрокаТаблицы.ДоговорКонтрагента);
		
	КонецЕсли;
		
	ИзмененияСчетов = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.КорректировкаПоступления,
		СчетаУчетаКЗаполнению,
		Объект,
		ИмяТабличнойЧасти,
		СтрокаТаблицы);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Изменения, ИзмененияСчетов, Истина);
	
	Возврат Изменения;
	
КонецФункции

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(СчетФактура) И СчетФактура.ДокументыОснования.Количество() > 1 Тогда
		
		ВидСчетаФактурыПоОснованию = УчетНДСПереопределяемый.ОпределитьВидСчетаФактурыПолученногоПоТипуОснования(Объект.Ссылка);
		Если ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыПолученного.НаПоступление
			ИЛИ ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			
			Исправление = Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
			
			Если НЕ СчетФактура.ВидСчетаФактуры = ВидСчетаФактурыПоОснованию
				ИЛИ Исправление <> СчетФактура.Исправление Тогда
				
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				Попытка
					СчетФактураОбъект.Заблокировать();
					СтруктураПоиска = Новый Структура("ДокументОснование", Объект.Ссылка);
					СтрокиСОснованием = СчетФактураОбъект.ДокументыОснования.НайтиСтроки(СтруктураПоиска);
					Для Каждого СтрокаСОснованием Из СтрокиСОснованием Цикл
						СчетФактураОбъект.ДокументыОснования.Удалить(СтрокаСОснованием);
					КонецЦикла; 
					СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					СчетФактура = Неопределено;
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"), СчетФактура);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	
				
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		Иначе
			Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
		КонецЕсли;
		ИсправлениеКорректировки = Ложь;
	Иначе
		Объект.ИсправляемыйДокументПоступления = ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		ИсправлениеКорректировки = ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
    КонецЕсли;
		
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Для Каждого СтрокаТаблицы из Объект.Товары Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы из Объект.Услуги Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы из Объект.АгентскиеУслуги Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Установим текущую страницу.
	УстановитьТекущуюСтраницуОсновнойПанели();
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	Если ЗначениеЗаполнено(СчетФактура) Тогда 
		ОшибкиЗаполненияСчетаФактуры();
	КонецЕсли;
	
	ПараметрыИсправления = Документы.КорректировкаПоступления.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		Объект.ВидОперации, Объект.Дата, Объект.ДокументПоступления);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыИсправления); 
    
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
			Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
				Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета("Организация", Объект));
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()

	УстановитьФункциональныеОпцииФормы();
	
	Если ЗначениеЗаполнено(ДокументПоступленияСсылка) 
		И Год(ДатаДокументаПоступления) < Год(Объект.Дата)
		И Объект.КорректироватьБУиНУ Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(НачатьЗаполнениеСчетовУчета("Дата", Объект));
	
	УправлениеФормой(ЭтаФорма);

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбИсправляемомДокументе(ВыбранноеЗначение, СсылкаНаТекущийДокумент)
	
	СтруктураРезультата = Новый Структура();

	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
	
		СтруктураРезультата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВыбранноеЗначение, "ДокументОснование, ВидСчетаФактуры, ДоговорКонтрагента");
		СтруктураРезультата.Вставить("ВидДоговораКонтрагента", 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРезультата.ДоговорКонтрагента, "ВидДоговора"));
	
	Иначе

	    ДокументСсылка 		= ПолучитьИсправляемыйДокументПоступления(ВыбранноеЗначение, Ложь);
	    ПоследнийДокумент 	= Документы.КорректировкаПоступления.ПолучитьПоследнийКорректирующийДокумент(
	    	ДокументСсылка, СсылкаНаТекущийДокумент);
		
	    РеквизитыВыбранногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	    	ВыбранноеЗначение, "ДоговорКонтрагента, ВалютаДокумента");
	    РасчетыВУсловныхЕдиницахВыбранногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	    	РеквизитыВыбранногоДокумента.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");

		// Запомним сразу как данные и первичного и последнего исправляемого документа.
	    СтруктураРезультата.Вставить("ВыбранныйДокумент", 					ВыбранноеЗначение);
	    СтруктураРезультата.Вставить("ВыбранныйДокументДоговорКонтрагента",	РеквизитыВыбранногоДокумента.ДоговорКонтрагента);
	    СтруктураРезультата.Вставить("ВыбранныйДокументВалюта",				РеквизитыВыбранногоДокумента.ВалютаДокумента);
	    СтруктураРезультата.Вставить("ВыбранныйДокументРасчетыВУЕ",			РасчетыВУсловныхЕдиницахВыбранногоДокумента);
	    
	    СтруктураРезультата.Вставить("ПоследнийДокумент",					ПоследнийДокумент);
	    СтруктураРезультата.Вставить("ПоследнийДокументДоговорКонтрагента",	РеквизитыВыбранногоДокумента.ДоговорКонтрагента);
	    СтруктураРезультата.Вставить("ПоследнийДокументВалюта",				РеквизитыВыбранногоДокумента.ВалютаДокумента);
	    СтруктураРезультата.Вставить("ПоследнийДокументРасчетыВУЕ",			РасчетыВУсловныхЕдиницахВыбранногоДокумента);
	    
	    Если ВыбранноеЗначение <> ПоследнийДокумент Тогда
	    	// Также сразу получим реквизиты последнего исправляемого документа, чтобы
	    	// потом в зависимости от ответа пользователя использовать либо данные выбранного
	    	// либо данные последнего исправляемого документа.
	    	РеквизитыПоследнегоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	    		ПоследнийДокумент, "ДоговорКонтрагента, ВалютаДокумента");
	    	РасчетыВУсловныхЕдиницахПоследнегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	    		РеквизитыПоследнегоДокумента.ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
	    	
	    	СтруктураРезультата.Вставить("ПоследнийДокументДоговорКонтрагента", РеквизитыПоследнегоДокумента.ДоговорКонтрагента);	
	    	СтруктураРезультата.Вставить("ПоследнийДокументВалюта", 			РеквизитыПоследнегоДокумента.ВалютаДокумента);
	    	СтруктураРезультата.Вставить("ПоследнийДокументРасчетыВУЕ", 		РасчетыВУсловныхЕдиницахПоследнегоДокумента);
	    	
	    КонецЕсли;
	    
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИсправляемыйДокументПоступления(ВыбранноеЗначение, Исходный)
	
	Возврат УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ВыбранноеЗначение, Исходный);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументСервер()

	Документы.КорректировкаПоступления.ЗаполнитьПоДокументу(Объект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДокументПоступленияПриИзмененииСервер()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	ОбъектЗначение.ЗаполнитьСвойстваШапки();
	ЗначениеВРеквизитФормы(ОбъектЗначение,"Объект");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ДоступнаКорректировкаБУиНУ  = Документы.КорректировкаПоступления.ДоступнаКорректировкаБУиНУ(Объект.ДокументПоступления);
	ДокументПоступленияСсылка   = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Истина);
	
	Объект.КорректироватьБУиНУ  = ДоступнаКорректировкаБУиНУ;
	Объект.КорректироватьНДС = Истина;
	
	Корректировать = ?(Объект.КорректироватьБУиНУ,1,?(Объект.КорректироватьНДС,0,2));
	
	РеквизитыДоговора			= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВидДоговора, УчетАгентскогоНДС, НДСПоСтавкам4и2");
		
	ВидДоговораДокумента        = РеквизитыДоговора.ВидДоговора;
	УчетАгентскогоНДС			= РеквизитыДоговора.УчетАгентскогоНДС;
	ПрименяютсяСтавки4и2		= РеквизитыДоговора.НДСПоСтавкам4и2;
	
	Если ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
		ВидОперацииПоступления      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступленияСсылка, "ВидОперации");
	КонецЕсли;
		
	ТипСкладаДокумента          = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада");

	ЭтоКомиссияПоПродаже        = ВидДоговораДокумента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		И НЕ ТипЗнч(Объект.ДокументПоступления) = Тип("ДокументСсылка.СчетФактураПолученный");
	ВозможнаКомиссияПоЗакупке	= НЕ ЭтоКомиссияПоПродаже
		И ЗначениеЗаполнено(ДокументПоступленияСсылка)
		И ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг");

	ЭтоНТТ                      = ТипСкладаДокумента = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	РозницаВПродажныхЦенах      = НЕ ТипСкладаДокумента = Перечисления.ТипыСкладов.ОптовыйСклад
		И УчетВПродажныхЦенах И НЕ ЭтоКомиссияПоПродаже;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Для Каждого СтрокаТаблицы из Объект.Товары Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы из Объект.Услуги Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы из Объект.АгентскиеУслуги Цикл
			Если СтрокаТаблицы.ЕстьВДокументеПоступления И СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РеквизитыДокументаПоступления = Неопределено;
	Если ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
		РеквизитыДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступленияСсылка, "Дата");
	КонецЕсли;
	ДатаДокументаПоступления	= ?(РеквизитыДокументаПоступления <> Неопределено, РеквизитыДокументаПоступления.Дата, '00010101');
	
	Если ЗначениеЗаполнено(ДокументПоступленияСсылка) 
		И Год(ДатаДокументаПоступления) < Год(Объект.Дата)
		И Объект.КорректироватьБУиНУ Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовИРасходов) Тогда
			Объект.СтатьяПрочихДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыИсправления = Документы.КорректировкаПоступления.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		Объект.ВидОперации, Объект.Дата, Объект.ДокументПоступления);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыИсправления); 
	
	ИсправлениеКорректировки = 
		Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И ТипЗнч(Объект.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
	
	ТребуетсяСчетФактура = НЕ Корректировать = 2 И НЕ УчетАгентскогоНДС И Не ЭтоКомиссияПоПродаже
		И ВидОперацииПоступления <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;	
		
	УправлениеФормой(ЭтаФорма);

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура УстановитьДокументПоступления(НовыйДокументПоступления)
	
	Объект.ДокументПоступления = НовыйДокументПоступления;
	ДокументПоступленияПриИзмененииСервер();
	Документы.КорректировкаПоступления.ЗаполнитьПоДокументу(Объект);
	
КонецПроцедуры

&НаСервере
Процедура КорректироватьБУиНУПриИзмененииНаСервере()
	
	Объект.КорректироватьБУиНУ = (Корректировать = 1);
	Объект.КорректироватьНДС = (Корректировать <> 2);
	
	ТребуетсяСчетФактура = НЕ Корректировать = 2 И НЕ УчетАгентскогоНДС И Не ЭтоКомиссияПоПродаже
		И ВидОперацииПоступления <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.Дата < Объект.ДатаВходящегоДокумента Тогда 
		Объект.Дата = Объект.ДатаВходящегоДокумента;
	КонецЕсли;
	
	ПриИзмененииДаты();   	

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	Если ТекущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	Иначе
		ТекущийВидОперации = Объект.ВидОперации;
	КонецЕсли;
	
	ВидОперацииПриИзмененииСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредыдущийВидОперации = Объект.ВидОперации;
	
	// Если операция не поменялась то выходим
	Если ПредыдущийВидОперации = ВыбранноеЗначение Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьБУиНУПриИзменении(Элемент)
	
	КорректироватьБУиНУПриИзмененииНаСервере();
	
	Если Корректировать = 1 И ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить документ по основанию?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПерезаполнитьПоОснованиюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Перезаполнение документа'"));
	Иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");

	ЗапуститьПроверкуКонтрагентов(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияПриИзменении(Элемент)
	
	ДокументПоступленияПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетФактуруПоПоступлению()
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда 
		ОшибкиЗаполненияСчетаФактуры();
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		Возврат;
	КонецЕсли;

	РеквизитыИсправляемогоДокумента = СведенияОбИсправляемомДокументе(ВыбранноеЗначение, Объект.Ссылка);

	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		Если (НЕ ЗначениеЗаполнено(РеквизитыИсправляемогоДокумента.ДокументОснование)
			ИЛИ ТипЗнч(РеквизитыИсправляемогоДокумента.ДокументОснование) <> Тип("ДокументСсылка.АвансовыйОтчет")
			ИЛИ РеквизитыИсправляемогоДокумента.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАвансКомитента")
			ИЛИ РеквизитыИсправляемогоДокумента.ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыПолученного.НаАванс")) 
			И НЕ (ТипЗнч(РеквизитыИсправляемогоДокумента.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
						И РеквизитыИсправляемогоДокумента.ВидДоговораКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом")) Тогда
			
			СтандартнаяОбработка = Ложь;
			ТекстСообщения = НСтр("ru = 'В качестве основания можно выбрать только счет-фактуру по поступлению,
										|введенный на основании документа ""Авансовый отчет""!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	Иначе
		
		Если ВыбранноеЗначение <> РеквизитыИсправляемогоДокумента.ПоследнийДокумент Тогда
			СтандартнаяОбработка = Ложь;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПоследнийДокумент", РеквизитыИсправляемогоДокумента.ПоследнийДокумент);
			ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			ТекстВопроса = НСтр("ru = 'Для указанного документа существуют более поздние корректировки.
				|Использовать последнюю введенную корректировку?'");
			Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьПоследнююВведеннуюКорректировкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для каждого СтрокаУслуги Из Объект.Услуги Цикл
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаУслуги.СчетЗатрат, СтрокаУслуги, ПоляОбъекта);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаУслуги.СчетЗатратНУ, СтрокаУслуги, ПоляОбъекта);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ ТОВАРЫ
//

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если Объект.КорректироватьБУиНУ Тогда
		Если СтрокаТаблицы.Номенклатура = Неопределено Тогда
			СтрокаТаблицы.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	Если НоваяСтрока Тогда
		СтрокаТаблицы.ЕстьВДокументеПоступления = Ложь;
		Если Объект.КорректироватьБУиНУ Тогда
			СтрокаТаблицы.КоличествоДоИзменения          = 0;
			СтрокаТаблицы.ЦенаДоИзменения                = 0;
			СтрокаТаблицы.СуммаДоИзменения               = 0;
			СтрокаТаблицы.СуммаНДСДоИзменения            = 0;
			СтрокаТаблицы.СтавкаНДСДоИзменения           = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
			СтрокаТаблицы.НомерГТДДоИзменения            = ПредопределенноеЗначение("Справочник.НомераГТД.ПустаяСсылка");
			СтрокаТаблицы.СтранаПроисхожденияДоИзменения = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
			
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.СуммаВРозницеДоИзменения  = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления И Объект.КорректироватьБУиНУ Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СуммаДоКорректировки, СуммаДоИзменения,
		|СтавкаНДС,
		|СуммаНДС, СуммаНДСДоКорректировки, СуммаНДСДоИзменения,
		|НомерГТД, СтранаПроисхождения,
		|НадписьДоКорректировки, НадписьДоИзменения, НадписьПослеИзменения,
		|ОтражениеВУСН, Всего, ВсегоДоКорректировки, ВсегоДоИзменения, СчетУчетаЗабалансовый");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ДоговорКонтрагента, ТипЦен, СуммаВключаетНДС, ВалютаДокумента, ПрименяютсяСтавки4и2");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.ПрименяютсяСтавки4и2 = ПрименяютсяСтавки4и2;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСДоИзмененияПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.СуммаНДСДоИзменения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоИзменения, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения, ПрименяютсяСтавки4и2));
	СтрокаТаблицы.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоКорректировки, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения, ПрименяютсяСтавки4и2));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена(Элемент, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоДоИзмененияПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 0;
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТаблицы.СуммаДоИзменения = СтрокаТаблицы.ЦенаДоИзменения
		* ?(СтрокаТаблицы.КоличествоДоИзменения = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоИзменения);
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоИзменения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоИзменения, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоДоКорректировкиПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 0;
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТаблицы.СуммаДоКорректировки = СтрокаТаблицы.ЦенаДоКорректировки
		* ?(СтрокаТаблицы.КоличествоДоКорректировки = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоКорректировки);
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоКорректировки, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена(Элемент, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаДоИзмененияПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 0;
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТаблицы.СуммаДоИзменения = СтрокаТаблицы.ЦенаДоИзменения
		* ?(СтрокаТаблицы.КоличествоДоИзменения = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоИзменения);
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоИзменения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоИзменения, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаДоКорректировкиПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 0;
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТаблицы.СуммаДоКорректировки = СтрокаТаблицы.ЦенаДоКорректировки
		* ?(СтрокаТаблицы.КоличествоДоКорректировки = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоКорректировки);
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоКорректировки, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ПриИзмененииСумма(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДоИзмененияПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 0;
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	РасчетноеКоличество = ?(СтрокаТаблицы.КоличествоДоИзменения = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоИзменения);
	Если РасчетноеКоличество = 0 Тогда
		СтрокаТаблицы.ЦенаДоИзменения = 0;
	Иначе
		СтрокаТаблицы.ЦенаДоИзменения = СтрокаТаблицы.СуммаДоИзменения / РасчетноеКоличество;
	КонецЕсли;
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоИзменения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоИзменения, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДоКорректировкиПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 0;
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	РасчетноеКоличество = ?(СтрокаТаблицы.КоличествоДоКорректировки = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоКорректировки);
	Если РасчетноеКоличество = 0 Тогда
		СтрокаТаблицы.ЦенаДоКорректировки = 0;
	Иначе
		СтрокаТаблицы.ЦенаДоКорректировки = СтрокаТаблицы.СуммаДоКорректировки / РасчетноеКоличество;
	КонецЕсли;
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоКорректировки, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.Количество * СтрокаТаблицы.ЦенаВРознице;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКонтрагентПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	ДанныеСтрокаТаблицы = Новый Структура("Контрагент, ДоговорКонтрагента");

	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, СтрокаТаблицы);

	ПараметрыОбъекта = Новый Структура("Организация, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);

	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Товары.Контрагент");
	ПричиныИзменения.Добавить("Товары.ДоговорКонтрагента"); // На сервере договор может измениться
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		ПричиныИзменения,
		Объект,
		СтрокаТаблицы,
		ПараметрыОбъекта,
		ДанныеСтрокаТаблицы);
		
	Изменения = КомитентПриИзмененииСервер(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "Товары", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Изменения);
	
	ЗапуститьПроверкуКонтрагентов(Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДоговорКонтрагентаПриИзменении(Элемент)

	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.ДоговорКонтрагента",
		Объект,
		Элементы.Товары.ТекущиеДанные);
		
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.СчетУчетаЗабалансовый = ЗначениеЗаполнено(ТекущиеДанные.СчетУчета)
		И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчета).Забалансовый;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ УСЛУГИ
//

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередНачаломИзменения(Элемент, Отказ)

	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетЗатрат, "", Истина, Истина);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетЗатратНУ, "НУ", Ложь, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
		СтрокаТаблицы.ЕстьВДокументеПоступления = Ложь;
		Если Объект.КорректироватьБУиНУ Тогда
			СтрокаТаблицы.КоличествоДоИзменения = 0;
			СтрокаТаблицы.ЦенаДоИзменения       = 0;
			СтрокаТаблицы.СуммаДоИзменения      = 0;
			СтрокаТаблицы.СуммаНДСДоИзменения   = 0;
			СтрокаТаблицы.СтавкаНДСДоИзменения  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
			
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления И Объект.КорректироватьБУиНУ Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр(
			"ru = 'Для удаления строки исходного документа необходимо очистить все суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные	= Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Количество,
		|Цена, Сумма, СуммаДоКорректировки, СуммаДоИзменения,
		|СтавкаНДС,
		|СуммаНДС, СуммаНДСДоКорректировки, СуммаНДСДоИзменения,
		|ОтражениеВУСН, ПодразделениеЗатратДоступность,
		|Субконто1Доступность, Субконто2Доступность, Субконто3Доступность,
		|СубконтоНУ1Доступность, СубконтоНУ2Доступность, СубконтоНУ3Доступность,
		|НадписьДоКорректировки, НадписьДоИзменения, НадписьПослеИзменения,
		|Всего, ВсегоДоКорректировки, ВсегоДоИзменения");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ДоговорКонтрагента, ТипЦен, СуммаВключаетНДС, ВалютаДокумента, ПрименяютсяСтавки4и2");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.ПрименяютсяСтавки4и2 = ПрименяютсяСтавки4и2;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Услуги.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена(Элемент, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоДоИзмененияПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	СтрокаТаблицы.СуммаДоИзменения = СтрокаТаблицы.ЦенаДоИзменения
		* ?(СтрокаТаблицы.КоличествоДоИзменения = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоИзменения);
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоИзменения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоИзменения, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоДоКорректировкиПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	СтрокаТаблицы.СуммаДоКорректировки = СтрокаТаблицы.ЦенаДоКорректировки
		* ?(СтрокаТаблицы.КоличествоДоКорректировки = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоКорректировки);
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоКорректировки, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена(Элемент, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаДоИзмененияПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	СтрокаТаблицы.СуммаДоИзменения = СтрокаТаблицы.ЦенаДоИзменения
		* ?(СтрокаТаблицы.КоличествоДоИзменения = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоИзменения);
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоИзменения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоИзменения, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаДоКорректировкиПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	СтрокаТаблицы.СуммаДоКорректировки = СтрокаТаблицы.ЦенаДоКорректировки
		* ?(СтрокаТаблицы.КоличествоДоКорректировки = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоКорректировки);
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоКорректировки, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	ПриИзмененииСумма(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаДоИзмененияПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	РасчетноеКоличество = ?(СтрокаТаблицы.КоличествоДоИзменения = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоИзменения);
	Если РасчетноеКоличество = 0 Тогда
		СтрокаТаблицы.ЦенаДоИзменения = 0;
	Иначе
		СтрокаТаблицы.ЦенаДоИзменения = СтрокаТаблицы.СуммаДоИзменения / РасчетноеКоличество;
	КонецЕсли;
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоИзменения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоИзменения, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаДоКорректировкиПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	РасчетноеКоличество = ?(СтрокаТаблицы.КоличествоДоКорректировки = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоКорректировки);
	Если РасчетноеКоличество = 0 Тогда
		СтрокаТаблицы.ЦенаДоКорректировки = 0;
	Иначе
		СтрокаТаблицы.ЦенаДоКорректировки = СтрокаТаблицы.СуммаДоКорректировки / РасчетноеКоличество;
	КонецЕсли;
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоКорректировки, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСДоИзмененияПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	СтрокаТаблицы.СуммаНДСДоИзменения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоИзменения, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения));
	СтрокаТаблицы.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоКорректировки, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;

	СтрокаТаблицы.СчетЗатратНУ = СтрокаТаблицы.СчетЗатрат;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетЗатрат, "", Истина, Истина);
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетЗатратНУ, "НУ", Ложь, Истина);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "Субконто1", "Субконто2", "Субконто3");

	ПоляОбъекта.Вставить("Подразделение", "ПодразделениеЗатрат");
	ПоляОбъекта.Вставить("Организация"  , Объект.Организация);
	
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"), 
								ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты"));
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"), 
								ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
								БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатрат, СтрокаТаблицы, ПоляОбъекта, Истина, ЗначенияСубконто);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина, ЗначенияСубконто);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);

	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат)
		И ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
		ДанныеСчетаБУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		ДанныеСчетаНУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратНУ);

		Для ИндексБУ = 1 По 3 Цикл
			Для ИндексНУ = 1 По 3 Цикл
				Если ДанныеСчетаБУ["ВидСубконто" + ИндексБУ + "ТипЗначения"] = ДанныеСчетаНУ["ВидСубконто" + ИндексНУ + "ТипЗначения"] Тогда
					СтрокаТаблицы["СубконтоНУ" + ИндексНУ] = СтрокаТаблицы["Субконто" + ИндексБУ];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, СтрокаТаблицы, "Субконто%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", СтрокаТаблицы.СчетЗатрат);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратНУПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;

	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, СтрокаТаблицы.СчетЗатратНУ, "НУ", Ложь, Истина);

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								  "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
								  
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"), 
								ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты"));
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"), 
								ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
								БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы, ПоляОбъекта, Истина, ЗначенияСубконто);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;

	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, СтрокаТаблицы, "СубконтоНУ%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", СтрокаТаблицы.СчетЗатратНУ);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ АГЕНТСКИЕУСЛУГИ
//

&НаКлиенте
Процедура АгентскиеУслугиПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
		СтрокаТаблицы.ЕстьВДокументеПоступления = Ложь;
		Если Объект.КорректироватьБУиНУ Тогда
			СтрокаТаблицы.КоличествоДоИзменения = 0;
			СтрокаТаблицы.ЦенаДоИзменения       = 0;
			СтрокаТаблицы.СуммаДоИзменения      = 0;
			СтрокаТаблицы.СуммаНДСДоИзменения   = 0;
			СтрокаТаблицы.СтавкаНДСДоИзменения  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
			
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления И Объект.КорректироватьБУиНУ Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр(
			"ru = 'Для удаления строки исходного документа необходимо очистить все суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Количество,
		|Цена, Сумма, СуммаДоКорректировки, СуммаДоИзменения,
		|СтавкаНДС,
		|СуммаНДС, СуммаНДСДоКорректировки, СуммаНДСДоИзменения,
		|НадписьДоКорректировки, НадписьДоИзменения, НадписьПослеИзменения,
		|Всего, ВсегоДоКорректировки, ВсегоДоИзменения");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ДоговорКонтрагента, ТипЦен, СуммаВключаетНДС, ВалютаДокумента");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	АгентскиеУслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена(Элемент, "АгентскиеУслуги");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоДоИзмененияПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	СтрокаТаблицы.СуммаДоИзменения = СтрокаТаблицы.ЦенаДоИзменения
		* ?(СтрокаТаблицы.КоличествоДоИзменения = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоИзменения);
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоИзменения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоИзменения, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоДоКорректировкиПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	СтрокаТаблицы.СуммаДоКорректировки = СтрокаТаблицы.ЦенаДоКорректировки
		* ?(СтрокаТаблицы.КоличествоДоКорректировки = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоКорректировки);
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоКорректировки, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаПриИзменении(Элемент)

	ПриИзмененииКоличествоЦена(Элемент, "АгентскиеУслуги");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаДоИзмененияПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	СтрокаТаблицы.СуммаДоИзменения = СтрокаТаблицы.ЦенаДоИзменения
		* ?(СтрокаТаблицы.КоличествоДоИзменения = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоИзменения);
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоИзменения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоИзменения, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаДоКорректировкиПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	СтрокаТаблицы.СуммаДоКорректировки = СтрокаТаблицы.ЦенаДоКорректировки
		* ?(СтрокаТаблицы.КоличествоДоКорректировки = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоКорректировки);
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоКорректировки, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаПриИзменении(Элемент)

	ПриИзмененииСумма(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаДоИзмененияПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	РасчетноеКоличество = ?(СтрокаТаблицы.КоличествоДоИзменения = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоИзменения);
	Если РасчетноеКоличество = 0 Тогда
		СтрокаТаблицы.ЦенаДоИзменения = 0;
	Иначе
		СтрокаТаблицы.ЦенаДоИзменения = СтрокаТаблицы.СуммаДоИзменения / РасчетноеКоличество;
	КонецЕсли;
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоИзменения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоИзменения, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаДоКорректировкиПриИзменении(Элемент)
	
	ЗначениеПустогоКоличества = 1;
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	РасчетноеКоличество = ?(СтрокаТаблицы.КоличествоДоКорректировки = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.КоличествоДоКорректировки);
	Если РасчетноеКоличество = 0 Тогда
		СтрокаТаблицы.ЦенаДоКорректировки = 0;
	Иначе
		СтрокаТаблицы.ЦенаДоКорректировки = СтрокаТаблицы.СуммаДоКорректировки / РасчетноеКоличество;
	КонецЕсли;
	СтавкаНДС = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки"),
		СтрокаТаблицы.СтавкаНДСДоИзменения, СтрокаТаблицы.СтавкаНДС);
	СтрокаТаблицы.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоКорректировки, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСтавкаНДСПриИзменении(Элемент)

	ПриИзмененииСтавкаНДС(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСтавкаНДСДоИзмененияПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;
	СтрокаТаблицы.СуммаНДСДоИзменения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоИзменения, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения));
	СтрокаТаблицы.СуммаНДСДоКорректировки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.СуммаДоКорректировки, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения));
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКонтрагентПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.АгентскиеУслуги.ТекущиеДанные;

	ДанныеСтрокаТаблицы = Новый Структура("Контрагент, ДоговорКонтрагента");

	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, СтрокаТаблицы);

	ПараметрыОбъекта = Новый Структура("Организация, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);

	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("АгентскиеУслуги.Контрагент");
	ПричиныИзменения.Добавить("АгентскиеУслуги.ДоговорКонтрагента"); // На сервере договор может измениться
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		ПричиныИзменения,
		Объект,
		СтрокаТаблицы,
		ПараметрыОбъекта,
		ДанныеСтрокаТаблицы);
		
	Изменения = КомитентПриИзмененииСервер(ДанныеСтрокаТаблицы, ПараметрыОбъекта, "АгентскиеУслуги", ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Изменения);
	
	ЗапуститьПроверкуКонтрагентов(Элементы.АгентскиеУслуги);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиДоговорКонтрагентаПриИзменении(Элемент)

	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"АгентскиеУслуги.ДоговорКонтрагента",
		Объект,
		Элементы.АгентскиеУслуги.ТекущиеДанные);
		
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		
		Если ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
			ДокументСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
			ДокументОснование = Документы.КорректировкаПоступления.ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка, Объект.Ссылка);
			
			Объект.КорректироватьБУиНУ  = ДоступнаКорректировкаБУиНУ;
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				РеквизитыДокументаПоступления 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументПоступления, "Дата");
				РеквизитыДокументаОснования		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Дата");
			
				Если Объект.ДокументПоступления <> ДокументОснование 
					И РеквизитыДокументаПоступления.Дата < РеквизитыДокументаОснования.Дата Тогда
					ПоследнийДокументИсправления = ДокументОснование;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
	СписокТабличныхЧастей.Добавить("АгентскиеУслуги", "АгентскиеУслуги");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление(); // Вызываем после установки текущей страницы.
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ЗначениеЗаполнено(ПоследнийДокументИсправления) Тогда
		ТекстВопроса = НСтр("ru = 'Для указанного документа существуют более поздние корректировки.
								|Использовать последнюю введенную корректировку?'");
		Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьПоследнююКорректировкуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриОткрытии();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураПолученныйКорректировочный"
			И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		СчетФактура = Источник;
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		Если ЗначениеЗаполнено(СчетФактура) Тогда 
			ОшибкиЗаполненияСчетаФактуры();
		КонецЕсли;
    ИначеЕсли ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеКорректировкаПоступления";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьДату = Ложь;
	
	ПроверитьРеквизитыСчетаФактуры(Отказ);
	
  	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма")
		И ВладелецФормы.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка" Тогда
		ОповеститьОбИзменении(СчетФактура);
	КонецЕсли;
	
	Если КонтрагентыВСчетеФактуреИзменилисьПослеЗаписи Тогда
		ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактура);
	КонецЕсли;
	
	Оповестить("Запись_КорректировкаПоступления", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьДоступностьСубконто();
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда 
		ОшибкиЗаполненияСчетаФактуры();
	КонецЕсли;

	УстановитьТекстСостоянияЭДНаСервере();
	
	ПредставлениеДокумента = Документы.КорректировкаПоступления.ПолучитьПредставлениеДокумента(Объект.Ссылка);		
	УстановитьЗаголовокФормы(ЭтаФорма, ПредставлениеДокумента);
	
	ЗарегистрироватьСчетФактуруНаСервере();
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
		
	УстановитьСостояниеДокумента();
	
	ПроверкаКонтрагентов.ОпределитьНаличиеИзмененияВСчетеФактуре(ЭтотОбъект, СчетФактура);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовВХранилище(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПроверкаКонтрагентов.ПередЗаписьюНаСервере(ЭтотОбъект, СчетФактура);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	Отказ = Не ВозможностьСозданияСчетаФактуры(Объект.ДокументПоступления);
	
	Если Отказ Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки") Тогда
			ТекстСообщения = НСтр("ru = 'Перед добавлением исправления счета-фактуры создайте счет-фактуру у документа-основания'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у документа-основания'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДокументПоступления", "Объект");
		
		Возврат;
		
	КонецЕсли;
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруПолученный(ЭтаФорма, Ложь, Истина);
	Если РеквизитыСФ <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
		УстановитьОписаниеСчетаФактурыНаСервере();
	КонецЕсли;
	
	ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактура);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеСчетаФактурыНаСервере()
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаФактурыПолученногоПриИзменении(Элемент)
	ДатаСчетаФактурыПолученного = Объект.Дата;
КонецПроцедуры

&НаСервере
Функция ВозможностьСозданияСчетаФактуры(ДокументПоступления)
	
	ПодчиненныйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(ДокументПоступления);
	
	Если ПодчиненныйСчетФактура <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОшибкиЗаполненияСчетаФактуры()
	
	РеквизитыСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура, "ПометкаУдаления, НомерВходящегоДокумента, ДатаВходящегоДокумента");
	ОшибкаЗаполненияРеквизитовСФ = НЕ РеквизитыСФ.ПометкаУдаления 
		И НЕ ЗначениеЗаполнено(РеквизитыСФ.НомерВходящегоДокумента) 
		И НЕ ЗначениеЗаполнено(РеквизитыСФ.ДатаВходящегоДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияПриИзмененииКлиент()

	ДокументПоступленияПриИзмененииСервер();
	
	Если ЗначениеЗаполнено(Объект.ДокументПоступления) И Объект.КорректироватьБУиНУ Тогда
		Если Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 ИЛИ Объект.АгентскиеУслуги.Количество() > 0 Тогда 
			ТекстВопроса = НСтр("ru = 'Заполнить документ по основанию?'");
			Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоОснованиюЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Заполнить документ'"));
		Иначе
			ЗаполнитьДокументСервер();
			ОбновитьСчетФактуруПоПоступлению();
		КонецЕсли;
	Иначе
		ОбновитьСчетФактуруПоПоступлению();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросИспользоватьПоследнююКорректировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьДокументПоступления(ПоследнийДокументИсправления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерезаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДокументСервер();
	Иначе
		Объект.КорректироватьБУиНУ = Ложь;
		Корректировать = 0;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДокументСервер();
	Иначе
		Объект.КорректироватьБУиНУ = Ложь;
	КонецЕсли;
	ОбновитьСчетФактуруПоПоступлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИспользоватьПоследнююВведеннуюКорректировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДокументПоступления = ДополнительныеПараметры.ПоследнийДокумент;
	Иначе
		Объект.ДокументПоступления = ДополнительныеПараметры.ВыбранноеЗначение;
	КонецЕсли;
	
	ДокументПоступленияПриИзмененииКлиент();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ
//

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаВходящегоДокумента;
	ПриИзмененииДаты();
	
	ЗапуститьПроверкуКонтрагентов(Объект.ДатаВходящегоДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсправленияПриИзменении(Элемент)
	
	Объект.Дата = Объект.ДатаИсправления;
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПолученияПриИзменении(Элемент)
	
	Если Объект.Дата < Объект.ДатаИсправления Тогда 
		Объект.Дата = Объект.ДатаИсправления;
	КонецЕсли;
	
	ПриИзмененииДаты();   	

КонецПроцедуры  

&НаКлиенте
Процедура ПроверитьРеквизитыСчетаФактуры(Отказ)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки") Тогда
		
		ТекстНеЗаполненНомер = НСтр("ru = 'Номер исправления'"); 
		ТекстНеЗаполненаДата = НСтр("ru = 'Дата исправления'");
		
		Если НЕ ЗначениеЗаполнено(НомерИсправления) 
			И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", ТекстНеЗаполненНомер);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НомерИсправления",, Отказ);
			
		КонецЕсли;
		
		ПроверятьДату = ЗначениеЗаполнено(НомерИсправления);
			
	Иначе
		
		ТекстНеЗаполненНомер = НСтр("ru = 'Номер корректировочного счета-фактуры'"); 
		ТекстНеЗаполненаДата = НСтр("ru = 'Дата корректировочного счета-фактуры'"); 
		
		Если НЕ ЗначениеЗаполнено(НомерСчетаФактурыПолученного) 
			И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", ТекстНеЗаполненНомер);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НомерСчетаФактурыПолученного",, Отказ);
			
		КонецЕсли;
		
		ПроверятьДату = ЗначениеЗаполнено(НомерСчетаФактурыПолученного);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) И ПроверятьДату Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", ТекстНеЗаполненаДата);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДатаСчетаФактурыПолученного",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьСчетФактуруНаСервере()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
		И ЗначениеЗаполнено(НомерСчетаФактурыПолученного)
		И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) 
		И ВозможностьСозданияСчетаФактуры(Объект.ДокументПоступления) Тогда
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(Объект.Ссылка, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного);
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Результат);
		Если ЗначениеЗаполнено(СчетФактура) Тогда 
			ОшибкиЗаполненияСчетаФактуры();
		КонецЕсли;
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И ЗначениеЗаполнено(НомерИсправления)
		И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) 
		И ВозможностьСозданияСчетаФактуры(Объект.ДокументПоступления) Тогда	
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(Объект.Ссылка, НомерИсправления, ДатаСчетаФактурыПолученного);
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Результат);
		Если ЗначениеЗаполнено(СчетФактура) Тогда 
			ОшибкиЗаполненияСчетаФактуры();
		КонецЕсли;
		УправлениеФормой(ЭтаФорма);
		
	Иначе
		
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Объект.Ссылка);
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
		Если ЗначениеЗаполнено(СчетФактура) Тогда 
			ОшибкиЗаполненияСчетаФактуры();
		КонецЕсли;
	   	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(СчетФактура) И ОшибкаЗаполненияРеквизитовСФ Тогда
		
		ТекстСообщения = НСтр("ru = 'Заполните номер и дату корректировочного счета-фактуры'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НадписьСчетФактура");
		Отказ = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерИсправленияПриИзменении(Элемент)
	ДатаСчетаФактурыПолученного = Объект.Дата;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДаты()

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма, СтруктураПредставленияДокумента)
	
	Форма.Заголовок = СтруктураПредставленияДокумента.ПредставлениеДокумента;
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтотОбъект);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтотОбъект, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтотОбъект, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтотОбъект, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"КорректировкаПоступления",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Товары.Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
	КонецЕсли;

	// Товары.ЕстьВДокументеПоступления
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ЕстьВДокументеПоступления") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "АгентскиеУслуги.СчетРасчетов");
	КонецЕсли;

	// Склад
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
	КонецЕсли;

	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
	КонецЕсли;

	// Товары.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетРасчетов");
	КонецЕсли;

	// Услуги.ЕстьВДокументеПоступления
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.ЕстьВДокументеПоступления") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
	КонецЕсли;

	// Услуги.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СпособУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
	КонецЕсли;

	// Услуги.СчетЗатрат
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетЗатрат") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.ПодразделениеЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СчетЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
	КонецЕсли;

	// Услуги.СчетЗатратНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетЗатратНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
	КонецЕсли;

	// Услуги.Субконто1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Субконто1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ1");
	КонецЕсли;

	// Услуги.Субконто2
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Субконто2") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ2");
	КонецЕсли;

	// Услуги.Субконто3
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Субконто3") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Услуги.СубконтоНУ3");
	КонецЕсли;

	// АгентскиеУслуги.ЕстьВДокументеПоступления
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.ЕстьВДокументеПоступления") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "АгентскиеУслуги.СчетРасчетов");
	КонецЕсли;

	// АгентскиеУслуги.Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "АгентскиеУслуги.СчетРасчетов");
	КонецЕсли;

	// АгентскиеУслуги.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "АгентскиеУслуги.СчетРасчетов");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Товары.Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// Товары.ЕстьВДокументеПоступления
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ЕстьВДокументеПоступления") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// Склад
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Склад") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
		КонецЕсли;

		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
		КонецЕсли;

		// Товары.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

		// Услуги.ЕстьВДокументеПоступления
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.ЕстьВДокументеПоступления") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
		КонецЕсли;

		// Услуги.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
		КонецЕсли;

		// Услуги.СчетЗатрат
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетЗатрат") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
		КонецЕсли;

		// Услуги.СчетЗатратНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.СчетЗатратНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
		КонецЕсли;

		// Услуги.Субконто1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Субконто1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Услуги.Субконто2
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Субконто2") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// Услуги.Субконто3
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Услуги.Субконто3") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоНУ3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Склад");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// АгентскиеУслуги.ЕстьВДокументеПоступления
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.ЕстьВДокументеПоступления") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// АгентскиеУслуги.Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// АгентскиеУслуги.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("АгентскиеУслуги.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетРасчетов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ЕстьВДокументеПоступления");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Контрагент");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСпособУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСчетРасчетов");
	ЭлементыСчетов.Добавить("УслугиСчетЗатрат");
	ЭлементыСчетов.Добавить("УслугиПодразделениеЗатрат");
	ЭлементыСчетов.Добавить("УслугиСубконто1");
	ЭлементыСчетов.Добавить("УслугиСубконто2");
	ЭлементыСчетов.Добавить("УслугиСубконто3");
	ЭлементыСчетов.Добавить("УслугиСчетЗатратНУ");
	ЭлементыСчетов.Добавить("УслугиСубконтоНУ1");
	ЭлементыСчетов.Добавить("УслугиСубконтоНУ2");
	ЭлементыСчетов.Добавить("УслугиСубконтоНУ3");
	ЭлементыСчетов.Добавить("УслугиСчетУчетаНДС");
	ЭлементыСчетов.Добавить("УслугиСпособУчетаНДС");
	ЭлементыСчетов.Добавить("АгентскиеУслугиСчетРасчетов");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти
