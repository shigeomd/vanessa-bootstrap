#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ВсеПодчиненныеСчетаФактуры; // Структура таблиц счетов-фактур (по каждой табличной части), основанием которых является этот документ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	ЗаполнятьПоОснованию = ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные());
	Если ЗаполнятьПоОснованию Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		СуммаВключаетНДС = Истина;
		УдержатьВознаграждение = Истина;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	Если ЗаполнятьПоОснованию
		И ДокументБезНДС
		И Товары.Итог("СуммаНДС") <> 0 Тогда
		ДокументБезНДС = Ложь;
	КонецЕсли;
	
	// Специфические для конкретного документа действия
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(, Ложь, ЭтотОбъект);
	КонецЕсли;

	ВыписыватьСчетаФактурыСводно = Дата >= '20150101';
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	
	НомерВходящегоДокумента = "";
	ДатаВходящегоДокумента  = '00010101';

	Для Каждого СтрокаТЧ Из Возвраты Цикл
		СтрокаТЧ.ВыставленСФ	= Ложь;
		СтрокаТЧ.ДатаСФ 		= '00010101';
		СтрокаТЧ.НомерСФ 		= "";
		СтрокаТЧ.СчетФактура	= Документы.СчетФактураПолученный.ПустаяСсылка();
	КонецЦикла;
		
	Если НЕ Дата=НачалоДня(ОбъектКопирования.Дата) Тогда
		// Заполняем значениями по умолчанию (заполняются только пустые реквизиты):
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект);
		// Заполняем реквизиты, специфичные для данного документа:
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(, Ложь, ЭтотОбъект);
	КонецЕсли;

	// Очищаем (перезаполняем) реквизиты, которые не могут быть скопированы:
	Ответственный = Пользователи.ТекущийПользователь();
	ЗачетАвансов.Очистить();
	
	Для каждого СтрокаТЧ Из Покупатели Цикл
		СтрокаТЧ.ВыставленСФ = Ложь;
		СтрокаТЧ.СчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЦикла;
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	ВыписыватьСчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И Дата >= '20150101';
	
КонецПроцедуры

Функция СуммаВознагражденияПоДокументу()

	Возврат Товары.Итог("СуммаВознаграждения")
			- ТоварыВозвращенные.Итог("СуммаВознаграждения")
			+ Услуги.Итог("СуммаВознаграждения")
			+ ?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДСВознаграждения")
			- ТоварыВозвращенные.Итог("СуммаНДСВознаграждения")
			+ Услуги.Итог("СуммаНДСВознаграждения"));

КонецФункции 

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ПлательщикНДФЛ	= УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	ПрименяетсяУСН	= УчетнаяПолитика.ПрименяетсяУСН(Организация, Дата);
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если НЕ РаздельныйУчетНДСНаСчете19 
		ИЛИ СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.БезНДС Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СпособУчетаНДС");
					
	КонецЕсли;
	

	// В формах документа счет расчетов и счет авансов редактируются в специальной форме.
	// В случае, если они не заполнены, покажем сообщение возле соответствующей гиперссылки.

	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоАвансамПолученным");
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовЗаПосредническиеУслуги");
	МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоАвансамВыданным");

	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Счет расчетов за товары'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,
			"ПорядокУчетаРасчетов", Отказ);
	КонецЕсли;
		
	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда 
		Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансамПолученным) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,
				НСтр("ru = 'Счет расчетов по авансам полученным'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,
				"ПорядокУчетаРасчетов", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовЗаПосредническиеУслуги) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Счет расчетов за посреднические услуги'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,
			"ПорядокУчетаРасчетов", Отказ);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоАвансамВыданным) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,
			НСтр("ru = 'Счет расчетов по авансам выданным'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,
			"ПорядокУчетаРасчетов", Отказ);
	КонецЕсли;

	Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПроцентКомиссионногоВознаграждения");
	КонецЕсли;
	
	Если Товары.Итог("СуммаВознаграждения") = 0 И Услуги.Итог("СуммаВознаграждения") = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаЗатрат");
	КонецЕсли;

	Если НЕ УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Дата) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДенежныеСредства.Покупатель");
		МассивНепроверяемыхРеквизитов.Добавить("ДенежныеСредства.ДатаСобытия");
	КонецЕсли;	
	
	// Нижеперечисленные реквизиты будут проверяться по условиям:
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СтранаПроисхождения");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетУчетаНДСПоРеализации");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетДоходов");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Субконто");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СчетРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("Покупатели.ДатаСФ");
	МассивНепроверяемыхРеквизитов.Добавить("ТоварыВозвращенные.СтранаПроисхождения");
	МассивНепроверяемыхРеквизитов.Добавить("ТоварыВозвращенные.СчетУчетаНДСПоРеализации");
	МассивНепроверяемыхРеквизитов.Добавить("ТоварыВозвращенные.СчетДоходов");
	МассивНепроверяемыхРеквизитов.Добавить("ТоварыВозвращенные.Субконто");
	МассивНепроверяемыхРеквизитов.Добавить("ТоварыВозвращенные.СчетРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("Возвраты.ДатаСФ");
	МассивНепроверяемыхРеквизитов.Добавить("Возвраты.НомерСФ");
	МассивНепроверяемыхРеквизитов.Добавить("ТоварыВозвращенные.СпособУчетаНДС");
	МассивНепроверяемыхРеквизитов.Добавить("ТоварыВозвращенные.Себестоимость");
	
	// Корректность заполнения табличной части "Покупатели":
	Для каждого СтрокаТаблицы Из Покупатели Цикл

		Префикс = "Покупатели[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Покупатели'");

		Если СтрокаТаблицы.ВыставленСФ И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Дата СФ'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "ДатаСФ";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Корректность заполнения табличной части "Товары":
	Для каждого СтрокаТаблицы Из Товары Цикл

		Префикс = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Товары'");

		Если СтрокаТаблицы.СуммаНДС <> 0
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПоРеализации)
			И НЕ СтрокаТаблицы.СчетУчета.Забалансовый Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Счет учета НДС по реализации'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СчетУчетаНДСПоРеализации";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов)
			И НЕ СтрокаТаблицы.СчетУчета.Забалансовый Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Счет доходов'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СчетДоходов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов)
			И НЕ СтрокаТаблицы.СчетУчета.Забалансовый Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Счет расходов'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СчетРасходов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;	

		// Проверка Страны происхождения
		Если УчетТоваров.НеУказанаСтранаПроисхождения(СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Страна происхождения'"),
				СтрокаТаблицы.НомерСтроки, ИмяСписка);
			Поле = Префикс + "СтранаПроисхождения";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

		// Проверка на соответствие видов деятельности
		Если НЕ ЗаполнениеДокументов.ВидыДеятельностиСовпадают(СтрокаТаблицы.СчетДоходов, СтрокаТаблицы.СчетРасходов) Тогда
			ТекстСообщения = НСтр("ru = 'Счета доходов и расходов для бухгалтерского учета относятся к разным видам деятельности.'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
				НСтр("ru = 'Счет доходов'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СчетДоходов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

	КонецЦикла;
	
	// Корректность заполнения табличной части "Возвраты":
	Для каждого СтрокаТаблицы Из Возвраты Цикл

		Префикс = "Возвраты[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Возвраты'");

		Если СтрокаТаблицы.ВыставленСФ И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Дата СФ'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "ДатаСФ";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		

		Если СтрокаТаблицы.ВыставленСФ И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерСФ) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Номер СФ'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "НомерСФ";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ Ссылка.Пустая() И СтрокаТаблицы.Сделка = Ссылка Тогда
		
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
				НСтр("ru = 'Документ реализации'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "Сделка";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		
		КонецЕсли; 
		
		Если СтрокаТаблицы.Сделка.Пустая() Тогда
		
			ВозвращенныеТоварыБезСделки = ТоварыВозвращенные.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));
			
			Для каждого СтрокаТовараБезСделки Из ВозвращенныеТоварыБезСделки Цикл
				Префикс = "ТоварыВозвращенные[" + Формат(СтрокаТовараБезСделки.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				ИмяСписка = НСтр("ru = 'Товары возвращенные'");
			
				Если СтрокаТовараБезСделки.Себестоимость = 0 Тогда
				
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
						НСтр("ru = 'Себестоимость'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
					Поле = Префикс + "Себестоимость";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
				КонецЕсли; 
				
				Если ПрименяетсяУСН И НЕ ЗначениеЗаполнено(СтрокаТовараБезСделки.ОтражениеВУСН) Тогда
				
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
						НСтр("ru = 'Отражение в УСН'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
					Поле = Префикс + "ОтражениеВУСН";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
				КонецЕсли; 
				
			КонецЦикла; 
		
		КонецЕсли; 
		
	КонецЦикла;
	
	// Корректность заполнения табличной части "Товары возвращенные":
	Для каждого СтрокаТаблицы Из ТоварыВозвращенные Цикл

		Префикс = "ТоварыВозвращенные[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Товары возвращенные'");

		Если СтрокаТаблицы.СуммаНДС <> 0
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПоРеализации)
			И НЕ СтрокаТаблицы.СчетУчета.Забалансовый Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Счет учета НДС по реализации'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СчетУчетаНДСПоРеализации";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если РаздельныйУчетНДСНаСчете19 
			И СтрокаТаблицы.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС  
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
		
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Способ учета НДС по реализации'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СпособУчетаНДС";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов)
			И НЕ СтрокаТаблицы.СчетУчета.Забалансовый Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Счет доходов'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СчетДоходов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов)
			И НЕ СтрокаТаблицы.СчетУчета.Забалансовый Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Счет расходов'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СчетРасходов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;	

		// Проверка Страны происхождения
		Если УчетТоваров.НеУказанаСтранаПроисхождения(СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Страна происхождения'"),
				СтрокаТаблицы.НомерСтроки, ИмяСписка);
			Поле = Префикс + "СтранаПроисхождения";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

		// Проверка на соответствие видов деятельности
		Если НЕ ЗаполнениеДокументов.ВидыДеятельностиСовпадают(СтрокаТаблицы.СчетДоходов, СтрокаТаблицы.СчетРасходов) Тогда
			ТекстСообщения = НСтр("ru = 'Счета доходов и расходов для бухгалтерского учета относятся к разным видам деятельности.'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
				НСтр("ru = 'Счет доходов'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СчетДоходов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;

	КонецЦикла;
	
	
	Если ПлательщикНДФЛ Тогда
		
		УчетДоходовИРасходовПредпринимателя.ПроверитьЗаполнениеСубконтоНоменклатурныеГруппы(
			ЭтотОбъект, "СчетДоходов", "Субконто", НСтр("ru = 'Субконто'"), "Товары", НСтр("ru = 'Товары'"), Отказ);
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Услуги.СуммаНДС");
	МассивНепроверяемыхРеквизитов.Добавить("Услуги.СчетУчетаНДСПоРеализации");
	МассивНепроверяемыхРеквизитов.Добавить("Услуги.Субконто");

	// Корректность заполнения табличной части "Услуги":
	Для каждого СтрокаТаблицы Из Услуги Цикл

		Префикс = "Услуги[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Услуги'");

		Если СтрокаТаблицы.СуммаНДС <> 0
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПоРеализации) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение",
				НСтр("ru = 'Счет учета НДС по реализации'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СчетУчетаНДСПоРеализации";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		// Проверка на соответствие видов деятельности
		Если НЕ ЗаполнениеДокументов.ВидыДеятельностиСовпадают(СтрокаТаблицы.СчетДоходов, СтрокаТаблицы.СчетРасходов) Тогда
			ТекстСообщения = НСтр("ru = 'Счета доходов и расходов для бухгалтерского учета относятся к разным видам деятельности.'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
				НСтр("ru = 'Счет доходов'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
			Поле = Префикс + "СчетДоходов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если ПлательщикНДФЛ Тогда
		
		УчетДоходовИРасходовПредпринимателя.ПроверитьЗаполнениеСубконтоНоменклатурныеГруппы(
			ЭтотОбъект, "СчетДоходов", "Субконто", НСтр("ru = 'Субконто'"), "Услуги", НСтр("ru = 'Услуги'"), Отказ);
		
	КонецЕсли;
	
	// Табличная часть "Зачет авансов"
	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	ИначеЕсли ЗачетАвансов.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки с документом аванса!'");
		Поле = "ПорядокУчетаРасчетов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , Поле, Отказ);
	КонецЕсли;
	
	Если СуммаВознагражденияПоДокументу() < 0 Тогда
	
			ТекстСообщения = НСтр("ru = 'Сумма вознаграждения по документу не может быть отрицательной.'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность",
				НСтр("ru = 'Сумма вознаграждения'"), , , ТекстСообщения);
			Поле = "ИтогВсегоВознаграждение";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
	
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата) Тогда
		НДСВключенВСтоимость = Ложь;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента      = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") 
						+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги") 
						- УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ТоварыВозвращенные");
	СуммаВознаграждения = СуммаВознагражденияПоДокументу();
	
	УчетНДСПереопределяемый.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
	СформироватьСчетаФактуры(Отказ); 
	
	Документы.КорректировкаПоступления.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		УчетНДСПереопределяемый.СинхронизироватьРеквизитыСчетаФактурыПолученного(ЭтотОбъект);
		ОбновитьСчетаФактуры(РежимЗаписиДокумента.Запись); 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ОтчетКомиссионераОПродажах.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ДАННЫХ ВОЗВРАТЫ
	
	// Таблица возвращаемых товаров с указанием партии возврата
	ТаблицаСписанныеТоварыВозврат = Документы.ОтчетКомиссионераОПродажах.ПодготовитьТаблицуСписанныеТоварыОтПокупателя(
		ПараметрыПроведения.ВозвратыТоваровТаблицаТовары, ПараметрыПроведения.ВозвратыТоваровСчетаУчета,
		ПараметрыПроведения.ВозвратыТоваровНоменклатура, ПараметрыПроведения.ВозвратыТоваровРеквизиты,
		Отказ);
		
	// Таблица взаиморасчетов с учетом зачета авансов по возвращенным товарам
	ТаблицаВзаиморасчетыВозврат = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовНаВозвратТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовНаВозвратТаблицаАвансов,
		ПараметрыПроведения.ЗачетАвансовНаВозвратРеквизиты, Отказ);
	
	// Таблицы выручки от реализации возвращенных товаров: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализацияВозврат = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализацииВозвратКомиссионеру(
		ПараметрыПроведения.ВозвратыТоваровТаблицаДокумента, ТаблицаВзаиморасчетыВозврат, ТаблицаСписанныеТоварыВозврат,
		ПараметрыПроведения.ВозвратыТоваровРеквизиты, Отказ);
		
	// Таблицы УСН
	СуммаСторноРасходов = 0;
	СуммаСторноНДС      = 0;
	СуммаПризнанияНДС   = 0;
	ТаблицаРасходовДляУСН = Документы.ОтчетКомиссионераОПродажах.ПодготовитьТаблицыДляУСН(
		ТаблицаСписанныеТоварыВозврат,
		ПараметрыПроведения.УСНРеквизитыСделки,
		ПараметрыПроведения.Реквизиты,
		СуммаСторноРасходов, // Рассчитывается и возвращается
		СуммаСторноНДС, // Рассчитывается и возвращается
		СуммаПризнанияНДС, // Рассчитывается и возвращается
		Отказ);
		
	// Учет доходов и расходов ИП
	ТаблицаВыручкиОтРеализацииИП = Документы.ОтчетКомиссионераОПродажах.ПодготовитьТаблицуВыручкиОтРеализацииИП(
		ПараметрыПроведения.ВозвратыТоваровТаблицаДокумента, ПараметрыПроведения.Реквизиты);
	
	ТаблицыВозвратаТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыВозвратаМПЗКомиссионеру(
		ТаблицаВыручкиОтРеализацииИП, ТаблицаСписанныеТоварыВозврат, ТаблицаВзаиморасчетыВозврат, ПараметрыПроведения.ВозвратыТоваровРеквизиты);
	
	
	// ПОДГОТОВКА ДАННЫХ РЕАЛИЗАЦИЯ
	
	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТоварыСУчетомВозврата(
		ПараметрыПроведения.СписаниеТоваровТаблицаТовары, ТаблицаСписанныеТоварыВозврат, ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);
		
	// Уберем из таблицы авансов документа задолженность погашаемую возвратами комиссионеру
	ЗачетАвансовТаблицаДокумента = Документы.ОтчетКомиссионераОПродажах.ПодготовитьТаблицуЗачетАвансовСУчетовВозврата(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ТаблицаВзаиморасчетыВозврат, ПараметрыПроведения.Реквизиты, Отказ);
	
	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовТаблицаАвансов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
		
	// Добавим в таблицу взаиморасчетов суммы восстановленных авансов по возврату комиссионеру
	ТаблицаВзаиморасчетовСВозвратом = Документы.ОтчетКомиссионераОПродажах.ДобавитьАвансыВозвратыКомиссионеру(
		ТаблицаВзаиморасчетов, ТаблицаВзаиморасчетыВозврат, 
		ПараметрыПроведения.ЗачетАвансовНаВозвратТаблицаАвансов, ПараметрыПроведения.Реквизиты, Отказ);
	
	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализацииКомиссионером(
		ПараметрыПроведения.РеализацияТаблицаДокумента, ТаблицаВзаиморасчетовСВозвратом, ТаблицаСписанныеТовары,
		ПараметрыПроведения.РеализацияРеквизиты, Отказ);
	
	ТаблицаСобственныеТоварыУслуги = ТаблицыРеализация.СобственныеТоварыУслуги;
		ТаблицаТоварыУслугиКомитентов = ТаблицыРеализация.ТоварыУслугиКомитентов;
		ТаблицаРеализованныеТоварыКомитентов = ТаблицыРеализация.РеализованныеТоварыКомитентов;
	
	// Таблица взаиморасчетов по комиссионному вознаграждению с учетом зачета авансов
	ТаблицаВзаиморасчетовВознаграждение = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовВознаграждениеТаблицаДокумента, Неопределено,
		ПараметрыПроведения.ЗачетАвансовВознаграждениеРеквизиты, Отказ);
	
	ТаблицаУслуги = Документы.ОтчетКомиссионераОПродажах.ПодготовитьТаблицуВознагражденияСУчетомКурсаАвансов(
		ПараметрыПроведения.ВознаграждениеТаблица,
		ТаблицаВзаиморасчетовВознаграждение, ПараметрыПроведения.ВознаграждениеРеквизиты);
	
	Документы.ОтчетКомиссионераОПродажах.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги);
	
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаТМЦ, ТаблицаРасчетовПоПриобретению, ТаблицаРасчетовПоРеализации", 
		ТаблицаСписанныеТовары, ТаблицаВзаиморасчетовВознаграждение, ТаблицаВзаиморасчетовСВозвратом);
	
	// Учет доходов и расходов ИП
	СписанныеМПЗ = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуСписанныеМПЗ(
		ТаблицаСписанныеТовары, ПараметрыПроведения.РеализацияТаблицаДокумента, ПараметрыПроведения.РеализацияРеквизиты);
	
	ТаблицыСписанияТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗСУчетомВозврата(
		СписанныеМПЗ, ПараметрыПроведения.РеализацияРеквизиты, ТаблицыВозвратаТоваровИП.СписокМПЗ, Отказ);
	
	ТаблицаОказаниеУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОказаниеУслуг(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.РеализацияРеквизиты);
	
	ТаблицаУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ИПТаблицаУслуг, ПараметрыПроведения.ИПРеквизиты);
	
	СтруктураТаблицМПЗ = Новый Структура("ТаблицаУслуг", ТаблицаУслугИП);
	
	ТаблицаКомиссионногоВознагражденияИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуКомиссионногоВознаграждения(
		ПараметрыПроведения.ИПТаблицаВознаграждения, ПараметрыПроведения.ИПРеквизиты);
	

	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ВОЗВРАТЫ

	СобственныеТоварыУслугиНДСВозврат = ?(ТаблицыРеализацияВозврат.СобственныеТоварыУслуги <> Неопределено,
		ТаблицыРеализацияВозврат.СобственныеТоварыУслуги.Скопировать(), Неопределено);

	Документы.ОтчетКомиссионераОПродажах.ПроставитьСторноТаблиц(
		ТаблицаСписанныеТоварыВозврат, ТаблицыРеализацияВозврат.СобственныеТоварыУслуги, 
		ТаблицыРеализацияВозврат.ТоварыУслугиКомитентов, ТаблицыРеализацияВозврат.РеализованныеТоварыКомитентов);
	
	// Сторнируем ранее отгруженные товары:
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТоварыВозврат,
		ПараметрыПроведения.ВозвратыТоваровРеквизиты, Движения, Отказ);
	
	// Сторинируем выручку
	УчетДоходовРасходов.СформироватьДвиженияРеализация(ТаблицыРеализацияВозврат.СобственныеТоварыУслуги,
		ТаблицыРеализацияВозврат.ТоварыУслугиКомитентов, ТаблицыРеализацияВозврат.РеализованныеТоварыКомитентов,
		ПараметрыПроведения.ВозвратыТоваровРеквизиты, Движения, Отказ);
		
	// Учет НДС
	СобственныеТоварыУслугиНДСВозврат = УчетНДСРаздельный.ПодготовитьТаблицуСобственныеТоварыУслугиНДСВозвратКомиссионеру(
		СобственныеТоварыУслугиНДСВозврат, ПараметрыПроведения.ТоварыНДС);
	
	УчетНДС.СформироватьДвиженияВозвратТоваровКомиссионеру(СобственныеТоварыУслугиНДСВозврат,
		ТаблицаСписанныеТоварыВозврат, ПараметрыПроведения.ТоварыСГТД, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Движения по расходам УСН возвраты без сделки
	УчетУСН.ПоступлениеРасходовУСН(ПараметрыПроведения.УСНТаблицаРасходов, 
		ПараметрыПроведения.УСНРеквизиты, СуммаСторноРасходов, Движения, Отказ);
		
	Если НЕ Отказ И Движения.РасходыПриУСН.Количество()>0 Тогда
		Движения.РасходыПриУСН.Записать(Истина);
		Движения.РасходыПриУСН.Записывать = Ложь;
	КонецЕсли; 
	
	// Движения по расходам УСН возвраты со сделки + КУДиР
	Документы.ОтчетКомиссионераОПродажах.СформироватьДвиженияВозвратПоРегистрамУСН(
		ТаблицаРасходовДляУСН,
		ПараметрыПроведения.Реквизиты,
		СуммаСторноРасходов,
		СуммаСторноНДС,
		СуммаПризнанияНДС,
		Движения, Отказ);
		
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВозвратМПЗКомиссионеру(
		ТаблицыВозвратаТоваровИП.СписокМПЗ, ТаблицыВозвратаТоваровИП.СписокМПЗОтгруженные,
		ТаблицыВозвратаТоваровИП.СписокДоходов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ РЕАЛИЗАЦИЯ
	УчетТоваров.СформироватьДвиженияСписаниеТоваров(
		ТаблицаСписанныеТовары, ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчетов, ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
		
	Документы.ОтчетКомиссионераОПродажах.СформироватьДвиженияЗачетАвансаПоВозвратуОтПокупателя(ТаблицаВзаиморасчетовСВозвратом,
		ПараметрыПроведения.ЗачетАвансовНаВозвратРеквизиты, Движения, Отказ);

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансовКомитентов(
		ТаблицыРеализация.ТоварыУслугиКомитентов, ПараметрыПроведения.ЗачетАвансовКомитентовРеквизиты, Движения, Отказ);

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчетовВознаграждение, ПараметрыПроведения.ЗачетАвансовВознаграждениеРеквизиты, Движения, Отказ);

	УчетВзаиморасчетов.СформироватьДвиженияПогашениеЗадолженности(
		ПараметрыПроведения.ПогашениеЗадолженностиВознаграждениеТаблицаВзаиморасчетов,
		ПараметрыПроведения.ПогашениеЗадолженностиВознаграждениеРеквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицыРеализация.СобственныеТоварыУслуги, ТаблицыРеализация.ТоварыУслугиКомитентов,
		ТаблицыРеализация.РеализованныеТоварыКомитентов, ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПоступлениеУслуг(
		ТаблицаУслуги, ПараметрыПроведения.ВознаграждениеРеквизиты, Движения, Отказ);
		
	//Движения регистра "Рублевые суммы документов в валюте"
	//Табличная часть "По вознаграждению"
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(ТаблицаУслуги, 
		ПараметрыПроведения.ВознаграждениеРеквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаСобственныеТоварыУслуги, 
		ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаТоварыУслугиКомитентов, 
		ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);
		
	// Учет НДС
	// Реализация товаров и услуг комиссионером
	УчетНДС.СформироватьДвиженияРеализацияТоваровУслуг(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.НДСТовары, ТаблицаСписанныеТовары,
		ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);
	// Услуги по комиссионному вознаграждению
	УчетНДС.СформироватьДвиженияПоступлениеПосредническихУслуг(
		ТаблицаУслуги, ПараметрыПроведения.ВознаграждениеРеквизиты, Движения, Отказ);
	УчетНДСРаздельный.СформироватьДвиженияПоступлениеПосредническихУслуг(
		ТаблицаУслуги, ПараметрыПроведения.ВознаграждениеРеквизиты, Движения, Отказ);
		
	// Начисление, зачет авансов от конечных покупателей
	УчетНДСБП.СформироватьДвиженияАвансыПоДоговорамКомиссии(
		ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ДенежныеСредства, Движения, Отказ);	
		
	РегистрыНакопления.РеализацияУслуг.ДобавитьДвижения(
		Движения.РеализацияУслуг,
		ПараметрыПроведения.ТаблицаРеализацияУслуг,
		ТаблицаСобственныеТоварыУслуги,
		ПараметрыПроведения.Реквизиты);
	
	// УСН
	СуммаСторноРасхода = 0;
	УчетУСН.ПоступлениеРасходовУСН(ПараметрыПроведения.УСНВознаграждениеТаблицаРасходов,
		ПараметрыПроведения.УСНВознаграждениеРеквизиты, СуммаСторноРасхода, Движения, Отказ);
	
	Если НЕ Отказ И Движения.РасходыПриУСН.Количество()>0 Тогда
		Движения.РасходыПриУСН.Записать(Истина);
		Движения.РасходыПриУСН.Записывать = Ложь;
	КонецЕсли;
	
	// отражение реализации
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	ТаблицаИПМПЗОтгруженные = УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияТоваровИП, ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);
		
	ТаблицаИПМПЗОтгруженныеУслуги = УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОказаниеУслуг(
		ТаблицаОказаниеУслугИП, ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаИПМПЗОтгруженныеУслуги, ТаблицаИПМПЗОтгруженные);
		
	ТаблицаИПМПЗОтгруженные = УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные, ТаблицаВзаиморасчетовСВозвратом,
		ПараметрыПроведения.РеализацияРеквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетКомиссионногоВознаграждения(
		ТаблицаИПМПЗОтгруженные, ПараметрыПроведения.ПогашениеЗадолженностиВознаграждениеТаблицаВзаиморасчетов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(
		СтруктураТаблицМПЗ, ТаблицаВзаиморасчетовВознаграждение, , ПараметрыПроведения.ИПРеквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУдержатьКомиссионноеВознаграждение(
		ТаблицаКомиссионногоВознагражденияИП, ПараметрыПроведения.ИПРеквизиты, Движения, Отказ);
		
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(
		ТаблицаПереоценка, ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);

	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(
		ТаблицаПереоценка, ПараметрыПроведения.ПереоценкаВалютныхОстатков, Движения, Отказ);
		
	Движения.Записать();
	
	ОбновитьСчетаФактуры(РежимЗаписиДокумента.Проведение);
	
	СтруктураОтбора = Новый Структура("ВозвратЧерезКомиссионера", Ложь);
	
	УчетНДСПереопределяемый.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураПолученный", Истина, Отказ,
		ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект), СтруктураОтбора);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	УчетНДСПереопределяемый.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураПолученный", Ложь, Отказ);

	ОбновитьСчетаФактуры(РежимЗаписиДокумента.ОтменаПроведения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ДокументПередачи - ссылка на документ основание.
//
Процедура ЗаполнитьТовары(ДокументПередачи = Неопределено, КлючСтроки = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПередачи",	ДокументПередачи);
	Запрос.УстановитьПараметр("Субсчета45",			БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные));
	Запрос.УстановитьПараметр("Субсчета004",		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.КоличествоМест,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Коэффициент,
	|	РеализацияТоваровУслугТовары.Количество,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугТовары.Сумма
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма + РеализацияТоваровУслугТовары.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.ПереданныеСчетУчета КАК СчетУчета,
	|	РеализацияТоваровУслугТовары.НомерГТД,
	|	РеализацияТоваровУслугТовары.СтранаПроисхождения
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументПередачи
	|	И РеализацияТоваровУслугТовары.ПереданныеСчетУчета В(&Субсчета45)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.НомерСтроки,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.КоличествоМест,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Коэффициент,
	|	РеализацияТоваровУслугТовары.Количество,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслугТовары.Сумма
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма + РеализацияТоваровУслугТовары.СуммаНДС
	|	КОНЕЦ,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.ПереданныеСчетУчета,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументПередачи
	|	И РеализацияТоваровУслугТовары.ПереданныеСчетУчета В(&Субсчета004)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.Реализация = Истина;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	СтрокаПокупателя = Покупатели.Добавить();
	СтрокаПокупателя.Покупатель	= ДокументПередачи.Контрагент;
	СтрокаПокупателя.КлючСтроки	= ?(КлючСтроки = Неопределено,
		Документы.ОтчетКомиссионераОПродажах.ПолучитьМаксимальныйКлючСтроки(Покупатели),
		КлючСтроки);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	КурсДокумента		= ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	КратностьДокумента	= ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, ВалютаРегламентированногоУчета);
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.КлючСтроки = СтрокаПокупателя.КлючСтроки;
		
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "", СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура));
			
		СтрокаТабличнойЧасти.Номенклатура			= СтрокаТоваров.Номенклатура;
		СтрокаТабличнойЧасти.КоличествоМест			= СтрокаТоваров.КоличествоМест;
		СтрокаТабличнойЧасти.Количество				= СтрокаТоваров.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СтрокаТоваров.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент			= СтрокаТоваров.Коэффициент;
		СтрокаТабличнойЧасти.НомерГТД				= СтрокаТоваров.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения	= СтрокаТоваров.СтранаПроисхождения;
		СтрокаТабличнойЧасти.СтавкаНДС				= СтрокаТоваров.СтавкаНДС;
		СтрокаТабличнойЧасти.СчетУчета				= СтрокаТоваров.СчетУчета;
		
		Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТоваров.Сумма,
			ВалютаВзаиморасчетов, ВалютаДокумента,
			КурсВзаиморасчетов, КурсДокумента,
			КратностьВзаиморасчетов, КратностьДокумента);
			
		СтрокаТабличнойЧасти.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Сумма, Истина, СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
		
		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ЦенаПередачи  = СтрокаТабличнойЧасти.Цена;
		
		Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			
			СтрокаТабличнойЧасти.СуммаВознаграждения	= ПроцентКомиссионногоВознаграждения * СтрокаТабличнойЧасти.Сумма / 100;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения	= УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
				СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДокументБезНДС
		И Товары.Итог("СуммаНДС") <> 0 Тогда
		ДокументБезНДС = Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет заполнение табличной части ТоварыВозвращенные, по документу - основанию возврата.
Процедура ЗаполнитьПоДокументу(Сделка, Покупатель, КлючСтроки)Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументРеализации", Сделка);
	Запрос.УстановитьПараметр("Покупатель", 		Покупатель);
	Запрос.УстановитьПараметр("КлючСтроки", 		КлючСтроки);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтчетКомиссионераОПродажахТовары.Номенклатура КАК Номенклатура,
	               |	ОтчетКомиссионераОПродажахТовары.КоличествоМест КАК КоличествоМест,
	               |	ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ОтчетКомиссионераОПродажахТовары.Коэффициент КАК Коэффициент,
	               |	ОтчетКомиссионераОПродажахТовары.Количество КАК Количество,
	               |	ОтчетКомиссионераОПродажахТовары.Цена КАК Цена,
	               |	ВЫБОР
	               |		КОГДА ОтчетКомиссионераОПродажах.СуммаВключаетНДС
	               |			ТОГДА ОтчетКомиссионераОПродажахТовары.Сумма
	               |		ИНАЧЕ ОтчетКомиссионераОПродажахТовары.Сумма + ОтчетКомиссионераОПродажахТовары.СуммаНДС
	               |	КОНЕЦ КАК Сумма,
	               |	ОтчетКомиссионераОПродажахТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ОтчетКомиссионераОПродажахТовары.СуммаНДС КАК СуммаНДС,
	               |	ВЫБОР
	               |		КОГДА ОтчетКомиссионераОПродажах.СуммаВключаетНДС
	               |			ТОГДА ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения
	               |		ИНАЧЕ ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения + ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения
	               |	КОНЕЦ КАК СуммаВознаграждения,
	               |	ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
	               |	ОтчетКомиссионераОПродажахТовары.СчетУчета КАК СчетУчета,
	               |	ОтчетКомиссионераОПродажахТовары.СчетДоходов КАК СчетДоходов,
	               |	ОтчетКомиссионераОПродажахТовары.Субконто КАК Субконто,
	               |	ОтчетКомиссионераОПродажахТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	               |	ОтчетКомиссионераОПродажахТовары.СчетРасходов КАК СчетРасходов,
	               |	ОтчетКомиссионераОПродажахТовары.ДокументОприходования КАК ДокументОприходования,
	               |	ОтчетКомиссионераОПродажахТовары.Себестоимость КАК Себестоимость,
	               |	ОтчетКомиссионераОПродажахТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	               |	ОтчетКомиссионераОПродажахТовары.НомерГТД КАК НомерГТД,
	               |	ОтчетКомиссионераОПродажах.СтавкаНДСВознаграждения,
	               |	ОтчетКомиссионераОПродажахТовары.НомерСтроки КАК НомерСтроки,
	               |	ОтчетКомиссионераОПродажах.СуммаВключаетНДС
	               |ИЗ
	               |	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	               |		ПО ОтчетКомиссионераОПродажахТовары.Ссылка = ОтчетКомиссионераОПродажахПокупатели.Ссылка
	               |			И ОтчетКомиссионераОПродажахТовары.КлючСтроки = ОтчетКомиссионераОПродажахПокупатели.КлючСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	               |		ПО ОтчетКомиссионераОПродажахТовары.Ссылка = ОтчетКомиссионераОПродажах.Ссылка
	               |ГДЕ
	               |	ОтчетКомиссионераОПродажахПокупатели.Покупатель = &Покупатель
	               |	И ОтчетКомиссионераОПродажахПокупатели.Ссылка = &ДокументРеализации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
		
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	// удалим ранее заполненные записи с этим ключом
	ЗаполненныеСтрокиПоДокументу = ТоварыВозвращенные.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	Для каждого СтрокаТаблицыВозвраты Из ЗаполненныеСтрокиПоДокументу Цикл
		ТоварыВозвращенные.Удалить(СтрокаТаблицыВозвраты);
	КонецЦикла; 
	
	СоответствиеСтавокИСпособовУчетаНДС = УчетНДСРаздельный.ПолучитьСоответствиеСтавокИСпособовУчетаНДС();
	
	Для каждого СтрокаТаблицыТоваров Из ТаблицаТоваров Цикл
	
		СтрокаТабличнойЧасти = ТоварыВозвращенные.Добавить();
		
		СтрокаТабличнойЧасти.КлючСтроки = КлючСтроки;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицыТоваров,,"Сумма, СуммаНДС");
		
		СтрокаТабличнойЧасти.Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаТаблицыТоваров.Сумма, Истина, СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
		
		СтрокаТабличнойЧасти.СуммаВознаграждения = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаТаблицыТоваров.СуммаВознаграждения, Истина, СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицыТоваров.СтавкаНДСВознаграждения));
			
		СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицыТоваров.СуммаВознаграждения, СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицыТоваров.СтавкаНДСВознаграждения));
			
		СпособУчетаНДС = СоответствиеСтавокИСпособовУчетаНДС.Получить(СтрокаТаблицыТоваров.СтавкаНДС);
		Если СпособУчетаНДС <> Неопределено Тогда
			СтрокаТабличнойЧасти.СпособУчетаНДС = СпособУчетаНДС;
		КонецЕсли;
	
	КонецЦикла; 

	Если ДокументБезНДС
		И ТоварыВозвращенные.Итог("СуммаНДС") <> 0 Тогда
		ДокументБезНДС = Ложь;
	КонецЕсли;

КонецПроцедуры 

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора") <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ВызватьИсключение НСтр("ru='Отчет комиссионера вводится на основании документа ""Реализация (акт, накладная)"",
				|в котором указан договор ""С комиссионером"".'");
		КонецЕсли;
		
		УдержатьВознаграждение                   = Истина;
		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		СтавкаНДСВознаграждения              	 = ?(ДоговорКонтрагента.ПредъявляетНДС, Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.БезНДС);
		
		ЗаполнитьТовары(Основание);

	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьСчетаФактуры(РежимЗаписи)

	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы, Источник", "Документ");
	ОписаниеИсточника 	= Новый Структура("Ссылка", "Ссылка");
	
	Для каждого КлючИЗначение Из ВсеПодчиненныеСчетаФактуры Цикл
		
		ИмяТаблицы = КлючИЗначение.Ключ;
		ПодчиненныеСчетаФактуры = КлючИЗначение.Значение;
		
		СтруктураПараметров.ИмяТаблицы 	= ?(ИмяТаблицы = "Возвраты", "СчетФактураПолученный", "СчетФактураВыданный");
		СтруктураПараметров.Источник 	= ПодчиненныеСчетаФактуры;
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров,,ОписаниеИсточника);
		
		СчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И ИмяТаблицы = "Покупатели";
		
		Для каждого СтрокаСФ Из ПодчиненныеСчетаФактуры Цикл
			
			Если ЭтотОбъект.ПометкаУдаления ИЛИ НЕ СтрокаСФ.Использован Тогда
				Если НЕ СтрокаСФ.ПометкаУдаления Тогда
					ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
					ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
					Если ДокументСФ.ДокументыОснования.Количество() > 1 Тогда
						СтрокиТекОснования = ДокументСФ.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ЭтотОбъект.Ссылка));
						Для каждого СтрокаТекОснования Из СтрокиТекОснования Цикл
							ДокументСФ.ДокументыОснования.Удалить(СтрокаТекОснования);
						КонецЦикла;
						РежимЗаписиСФ = ?(ДокументСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
						ДокументСФ.Записать(РежимЗаписиСФ);
					Иначе
						ДокументСФ.УстановитьПометкуУдаления(Истина);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
				ДокументСФ.СводныйКомиссионный = СчетаФактурыСводно;
				ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
				Если ДокументСФ.ПометкаУдаления Тогда
					ДокументСФ.ПометкаУдаления = Ложь;
				КонецЕсли;
				РежимЗаписиСФ = РежимЗаписи;
				Если ДокументСФ.Проведен И РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
					РежимЗаписиСФ = РежимЗаписиДокумента.ОтменаПроведения;
				ИначеЕсли НЕ ДокументСФ.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
					РежимЗаписиСФ = РежимЗаписиДокумента.Проведение;
				КонецЕсли;
				ДокументСФ.Записать(РежимЗаписиСФ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; 

КонецПроцедуры

Процедура СформироватьСчетаФактуры(Отказ)
	
	Если ЭтоНовый() Тогда
		ДокументСсылка = ЭтотОбъект.ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументСсылка = Документы.ОтчетКомиссионераОПродажах.ПолучитьСсылку();
			УстановитьСсылкуНового(ДокументСсылка);
		КонецЕсли;
	Иначе
		ДокументСсылка = Ссылка;
	КонецЕсли;
	
	ВыписыватьСчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И Дата >= '20150101';
	
	ВсеПодчиненныеСчетаФактуры = ПолучитьТаблицыПодчиненныхСчетовФактур(ДокументСсылка);
	
	Для каждого КлючИЗначение Из ВсеПодчиненныеСчетаФактуры Цикл
		
		ИмяТаблицы = КлючИЗначение.Ключ;
		ПодчиненныеСчетаФактуры = КлючИЗначение.Значение;
		
		ДанныеСчетовФактур = ДанныеСчетовФактурПоДокументу(ИмяТаблицы);
		НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур, ПодчиненныеСчетаФактуры, ИмяТаблицы);
		
		ЗаполнитьСчетаФактурыВДокументе(ПодчиненныеСчетаФактуры, ИмяТаблицы);
	
	КонецЦикла; 
	
КонецПроцедуры

Функция ДанныеСчетовФактурПоДокументу(ИмяТаблицы)
	
	ТаблицаДокумента   = ЭтотОбъект[ИмяТаблицы];
	СчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И ИмяТаблицы = "Покупатели";
	
	Если СчетаФактурыСводно Тогда
		ДанныеСчетовФактур = ТаблицаДокумента.ВыгрузитьКолонки("СчетФактура");
	Иначе
		ДанныеСчетовФактур = ТаблицаДокумента.ВыгрузитьКолонки("КлючСтроки, Покупатель, СчетФактура");
		ДанныеСчетовФактур.Колонки.Добавить("НомерСФ", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	КонецЕсли;
	ДанныеСчетовФактур.Колонки.Добавить("ДатаСФ", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеСчетовФактур.Колонки.Добавить("КоличествоСФ", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
	
	Для каждого СтрокаТабличнойЧасти Из ТаблицаДокумента Цикл
		Если СтрокаТабличнойЧасти.ВыставленСФ Тогда
			НоваяСтрока = ДанныеСчетовФактур.Добавить();
			НоваяСтрока.КоличествоСФ = 1;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
				Если ТипЗнч(СтрокаТабличнойЧасти.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
					ДатаСФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.СчетФактура, "Дата"); 
				Иначе
					ДатаСФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.СчетФактура, "ДатаВходящегоДокумента"); 
				КонецЕсли;
				
				Если День(СтрокаТабличнойЧасти.ДатаСФ) = День(ДатаСФ) Тогда 
					НоваяСтрока.ДатаСФ = ДатаСФ;
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Если СчетаФактурыСводно Тогда
		ДанныеСчетовФактур.Свернуть("ДатаСФ, СчетФактура", "КоличествоСФ");
	Иначе
		ДанныеСчетовФактур.Свернуть("КлючСтроки, Покупатель, ДатаСФ, НомерСФ, СчетФактура");
	КонецЕсли;
	
	Возврат ДанныеСчетовФактур;

КонецФункции

Процедура НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур, ПодчиненныеСчетаФактуры, ИмяТаблицы)

	СчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И ИмяТаблицы = "Покупатели";
	ЕстьСоглашениеЭД = НаличиеСоглашенияЭДСКомиссионером();
	
	Для каждого СтрокаТаблицы Из ДанныеСчетовФактур Цикл
		
		СтрокаСФ = НайтиСтрокуСчетаФактуры(ПодчиненныеСчетаФактуры, СтрокаТаблицы, СчетаФактурыСводно);
		
		Если СтрокаСФ <> Неопределено Тогда
			
			Если День(СтрокаСФ.ДатаСФ) <> День(СтрокаТаблицы.ДатаСФ) Тогда 
				
				ДокументСФ		=  СтрокаСФ.Ссылка.ПолучитьОбъект();
				Если ТипЗнч(ДокументСФ) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
					ДокументСФ.Дата = СтрокаТаблицы.ДатаСФ;
				Иначе
					ДокументСФ.ДатаВходящегоДокумента = СтрокаТаблицы.ДатаСФ;
				КонецЕсли;
				
				ДокументСФ.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
				ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
				ДокументСФ.Записать();
				// Обновить значение строки таблицы с счетами-фактурами
				ЗаполнитьЗначенияСвойств(СтрокаСФ, СтрокаТаблицы);
				ЗаполнитьЗначенияСвойств(СтрокаСФ, ДокументСФ);
			КонецЕсли;
			Продолжить;
			
		ИначеЕсли ИмяТаблицы = "Покупатели" Тогда	
			
			ДокументСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
			
			ДокументСФ.Дата            = СтрокаТаблицы.ДатаСФ;
			ДокументСФ.Организация     = Организация;
			ДокументСФ.Ответственный   = Пользователи.ТекущийПользователь();
			ДокументСФ.Контрагент      = ?(СчетаФактурыСводно, Контрагент, СтрокаТаблицы.Покупатель);
			ДокументСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			ДокументСФ.Комментарий     = НСтр("ru = 'Создан автоматически на основании документа отчет комиссионера о продажах'");
			
			ДокументСФ.СводныйКомиссионный = СчетаФактурыСводно;
			
			Если ДокументСФ.СводныйКомиссионный 
				И СтрокаТаблицы.КоличествоСФ > 1 Тогда
				ДокументСФ.КодВидаОперации = "27";
			Иначе
				ДокументСФ.КодВидаОперации = "04";
			КонецЕсли;
			
			Если ЕстьСоглашениеЭД Тогда
				
				ДокументСФ.КодСпособаВыставления = 2;
				ДокументСФ.Выставлен = Ложь;
				ДокументСФ.ДатаВыставления = '00010101';
				ДокументСФ.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
				
			Иначе 
				
				ДокументСФ.КодСпособаВыставления	= 1;
				ДокументСФ.Выставлен				= Истина;
				ДокументСФ.ДатаВыставления			= ЭтотОбъект.Дата;
				
			КонецЕсли;
			
			ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(ДокументСФ);
			
			ДокументСФ.ДокументыОснования.Добавить().ДокументОснование = ДокументСсылка;
		
			// Счет-фактура только что сформирован, заполним данные платежно-расчетных документов
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				МассивОснований = Новый Массив;
				МассивОснований.Добавить(ДокументСсылка);
				
				ДокументСФ.ПлатежноРасчетныеДокументы.Очистить();
				ДокументСФ.ПлатежноРасчетныеДокументы.Загрузить(
					Документы.СчетФактураВыданный.ДатыНомераПлатежноРасчетныхДокументов(МассивОснований));
			КонецЕсли;
				
		ИначеЕсли ИмяТаблицы = "Возвраты" Тогда
			
			ПараметрыСчетаФактуры = Новый Структура("Организация, Контрагент", Организация, Контрагент);
			ПараметрыСчетаФактуры.Вставить("НомерСчетаФактурыПолученного", СтрокаТаблицы.НомерСФ);
			ПараметрыСчетаФактуры.Вставить("ДатаСчетаФактурыПолученного", СтрокаТаблицы.ДатаСФ);
			ПараметрыСчетаФактуры.Вставить("Продавец", СтрокаТаблицы.Покупатель);
			
			ДокументСФ = УчетНДСПереопределяемый.НайтиСчетФактуруПолученный(ПараметрыСчетаФактуры);
			
			Если ДокументСФ = Неопределено Тогда
				
				ДокументСФ = Документы.СчетФактураПолученный.СоздатьДокумент();
				
				ДокументСФ.Дата						= Дата;;
				ДокументСФ.ДатаВходящегоДокумента  	= СтрокаТаблицы.ДатаСФ;
				ДокументСФ.НомерВходящегоДокумента 	= СтрокаТаблицы.НомерСФ;
				ДокументСФ.Организация				= Организация;
				ДокументСФ.Ответственный			= Пользователи.ТекущийПользователь();
				ДокументСФ.Продавец					= СтрокаТаблицы.Покупатель;
				ДокументСФ.Контрагент				= Контрагент;
				ДокументСФ.ВидСчетаФактуры			= Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
				ДокументСФ.Комментарий				= НСтр("ru = 'Создан автоматически на основании документа отчет комиссионера о продажах'");
				
				ДокументСФ.ВозвратЧерезКомиссионера = Истина;
				ДокументСФ.КодВидаОперации 			= "03";
				ДокументСФ.КодСпособаПолучения 		= 1;
			Иначе 
				ДокументСФ = ДокументСФ.ПолучитьОбъект();
			КонецЕсли;
			
			Если ДокументСф.ДокументыОснования.Найти(ДокументСсылка, "ДокументОснование") = Неопределено Тогда
				ДокументСФ.ДокументыОснования.Добавить().ДокументОснование = ДокументСсылка;
			КонецЕсли;
			
		КонецЕсли;
			
		ДокументСФ.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
		ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
		ДокументСФ.Записать();
			
		// Этот новый счет-фактуру нужно зафиксировать в таблице счетов-фактур
		СтрокаСФ = ПодчиненныеСчетаФактуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСФ, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(СтрокаСФ, ДокументСФ);
		Если СчетаФактурыСводно Тогда
			СтрокаСФ.Покупатель = Контрагент;
		КонецЕсли;
			
	КонецЦикла;
	

КонецПроцедуры

Функция НаличиеСоглашенияЭДСКомиссионером()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		
		ПараметрыЭД = Новый Структура("ВидЭд,НаправлениеЭД,Организация,Контрагент");
		ПараметрыЭД.Организация		= Организация;
		ПараметрыЭД.Контрагент		= Контрагент;
		ПараметрыЭД.ВидЭД			= Перечисления.ВидыЭД.СчетФактура;
		ПараметрыЭД.НаправлениеЭД	= Перечисления.НаправленияЭД.Исходящий;
		
		Возврат ЗначениеЗаполнено(ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД));
		
	Иначе 
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСчетаФактурыВДокументе(ПодчиненныеСчетаФактуры, ИмяТаблицы)
	
	СчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И ИмяТаблицы = "Покупатели";
	ТабличнаяЧасть     = ЭтотОбъект[ИмяТаблицы];
	
	Для каждого СтрокаДокумента Из ТабличнаяЧасть Цикл
		Если СтрокаДокумента.ВыставленСФ Тогда
			СтрокаСФ = НайтиСтрокуСчетаФактуры(ПодчиненныеСчетаФактуры, СтрокаДокумента, СчетаФактурыСводно);
			Если СтрокаСФ <> Неопределено Тогда
				СтрокаДокумента.СчетФактура = СтрокаСФ.Ссылка;
				Если НЕ СчетаФактурыСводно Тогда
					СтрокаСФ.КлючСтроки = СтрокаДокумента.КлючСтроки;
				КонецЕсли;
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуПодчиненныхСчетовФактур(РезультатЗапроса)

	ТаблицаСФ = РезультатЗапроса.Выгрузить();
	ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаСФ;

КонецФункции 

Функция ПолучитьТаблицыПодчиненныхСчетовФактур(ДокументСсылка)
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК КлючСтроки,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Ссылка.Контрагент КАК Покупатель,
	|	СчетФактураВыданный.Ссылка.Дата КАК ДатаСФ,
	|	СчетФактураВыданный.Ссылка.Проведен,
	|	СчетФактураВыданный.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументСсылка
	|	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСФ,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК КлючСтроки,
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Ссылка.Продавец КАК Покупатель,
	|	СчетФактураПолученный.Ссылка.Дата КАК ДатаСФ,
	|	СчетФактураПолученный.Ссылка.Проведен,
	|	СчетФактураПолученный.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование = &ДокументСсылка
	|	И СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление)
	|	И СчетФактураПолученный.Ссылка.ВозвратЧерезКомиссионера = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСФ,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат.Вставить("Покупатели", 	ПолучитьТаблицуПодчиненныхСчетовФактур(РезультатыЗапроса[0]));
	Результат.Вставить("Возвраты", 		ПолучитьТаблицуПодчиненныхСчетовФактур(РезультатыЗапроса[1]));
		
	Возврат Результат;
	
КонецФункции

Функция НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаДокумента, СчетаФактурыСводно)
	
	ПокупательПоиска = ?(СчетаФактурыСводно, ЭтотОбъект.Контрагент, СтрокаДокумента.Покупатель);
	
	СтруктураПоиска  = Новый Структура("Ссылка", СтрокаДокумента.СчетФактура);
	НайденныеСтроки  = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Покупатель = ПокупательПоиска
			ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Покупатель) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ДатаСФ", СтрокаДокумента.ДатаСФ);
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Покупатель = ПокупательПоиска
			ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Покупатель) Тогда
			
			Если СчетаФактурыСводно Тогда
				// найден подходящий счет-фактура
				Возврат НайденнаяСтрока;
			ИначеЕсли НайденнаяСтрока.КлючСтроки <> Неопределено Тогда
				Если НайденнаяСтрока.КлючСтроки = СтрокаДокумента.КлючСтроки Тогда
					// найден подходящий счет-фактура
					Возврат НайденнаяСтрока;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				// найден подходящий счет-фактура
				Возврат НайденнаяСтрока;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

#КонецЕсли