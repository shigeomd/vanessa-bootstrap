#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "Сотрудники.ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДокумента Из Сотрудники Цикл
		
		НайденныеСтроки = ЭтотОбъект.ПервичныйДокумент.Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", СтрокаДокумента.ФизическоеЛицо));
		Если НайденныеСтроки = Неопределено Или НайденныеСтроки.Количество() = 0 Тогда
			
			Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.Сотрудники[%1].%2", СтрокаДокумента.НомерСтроки-1, "ФизическоеЛицо");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке №%1 указан сотрудник, отсутствующий в первичном документе.'"), СтрокаДокумента.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, Поле, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПервичныйДокумент", ПервичныйДокумент);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодтверждениеОткрытияЛицевыхСчетовСотрудников.Ссылка
	|ИЗ
	|	Документ.ПодтверждениеОткрытияЛицевыхСчетовСотрудников КАК ПодтверждениеОткрытияЛицевыхСчетовСотрудников
	|ГДЕ
	|	ПодтверждениеОткрытияЛицевыхСчетовСотрудников.ПервичныйДокумент = &ПервичныйДокумент
	|	И НЕ ПодтверждениеОткрытияЛицевыхСчетовСотрудников.Ссылка = &Ссылка
	|	И ПодтверждениеОткрытияЛицевыхСчетовСотрудников.Проведен";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТекстОшибки = НСтр("ru = 'Подтверждение по первичному документу уже зарегистрировано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ПервичныйДокумент", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ОбменСБанкамиПоЗарплатнымПроектам.ОтменитьРегистрациюЛицевыхСчетовФизическихЛиц(Ссылка);
	
	ЛицевыеСчетаФизическихЛицДляРегистрации = ЛицевыеСчетаФизическихЛицДляРегистрации();
	ОбменСБанкамиПоЗарплатнымПроектам.ЗарегистрироватьЛицевыеСчетаФизическихЛиц(ЛицевыеСчетаФизическихЛицДляРегистрации);
	
	ОбменСБанкамиПоЗарплатнымПроектам.ЗарегистрироватьИзмененияЛицевыхСчетов(ЛицевыеСчетаФизическихЛицДляРегистрации, Организация, МесяцОткрытия);
	
	ОбменСБанкамиПоЗарплатнымПроектам.ЗарегистрироватьСостояниеОткрытияЛицевыхСчетов(
		ПервичныйДокумент,
		Отказ,
		ОбменСБанкамиПоЗарплатнымПроектам.СостояниеОткрытияЛицевыхСчетов(ЭтотОбъект.Ссылка),
		ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбменСБанкамиПоЗарплатнымПроектам.ОтменитьРегистрациюЛицевыхСчетовФизическихЛиц(Ссылка);
	
	ОбменСБанкамиПоЗарплатнымПроектам.ЗарегистрироватьСостояниеОткрытияЛицевыхСчетов(
		ПервичныйДокумент,
		Отказ,
		Перечисления.СостояниеЗаявкиНаОткрытиеЛицевогоСчетаСотрудника.ОжидаетПодтверждения,
		ЭтотОбъект.Ссылка);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		МетаданныеОбъекта = ЭтотОбъект.Метаданные();
		Для Каждого ПараметрЗаполнения Из ДанныеЗаполнения Цикл
			Если МетаданныеОбъекта.Реквизиты.Найти(ПараметрЗаполнения.Ключ)<>Неопределено Тогда
				ЭтотОбъект[ПараметрЗаполнения.Ключ] = ПараметрЗаполнения.Значение;
			Иначе
				Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ПараметрЗаполнения.Ключ) Тогда
					ЭтотОбъект[ПараметрЗаполнения.Ключ] = ПараметрЗаполнения.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполняемыеЗначения = Новый Структура;
		ЗаполняемыеЗначения.Вставить("Ответственный");
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
		ЭтотОбъект.Ответственный = ЗаполняемыеЗначения.Ответственный;
		
		Если ДанныеЗаполнения.Свойство("Сотрудники") Тогда
			Для Каждого СтрокаЗначенийЗаполнения Из ДанныеЗаполнения.Сотрудники Цикл
				ЗаполнитьЗначенияСвойств(Сотрудники.Добавить(), СтрокаЗначенийЗаполнения);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЛицевыеСчетаФизическихЛицДляРегистрации()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПодтверждениеОткрытияЛицевыхСчетовСотрудников.Ссылка.МесяцОткрытия, МЕСЯЦ) КАК МесяцОткрытия,
	|	ПодтверждениеОткрытияЛицевыхСчетовСотрудников.Организация,
	|	ЗарплатныеПроекты.Ссылка КАК ЗарплатныйПроект,
	|	СотрудникиПодтверждениеОткрытияЛицевыхСчетовСотрудников.ФизическоеЛицо,
	|	СотрудникиПодтверждениеОткрытияЛицевыхСчетовСотрудников.НомерЛицевогоСчета,
	|	ПодтверждениеОткрытияЛицевыхСчетовСотрудников.Ссылка КАК Документ
	|ИЗ
	|	Документ.ПодтверждениеОткрытияЛицевыхСчетовСотрудников.Сотрудники КАК СотрудникиПодтверждениеОткрытияЛицевыхСчетовСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПодтверждениеОткрытияЛицевыхСчетовСотрудников КАК ПодтверждениеОткрытияЛицевыхСчетовСотрудников
	|		ПО СотрудникиПодтверждениеОткрытияЛицевыхСчетовСотрудников.Ссылка = ПодтверждениеОткрытияЛицевыхСчетовСотрудников.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников
	|		ПО (ПодтверждениеОткрытияЛицевыхСчетовСотрудников.ПервичныйДокумент = ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО (ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка)
	|ГДЕ
	|	СотрудникиПодтверждениеОткрытияЛицевыхСчетовСотрудников.Ссылка = &Ссылка
	|	И СотрудникиПодтверждениеОткрытияЛицевыхСчетовСотрудников.РезультатОткрытияСчета = ЗНАЧЕНИЕ(Перечисление.РезультатыОткрытияЛицевыхСчетовСотрудников.СчетОткрыт)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ПроцедурыИФункцииДляПолученияФайлаПодтверждения

Процедура ЗаполнитьДокументИзОбъектаXDTO(ОбъектXDTO, СсылкаНаПервичныйДокумент, Отказ) Экспорт
	
	ПервичныйДокумент = СсылкаНаПервичныйДокумент;
	
	СтруктураДанныхДляЗаполненияДокумента = ОбменСБанкамиПоЗарплатнымПроектам.СтруктураДляЗаполненияДокументаПоПодтверждениюБанка(
			"ПодтверждениеОткрытияЛицевыхСчетовСотрудников", ОбъектXDTO, ПервичныйДокумент, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаДокумента = ОбменСБанкамиПоЗарплатнымПроектам.ФизическиеЛицаПоДокументамУдостоверяющимЛичность(
			ПервичныйДокумент, СтруктураДанныхДляЗаполненияДокумента.Сотрудники);
	
	КолонкиТЗ = СтруктураДанныхДляЗаполненияДокумента.Сотрудники.Колонки;
	Если КолонкиТЗ.Найти("ФизическоеЛицо") = Неопределено Тогда
		КолонкиТЗ.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из СтруктураДанныхДляЗаполненияДокумента.Сотрудники Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("ДокументВид", СтрокаТЧ.ДокументВид);
		Отбор.Вставить("КодВидаДокумента", СтрокаТЧ.КодВидаДокумента);
		Отбор.Вставить("ДокументСерия", СтрокаТЧ.ДокументСерия);
		Отбор.Вставить("ДокументНомер", СтрокаТЧ.ДокументНомер);
		СтрокаЛС = ФизическиеЛицаДокумента.НайтиСтроки(Отбор);
		Если СтрокаЛС.Количество() = 0 Тогда
			СтрокаТЧ.ФизическоеЛицо = Неопределено;
		Иначе
			СтрокаТЧ.ФизическоеЛицо = СтрокаЛС[0].ФизическоеЛицо
		КонецЕсли
	КонецЦикла;
	
	Сотрудники.Очистить();
	Заполнить(СтруктураДанныхДляЗаполненияДокумента);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
