&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьУсловноеОформление();
	
	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

	// Событие "Запись_СчетФактураВыданный" обрабатывать незачем	
	
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеОказаниеУслуг";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтотОбъект);
	
	УстановитьСостояниеДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПроверитьКонтрагентовПриОткрытии();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовВХранилище(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОказаниеУслуг", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Проверка на изменение сроков действия патентов.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ПрименяетсяУСНПатент;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	ЗапуститьПроверкуКонтрагентов(Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаПатентеПриИзменении(Элемент)
	
	Если Объект.ДеятельностьНаПатенте Тогда
		
		Если Элементы.Патент.СписокВыбора.Количество() = 1 Тогда
			Объект.Патент	= Элементы.Патент.СписокВыбора[0].Значение;
		КонецЕсли;
		
	Иначе
		Объект.Патент	= Неопределено;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Патент) Тогда
		Объект.ДеятельностьНаПатенте	= Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВзаиморасчетовПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ВидВзаиморасчетов)
		И Объект.Контрагенты.Количество() > 0 Тогда
		
		ВидВзаиморасчетовПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		НоменклатураПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)

	Если Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") Тогда
		Объект.СуммаВключаетНДС	= Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СтавкаНДС)
		И Объект.Контрагенты.Количество() > 0 Тогда
		
		СтавкаНДСПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СуммаВключаетНДСПриИзменении(Элемент)
	
	СуммаВключаетНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)
	
	СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(Объект.СчетДоходов);
		
	Если СчетДоходовВедетсяУчетПоНоменклатурнымГруппам И ОсновнаяНоменклатурнаяГруппа <> Неопределено Тогда
		
		Объект.Субконто = ОсновнаяНоменклатурнаяГруппа;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Контрагенты>

&НаКлиенте
Процедура КонтрагентыПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.Контрагенты.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта	= Новый Структура("Ссыка, Дата, Организация, Номенклатура,
		|ВидВзаиморасчетов, СтавкаНДС, СуммаВключаетНДС, ВалютаРегламентированногоУчета");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета	= ВалютаРегламентированногоУчета;
	
	ДанныеСтроки	= Новый Структура(
		"Контрагент, ДоговорКонтрагента, Количество,
		|Цена, Сумма, СуммаНДС, Всего,
		|ВыданСФ, СостояниеДокумента, СуммаСчетаФактуры, СуммаНДССчетаФактуры,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
	
	КонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтроки);
	
	УправлениеФормой(ЭтаФорма);
	
	ЗапуститьПроверкуКонтрагентов(Элементы.Контрагенты);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТипВыбранногоЗначения = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбранногоЗначения = Тип("СправочникСсылка.Контрагенты") Тогда
		
		НоваяСтрока = Объект.Контрагенты.Добавить();
		НоваяСтрока.Контрагент = ВыбранноеЗначение;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.ВыданСФ	   = ПлательщикНДС;
			
		ДанныеОбъекта	= Новый Структура("Ссыка, Дата, Организация, Номенклатура,
			|ВидВзаиморасчетов, СтавкаНДС, СуммаВключаетНДС, ВалютаРегламентированногоУчета");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ДанныеОбъекта.ВалютаРегламентированногоУчета	= ВалютаРегламентированногоУчета;
		
		ДанныеСтроки = Новый Структура(
			"Контрагент, ДоговорКонтрагента, Количество,
			|Цена, Сумма, СуммаНДС, Всего,
			|ВыданСФ, СостояниеДокумента, СуммаСчетаФактуры, СуммаНДССчетаФактуры,
			|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, НоваяСтрока);
		
		КонтрагентПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		УправлениеФормой(ЭтаФорма);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыДоговорКонтрагентаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Контрагенты.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта	= Новый Структура("Ссыка, Дата, Организация, Номенклатура,
		|ВидВзаиморасчетов, СтавкаНДС, СуммаВключаетНДС, ВалютаРегламентированногоУчета");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета	= ВалютаРегламентированногоУчета;
	
	ДанныеСтроки = Новый Структура(
		"Контрагент, ДоговорКонтрагента, Количество,
		|Цена, Сумма, СуммаНДС, Всего,
		|ВыданСФ, СостояниеДокумента, СуммаСчетаФактуры, СуммаНДССчетаФактуры,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
	
	ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтроки);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКоличествоПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Контрагенты.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
	
	ПриИзмененииСуммыСтроки(СтрокаТаблицы);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыЦенаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Контрагенты.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
	
	ПриИзмененииСуммыСтроки(СтрокаТаблицы);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Контрагенты.ТекущиеДанные;
	
	СтрокаТаблицы.Цена = ?(СтрокаТаблицы.Количество = 0, 0, СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество);
	
	ПриИзмененииСуммыСтроки(СтрокаТаблицы);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыСуммаНДСПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Контрагенты.ТекущиеДанные;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ЭтоНоваяСтрока = НоваяСтрока;

	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Элементы.Контрагенты.ТекущиеДанные;
	СтрокаТаблицы.ВыданСФ = ПлательщикНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыСтроки(СтрокаТаблицы)

	СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
		
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <СчетаФактуры>

&НаКлиенте
Процедура СчетаФактурыВыданСФПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.СчетаФактуры.ТекущиеДанные;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыСчетФактураПриИзменении(Элемент)

	СтрокаТаблицы	= Элементы.СчетаФактуры.ТекущиеДанные;
	
	СтрокаТаблицы.ВыданСФ	= ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыКонтрагентПриИзменении(Элемент)
	ЗапуститьПроверкуКонтрагентов(Элементы.СчетаФактуры);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Контрагенты.Очистить();
		ЗаполнитьПоВидуВзаиморасчетовНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВидуВзаиморасчетов(Команда)

	Если Объект.Контрагенты.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
	Иначе
		ЗаполнитьПоВидуВзаиморасчетовНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКонтрагенты(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы,
		Элементы.Контрагенты, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОтметкиУстановить(Команда)

	УстановитьСнятьОтметкиНаСервере(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтметкиСнять(Команда)

	УстановитьСнятьОтметкиНаСервере(Ложь);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// Субконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Субконто");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// КонтрагентыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КонтрагентыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СчетРасходов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетРасходов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТребуетсяСчетРасходовПоОказаниюУслуг", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();

	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента			= Объект.Дата;
	ВалютаРегламентированногоУчета 	= Константы.ВалютаРегламентированногоУчета.Получить();
	ТекущееЗначениеСуммаВключаетНДС = Объект.СуммаВключаетНДС;
	
	ОсновнаяНоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	
	СчетДоходовВедетсяУчетПоНоменклатурнымГруппам	=
		БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(Объект.СчетДоходов);
		
	НадписьПатент	= НСтр("ru = 'Патент:'");
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	
	УстановитьВидимость();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

// Внешний вид формы

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС			= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПрименениеУСН			= УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПлательщикНДФЛ			= УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	ПрименяетсяУСНПатент	= УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	ПлательщикЕНВД			= УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата);
	ПрименяетсяТолькоУСНПатент	= ПрименяетсяУСНПатент И НЕ ПлательщикЕНВД
		И УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();

	// Используется в условном оформлении
	ТребуетсяСчетРасходовПоОказаниюУслуг = 
		РегистрыНакопления.РеализацияУслуг.ТребуетсяСчетРасходовПоОказаниюУслуг(Объект.Дата, Объект.Организация);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()

	Элементы.СуммаВключаетНДС.Видимость	= (Объект.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ПодразделениеОрганизации.Доступность	= ЗначениеЗаполнено(Объект.Организация);
	Элементы.СтавкаНДС.Доступность					= ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Номенклатура);
	
	Если Форма.ПрименяетсяТолькоУСНПатент Тогда
		Элементы.ГруппаДеятельностьНаПатенте.ТекущаяСтраница	= Элементы.ГруппаНадписьПатент;
	ИначеЕсли Форма.ПрименяетсяУСНПатент Тогда
		Элементы.ГруппаДеятельностьНаПатенте.ТекущаяСтраница	= Элементы.ГруппаВыборДеятельностиНаПатенте;
	КонецЕсли;
	
	Элементы.Патент.Доступность	= Объект.ДеятельностьНаПатенте ИЛИ Форма.ПрименяетсяТолькоУСНПатент;
	
	Форма.НадписьСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выписаны счета-фактуры на сумму %1 %3, в т.ч. НДС %2 %3'"),
		Формат(Объект.Контрагенты.Итог("СуммаСчетаФактуры"), "ЧЦ=15; ЧДЦ=2; ЧН="),
		Формат(Объект.Контрагенты.Итог("СуммаНДССчетаФактуры"), "ЧЦ=15; ЧДЦ=2; ЧН="),
		Строка(Форма.ВалютаРегламентированногоУчета));
	
	СуммаНДС	= Объект.Контрагенты.Итог("СуммаНДС");
	Элементы.СчетУчетаНДСПоРеализации.АвтоОтметкаНезаполненного	= (СуммаНДС > 0);
	Элементы.СчетУчетаНДСПоРеализации.ОтметкаНезаполненного		= (СуммаНДС > 0);
	
	Если Форма.ИспользоватьОднуНоменклатурнуюГруппу И Форма.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам Тогда
		Элементы.Субконто.Видимость = Ложь;
	Иначе
		Элементы.Субконто.Видимость = Истина;
	КонецЕсли;
	
	
	ОбновитьИтоги(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Форма.ИтогиВсего = Форма.Объект.Контрагенты.Итог("Всего");

КонецПроцедуры

// При изменении реквизитов

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	Если ЗначениеЗаполнено(Объект.Патент) И Элементы.Патент.СписокВыбора.НайтиПоЗначению(Объект.Патент) = Неопределено Тогда
		Объект.Патент	= Неопределено;
	КонецЕсли;
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();
	
	Если НЕ ПрименяетсяУСНПатент Тогда
		Объект.ДеятельностьНаПатенте	= Ложь;
		Объект.Патент	= Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьЗначенияСвойств(Объект, НалоговыйУчетУСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВидВзаиморасчетовПриИзмененииНаСервере()

	ДанныеОбъекта	= Новый Структура("Ссыка, Дата, Организация, Номенклатура,
		|ВидВзаиморасчетов, СтавкаНДС, СуммаВключаетНДС, ВалютаРегламентированногоУчета");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета	= ВалютаРегламентированногоУчета;
	
	ВидыДоговоров = ПолучитьМассивВидовДоговоров();
	СтруктураОтбораДоговоров = Новый Структура(
		"ВидВзаиморасчетов, ВалютаВзаиморасчетов",
		Новый Структура("ЗначениеОтбора", Объект.ВидВзаиморасчетов),
		Новый Структура("ЗначениеОтбора", ВалютаРегламентированногоУчета));
	
	Для каждого СтрокаТаблицы Из Объект.Контрагенты Цикл
		
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			СтрокаТаблицы.ДоговорКонтрагента, СтрокаТаблицы.Контрагент, Объект.Организация,
			ВидыДоговоров, СтруктураОтбораДоговоров);
		
		Документы.ОказаниеУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТаблицы, "Контрагенты");
		
		ЗаполнитьЦенуТабЧасти(СтрокаТаблицы, ДанныеОбъекта);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрагентПриИзмененииНаСервере(ДанныеСтроки, Знач ДанныеОбъекта)

	ВидыДоговоров = ПолучитьМассивВидовДоговоров();
	СтруктураОтбораДоговоров = Новый Структура(
		"ВидВзаиморасчетов, ВалютаВзаиморасчетов",
		Новый Структура("ЗначениеОтбора", ДанныеОбъекта.ВидВзаиморасчетов),
		Новый Структура("ЗначениеОтбора", ДанныеОбъекта.ВалютаРегламентированногоУчета));
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДанныеСтроки.ДоговорКонтрагента, ДанныеСтроки.Контрагент, ДанныеОбъекта.Организация,
		ВидыДоговоров, СтруктураОтбораДоговоров);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, ДанныеОбъекта);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(ДанныеСтроки, Знач ДанныеОбъекта)

	Документы.ОказаниеУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, ДанныеСтроки, "Контрагенты");
	
	ЗаполнитьЦенуТабЧасти(ДанныеСтроки, ДанныеОбъекта);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтроки, 1);
	
	ДанныеСтроки.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ДанныеСтроки.Сумма, ДанныеОбъекта.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеОбъекта.СтавкаНДС));
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(ДанныеСтроки, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()
	
	ДанныеОбъекта	= Новый Структура("Дата, Организация, ДеятельностьНаПатенте,
		|Номенклатура, ВидВзаиморасчетов, СтавкаНДС, СуммаВключаетНДС, ВалютаРегламентированногоУчета,
		|Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета	= ВалютаРегламентированногоУчета;
	ДанныеОбъекта.Реализация = Истина;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Объект.Номенклатура, ДанныеОбъекта);
	
	Документы.ОказаниеУслуг.ЗаполнитьСчетаУчетаРасчетов(Объект, СведенияОНоменклатуре);
	
	Объект.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
	
	Для каждого СтрокаТаблицы Из Объект.Контрагенты Цикл
		
		ЗаполнитьЦенуТабЧасти(СтрокаТаблицы, ДанныеОбъекта);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
			
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура СтавкаНДСПриИзмененииНаСервере()
	
	Для каждого СтрокаТаблицы Из Объект.Контрагенты Цикл
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура СуммаВключаетНДСПриИзмененииНаСервере()

	СтароеСуммаВключаетНДС 			= ТекущееЗначениеСуммаВключаетНДС;
	ТекущееЗначениеСуммаВключаетНДС = Объект.СуммаВключаетНДС;
	
	ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС);
		
	Для каждого СтрокаТаблицы Из Объект.Контрагенты Цикл
		
		СтрокаТаблицы.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаТаблицы.Цена, СтароеСуммаВключаетНДС, Объект.СуммаВключаетНДС, ПроцентНДС);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма, Объект.СуммаВключаетНДС, ПроцентНДС);
			
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

// Прочий функционал

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоВидуВзаиморасчетовНаСервере()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоВидуВзаиморасчетов();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьОтметкиНаСервере(ВыданСФ)

	Отбор	= Новый Структура("ВыданСФ", НЕ ВыданСФ);
	НайденныеСтроки	= Объект.Контрагенты.НайтиСтроки(Отбор);
	СостояниеДокументаДляТЧ = ?(ВыданСФ, 1, 2);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		СтрокаТаблицы.ВыданСФ = ВыданСФ;
		СтрокаТаблицы.СостояниеДокумента = СостояниеДокументаДляТЧ;
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЦенуТабЧасти(ДанныеСтроки, Знач ДанныеОбъекта)

	ТипЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ДоговорКонтрагента, "ТипЦен");
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ДанныеОбъекта.Номенклатура,
			ТипЦен, ДанныеОбъекта.Дата, ДанныеОбъекта.ВалютаРегламентированногоУчета, 1, 1);
			
		ДанныеСтроки.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС"),
			ДанныеОбъекта.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеОбъекта.СтавкаНДС));
	Иначе
		ДанныеСтроки.Цена = 0;
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Контрагенты Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыКонтрагенты(СтрокаТаблицы, Знач СуммаВключаетНДС)

	СтрокаТаблицы.Всего	= СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	Если СтрокаТаблицы.ВыданСФ Тогда
		СтрокаТаблицы.СуммаСчетаФактуры		= СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		СтрокаТаблицы.СуммаНДССчетаФактуры	= СтрокаТаблицы.СуммаНДС;
		СтрокаТаблицы.СостояниеДокумента 	= 1;
	Иначе
		СтрокаТаблицы.СуммаСчетаФактуры		= 0;
		СтрокаТаблицы.СуммаНДССчетаФактуры	= 0;
		СтрокаТаблицы.СостояниеДокумента 	= 2;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПатентаНаСервере()

	Если ПрименяетсяУСНПатент Тогда
		МассивПатентовОрганизации	= Справочники.Патенты.ПолучитьПатентыОрганизации(Объект.Организация, Объект.Дата);
		Элементы.Патент.СписокВыбора.ЗагрузитьЗначения(МассивПатентовОрганизации);
	КонецЕсли;

КонецПроцедуры


#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтотОбъект);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтотОбъект, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтотОбъект, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтотОбъект, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
