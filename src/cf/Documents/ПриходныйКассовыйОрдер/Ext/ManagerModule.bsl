#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Для следующих операций правила заполнения пока не используются:
	// ПрочийПриход
	// РасчетыПоКредитамИЗаймам
	// РозничнаяВыручка
	
	// учет денег
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетКасса", "НаличныеДеньги");
	// ВалютаДокумента
	
	// учет расчетов
	// - расчеты с покупателем (разрешено погашать задолженность)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПокупателем");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПокупателя");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	
	// - аванс покупателя
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовПоАвансам", "АвансыПокупателя", Ложь);
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ОплатаПокупателя");
	
	// - расчеты с поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "РасшифровкаПлатежа", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ВозвратОтПоставщика");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику", Ложь);
	
	// - получение с банковского счета
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаРасчетовСКонтрагентом", "БезналичныеДеньги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПолучениеНаличныхВБанке");
	
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ВалютаДокумента");
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеДополнительныхДанных(Правила, ИмяВидаОперации, "ВидОперации");
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт
	
	Для каждого ИмяВидаОперации Из ВидыОперацийСчетаУчета() Цикл
		Если ДанныеЗаполнения.Свойство(ИмяВидаОперации) Тогда
			ДанныеЗаполнения[ИмяВидаОперации] = (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПКО[ИмяВидаОперации]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВидыОперацийСчетаУчета()
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить("ОплатаПокупателя");        // счет расчетов и счет авансов в списке
	ВидыОпераций.Добавить("ВозвратОтПоставщика");     // счет расчетов и счет авансов в списке
	ВидыОпераций.Добавить("ПолучениеНаличныхВБанке"); // один счет в шапке
	
	Возврат Новый ФиксированныйМассив(ВидыОпераций);
	
КонецФункции

#КонецОбласти

// Вызывается документом СчетФактураВыданный на аванс при вводе на основании
//
Функция ТекстЗапросаСчетФактураВыданныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ТаблицаДокумента.СчетНаОплату КАК СчетНаОплату,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаПлатежа) КАК Сумма,
	|	ТаблицаДокумента.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|	И ТаблицаДокумента.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.ПоДокументу)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам,
	|	ТаблицаДокумента.СчетНаОплату,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СпособПогашенияЗадолженности,
	|	ТаблицаДокумента.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПолучитьСписокВидовОперацийСРасшифровкойПлатежа() Экспорт
	
	СписокОпераций = Новый СписокЗначений();
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	
	Возврат(СписокОпераций);
	
КонецФункции

Функция ЕстьРасшифровкаПлатежа(Знач ВидОперации) Экспорт
	
	СписокВидовСРасшифровкойПлатежа = ПолучитьСписокВидовОперацийСРасшифровкойПлатежа();
	
	Возврат СписокВидовСРасшифровкойПлатежа.НайтиПоЗначению(ВидОперации) <> Неопределено;
	
КонецФункции

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.СубконтоКт1 КАК СубконтоКт1,
	|	Реквизиты.СубконтоКт2 КАК СубконтоКт2,
	|	Реквизиты.СубконтоКт3 КАК СубконтоКт3,
	|	Реквизиты.ПодразделениеКт КАК ПодразделениеКт,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.ВыручкаСНТТ КАК ВыручкаСНТТ,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ОплатаПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоРеализации,
	|	Реквизиты.Основание КАК Содержание,
	|	Реквизиты.Приложение КАК Приложение,
	|	ВЫРАЗИТЬ(Реквизиты.Контрагент КАК Справочник.Склады).НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументВРублях,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.ВыручкаСНТТ КАК ВыручкаСНТТ,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Реквизиты.ДокументВРублях КАК ДокументВРублях,
	|	1 КАК КоэффициентРуб,
	|	Реквизиты.Содержание КАК Содержание,
	|	Реквизиты.Приложение КАК Приложение,
	|	Реквизиты.ЭтоВозврат КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	Реквизиты        = ТаблицаРеквизиты[0];
	
	// Коэффициент пересчета сумм из валюты документа в рубли
	Если Реквизиты.ДокументВРублях Тогда
		КоэффициентРуб = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Дата);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
			ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
			
			Возврат;
		КонецЕсли;
		
		КоэффициентРуб           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
		Реквизиты.КоэффициентРуб = КоэффициентРуб;
	КонецЕсли;
	
	ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ВалютаРеглУчета     = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ);
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	Если Отказ ИЛИ НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Дата, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПлательщикНДС               = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация,               Реквизиты.Дата);
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Дата);
	
	ПараметрыПроведения.Вставить("ПлательщикНДС", ПлательщикНДС);
	
	Запрос.УстановитьПараметр("ВалютаДокумента",                 Реквизиты.ВалютаДокумента);
	Запрос.УстановитьПараметр("ТорговаяТочка",                   Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",                 ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ПлательщикНДС",                   ПлательщикНДС);
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСН",         УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация,                  Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСНПатент",   УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация,            Реквизиты.Дата));
	Запрос.УстановитьПараметр("РозничнаяТорговляОблагаетсяЕНВД", УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("МассивСчетовВыручкиЕНВД",         БухгалтерскийУчетВызовСервераПовтИсп.СчетаВыручкиЕНВД());
	Запрос.УстановитьПараметр("УчетПоПродажнойСтоимости",        СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	Для каждого Колонка Из ПараметрыПроведения.ТаблицаРеквизиты.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицыДокумента(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРозничнаяВыручка(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРозничнаяВыручкаНДС(НомераТаблиц,    ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПрочееПоступление(НомераТаблиц,      ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц,           ПараметрыПроведения, Реквизиты)
		;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	Реквизиты.Содержание = ТекстСодержанияПроводокДокумента(Реквизиты);
	Если ПараметрыПроведения.РасшифровкаПлатежа <> Неопределено Тогда
		ПараметрыПроведения.РасшифровкаПлатежа.ЗаполнитьЗначения(Реквизиты.Содержание,  "Содержание");
	КонецЕсли;
	
	Если ПараметрыПроведения.РозничнаяВыручкаНДС <> Неопределено Тогда
		ПараметрыПроведения.РозничнаяВыручкаНДС.ЗаполнитьЗначения(Реквизиты.Содержание, "Содержание");
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	&УчетПоПродажнойСтоимости КАК УчетПоПродажнойСтоимости,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ОплатаПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоРеализации,
	|	&ОрганизацияПрименяетУСН КАК УчитыватьЗадолженностьУСН,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ОплатаПокупателя)
	|			ТОГДА &ОрганизацияПрименяетУСНПатент
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьЗадолженностьУСНПатент,
	|	Реквизиты.Основание КАК Содержание,
	|	Реквизиты.Приложение КАК Приложение,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСчетаУчетаВНТТ", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетаРасходовОтРеализации.Период КАК Период,
	|	СчетаРасходовОтРеализации.ТорговаяТочка КАК ТорговаяТочка,
	|	СчетаРасходовОтРеализации.СчетДоходовОтРеализации КАК СчетДоходовОтРеализации,
	|	СчетаРасходовОтРеализации.СчетРасходовОтРеализации КАК СчетРасходовОтРеализации
	|ПОМЕСТИТЬ ВременнаяТаблицаСчетаУчетаВНТТ
	|ИЗ
	|	РегистрСведений.СчетаУчетаВНТТ.СрезПоследних(
	|			&Дата,
	|			&УчетПоПродажнойСтоимости
	|				И ТорговаяТочка = &ТорговаяТочка) КАК СчетаРасходовОтРеализации";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	// в данных видах операций табличная часть Расшифровка платежа не используется
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ЛичныеСредстваПредпринимателя
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником Тогда 
		
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	&Дата КАК РеквизитыДата,
	|	&Организация КАК РеквизитыОрганизация,
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	&Контрагент КАК РеквизитыКонтрагент,
	|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.Сделка КАК Сделка,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	&ВыручкаСНТТ КАК РеквизитыВыручкаСНТТ,
	|	&СчетКасса КАК РеквизитыСчетКасса,
	|	&ПодразделениеОрганизации КАК РеквизитыПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ДокументВРублях
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
	|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * &КоэффициентРуб
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ДокументВРублях
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
	|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * &КоэффициентРуб
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРуб,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫРАЗИТЬ(&Содержание КАК СТРОКА(150)) КАК Содержание
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура погашения задолженности выполняется для операций:
	// - ОплатаПокупателя
	// - ВозвратОтПоставщика
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
		|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ВЫРАЗИТЬ(""Поступление наличных"" КАК СТРОКА(150)) КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетАвансов,
		|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ВЫРАЗИТЬ(""Поступление наличных"" КАК СТРОКА(150)) КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРозничнаяВыручка(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПКО.РозничнаяВыручка ИЛИ НЕ Реквизиты.ВыручкаСНТТ Тогда
		ПараметрыПроведения.Вставить("РозничнаяВыручка", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Период,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыОрганизация КАК Организация,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Склад,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК СчетУчетаДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ВЫБОР
	|		КОГДА СчетаУчетаВНТТ.СчетДоходовОтРеализации ЕСТЬ НЕ NULL 
	|				И СчетаУчетаВНТТ.СчетДоходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА СчетаУчетаВНТТ.СчетДоходовОтРеализации
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
	|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетДоходов,
	|	ВЫБОР
	|		КОГДА СчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
	|				И СчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА СчетаУчетаВНТТ.СчетРасходовОтРеализации
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
	|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетРасходов,
	|	&НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ РозничнаяВыручка
	|ИЗ
	|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетаУчетаВНТТ КАК СчетаУчетаВНТТ
	|		ПО СчетаУчетаВНТТ.ТорговаяТочка = &ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничнаяВыручка.НомерСтроки КАК НомерСтроки,
	|	РозничнаяВыручка.Подразделение КАК Подразделение,
	|	РозничнаяВыручка.Склад КАК Склад,
	|	РозничнаяВыручка.СчетУчетаДенежныхСредств КАК СчетУчетаДенежныхСредств,
	|	РозничнаяВыручка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РозничнаяВыручка.СтавкаНДС КАК СтавкаНДС,
	|	РозничнаяВыручка.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РозничнаяВыручка.СуммаРуб КАК СуммаРуб,
	|	РозничнаяВыручка.СуммаНДСРуб КАК СуммаНДСРуб,
	|	РозничнаяВыручка.СчетДоходов КАК СчетДоходов,
	|	РозничнаяВыручка.СчетРасходов КАК СчетРасходов,
	|	РозничнаяВыручка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	РозничнаяВыручка КАК РозничнаяВыручка
	|
	|УПОРЯДОЧИТЬ ПО
	|	РозничнаяВыручка.НомерСтроки";
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРозничнаяВыручка", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РозничнаяВыручка", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРозничнаяВыручкаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПКО.РозничнаяВыручка
		ИЛИ НЕ Реквизиты.ВыручкаСНТТ ИЛИ НЕ ПараметрыПроведения.ПлательщикНДС Тогда
		ПараметрыПроведения.Вставить("РозничнаяВыручкаНДС", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС) КАК СчетУчетаНДС,
	|	СУММА(ТаблицаДокумента.СуммаРуб - ТаблицаДокумента.СуммаНДСРуб) КАК СуммаБезНДС,
	|	СУММА(ТаблицаДокумента.СуммаНДСРуб) КАК НДС,
	|	НЕОПРЕДЕЛЕНО КАК Содержание,
	|	ТаблицаДокумента.НоменклатурнаяГруппа КАК Субконто,
	|	ТаблицаДокумента.СчетДоходов КАК СчетДоходов,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Подразделение КАК Подразделение,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование
	|ИЗ
	|	РозничнаяВыручка КАК ТаблицаДокумента
	|ГДЕ
	|	(НЕ ТаблицаДокумента.СчетДоходов В (&МассивСчетовВыручкиЕНВД)
	|			ИЛИ ТаблицаДокумента.СуммаНДСРуб <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Подразделение,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СчетДоходов,
	|	ТаблицаДокумента.НоменклатурнаяГруппа";
	
	НомераТаблиц.Вставить("РозничнаяВыручкаНДС", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПрочееПоступление(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура прочего поступления вызывается для операций:
	// - ПрочийПриход
	// - ЛичныеСредстваПредпринимателя
	// - ПолучениеНаличныхВБанке
	// - ВозвратОтПодотчетногоЛица
	// - РасчетыПоКредитамИЗаймам
	// - ВозвратЗаймаРаботником
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетКт,
		|	Реквизиты.СубконтоКт1 КАК СубконтоКт1,
		|	Реквизиты.СубконтоКт2 КАК СубконтоКт2,
		|	Реквизиты.СубконтоКт3 КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеКт КАК ПодразделениеКт,
		|	Реквизиты.СчетКасса КАК СчетДт,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ЛичныеСредстваПредпринимателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению) КАК СчетКт,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СчетКасса КАК СчетДт,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетКт,
		|	Реквизиты.Контрагент КАК СубконтоКт1,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СчетКасса КАК СчетДт,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА Реквизиты.ДокументВРублях
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
		|	КОНЕЦ КАК СчетКт,
		|	Реквизиты.Контрагент КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СчетКасса КАК СчетДт,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК СубконтоКт1,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеКт,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК СчетДт,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК ПодразделениеДт,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК ВалютнаяСумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам) КАК СчетКт,
		|	Реквизиты.Контрагент КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
		|	Реквизиты.СчетКасса КАК СчетДт,
		|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
		|	Реквизиты.СуммаДокумента КАК ВалютнаяСумма,
		|	ВЫРАЗИТЬ(Реквизиты.СуммаДокумента * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб
		|ИЗ
		|	Реквизиты КАК Реквизиты";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежаПрочее", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежаПрочее", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстСодержанияПроводокДокумента(СтруктураПараметров)
	
	Содержание = СтруктураПараметров.Содержание
		+ ?(ПустаяСтрока(СтруктураПараметров.Приложение), "", ", " + СтруктураПараметров.Приложение);
	
	Возврат Содержание;
	
КонецФункции

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРуб
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДСРуб
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаДокумента
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДСРуб * ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|ГДЕ
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ ИБ

// Внешний интерфейс обновления ИБ

Процедура ЗаполнитьРеквизитыНастройкиУСНДляАктуальныхДокументов() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГраницаАктуальногоПериода",
		УчетУСН.ДатаНачалаАктуальногоПериодаДляПереходаНаУпрощеннуюНастройкуКУДиР());
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	ВидыОперацийАвансаУСН = Новый Массив;
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика);
	Запрос.УстановитьПараметр("ВидыОперацийАванса", ВидыОперацийАвансаУСН);
	
	ВидыОперацийПрочиеПоступления = Новый Массив;
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПКО.ПрочийПриход);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	Запрос.УстановитьПараметр("ВидыОперацийПрочиеПоступления", ВидыОперацийПрочиеПоступления);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНПатент
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	(РегУПО1.ПрименяетсяУСН
	|			ИЛИ РегУПО1.ПрименяетсяУСНПатент)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	(УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|			ИЛИ УчетнаяПолитикаОрганизаций.ПрименяетсяУСНПатент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.ДатаДокумента КАК ДатаДокумента,
	|	ВложенныйЗапрос.ВидОбработкиОбновления
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПКОРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|		ПКОРасшифровкаПлатежа.Ссылка.Дата КАК ДатаДокумента,
	|		""ЗаполнитьПорядокОтраженияАванса"" КАК ВидОбработкиОбновления
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПКОРасшифровкаПлатежа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО ПКОРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|				И ПКОРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И ПКОРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		ПКОРасшифровкаПлатежа.ПорядокОтраженияАванса В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка))
	|		И ПКОРасшифровкаПлатежа.Ссылка.Дата >= &ГраницаАктуальногоПериода
	|		И ПКОРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийАванса)
	|		И ПКОРасшифровкаПлатежа.Ссылка.УдалитьПорядокОтраженияАванса <> ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПКОРасшифровкаПлатежа.Ссылка,
	|		ПКОРасшифровкаПлатежа.Ссылка.Дата,
	|		""ЗаполнитьДоходыУСНПрочиеРасчеты""
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПКОРасшифровкаПлатежа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО ПКОРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|				И ПКОРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И ПКОРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		ПКОРасшифровкаПлатежа.Ссылка.Дата >= &ГраницаАктуальногоПериода
	|		И ПКОРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам)
	|		И ПКОРасшифровкаПлатежа.Ссылка.Графа5_УСН <> 0
	|		И НЕ ПКОРасшифровкаПлатежа.Ссылка.УдалитьРучнаяНастройка_УСН
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПКОРасшифровкаПлатежа.Ссылка,
	|		ПКОРасшифровкаПлатежа.Ссылка.Дата
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ПКОРасшифровкаПлатежа.ДоходыУСН) = 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходныйКассовыйОрдер.Ссылка,
	|		ПриходныйКассовыйОрдер.Ссылка.Дата,
	|		""ОбработатьРучнуюНастройкуУСНПрочиеРасчеты""
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО ПриходныйКассовыйОрдер.Организация = ВТ_УчетнаяПолитика.Организация
	|				И ПриходныйКассовыйОрдер.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И ПриходныйКассовыйОрдер.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		ПриходныйКассовыйОрдер.Дата >= &ГраницаАктуальногоПериода
	|		И ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам)
	|		И ПриходныйКассовыйОрдер.УдалитьРучнаяНастройка_УСН
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходныйКассовыйОрдер.Ссылка,
	|		ПриходныйКассовыйОрдер.Ссылка.Дата,
	|		""ОбработатьРучнуюНастройкуУСНПрочиеПоступления""
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|			ПО ПриходныйКассовыйОрдер.Организация = ВТ_УчетнаяПолитика.Организация
	|				И ПриходныйКассовыйОрдер.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|				И ПриходныйКассовыйОрдер.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|	ГДЕ
	|		ПриходныйКассовыйОрдер.Дата >= &ГраницаАктуальногоПериода
	|		И ПриходныйКассовыйОрдер.ВидОперации В(&ВидыОперацийПрочиеПоступления)
	|		И ПриходныйКассовыйОрдер.УдалитьРучнаяНастройка_УСН) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаПоДокументу Из РезультатЗапроса Цикл
		
		Попытка
			
			Если СтрокаПоДокументу.ВидОбработкиОбновления = "ЗаполнитьПорядокОтраженияАванса" Тогда
				ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежа(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ЗаполнитьДоходыУСНПрочиеРасчеты" Тогда
				ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ОбработатьРучнуюНастройкуУСНПрочиеРасчеты" Тогда
				ОбработатьРучнуюНастройкуУСНПрочиеРасчеты(СтрокаПоДокументу);
			ИначеЕсли СтрокаПоДокументу.ВидОбработкиОбновления = "ОбработатьРучнуюНастройкуУСНПрочиеПоступления" Тогда
				ОбработатьРучнуюНастройкуУСНПрочиеПоступления(СтрокаПоДокументу);
			КонецЕсли; 
			
		Исключение
			// Если не удалось обработать какой-либо документ, пропускаем и обрабатываем позднее (отложенно).
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"), 
					СтрокаПоДокументу.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПриходныйКассовыйОрдер, СтрокаПоДокументу.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежаОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	ВидыОперацийАвансаУСН = Новый Массив;
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	ВидыОперацийАвансаУСН.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика);
	Запрос.УстановитьПараметр("ВидыОперацийАванса", ВидыОперацийАвансаУСН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСНПатент
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	(РегУПО1.ПрименяетсяУСН
	|			ИЛИ РегУПО1.ПрименяетсяУСНПатент)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	(УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|			ИЛИ УчетнаяПолитикаОрганизаций.ПрименяетсяУСНПатент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ПКОРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ПКОРасшифровкаПлатежа.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПКОРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ПКОРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|			И ПКОРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И ПКОРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	ПКОРасшифровкаПлатежа.ПорядокОтраженияАванса В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка))
	|	И ПКОРасшифровкаПлатежа.Ссылка.ВидОперации В(&ВидыОперацийАванса)
	|	И ПКОРасшифровкаПлатежа.Ссылка.УдалитьПорядокОтраженияАванса <> ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежа(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПриходныйКассовыйОрдер, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежаОтложенно
				|не удалось обработать некоторые документы Поступление наличных (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПриходныйКассовыйОрдер,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежаОтложенно
					|обработала очередную порцию документов Поступление наличных: %1'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежаОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ПКОРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ПКОРасшифровкаПлатежа.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПКОРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ПКОРасшифровкаПлатежа.Ссылка.Организация = ВТ_УчетнаяПолитика.Организация
	|			И ПКОРасшифровкаПлатежа.Ссылка.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И ПКОРасшифровкаПлатежа.Ссылка.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	ПКОРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам)
	|	И ПКОРасшифровкаПлатежа.Ссылка.Графа5_УСН <> 0
	|	И НЕ ПКОРасшифровкаПлатежа.Ссылка.УдалитьРучнаяНастройка_УСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ПКОРасшифровкаПлатежа.Ссылка,
	|	ПКОРасшифровкаПлатежа.Ссылка.Дата
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПКОРасшифровкаПлатежа.ДоходыУСН) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПриходныйКассовыйОрдер, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежаОтложенно
				|не удалось обработать некоторые документы Поступление наличных (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПриходныйКассовыйОрдер,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежаОтложенно
					|обработала очередную порцию документов Поступление наличных: %1'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРучнуюНастройкуУСНПрочиеРасчетыОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	ПриходныйКассовыйОрдер.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ПриходныйКассовыйОрдер.Организация = ВТ_УчетнаяПолитика.Организация
	|			И ПриходныйКассовыйОрдер.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И ПриходныйКассовыйОрдер.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам)
	|	И ПриходныйКассовыйОрдер.УдалитьРучнаяНастройка_УСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьРучнуюНастройкуУСНПрочиеРасчеты(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"), 
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПриходныйКассовыйОрдер, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбработатьРучнуюНастройкуУСНПрочиеРасчетыОтложенно
				|не удалось обработать некоторые документы Поступление наличных (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПриходныйКассовыйОрдер,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбработатьРучнуюНастройкуУСНПрочиеРасчетыОтложенно
					|обработала очередную порцию документов Поступление наличных: %1'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРучнуюНастройкуУСНПрочиеПоступленияОтложенно(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериодаВыборки", '20191231235959');
	
	ВидыОперацийПрочиеПоступления = Новый Массив;
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПКО.ПрочийПриход);
	ВидыОперацийПрочиеПоступления.Добавить(Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	Запрос.УстановитьПараметр("ВидыОперацийПрочиеПоступления", ВидыОперацийПрочиеПоступления);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|ПОМЕСТИТЬ ВТ_РегУП
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_РегУП КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегУП КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL 
	|				И УчетнаяПолитикаОрганизаций.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитикаОрганизаций.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_РегУП КАК УчетнаяПолитикаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитикаОрганизаций.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитикаОрганизаций.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодНач,
	|	ПериодКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	ПриходныйКассовыйОрдер.Ссылка.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ПриходныйКассовыйОрдер.Организация = ВТ_УчетнаяПолитика.Организация
	|			И ПриходныйКассовыйОрдер.Дата >= ВТ_УчетнаяПолитика.ПериодНач
	|			И ПриходныйКассовыйОрдер.Дата <= ВТ_УчетнаяПолитика.ПериодКон
	|ГДЕ
	|	ПриходныйКассовыйОрдер.ВидОперации В(&ВидыОперацийПрочиеПоступления)
	|	И ПриходныйКассовыйОрдер.УдалитьРучнаяНастройка_УСН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента УБЫВ,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьРучнуюНастройкуУСНПрочиеПоступления(СтрокаРезультата);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"), 
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПриходныйКассовыйОрдер, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ОбработатьРучнуюНастройкуУСНПрочиеПоступленияОтложенно
				|не удалось обработать некоторые документы Поступление наличных (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.ПриходныйКассовыйОрдер,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ОбработатьРучнуюНастройкуУСНПрочиеПоступленияОтложенно
					|обработала очередную порцию документов Поступление наличных: %1'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

// Служебные обработчики обновления ИБ

// Заполняет новый реквизит "ПорядокОтраженияАванса" в ТЧ "РасшифровкаПлатежа" у переданного документа.
//
Процедура ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежа(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПриходныйКассовыйОрдер");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.УдалитьПорядокОтраженияАванса) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		// Обработка объекта.
		// 1. Переносим порядок отражения авансов из шапки в ТЧ
		ПорядокОтраженияАвансаДляТЧ = Неопределено;
		Если ДокументОбъект.УдалитьПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходПатент Тогда
			ПорядокОтраженияАвансаДляТЧ = ДокументОбъект.Патент;
		Иначе
			ПорядокОтраженияАвансаДляТЧ = ДокументОбъект.УдалитьПорядокОтраженияАванса;
		КонецЕсли;
		
		Для каждого СтрокаПлатеж Из ДокументОбъект.РасшифровкаПлатежа Цикл
			СтрокаПлатеж.ПорядокОтраженияАванса = ПорядокОтраженияАвансаДляТЧ;
		КонецЦикла;
		
		ДокументОбъект.УдалитьПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ПустаяСсылка();
		
		// 2. Если отражение в КУДиР настроено вручную (допускалось при УСН-доходы) - установим признак ручной корректировки движений
		Если ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			ДокументОбъект.РучнаяКорректировка = Истина;
			ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		КонецЕсли; 
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет новый реквизит "ДоходыУСН" в ТЧ "РасшифровкаПлатежа" у переданного документа
// (для ситуации, когда настройка УСН не редактировалась пользователем).
//
Процедура ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежа(СтрокаПоДокументу)

	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПриходныйКассовыйОрдер");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если ДокументОбъект.Графа5_УСН = ДокументОбъект.РасшифровкаПлатежа.Итог("ДоходыУСН")
			И НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта.
		КоэффициентыРаспределения = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
		МассивРаспределенныхДоходов = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ДокументОбъект.Графа5_УСН, КоэффициентыРаспределения);
		Если МассивРаспределенныхДоходов <> Неопределено Тогда
			ДокументОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивРаспределенныхДоходов, "ДоходыУСН");
		КонецЕсли;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для поступлений по прочим расчетам, в которых настройка УСН отредактирована пользователем вручную:
//    если отредактированы только доходы УСН - распределяет сумму доходов по строкам ТЧ "РасшифровкаПлатежа";
//    если иные настройки КУДиР отличаются от умолчаний - выставляется признак ручной корректировки движений
Процедура ОбработатьРучнуюНастройкуУСНПрочиеРасчеты(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПриходныйКассовыйОрдер");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Обработка объекта.
		Если ДокументОбъект.Графа5_УСН <> 0 И ДокументОбъект.РасшифровкаПлатежа.Количество() <> 0 Тогда
			КоэффициентыРаспределения = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
			МассивРаспределенныхДоходов = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ДокументОбъект.Графа5_УСН, КоэффициентыРаспределения);
			ДокументОбъект.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивРаспределенныхДоходов, "ДоходыУСН");
		КонецЕсли;
		
		Если ДокументОбъект.Графа6_УСН <> 0 ИЛИ ДокументОбъект.Графа7_УСН <> 0 ИЛИ ДокументОбъект.НДС_УСН <> 0
			ИЛИ ДокументОбъект.ДоходыЕНВД_УСН ИЛИ ДокументОбъект.РасходыЕНВД_УСН Тогда
				ДокументОбъект.РучнаяКорректировка = Истина;
		КонецЕсли;
		
		ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для прочих поступлений, в которых настройка УСН отредактирована пользователем вручную:
//    если отредактированы только доходы УСН, и вид операции "ПрочееПоступление" - ручная настройка УСН сбрасывается;
//    для остальных видов операций - выставляется признак ручной корректировки движений.
Процедура ОбработатьРучнуюНастройкуУСНПрочиеПоступления(СтрокаПоДокументу)
	
	НачатьТранзакцию();
	Попытка
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПриходныйКассовыйОрдер");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаПоДокументу.Ссылка);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		ДокументОбъект = СтрокаПоДокументу.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если ДокументОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если НЕ ДокументОбъект.УдалитьРучнаяНастройка_УСН Тогда
			// документ уже обработан
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
			Если НЕ ДокументОбъект.РучнаяКорректировка И (ДокументОбъект.Графа6_УСН <> 0 ИЛИ ДокументОбъект.Графа7_УСН <> 0 ИЛИ ДокументОбъект.НДС_УСН <> 0
				ИЛИ ДокументОбъект.ДоходыЕНВД_УСН ИЛИ ДокументОбъект.РасходыЕНВД_УСН) Тогда
				ДокументОбъект.РучнаяКорректировка = Истина;
				// Иначе: если заданы только ДоходыУСН (Графа 5) - признак ручной корректировки не изменяем
			КонецЕсли;
		Иначе
			ДокументОбъект.РучнаяКорректировка = Истина;
		КонецЕсли;
		
		ДокументОбъект.УдалитьРучнаяНастройка_УСН = Ложь;
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приходный кассовый ордер (КО-1)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПКО";
	КомандаПечати.Представление = НСтр("ru = 'Приходный кассовый ордер (КО-1)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Поступление наличных""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет(ВалютаРегламентированногоУчета, Шапка) 
	
	ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(Шапка.ВидОперации);
	ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(Шапка.ВидОперации);
	
	КодыСчетов   = Новый Структура("Дебет, Кредит");
	
	// Определяем код счета дебета
	КассаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Шапка.СчетКасса).Валютный;
	ВалютаРег    = ВалютаРегламентированногоУчета;
	
	СчетДт = Шапка.СчетКасса;
	КодыСчетов.Дебет = СчетДт;
	
	Если Шапка.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица Тогда
		Если КассаВВалюте Тогда
			СтрокаКредит = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал).Код;
		Иначе
			СтрокаКредит = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами).Код;
		КонецЕсли;
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		СтрокаКредит = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Шапка.СчетУчетаРасчетовСКонтрагентом).Код;
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		СтрокаКредит = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Шапка.СчетУчетаРасчетовСКонтрагентом).Код;
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		СтрокаКредит = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Шапка.СчетУчетаРасчетовСКонтрагентом).Код;
	ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником Тогда
		СтрокаКредит = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам).Код;
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ТабСчет = Шапка.РасшифровкаПлатежа.Выгрузить();
		ТабСчет.Свернуть("СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам", "СуммаПлатежа");
		СтрокаКредит = "";
		Для каждого Строка Из ТабСчет Цикл
			СчетУчетаРасчетовСКонтрагентомКод = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Строка.СчетУчетаРасчетовСКонтрагентом).Код;
			СчетУчетаРасчетовПоАвансамКод     = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Строка.СчетУчетаРасчетовПоАвансам).Код;
			Если НЕ Строка.СчетУчетаРасчетовСКонтрагентом.Пустая()
				И Найти(СтрокаКредит, СчетУчетаРасчетовСКонтрагентомКод) = 0 Тогда
				СтрокаКредит = СтрокаКредит + ", " + СчетУчетаРасчетовСКонтрагентомКод;
			КонецЕсли;
			Если НЕ Строка.СчетУчетаРасчетовПоАвансам.Пустая()
				И Найти(СтрокаКредит, СчетУчетаРасчетовПоАвансамКод) = 0 Тогда
				СтрокаКредит = СтрокаКредит + ", " + СчетУчетаРасчетовПоАвансамКод;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаКредит = Сред(СтрокаКредит, 2);
	КонецЕсли;
	
	КодыСчетов.Кредит = СтрокаКредит;
	
	Возврат КодыСчетов;
	
КонецФункции

Функция РубКоп(Сумма)
	
	Руб = Цел(Сумма);
	Коп = Окр(100 *(Сумма - Руб), 0, 1);
	СуммаРубКоп = "" + Руб + " руб. " + Цел(Коп / 10) + (Коп - 10 * Цел(Коп / 10)) + " коп.";
	
	Возврат СуммаРубКоп;
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
//
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыПКО()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Номер,
	|	ПриходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	|	ПриходныйКассовыйОрдер.Ссылка,
	|	ПриходныйКассовыйОрдер.Организация,
	|	ПриходныйКассовыйОрдер.СчетКасса,
	|	ПриходныйКассовыйОрдер.СчетУчетаРасчетовСКонтрагентом,
	|	ПриходныйКассовыйОрдер.Контрагент,
	|	ПриходныйКассовыйОрдер.ВидОперации,
	|	ПриходныйКассовыйОрдер.Контрагент.Представление КАК Контрагент,
	|	ПриходныйКассовыйОрдер.ПринятоОт КАК ПринятоОт,
	|	ПриходныйКассовыйОрдер.Основание КАК Основание,
	|	ПриходныйКассовыйОрдер.Приложение КАК Приложение,
	|	ПриходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	|	ПриходныйКассовыйОрдер.ВалютаДокумента,
	|	ПриходныйКассовыйОрдер.ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	ПриходныйКассовыйОрдер.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ПриходныйКассовыйОрдер.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПриходныйКассовыйОрдер.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ПриходныйКассовыйОрдер.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	ПриходныйКассовыйОрдер.СтавкаНДС,
	|	ПриходныйКассовыйОрдер.РасшифровкаПлатежа.(
	|		Ссылка,
	|		НомерСтроки,
	|		ДоговорКонтрагента,
	|		Сделка,
	|		КурсВзаиморасчетов,
	|		СуммаПлатежа,
	|		КратностьВзаиморасчетов,
	|		СуммаВзаиморасчетов,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		СтатьяДвиженияДенежныхСредств,
	|		СчетУчетаРасчетовСКонтрагентом,
	|		СчетУчетаРасчетовПоАвансам,
	|		СчетНаОплату,
	|		СпособПогашенияЗадолженности
	|	)
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйКассовыйОрдер.Дата,
	|	ПриходныйКассовыйОрдер.Ссылка,
	|	ПриходныйКассовыйОрдер.РасшифровкаПлатежа.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует табличный документ с печатной формой ПКО
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПКО(МассивОбъектов, ОбъектыПечати)
	Перем ПодразделениеОтветственныхЛиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КО1");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыПКО();
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(Шапка.ВидОперации);
		ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(Шапка.ВидОперации);
		
		Валютный = Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета;
		
		// Выводим шапку ПКО
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		
		ОбластьМакета.Параметры.СуммаРубКоп       = ?(Валютный, Формат(Шапка.Сумма, "ЧЦ=15; ЧДЦ=2") + " " + СокрЛП(Шапка.ВалютаДокумента), РубКоп(Шапка.Сумма));
		ОбластьМакета.Параметры.Сумма             = Формат(Шапка.Сумма, "ЧЦ=15; ЧДЦ=2") + ?(Валютный, " " + СокрЛП(Шапка.ВалютаДокумента), "");
		ОбластьМакета.Параметры.СуммаПрописью     = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.НомерДокумента    = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Истина, Ложь);
		
		КодыСчетСубсчет = ОпределитьКодыСчетСубсчет(ВалютаРегламентированногоУчета, Шапка);
		
		ОбластьМакета.Параметры.КодДебета = КодыСчетСубсчет.Дебет;
		ОбластьМакета.Параметры.СубСчет   = КодыСчетСубсчет.Кредит;
		
		ТабНДС = Шапка.РасшифровкаПлатежа.Выгрузить();
		ТабНДС.Свернуть("СтавкаНДС", "СуммаНДС");
		
		ТекстСуммаНДС = "";
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам 
			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
			
			Для каждого СтрокаНДС Из ТабНДС Цикл
				ТекстСуммаНДС = ТекстСуммаНДС + Символы.ПС + "НДС ("
					+ ?(НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") "
					+ Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + " " + Шапка.ВалютаПредставление;
			КонецЦикла;
			
		Иначе
			ТекстСуммаНДС = ТекстСуммаНДС + Символы.ПС + "НДС (без налога) "
				+ Формат(0, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + " " + Шапка.ВалютаПредставление;
		КонецЕсли;
		
		ТекстСуммаНДС = Сред(ТекстСуммаНДС, 2);
		
		ОбластьМакета.Параметры.ВТомЧисле = ТекстСуммаНДС;
		
		ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
		
		ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
		
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
		ОбластьМакета.Параметры.ФИОКассира            = ОтветственныеЛица.КассирПредставление;
		
		ОбластьМакета.Параметры.ПринятоОт  = Шапка.ПринятоОт;
		ОбластьМакета.Параметры.Основание  = Шапка.Основание;
		ОбластьМакета.Параметры.Приложение = Шапка.Приложение;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Проверяем, нужно ли для макета ПКО формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПКО") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПКО", "Приходный кассовый ордер", ПечатьПКО(МассивОбъектов, ОбъектыПечати),,
			"ОбщийМакет.ПФ_MXL_КО1");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли
