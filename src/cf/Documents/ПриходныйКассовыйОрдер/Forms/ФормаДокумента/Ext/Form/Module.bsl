////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	КомандаНапечататьЧек = Элементы.Вставить("ФормаНапечататьЧек", Тип("КнопкаФормы"), Элементы.ГруппаГлобальныеКоманды);
	КомандаНапечататьЧек.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КомандаНапечататьЧек.ИмяКоманды = "НапечататьЧек";
	
	УстановитьВидимостьСчетовУчета();
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		
		// Если документ скопирован и есть расчеты в у.е., пересчитаем суммы взаиморасчетов на дату документа
		Если ЕстьРасчетыВУсловныхЕдиницах И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПересчитатьСуммыВзаиморасчетов();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтотОбъект, Элементы.ИнформационныеСсылки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// Инициализируем свойства платежа
	ИнициализироватьСвойстваПлатежаНаСервере(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПриходныйКассовыйОрдер";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ОрганизацияПриИзмененииСервер();
		Иначе
			Элементы.Контрагент.Видимость = ВидимостьБанковскогоСчета(Объект.Организация);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если есть договоры в у.е., то необходимо получение курсов валют.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ЕстьРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	// Проверка на изменение сроков действия патентов.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ПрименяетсяУСНПатент;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКассаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетКасса) Тогда
		Возврат;
	КонецЕсли;
	
	СчетКассаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДокументаПриИзмененииСервер(Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	УстановитьПодразделениеКт(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятоОтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаСписка",
		Новый Структура("РежимВыбора", Истина), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятоОтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормированиеПринятоОт(ЭтотОбъект, ВыбранноеЗначение);
	
	Модифицированность   = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении()
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
		ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, ЭтотОбъект);
		ОбновитьИтогиУСН(ЭтотОбъект);
		ОбновитьИтоги(ЭтотОбъект);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка")
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		ОбновитьИтоги(ЭтотОбъект);
		Если ПрименениеУСН И УчетВПродажныхЦенах И Объект.ВыручкаСНТТ Тогда
			ЗаполнитьОтражениеВУСННаСервере();
		КонецЕсли;
	ИначеЕсли ПрименениеУСН И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочийПриход") Тогда
		ЗаполнитьОтражениеВУСННаСервере();
		СформироватьПрочееТекстДоходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, Объект.СчетУчетаРасчетовСКонтрагентом);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
	
	ЗначенияСубконто = Новый Соответствие;
	Если Объект.СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеДоходы") Тогда
		ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	КонецЕсли;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентом, Объект, ПоляОбъекта,, ЗначенияСубконто);
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		СформироватьПрочееТекстДоходыУСН(ЭтотОбъект);
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПрочиеПриИзменении(Элемент)
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт1ПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СубконтоКт1) Тогда
		
		Если ТипЗнч(Объект.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") Тогда
			НаименованиеКонтрагента = НаименованиеКонтрагента(Объект.СубконтоКт1);
			Объект.ПринятоОт = ?(ПустаяСтрока(НаименованиеКонтрагента.НаименованиеПолное),
				НаименованиеКонтрагента.Наименование, НаименованиеКонтрагента.НаименованиеПолное);
		ИначеЕсли ТипЗнч(Объект.СубконтоКт1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ФормированиеПринятоОт(ЭтотОбъект, Объект.СубконтоКт1);
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = СписокПараметровВыбораСубконто(ЭтотОбъект, Объект, "СубконтоКт%Индекс%");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаПатентеПриИзменении(Элемент)
	
	Если Объект.ДеятельностьНаПатенте Тогда
		
		Если Элементы.Патент.СписокВыбора.Количество() = 1 Тогда
			Объект.Патент = Элементы.Патент.СписокВыбора[0].Значение;
		КонецЕсли;
		
		Если ПрименениеУСН И УчетВПродажныхЦенах И Объект.ВыручкаСНТТ Тогда
			Объект.Графа5_УСН = 0;
			Объект.Графа7_УСН = 0;
			Объект.НДС_УСН    = 0;
		КонецЕсли;
		
	Иначе
		Объект.Патент = Неопределено;
		Если ПрименениеУСН И УчетВПродажныхЦенах И Объект.ВыручкаСНТТ Тогда
			ЗаполнитьОтражениеВУСННаСервере();
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Патент) Тогда
		Объект.ДеятельностьНаПатенте = Истина;
		Если ПрименениеУСН И УчетВПродажныхЦенах И Объект.ВыручкаСНТТ Тогда
			Объект.Графа5_УСН = 0;
			Объект.Графа7_УСН = 0;
			Объект.НДС_УСН    = 0;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееДоходыУСНПриИзменении(Элемент)
	
	СформироватьПрочееТекстДоходыУСН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РозничнаяВыручкаРасходыУСНПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ОбновитьИтоги(ЭтотОбъект);
	ОбновитьИтогиУСН(ЭтотОбъект);
	ОпределитьНаличиеРасчетовВУсловныхЕдиницах(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ОбновитьИтоги(ЭтотОбъект);
		ОбновитьИтогиУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = Объект.РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте();
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
		Если ПрименениеУСН ИЛИ ПрименяетсяУСНПатент Тогда
			СтрокаПлатеж.ПолеОтражениеАванса    = УчетУСНКлиентСервер.ПредставлениеПорядкаОтраженияАванса(СтрокаПлатеж.ПорядокОтраженияАванса,
				ПорядокОтраженияАвансаСоответствиеЗначений, Элементы.РасшифровкаПлатежаПолеОтражениеАванса.СписокВыбора);
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И ЕстьРасчетыВУсловныхЕдиницах Тогда
		ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента = СвойстваПлатежа.ДоговорКонтрагента Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	
	ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУсловныхЕдиницах ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	
	ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ЗначенияЗаполнения = Новый Структура;
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора));
	
	ЗначенияЗаполнения.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	Если ОплатаВВалюте Тогда
		ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
		ЗначенияЗаполнения.Вставить("Валютный", ОплатаВВалюте);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств <> СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств <> СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу") Тогда
		СтрокаПлатеж.Сделка = Неопределено;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета("РасшифровкаПлатежа.СпособПогашенияЗадолженности", Объект, СтрокаПлатеж);
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") Тогда
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана дата.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана организация.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан контрагент.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан договор.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            Объект.Контрагент);
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
		ПараметрыОбъекта.Вставить("СчетУчета",             СчетУчета);
	КонецЕсли;
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",        "Метаданные.Документы.ПриходныйКассовыйОрдер.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",      СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата",                    Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПроверкаКурсовВалют(СтрокаПлатеж, ЭтотОбъект);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И КратностьДокумента <> 0 Тогда
		СуммаРуб = СтрокаПлатеж.СуммаПлатежа * КурсДокумента / КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ЗаполнитьОтражениеСтрокиВУСН(СтрокаТЧ, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПолеОтражениеАвансаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТЧ     = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СписокВыбора = Элемент.СписокВыбора;
	
	ВыбранныйЭлемент = СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		СтрокаТЧ.ПорядокОтраженияАванса = ПорядокОтраженияАвансаСоответствиеЗначений[СписокВыбора.Индекс(ВыбранныйЭлемент)];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПолеОтражениеАвансаПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПолеОтражениеАванса) Тогда
		СтрокаТЧ.ПорядокОтраженияАванса = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаВыручки

&НаКлиенте
Процедура РасшифровкаВыручкиПриИзменении(Элемент)
	
	СуммаДоИзменения = Объект.СуммаДокумента;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ОбновитьИтоги(ЭтотОбъект);
	
	Если ПрименениеУСН И СуммаДоИзменения <> Объект.СуммаДокумента Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ОбновитьИтоги(ЭтотОбъект);
		ОбновитьИтогиУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиПередУдалением(Элемент, Отказ)
	
	Отказ = Объект.РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура НапечататьЧекВыполнить()
	
	НапечататьЧек();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУсловногоОформления = Новый Структура();
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость();
	
	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)
	
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("РасшифровкаПлатежаПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами Тогда
		
		Форма.УстановитьУсловноеОформлениеРасшифровкаПлатежа();
		
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("РасшифровкаВыручкиПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРозничнаяВыручка Тогда
		
		Форма.УстановитьУсловноеОформлениеРасшифровкаВыручки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()
	
	// Контрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ПрочийПриход);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПКО.ЛичныеСредстваПредпринимателя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"Объект.ВыручкаСНТТ",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Реквизиты используются только при расчетах в у.е.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ЕстьРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Не используются при расчетах по кредитам и займам.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетНаОплату");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРасшифровкаПлатежа() Экспорт
	
	НастройкиУсловногоОформления.Вставить("РасшифровкаПлатежаПроинициализировано", Истина);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// РасшифровкаПлатежаСтавкаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтавкаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"УчетВПродажныхЦенах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// РасшифровкаПлатежаСуммаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.РасшифровкаПлатежа.СтавкаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтавкиНДС.НДС0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.РасшифровкаПлатежа.СтавкаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтавкиНДС.БезНДС);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.Сделка", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Документ>'"));
	
	// РасшифровкаПлатежаСпособПогашенияЗадолженности
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Способ погашения>'"));
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Статья движения ден. средств>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет расчетов>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам, РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамПриУСН
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамПриУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет авансов>'"));
	
	// РасшифровкаПлатежаПолеОтражениеАванса
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаПолеОтражениеАванса");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.ПолеОтражениеАванса",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Отражение аванса в НУ>'"));
	
	// РасшифровкаПлатежаДоходыУСН
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоходыУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.ДоходыУСН",
		ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не принимаются>'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРасшифровкаВыручки() Экспорт
	
	НастройкиУсловногоОформления.Вставить("РасшифровкаВыручкиПроинициализировано", Истина);
	
	// РасшифровкаВыручкиСтавкаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаВыручкиСтавкаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"УчетВПродажныхЦенах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// РасшифровкаВыручкиСуммаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаВыручкиСуммаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.РасшифровкаПлатежа.СтавкаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтавкиНДС.НДС0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.РасшифровкаПлатежа.СтавкаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтавкиНДС.БезНДС);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек()
	
	ОчиститьСообщения();
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПКлиент.ПроверитьВозможностьПечатиЧека(ЭтотОбъект) Тогда
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НапечататьЧекЗавершение", ЭтотОбъект);
			МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ФискальныйРегистратор",
				НСтр("ru = 'Выберите фискальный регистратор'"), НСтр("ru = 'Фискальный регистратор не подключен.'"));
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьСвойстваПлатежаНаКлиенте(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Патент.Доступность = Объект.ДеятельностьНаПатенте ИЛИ Форма.ПрименяетсяТолькоУСНПатент;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочийПриход") Тогда
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаРасчетовСКонтрагентом);
		Элементы.Контрагент.Доступность = Ложь;
	Иначе
		Элементы.Контрагент.Доступность = Истина;
	КонецЕсли;
	
	Если Форма.ПрименяетсяТолькоУСНПатент Тогда
		Элементы.ГруппаДеятельностьНаПатенте.ТекущаяСтраница = Элементы.ГруппаНадписьПатент;
	ИначеЕсли Форма.ПрименяетсяУСНПатент Тогда
		Элементы.ГруппаДеятельностьНаПатенте.ТекущаяСтраница = Элементы.ГруппаВыборДеятельностиНаПатенте;
	КонецЕсли;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Элементы.ВалютаДокумента.Доступность = Форма.ОплатаВВалюте И ДокументМожетБытьОформленВВалюте(Объект.ВидОперации);
	Иначе
		Элементы.ВалютаДокумента.Доступность = ДокументМожетБытьОформленВВалюте(Объект.ВидОперации);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка")
		И Объект.ВыручкаСНТТ И Форма.УчетВПРодажныхЦенах Тогда
		
		СформироватьТекстРозничнаяВыручкаДоходыНУ(Форма);
		
		Если Форма.ПрименениеУСН Тогда
			Элементы.РозничнаяВыручкаНадписьДоходыУСН.Доступность = НЕ Объект.ДеятельностьНаПатенте;
			Элементы.РозничнаяВыручкаДоходыУСН.Доступность        = НЕ Объект.ДеятельностьНаПатенте;
			Если НЕ Форма.ПрименениеУСНДоходы Тогда
				Элементы.РозничнаяВыручкаРасходыУСН.Доступность   = НЕ Объект.ДеятельностьНаПатенте;
				Элементы.РозничнаяВыручкаНДСУСН.Доступность       = НЕ Объект.ДеятельностьНаПатенте И Объект.Графа7_УСН <> 0;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") Тогда
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Элементы.Контрагент.Видимость = ВидимостьБанковскогоСчета(Объект.Организация);
		ИначеЕсли НЕ Элементы.Контрагент.Видимость Тогда
			Элементы.Контрагент.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьПрочееТекстДоходыУСН(Форма);
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ИтогоСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Форма.ИтогоВсегоНДС     = Объект.РасшифровкаПлатежа.Итог("СуммаНДС");
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(Форма.ИтогоСуммаПлатежа, "ЧЦ=12; ЧДЦ=2");
		Элементы.РасшифровкаПлатежаСуммаНДС.ТекстПодвала     = Формат(Форма.ИтогоВсегоНДС,     "ЧЦ=12; ЧДЦ=2");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка") Тогда
		Элементы.РасшифровкаВыручкиСуммаПлатежа.ТекстПодвала = Формат(Форма.ИтогоСуммаПлатежа, "ЧЦ=12; ЧДЦ=2");
		Элементы.РасшифровкаВыручкиСуммаНДС.ТекстПодвала     = Формат(Форма.ИтогоВсегоНДС,     "ЧЦ=12; ЧДЦ=2");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДС(СтрокаПлатежа)
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатежа.СтавкаНДС);
	СтрокаПлатежа.СуммаНДС = СтрокаПлатежа.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПроверкаКурсовВалют(СтрокаПлатеж, Форма)
	
	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	Объект = Форма.Объект;
	ПроверкаКурсовВалют(СтрокаПлатеж, Форма);
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		Объект.ВалютаДокумента,   СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Форма.КурсДокумента,      СтрокаПлатеж.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма)
	
	Объект = Форма.Объект;
	
	ЕстьРасчетыВУЕ = Ложь;
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			ЕстьРасчетыВУЕ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУЕ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто1", "ЗаголовокСубконто2", "ЗаголовокСубконто3");
	
	ПоляФормы.Вставить("Подразделение", "ПодразделениеКтПрочие");
	ЗаголовкиПолей.Вставить("Подразделение", "ЗаголовокПодразделение");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоКт%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "СубконтоКт%Индекс%", "СубконтоКт%Индекс%", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.Заголовок       = НСтр("ru='Контрагент'");
		Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru='Введите ИНН или наименование'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.Заголовок       = НСтр("ru='Подотчетное лицо'");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
		Элементы.Контрагент.Заголовок       = НСтр("ru='Банковский счет'");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.Контрагент.Заголовок       = НСтр("ru='Склад'");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаРаботником") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.Заголовок       = НСтр("ru='Работник'");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.Контрагент.Заголовок       = НСтр("ru='Контрагент'");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодразделениеКт(Форма)
	
	Объект = Форма.Объект;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам") Тогда
		Объект.ПодразделениеКт = Неопределено;
	Иначе
		Объект.ПодразделениеКт = Объект.ПодразделениеОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораСчетаБанка(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив;
	Для каждого СтарыйПараметр Из Элементы.СчетБанк.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораСчетаКассы(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив();
	Для каждого СтарыйПараметр Из Элементы.СчетКасса.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаРаботником") Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Ложь));
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетКасса.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",   Новый ФиксированныйМассив(ВидыДоговора)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Форма.ОплатаВВалюте));
	Если Форма.ОплатаВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораВалютыДокумента(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	Если НЕ Форма.ОплатаВВалюте И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ВалютаРегламентированногоУчета));
	КонецЕсли;
	
	Элементы.ВалютаДокумента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж)
	
	СтрокаПлатеж.НадписьКурс   = НСтр("ru = 'Курс'");
	СтрокаПлатеж.НадписьСумма  = НСтр("ru = 'Сумма'");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиУСН(Форма)
	
	Если Форма.ПрименениеУСН Тогда
		Объект = Форма.Объект;
		Объект.Графа5_УСН = Объект.РасшифровкаПлатежа.Итог("ДоходыУСН");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтражениеСтрокиВУСН(СтрокаТЧ, Форма)
	
	Если Форма.ПрименениеУСН Тогда
		ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
		ДанныеСтроки = Новый Структура("СуммаПлатежа, ДоходыУСН, СчетУчетаРасчетовСКонтрагентом");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТЧ);
		ЗаполнитьОтражениеСтрокиВУСННаСервере(ДанныеСтроки, ПараметрыУСН);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПрочееТекстДоходыУСН(Форма)
	
	Если НЕ Форма.ПрименениеУСН
		ИЛИ НЕ Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаПрочееСтраница Тогда
			Форма.ПрочееТекстДоходыУСН = "";
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	ВалютаРегл = Форма.ВалютаРегламентированногоУчета;
	СтрФорматСумм = "Л=ru; ЧРД=,; ЧРГ=' '; ЧН=0; ЧГ=3,0";
	
	СуммаДоходыВсего = Объект.Графа4_УСН;
	
	ТекстДоходы = "";
	
	СуммаДоходыНеПринимаемые = СуммаДоходыВсего - Объект.Графа5_УСН;
	Если СуммаДоходыВсего = 0 Тогда
		ТекстДоходы = НСтр("ru = 'Сумма документа не указана'");
	ИначеЕсли СуммаДоходыНеПринимаемые = 0 Тогда
		ТекстДоходы = НСтр("ru = 'Доходы принимаются полностью'");
	ИначеЕсли Объект.Графа5_УСН = 0 Тогда
		ТекстДоходы = НСтр("ru = 'Принимаемые доходы отсутствуют'");
	Иначе
		ТекстДоходы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Непринимаемые доходы: %1 %2'"),
			Формат(СуммаДоходыНеПринимаемые, СтрФорматСумм), ВалютаРегл);
	КонецЕсли;
	
	Форма.ПрочееТекстДоходыУСН = ТекстДоходы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьТекстРозничнаяВыручкаДоходыНУ(Форма)
	
	Объект = Форма.Объект;
	
	ТекстДоходы = "";
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка")
		И Объект.ВыручкаСНТТ И Форма.УчетВПРодажныхЦенах Тогда
		
		Если Форма.ПрименяетсяТолькоУСНПатент Тогда	
			ТекстДоходы = "";
		ИначеЕсли Форма.ПрименяетсяУСНПатент И Объект.ДеятельностьНаПатенте Тогда
			ТекстДоходы = НСтр("ru = 'Доходы относятся к деятельности на патенте'");
		ИначеЕсли Форма.НТТНаЕНВД Тогда
			ТекстДоходы = НСтр("ru = 'Доходы относятся к деятельности на ЕНВД'");
		ИначеЕсли Форма.ПрименяетсяУСНПатент ИЛИ Форма.ПлательщикЕНВД Тогда
			Если Форма.ПрименениеУСН И Форма.ПрименениеУСНДоходы Тогда
				ТекстДоходы = НСтр("ru = 'Доходы относятся к деятельности на УСН'");
			ИначеЕсли Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
				ТекстДоходы = НСтр("ru = 'Доходы и расходы относятся к деятельности на УСН'");
			Иначе
				ТекстДоходы = НСтр("ru = 'Доходы относятся к деятельности на общем режиме налогообложения'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.РозничнаяВыручкаТекстДоходыНУ = ТекстДоходы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРасшифровкаПлатежа(ВидОперации)
	
	ЕстьРасшифровка = ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам");
	
	Возврат ЕстьРасшифровка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежа(Знач ПараметрыОбъекта, Знач ПолучатьДоговор)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор Тогда
		
		СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		
		Возврат СвойстваПлатежа;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента,
			|ПрименениеУСН, ПрименяетсяОсобыйПорядокНалогообложения,
			|СтатьяДвиженияДенежныхСредств");
		
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		
		Если ПараметрыОбъекта.ВалютаДокумента = ПараметрыОбъекта.ВалютаРегламентированногоУчета Тогда
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Ложь);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		Иначе
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Истина);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		КонецЕсли;
		
		Возврат СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор);
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПустаяСтруктураСвойстваПлатежа()
	
	СвойстваПлатежа = Новый Структура("ДоговорКонтрагента,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаРасчетыВУсловныхЕдиницах,
		|СпособПогашенияЗадолженности, СтавкаНДС,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|ПорядокОтраженияАванса,
		|СтатьяДвиженияДенежныхСредств");
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеПараметрыОбъекта(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Контрагент, ВалютаДокумента, СчетКасса, ВыручкаСНТТ");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,    Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,    Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета",  Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                   Форма.ОплатаВВалюте);
	ПараметрыОбъекта.Вставить("РозничнаяТорговляОблагаетсяЕНВД", Форма.РозничнаяТорговляОблагаетсяЕНВД);
	ПараметрыОбъекта.Вставить("ПлательщикНДС",                   Форма.ПлательщикНДС);
	ПараметрыОбъекта.Вставить("УчетВПродажныхЦенах",             Форма.УчетВПродажныхЦенах);
	ПараметрыОбъекта.Вставить("ПрименениеУСН",                   Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПлательщикЕНВД",                  Форма.ПлательщикЕНВД);
	ПараметрыОбъекта.Вставить("ПрименяетсяОсобыйПорядокНалогообложения", Форма.ПрименяетсяОсобыйПорядокНалогообложения);
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",   Форма.Объект.СчетУчетаРасчетовСКонтрагентом);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежаСервер(Знач ПараметрыПлатежа, Знач ПолучатьДоговор)
	
	СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		ПараметрыПлатежа.ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
	КонецЕсли;
	
	СвойстваПлатежа.ДоговорКонтрагента            = ПараметрыПлатежа.ДоговорКонтрагента;
	СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ПараметрыПлатежа.СтатьяДвиженияДенежныхСредств;
	
	Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, ПредъявляетНДС");
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах;
		
		Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
			ИЛИ ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
			СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СвойстваПлатежа.СтавкаНДС = ?(ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
				И (ПараметрыПлатежа.ПрименениеУСН ИЛИ ПараметрыПлатежа.ПрименяетсяОсобыйПорядокНалогообложения)
				ИЛИ ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
				И НЕ СвойстваДоговора.ПредъявляетНДС,
				Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18);
		КонецЕсли;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	КонецЕсли;
	
	// Порядок отражения аванса по умолчанию
	СтруктураОтражениеАвансов = НалоговыйУчетУСН.ПорядокОтраженияАвансовПоУмолчанию(
		ПараметрыПлатежа.Организация, ПараметрыПлатежа.Дата);
	СвойстваПлатежа.ПорядокОтраженияАванса =
		?(СтруктураОтражениеАвансов.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходПатент,
			СтруктураОтражениеАвансов.Патент, СтруктураОтражениеАвансов.ПорядокОтраженияАванса);
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииВидаОперации(Знач ПараметрыОбъекта)
	
	НовыеПараметры = Новый Структура;
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		
		НовыеПараметры.Вставить("Основание",          Строка(ПараметрыОбъекта.ВидОперации));
		НовыеПараметры.Вставить("ВалютаДокумента",    ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		НовыеПараметры.Вставить("КурсДокумента",      1);
		НовыеПараметры.Вставить("КратностьДокумента", 1);
		Если ПараметрыОбъекта.ВыручкаСНТТ И ПараметрыОбъекта.УчетВПродажныхЦенах Тогда
			ЕНВД = Ложь;
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД));
			ЕНВД = БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации)
				И ПараметрыОбъекта.ПлательщикЕНВД;
			НовыеПараметры.Вставить("НТТНаЕНВД", ЕНВД);
			// Для этого вида операции делаем исключение
			НовыеПараметры.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаДоходовРасходов.СчетДоходовОтРеализации);
			НовыеПараметры.Вставить("СтавкаНДС", ?(ЕНВД ИЛИ НЕ ПараметрыОбъекта.ПлательщикНДС,
				Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18));
		Иначе
			НовыеПараметры.Вставить("НТТНаЕНВД", Ложь);
			НовыеПараметры.Вставить("СчетУчетаРасчетовСКонтрагентом",
				?(ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД,
					ПланыСчетов.Хозрасчетный.ВыручкаЕНВД, ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД));
			НовыеПараметры.Вставить("СтавкаНДС",
				?(ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД ИЛИ НЕ ПараметрыОбъекта.ПлательщикНДС,
					Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18));
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(НовыйСчетОрганизации,
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.ВалютаДокумента, Истина);
		НовыеПараметры.Вставить("Контрагент", НовыйСчетОрганизации);
		СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыйСчетОрганизации, "Наименование");
		НовыеПараметры.Вставить("ПринятоОт", СвойстваСчета.Наименование);
		НовыеПараметры.Вставить("Основание", Строка(ПараметрыОбъекта.ВидОперации));
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииОрганизации(Знач ПараметрыОбъекта, ПричиныИзменения)
	
	НовыеПараметры  = Новый Структура;
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(НовыйСчетОрганизации,
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.ВалютаДокумента, Истина);
		НовыеПараметры.Вставить("Контрагент", НовыйСчетОрганизации);
		СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыйСчетОрганизации, "Наименование");
		НовыеПараметры.Вставить("ПринятоОт", СвойстваСчета.Наименование);
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		
		Если ПараметрыОбъекта.ВыручкаСНТТ И ПараметрыОбъекта.УчетВПродажныхЦенах Тогда
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД));
			НовыеПараметры.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаДоходовРасходов.СчетДоходовОтРеализации);
		Иначе
			НовыеПараметры.Вставить("СчетУчетаРасчетовСКонтрагентом",
				?(ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД,
				ПланыСчетов.Хозрасчетный.ВыручкаЕНВД, ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД));
		КонецЕсли;
		
	КонецЕсли;
	
	ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ОсновноеПодразделение, ПараметрыОбъекта.Организация) Тогда
		НовыеПараметры.Вставить("ПодразделениеОрганизации", ОсновноеПодразделение);
	Иначе
		НовыеПараметры.Вставить("ПодразделениеОрганизации", Неопределено);
	КонецЕсли;
	
	Если ПараметрыОбъекта.ПрименениеУСН ИЛИ ПараметрыОбъекта.ПрименяетсяОсобыйПорядокНалогообложения
			ИЛИ НЕ ПараметрыОбъекта.ПлательщикНДС Тогда
		НовыеПараметры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
		ПричиныИзменения.Добавить("РасшифровкаПлатежа");
		
	КонецЕсли;
	
	// Порядок отражения аванса по умолчанию
	СтруктураОтражениеАвансов = НалоговыйУчетУСН.ПорядокОтраженияАвансовПоУмолчанию(ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
	НовыеПараметры.Вставить("ПорядокОтраженияАвансов",
		?(СтруктураОтражениеАвансов.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходПатент,
				СтруктураОтражениеАвансов.Патент, СтруктураОтражениеАвансов.ПорядокОтраженияАванса));
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииКонтрагента(Знач ПараметрыОбъекта)
	
	НовыеПараметры = Новый Структура("ПринятоОт");
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
		СвойстваКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.Контрагент,
			"Наименование, НаименованиеПолное");
		НовыеПараметры.ПринятоОт = ?(ПустаяСтрока(СвойстваКонтрагента.НаименованиеПолное),
			СвойстваКонтрагента.Наименование, СвойстваКонтрагента.НаименованиеПолное);
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		
		СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.Контрагент, "Наименование, ТипСклада");
		НовыеПараметры.Вставить("ВыручкаСНТТ",
			СвойстваСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
		НовыеПараметры.ПринятоОт = СвойстваСклада.Наименование;
		
		Если НовыеПараметры.ВыручкаСНТТ И ПараметрыОбъекта.УчетВПродажныхЦенах Тогда
			ЕНВД = Ложь;
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД));
			ЕНВД = БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации)
				И ПараметрыОбъекта.ПлательщикЕНВД;
			НовыеПараметры.Вставить("НТТНаЕНВД", ЕНВД);
			НовыеПараметры.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаДоходовРасходов.СчетДоходовОтРеализации);
			НовыеПараметры.Вставить("СтавкаНДС", ?(ЕНВД ИЛИ НЕ ПараметрыОбъекта.ПлательщикНДС,
				Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18));
		Иначе
			НовыеПараметры.Вставить("НТТНаЕНВД", Ложь);
			НовыеПараметры.Вставить("СчетУчетаРасчетовСКонтрагентом",
				?(ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД,
					ПланыСчетов.Хозрасчетный.ВыручкаЕНВД, ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД));
			НовыеПараметры.Вставить("СтавкаНДС",
				?(ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД ИЛИ  НЕ ПараметрыОбъекта.ПлательщикНДС,
					Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18));
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица 
		ИЛИ ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником Тогда
		
		ПараметрыОбъекта.Вставить("ПринятоОтФизЛицо", ПараметрыОбъекта.Контрагент);
		НовыеПараметры = НовыеПараметрыПриВыбореПринятоОт(ПараметрыОбъекта);
		ЗаполнитьЗначенияСвойств(НовыеПараметры, НовыеПараметрыПриВыбореПринятоОт(ПараметрыОбъекта));
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.Контрагент, "Наименование");
		НовыеПараметры.ПринятоОт = СвойстваСчета.Наименование;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииСчетаКассы(Знач ПараметрыОбъекта)
	
	НовыеПараметры = Новый Структура;
	
	ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОбъекта.СчетКасса).Валютный
		И ДокументМожетБытьОформленВВалюте(ПараметрыОбъекта.ВидОперации);
	
	Если НЕ ОплатаВВалюте Тогда
		ПараметрыОбъекта.ВалютаДокумента = ПараметрыОбъекта.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	НовыеПараметрыПриИзмененииОплатаВВалюте(НовыеПараметры, ОплатаВВалюте, ПараметрыОбъекта);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НовыеПараметрыПриИзмененииОплатаВВалюте(НовыеПараметры, ОплатаВВалюте, ПараметрыОбъекта)
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке
		И ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетОрганизации,
			ПараметрыОбъекта.Организация,
			ПараметрыОбъекта.ВалютаДокумента,
			Истина);
		НовыеПараметры.Вставить("Контрагент", НовыйСчетОрганизации);
		СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыйСчетОрганизации, "Наименование");
		НовыеПараметры.Вставить("ПринятоОт",  СвойстваСчета.Наименование);
	КонецЕсли;
	
	НовыеПараметры.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
	НовыеПараметры.Вставить("ОплатаВВалюте",   ОплатаВВалюте);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииВалютыДокумента(Знач ПараметрыОбъекта)
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ОплатаВВалютеНов = ПараметрыОбъекта.ОплатаВВалюте;
	Иначе
		ОплатаВВалютеНов = ПараметрыОбъекта.ВалютаДокумента <> ПараметрыОбъекта.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		Если НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			ОплатаВВалютеТек = ПараметрыОбъекта.ОплатаВВалюте;
			ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалютеНов;
			НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
			ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалютеТек;
		Иначе
			НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		КонецЕсли;
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметрыПриИзмененииОплатаВВалюте(
		НовыеПараметры,
		ОплатаВВалютеНов,
		ПараметрыОбъекта);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыОбъекта.ВалютаДокумента, ПараметрыОбъекта.Дата);
	НовыеПараметры.Вставить("КурсДокумента",      СтруктураКурса.Курс);
	НовыеПараметры.Вставить("КратностьДокумента", СтруктураКурса.Кратность);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриВыбореПринятоОт(Знач ПараметрыОбъекта)
	
	ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.ПринятоОтФизЛицо, ПараметрыОбъекта.Дата);
	
	НовыеПараметры = Новый Структура("ПринятоОт", ДанныеФизЛица.Представление);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ФормированиеПринятоОт(Форма, Знач ФизЛицо)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(Форма);
	ПараметрыОбъекта.Вставить("ПринятоОтФизЛицо", ФизЛицо);
	НовыеПараметры   = НовыеПараметрыПриВыбореПринятоОт(ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПринятоОт");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеКонтрагента(Знач Контрагент)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
		"Наименование, НаименованиеПолное");
	
КонецФункции

&НаСервере
Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатежа)
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
	
	СтрокаПлатежа.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатежа.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатежа, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОтражениеСтрокиВУСННаСервере(СтрокаТЧ, Знач ПараметрыУСН)
	
	НалоговыйУчетУСН.ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаТЧ, ПараметрыУСН);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРасшифровкуПлатежа(ИзменениеОрганизации = Ложь, СохранитьСтатьюДДС = Истина)
	
	СворачиватьТЧПриИзмененииОрганизации = Документы.ПриходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации);
	
	Если ИзменениеОрганизации И НЕ СворачиватьТЧПриИзмененииОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаСервере();
	Если НЕ СохранитьСтатьюДДС Тогда
		СвойстваПлатежа.Вставить("СтатьяДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
		
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
		РасшифровкаПлатежаУстановитьПорядокОтраженияАванса(СтрокаПлатеж, Объект);
		ОбновитьИтоги(ЭтотОбъект);
		
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СвойстваПлатежа.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.СтавкаНДС = ?(ПрименениеУСН ИЛИ ПрименяетсяОсобыйПорядокНалогообложения ИЛИ НЕ ПлательщикНДС
			ИЛИ УчетВПродажныхЦенах И НТТНаЕНВД ИЛИ НЕ УчетВПродажныхЦенах И РозничнаяТорговляОблагаетсяЕНВД,
			Перечисления.СтавкиНДС.БезНДС,
			Перечисления.СтавкиНДС.НДС18);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		ОбновитьИтоги(ЭтотОбъект);
		
		Элементы.РасшифровкаВыручки.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СчетаУчетаВДокументах.ЗаполнитьСтроки(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаПлатеж),
			"РасшифровкаПлатежа",
			Объект,
			Документы.ПриходныйКассовыйОрдер,
			Ложь);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи = Ложь, ПолучатьДоговор = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
			Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента",            Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
				ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
			
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента            = Объект.Дата;
	ВалютаРегламентированногоУчета  = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ЗаголовокСтатьяДДС              = НСтр("ru = 'Статья движения ден.средств:'");
	НадписьПатент                   = НСтр("ru = 'Патент:'");
	
	Если ЗначениеЗаполнено(Объект.СчетКасса) Тогда
		ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетКасса).Валютный;
	Иначе
		ОплатаВВалюте = ЗначениеЗаполнено(Объект.ВалютаДокумента) И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета;
	КонецЕсли;
	УстановитьКурсДокумента();
	
	СвойстваПлатежа = Неопределено; // При открытии формы структуру не инициализируем, будет создана при первом обращении
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.Заголовок =
		?(ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств"),
			НСтр("ru = 'Договор / Статья ДДС'"), НСтр("ru = 'Договор'"));
	
	// Заполнение свойств элементов формы
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	УстановитьПараметрыВыбораВалютыДокумента(ЭтотОбъект);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	УправлениеЭлементамиОтраженияВУСННаСервере(); // должно идти раньше процедуры ЗаполнитьДобавленныеКолонкиТаблиц()
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// Управление внешним видом формы
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	// т.к. Расшифровка платежа теперь есть у многих видов операций,
	// сначала отработаем формы-исключения
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСПодотчетнымиЛицами);
	МассивСтраниц.Добавить(Элементы.ГруппаПолучениеНаличностиВБанке);
	МассивСтраниц.Добавить(Элементы.ГруппаРозничнаяВыручка);
	МассивСтраниц.Добавить(Элементы.ГруппаПрочееСтраница);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	МассивСтраниц.Добавить(Элементы.ГруппаВозвратЗаймаРаботником);
	МассивСтраниц.Добавить(Элементы.ГруппаЛичныеСредства);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСПодотчетнымиЛицами;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПолучениеНаличностиВБанке;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРозничнаяВыручка;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВозвратЗаймаРаботником;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрочееСтраница;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ЛичныеСредстваПредпринимателя Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЛичныеСредства;
		
	// а затем тех, кто использует основную форму Расшифровки платежа
	ИначеЕсли ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ЛичныеСредстваПредпринимателя Тогда
		Элементы.Контрагент.Видимость = Ложь;
	Иначе
		Элементы.Контрагент.Видимость = Истина;
	КонецЕсли; 
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	ПрименениеУСН              = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация,       Объект.Дата);
	ПрименениеУСНДоходы        = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	ПрименяетсяУСНПатент       = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	ПлательщикЕНВД             = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация,       Объект.Дата);
	ПлательщикНДС              = УчетнаяПолитика.ПлательщикНДС(Объект.Организация,        Объект.Дата);
	
	ПрименяетсяОсобыйПорядокНалогообложения =
		УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	ПрименяетсяТолькоУСНПатент = ПрименяетсяУСНПатент И НЕ ПлательщикЕНВД
		И ПрименяетсяОсобыйПорядокНалогообложения;
	
	УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Объект.Организация, Объект.Дата);
	
	НТТНаЕНВД = Ложь;
	Если ПлательщикЕНВД И Объект.ВыручкаСНТТ И УчетВПродажныхЦенах Тогда
		СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(Объект.Организация, Объект.Контрагент,
			Объект.Дата, Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД));
		НТТНаЕНВД = БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидимостьБанковскогоСчета(Знач Организация)
	
	Возврат Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРасчетыВУсловныхЕдиницах = Ложь;
	МассивДоговоров   = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	СписокПредставлений = Неопределено;
	Если УчетУСН.ЕстьАвансыПокупателей(Объект.ВидОперации) Тогда
		СписокПредставлений = Элементы.РасшифровкаПлатежаПолеОтражениеАванса.СписокВыбора;
	КонецЕсли;
	
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].РасчетыВУсловныхЕдиницах;
			
			ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУсловныхЕдиницах
				ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ПорядокОтраженияАванса) И СписокПредставлений <> Неопределено Тогда
			СтрокаПлатеж.ПолеОтражениеАванса = УчетУСНКлиентСервер.ПредставлениеПорядкаОтраженияАванса(
				СтрокаПлатеж.ПорядокОтраженияАванса, ПорядокОтраженияАвансаСоответствиеЗначений, СписокПредставлений);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьРасчетыВУсловныхЕдиницах Тогда
		Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
			ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств()
	
	// Счет кассы
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	
	СчетаИсключений = Новый Массив;
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументы);
	СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал);
	
	СчетаКассы = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь,, СчетаИсключений);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаКассы)));
	Если НЕ ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Ложь));
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетКасса.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	// Счет банка
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	
	СчетаБанка = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаБанка)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
	// Если валюта договора совпадает с валютой документа, то перезаполним курсы взаиморасчетов
	Для каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		
		Если Объект.ВалютаДокумента = СтрокаРасшифровкиПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов
			И НЕ СтрокаРасшифровкиПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			
			СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
			СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("ВидОперации");
	
	УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	Если Элементы.Контрагент.ОграничениеТипа.Типы().Количество() = 0 Тогда
		Объект.Контрагент = Неопределено;
	Иначе
		Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
	КонецЕсли;
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
		НовыеПараметры   = НовыеПараметрыПриИзмененииВидаОперации(ПараметрыОбъекта); // Заполняет СчетУчетаРасчетовСКонтрагентом только для розницы
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
			ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры,
				"ВалютаДокумента, СчетУчетаРасчетовСКонтрагентом, Основание, СтавкаНДС");
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметры, "КурсДокумента, КратностьДокумента, НТТНаЕНВД");
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
			ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Контрагент, ПринятоОт, Основание");
		Иначе
			ИнициализироватьСвойстваПлатежаНаСервере(Истина);
			ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
			УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОплатаВВалюте И НЕ ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		ОплатаВВалюте          = Ложь;
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		УстановитьПараметрыВыбораВалютыДокумента(ЭтотОбъект);
		ВалютаДокументаПриИзмененииСервер(ПричиныИзменения);
	КонецЕсли;
	
	ИзменитьПараметрыВыбораСчетаКассы(ЭтотОбъект);
	ИзменитьПараметрыВыбораСчетаБанка(ЭтотОбъект);
	
	ЗаполнитьСчетаУчета("ВидОперации", ПричиныИзменения);
	
	ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	ПерезаполнитьРасшифровкуПлатежа(, Ложь);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьВидимостьСтраницНаСервере();

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	УстановитьВидимостьСчетовУчета();
	
	ВидОперацииОбработатьИзменение(Новый Массив);
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьКурсДокумента();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		Если Объект.ВыручкаСНТТ И УчетВПродажныхЦенах Тогда
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(Объект.Организация, Объект.Контрагент, Объект.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД));
			Объект.СчетУчетаРасчетовСКонтрагентом = СчетаДоходовРасходов.СчетДоходовОтРеализации;
		Иначе
			Объект.СчетУчетаРасчетовСКонтрагентом = ?(РозничнаяТорговляОблагаетсяЕНВД,
				ПланыСчетов.Хозрасчетный.ВыручкаЕНВД, ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
		КонецЕсли;
	КонецЕсли;
	
	Если ПрименениеУСН ИЛИ ПрименяетсяОсобыйПорядокНалогообложения Тогда
		ИнициализироватьСвойстваПлатежаНаСервере();
		СвойстваПлатежа.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	ПересчитатьСуммыВзаиморасчетов();
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	Если ЗначениеЗаполнено(Объект.Патент) И Элементы.Патент.СписокВыбора.НайтиПоЗначению(Объект.Патент) = Неопределено Тогда
		Объект.Патент = Неопределено;
	КонецЕсли;
	
	ЗаполнитьОтражениеВУСННаСервере();
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВидОперацииОрганизации(ПричиныИзменения)

	ДоступныеОперации = Перечисления.ВидыОперацийПКО.ПолучитьСписокДоступныхЗначений(Новый Структура("Организация",Объект.Организация));
	
	Если ДоступныеОперации.Количество() > 0 
		И ДоступныеОперации.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
	
		Объект.ВидОперации = ДоступныеОперации[0].Значение;
		ВидОперацииОбработатьИзменение(ПричиныИзменения);
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");
	
	УстановитьФункциональныеОпцииФормы();
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта, ПричиныИзменения);
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Контрагент, ПринятоОт, ПодразделениеОрганизации");
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетУчетаРасчетовСКонтрагентом,ПодразделениеОрганизации");
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПодразделениеОрганизации");
	КонецЕсли;
	
	УстановитьПодразделениеКт(ЭтотОбъект);
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	
	ПроверитьВидОперацииОрганизации(ПричиныИзменения);
	ЗаполнитьСчетаУчета("Организация", ПричиныИзменения);
	
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	ПерезаполнитьРасшифровкуПлатежа(Истина);
	
	ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	Если ЗначениеЗаполнено(Объект.Патент) И Элементы.Патент.СписокВыбора.НайтиПоЗначению(Объект.Патент) = Неопределено Тогда
		Объект.Патент = Неопределено;
	КонецЕсли;
	Объект.ДеятельностьНаПатенте = ЗначениеЗаполнено(Объект.Патент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииСервер(ПричиныИзменения)
	
	ПричиныИзменения.Добавить("ВалютаДокумента");
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект); // Текущие значения реквизитов объекта
	НовыеПараметры   = НовыеПараметрыПриИзмененииВалютыДокумента(ПараметрыОбъекта); // Возможно, изменятся: курс, кратность, ОплатаВВалюте
	
	Если НовыеПараметры.Свойство("ОплатаВВалюте") Тогда
		ОплатаВВалютеПриИзмененииСервер(ПараметрыОбъекта, НовыеПараметры, ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметры, "КурсДокумента, КратностьДокумента");
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Контрагент, ПринятоОт");
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	
	ЗаполнитьСчетаУчета("ВалютаДокумента", ПричиныИзменения);
	
	ПерезаполнитьРасшифровкуПлатежа();
	ЗаполнитьОтражениеВУСННаСервере(Истина, Ложь);
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	
	УстановитьЗаголовкиКолонокУСН();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОплатаВВалютеПриИзмененииСервер(ПараметрыОбъекта, НовыеПараметры, ПричиныИзменения)
	
	ПараметрыОбъекта.ОплатаВВалюте = НовыеПараметры.ОплатаВВалюте;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметры, "ОплатаВВалюте");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Контрагент, ВалютаДокумента, ПринятоОт");
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ВалютаДокумента");
	КонецЕсли;
	
	ИзменитьПараметрыВыбораСчетаБанка(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Контрагент");
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ВыручкаСНТТ, СчетУчетаРасчетовСКонтрагентом, СтавкаНДС");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметры, "НТТНаЕНВД");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПринятоОт");
	
	ЗаполнитьСчетаУчета("Контрагент", ПричиныИзменения);
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере();
	КонецЕсли;
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	ПерезаполнитьРасшифровкуПлатежа();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетКассаПриИзмененииСервер()
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("СчетКасса");
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаКассы(ПараметрыОбъекта);
	
	Если НовыеПараметры.ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		ОплатаВВалютеПриИзмененииСервер(ПараметрыОбъекта, НовыеПараметры, ПричиныИзменения);
		УстановитьПараметрыВыбораВалютыДокумента(ЭтотОбъект);
		ВалютаДокументаПриИзмененииСервер(ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("СчетКасса", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(ИдСтроки)
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	СвойстваПлатежа  = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.ДоговорКонтрагента",
		Объект,
		СтрокаПлатеж);
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПриходныйКассовыйОрдер,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"РасшифровкаПлатежа",
		СтрокаПлатеж);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, Изменения);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж,    Изменения);
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыВзаиморасчетов()
	
	Отбор = Новый Структура("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Истина);
	ПлатежиВУсловныхЕдиницах = Объект.РасшифровкаПлатежа.НайтиСтроки(Отбор);
	Для каждого СтрокаПлатеж Из ПлатежиВУсловныхЕдиницах Цикл
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПорядкаОтраженияАвансаВТЧ()
	
	Если НЕ ПрименениеУСН И НЕ ПрименяетсяУСНПатент Тогда
		Возврат;
	КонецЕсли;
	
	ПолеДляОбработки = Элементы.РасшифровкаПлатежаПолеОтражениеАванса;
	
	НалоговыйУчетУСН.ЗаполнитьСписокВыбораПорядкаОтраженияАвансовДляТЧ(ПолеДляОбработки,
		ПорядокОтраженияАвансаСоответствиеЗначений, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПатентаНаСервере()
	
	Если ПрименяетсяУСНПатент Тогда
		МассивПатентовОрганизации = Справочники.Патенты.ПолучитьПатентыОрганизации(Объект.Организация, Объект.Дата);
		Элементы.Патент.СписокВыбора.ЗагрузитьЗначения(МассивПатентовОрганизации);
	Иначе
		Элементы.Патент.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТаблицуПоСтавкамНДС(ВходныеПараметры, НомерСекции)
	
	ТаблицаПлатежей = Новый ТаблицаЗначений();
	ТаблицаПлатежей.Колонки.Добавить("Сумма");
	ТаблицаПлатежей.Колонки.Добавить("СуммаНДС");
	ТаблицаПлатежей.Колонки.Добавить("НДС");
	
	Для каждого Позиция Из Объект.РасшифровкаПлатежа Цикл
		СтрокаТаблицы          = ТаблицаПлатежей.Добавить();
		СтрокаТаблицы.Сумма    = Позиция.СуммаПлатежа;
		СтрокаТаблицы.СуммаНДС = Позиция.СуммаНДС;
		СтрокаТаблицы.НДС      = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Позиция.СтавкаНДС);
	КонецЦикла;
	
	ТаблицаПлатежей.Свернуть("НДС", "Сумма, СуммаНДС");
	
	// Подготовка таблицы товаров
	ТаблицаТоваров = Новый Массив();
	
	Для каждого Позиция Из ТаблицаПлатежей Цикл
		СтрокаТаблицыТоваров = Новый СписокЗначений();
		СтрокаТаблицыТоваров.Добавить(
			НСтр("ru = 'Оплата от:'") + " " + Объект.ПринятоОт + Символы.ПС +
			НСтр("ru = 'Основание:'") + " " + Объект.Основание); //  1 - Наименование
		СтрокаТаблицыТоваров.Добавить("");                       //  2 - Штрихкод
		СтрокаТаблицыТоваров.Добавить("");                       //  3 - Артикул
		СтрокаТаблицыТоваров.Добавить(НомерСекции);              //  4 - Номер отдела
		СтрокаТаблицыТоваров.Добавить(Позиция.Сумма);            //  5 - Цена за позицию без скидки
		СтрокаТаблицыТоваров.Добавить(1);                        //  6 - Количество
		СтрокаТаблицыТоваров.Добавить("");                       //  7 - Наименование скидки/наценки
		СтрокаТаблицыТоваров.Добавить(0);                        //  8 - Сумма скидки/наценки
		СтрокаТаблицыТоваров.Добавить(0);                        //  9 - Процент скидки/наценки
		СтрокаТаблицыТоваров.Добавить(Позиция.Сумма);            // 10 - Сумма позиции со скидкой
		СтрокаТаблицыТоваров.Добавить(1);                        // 11 - Номер налога (1)
		СтрокаТаблицыТоваров.Добавить(Позиция.СуммаНДС);         // 12 - Сумма налога (1)
		СтрокаТаблицыТоваров.Добавить(Позиция.НДС);              // 13 - Процент налога (1)
		СтрокаТаблицыТоваров.Добавить(0);                        // 14 - Номер налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                        // 15 - Сумма налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                        // 16 - Процент налога (2)
		СтрокаТаблицыТоваров.Добавить("");                       // 17 - Наименование секции форматирования товарной строки
		
		ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
	КонецЦикла;
	
	// Подготовка таблицы оплат
	ТаблицаОплат = Новый Массив();
	
	СтрокаОплаты = Новый СписокЗначений();
	СтрокаОплаты.Добавить(0);
	СтрокаОплаты.Добавить(Объект.СуммаДокумента);
	СтрокаОплаты.Добавить("");
	СтрокаОплаты.Добавить("");
	
	ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Подготовка таблицы общих параметров
	ОбщиеПараметры = Новый Массив();
	ОбщиеПараметры.Добавить(0);                     //  1 - Тип чека
	ОбщиеПараметры.Добавить(Истина);                //  2 - Признак фискального чека
	ОбщиеПараметры.Добавить(Неопределено);          //  3 - Печать на подкладном документе
	ОбщиеПараметры.Добавить(Объект.СуммаДокумента); //  4 - Сумма по чеку без скидок/наценок
	ОбщиеПараметры.Добавить(Объект.СуммаДокумента); //  5 - Сумма по чеку с учетом всех скидок/наценок
	ОбщиеПараметры.Добавить("");                    //  6 - Номер дисконтной карты
	ОбщиеПараметры.Добавить("");                    //  7 - Текст шапки
	ОбщиеПараметры.Добавить("");                    //  8 - Текст подвала
	ОбщиеПараметры.Добавить(0);                     //  9 - Номер смены (для копии чека)
	ОбщиеПараметры.Добавить(0);                     // 10 - Номер чека (для копии чека)
	ОбщиеПараметры.Добавить(0);                     // 11 - Номер документа (для копии чека)
	ОбщиеПараметры.Добавить(0);                     // 12 - Дата документа (для копии чека)
	ОбщиеПараметры.Добавить("");                    // 13 - Имя кассира (для копии чека)
	ОбщиеПараметры.Добавить("");                    // 14 - Пароль кассира
	ОбщиеПараметры.Добавить(0);                     // 15 - Номер шаблона
	ОбщиеПараметры.Добавить("");                    // 16 - Наименование секции форматирования шапки
	ОбщиеПараметры.Добавить("");                    // 17 - Наименование секции форматирования подвала
	
	ВходныеПараметры.Добавить(ТаблицаТоваров);
	ВходныеПараметры.Добавить(ТаблицаОплат);
	ВходныеПараметры.Добавить(ОбщиеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтражениеВУСННаСервере(ЗаполнитьСуммы = Истина, ЗаполнитьСодержание = Ложь)
	
	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(ЭтотОбъект);
	
	Если ЗаполнитьСуммы Тогда
		НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Объект, ПараметрыУСН);
	КонецЕсли;
	
	Если ЗаполнитьСодержание И УчетУСН.СодержаниеУСНРедактируетсяПользователем(Объект) Тогда
		НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(Объект, ПараметрыУСН);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаУстановитьПорядокОтраженияАванса(СтрокаПлатеж, ДокументОбъект)
	
	// устанавливаем порядок отражения аванса по умолчанию
	СтрокаПлатеж.ПорядокОтраженияАванса = СвойстваПлатежа.ПорядокОтраженияАванса;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиОтраженияВУСННаСервере()
	
	// Видимость элементов настройки отражения в НУ (аванса и КУДиР):
	// 
	// Для оплаты от покупателя и возврата поставщику
	// отображается порядок отражения аванса в НУ (с учетом функциональных опций)
	//
	// Для остальных видов операций:
	// - Если выключена ФО "ПрименениеУСН", то элементы настройки КУДиР не отображаются
	// - Если применяется УСН, элементы настройки КУДиР отображаются,
	//   состав отображаемых элементов зависит от вида операции и ФО формы
	
	ОтображатьПорядокОтраженияАванса = ОтображатьПорядокОтраженияАвансаДляУСН();
	
	Элементы.РасшифровкаПлатежаПолеОтражениеАванса.Видимость = ОтображатьПорядокОтраженияАванса;
	НастроитьРеквизитыСчетовУчетаАвансаДляУСН(ОтображатьПорядокОтраженияАванса);
	
	ОтображатьДоходыУСН = ПрименениеУСН И УчетУСН.ЕстьПрочиеРасчетыПоДоходам(Объект.ВидОперации);
	Элементы.РасшифровкаПлатежаДоходыУСН.Видимость = ОтображатьДоходыУСН;
	
	УстановитьЗаголовкиКолонокУСН();
	
	ЗаполнитьСписокВыбораПорядкаОтраженияАвансаВТЧ();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		Элементы.ГруппаОтражениеВУСН.Видимость = ПрименениеУСН;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		
		Элементы.ГруппаРозничнаяВыручкаОтражениеВНУ.Видимость = (ПрименениеУСН ИЛИ ПрименяетсяУСНПатент)
			И Объект.ВыручкаСНТТ И УчетВПродажныхЦенах;
			
		Элементы.ГруппаРозничнаяВыручкаОтражениеДоходов.Видимость = Объект.ВыручкаСНТТ И УчетВПродажныхЦенах
			И (ПрименяетсяУСНПатент ИЛИ ПлательщикЕНВД);
		Элементы.ГруппаПатент.Видимость = ПрименяетсяУСНПатент И Объект.ВыручкаСНТТ И УчетВПродажныхЦенах;
		
		Элементы.ГруппаРозничнаяВыручкаОтражениеВУСН.Видимость = Объект.ВыручкаСНТТ И УчетВПродажныхЦенах
			И ПрименениеУСН И НЕ НТТНаЕНВД;
		Элементы.РозничнаяВыручкаРасходыУСН.Видимость = Объект.ВыручкаСНТТ И УчетВПродажныхЦенах
			И ПрименениеУСН И НЕ НТТНаЕНВД И НЕ ПрименениеУСНДоходы;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтображатьПорядокОтраженияАвансаДляУСН()
	
	Если ПрименениеУСН ИЛИ ПрименяетсяУСНПатент Тогда
		Если УчетУСН.ЕстьАвансыПокупателей(Объект.ВидОперации) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура НастроитьРеквизитыСчетовУчетаАвансаДляУСН(Знач ОтображатьПорядокОтраженияАванса = Неопределено)
	
	Если ОтображатьПорядокОтраженияАванса = Неопределено Тогда
		ОтображатьПорядокОтраженияАванса = ОтображатьПорядокОтраженияАвансаДляУСН();
	КонецЕсли;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамПриУСН.Видимость = ОтображатьПорядокОтраженияАванса;
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость       = НЕ ОтображатьПорядокОтраженияАванса;
		
	КонецЕсли;
	
	ПоказыватьГруппуАвансов = Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамПриУСН.Видимость 
		И Элементы.РасшифровкаПлатежаПолеОтражениеАванса.Видимость;
	// Если счет авансов и порядок отражения выводятся в группе, то должен быть выведен заголовок группы.
	// Если нет - то заголовок поля с порядком отражения.
	Элементы.РасшифровкаПлатежаПолеОтражениеАванса.ОтображатьВШапке   = Не ПоказыватьГруппуАвансов;
	Элементы.РасшифровкаПлатежаГруппаОтражениеАванса.ОтображатьВШапке = ПоказыватьГруппуАвансов;
	
	
	ПоказыватьГруппуСчетов = Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость;
	// Если счет расчетов и счет аванса выводятся в группе, то должен быть выведен заголовок группы.
	// Если нет - то заголовок счета.
	Элементы.РасшифровкаПлатежаГруппаСчетаРасчетов.ОтображатьВШапке              = ПоказыватьГруппуСчетов;
	Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.ОтображатьВШапке   = Не ПоказыватьГруппуСчетов;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонокУСН()
	
	Если НЕ ПрименениеУСН И НЕ УчетУСН.ЕстьПрочиеРасчетыПоДоходам(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
		
	ЗаголовокДоходыУСН = НСтр("ru = 'Доходы УСН'");
	Если ОплатаВВалюте Тогда
		ЗаголовокДоходыУСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Доходы УСН, %1'"), ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоходыУСН.Заголовок = ЗаголовокДоходыУСН;
	
КонецПроцедуры

&НаСервере
Функция ОплаченныеСчета()
	
	ОплаченныеСчета = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
			Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
				ОплаченныеСчета.Добавить(СчетНаОплату);
				УникальныеЗначения.Вставить(СчетНаОплату, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОплаченныеСчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтотОбъект.ИмяФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	
	// Подключаем ФР
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		//Готовим данные
		ВходныеПараметры    = Новый Массив();
		ВыходныеПараметры   = Неопределено;
		
		ПараметрыУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(ИдентификаторУстройства);
		НомерСекции         = ?(ПараметрыУстройства.Свойство("НомерСекции"), ПараметрыУстройства.НомерСекции, 0);
		
		ПодготовитьТаблицуПоСтавкамНДС(ВходныеПараметры, НомерСекции);
		
		// Печатаем чек.
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
			ИдентификаторУстройства,
			"PrintReceipt",
			ВходныеПараметры,
			ВыходныеПараметры);
		
		Если Результат Тогда
			// Установить полученное значение номера чека реквизиту документа.
			Объект.НомерЧекаККМ = ВыходныеПараметры[1];
			Модифицированность = Истина;
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Иначе
			ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
				|Чек не напечатан на фискальном регистраторе.
				|Дополнительное описание:
				|%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
				"%ДополнительноеОписание%",
				ВыходныеПараметры[1]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		// Отключаем ФР
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
	Иначе
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("СчетКасса");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамПриУСН");
	ЭлементыСчетов.Добавить("СчетБанк");
	ЭлементыСчетов.Добавить("СчетУчета");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	// Вне зависимости от настроек пользователя для отдельных видов операций некоторые счета видны
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		Элементы.СчетУчета.Видимость = Истина;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам Тогда
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.Видимость = Истина;
	КонецЕсли;
	
	// Для счетов аванса есть две колонки, видна из которых может быть только одна
	НастроитьРеквизитыСчетовУчетаАвансаДляУСН();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументМожетБытьОформленВВалюте(ВидОперации)
	
	Возврат ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаРаботником")
		И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричинаИзменения, ПричиныИзменения)
	
	Если СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		
		ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
		
		Если ПричиныИзменения.Найти("СчетКасса") <> Неопределено Тогда
			// Если видны счета, то при изменении счета может быть изменена валюта.
			// А изменение валюты в общем случае приводит к установке счета кассы.
			// В конкретном случае этого нужно избежать.
			ПараметрыЗаполнения.КЗаполнению.Удалить("СчетКасса");
		КонецЕсли;
		
		Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			
			// В этом режиме только автоматическое изменение валюты (запрет оформления в иностранной валюте)
			// должен приводить к смене счета.
			
			Если ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
				ПараметрыЗаполнения.КЗаполнению.Удалить("СчетКасса");
			КонецЕсли;
			
		КонецЕсли;
		
		СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)
	
	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()
	
	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ПриходныйКассовыйОрдер",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);
	
	// 1. Заполняемые реквизиты
	// ВалютаДокумента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетКасса");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// РасшифровкаПлатежа.СпособПогашенияЗадолженности
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВалютаДокумента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКасса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
		КонецЕсли;
		
		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
		КонецЕсли;
		
		// РасшифровкаПлатежа.СпособПогашенияЗадолженности
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;
		
	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти
