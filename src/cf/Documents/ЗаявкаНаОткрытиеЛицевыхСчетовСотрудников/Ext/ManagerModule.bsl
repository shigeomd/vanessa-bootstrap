#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Список на открытие лицевых счетов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СписокНаОткрытиеЛицевыхСчетов";
	КомандаПечати.Представление = НСтр("ru = 'Список на открытие лицевых счетов'");
	
	// Список на открытие лицевых счетов в Microsoft Word.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СписокНаОткрытиеЛицевыхСчетов";
	КомандаПечати.Представление = НСтр("ru = 'Список на открытие лицевых счетов в Microsoft Word'");
	КомандаПечати.ФорматСохранения = ТипФайлаТабличногоДокумента.DOCX;
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокНаОткрытиеЛицевыхСчетов") Тогда
		ТабличныйДокумент = ПечатьСпискаНаОткрытиеЛицевыхСчетовПоДокументам(МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СписокНаОткрытиеЛицевыхСчетов", НСтр("ru = 'Список на открытие лицевых счетов'"), ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляПечатиСпискаНаОткрытиеЛицевыхСчетов(МассивОбъектов)
	
	Возврат Новый Структура("ДанныеШапок, ДанныеСтрок",
		ДанныеШапкиДокументовДляПолученияТекстаФайла(МассивОбъектов, ТекущаяДатаСеанса()),
		ДанныеСтрокДокументовДляПолученияТекстаФайла(МассивОбъектов, ТекущаяДатаСеанса()));
	
КонецФункции

Функция ПечатьСпискаНаОткрытиеЛицевыхСчетовПоДокументам(МассивОбъектов, ОбъектыПечати) Экспорт
	
	// получаем данные для печати
	ДанныеДляПечати = ДанныеДляПечатиСпискаНаОткрытиеЛицевыхСчетов(МассивОбъектов);
	
	ТабличныйДокумент = ПечатьСпискаНаОткрытиеЛицевыхСчетов(МассивОбъектов, ОбъектыПечати, ДанныеДляПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьСпискаНаОткрытиеЛицевыхСчетовПоXML(МассивОбъектов, ОбъектыПечати) Экспорт
	
	// получаем данные для печати
	ДанныеДляПечати = ОбменСБанкамиПоЗарплатнымПроектам.ДанныеСпискаНаОткрытиеЛицевыхСчетовПоXML(МассивОбъектов);
	
	ТабличныйДокумент = ПечатьСпискаНаОткрытиеЛицевыхСчетов(МассивОбъектов, ОбъектыПечати, ДанныеДляПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьСпискаНаОткрытиеЛицевыхСчетов(МассивОбъектов, ОбъектыПечати, ДанныеДляПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников_СписокНаОткрытиеЛицевыхСчетов";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.ПФ_MXL_СписокНаОткрытиеЛицевыхСчетов");
	
	ДанныеДляПечатиШапок = ДанныеДляПечати.ДанныеШапок;
	ДанныеДляПечатиСтрок = ДанныеДляПечати.ДанныеСтрок;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеДляПечатиШапки Из ДанныеДляПечатиШапок Цикл
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подсчитываем количество страниц документа - для корректного разбиения на страницы.
		ВсегоСтрокДокумента = ДанныеДляПечатиСтрок.Количество();
		
		ОбластьМакетаЗаголовок	= Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакетаШапка		= Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаСтрока 	= Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаПодвал 	= Макет.ПолучитьОбласть("Подвал");
		
		// Массив с двумя строками - для разбиения на страницы.
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
		
		// выводим данные о документе
		ОбластьМакетаЗаголовок.Параметры.Дата = Формат(ДанныеДляПечатиШапки.ДатаДокумента, "ДЛФ=D");
		ОбластьМакетаЗаголовок.Параметры.НомерДоговора = СокрЛП(ДанныеДляПечатиШапки.НомерДоговора);
		ОбластьМакетаЗаголовок.Параметры.Организация = СокрЛП(ДанныеДляПечатиШапки.ПолноеНаименованиеОрганизации);
		ОбластьМакетаЗаголовок.Параметры.РасчетныйСчетОрганизации = СокрЛП(ДанныеДляПечатиШапки.НомерРасчетногоСчетаОрганизации);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		ВыведеноСтраниц = 1; ВыведеноСтрок = 0;
		
		ОбластьМакетаШапка.Параметры.НомерСтраницы = ВыведеноСтраниц;
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		// Выводим данные по строкам документа.
		НайденныеСтроки = ДанныеДляПечатиСтрок.НайтиСтроки(Новый Структура("Документ", ДанныеДляПечатиШапки.Документ));
		Для Каждого ДанныеДляПечатиСтроки Из НайденныеСтроки Цикл
			
			ОбластьМакетаСтрока.Параметры.ФИОСотрудника = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 %3'"), ДанныеДляПечатиСтроки.Фамилия, ДанныеДляПечатиСтроки.Имя, ДанныеДляПечатиСтроки.Отчество);
			ОбластьМакетаСтрока.Параметры.ЭмбоссированныйТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 %3'"), ДанныеДляПечатиСтроки.ЭмбоссированныйТекст1, ДанныеДляПечатиСтроки.ЭмбоссированныйТекст2, ДанныеДляПечатиСтроки.ЭмбоссированныйТекст3);
			ОбластьМакетаСтрока.Параметры.АдресПрописки = ДанныеДляПечатиСтроки.АдресПоПропискеПредставление;
			ОбластьМакетаСтрока.Параметры.ДатаРождения = Формат(ДанныеДляПечатиСтроки.ДатаРождения, "ДЛФ=D");
			ОбластьМакетаСтрока.Параметры.Пол = ДанныеДляПечатиСтроки.Пол;
			ОбластьМакетаСтрока.Параметры.Отделение = ДанныеДляПечатиСтроки.ОтделениеБанка;
			ОбластьМакетаСтрока.Параметры.Филиал = ДанныеДляПечатиСтроки.ФилиалОтделенияБанка;
			ОбластьМакетаСтрока.Параметры.РабочийТелефон = ДанныеДляПечатиСтроки.ТелефонРабочийПредставление;
			ОбластьМакетаСтрока.Параметры.АдресПроживания = ДанныеДляПечатиСтроки.АдресМестаПроживанияПредставление;
			ОбластьМакетаСтрока.Параметры.АдресМестаРаботы = ДанныеДляПечатиСтроки.АдресМестаРаботыПредставление;
			ОбластьМакетаСтрока.Параметры.УдостоверениеЛичности = ДанныеДляПечатиСтроки.ДокументПредставление;
			
			// разбиение на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу.
			ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			Если Не ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
				ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				
				ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ВыведеноСтраниц = ВыведеноСтраниц + 1;
				
				ОбластьМакетаШапка.Параметры.НомерСтраницы = ВыведеноСтраниц;
				ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечатиШапки.Документ);
		
	КонецЦикла; // по документам
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область МеханизмФиксацииИзменений

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксацииВторичныхДанных(ФиксацияОписаниеФиксацииРеквизитов(), , ФиксацияОписанияТЧ());
КонецФункции

Функция ФиксацияОписаниеФиксацииРеквизитов()
	
	ОписаниеФиксацииРеквизитов = Новый Соответствие;
	
	// Сотрудники
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиТабельныйНомер",						ФиксацияОписаниеФиксацииРеквизита("ТабельныйНомер", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиДатаПриема",							ФиксацияОписаниеФиксацииРеквизита("ДатаПриема", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиДолжность",							ФиксацияОписаниеФиксацииРеквизита("Должность", "Сотрудник"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиЯвляетсяРезидентом",					ФиксацияОписаниеФиксацииРеквизита("ЯвляетсяРезидентом", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиГражданство",						ФиксацияОписаниеФиксацииРеквизита("Гражданство", "ФизическоеЛицо"));
	
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиПол",								ФиксацияОписаниеФиксацииРеквизита("Пол", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиДатаРождения",						ФиксацияОписаниеФиксацииРеквизита("ДатаРождения", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиТелефонДомашний",					ФиксацияОписаниеФиксацииРеквизита("ТелефонДомашний", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиТелефонДомашнийПредставление",		ФиксацияОписаниеФиксацииРеквизита("ТелефонДомашнийПредставление", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиТелефонРабочий",						ФиксацияОписаниеФиксацииРеквизита("ТелефонРабочий", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиТелефонРабочийПредставление",		ФиксацияОписаниеФиксацииРеквизита("ТелефонРабочийПредставление", "ФизическоеЛицо"));
	
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиДокументВид",						ФиксацияОписаниеФиксацииРеквизита("ДокументВид", "ФизическоеЛицоДокумент", ,  , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиДокументСерия",						ФиксацияОписаниеФиксацииРеквизита("ДокументСерия", "ФизическоеЛицоДокумент", ,  , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиДокументНомер",						ФиксацияОписаниеФиксацииРеквизита("ДокументНомер", "ФизическоеЛицоДокумент", ,  , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиДокументДатаВыдачи",					ФиксацияОписаниеФиксацииРеквизита("ДокументДатаВыдачи", "ФизическоеЛицоДокумент", ,  , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиДокументСрокДействия",				ФиксацияОписаниеФиксацииРеквизита("ДокументСрокДействия", "ФизическоеЛицоДокумент", ,  , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиДокументКемВыдан",					ФиксацияОписаниеФиксацииРеквизита("ДокументКемВыдан", "ФизическоеЛицоДокумент", ,  , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиДокументКодПодразделения", 			ФиксацияОписаниеФиксацииРеквизита("ДокументКодПодразделения", "ФизическоеЛицоДокумент", ,  , Истина));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиДокументПредставление",				ФиксацияОписаниеФиксацииРеквизита("ДокументПредставление", "ФизическоеЛицоДокумент", ,  , Истина));
	
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиМестоРождения",						ФиксацияОписаниеФиксацииРеквизита("МестоРождения", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиМестоРожденияПредставление",			ФиксацияОписаниеФиксацииРеквизита("МестоРожденияПредставление", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиАдресМестаРаботы",					ФиксацияОписаниеФиксацииРеквизита("АдресМестаРаботы", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиАдресМестаРаботыПредставление",		ФиксацияОписаниеФиксацииРеквизита("АдресМестаРаботыПредставление", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиАдресДляИнформирования",				ФиксацияОписаниеФиксацииРеквизита("АдресДляИнформирования", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиАдресДляИнформированияПредставление",ФиксацияОписаниеФиксацииРеквизита("АдресДляИнформированияПредставление", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиАдресПоПрописке",					ФиксацияОписаниеФиксацииРеквизита("АдресПоПрописке", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиАдресПоПропискеПредставление",		ФиксацияОписаниеФиксацииРеквизита("АдресПоПропискеПредставление", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиАдресМестаПроживания",				ФиксацияОписаниеФиксацииРеквизита("АдресМестаПроживания", "ФизическоеЛицо"));
	ОписаниеФиксацииРеквизитов.Вставить("СотрудникиАдресМестаПроживанияПредставление",	ФиксацияОписаниеФиксацииРеквизита("АдресМестаПроживанияПредставление", "ФизическоеЛицо"));
	
	Возврат Новый ФиксированноеСоответствие(ОписаниеФиксацииРеквизитов);
	
КонецФункции

Функция ФиксацияОписанияТЧ()
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("ФизическоеЛицо");
	
	СтруктураКлючевыхПолей = Новый Структура("Сотрудники", МассивПолей);
	
	Возврат СтруктураКлючевыхПолей;
	
КонецФункции

Функция ФиксацияОписаниеФиксацииРеквизита(ИмяРеквизита, 
	ИмяГруппы, 
	ОснованиеЗаполнения = "Сотрудник",
	РеквизитСтроки = Истина,
	ФиксацияГруппы = Ложь, 
	Путь = "Сотрудники",
	Используется = Истина, 
	ОтображатьПредупреждение = Истина, 
	СтрокаПредупреждения =  "")
	
	ФиксацияРеквизита = ФиксацияВторичныхДанныхВДокументах.СтруктураПараметровОписанияФиксацииРеквизитов();
	ФиксацияРеквизита.Вставить("Используется", Используется);
	ФиксацияРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
	ФиксацияРеквизита.Вставить("ИмяГруппы", ИмяГруппы);
	ФиксацияРеквизита.Вставить("ФиксацияГруппы", ФиксацияГруппы);
	ФиксацияРеквизита.Вставить("ОснованиеЗаполнения", ОснованиеЗаполнения);
	ФиксацияРеквизита.Вставить("Путь", Путь);
	ФиксацияРеквизита.Вставить("ОтображатьПредупреждение", ОтображатьПредупреждение);
	Если СтрокаПредупреждения <> "" Тогда
		ФиксацияРеквизита.Вставить("СтрокаПредупреждения", СтрокаПредупреждения);
	КонецЕсли;
	ФиксацияРеквизита.Вставить("РеквизитСтроки", РеквизитСтроки);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксацииРеквизита(ФиксацияРеквизита);
	
КонецФункции

#КонецОбласти

#Область ФормированиеФайлаОбмена

#Область ПроцедурыИФункцииФормированияАдреса

Процедура ДополнитьКолонкиАдреса(ДанныеСтрокиДокумента, НазваниеКолонки)
	
	Колонки = ДанныеСтрокиДокумента.Колонки;
	Колонки.Добавить("Индекс" + НазваниеКолонки);
	Колонки.Добавить("СтранаНазвание" + НазваниеКолонки);
	Колонки.Добавить("СтранаКод" + НазваниеКолонки);
	Колонки.Добавить("РегионНазвание" + НазваниеКолонки);
	Колонки.Добавить("РегионСокращение" + НазваниеКолонки);
	Колонки.Добавить("РайонНазвание" + НазваниеКолонки);
	Колонки.Добавить("РайонСокращение" + НазваниеКолонки);
	Колонки.Добавить("ГородНазвание" + НазваниеКолонки);
	Колонки.Добавить("ГородСокращение" + НазваниеКолонки);
	Колонки.Добавить("НаселенныйПунктНазвание" + НазваниеКолонки);
	Колонки.Добавить("НаселенныйПунктСокращение" + НазваниеКолонки);
	Колонки.Добавить("УлицаНазвание" + НазваниеКолонки);
	Колонки.Добавить("УлицаСокращение" + НазваниеКолонки);
	Колонки.Добавить("Дом" + НазваниеКолонки);
	Колонки.Добавить("Корпус" + НазваниеКолонки);
	Колонки.Добавить("Квартира" + НазваниеКолонки);
	
КонецПроцедуры

Процедура ДополнитьКолонкиМестаРождения(ДанныеСтрокиДокумента, НазваниеКолонки)
	
	Колонки = ДанныеСтрокиДокумента.Колонки;
	Колонки.Добавить("СтранаНазвание" + НазваниеКолонки);
	Колонки.Добавить("РегионНазвание" + НазваниеКолонки);
	Колонки.Добавить("РегионСокращение" + НазваниеКолонки);
	Колонки.Добавить("РайонНазвание" + НазваниеКолонки);
	Колонки.Добавить("РайонСокращение" + НазваниеКолонки);
	Колонки.Добавить("НаселенныйПунктНазвание" + НазваниеКолонки);
	Колонки.Добавить("НаселенныйПунктСокращение" + НазваниеКолонки);
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиАдреса(СтрокаДанных, НазваниеКолонки)
	
	СтруктураАдреса = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураПолейАдреса();
	СтруктураАдресаСтрокиДанных = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
	СтрокаДанных[НазваниеКолонки], Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица);
	
	ЗаполнитьЗначенияСвойств(СтруктураАдреса, СтруктураАдресаСтрокиДанных);
	
	СтрокаДанных["Индекс" + НазваниеКолонки] = СтруктураАдреса.Индекс;
	СтрокаДанных["СтранаНазвание" + НазваниеКолонки] = СтруктураАдреса.Страна;
	СтрокаДанных["СтранаКод" + НазваниеКолонки] = СтруктураАдреса.КодСтраны;
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураАдреса.Регион, "Регион", НазваниеКолонки);
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураАдреса.Район, "Район", НазваниеКолонки);
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураАдреса.Город, "Город", НазваниеКолонки);
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураАдреса.НаселенныйПункт, "НаселенныйПункт", НазваниеКолонки);
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураАдреса.Улица, "Улица", НазваниеКолонки);
	СтрокаДанных["Дом" + НазваниеКолонки] = СтруктураАдреса.Дом;
	СтрокаДанных["Корпус" + НазваниеКолонки] = СтруктураАдреса.Корпус;
	СтрокаДанных["Квартира" + НазваниеКолонки] = СтруктураАдреса.Квартира;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиМестаРождения(СтрокаДанных, НазваниеКолонки)
	
	СтруктураМестоРождения = ПерсонифицированныйУчетКлиентСервер.РазложитьМестоРождения(СтрокаДанных[НазваниеКолонки], Ложь);
	
	СтрокаДанных["СтранаНазвание" + НазваниеКолонки] = СтруктураМестоРождения.Страна;
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураМестоРождения.Область, "Регион", НазваниеКолонки);
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураМестоРождения.Район, "Район", НазваниеКолонки);
	ЗаполнитьНазваниеИСокращение(СтрокаДанных, СтруктураМестоРождения.НаселенныйПункт, "НаселенныйПункт", НазваниеКолонки);
	
КонецПроцедуры

Процедура ЗаполнитьНазваниеИСокращение(СтрокаДанных, ПолноеНазвание, НазваниеЭлемента, НазваниеКолонки)
	
	СтруктураЭлемента = АдресныйКлассификаторКлиентСервер.НаименованиеИСокращение(ПолноеНазвание);
	
	Если НЕ ПустаяСтрока(СтруктураЭлемента.Наименование) Тогда
		СтрокаДанных[НазваниеЭлемента + "Название" + НазваниеКолонки] = СтруктураЭлемента.Наименование;
		Если НЕ ПустаяСтрока(СтруктураЭлемента.Сокращение) Тогда
			СтрокаДанных[НазваниеЭлемента + "Сокращение" + НазваниеКолонки] = СтруктураЭлемента.Сокращение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииФормированияФайлаОбменаСБанком

// Формирует и прикрепляет файл обмена к документу с помощью подсистемы "Файлы".
//
// Параметры:
//		СтруктураПараметровДляФормированияФайла - Структура - должна содержать значения:
//			МассивДокументов - Массив ссылок на документы, по которым требуется сформировать файл.
//			МассивОписанийФайлов - Массив описаний сформированных файлов.
//
Процедура ВыгрузитьФайлыДляОбменаСБанком(СтруктураПараметровДляФормированияФайла) Экспорт
	
	Если Не СтруктураПараметровДляФормированияФайла.Свойство("СтруктураПараметровЭД") Тогда
		СтруктураПараметровДляФормированияФайла.Вставить("СтруктураПараметровЭД", Неопределено);
	КонецЕсли;
	
	Отказ = Ложь;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", СтруктураПараметровДляФормированияФайла.МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Ссылка КАК Заявка,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Проведен КАК Проведен
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников
	|ГДЕ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Ссылка В(&МассивДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Проведен Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 не проведен.'"), Выборка.Заявка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Заявка,,, Отказ);
		КонецЕсли;
		Если НЕ ОбменСБанкамиПоЗарплатнымПроектам.ИспользоватьЭОИСБанком(Выборка.ЗарплатныйПроект) Тогда
			Если ЗначениеЗаполнено(Выборка.ЗарплатныйПроект) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По зарплатному проекту %1 не используется обмен электронными документами с банком.'"),
					Выборка.ЗарплатныйПроект);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 не выбран зарплатный проект.'"), Выборка.Заявка);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, Выборка.ЗарплатныйПроект, "ИспользоватьЭлектронныйДокументооборотСБанком",,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = "ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников";
	ДатаПолученияДанных = ТекущаяДатаСеанса();

	СтруктураПараметровДляФормированияФайла.Вставить("ВидОперации", ВидОперации);
	СтруктураПараметровДляФормированияФайла.Вставить("ДанныеШапки", ДанныеШапкиДокументовДляПолученияТекстаФайла(
		СтруктураПараметровДляФормированияФайла.МассивДокументов, ДатаПолученияДанных));
	СтруктураПараметровДляФормированияФайла.Вставить("ДанныеСтрок", ДанныеСтрокДокументовДляПолученияТекстаФайла(
		СтруктураПараметровДляФормированияФайла.МассивДокументов, ДатаПолученияДанных));
	СтруктураПараметровДляФормированияФайла.Вставить("КорневыеСвойства", ОбменСБанкамиПоЗарплатнымПроектам.КорневыеСвойства(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеПолейФайла", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеПолейФайла(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("ОбязательныеПоляФайла", ОбменСБанкамиПоЗарплатнымПроектам.ОбязательныеПоляФайла(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеПреобразованияЗначений", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеПреобразованияЗначений(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеТипов", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеТипов(ВидОперации));
	
	ОбменСБанкамиПоЗарплатнымПроектам.СоздатьФайлыДляОбменаСБанком(СтруктураПараметровДляФормированияФайла);
	
	МассивДокументовСФайлами = Новый Массив;
	Для каждого ОписаниеФайла Из СтруктураПараметровДляФормированияФайла.МассивОписанийФайлов Цикл
		МассивДокументовСФайлами.Добавить(ОписаниеФайла.ВладелецФайла);
	КонецЦикла;
	ОтменитьОтложенноеОткрытиеЛицевыхСчетов(МассивДокументовСФайлами);
	
КонецПроцедуры

// Получает данные документа для формирования файла обмена.
//
// Параметры:
//		МассивДокументов - Массив ссылок на документы, по которым требуется получить данные.
//		ДатаПолученияДанных - дата формирования файла.
//
// Возвращаемое значение:
//		Строка таблицы значений "ДанныеШапкиДокумента" - содержит данные шапки документа.
//
Функция ДанныеШапкиДокументовДляПолученияТекстаФайла(МассивДокументов, ДатаПолученияДанных)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ЗаявкиНаОткрытиеЛицевыхСчетов", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкиНаОткрытиеЛицевыхСчетов.Документ КАК Документ,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Номер КАК НомерДокумента,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеОрганизации,
	|	Организации.ИНН КАК ИННОрганизации,
	|	ЗарплатныеПроекты.Ссылка КАК ЗарплатныйПроект,
	|	ЗарплатныеПроекты.НомерДоговора КАК НомерДоговора,
	|	ЗарплатныеПроекты.ДатаДоговора КАК ДатаДоговора,
	|	ЗарплатныеПроекты.РасчетныйСчет КАК НомерРасчетногоСчетаОрганизации,
	|	ЗарплатныеПроекты.ОтделениеБанка КАК ОтделениеБанка,
	|	ЗарплатныеПроекты.ФилиалОтделенияБанка КАК ФилиалОтделенияБанка,
	|	ЗарплатныеПроекты.ФорматФайла КАК ФорматФайла,
	|	КлассификаторБанковРФ.Код КАК БИКБанка,
	|	ЗаявкиНаОткрытиеЛицевыхСчетов.КоличествоЗаписей КАК КоличествоЗаписей,
	|	ЗаявкиНаОткрытиеЛицевыхСчетов.СуммаИтого КАК СуммаИтого
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Ссылка КАК Документ,
	|		КОЛИЧЕСТВО(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ФизическоеЛицо) КАК КоличествоЗаписей,
	|		СУММА(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.СуммаПервоначальногоПополнения) КАК СуммаИтого
	|	ИЗ
	|		Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Сотрудники КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники
	|	ГДЕ
	|		ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Ссылка В(&ЗаявкиНаОткрытиеЛицевыхСчетов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Ссылка) КАК ЗаявкиНаОткрытиеЛицевыхСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников
	|		ПО ЗаявкиНаОткрытиеЛицевыхСчетов.Документ = ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Организация = Организации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО (ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
	|		ПО (ЗарплатныеПроекты.Банк = КлассификаторБанковРФ.Ссылка)";
	
	ДанныеШапкиДокументов = Запрос.Выполнить().Выгрузить();
	
	// ИдПервичногоДокумента
	ДанныеШапкиДокументов.Колонки.Добавить("ИдПервичногоДокумента");
	
	// ДатаФормирования
	ДанныеШапкиДокументов.Колонки.Добавить("ДатаФормирования");
	
	// ИмяФайла
	ДанныеШапкиДокументов.Колонки.Добавить("ИмяФайла");
	
	// ДанныеРеестра
	ДанныеШапкиДокументов.Колонки.Добавить("ДанныеРеестра");
	
	КоличествоЗаписей = Неопределено;
	СуммаИтого = Неопределено;
	Для каждого СтрокаДанных Из ДанныеШапкиДокументов Цикл
		Если КоличествоЗаписей = Неопределено Тогда
			КоличествоЗаписей = ДанныеШапкиДокументов.Итог("КоличествоЗаписей");
		КонецЕсли;
		Если СуммаИтого = Неопределено Тогда
			СуммаИтого = ДанныеШапкиДокументов.Итог("СуммаИтого");
		КонецЕсли;
		СтрокаДанных.ДатаФормирования = ДатаПолученияДанных;
		СтрокаДанных.ИдПервичногоДокумента = СтрокаДанных.Документ.УникальныйИдентификатор();
		СтрокаДанных.ИмяФайла = ОбменСБанкамиПоЗарплатнымПроектам.ИмяФайлаОбменаСБанкамиПоЗарплатнымПроектам(СтрокаДанных.Документ, СтрокаДанных.ОтделениеБанка, СтрокаДанных.НомерДокумента, "o");
		
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьДанныеШапкиДокументаДляПолученияТекстаФайла(СтрокаДанных, СтрокаДанных.Документ, ДатаПолученияДанных);
	КонецЦикла;
	
	Возврат ДанныеШапкиДокументов;
	
КонецФункции

// Получает данные строк документа для формирования файла обмена.
//
// Параметры:
//		МассивДокументов - Массив ссылок на документы, по которым требуется получить данные.
//		ДатаПолученияДанных - дата формирования файла.
//
// Возвращаемое значение:
//		Таблица значений "ДанныеСтрокДокумента" - содержит данные строк документа.
//
Функция ДанныеСтрокДокументовДляПолученияТекстаФайла(МассивДокументов, ДатаПолученияДанных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ЗаявкиНаОткрытиеЛицевыхСчетов", МассивДокументов);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Ссылка КАК Документ,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Фамилия КАК Фамилия,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Имя КАК Имя,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Отчество КАК Отчество,
	|	ЗарплатныеПроекты.ОтделениеБанка КАК ОтделениеБанка,
	|	ЗарплатныеПроекты.ФилиалОтделенияБанка КАК ФилиалОтделенияБанка,
	|	ЗарплатныеПроекты.Валюта.Код КАК КодВалюты,
	|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Должность) КАК Должность,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ЭмбоссированныйТекст1 КАК ЭмбоссированныйТекст1,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ЭмбоссированныйТекст2 КАК ЭмбоссированныйТекст2,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ЭмбоссированныйТекст3 КАК ЭмбоссированныйТекст3,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.СистемаРасчетовПоБанковскимКартам КАК СистемаРасчетовПоБанковскимКартам,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.СуммаПервоначальногоПополнения КАК СуммаПервоначальногоПополнения,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ЯвляетсяЗарплатнойКартой КАК ЯвляетсяЗарплатнойКартой,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ОплатаЗарплатнойКарты КАК ОплатаЗарплатнойКарты,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ЯвляетсяСотрудникомБанка КАК ЯвляетсяСотрудникомБанка,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ИспользуетсяОвердрафт КАК ИспользуетсяОвердрафт,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.КатегорияСотрудника КАК КатегорияСотрудника,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ЯвляетсяУчастникомБонуснойПрограммы КАК ЯвляетсяУчастникомБонуснойПрограммы,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.БонуснаяПрограмма КАК БонуснаяПрограмма,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.НомерУчастникаБонуснойПрограммы КАК НомерУчастникаБонуснойПрограммы,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ТарифСледующийГод КАК ТарифСледующийГод,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ТарифТекущийГод КАК ТарифТекущийГод,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.СпособРассылкиОтчета КАК СпособРассылкиОтчета,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.СчетДебета КАК СчетДебета,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.НомерМобильногоТелефона КАК НомерМобильногоТелефонаXML,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.НомерМобильногоТелефонаПредставление КАК НомерМобильногоТелефонаПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ОператорСвязи КАК ОператорСвязи,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ИспользованиеМобильногоБанка КАК ИспользованиеМобильногоБанка,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ТарифМобильногоБанка КАК ТарифМобильногоБанка,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.РазрешитьПередачуИнформацииВБКИ КАК РазрешитьПередачуИнформацииВБКИ,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.КонтрольнаяИнформация КАК КонтрольнаяИнформация,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.НомерМиграционнойКарты КАК НомерМиграционнойКарты,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДатаНачалаПребыванияМиграционнойКарты КАК ДатаНачалаПребыванияМиграционнойКарты,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДатаОкончанияПребыванияМиграционнойКарты КАК ДатаОкончанияПребыванияМиграционнойКарты,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ВидМиграционногоДокумента.КодМВД КАК КодМиграционногоДокумента,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.НомерМиграционногоДокумента КАК НомерМиграционногоДокумента,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДатаНачалаПребыванияМиграционногоДокумента КАК ДатаНачалаПребыванияМиграционногоДокумента,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДатаОкончанияПребыванияМиграционногоДокумента КАК ДатаОкончанияПребыванияМиграционногоДокумента,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ПрогнозируемыйМесячныйДоход КАК ПрогнозируемыйМесячныйДоход,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ТабельныйНомер КАК ТабельныйНомер,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДатаПриема КАК ДатаПриема,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДеньВыплатыЗарплаты КАК ДеньВыплатыЗарплаты,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.КодВидаВклада КАК КодВидаВклада,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.КодПодвидаВклада КАК КодПодвидаВклада,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ВалютаВклада.Код КАК КодВалютыВклада,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДокументВид.Наименование КАК ДокументВид,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДокументВид.КодМВД КАК КодВидаДокумента,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДокументСерия КАК ДокументСерия,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДокументНомер КАК ДокументНомер,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДокументСрокДействия КАК ДокументСрокДействия,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДокументКемВыдан КАК ДокументКемВыдан,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДокументКодПодразделения КАК ДокументКодПодразделения,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДокументПредставление КАК ДокументПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Пол КАК Пол,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ДатаРождения КАК ДатаРождения,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.МестоРождения КАК МестоРождения,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.АдресДляИнформирования КАК АдресДляИнформирования,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.АдресМестаРаботы КАК АдресМестаРаботы,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.АдресПоПрописке КАК АдресПоПрописке,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.АдресМестаПроживания КАК АдресМестаПроживания,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ТелефонДомашний КАК ТелефонДомашний,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ТелефонДомашнийПредставление КАК ТелефонДомашнийПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ТелефонРабочий КАК ТелефонРабочий,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ТелефонРабочийПредставление КАК ТелефонРабочийПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ЯвляетсяРезидентом КАК ЯвляетсяРезидентом,
	|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Гражданство) КАК Гражданство,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ИдентификаторДизайна КАК ИдентификаторДизайна,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ПВК КАК ПВК,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ПриложениеКартаКод КАК ПриложениеКартаКод,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.ПриложениеКартаПараметры КАК ПриложениеКартаПараметры,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.АдресДляИнформированияПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.АдресМестаРаботыПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.АдресПоПропискеПредставление,
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.АдресМестаПроживанияПредставление
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Сотрудники КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Ссылка.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка
	|ГДЕ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудники.Ссылка В(&ЗаявкиНаОткрытиеЛицевыхСчетов)";
	
	ДанныеСтрокДокументов = Запрос.Выполнить().Выгрузить();
	ДанныеСтрокДокументов.Колонки.Добавить("НомерМобильногоТелефона");
	ДанныеСтрокДокументов.Колонки.Добавить("КатегорияНаселения");
	ДанныеСтрокДокументов.Колонки.Добавить("ДатаВыплатыЗарплаты");
	ДанныеСтрокДокументов.Колонки.Добавить("НомерСтроки");
	ДополнитьКолонкиАдреса(ДанныеСтрокДокументов, "АдресМестаРаботы");
	ДополнитьКолонкиАдреса(ДанныеСтрокДокументов, "АдресПоПрописке");
	ДополнитьКолонкиАдреса(ДанныеСтрокДокументов, "АдресМестаПроживания");
	ДополнитьКолонкиАдреса(ДанныеСтрокДокументов, "АдресДляИнформирования");
	ДополнитьКолонкиМестаРождения(ДанныеСтрокДокументов, "МестоРождения");
	
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ДополнитьКолонкиДанныхСтрокДокументов(ДанныеСтрокДокументов);
	
	НомерСтроки = 0;
	ПредыдущийДокумент = Неопределено;
	Для каждого СтрокаДанныхДокумента Из ДанныеСтрокДокументов Цикл
		
		// НомерСтроки
		Если СтрокаДанныхДокумента.Документ <> ПредыдущийДокумент Тогда 
			ПредыдущийДокумент = СтрокаДанныхДокумента.Документ;
			НомерСтроки = 0;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаДанныхДокумента.НомерСтроки = НомерСтроки;
		
		// ДатаВыплатыЗарплаты
		СтрокаДанныхДокумента.ДатаВыплатыЗарплаты = ?(СтрокаДанныхДокумента.ДеньВыплатыЗарплаты = 0, 
		Дата(1,1,1), 
		Дата(Год(ТекущаяДатаСеанса()), 1, СтрокаДанныхДокумента.ДеньВыплатыЗарплаты));
		
		// Адреса
		ЗаполнитьКолонкиАдреса(СтрокаДанныхДокумента, "АдресМестаРаботы");
		ЗаполнитьКолонкиАдреса(СтрокаДанныхДокумента, "АдресПоПрописке");
		ЗаполнитьКолонкиАдреса(СтрокаДанныхДокумента, "АдресМестаПроживания");
		ЗаполнитьКолонкиАдреса(СтрокаДанныхДокумента, "АдресДляИнформирования");
		ЗаполнитьКолонкиМестаРождения(СтрокаДанныхДокумента, "МестоРождения");
		
		// Мобильный телефон
		СтрокаДанныхДокумента.НомерМобильногоТелефона = "";
		Для Шаг = 1 По СтрДлина(СтрокаДанныхДокумента.НомерМобильногоТелефонаПредставление) Цикл
			СтрокаДанныхДокумента.НомерМобильногоТелефона = СтрокаДанныхДокумента.НомерМобильногоТелефона + 
				?(КодСимвола(СтрокаДанныхДокумента.НомерМобильногоТелефонаПредставление, Шаг) >= КодСимвола("0") 
					И КодСимвола(СтрокаДанныхДокумента.НомерМобильногоТелефонаПредставление, Шаг) <= КодСимвола("9"),
					Сред(СтрокаДанныхДокумента.НомерМобильногоТелефонаПредставление, Шаг, 1),
					"");
		КонецЦикла;
		СтрокаДанныхДокумента.НомерМобильногоТелефона = Прав(СтрокаДанныхДокумента.НомерМобильногоТелефона, 10);		
		
		// КатегорияНаселения
		Если СтрокаДанныхДокумента.КатегорияСотрудника = Перечисления.КатегорииСотрудниковОбменаСБанками.Пенсионеры Тогда
			СтрокаДанныхДокумента.КатегорияНаселения = "0";
		ИначеЕсли СтрокаДанныхДокумента.КатегорияСотрудника = Перечисления.КатегорииСотрудниковОбменаСБанками.Студенты Тогда
			СтрокаДанныхДокумента.КатегорияНаселения = "218";
		ИначеЕсли СтрокаДанныхДокумента.КатегорияСотрудника = Перечисления.КатегорииСотрудниковОбменаСБанками.Прочие Тогда
			Если СтрокаДанныхДокумента.ИспользуетсяОвердрафт Тогда
				Если СтрокаДанныхДокумента.ЯвляетсяСотрудникомБанка Тогда
					СтрокаДанныхДокумента.КатегорияНаселения = "212";
				Иначе
					СтрокаДанныхДокумента.КатегорияНаселения = "217";
				КонецЕсли;
			Иначе
				СтрокаДанныхДокумента.КатегорияНаселения = "207";
			КонецЕсли;
		КонецЕсли;
		
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ЗаполнитьКолонкиДанныхСтрокДокумента(СтрокаДанныхДокумента);
		
	КонецЦикла;
	
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьДанныеСтрокДокументовДляПолученияТекстаФайла(ДанныеСтрокДокументов, ДатаПолученияДанных);
	
	Возврат ДанныеСтрокДокументов;
	
КонецФункции

// Удаляет записи регистра сведений "Отложенное открытие лицевых счетов сотрудников" по сотрудникам табличной части
// документа.
//
// Параметры:
//		МассивДокументов - массив документов, по табличным частям которых будут очищены записи регистра сведений.
//
Процедура ОтменитьОтложенноеОткрытиеЛицевыхСчетов(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтложенноеОткрытиеЛицевыхСчетовСотрудников.Организация КАК Организация,
	|	ОтложенноеОткрытиеЛицевыхСчетовСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Сотрудники КАК ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтложенноеОткрытиеЛицевыхСчетовСотрудников КАК ОтложенноеОткрытиеЛицевыхСчетовСотрудников
	|		ПО ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Ссылка.Организация = ОтложенноеОткрытиеЛицевыхСчетовСотрудников.Организация
	|			И ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.ФизическоеЛицо = ОтложенноеОткрытиеЛицевыхСчетовСотрудников.ФизическоеЛицо
	|ГДЕ
	|	ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников.Ссылка В(&МассивДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Запись = РегистрыСведений.ОтложенноеОткрытиеЛицевыхСчетовСотрудников.СоздатьМенеджерЗаписи();
	Пока Выборка.Следующий() Цикл
		Запись.Организация = Выборка.Организация;
		Запись.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		Запись.Удалить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли