#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Вызывается документом СчетФактураВыданный на аванс при вводе на основании
//
Функция ТекстЗапросаСчетФактураВыданныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Дата КАК Дата,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка КАК ДокументОснование,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Организация КАК Организация,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Контрагент КАК Контрагент,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОплатаПлатежнойКартойРасшифровкаПлатежа.СуммаПлатежа) КАК Сумма
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
	|ГДЕ
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка = &ДокументОснование
	|	И ОплатаПлатежнойКартойРасшифровкаПлатежа.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.ПоДокументу)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Дата,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Организация,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.Контрагент,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СпособПогашенияЗадолженности,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.СтавкаНДС,
	|	ОплатаПлатежнойКартойРасшифровкаПлатежа.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

//Обработчики проведения
Функция ПодготовитьПараметрыФормированияПрочиеРасчеты(ТаблицаРеквизиты, ТаблицаВзаиморасчеты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Взаиморасчеты
	СписокОбязательныхКолонок = ""
	+ "ДокументРасчетов,"	// <ДокументСсылка.*>
	+ "СуммаРуб,"		// <Число, 15, 2> - сумма выручки с НДС в рублях
	+ "КорСчет," 		// <ПланСчетовСсылка.Хозрасчетный> - счет учета 
	+ "КорСубконто1," 		// <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто2" 		// <Характеристика.ВидыСубконтоХозрасчетные>
	;
	Параметры.Вставить("ТаблицаВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Взаиморасчеты
	СписокОбязательныхКолонок = ""
	+ "Организация,"				// <СправочникСсылка.Организации>
	+ "Период,"						// <Дата>
	+ "Регистратор,"				// <ДокументСсылка>
	+ "ВидОперации,"				// <ПеречислениеСсылка.ВидыОперацийОплатаПлатежнойКартой>
	+ "Эквайер,"					// <СправочникСсылка.Контрагенты>
	+ "ДоговорЭквайринга,"			// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетКасса,"					// <ПланСчетовСсылка.Хозрасчетный>
	+ "СуммаПлатежаВсего"			// <Число, 15, 2>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции 

Функция ПодготовитьТаблицуПрочиеРасчетыУСН(ТаблицаРеквизиты, ТаблицаВзаиморасчеты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыФормированияПрочиеРасчеты(ТаблицаРеквизиты, ТаблицаВзаиморасчеты);
	
	ТаблицаВзаиморасчетов = Параметры.ТаблицаВзаиморасчетов;
	
	Результат = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;	
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Организация			= Реквизиты.Организация;
	Регистратор			= Реквизиты.Регистратор;
	Период				= Реквизиты.Период;
	ВидОперации			= Реквизиты.ВидОперации;
	СуммаДокумента		= Реквизиты.СуммаПлатежаВсего;
	СчетУчета			= Реквизиты.СчетКасса;
	Эквайер				= Реквизиты.Эквайер;
	ДоговорЭквайринга	= Реквизиты.ДоговорЭквайринга;
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, Период);
	
	Если Не ПрименяетсяУСН Тогда
		Возврат Результат;
	КонецЕсли;	
	
	СуммаДляРаспределения = СуммаДокумента;
	
	Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
		СуммаВДвижение = Мин(СуммаДляРаспределения, СтрокаВзаиморасчетов.СуммаРуб);
		
		Если НЕ ТипЗнч(СтрокаВзаиморасчетов.ДокументРасчетов) = Тип("ДокументСсылка.ОплатаПлатежнойКартой")
			И НЕ ТипЗнч(СтрокаВзаиморасчетов.ДокументРасчетов) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И НЕ ТипЗнч(СтрокаВзаиморасчетов.ДокументРасчетов) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			
			СуммаДляРаспределения = СуммаДляРаспределения - СуммаВДвижение;
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = Результат.Добавить();
		
		НоваяСтрока.Организация	= Организация;
		НоваяСтрока.Регистратор	= Регистратор;
		НоваяСтрока.Период		= Период;
		НоваяСтрока.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
		НоваяСтрока.Контрагент			= Эквайер;
		НоваяСтрока.ДоговорКонтрагента	= ДоговорЭквайринга;
		НоваяСтрока.СчетУчета			= СчетУчета;
		
		НоваяСтрока.РасчетныйДокумент	= СтрокаВзаиморасчетов.ДокументРасчетов;
		НоваяСтрока.Сумма				= СуммаВДвижение;
		
		СуммаДляРаспределения = СуммаДляРаспределения - СуммаВДвижение;
		
	КонецЦикла;
	
	Если СуммаДляРаспределения > 0 Тогда
		
		НоваяСтрока = Результат.Добавить();
		
		НоваяСтрока.Организация	= Организация;
		НоваяСтрока.Регистратор	= Регистратор;
		НоваяСтрока.Период		= Период;
		НоваяСтрока.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
		НоваяСтрока.Контрагент			= Эквайер;
		НоваяСтрока.ДоговорКонтрагента	= ДоговорЭквайринга;
		НоваяСтрока.СчетУчета			= СчетУчета;
		
		НоваяСтрока.РасчетныйДокумент	= Регистратор;
		НоваяСтрока.Сумма				= СуммаДляРаспределения;
		
	КонецЕсли;
	
Возврат Результат;

КонецФункции 

Функция ПодготовитьТаблицуПрочиеРасчетыИП(ТаблицаРеквизиты, ТаблицаВзаиморасчеты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыФормированияПрочиеРасчеты(ТаблицаРеквизиты, ТаблицаВзаиморасчеты);
	
	ТаблицаВзаиморасчетов = Параметры.ТаблицаВзаиморасчетов;
	
	Результат = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;	
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Организация			= Реквизиты.Организация;
	Регистратор			= Реквизиты.Регистратор;
	Период				= Реквизиты.Период;
	ВидОперации			= Реквизиты.ВидОперации;
	СуммаДокумента		= Реквизиты.СуммаПлатежаВсего;
	СчетУчета			= Реквизиты.СчетКасса;
	Эквайер				= Реквизиты.Эквайер;
	ДоговорЭквайринга	= Реквизиты.ДоговорЭквайринга;
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период);
	
	Если Не ПлательщикНДФЛ Тогда
		Возврат Результат;
	КонецЕсли;	
	
	СуммаДляРаспределения = СуммаДокумента;
	
	Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
		СуммаВДвижение = Мин(СуммаДляРаспределения, СтрокаВзаиморасчетов.СуммаРуб);
		
		НоваяСтрока = Результат.Добавить();
		
		НоваяСтрока.Организация	= Организация;
		НоваяСтрока.Регистратор	= Регистратор;
		НоваяСтрока.Период		= Период;
		НоваяСтрока.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
		НоваяСтрока.Контрагент			= Эквайер;
		НоваяСтрока.ДоговорКонтрагента	= ДоговорЭквайринга;
		НоваяСтрока.СчетУчета			= СчетУчета;
		
		НоваяСтрока.РасчетныйДокумент	= СтрокаВзаиморасчетов.ДокументРасчетов;
		НоваяСтрока.Сумма				= СуммаВДвижение;
		
		СуммаДляРаспределения = СуммаДляРаспределения - СуммаВДвижение;
		
	КонецЦикла;
	
	Если СуммаДляРаспределения > 0 Тогда
		
		НоваяСтрока = Результат.Добавить();
		
		НоваяСтрока.Организация	= Организация;
		НоваяСтрока.Регистратор	= Регистратор;
		НоваяСтрока.Период		= Период;
		НоваяСтрока.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
		НоваяСтрока.Контрагент			= Эквайер;
		НоваяСтрока.ДоговорКонтрагента	= ДоговорЭквайринга;
		НоваяСтрока.СчетУчета			= СчетУчета;
		
		НоваяСтрока.РасчетныйДокумент	= Регистратор;
		НоваяСтрока.Сумма				= СуммаДляРаспределения;
		
	КонецЕсли;
	
Возврат Результат;

КонецФункции 

Процедура ОтразитьЗадолженностьПоСчетамУСН(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Организация              = Реквизиты.Организация;
	Регистратор              = Реквизиты.Регистратор;
	Период                   = Реквизиты.Период;
	Подразделение            = Реквизиты.ПодразделениеОрганизации;
	УчетПоПродажнойСтоимости = Реквизиты.УчетПоПродажнойСтоимости;
	ВидОперации              = Реквизиты.ВидОперации;
	
	ПрименяетсяУСН = Реквизиты.УчитыватьЗадолженностьУСН;
	
	Если ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка и ПрименяетсяУСН Тогда
		
		СуммаДоходаНеУСН = Реквизиты.СуммаПлатежаВсего - Реквизиты.ДоходУСН;
		
		ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Организация, Период);
		РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Организация, Период);
		СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
		ОперацияПоПатенту = Реквизиты.ОперацияПоПатенту
			И СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
		
		СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(Организация,
			Реквизиты.Контрагент, Период,
		Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД));
		ЕНВД = БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации)
			И ПлательщикЕНВД;
			
		Если ЕНВД или ОперацияПоПатенту Тогда	
			
			НужноСоздаватьПроводку = Ложь;
			СчетВПроводку  = Неопределено;
			СуммаВПроводку = 0;
			СодержаниеВПроводку = "";
			
			Если ОперацияПоПатенту Тогда
				СчетВПроводку  = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				СуммаВПроводку = Реквизиты.СуммаПлатежаВсего;
				СодержаниеВПроводку = "Расчеты с эквайером по деятельности на патенте";
				НужноСоздаватьПроводку = Истина;
			ИначеЕсли ЕНВД Тогда
				СчетВПроводку  = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				СуммаВПроводку = Реквизиты.СуммаПлатежаВсего;
				СодержаниеВПроводку = "Расчеты с эквайером по деятельности ЕНВД";
				НужноСоздаватьПроводку = Истина;
			ИначеЕсли СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
				СчетВПроводку  = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				СуммаВПроводку = Реквизиты.СуммаПлатежаВсего - Реквизиты.ДоходУСН;
				СодержаниеВПроводку = "Расчеты с эквайером за товары и услуги комитента";
				НужноСоздаватьПроводку = Истина;
			КонецЕсли;
			
			НужноСоздаватьПроводку = СуммаВПроводку <> 0 и НужноСоздаватьПроводку;
			
			Если НужноСоздаватьПроводку Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = СодержаниеВПроводку;
				
				Проводка.СчетДт                                     = СчетВПроводку; 
				Проводка.СубконтоДт.Контрагенты                     = Реквизиты.Эквайер;
				Проводка.СубконтоДт.Договоры                        = Реквизиты.ДоговорЭквайринга;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СуммаВПроводку;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПрименяетсяУСН Тогда
		
		Проводки = Движения.Хозрасчетный;
		
		Для Каждого Проводка Из Проводки Цикл
			
			Если Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД
				или Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент
				или Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент
				или Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД
				или Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент
				или Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент Тогда
				
				Проводка.СчетДт = Проводка.СчетКт;
				Проводка.СубконтоДт.Контрагенты                     = Реквизиты.Эквайер;
				Проводка.СубконтоДт.Договоры                        = Реквизиты.ДоговорЭквайринга;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами;
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Проводка.ПодразделениеКт;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры	

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
	|	Реквизиты.СуммаДокумента КАК СуммаДокумента,
	|	Реквизиты.Эквайер КАК Эквайер,
	|	Реквизиты.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоРеализации,
	|	ВЫРАЗИТЬ(Реквизиты.Контрагент КАК Справочник.Склады).НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументВРублях,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.РасчетыПоРеализации КАК РасчетыПоРеализации,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Реквизиты.ДокументВРублях КАК ДокументВРублях,
	|	Реквизиты.Эквайер КАК Эквайер,
	|	Реквизиты.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	1 КАК КоэффициентРуб,
	|	""Оплата платежной картой"" КАК Содержание,
	|	Реквизиты.ЭтоВозврат,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	Реквизиты        = ТаблицаРеквизиты[0];
	
	// Коэффициент пересчета сумм из валюты документа в рубли
	Если Реквизиты.ДокументВРублях Тогда
		КоэффициентРуб = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Дата);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ           = Истина;	
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизиты.Ссылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Дата, "ДФ=dd.MM.yy"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрыПроведения.ДокументСсылка);
			ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
			
			Возврат;
		КонецЕсли;
		
		КоэффициентРуб           = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
		Реквизиты.КоэффициентРуб = КоэффициентРуб;
	КонецЕсли;
	
	ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ВалютаРеглУчета     = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПараметрыПроведения = Новый Структура;
	ПараметрыПроведения.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыПроведения.Вставить("ДокументСсылка",  ДокументСсылка);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	ПодготовитьПараметрыРеквизитыДокумента(Запрос, ПараметрыПроведения, Отказ);
	
	Реквизиты = ПараметрыПроведения.ТаблицаРеквизиты[0];
	Если Отказ ИЛИ НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Дата, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПлательщикНДС               = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация,               Реквизиты.Дата);
	ПлательщикНДФЛ              = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация,              Реквизиты.Дата);
	ПрименяетсяУСН              = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация,              Реквизиты.Дата);
	ПрименяетсяУСНДоходыРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Дата);
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Дата);
	
	ПараметрыПроведения.Вставить("ПлательщикНДС",   ПлательщикНДС);
	ПараметрыПроведения.Вставить("ПлательщикНДФЛ",  ПлательщикНДФЛ);
	ПараметрыПроведения.Вставить("ПрименяетсяУСН",  ПрименяетсяУСН);
	ПараметрыПроведения.Вставить("ПрименяетсяУСНДоходыРасходы",
		ПрименяетсяУСНДоходыРасходы);
	ПараметрыПроведения.Вставить("УчетПоПродажнойСтоимости",
		СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	ОрганизацияПрименяетУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация,            Реквизиты.Дата);
	
	ОперацияПоПатенту = ОрганизацияПрименяетУСНПатент
		И Реквизиты.ДеятельностьНаПатенте;
		
	Запрос.УстановитьПараметр("ВалютаДокумента",                 Реквизиты.ВалютаДокумента);
	Запрос.УстановитьПараметр("ТорговаяТочка",                   Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",                 ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ПлательщикНДС",                   ПлательщикНДС);
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСН",         УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация,                  Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОрганизацияПрименяетУСНПатент",   ОрганизацияПрименяетУСНПатент);
	Запрос.УстановитьПараметр("ОперацияПоПатенту",               ОперацияПоПатенту);
	Запрос.УстановитьПараметр("РозничнаяТорговляОблагаетсяЕНВД", УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Реквизиты.Организация, Реквизиты.Дата));
	Запрос.УстановитьПараметр("МассивСчетовВыручкиЕНВД",         БухгалтерскийУчетВызовСервераПовтИсп.СчетаВыручкиЕНВД());
	Запрос.УстановитьПараметр("УчетПоПродажнойСтоимости",        СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	Запрос.УстановитьПараметр("Содержание",                      НСтр("ru = 'Оплата платежной картой'"));
	
	СодержаниеКУДиР = НСтр("ru = 'Продажа в розницу в торговой точке ""%1"": признаны расходы на приобретение ТМЦ.'");
	СодержаниеКУДиР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		СодержаниеКУДиР, Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("СодержаниеКУДиР", СодержаниеКУДиР);
	
	Для каждого Колонка Из ПараметрыПроведения.ТаблицаРеквизиты.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицыДокумента(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРозничнаяВыручка(НомераТаблиц,       ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРозничнаяВыручкаНДС(НомераТаблиц,    ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаКУДиР(НомераТаблиц,                  ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаОплатаСчетов(НомераТаблиц,           ПараметрыПроведения, Реквизиты)
		;

	Результат = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	Реквизиты.Содержание = ТекстСодержанияПроводокДокумента(Реквизиты);
	Если ПараметрыПроведения.РасшифровкаПлатежа <> Неопределено Тогда
		ПараметрыПроведения.РасшифровкаПлатежа.ЗаполнитьЗначения(Реквизиты.Содержание,  "Содержание");
	КонецЕсли;
	
	Если ПараметрыПроведения.РозничнаяВыручкаНДС <> Неопределено Тогда
		ПараметрыПроведения.РозничнаяВыручкаНДС.ЗаполнитьЗначения(Реквизиты.Содержание, "Содержание");
	КонецЕсли;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.Эквайер КАК Эквайер,
	|	Реквизиты.СчетКасса КАК СчетКасса,
	|	Реквизиты.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	&УчетПоПродажнойСтоимости КАК УчетПоПродажнойСтоимости,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	""Отражена оплата платежной картой"" КАК Содержание,
	|	ИСТИНА КАК РасчетыПоРеализации,
	|	&ОрганизацияПрименяетУСН КАК УчитыватьЗадолженностьУСН,
	|	&ОрганизацияПрименяетУСНПатент КАК УчитыватьЗадолженностьУСНПатент,
	|	&ОперацияПоПатенту КАК ОперацияПоПатенту,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	Реквизиты.Графа5_УСН КАК ДоходУСН,
	|	Реквизиты.СуммаДокумента КАК СуммаПлатежаВсего
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСчетаУчетаВНТТ", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетаРасходовОтРеализации.Период КАК Период,
	|	СчетаРасходовОтРеализации.ТорговаяТочка КАК ТорговаяТочка,
	|	СчетаРасходовОтРеализации.СчетДоходовОтРеализации КАК СчетДоходовОтРеализации,
	|	СчетаРасходовОтРеализации.СчетРасходовОтРеализации КАК СчетРасходовОтРеализации
	|ПОМЕСТИТЬ ВременнаяТаблицаСчетаУчетаВНТТ
	|ИЗ
	|	РегистрСведений.СчетаУчетаВНТТ.СрезПоследних(
	|			&Дата,
	|			&УчетПоПродажнойСтоимости
	|				И ТорговаяТочка = &ТорговаяТочка) КАК СчетаРасходовОтРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	&Дата КАК РеквизитыДата,
	|	&Организация КАК РеквизитыОрганизация,
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	|	&Контрагент КАК РеквизитыКонтрагент,
	|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.Сделка КАК Сделка,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	&СчетКасса КАК РеквизитыСчетКасса,
	|	&ПодразделениеОрганизации КАК РеквизитыПодразделениеОрганизации,
	|	&Эквайер КАК Эквайер,
	|	&ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ДокументВРублях
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаПлатежа
	|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаПлатежа * &КоэффициентРуб
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ДокументВРублях
	|				ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
	|			ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаНДС * &КоэффициентРуб
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРуб,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВЫРАЗИТЬ(&Содержание КАК СТРОКА(150)) КАК Содержание
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	// Процедура погашения задолженности выполняется для операций:
	// - ОплатаПокупателя
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Контрагент,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаРасшифровкаПлатежа.РасчетыВВалюте КАК РасчетыВВалюте,
		|	ТаблицаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
		|	ТаблицаРасшифровкаПлатежа.Сделка КАК ДокументРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
		|	ТаблицаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
		|	ТаблицаРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК КорСчет,
		|	ТаблицаРасшифровкаПлатежа.Эквайер КАК КорСубконто1,
		|	ТаблицаРасшифровкаПлатежа.ДоговорЭквайринга КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
		|	ВЫРАЗИТЬ(""Поступление в кассу"" КАК СТРОКА(150)) КАК Содержание
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("РасшифровкаПлатежа", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасшифровкаПлатежа", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРозничнаяВыручка(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка Тогда
		ПараметрыПроведения.Вставить("РозничнаяВыручка", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыДата КАК Период,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыОрганизация КАК Организация,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыКонтрагент КАК Склад,
	|	ТаблицаРасшифровкаПлатежа.РеквизитыСчетКасса КАК СчетУчетаДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.Эквайер КАК Эквайер,
	|	ТаблицаРасшифровкаПлатежа.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаПлатежа КАК СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СуммаРуб КАК СуммаРуб,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ВЫБОР
	|		КОГДА СчетаУчетаВНТТ.СчетДоходовОтРеализации ЕСТЬ НЕ NULL 
	|				И СчетаУчетаВНТТ.СчетДоходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА СчетаУчетаВНТТ.СчетДоходовОтРеализации
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
	|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетДоходов,
	|	ВЫБОР
	|		КОГДА СчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
	|				И СчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА СчетаУчетаВНТТ.СчетРасходовОтРеализации
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
	|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетРасходов,
	|	&НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ РозничнаяВыручка
	|ИЗ
	|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетаУчетаВНТТ КАК СчетаУчетаВНТТ
	|		ПО (СчетаУчетаВНТТ.ТорговаяТочка = &ТорговаяТочка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничнаяВыручка.НомерСтроки КАК НомерСтроки,
	|	РозничнаяВыручка.Подразделение КАК Подразделение,
	|	РозничнаяВыручка.Склад КАК Склад,
	|	РозничнаяВыручка.СчетУчетаДенежныхСредств КАК СчетУчетаДенежныхСредств,
	|	РозничнаяВыручка.Эквайер КАК Эквайер,
	|	РозничнаяВыручка.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	РозничнаяВыручка.СтавкаНДС КАК СтавкаНДС,
	|	РозничнаяВыручка.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РозничнаяВыручка.СуммаРуб КАК СуммаРуб,
	|	РозничнаяВыручка.СуммаНДСРуб КАК СуммаНДСРуб,
	|	РозничнаяВыручка.СчетДоходов КАК СчетДоходов,
	|	РозничнаяВыручка.СчетРасходов КАК СчетРасходов,
	|	РозничнаяВыручка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	РозничнаяВыручка КАК РозничнаяВыручка
	|
	|УПОРЯДОЧИТЬ ПО
	|	РозничнаяВыручка.НомерСтроки";
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРозничнаяВыручка", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РозничнаяВыручка", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРозничнаяВыручкаНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка
		ИЛИ НЕ ПараметрыПроведения.ПлательщикНДС Тогда
		ПараметрыПроведения.Вставить("РозничнаяВыручкаНДС", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 	
	"ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС) КАК СчетУчетаНДС,
	|	СУММА(ТаблицаДокумента.СуммаРуб - ТаблицаДокумента.СуммаНДСРуб) КАК СуммаБезНДС,
	|	СУММА(ТаблицаДокумента.СуммаНДСРуб) КАК НДС,
	|	НЕОПРЕДЕЛЕНО КАК Содержание,
	|	ТаблицаДокумента.НоменклатурнаяГруппа КАК Субконто,
	|	ТаблицаДокумента.СчетДоходов КАК СчетДоходов,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Подразделение КАК Подразделение,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование
	|ИЗ
	|	РозничнаяВыручка КАК ТаблицаДокумента
	|ГДЕ
	|	(НЕ ТаблицаДокумента.СчетДоходов В (&МассивСчетовВыручкиЕНВД)
	|			ИЛИ ТаблицаДокумента.СуммаНДСРуб <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Подразделение,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СчетДоходов,
	|	ТаблицаДокумента.НоменклатурнаяГруппа";	
	
	НомераТаблиц.Вставить("РозничнаяВыручкаНДС", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОплатаСчетов(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаРуб
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДСРуб
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента = &ВалютаДокумента
		|			ТОГДА ТаблицаРасшифровкаПлатежа.СуммаНДС
		|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаНДСРуб * ТаблицаРасшифровкаПлатежа.КратностьВзаиморасчетов / ТаблицаРасшифровкаПлатежа.КурсВзаиморасчетов КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК СуммаНДС,
		|	СчетНаОплатуПокупателю.ВалютаДокумента КАК Валюта
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ТаблицаРасшифровкаПлатежа.СчетНаОплату = СчетНаОплатуПокупателю.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки";
	Иначе
		ПараметрыПроведения.Вставить("ОплатаСчетов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ОплатаСчетов", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаКУДиР(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Не ПараметрыПроведения.ПрименяетсяУСНДоходыРасходы
		Или Не ПараметрыПроведения.УчетПоПродажнойСтоимости
		Или Реквизиты.ВидОперации <> Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка Тогда
	
		ПараметрыПроведения.Вставить("ТаблицаКУДиР", Неопределено);
		Возврат "";
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОплатаПлатежнойКартой.Дата КАК Период,
	|	ОплатаПлатежнойКартой.Ссылка КАК Регистратор,
	|	ОплатаПлатежнойКартой.Организация,
	|	0 КАК Графа4,
	|	0 КАК Графа5,
	|	0 КАК Графа6,
	|	ОплатаПлатежнойКартой.Графа7_УСН КАК Графа7,
	|	ОплатаПлатежнойКартой.НДС_УСН КАК НДС,
	|	&СодержаниеКУДиР КАК Содержание,
	|	"""" КАК НомерГТД
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ОплатаПлатежнойКартой.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И ОплатаПлатежнойКартой.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	ОплатаПлатежнойКартой.Ссылка = &Ссылка
	|	И ОплатаПлатежнойКартой.Графа7_УСН <> 0"
	;
	
	НомераТаблиц.Вставить("ТаблицаКУДиР", НомераТаблиц.Количество());
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстСодержанияПроводокДокумента(СтруктураПараметров)
	
	Содержание = СтруктураПараметров.Содержание;
	
	Возврат Содержание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Оплата платежной картой""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли