////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		
		// Если документ скопирован и есть расчетв у.е., пересчитаем суммы взаиморасчетов на дату документа
		Если ЕстьРасчетыВУсловныхЕдиницах И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПересчитатьСуммыВзаиморасчетов();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ОпределитьНаличиеРасчетовВУсловныхЕдиницах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = Объект.РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте();
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	КонецЕсли;
	
	Если НоваяСтрока И ЕстьРасчетыВУсловныхЕдиницах Тогда
		ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента <> СвойстваПлатежа.ДоговорКонтрагента Тогда
		РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа); 
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
	ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУсловныхЕдиницах ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	
	ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ЗначенияЗаполнения = Новый Структура;
	ВидыДоговора   = ВидыДоговораСКонтрагентом(Объект.ВидОперации);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора));
	ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
	ОплатаВВалюте = Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета;
	ЗначенияЗаполнения.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу") Тогда
		СтрокаПлатеж.Сделка = Неопределено;
	КонецЕсли;
	
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать")
		И НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом) Тогда
		
		ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
		
		Если СтрокаПлатеж.ДоговорКонтрагента <> СвойстваПлатежа.ДоговорКонтрагента Тогда
			ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
			ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа, "СчетУчетаРасчетовСКонтрагентом");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана дата.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана организация.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан контрагент.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан договор.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан счет расчетов.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета",             СчетУчета);
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",        "Метаданные.Документы.ОплатаПлатежнойКартой.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",      СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата",                    Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтаФорма);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПроверкаКурсовВалют(СтрокаПлатеж, ЭтаФорма);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И КратностьДокумента <> 0 Тогда
		СуммаРуб = СтрокаПлатеж.СуммаПлатежа * КурсДокумента / КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаВыручки

&НаКлиенте
Процедура РасшифровкаВыручкиПриИзменении(Элемент)
	
	СуммаДоИзменения = Объект.СуммаДокумента;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	Если ПрименениеУСН И СуммаДоИзменения <> Объект.СуммаДокумента Тогда
		ЗаполнитьОтражениеВУСННаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиПередУдалением(Элемент, Отказ)
	
	Отказ = Объект.РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежа(Знач ПараметрыОбъекта, Знач ПолучатьДоговор)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ (НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор) Тогда
		
		СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		
		Возврат СвойстваПлатежа;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента,
			|ПрименениеУСН, ПрименяетсяОсобыйПорядокНалогообложения");
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		
		Возврат СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор);
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДС(СтрокаПлатежа)
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатежа.СтавкаНДС);
	СтрокаПлатежа.СуммаНДС = СтрокаПлатежа.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверкаКурсовВалют(СтрокаПлатеж, Форма)
	
	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	ПроверкаКурсовВалют(СтрокаПлатеж, Форма);
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		Форма.Объект.ВалютаДокумента, СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПустаяСтруктураСвойстваПлатежа()
	
	СвойстваПлатежа = Новый Структура("ДоговорКонтрагента,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаРасчетыВУсловныхЕдиницах,
		|СпособПогашенияЗадолженности, СтавкаНДС,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов");
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежаСервер(Знач ПараметрыПлатежа, Знач ПолучатьДоговор)
	
	СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		ВидыДоговоров = ВидыДоговораСКонтрагентом(ПараметрыПлатежа.ВидОперации);
		НовыйДоговор  = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если ПараметрыПлатежа.ДоговорКонтрагента <> Неопределено Тогда
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПараметрыПлатежа.ДоговорКонтрагента, "Организация, ВидДоговора, ВалютаВзаиморасчетов");
			Если РеквизитыДоговора.Организация = ПараметрыПлатежа.Организация Тогда
				Для инд = 0 По ВидыДоговоров.ВГраница() Цикл
					Если ВидыДоговоров[инд] = РеквизитыДоговора.ВидДоговора Тогда
						Если РеквизитыДоговора.ВалютаВзаиморасчетов = ПараметрыПлатежа.ВалютаДокумента Тогда
							НовыйДоговор = ПараметрыПлатежа.ДоговорКонтрагента;
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Отбор = Новый Структура;
		ОтборОплатаВВалюте = Новый Структура("ЗначениеОтбора", Ложь);
		Отбор.Вставить("ОплатаВВалюте", ОтборОплатаВВалюте);
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			НовыйДоговор, ПараметрыПлатежа.Контрагент, ПараметрыПлатежа.Организация, ВидыДоговоров, Отбор);
		ПараметрыПлатежа.ДоговорКонтрагента = НовыйДоговор;

	КонецЕсли;
	
	СвойстваПлатежа.ДоговорКонтрагента = ПараметрыПлатежа.ДоговорКонтрагента;
	
	Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		СчетаУчета = СчетаУчетаРасчетовСКонтрагентом(ПараметрыПлатежа);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СчетаУчета);
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов,РасчетыВУсловныхЕдиницах");
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах;
		
		Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя Тогда
			СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СвойстваПлатежа.СтавкаНДС = ?(ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя 
				И (ПараметрыПлатежа.ПрименениеУСН ИЛИ ПараметрыПлатежа.ПрименяетсяОсобыйПорядокНалогообложения), 
				Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18);
		КонецЕсли;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
	КонецЕсли;
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаКлиенте
Процедура ИнициализироватьСвойстваПлатежаНаКлиенте(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ИнициализироватьСвойстваПлатежаНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
			Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента", Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
			КонецЕсли;
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыПогашенияЗадолженности.НеПогашать);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// РасшифровкаПлатежаСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.РасшифровкаПлатежа.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.РасшифровкаПлатежа.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Используются только при расчетах в валюте и у.е.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// РасшифровкаПлатежаСделка

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.Сделка", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Документ>'"));


	// РасшифровкаПлатежаСпособПогашенияЗадолженности

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Способ погашения>'"));


	// РасшифровкаПлатежаСделка

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.РасшифровкаПлатежа.Сделка", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


	// РасшифровкаПлатежаСделка

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СпособыПогашенияЗадолженности.Автоматически);
	СписокЗначений.Добавить(Перечисления.СпособыПогашенияЗадолженности.НеПогашать);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности", ВидСравненияКомпоновкиДанных.ВСписке, СписокЗначений);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет расчетов>'"));


	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет авансов>'"));


	// ПредставлениеВидОплаты

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредставлениеВидОплаты");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СчетКасса", ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Эквайер", ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДоговорЭквайринга", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидыДоговораСКонтрагентом(ВидОперации)
	
	ВидыДоговора = Новый Массив;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	КонецЕсли;
	
	Возврат ВидыДоговора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеПараметрыОбъекта(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Контрагент, ВалютаДокумента, СчетКасса");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,    Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета",  Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("РозничнаяТорговляОблагаетсяЕНВД", Форма.РозничнаяТорговляОблагаетсяЕНВД);
	ПараметрыОбъекта.Вставить("УчетВПродажныхЦенах",			 Форма.УчетВПродажныхЦенах);
	ПараметрыОбъекта.Вставить("ПрименениеУСН", 					 Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПлательщикЕНВД", 			     Форма.ПлательщикЕНВД);
	ПараметрыОбъекта.Вставить("ПрименяетсяОсобыйПорядокНалогообложения", Форма.ПрименяетсяОсобыйПорядокНалогообложения);
	ПараметрыОбъекта.Вставить("ЭтоОплатаПокупателя",             Форма.ЭтоОплатаПокупателя);
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма)
	
	Объект = Форма.Объект;
	
	ЕстьРасчетыВУЕ = Ложь;
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			ЕстьРасчетыВУЕ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУЕ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораКонтрагентаКакСклада(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЗначениеНТТ = 
		ПредопределенноеЗначение(
			"Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка");
	
	НовыеПараметры = Новый Массив();
	НовыеПараметры.Добавить(
		Новый ПараметрВыбора(
			"Отбор.ТипСклада", 
			ЗначениеНТТ));
	
	Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = ВидыДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора)));
	
	ОплатаВВалюте = Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета;
	
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", ОплатаВВалюте));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРасшифровкуПлатежа(ЭтоИзменениеОрганизации = Ложь)
	СворачиватьТЧПриИзмененииОрганизации =
		Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
	
	Если ЭтоИзменениеОрганизации И НЕ СворачиватьТЧПриИзмененииОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаСервере();
	Объект.РасшифровкаПлатежа.Очистить();
	Если ЭтоОплатаПокупателя Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
		
	Иначе
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СтавкаНДС = ?(ПрименениеУСН ИЛИ ПрименяетсяОсобыйПорядокНалогообложения,
			Перечисления.СтавкиНДС.БезНДС,
			Перечисления.СтавкиНДС.НДС18);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
		Элементы.РасшифровкаВыручки.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
		
	КонецЕсли;
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатежа)
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
	
	СтрокаПлатежа.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатежа.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатежа, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Патент.Доступность	= Объект.ДеятельностьНаПатенте ИЛИ Форма.ПрименяетсяТолькоУСНПатент;
	
	Элементы.Контрагент.Доступность = Истина;
	
	Если Форма.ПрименяетсяТолькоУСНПатент Тогда
		Элементы.ГруппаДеятельностьНаПатенте.ТекущаяСтраница   = Элементы.ГруппаНадписьПатент;
	ИначеЕсли Форма.ПрименяетсяУСНПатент Тогда
		Элементы.ГруппаДеятельностьНаПатенте.ТекущаяСтраница   = Элементы.ГруппаВыборДеятельностиНаПатенте;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка")
			И Форма.УчетВПРодажныхЦенах Тогда
			
		СформироватьТекстРозничнаяВыручкаДоходыНУ(Форма);
			
		Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
			Элементы.РозничнаяВыручкаРасходыУСН.Доступность       = НЕ Объект.ДеятельностьНаПатенте;
			Элементы.РозничнаяВыручкаНДСУСН.Доступность           = НЕ Объект.ДеятельностьНаПатенте И Объект.Графа7_УСН <> 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаРозничнаяВыручка);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРозничнаяВыручка;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	ПрименениеУСН              = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименениеУСНДоходы        = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	ПрименяетсяУСНПатент       = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	ПлательщикЕНВД             = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата);
	ПрименяетсяОсобыйПорядокНалогообложения =
		УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	ПрименяетсяТолькоУСНПатент = ПрименяетсяУСНПатент И НЕ ПлательщикЕНВД
		И ПрименяетсяОсобыйПорядокНалогообложения;
	
	УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Объект.Организация, Объект.Дата);
	
	НТТНаЕНВД = Ложь;
	Если ПлательщикЕНВД И УчетВПродажныхЦенах Тогда
		СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(Объект.Организация, Объект.Контрагент,
			Объект.Дата, Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД));
		НТТНаЕНВД = БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.Заголовок = "Контрагент";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.Контрагент.Заголовок = "Склад";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СчетаУчетаРасчетовСКонтрагентом(ПараметрыОбъекта)
	
	СчетаУчета = Новый Структура("СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
	
	СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ДоговорКонтрагента);
	
	СчетаУчета.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураСчетов.СчетРасчетовПокупателя);
	СчетаУчета.Вставить("СчетУчетаРасчетовПоАвансам",     СтруктураСчетов.СчетАвансовПокупателя);
	
	Возврат СчетаУчета;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииВидаОперации(Знач ПараметрыОбъекта)
	
	НовыеПараметры  = Новый Структура;
	
	Если ПараметрыОбъекта.ЭтоОплатаПокупателя Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	Иначе
		
		НовыеПараметры.Вставить("ВалютаДокумента",    ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		НовыеПараметры.Вставить("КурсДокумента",      1);
		НовыеПараметры.Вставить("КратностьДокумента", 1);
		Если ПараметрыОбъекта.УчетВПродажныхЦенах Тогда
			ЕНВД = Ложь;
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД));
			ЕНВД = БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации)
				И ПараметрыОбъекта.ПлательщикЕНВД;
			НовыеПараметры.Вставить("НТТНаЕНВД", ЕНВД);
		Иначе
			НовыеПараметры.Вставить("НТТНаЕНВД", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииОрганизации(Знач ПараметрыОбъекта)
	
	НовыеПараметры  = Новый Структура;
	
	ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ОсновноеПодразделение, ПараметрыОбъекта.Организация) Тогда
		НовыеПараметры.Вставить("ПодразделениеОрганизации", ОсновноеПодразделение);
	Иначе
		НовыеПараметры.Вставить("ПодразделениеОрганизации", Неопределено);
	КонецЕсли;
	
	Если ПараметрыОбъекта.ПрименениеУСН ИЛИ ПараметрыОбъекта.ПрименяетсяОсобыйПорядокНалогообложения Тогда
		НовыеПараметры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	Если ПараметрыОбъекта.ЭтоОплатаПокупателя Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииКонтрагента(Знач ПараметрыОбъекта)
	
	НовыеПараметры = Новый Структура;
	
	Если ПараметрыОбъекта.ЭтоОплатаПокупателя Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	Иначе
		
		Если ПараметрыОбъекта.УчетВПродажныхЦенах Тогда
			ЕНВД = Ложь;
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД));
			ЕНВД = БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации)
				И ПараметрыОбъекта.ПлательщикЕНВД;
			НовыеПараметры.Вставить("НТТНаЕНВД", ЕНВД);
		Иначе
			НовыеПараметры.Вставить("НТТНаЕНВД", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ЭтоОплатаПокупателя = Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
	
	УстановитьОграничениеТипаКонтрагента(ЭтаФорма);
	Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииВидаОперации(ПараметрыОбъекта);
	
	Если ЭтоОплатаПокупателя Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	Иначе
		
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры,
			"ВалютаДокумента");
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры, "КурсДокумента, КратностьДокумента, НТТНаЕНВД");
		
		УстановитьПараметрыВыбораКонтрагентаКакСклада(ЭтаФорма)
		
	КонецЕсли;
	
	ЗаполнитьОтражениеВУСННаСервере();
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	ПерезаполнитьРасшифровкуПлатежа();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ПрименениеУСН ИЛИ ПрименяетсяОсобыйПорядокНалогообложения Тогда
		ИнициализироватьСвойстваПлатежаНаСервере();
		СвойстваПлатежа.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	ПересчитатьСуммыВзаиморасчетов();
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	Если ЗначениеЗаполнено(Объект.Патент) И Элементы.Патент.СписокВыбора.НайтиПоЗначению(Объект.Патент) = Неопределено Тогда
		Объект.Патент = Неопределено;
	КонецЕсли;
	
	ЗаполнитьОтражениеВУСННаСервере();
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПодразделениеОрганизации");
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	ПерезаполнитьРасшифровкуПлатежа(Истина);
	
	ЗаполнитьОтражениеВУСННаСервере();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	Если ЗначениеЗаполнено(Объект.Патент) И Элементы.Патент.СписокВыбора.НайтиПоЗначению(Объект.Патент) = Неопределено Тогда
		Объект.Патент = Неопределено;
	КонецЕсли;
	Объект.ДеятельностьНаПатенте = ЗначениеЗаполнено(Объект.Патент);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	Если ЭтоОплатаПокупателя Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры, "НТТНаЕНВД");
	КонецЕсли;
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере();
	КонецЕсли;
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	ПерезаполнитьРасшифровкуПлатежа();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента            = Объект.Дата;
	ВалютаРегламентированногоУчета  = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаголовокСтатьяДДС              = НСтр("ru = 'Статья движения ден.средств:'");
	НадписьПатент                   = НСтр("ru = 'Патент:'");
	
	СвойстваПлатежа = Неопределено; // При открытии формы структуру не инициализируем, будет создана при первом обращении
	
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	УстановитьСостояниеДокумента();
	
	ЭтоОплатаПокупателя = Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ЗаполнитьСписокВыбораПатентаНаСервере();
	
	// Заполнение свойств элементов формы
	УстановитьОграничениеТипаКонтрагента(ЭтаФорма);
		
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииВидаОперации(ПараметрыОбъекта);
	
	Если ЭтоОплатаПокупателя Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	Иначе
		
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры,
			"ВалютаДокумента");
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры, "КурсДокумента, КратностьДокумента, НТТНаЕНВД");
		
		УстановитьПараметрыВыбораКонтрагентаКакСклада(ЭтаФорма)
		
	КонецЕсли;
	
	СформироватьПредставлениеВидаОплаты(ЭтаФорма);
	
	// Управление внешним видом формы
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРасчетыВУсловныхЕдиницах = Ложь;
	МассивДоговоров    = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");

	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].РасчетыВУсловныхЕдиницах;
			
			ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУсловныхЕдиницах
				ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьРасчетыВУсловныхЕдиницах Тогда
		Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
			ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(Знач ИдСтроки)

	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);

	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж)
	
	СтрокаПлатеж.НадписьВалюта = НСтр("ru = 'Вал.'");
	СтрокаПлатеж.НадписьКурс   = НСтр("ru = 'Курс'");
	СтрокаПлатеж.НадписьСумма  = НСтр("ru = 'Сумма'");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыВзаиморасчетов()
	
	Отбор = Новый Структура("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Истина);
	ПлатежиВУсловныхЕдиницах = Объект.РасшифровкаПлатежа.НайтиСтроки(Отбор);
	Для каждого СтрокаПлатеж Из ПлатежиВУсловныхЕдиницах Цикл
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтражениеВУСННаСервере()

	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(ЭтаФорма);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Объект, ПараметрыУСН);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьТекстРозничнаяВыручкаДоходыНУ(Форма)
	
	Объект = Форма.Объект;
	
	ТекстДоходы = "";
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка")
		И Форма.УчетВПРодажныхЦенах Тогда
		
		Если Форма.ПрименяетсяТолькоУСНПатент Тогда	
			ТекстДоходы = "";
		ИначеЕсли Форма.ПрименяетсяУСНПатент И Объект.ДеятельностьНаПатенте Тогда
			ТекстДоходы = НСтр("ru = 'Доходы относятся к деятельности на патенте'");
		ИначеЕсли Форма.НТТНаЕНВД Тогда
			ТекстДоходы = НСтр("ru = 'Доходы относятся к деятельности на ЕНВД'");
		ИначеЕсли Форма.ПрименяетсяУСНПатент ИЛИ Форма.ПлательщикЕНВД Тогда
			Если Форма.ПрименениеУСН И Форма.ПрименениеУСНДоходы Тогда
				ТекстДоходы = НСтр("ru = 'Доходы относятся к деятельности на УСН'");
			ИначеЕсли Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
				ТекстДоходы = НСтр("ru = 'Доходы и расходы относятся к деятельности на УСН'");
			Иначе
				ТекстДоходы = НСтр("ru = 'Доходы относятся к деятельности на общем режиме налогообложения'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.РозничнаяВыручкаТекстДоходыНУ = ТекстДоходы;

КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиОтраженияВУСННаСервере()
	
	// Видимость элементов настройки отражения в НУ (патент и КУДиР):
	// 
	// - Если выключена ФО "ПрименениеУСН", то элементы настройки КУДиР не отображаются
	// - Если применяется УСН, элементы настройки КУДиР отображаются,
	//   состав отображаемых элементов зависит от вида операции и ФО формы
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка Тогда
		
		Элементы.ГруппаРозничнаяВыручкаОтражениеВНУ.Видимость = (ПрименениеУСН ИЛИ ПрименяетсяУСНПатент)
			И УчетВПродажныхЦенах;
			
		Элементы.ГруппаРозничнаяВыручкаОтражениеДоходов.Видимость = УчетВПродажныхЦенах
			И (ПрименяетсяУСНПатент ИЛИ ПлательщикЕНВД);
		Элементы.ГруппаПатент.Видимость = ПрименяетсяУСНПатент И УчетВПродажныхЦенах;
		
		Элементы.ГруппаРозничнаяВыручкаРасходыУСН.Видимость = УчетВПродажныхЦенах
			И ПрименениеУСН И НЕ НТТНаЕНВД И НЕ ПрименениеУСНДоходы;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если есть договоры в у.е., то необходимо получение курсов валют.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ЕстьРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	// Проверка на изменение сроков действия патентов.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ПрименяетсяУСНПатент;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении()

	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
	
		Если ЭтоОплатаПокупателя Тогда
			СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
			СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		Иначе
			СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
			СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			Если ПрименениеУСН И УчетВПродажныхЦенах Тогда
				ЗаполнитьОтражениеВУСННаСервере();
			КонецЕсли; 
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаПатентеПриИзменении(Элемент)
	
	Если Объект.ДеятельностьНаПатенте Тогда
		
		Если Элементы.Патент.СписокВыбора.Количество() = 1 Тогда
			Объект.Патент = Элементы.Патент.СписокВыбора[0].Значение;
		КонецЕсли;
		
		Если ПрименениеУСН И УчетВПродажныхЦенах Тогда
			Объект.Графа5_УСН = 0;
			Объект.Графа7_УСН = 0;
			Объект.НДС_УСН    = 0;
		КонецЕсли;
		
	Иначе
		Объект.Патент = Неопределено;
		Если ПрименениеУСН И УчетВПродажныхЦенах Тогда
			ЗаполнитьОтражениеВУСННаСервере();
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Патент) Тогда
		Объект.ДеятельностьНаПатенте = Истина;
		Если ПрименениеУСН И УчетВПродажныхЦенах Тогда
			Объект.Графа5_УСН = 0;
			Объект.Графа7_УСН = 0;
			Объект.НДС_УСН    = 0;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РозничнаяВыручкаРасходыУСНПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПатентаНаСервере()
	
	Если ПрименяетсяУСНПатент Тогда
		МассивПатентовОрганизации = Справочники.Патенты.ПолучитьПатентыОрганизации(Объект.Организация, Объект.Дата);
		Элементы.Патент.СписокВыбора.ЗагрузитьЗначения(МассивПатентовОрганизации);
	Иначе
		Элементы.Патент.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ОплаченныеСчета()
	
	ОплаченныеСчета = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
			Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
				ОплаченныеСчета.Добавить(СчетНаОплату);
				УникальныеЗначения.Вставить(СчетНаОплату, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОплаченныеСчета;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
		ВидОплатыПриИзмененииНаСервере();
	Иначе
		ОчиститьСвязанныеРеквизиты();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВидОплатыПриИзмененииНаСервере()
	
	СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.ВидОплаты, "Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов");
	
	Объект.СчетКасса         = СтруктураРеквизитов.СчетУчетаРасчетов;
	Объект.Эквайер = СтруктураРеквизитов.Контрагент;
	Объект.ДоговорЭквайринга = СтруктураРеквизитов.ДоговорКонтрагента;
	
	СформироватьПредставлениеВидаОплаты(ЭтаФорма);
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеВидаОплаты(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ПредставлениеВидОплаты = ?(ЗначениеЗаполнено(Объект.СчетКасса), Строка(Объект.СчетКасса), НСтр("ru = '<Счет дебета>'"))+", "+
	?(ЗначениеЗаполнено(Объект.Эквайер), Строка(Объект.Эквайер), НСтр("ru = '<Эквайер>'"))+", "+
	?(ЗначениеЗаполнено(Объект.ДоговорЭквайринга), Строка(Объект.ДоговорЭквайринга), НСтр("ru = '<Договор>'"));
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыРеквизиовЭквайера(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	ЗаполнитьЗначенияСвойств(Объект, РезультатЗакрытия);
	
	Модифицированность = Истина;
		
	СформироватьПредставлениеВидаОплаты(ЭтаФорма);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПредставлениеВидОплатыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПередачи = Новый Структура;
	
	ПараметрыПередачи.Вставить("Эквайер"          , Объект.Эквайер);
	ПараметрыПередачи.Вставить("СчетРасчетов"     , Объект.СчетКасса);
	ПараметрыПередачи.Вставить("ДоговорЭквайринга", Объект.ДоговорЭквайринга);
	ПараметрыПередачи.Вставить("Организация"      , Объект.Организация);
	ПараметрыПередачи.Вставить("ТолькоПросмотр"   , ЭтаФорма.ТолькоПросмотр);
	
	ЧтоВыполнитьПослеЗакрытия = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыРеквизиовЭквайера", ЭтаФорма);
	
	ОткрытьФорму("Документ.ОплатаПлатежнойКартой.Форма.ФормаУправленияПараметрамиЭквайринга", 
				  ПараметрыПередачи, 
				  Элемент,
				  ,
				  ,
				  ,
				  ЧтоВыполнитьПослеЗакрытия);
				  
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеРеквизиты()
	
	Объект.СчетКасса			= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	Объект.Эквайер				= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Объект.ДоговорЭквайринга	= ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	
	СформироватьПредставлениеВидаОплаты(ЭтаФорма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать
