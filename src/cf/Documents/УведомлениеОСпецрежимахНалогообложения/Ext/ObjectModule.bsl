#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Выгружает документ и возвращает свойства файла выгрузки.
//
// Параметры:
//  Ссылка - ссылка на отчет (документ).
//
// Результат:
//	Массив структур или Неопределено, если не удалось сформировать файл выгрузки.
//	Ключи структуры:
//		- АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище
//		- ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением)
//
Функция ВыгрузитьДокумент(УникальныйИдентификатор = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		
		СодержаниеВыгрузки = ЭлектронноеПредставление();
		
		Если СодержаниеВыгрузки = Неопределено Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Выгрузка данного уведомления не предусмотрена'");
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ЭлементВыгрузки Из СодержаниеВыгрузки Цикл
			
			Если Результат = Неопределено Тогда
				Результат = Новый Массив;
			КонецЕсли;
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			СохраняемыйФайл = Новый ТекстовыйДокумент;
			СохраняемыйФайл.УстановитьТекст(ЭлементВыгрузки.ТекстФайла);
			СохраняемыйФайл.Записать(ИмяВременногоФайла, ЭлементВыгрузки.КодировкаТекста);
			
			ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
			Если УникальныйИдентификатор <> Неопределено Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
			КонецЕсли;
			
			УдалитьФайлы(ИмяВременногоФайла);
			
			СтруктураВыгрузки = Новый Структура;
			СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
			СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ЭлементВыгрузки.ИмяФайла);
			СтруктураВыгрузки.Вставить("ТестВыгрузки", ЭлементВыгрузки.ТекстФайла);
			СтруктураВыгрузки.Вставить("КодировкаВыгрузки", ЭлементВыгрузки.КодировкаТекста);
			
			Результат.Добавить(СтруктураВыгрузки);
			
		КонецЦикла;
		
		Возврат Результат;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Общие функции для обеспечения сохранения уведомлений в XML
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СтруктураXML501_"+ИмяМакета);
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				Если Макет.Область(НомСтр, 14, НомСтр, 14).Текст = "НеВыкидыватьПробел" Тогда
					НовСтр.ЗначениеПоУмолчанию = Макет.Область(НомСтр, 12, НомСтр, 12).Текст;
				КонецЕсли;
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	ПодчиненныйЭлемент = ПолучитьПодчиненныйЭлемент(УзелРодитель, ИмяЭлемента);
	ВывестиПоказательВXML(ПодчиненныйЭлемент, ЗначениеЭлемента);
	
КонецПроцедуры

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПараметры(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьПараметры(Параметры, Стр);
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ИмяПараметра = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если Параметры.Свойство(ИмяПараметра) Тогда
					ВывестиПоказательВXML(Стр, Параметры[ИмяПараметра]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры, ИмяОтчета)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	
	ЗаполнитьПараметры(Параметры, ДеревоВыгрузки);
	
	Если ИмяОтчета = "ПолучениеПатента" Тогда
		ЗаполнитьДанными_ПолучениеПатента(Параметры, ДеревоВыгрузки)
	ИначеЕсли ИмяОтчета = "ПолучениеПатентаРекомендованнаяФорма" Тогда
		ЗаполнитьДанными_ПолучениеПатентаРекомендованнаяФорма(Параметры, ДеревоВыгрузки);
	ИначеЕсли ИмяОтчета = "УтратаПраваПатент" Тогда
		ЗаполнитьДанными_УтратаПраваПатент(Параметры, ДеревоВыгрузки);
	ИначеЕсли ИмяОтчета = "С_09_3_1" Тогда
		ЗаполнитьДанными_С_09_3_1(Параметры, ДеревоВыгрузки);
	ИначеЕсли ИмяОтчета = "С_09_3_2" Тогда
		ЗаполнитьДанными_С_09_3_2(Параметры, ДеревоВыгрузки);
	ИначеЕсли ИмяОтчета = "1_6_Учет" Тогда
		ЗаполнитьДанными_1_6_Учет(Параметры, ДеревоВыгрузки);
	ИначеЕсли ИмяОтчета = "ЕНВД1" Тогда
		ЗаполнитьДанными_ЕНВД1(Параметры, ДеревоВыгрузки);
	ИначеЕсли ИмяОтчета = "ЕНВД2" Тогда
		ЗаполнитьДанными_ЕНВД2(Параметры, ДеревоВыгрузки);
	ИначеЕсли ИмяОтчета = "ЕНВД3" Тогда
		ЗаполнитьДанными_ЕНВД3(Параметры, ДеревоВыгрузки);
	ИначеЕсли ИмяОтчета = "ЕНВД4" Тогда
		ЗаполнитьДанными_ЕНВД4(Параметры, ДеревоВыгрузки);
	ИначеЕсли ИмяОтчета = "ФормаС09_1" Тогда
		ЗаполнитьДанными_ФормаС09_1(Параметры, ДеревоВыгрузки);
	КонецЕсли;
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

//процедури и функции для формирования предствления в видел XML
Процедура ЗаполнитьДанныеНПФЛ(ОсновныеСведения)
	
	СведИП = ПолучитьСведенияОбОрганизации();
	Данные = ДанныеУведомления.Получить();
	Если Данные.Свойство("ТитульнаяСтраница") Тогда 
		Титульный = Данные.ТитульнаяСтраница[0];
	ИначеЕсли Данные.Свойство("ТитульныйЛист") Тогда
		Титульный = Данные.ТитульныйЛист[0];
	ИначеЕсли Данные.Свойство("Титульный") Тогда
		Титульный = Данные.Титульный[0];
	Иначе
		Титульный = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) Тогда
		Для Каждого Колонка Из Титульный.Владелец().Колонки Цикл 
			Если Найти(Колонка.Имя, "П_ИНН") = 1 Тогда
				ИНН_ИП = ?(ЗначениеЗаполнено(СокрЛП(Титульный[Колонка.Имя])), СокрЛП(Титульный[Колонка.Имя]), "000000000000");
				ОсновныеСведения.Вставить("ИННФЛ", ИНН_ИП);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Данные.Свойство("П_ИНН") Тогда
		ИНН_ИП = ?(ЗначениеЗаполнено(СокрЛП(Данные.П_ИНН)), СокрЛП(Данные.П_ИНН), "000000000000");
		ОсновныеСведения.Вставить("ИННФЛ", ИНН_ИП);
	Иначе
		ИНН_ИП = ?(ЗначениеЗаполнено(СокрЛП(СведИП.ИНН)), СокрЛП(СведИП.ИНН), "000000000000");
		ОсновныеСведения.Вставить("ИННФЛ", ИНН_ИП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) И Титульный.Владелец().Колонки.Найти("П_ОГРНИП") <> Неопределено Тогда
		ОсновныеСведения.Вставить("ОГРНИП", Титульный.П_ОГРНИП);
	ИначеЕсли ЗначениеЗаполнено(Титульный) И Титульный.Владелец().Колонки.Найти("ОГРНИП") <> Неопределено Тогда
		ОсновныеСведения.Вставить("ОГРНИП", Титульный.ОГРНИП);
	ИначеЕсли Данные.Свойство("П_ОГРНИП") Тогда
		ОсновныеСведения.Вставить("ОГРНИП", Данные.П_ОГРНИП);
	Иначе
		ОсновныеСведения.Вставить("ОГРНИП", СведИП.ОГРН);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("Фамилия", СокрЛП(СведИП.Фамилия));
	ОсновныеСведения.Вставить("Имя", СокрЛП(СведИП.Имя));
	ОсновныеСведения.Вставить("Отчество", СокрЛП(СведИП.Отчество));
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНПЮЛ(ОсновныеСведения)
	
	СведОрг = ПолучитьСведенияОбОрганизации();
	Данные = ДанныеУведомления.Получить();
	Если Данные.Свойство("ТитульнаяСтраница") Тогда 
		Титульный = Данные.ТитульнаяСтраница[0];
	ИначеЕсли Данные.Свойство("ТитульныйЛист") Тогда
		Титульный = Данные.ТитульныйЛист[0];
	ИначеЕсли Данные.Свойство("Титульный") Тогда
		Титульный = Данные.Титульный[0];
	Иначе
		Титульный = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) Тогда
		Для Каждого Колонка Из Титульный.Владелец().Колонки Цикл 
			Если Найти(Колонка.Имя, "П_ИНН") = 1 Тогда
				ОсновныеСведения.Вставить("ИННЮЛ", Титульный[Колонка.Имя]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Данные.Свойство("П_ИНН") Тогда
		ОсновныеСведения.Вставить("ИННЮЛ", Данные.П_ИНН);
	Иначе
		ОсновныеСведения.Вставить("ИННЮЛ", СведОрг.ИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) Тогда
		Для Каждого Колонка Из Титульный.Владелец().Колонки Цикл 
			Если Найти(Колонка.Имя, "П_КПП") = 1 Тогда
				ОсновныеСведения.Вставить("КПП", Титульный[Колонка.Имя]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Данные.Свойство("П_КПП") Тогда
		ОсновныеСведения.Вставить("КПП", Данные.П_КПП);
	Иначе
		ОсновныеСведения.Вставить("КПП", СведОрг.КПП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) И Титульный.Владелец().Колонки.Найти("П_ОГРН") <> Неопределено Тогда
		ОсновныеСведения.Вставить("ОГРН", Титульный.П_ОГРН);
	ИначеЕсли ЗначениеЗаполнено(Титульный) И Титульный.Владелец().Колонки.Найти("ОГРН") <> Неопределено Тогда
		ОсновныеСведения.Вставить("ОГРН", Титульный.ОГРН);
	ИначеЕсли Данные.Свойство("П_ОГРН") Тогда
		ОсновныеСведения.Вставить("ОГРН", Данные.П_ОГРН);
	Иначе
		ОсновныеСведения.Вставить("ОГРН", СведОрг.ОГРН);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("НаимОрг", СведОрг.НаименованиеПолное);
	
КонецПроцедуры

Процедура ЗаполнитьОбщиеДанные(ОсновныеСведения)
	
	Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВИФНС, "Код");
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетностьПереопределяемый.КраткоеНазваниеПрограммы());
	ОсновныеСведения.Вставить("КодНО", Код);
	ОсновныеСведения.Вставить("ДатаДок", Формат(ДатаПодписи, "ДФ=dd.MM.yyyy"));
	ОсновныеСведения.Вставить("ПрПодп", ПодписантПризнак);
	ОсновныеСведения.Вставить("ФамилияПодп", ПодписантФамилия);
	ОсновныеСведения.Вставить("ИмяПодп", ПодписантИмя);
	ОсновныеСведения.Вставить("ОтчествоПодп", ПодписантОтчество);
	ОсновныеСведения.Вставить("НаимДок", ПодписантДокумент);
	ОсновныеСведения.Вставить("Тлф", ПодписантТелефон);
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнен налоговый орган";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбщиеДанныеИзСтрокиТитульный(ОсновныеСведения, Титульный)
	
	Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВИФНС, "Код");
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетностьПереопределяемый.КраткоеНазваниеПрограммы());
	ОсновныеСведения.Вставить("КодНО", Код);
	ОсновныеСведения.Вставить("ФамилияПодп", ПодписантФамилия);
	ОсновныеСведения.Вставить("ИмяПодп", ПодписантИмя);
	ОсновныеСведения.Вставить("ОтчествоПодп", ПодписантОтчество);
	
	Если ЗначениеЗаполнено(Титульный.ДАТА_ПОДПИСИ) Тогда 
		ОсновныеСведения.Вставить("ДатаДок", Формат(Титульный.ДАТА_ПОДПИСИ, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	ОсновныеСведения.Вставить("ПрПодп", Титульный.ПРИЗНАК_НП_ПОДВАЛ);
	ОсновныеСведения.Вставить("НаимДок", Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ);
	ОсновныеСведения.Вставить("Тлф", Титульный.ТЕЛЕФОН);
	
	Если Не ЗначениеЗаполнено(ОсновныеСведения.КодНО) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнен налоговый орган";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ОсновныеСведения.Свойство("ДатаДок") Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнена дата подписи";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки)
	Если СведенияОтправки.ЭтоПБОЮЛ Тогда
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННФЛ);
	Иначе
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННЮЛ) + СокрЛП(СведенияОтправки.КПП);
	КонецЕсли;
	ИдентификаторПолучателя = СведенияОтправки.КодНО + "_" + СведенияОтправки.КодНО;
	Если ЗначениеЗаполнено(СведенияОтправки.ДатаДок) Тогда 
		ДатаФормированияФайла = Формат(Дата(Число(Прав(СведенияОтправки.ДатаДок, 4)), Число(Сред(СведенияОтправки.ДатаДок, 4, 2)), Число(Лев(СведенияОтправки.ДатаДок, 2))), "ДФ=yyyyMMdd");
	Иначе
		ДатаФормированияФайла = "00010101";
	КонецЕсли;
	
	ИдентификационныйНомер = Строка(Новый УникальныйИдентификатор);
	
	ИдентификаторФайла = Префикс
	                   + "_" + ИдентификаторПолучателя
	                   + "_" + ИдентификаторОтправителя
	                   + "_" + ДатаФормированияФайла
	                   + "_" + ИдентификационныйНомер;
	
	Возврат ИдентификаторФайла;
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ПереходНаУСН(СведенияОтправки)
	Префикс = "SR_ZPRUSN";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ПрекращениеДеятельностиУСН(СведенияОтправки)
	Префикс = "SR_UVPDUSN";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ИзменениеОбъектаУСН(СведенияОтправки)
	Префикс = "SR_UVIZUSN";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_УтратаПраваУСН(СведенияОтправки)
	Префикс = "SR_UPUSN";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ОтказОтУСН(СведенияОтправки)
	Префикс = "SR_UOUSN";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ПрекращениеДеятельностиПатент(СведенияОтправки)
	Префикс = "SR_ZPRPSN";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ФормаС_09_2(СведенияОтправки)
	Префикс = "UT_SBUOR";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ФормаС_09_4(СведенияОтправки)
	Префикс = "UT_SBROR";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_УтратаПраваПатент(СведенияОтправки)
	Префикс = "SR_ZUTRPSN";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ПолучениеПатента(СведенияОтправки)
	Префикс = "SR_ZPUSN";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ПолучениеПатентаРекомендованнаяФорма(СведенияОтправки)
	Префикс = "SR_ZPUSN";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ФормаС09_3_1(СведенияОтправки)
	Префикс = "UT_SBSOZD";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ФормаС09_3_2(СведенияОтправки)
	Префикс = "UT_SBZAKR";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_Форма1_6_Учет(СведенияОтправки)
	Префикс = "UT_UVNOUOP";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ФормаЕНВД1(СведенияОтправки)
	Префикс = "UT_ENVD1";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ФормаЕНВД2(СведенияОтправки)
	Префикс = "UT_ENVD2";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ФормаЕНВД3(СведенияОтправки)
	Префикс = "UT_ENVD3";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ФормаЕНВД4(СведенияОтправки)
	Префикс = "UT_ENVD4";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ФормаС09_1(СведенияОтправки)
	Префикс = "UT_SBSCH";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ПереходНаУСН()
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда 
		ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	Иначе 
		ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	ОсновныеСведения.Вставить("ПрНП", Данные.ПРИЗНАК_НП);
	Если Данные.ПРИЗНАК_НП = 3 Тогда
		ОсновныеСведения.Вставить("Доход9М", Данные.ПОЛУЧЕНО_ДОХОДОВ);
		ОсновныеСведения.Вставить("ОстСтОснСр", Данные.ОСТАТОЧНАЯ_СТОИМОСТЬ_ОС);
	КонецЕсли;
	
	Если Данные.КОД_ПЕРЕХОДА = "1" Тогда
		ОсновныеСведения.Вставить("ГодПерех", Данные.ГОД_ПЕРЕХОДА_1);
		Если Не ЗначениеЗаполнено(Данные.ГОД_ПЕРЕХОДА_1) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не указан год перехода на УСН";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
		КонецЕсли;
	КонецЕсли;
	
	ОсновныеСведения.Вставить("ОбНал", Данные.КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ);
	ОсновныеСведения.Вставить("ПрДатаПер", Данные.КОД_ПЕРЕХОДА);
	ОсновныеСведения.Вставить("ГодПодач", Данные.ГОД_ПОДАЧИ_УВЕДОМЛЕНИЯ);
	Если Данные.КОД_ПЕРЕХОДА = "3" И ЗначениеЗаполнено(Данные.ДАТА_ПЕРЕХОДА) Тогда
		ОсновныеСведения.Вставить("ДатаПерех", Формат(Данные.ДАТА_ПЕРЕХОДА, "ДФ=dd.MM.yyyy"));
	ИначеЕсли Данные.КОД_ПЕРЕХОДА = "3" Тогда 
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана дата перехода на УСН";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.ПРИЗНАК_НП) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указан признак налогоплательщика";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.КОД_ПЕРЕХОДА) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указан признак даты перехода на УСН";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указан код объекта налогообложения";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.ГОД_ПОДАЧИ_УВЕДОМЛЕНИЯ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указан год подачи уведомления";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ПереходНаУСН(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ПрекращениеДеятельностиУСН()
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда 
		ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	Иначе 
		ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	ОсновныеСведения.Вставить("ДатаПер", Формат(Данные.ДАТА_ПРЕКРАЩЕНИЯ, "ДФ=dd.MM.yyyy"));
	Если Не ЗначениеЗаполнено(Данные.ДАТА_ПРЕКРАЩЕНИЯ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана дата прекращения деятельности";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ПрекращениеДеятельностиУСН(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ИзменениеОбъектаУСН()
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда
		ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	Иначе 
		ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	ОсновныеСведения.Вставить("ВерсФорм", "5.02");
	Данные = ДанныеУведомления.Получить();
	
	ОсновныеСведения.Вставить("ГодПерех", Данные.ГОД_ИЗМЕНЕНИЯ);
	ОсновныеСведения.Вставить("ПрОбНал", Данные.КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ);
	
	Если Не ЗначениеЗаполнено(Данные.ГОД_ИЗМЕНЕНИЯ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнен год перехода";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнен код объекта налогообложения";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ИзменениеОбъектаУСН(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_УтратаПраваУСН()
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда
		ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	Иначе 
		ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	ОсновныеСведения.Вставить("ДатаПер", Формат(Данные.ДАТА_ПРЕКРАЩЕНИЯ, "ДФ=dd.MM.yyyy"));
	ОсновныеСведения.Вставить("НомППункт", Данные.ПОДПУНКТ1);
	ОсновныеСведения.Вставить("НомПунктНс", Данные.ПУНКТ1);
	ОсновныеСведения.Вставить("НомСтатНс", "346." + Данные.СТАТЬЯ1);
	ОсновныеСведения.Вставить("ПериодНс", Данные.НАЛОГОВЫЙ_ПЕРИОД1);
	ОсновныеСведения.Вставить("ОтчетГодНс", Данные.ГОД1);
	ОсновныеСведения.Вставить("ПериодПр", Данные.НАЛОГОВЫЙ_ПЕРИОД2);
	ОсновныеСведения.Вставить("ОтчетГодПр", Данные.ГОД2);
	
	Если Не ЗначениеЗаполнено(Данные.ДАТА_ПРЕКРАЩЕНИЯ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана дата перехода на иной режим налогообложения";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.ПОДПУНКТ1) 
		Или ЗначениеЗаполнено(Данные.ПУНКТ1)
		Или ЗначениеЗаполнено(Данные.СТАТЬЯ1) Тогда
		
		Если Не ЗначениеЗаполнено(Данные.ПОДПУНКТ1) 
			И Данные.ПУНКТ1 <> "4" Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не указаны соответствующие подпункты пункта 3 статьи 346.12, пункта 3 статьи 346.14 Налогового кодекса Российской Федерации";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Данные.ПУНКТ1) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не указаны пункт 3 или пункт 4 статьи 346.12, пункта 3 статьи 346.14 Налогового кодекса Российской Федерации";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Данные.СТАТЬЯ1) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не указана статья 346.12 или статья 346.14 Налогового кодекса Российской Федерации";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Данные.НАЛОГОВЫЙ_ПЕРИОД1) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не указан отчетный период";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Данные.ГОД1) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не указан отчетный год";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
		КонецЕсли;
		
	Иначе
		Если Не ЗначениеЗаполнено(Данные.НАЛОГОВЫЙ_ПЕРИОД2) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не указан отчетный период, за который был превышен доход";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Данные.ГОД2) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не указан отчетный год, за который был превышен доход";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_УтратаПраваУСН(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ОтказОтУСН()
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда
		ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	Иначе 
		ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	ОсновныеСведения.Вставить("ГодПер", Данные.ГОД_ОТКАЗА_ОТ_УСН);
	Если Не ЗначениеЗаполнено(Данные.ГОД_ОТКАЗА_ОТ_УСН) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнен год отказа от применения УСН";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ОтказОтУСН(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ПрекращениеДеятельностиПатент()
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Истина);
	
	ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	Если ЗначениеЗаполнено(Данные.ДАТА_ПРЕКРАЩЕНИЯ) Тогда
		ОсновныеСведения.Вставить("ДатаПрекрПСН", Формат(Данные.ДАТА_ПРЕКРАЩЕНИЯ, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Данные.ДАТА_ВЫДАЧИ) Тогда
		ОсновныеСведения.Вставить("ДатаВыд", Формат(Данные.ДАТА_ВЫДАЧИ, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	ОсновныеСведения.Вставить("НомПатент", Данные.НОМЕР_ПАТЕНТА);
	
	Если Данные.Свойство("ФАМИЛИЯ_ИП") Тогда 
		ОсновныеСведения.Вставить("Фамилия", СокрЛП(Данные.ФАМИЛИЯ_ИП));
		ОсновныеСведения.Вставить("Имя",  СокрЛП(Данные.ИМЯ_ИП));
		ОсновныеСведения.Вставить("Отчество",  СокрЛП(Данные.ОТЧЕСТВО_ИП));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.ДАТА_ПРЕКРАЩЕНИЯ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнена дата прекращения деятельности по патенту";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.НОМЕР_ПАТЕНТА) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнен номер патента";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.ДАТА_ВЫДАЧИ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнена дата выдачи патента";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ПрекращениеДеятельностиПатент(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_УтратаПраваПатент()
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Истина);
	
	ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить().Титульный[0];
	
	Если ЗначениеЗаполнено(Данные.ДАТА_УТРАТЫ_ПРАВА) Тогда
		ОсновныеСведения.Вставить("ДатаУтрПСН", Формат(Данные.ДАТА_УТРАТЫ_ПРАВА, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	ОсновныеСведения.Вставить("КодППункт", Данные.КОД_ПРИЧИНЫ);
	ОсновныеСведения.Вставить("Тлф", Данные.ТЕЛЕФОН);
	
	ОсновныеСведения.Вставить("Фамилия", СокрЛП(Данные.ФАМИЛИЯ_ИП));
	ОсновныеСведения.Вставить("Имя",  СокрЛП(Данные.ИМЯ_ИП));
	ОсновныеСведения.Вставить("Отчество",  СокрЛП(Данные.ОТЧЕСТВО_ИП));
	
	Если Не ЗначениеЗаполнено(Данные.ДАТА_УТРАТЫ_ПРАВА) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнена дата утраты права на применение патентной системы";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.КОД_ПРИЧИНЫ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнен код утраты права на применение патентной системы";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_УтратаПраваПатент(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ПолучениеПатента()
	
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Истина);
	
	ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	Титульный = Данные.Титульный[0];
	Если ЗначениеЗаполнено(Титульный.ДАТА_НАЧАЛО) Тогда
		ОсновныеСведения.Вставить("ДатаНачПат", Формат(Титульный.ДАТА_НАЧАЛО, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Титульный.КОЛИЧЕСТВО_МЕСЯЦЕВ) Тогда
		ОсновныеСведения.Вставить("КолМес", Титульный.КОЛИЧЕСТВО_МЕСЯЦЕВ);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("Фамилия", СокрЛП(Титульный.ФАМИЛИЯ_ИП));
	ОсновныеСведения.Вставить("Имя",  СокрЛП(Титульный.ИМЯ_ИП));
	ОсновныеСведения.Вставить("Отчество",  СокрЛП(Титульный.ОТЧЕСТВО_ИП));
	
	Если Не ЗначениеЗаполнено(Титульный.ДАТА_НАЧАЛО) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнена дата начала патента (страница 1)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Титульный.КОЛИЧЕСТВО_МЕСЯЦЕВ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнено количество месяцев действия патента (страница 1)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Страница2 = Данные.Страница2[0];
	ОсновныеСведения.Вставить("НаимВД", Страница2.ОписаниеДеятельности);
	ОсновныеСведения.Вставить("КодВД", Страница2.КодПредпринимательскойДеятельности);
	ОсновныеСведения.Вставить("ПрНаемРаб", Страница2.НаличиеРаботников);
	ОсновныеСведения.Вставить("ЧислНаемРаб", Страница2.СредняяЧисленностьРаботников);
	ОсновныеСведения.Вставить("ОГРНИП", Титульный.ОГРНИП);
	ОсновныеСведения.Вставить("ТлфПодп", Титульный.ТЕЛЕФОН);
	
	Если Не ЗначениеЗаполнено(Страница2.ОписаниеДеятельности) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указано наименование вида деятельности (страница 2)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Страница2.КодПредпринимательскойДеятельности) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указан код вида деятельности (страница 2)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Страница2.НаличиеРаботников) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указан признак наличия наемных работников (страница 2)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Страница2.СредняяЧисленностьРаботников) 
		И Страница2.НаличиеРаботников = "1" Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана средняя численность наемных работников (страница 2)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ОсновныеСведения.Вставить("Индекс", Титульный.Индекс);
	ОсновныеСведения.Вставить("КодРегион", Титульный.КодРегиона);
	ОсновныеСведения.Вставить("Район", Титульный.Район);
	ОсновныеСведения.Вставить("Город", Титульный.Город);
	ОсновныеСведения.Вставить("НаселПункт", Титульный.НаселенныйПункт);
	ОсновныеСведения.Вставить("Улица", Титульный.Улица);
	ОсновныеСведения.Вставить("Дом", Титульный.Дом);
	ОсновныеСведения.Вставить("Корпус", Титульный.Корпус);
	ОсновныеСведения.Вставить("Кварт", Титульный.Квартира);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ПолучениеПатента(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ПолучениеПатентаРекомендованнаяФорма()
	
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Истина);
	
	ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	Титульный = Данные.Титульный[0];
	Если ЗначениеЗаполнено(Титульный.ДАТА_НАЧАЛО) Тогда
		ОсновныеСведения.Вставить("ДатаНачПат", Формат(Титульный.ДАТА_НАЧАЛО, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Титульный.КОЛИЧЕСТВО_МЕСЯЦЕВ) Тогда
		ОсновныеСведения.Вставить("КолМес", Титульный.КОЛИЧЕСТВО_МЕСЯЦЕВ);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("Фамилия", СокрЛП(Титульный.ФАМИЛИЯ_ИП));
	ОсновныеСведения.Вставить("Имя",  СокрЛП(Титульный.ИМЯ_ИП));
	ОсновныеСведения.Вставить("Отчество",  СокрЛП(Титульный.ОТЧЕСТВО_ИП));
	
	Если Не ЗначениеЗаполнено(Титульный.ДАТА_НАЧАЛО) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнена дата начала патента (страница 1)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Титульный.КОЛИЧЕСТВО_МЕСЯЦЕВ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнено количество месяцев действия патента (страница 1)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Страница2 = Данные.Страница2[0];
	ОсновныеСведения.Вставить("НаимВД", Страница2.ОписаниеДеятельности);
	ОсновныеСведения.Вставить("КодВД", Страница2.КодПредпринимательскойДеятельности);
	ОсновныеСведения.Вставить("ПрНаемРаб", Страница2.НаличиеРаботников);
	ОсновныеСведения.Вставить("ЧислНаемРаб", Страница2.СредняяЧисленностьРаботников);
	ОсновныеСведения.Вставить("ОГРНИП", Титульный.ОГРНИП);
	ОсновныеСведения.Вставить("ТлфПодп", Титульный.ТЕЛЕФОН);
	
	Если Не ЗначениеЗаполнено(Страница2.ОписаниеДеятельности) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указано наименование вида деятельности (страница 2)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Страница2.КодПредпринимательскойДеятельности) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указан код вида деятельности (страница 2)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Страница2.НаличиеРаботников) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указан признак наличия наемных работников (страница 2)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Страница2.СредняяЧисленностьРаботников) 
		И Страница2.НаличиеРаботников = "1" Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана средняя численность наемных работников (страница 2)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ОсновныеСведения.Вставить("Индекс", Титульный.Индекс);
	ОсновныеСведения.Вставить("КодРегион", Титульный.КодРегиона);
	ОсновныеСведения.Вставить("Район", Титульный.Район);
	ОсновныеСведения.Вставить("Город", Титульный.Город);
	ОсновныеСведения.Вставить("НаселПункт", Титульный.НаселенныйПункт);
	ОсновныеСведения.Вставить("Улица", Титульный.Улица);
	ОсновныеСведения.Вставить("Дом", Титульный.Дом);
	ОсновныеСведения.Вставить("Корпус", Титульный.Корпус);
	ОсновныеСведения.Вставить("Кварт", Титульный.Квартира);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ПолучениеПатентаРекомендованнаяФорма(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ФормаС09_2()
	
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда
		ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	Иначе 
		ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	// проверка заполнения обязательных полей
	Если НЕ ЗначениеЗаполнено(Данные.ПРИЗНАК_СООБЩЕНИЯ) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан признак сообщения (создание или внесение изменений)";
		Сообщение.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные.ДАТА_СООБЩЕНИЯ) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указана дата начала действия причины сообщения";
		Сообщение.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные.НАИМЕНОВАНИЕ_ЗАВИСИМОЙ_ОРГАНИЗАЦИИ) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнено наименование организации, об участии в которой формируется сообщение";
		Сообщение.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные.ПРОЦЕНТ_УЧАСТИЯ) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указана доля участия в российской (иностранной) организации";
		Сообщение.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	// Сведения о подписанте
	ОсновныеСведения.Вставить("ПрПодп",  Данные.ПРИЗНАК_НП_ПОДВАЛ);
	ОсновныеСведения.Вставить("ИННФЛ",   Данные.ПредставительИННФЛ);
	ОсновныеСведения.Вставить("Тлф",     Данные.ТЕЛЕФОН);
	ОсновныеСведения.Вставить("НаимДок", Данные.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ);
	ОсновныеСведения.Вставить("ДатаДок", Формат(Данные.ДАТА_ПОДПИСИ, "ДФ=dd.MM.yyyy"));
	ОсновныеСведения.Вставить("email",   Данные.EMAIL_ПОДПИСАНТА);
	
	// Сведения об участии в организациях
	ОсновныеСведения.Вставить("ПризСообщ", Данные.ПРИЗНАК_СООБЩЕНИЯ);
	ОсновныеСведения.Вставить("ДатаСообщ", Формат(Данные.ДАТА_СООБЩЕНИЯ, "ДФ=dd.MM.yyyy"));
	ОсновныеСведения.Вставить("НаимУчОрг", Данные.НАИМЕНОВАНИЕ_ЗАВИСИМОЙ_ОРГАНИЗАЦИИ);
	ОсновныеСведения.Вставить("ДоляУчОрг", Данные.ПРОЦЕНТ_УЧАСТИЯ);
	ОсновныеСведения.Вставить("ИННУчОрг",  Данные.ИНН_ЗАВИСИМОЙ);
	ОсновныеСведения.Вставить("КППУчОрг",  Данные.КПП_ЗАВИСИМОЙ);
	ОсновныеСведения.Вставить("ОКСМУчОрг", Данные.ОКСМ);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ФормаС_09_2(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;

КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ФормаС09_3_1()
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Ложь);
	
	ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	
	Данные = ДанныеУведомления.Получить();
	Титульный = Данные.Титульный[0];
	ЗаполнитьОбщиеДанныеИзСтрокиТитульный(ОсновныеСведения, Титульный);
	
	Если ЗначениеЗаполнено(Титульный.ИНН_ПОДПИСАНТА) Тогда 
		ОсновныеСведения.Вставить("ИННФЛ", Титульный.ИНН_ПОДПИСАНТА);
	КонецЕсли;
	Если ЗначениеЗаполнено(Титульный.EMAIL_ПОДПИСАНТА) Тогда 
		ОсновныеСведения.Вставить("email", Титульный.EMAIL_ПОДПИСАНТА);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("КолОП", Титульный.КОЛИЧЕСТВО_ПОДРАЗДЕЛЕНИЙ);
	Если ЗначениеЗаполнено(Титульный.ПРИЗНАК_СООБЩЕНИЯ) Тогда 
		ОсновныеСведения.Вставить("ПрСообщ", Титульный.ПРИЗНАК_СООБЩЕНИЯ);
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "На титульном листе не указан признак сообщения (создание или внесение изменений)";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ОсновныеСведения.Вставить("ОГРН", Титульный.ОГРН);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ФормаС09_3_1(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ФормаС09_3_2()
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Ложь);
	
	ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	
	Данные = ДанныеУведомления.Получить();
	Титульный = Данные.Титульный[0];
	ЗаполнитьОбщиеДанныеИзСтрокиТитульный(ОсновныеСведения, Титульный);
	
	Если ЗначениеЗаполнено(Титульный.ИНН_ПОДПИСАНТА) Тогда 
		ОсновныеСведения.Вставить("ИННФЛ", Титульный.ИНН_ПОДПИСАНТА);
	КонецЕсли;
	Если ЗначениеЗаполнено(Титульный.EMAIL_ПОДПИСАНТА) Тогда 
		ОсновныеСведения.Вставить("email", Титульный.EMAIL_ПОДПИСАНТА);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("КолОП", Титульный.КОЛИЧЕСТВО_ПОДРАЗДЕЛЕНИЙ);
	ОсновныеСведения.Вставить("ОГРН", Титульный.ОГРН);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ФормаС09_3_2(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_Форма1_6_Учет()
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Ложь);
	
	ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	
	Данные = ДанныеУведомления.Получить();
	Титульный = Данные.Титульный[0];
	ЗаполнитьОбщиеДанныеИзСтрокиТитульный(ОсновныеСведения, Титульный);
	
	Если ЗначениеЗаполнено(Титульный.ИНН_ПОДПИСАНТА) Тогда 
		ОсновныеСведения.Вставить("ИННФЛ", Титульный.ИНН_ПОДПИСАНТА);
	КонецЕсли;
	Если ЗначениеЗаполнено(Титульный.EMAIL_ПОДПИСАНТА) Тогда 
		ОсновныеСведения.Вставить("email", Титульный.EMAIL_ПОДПИСАНТА);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("КолОП", Титульный.КОЛИЧЕСТВО_ПОДРАЗДЕЛЕНИЙ);
	ОсновныеСведения.Вставить("ОГРН", Титульный.ОГРН);
	ОсновныеСведения.Вставить("КодВыбранногоНО", Титульный.ВЫБРАННЫЙ_НО);
	ОсновныеСведения.Вставить("ПрПостУч", Титульный.ПРИЗНАК_СТР1);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_Форма1_6_Учет(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ФормаС09_4()
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Ложь);
	
	ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	ОсновныеСведения.Вставить("ДатаРеш", 	Формат(Данные.ДАТА_ПРИНЯТИЯ_РЕШЕНИЯ, "ДФ=dd.MM.yyyy"));
	ОсновныеСведения.Вставить("ПрРеш", 		Данные.КОД_ПРИНЯТОЕ_РЕШЕНИЕ);
	ОсновныеСведения.Вставить("ПрФРеорг", 	Данные.КОД_ФОРМА_РЕОРГАНИЗАЦИИ);
	ОсновныеСведения.Вставить("ПрПодп",  	Данные.ПРИЗНАК_НП_ПОДВАЛ);
	ОсновныеСведения.Вставить("email",  	Данные.EMAIL_ПОДПИСАНТА);
	ОсновныеСведения.Вставить("ИННФЛ",  	Данные.ИНН_ПОДПИСАНТА);
	ОсновныеСведения.Вставить("Тлф",  		Данные.ТЕЛЕФОН);
	ОсновныеСведения.Вставить("НаимДок", 	Данные.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ);
	
	Если Не ЗначениеЗаполнено(ОсновныеСведения.ДатаРеш)
		Или Не ЗначениеЗаполнено(ОсновныеСведения.ПрРеш)Тогда
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнены обязательные реквизиты на титульном листе";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
		
	КонецЕсли;
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ФормаС_09_4(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ФормаЕНВД1()
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда 
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Для постановки на учет индивидуального предпринимателя используется форма ЕНВД-2";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	Иначе 
		ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	Титульный = Данные.ТитульныйЛист[0];
	
	ОсновныеСведения.Вставить("ПризнОрг", Титульный.КОД_РЕЗИДЕНТА);
	
	Если Не ЗначениеЗаполнено(Титульный.КОД_РЕЗИДЕНТА) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указан признак организации";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ОсновныеСведения.Вставить("ДатаПримЕНВД", Формат(Титульный.ДАТА_ПРИМЕНЕНЕНИ_ЕНВД, "ДФ=dd.MM.yyyy"));
	
	Если Не ЗначениеЗаполнено(Титульный.ДАТА_ПРИМЕНЕНЕНИ_ЕНВД) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана дата начала применения ЕНВД";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ОсновныеСведения.Вставить("ПрПодп", 	Титульный.ПРИЗНАК_НП_ПОДВАЛ);
	ОсновныеСведения.Вставить("ИННФЛ", 		Титульный.ИНН_ПРЕДСТАВИТЕЛЯ);
	ОсновныеСведения.Вставить("Тфл", 		Титульный.ТЕЛЕФОН);
	ОсновныеСведения.Вставить("ОГРН", 		Титульный.П_ОГРН);
	ОсновныеСведения.Вставить("НаимДок", 	Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ФормаЕНВД1(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ФормаЕНВД2()
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если НЕ ОсновныеСведения.ЭтоПБОЮЛ Тогда 
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Для постановки на учет организации используется форма ЕНВД-1";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	Иначе 
		ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	Титульный = Данные.ТитульныйЛист[0];
	
	ОсновныеСведения.Вставить("ДатаПримЕНВД", Формат(Титульный.ДАТА_ПРИМЕНЕНЕНИ_ЕНВД, "ДФ=dd.MM.yyyy"));
	
	Если Не ЗначениеЗаполнено(Титульный.ДАТА_ПРИМЕНЕНЕНИ_ЕНВД) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана дата начала применения ЕНВД";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ОсновныеСведения.Вставить("ПрПодп", 	Титульный.ПРИЗНАК_НП_ПОДВАЛ);
	ОсновныеСведения.Вставить("ИННФЛПред", 		Титульный.ИНН_ПРЕДСТАВИТЕЛЯ);
	ОсновныеСведения.Вставить("Тфл", 		Титульный.ТЕЛЕФОН);
	ОсновныеСведения.Вставить("ОГРНФЛ", 	Титульный.П_ОГРНИП);
	ОсновныеСведения.Вставить("НаимДок", 	Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ФормаЕНВД2(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ФормаЕНВД3()
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда 
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Для снятия с учета индивидуального предпринимателя используется форма ЕНВД-4";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	Иначе 
		ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	Титульный = Данные.ТитульныйЛист[0];
	
	ОсновныеСведения.Вставить("ПризнОрг", Титульный.КОД_РЕЗИДЕНТА);
	
	Если Не ЗначениеЗаполнено(Титульный.КОД_РЕЗИДЕНТА) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указан признак организации";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ОсновныеСведения.Вставить("ПричЗаяв", Титульный.КОД_ПРИЧИНЫ);
	
	Если Не ЗначениеЗаполнено(Титульный.КОД_ПРИЧИНЫ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана причина снятия с учета";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ОсновныеСведения.Вставить("ДатаПрекрЕНВД", Формат(Титульный.ДАТА_ПРЕКРАЩЕНИЯ_ЕНВД, "ДФ=dd.MM.yyyy"));
	
	Если Не ЗначениеЗаполнено(Титульный.ДАТА_ПРЕКРАЩЕНИЯ_ЕНВД) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана дата прекращения применения ЕНВД";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ОсновныеСведения.Вставить("ПрПодп", 	Титульный.ПРИЗНАК_НП_ПОДВАЛ);
	ОсновныеСведения.Вставить("ИННФЛ", 		Титульный.ИНН_ПРЕДСТАВИТЕЛЯ);
	ОсновныеСведения.Вставить("Тфл", 		Титульный.ТЕЛЕФОН);
	ОсновныеСведения.Вставить("ОГРН", 		Титульный.П_ОГРН);
	ОсновныеСведения.Вставить("НаимДок", 	Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ФормаЕНВД3(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ФормаЕНВД4()
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если НЕ ОсновныеСведения.ЭтоПБОЮЛ Тогда 
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Для снятия с учета организации используется форма ЕНВД-3";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	Иначе 
		ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	Титульный = Данные.ТитульныйЛист[0];
	
	ОсновныеСведения.Вставить("ПричЗаяв", Титульный.КОД_ПРИЧИНЫ);
	
	Если Не ЗначениеЗаполнено(Титульный.КОД_ПРИЧИНЫ) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана причина снятия с учета";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ОсновныеСведения.Вставить("ДатаПрекрЕНВД", Формат(Титульный.ДАТА_ПРЕКРАЩЕНИЯ_ЕНВД, "ДФ=dd.MM.yyyy"));
	
	Если Не ЗначениеЗаполнено(Титульный.ДАТА_ПРЕКРАЩЕНИЯ_ЕНВД) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не указана дата прекращения применения ЕНВД";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	ОсновныеСведения.Вставить("ПрПодп", 	Титульный.ПРИЗНАК_НП_ПОДВАЛ);
	ОсновныеСведения.Вставить("ИННФЛПред", 	Титульный.ИНН_ПРЕДСТАВИТЕЛЯ);
	ОсновныеСведения.Вставить("Тфл", 		Титульный.ТЕЛЕФОН);
	ОсновныеСведения.Вставить("ОГРНФЛ", 	Титульный.П_ОГРНИП);
	ОсновныеСведения.Вставить("НаимДок", 	Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ФормаЕНВД4(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ФормаС09_1()
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда 
		ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	Иначе 
		ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	Титульный = Данные.Титульный[0];
	
	ОсновныеСведения.Вставить("ПрПодп", Титульный.ПРИЗНАК_НП_ПОДВАЛ);
	ОсновныеСведения.Вставить("НаимДок", Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ);
	ОсновныеСведения.Вставить("ИННФЛПред", Титульный.ИНН_ПОДПИСАНТА);
	ОсновныеСведения.Вставить("Тфл", Титульный.ТЕЛЕФОН);
	ОсновныеСведения.Вставить("КИО", Титульный.КИО);
	ОсновныеСведения.Вставить("email", Титульный.EMAIL_ПОДПИСАНТА);
	ОсновныеСведения.Вставить("ДатаДок", Формат(Титульный.ДАТА_ПОДПИСИ, "ДФ=dd.MM.yyyy"));
	
	ОсновныеСведения.Вставить("ПрСчет", Титульный.ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ);
	ОсновныеСведения.Вставить("ПрБанк", Титульный.ПРИЗНАК_ГДЕ);
	ОсновныеСведения.Вставить("ПрЗаяв", Титульный.ПРИЗНАК_ПОДАЮЩЕГО);
	
	Если Не ЗначениеЗаполнено(ОсновныеСведения.ПрЗаяв)
		Или Не ЗначениеЗаполнено(ОсновныеСведения.ПрСчет)
		Или Не ЗначениеЗаполнено(ОсновныеСведения.ПрБанк) Тогда
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнены обязательные реквизиты на титульном листе";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
		
	КонецЕсли;
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ФормаС09_1(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Процедура ЗаполнитьЭлемент(Родитель, Имя, Значение)
	Узел_Подч = ПолучитьПодчиненныйЭлемент(Родитель, Имя);
	Если ЗначениеЗаполнено(Значение) Тогда
		УстановитьЗначениеЭлемента(Родитель, Имя, Значение);
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(Узел_Подч);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДанными_ПолучениеПатента(Параметры, ДеревоВыгрузки)
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_ЗПУСН = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ЗПУСН");
	СвТСДеят1 = ПолучитьПодчиненныйЭлемент(Узел_ЗПУСН, "СвТСДеят1");
	СвОбДеят2 = ПолучитьПодчиненныйЭлемент(Узел_ЗПУСН, "СвОбДеят2");
	
	Данные = ДанныеУведомления.Получить();
	Листы3 = Данные.Листы3;
	Для Каждого Лист3 Из Листы3 Цикл
		ЗначКод = Лист3["КОД_ТС1"];
		Если ЗначениеЗаполнено(ЗначКод) Тогда
			НовыйУзел = НовыйУзелИзПрототипа(СвТСДеят1);
			УстановитьЗначениеЭлемента(НовыйУзел, "КодТС", ЗначКод);
			СведТС = ПолучитьПодчиненныйЭлемент(НовыйУзел, "СведТС");
			Для Инд = 1 По 5 Цикл
				Если ЗначениеЗаполнено(Лист3["ВИН_ТС" + Инд]) Или ЗначениеЗаполнено(Лист3["МАРКА_ТС" + Инд]) Или ЗначениеЗаполнено(Лист3["ЗНАК_ТС" + Инд]) Тогда 
					НовыйУзел = НовыйУзелИзПрототипа(СведТС);
					УстановитьЗначениеЭлемента(НовыйУзел, "ИдНомТС", Лист3["ВИН_ТС" + Инд]);
					УстановитьЗначениеЭлемента(НовыйУзел, "МаркаТС", Лист3["МАРКА_ТС" + Инд]);
					УстановитьЗначениеЭлемента(НовыйУзел, "РегЗнакТС", Лист3["ЗНАК_ТС" + Инд]);
				КонецЕсли;
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(СведТС);
		КонецЕсли;
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(СвТСДеят1);
	
	Листы4 = Данные.Листы4;
	Для Каждого Лист4 Из Листы4 Цикл
		Если Не ЗначениеЗаполнено(Лист4.КОД_ОБЪЕКТА) Тогда 
			Продолжить;
		КонецЕсли;
		
		НовыйУзел = НовыйУзелИзПрототипа(СвОбДеят2);
		НовыйУзелАдрес = ПолучитьПодчиненныйЭлемент(НовыйУзел, "АдрОбРФ");
		
		УстановитьЗначениеЭлемента(НовыйУзел, "КодОбъект", Лист4.КОД_ОБЪЕКТА);
		УстановитьЗначениеЭлемента(НовыйУзел, "ПризОбъект", Лист4.ПРИЗНАК_ОБЪЕКТА);
		УстановитьЗначениеЭлемента(НовыйУзел, "ПлощОбъект", Лист4.ПЛОЩАДЬ_ОБЪЕКТА);
		
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Индекс", Лист4.Индекс1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "КодРегион", Лист4.КодРегиона1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Район", Лист4.Район1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Город", Лист4.Город1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "НаселПункт", Лист4.НаселенныйПункт1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Улица", Лист4.Улица1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Дом", Лист4.Дом1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Корпус", Лист4.Корпус1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Кварт", Лист4.Квартира1);
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(СвОбДеят2);
	
КонецПроцедуры

Процедура ЗаполнитьДанными_ПолучениеПатентаРекомендованнаяФорма(Параметры, ДеревоВыгрузки)
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_ЗПУСН = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ЗПУСН");
	СвМестПД = ПолучитьПодчиненныйЭлемент(Узел_ЗПУСН, "СвМестПД");
	МестПД = ПолучитьПодчиненныйЭлемент(СвМестПД, "МестПД");
	СвТСДеят1 = ПолучитьПодчиненныйЭлемент(Узел_ЗПУСН, "СвТСДеят1");
	СвОбДеят2 = ПолучитьПодчиненныйЭлемент(Узел_ЗПУСН, "СвОбДеят2");
	
	Данные = ДанныеУведомления.Получить();
	Листы3_0 = Данные.Листы3_0;
	Для Каждого Лист3_0 Из Листы3_0 Цикл
		Для Инд = 2 По 4 Цикл
			Если Не ЗначениеЗаполнено(Лист3_0["ОКТМО_МЕСТА_ДЕЯТЕЛЬНОСТИ" + Инд]) Тогда 
				Продолжить;
			КонецЕсли;
		
			НовыйУзел = НовыйУзелИзПрототипа(МестПД);
			НовыйУзелАдрес = ПолучитьПодчиненныйЭлемент(НовыйУзел, "АдрОбРФ");
			УстановитьЗначениеЭлемента(НовыйУзел, "ОКТМО", Лист3_0["ОКТМО_МЕСТА_ДЕЯТЕЛЬНОСТИ" + Инд]);
			
			УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Индекс", Лист3_0["Индекс" + Инд]);
			УстановитьЗначениеЭлемента(НовыйУзелАдрес, "КодРегион", Лист3_0["КодРегиона" + Инд]);
			УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Район", Лист3_0["Район" + Инд]);
			УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Город", Лист3_0["Город" + Инд]);
			УстановитьЗначениеЭлемента(НовыйУзелАдрес, "НаселПункт", Лист3_0["НаселенныйПункт" + Инд]);
			УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Улица", Лист3_0["Улица" + Инд]);
			УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Дом", Лист3_0["Дом" + Инд]);
			УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Корпус", Лист3_0["Корпус" + Инд]);
			УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Кварт", Лист3_0["Квартира" + Инд]);
		КонецЦикла;
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(МестПД);
	
	Листы3 = Данные.Листы3;
	Для Каждого Лист3 Из Листы3 Цикл
		ЗначКод = Лист3["КОД_ТС1"];
		Если ЗначениеЗаполнено(ЗначКод) Тогда
			НовыйУзел = НовыйУзелИзПрототипа(СвТСДеят1);
			УстановитьЗначениеЭлемента(НовыйУзел, "КодТС", ЗначКод);
			СведТС = ПолучитьПодчиненныйЭлемент(НовыйУзел, "СведТС");
			Для Инд = 1 По 3 Цикл
				Если ЗначениеЗаполнено(Лист3["ВИН_ТС" + Инд]) Или ЗначениеЗаполнено(Лист3["МАРКА_ТС" + Инд]) Или ЗначениеЗаполнено(Лист3["ЗНАК_ТС" + Инд])
					Или ЗначениеЗаполнено(Лист3["ТОННАЖ_ТС" + Инд]) Или ЗначениеЗаполнено(Лист3["МЕСТ_ТС" + Инд]) Тогда 
					НовыйУзел = НовыйУзелИзПрототипа(СведТС);
					УстановитьЗначениеЭлемента(НовыйУзел, "ИдНомТС", Лист3["ВИН_ТС" + Инд]);
					УстановитьЗначениеЭлемента(НовыйУзел, "МаркаТС", Лист3["МАРКА_ТС" + Инд]);
					УстановитьЗначениеЭлемента(НовыйУзел, "РегЗнакТС", Лист3["ЗНАК_ТС" + Инд]);
					УстановитьЗначениеЭлемента(НовыйУзел, "ГрузТС", Лист3["ТОННАЖ_ТС" + Инд]);
					УстановитьЗначениеЭлемента(НовыйУзел, "КолПосадМест", Лист3["МЕСТ_ТС" + Инд]);
				КонецЕсли;
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(СведТС);
		КонецЕсли;
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(СвТСДеят1);
	
	Листы4 = Данные.Листы4;
	Для Каждого Лист4 Из Листы4 Цикл
		Если Не ЗначениеЗаполнено(Лист4.КОД_ОБЪЕКТА) Тогда 
			Продолжить;
		КонецЕсли;
		
		НовыйУзел = НовыйУзелИзПрототипа(СвОбДеят2);
		НовыйУзелАдрес = ПолучитьПодчиненныйЭлемент(НовыйУзел, "АдрОбРФ");
		
		УстановитьЗначениеЭлемента(НовыйУзел, "КодОбъект", Лист4.КОД_ОБЪЕКТА);
		УстановитьЗначениеЭлемента(НовыйУзел, "ПризОбъект", Лист4.ПРИЗНАК_ОБЪЕКТА);
		УстановитьЗначениеЭлемента(НовыйУзел, "ПлощОбъект", Лист4.ПЛОЩАДЬ_ОБЪЕКТА);
		УстановитьЗначениеЭлемента(НовыйУзел, "ОКТМО", Лист4.ОКТМО_ОБЪЕКТА);
		
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Индекс", Лист4.Индекс1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "КодРегион", Лист4.КодРегиона1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Район", Лист4.Район1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Город", Лист4.Город1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "НаселПункт", Лист4.НаселенныйПункт1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Улица", Лист4.Улица1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Дом", Лист4.Дом1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Корпус", Лист4.Корпус1);
		УстановитьЗначениеЭлемента(НовыйУзелАдрес, "Кварт", Лист4.Квартира1);
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(СвОбДеят2);
	
КонецПроцедуры

Процедура ЗаполнитьДанными_УтратаПраваПатент(Параметры, ДеревоВыгрузки)
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_ЗУтрПСН = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ЗУтрПСН");
	СвДействПт = ПолучитьПодчиненныйЭлемент(Узел_ЗУтрПСН, "СвДействПт");
	Узел_ДействПт = ПолучитьПодчиненныйЭлемент(СвДействПт, "ДействПт");
	
	Данные = ДанныеУведомления.Получить();
	Листы3 = Данные.Листы3;
	Для Каждого Лист3 Из Листы3 Цикл
		Для Инд = 1 По 17 Цикл 
			Патент = СокрЛП(Лист3["НОМЕР_ПАТЕНТА_" + Инд]);
			Если ЗначениеЗаполнено(Патент) Тогда 
				НовыйУзел = НовыйУзелИзПрототипа(Узел_ДействПт);
				
				УстановитьЗначениеЭлемента(НовыйУзел, "НомерПт", Патент);
				УстановитьЗначениеЭлемента(НовыйУзел, "ДатаНачПт", Формат(Лист3["ДАТА_НАЧАЛА_" + Инд], "ДФ=dd.MM.yyyy"));
				
				Если ЗначениеЗаполнено(Лист3["ДАТА_ОКОНЧАНИЕ_" + Инд]) Тогда 
					УстановитьЗначениеЭлемента(НовыйУзел, "ДатаКонПт", Формат(Лист3["ДАТА_ОКОНЧАНИЕ_" + Инд], "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(Узел_ДействПт);

КонецПроцедуры

Процедура ЗаполнитьДанными_С_09_3_1(Параметры, ДеревоВыгрузки)
	
	Данные = ДанныеУведомления.Получить();
	ДопЛисты = Данные.ДопЛисты;
	ПрСообщ = Данные.Титульный[0].ПРИЗНАК_СООБЩЕНИЯ;
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_СБСОЗД = ПолучитьПодчиненныйЭлемент(Узел_Документ, "СБСОЗД");
	Узел_СведОП = ПолучитьПодчиненныйЭлемент(Узел_СБСОЗД, "СведОП");
	
	НомерДопЛиста = 0;
	Для Каждого ДопЛист Из ДопЛисты Цикл
		НомерДопЛиста = НомерДопЛиста + 1;
		НовыйУзел_СведОП = НовыйУзелИзПрототипа(Узел_СведОП);
		Если ПрСообщ = "2" Тогда
			Если ЗначениеЗаполнено(ДопЛист.ПРИЗНАК_ИНФОРМАЦИИ) Тогда 
				УстановитьЗначениеЭлемента(НовыйУзел_СведОП, "ПрИзмен", ДопЛист.ПРИЗНАК_ИНФОРМАЦИИ);
			Иначе
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Не указан признак (доп. лист " + НомерДопЛиста + ")";
				СообщениеПользователю.Сообщить();
				ВызватьИсключение "";
			КонецЕсли;
		КонецЕсли;
		
		Если ПрСообщ = "2" Тогда
			Если ЗначениеЗаполнено(ДопЛист.КПП_ПОДРАЗДЕЛЕНИЯ) Тогда 
				УстановитьЗначениеЭлемента(НовыйУзел_СведОП, "КПП", ДопЛист.КПП_ПОДРАЗДЕЛЕНИЯ);
			Иначе
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Не указано КПП подразделения (доп. лист " + НомерДопЛиста + ")";
				СообщениеПользователю.Сообщить();
				ВызватьИсключение "";
			КонецЕсли;
		КонецЕсли;
		
		Если ДопЛист.ПРИЗНАК_ИНФОРМАЦИИ = "2" Или ДопЛист.ПРИЗНАК_ИНФОРМАЦИИ = "3" Тогда 
			Если ЗначениеЗаполнено(ДопЛист.НАМИНОВАНИЕ_ПОДРАЗДЕЛЕНИЯ) Тогда 
				УстановитьЗначениеЭлемента(НовыйУзел_СведОП, "НаимОП", ДопЛист.НАМИНОВАНИЕ_ПОДРАЗДЕЛЕНИЯ);
			Иначе
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Не указано наименование подразделения (доп. лист " + НомерДопЛиста + ")";
				СообщениеПользователю.Сообщить();
				ВызватьИсключение "";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДопЛист.ДАТА_ВНЕСЕНИЯ_ИЗМЕНЕНИЙ) Тогда 
			УстановитьЗначениеЭлемента(НовыйУзел_СведОП, "ДатаОП", Формат(ДопЛист.ДАТА_ВНЕСЕНИЯ_ИЗМЕНЕНИЙ, "ДФ=dd.MM.yyyy"));
		Иначе
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не указана дата внесения изменений (доп. лист " + НомерДопЛиста + ")";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
		КонецЕсли;
		
		Узел_АдрОП = ПолучитьПодчиненныйЭлемент(НовыйУзел_СведОП, "АдрОП");
		ЗаполнитьЭлемент(Узел_АдрОП, "Индекс", ДопЛист.ИНДЕКС);
		ЗаполнитьЭлемент(Узел_АдрОП, "КодРегион", ДопЛист.КОД_РЕГИОНА);
		ЗаполнитьЭлемент(Узел_АдрОП, "Район", ДопЛист.РАЙОН);
		ЗаполнитьЭлемент(Узел_АдрОП, "Город", ДопЛист.ГОРОД);
		ЗаполнитьЭлемент(Узел_АдрОП, "НаселПункт", ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ);
		ЗаполнитьЭлемент(Узел_АдрОП, "Улица", ДопЛист.УЛИЦА);
		ЗаполнитьЭлемент(Узел_АдрОП, "Дом", ДопЛист.ДОМ);
		ЗаполнитьЭлемент(Узел_АдрОП, "Корпус", ДопЛист.КОРПУС);
		ЗаполнитьЭлемент(Узел_АдрОП, "Кварт", ДопЛист.КВАРТИРА);
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(Узел_СведОП);
	
КонецПроцедуры

Процедура ЗаполнитьДанными_С_09_3_2(Параметры, ДеревоВыгрузки)
	
	Данные = ДанныеУведомления.Получить();
	ДопЛисты = Данные.ДопЛисты;
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_СБЗАКР = ПолучитьПодчиненныйЭлемент(Узел_Документ, "СБЗАКР");
	Узел_СведОП = ПолучитьПодчиненныйЭлемент(Узел_СБЗАКР, "СведОП");
	
	НомерДопЛиста = 0;
	Для Каждого ДопЛист Из ДопЛисты Цикл
		НомерДопЛиста = НомерДопЛиста + 1;
		НовыйУзел_СведОП = НовыйУзелИзПрототипа(Узел_СведОП);
		УстановитьЗначениеЭлемента(НовыйУзел_СведОП, "ПрСообщ", ДопЛист.ПРИЗНАК_ЗАКРЫТИЯ);
		УстановитьЗначениеЭлемента(НовыйУзел_СведОП, "ДатаЗакр", Формат(ДопЛист.ДАТА_ВНЕСЕНИЯ_ИЗМЕНЕНИЙ, "ДФ=dd.MM.yyyy"));
		УстановитьЗначениеЭлемента(НовыйУзел_СведОП, "КПП", ДопЛист.КПП_ПОДРАЗДЕЛЕНИЯ);
		УстановитьЗначениеЭлемента(НовыйУзел_СведОП, "НаимОП", ДопЛист.НАМИНОВАНИЕ_ПОДРАЗДЕЛЕНИЯ);
		
		Узел_АдрОП = ПолучитьПодчиненныйЭлемент(НовыйУзел_СведОП, "АдрОП");
		ЗаполнитьЭлемент(Узел_АдрОП, "Индекс", ДопЛист.ИНДЕКС);
		ЗаполнитьЭлемент(Узел_АдрОП, "КодРегион", ДопЛист.КОД_РЕГИОНА);
		ЗаполнитьЭлемент(Узел_АдрОП, "Район", ДопЛист.РАЙОН);
		ЗаполнитьЭлемент(Узел_АдрОП, "Город", ДопЛист.ГОРОД);
		ЗаполнитьЭлемент(Узел_АдрОП, "НаселПункт", ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ);
		ЗаполнитьЭлемент(Узел_АдрОП, "Улица", ДопЛист.УЛИЦА);
		ЗаполнитьЭлемент(Узел_АдрОП, "Дом", ДопЛист.ДОМ);
		ЗаполнитьЭлемент(Узел_АдрОП, "Корпус", ДопЛист.КОРПУС);
		ЗаполнитьЭлемент(Узел_АдрОП, "Кварт", ДопЛист.КВАРТИРА);
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(Узел_СведОП);
	
КонецПроцедуры

Процедура ЗаполнитьДанными_1_6_Учет(Параметры, ДеревоВыгрузки)
	
	Данные = ДанныеУведомления.Получить();
	ДопЛисты = Данные.ДопЛисты;
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_ВНОУОП = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ВНОУОП");
	Узел_СведОП = ПолучитьПодчиненныйЭлемент(Узел_ВНОУОП, "СведОП");
	
	НомерДопЛиста = 0;
	Для Каждого ДопЛист Из ДопЛисты Цикл
		НомерДопЛиста = НомерДопЛиста + 1;
		НовыйУзел_СведОП = НовыйУзелИзПрототипа(Узел_СведОП);
		УстановитьЗначениеЭлемента(НовыйУзел_СведОП, "ВидОП", ДопЛист.ВИД_ПОДРАЗДЕЛЕНИЯ);
		УстановитьЗначениеЭлемента(НовыйУзел_СведОП, "КППОП", ДопЛист.КПП_ПОДРАЗДЕЛЕНИЯ);
		УстановитьЗначениеЭлемента(НовыйУзел_СведОП, "НаимОП", ДопЛист.НАМИНОВАНИЕ_ПОДРАЗДЕЛЕНИЯ);
		
		Узел_АдрОП = ПолучитьПодчиненныйЭлемент(НовыйУзел_СведОП, "АдрМНОП");
		ЗаполнитьЭлемент(Узел_АдрОП, "Индекс", ДопЛист.ИНДЕКС);
		ЗаполнитьЭлемент(Узел_АдрОП, "КодРегион", ДопЛист.КОД_РЕГИОНА);
		ЗаполнитьЭлемент(Узел_АдрОП, "Район", ДопЛист.РАЙОН);
		ЗаполнитьЭлемент(Узел_АдрОП, "Город", ДопЛист.ГОРОД);
		ЗаполнитьЭлемент(Узел_АдрОП, "НаселПункт", ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ);
		ЗаполнитьЭлемент(Узел_АдрОП, "Улица", ДопЛист.УЛИЦА);
		ЗаполнитьЭлемент(Узел_АдрОП, "Дом", ДопЛист.ДОМ);
		ЗаполнитьЭлемент(Узел_АдрОП, "Корпус", ДопЛист.КОРПУС);
		ЗаполнитьЭлемент(Узел_АдрОП, "Кварт", ДопЛист.КВАРТИРА);
		
		//tester не понимает тег СведГРН, хотя вформате он описан
		Если ДопЛист.ВИД_ПОДРАЗДЕЛЕНИЯ = "1" Или ДопЛист.ВИД_ПОДРАЗДЕЛЕНИЯ = "2" Тогда 
			Узел_СведГРН = ПолучитьПодчиненныйЭлемент(НовыйУзел_СведОП, "СведГРН");
			ЗаполнитьЭлемент(Узел_СведГРН, "ГРН", ДопЛист.ГРН);
			ЗаполнитьЭлемент(Узел_СведГРН, "ДатаГРН", Формат(ДопЛист.ДАТА_ВНЕСЕНИЯ_ИЗМЕНЕНИЙ, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(Узел_СведОП);
	
КонецПроцедуры

Процедура ЗаполнитьДанными_ЕНВДх(ДопЛисты, Узел_СвПредДеят)
	НомерДопЛиста = 0;
	Для Каждого ДопЛист Из ДопЛисты Цикл
		НомерДопЛиста = НомерДопЛиста + 1;
		Для Инд = 1 По 3 Цикл
			Если ЗначениеЗаполнено(ДопЛист["КОД_ВИДА_ДЕЯТЕЛЬНОСТИ"+Инд]) Тогда
				
				НовыйУзел_СвПредДеят = НовыйУзелИзПрототипа(Узел_СвПредДеят);
				УстановитьЗначениеЭлемента(НовыйУзел_СвПредДеят, "КодВД", ДопЛист["КОД_ВИДА_ДЕЯТЕЛЬНОСТИ"+Инд]);
				
				Узел_Адр = ПолучитьПодчиненныйЭлемент(НовыйУзел_СвПредДеят, "АдрПредДеят");
				ЗаполнитьЭлемент(Узел_Адр, "Индекс", 		ДопЛист["ИНДЕКС"+Инд]);
				ЗаполнитьЭлемент(Узел_Адр, "КодРегион", 	ДопЛист["РЕГИОН"+Инд]);
				ЗаполнитьЭлемент(Узел_Адр, "Район", 		ДопЛист["РАЙОН"+Инд]);
				ЗаполнитьЭлемент(Узел_Адр, "Город", 		ДопЛист["ГОРОД"+Инд]);
				ЗаполнитьЭлемент(Узел_Адр, "НаселПункт", 	ДопЛист["НАСЕЛЕННЫЙПУНКТ"+Инд]);
				ЗаполнитьЭлемент(Узел_Адр, "Улица", 		ДопЛист["УЛИЦА"+Инд]);
				ЗаполнитьЭлемент(Узел_Адр, "Дом", 			ДопЛист["ДОМ"+Инд]);
				ЗаполнитьЭлемент(Узел_Адр, "Корпус", 		ДопЛист["КОРПУС"+Инд]);
				ЗаполнитьЭлемент(Узел_Адр, "Кварт", 		ДопЛист["КВАРТИРА"+Инд]);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(Узел_СвПредДеят);
КонецПроцедуры

Процедура ЗаполнитьДанными_ЕНВД1(Параметры, ДеревоВыгрузки)
	
	Данные = ДанныеУведомления.Получить();
	ДопЛисты = Данные.Лист2;
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_ЕНВД1 = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ЕНВД1");
	Узел_СвПредДеят = ПолучитьПодчиненныйЭлемент(Узел_ЕНВД1, "СвПредДеят");
	ЗаполнитьДанными_ЕНВДх(ДопЛисты, Узел_СвПредДеят);
	
КонецПроцедуры

Процедура ЗаполнитьДанными_ЕНВД2(Параметры, ДеревоВыгрузки)
	
	Данные = ДанныеУведомления.Получить();
	ДопЛисты = Данные.Лист2;
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_ЕНВД2 = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ЕНВД2");
	Узел_СвПредДеят = ПолучитьПодчиненныйЭлемент(Узел_ЕНВД2, "СвПредДеят");
	ЗаполнитьДанными_ЕНВДх(ДопЛисты, Узел_СвПредДеят);
	
КонецПроцедуры

Процедура ЗаполнитьДанными_ЕНВД3(Параметры, ДеревоВыгрузки)
	
	Данные = ДанныеУведомления.Получить();
	ДопЛисты = Данные.Лист2;
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_ЕНВД3 = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ЕНВД3");
	Узел_СвПредДеят = ПолучитьПодчиненныйЭлемент(Узел_ЕНВД3, "СвПредДеят");
	ЗаполнитьДанными_ЕНВДх(ДопЛисты, Узел_СвПредДеят);
	
КонецПроцедуры

Процедура ЗаполнитьДанными_ЕНВД4(Параметры, ДеревоВыгрузки)
	
	Данные = ДанныеУведомления.Получить();
	ДопЛисты = Данные.Лист2;
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_ЕНВД4 = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ЕНВД4");
	Узел_СвПредДеят = ПолучитьПодчиненныйЭлемент(Узел_ЕНВД4, "СвПредДеят");
	ЗаполнитьДанными_ЕНВДх(ДопЛисты, Узел_СвПредДеят);
	
КонецПроцедуры

Процедура ЗаполнитьДанными_ФормаС09_1(Параметры, ДеревоВыгрузки)
	
	Данные = ДанныеУведомления.Получить();
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_СБСЧ = ПолучитьПодчиненныйЭлемент(Узел_Документ, "СБСЧ");
	
	Узел_СвСчетБанк = ПолучитьПодчиненныйЭлемент(Узел_СБСЧ, "СвСчетБанк");
	Узел_СвСчетФК = ПолучитьПодчиненныйЭлемент(Узел_СБСЧ, "СвСчетФК");
	Узел_СвКЭСП = ПолучитьПодчиненныйЭлемент(Узел_СБСЧ, "СвКЭСП");
	
	Если Данные.ЛистА.Количество() > 0 Тогда
		Если Узел_СвСчетФК <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвСчетФК);
		КонецЕсли;
		Если Узел_СвКЭСП <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвКЭСП);
		КонецЕсли;
		ДопЛист = Данные.ЛистА[0];
		
		ЗаполнитьЭлемент(Узел_СвСчетБанк, "НомСчет", ДопЛист.НОМЕР_СЧЕТА_А);
		ЗаполнитьЭлемент(Узел_СвСчетБанк, "ДатаСчет", Формат(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А, "ДФ=dd.MM.yyyy"));
		ЗаполнитьЭлемент(Узел_СвСчетБанк, "НаимБанк", СтрЗаменить(ДопЛист.НАМИНОВАНИЕ_БАНКА_А,"""",""));
		ЗаполнитьЭлемент(Узел_СвСчетБанк, "ИННЮЛ", ДопЛист.ИНН_А);
		ЗаполнитьЭлемент(Узел_СвСчетБанк, "КПП", ДопЛист.КПП_А);
		ЗаполнитьЭлемент(Узел_СвСчетБанк, "БИК", ДопЛист.БИК_А);
		
		Если Не ЗначениеЗаполнено(ДопЛист.НОМЕР_СЧЕТА_А)
			Или Не ЗначениеЗаполнено(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А)
			Или Не ЗначениеЗаполнено(ДопЛист.НАМИНОВАНИЕ_БАНКА_А) Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не заполнены обязательные реквизиты на листе А";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
			
		КонецЕсли;
		
		Узел_МНБанк = ПолучитьПодчиненныйЭлемент(Узел_СвСчетБанк, "МНБанк");
		ЗаполнитьЭлемент(Узел_МНБанк, "Индекс", ДопЛист.ИНДЕКС_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "КодРегион", ДопЛист.КОД_РЕГИОНА_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "Район", ДопЛист.РАЙОН_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "Город", ДопЛист.ГОРОД_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "НаселПункт", ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "Улица", ДопЛист.УЛИЦА_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "Дом", ДопЛист.ДОМ_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "Корпус", ДопЛист.КОРПУС_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "Кварт", ДопЛист.КВАРТИРА_А);
	ИначеЕсли Данные.ЛистБ.Количество() > 0 Тогда
		Если Узел_СвСчетБанк <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвСчетБанк);
		КонецЕсли;
		Если Узел_СвКЭСП <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвКЭСП);
		КонецЕсли;
		ДопЛист = Данные.ЛистБ[0];
		
		ЗаполнитьЭлемент(Узел_СвСчетФК, "НомСчетФК", ДопЛист.НОМЕР_СЧЕТА_Б);
		ЗаполнитьЭлемент(Узел_СвСчетФК, "ДатаСчетФК", Формат(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_Б, "ДФ=dd.MM.yyyy"));
		ЗаполнитьЭлемент(Узел_СвСчетФК, "НаимФК", СтрЗаменить(ДопЛист.НАМИНОВАНИЕ_БАНКА_Б,"""",""));
		ЗаполнитьЭлемент(Узел_СвСчетФК, "ИННЮЛ", ДопЛист.ИНН_Б);
		ЗаполнитьЭлемент(Узел_СвСчетФК, "КПП", ДопЛист.КПП_Б);
		
		Узел_СвСчетБФК = ПолучитьПодчиненныйЭлемент(Узел_СвСчетФК, "СвСчетБФК");
		ЗаполнитьЭлемент(Узел_СвСчетБФК, "НомСчетБФК", ДопЛист.НОМЕР_СЧЕТА_Б2);
		ЗаполнитьЭлемент(Узел_СвСчетБФК, "НаимБФК", СтрЗаменить(ДопЛист.НАМИНОВАНИЕ_БАНКА_Б2,"""",""));
		ЗаполнитьЭлемент(Узел_СвСчетБФК, "ИННЮЛ", ДопЛист.ИНН_Б2);
		ЗаполнитьЭлемент(Узел_СвСчетБФК, "КПП", ДопЛист.КПП_Б2);
		ЗаполнитьЭлемент(Узел_СвСчетБФК, "БИК", ДопЛист.БИК_Б2);
		
		Если Не ЗначениеЗаполнено(ДопЛист.НОМЕР_СЧЕТА_Б)
			Или Не ЗначениеЗаполнено(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_Б)
			Или Не ЗначениеЗаполнено(ДопЛист.НАМИНОВАНИЕ_БАНКА_Б)
			Или Не ЗначениеЗаполнено(ДопЛист.НАМИНОВАНИЕ_БАНКА_Б2)
			Или Не ЗначениеЗаполнено(ДопЛист.НОМЕР_СЧЕТА_Б2) Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не заполнены обязательные реквизиты на листе Б";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
			
		КонецЕсли;
		
		Узел_МНБФК = ПолучитьПодчиненныйЭлемент(Узел_СвСчетБФК, "МНБФК");
		ЗаполнитьЭлемент(Узел_МНБФК, "Индекс", ДопЛист.ИНДЕКС_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "КодРегион", ДопЛист.КОД_РЕГИОНА_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "Район", ДопЛист.РАЙОН_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "Город", ДопЛист.ГОРОД_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "НаселПункт", ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "Улица", ДопЛист.УЛИЦА_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "Дом", ДопЛист.ДОМ_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "Корпус", ДопЛист.КОРПУС_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "Кварт", ДопЛист.КВАРТИРА_Б);
	ИначеЕсли Данные.ЛистВ.Количество() > 0 Тогда
		Если Узел_СвСчетБанк <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвСчетБанк);
		КонецЕсли;
		Если Узел_СвСчетФК <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвСчетФК);
		КонецЕсли;
		ДопЛист = Данные.ЛистВ[0];
		
		ЗаполнитьЭлемент(Узел_СвКЭСП, "НомКЭСП", ДопЛист.НОМЕР_КЭСП_В);
		ЗаполнитьЭлемент(Узел_СвКЭСП, "ДатаКЭСП", Формат(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_В, "ДФ=dd.MM.yyyy"));
		ЗаполнитьЭлемент(Узел_СвКЭСП, "НаимБанкКЭСП", СтрЗаменить(ДопЛист.НАМИНОВАНИЕ_БАНКА_В,"""",""));
		ЗаполнитьЭлемент(Узел_СвКЭСП, "ИННЮЛ", ДопЛист.ИНН_В);
		ЗаполнитьЭлемент(Узел_СвКЭСП, "КПП", ДопЛист.КПП_В);
		ЗаполнитьЭлемент(Узел_СвКЭСП, "БИК", ДопЛист.БИК_В);
		
		Узел_СвСчетБЭДС = ПолучитьПодчиненныйЭлемент(Узел_СвКЭСП, "СвСчетБЭДС");
		ЗаполнитьЭлемент(Узел_СвСчетБЭДС, "НомСчетБЭДС", ДопЛист.НОМЕР_СЧЕТА_В);
		ЗаполнитьЭлемент(Узел_СвСчетБЭДС, "НаимБЭДС", СтрЗаменить(ДопЛист.НАМИНОВАНИЕ_БАНКА_В2,"""",""));
		ЗаполнитьЭлемент(Узел_СвСчетБЭДС, "ИННЮЛ", ДопЛист.ИНН_В2);
		ЗаполнитьЭлемент(Узел_СвСчетБЭДС, "КПП", ДопЛист.КПП_В2);
		ЗаполнитьЭлемент(Узел_СвСчетБЭДС, "БИК", ДопЛист.БИК_В2);
		
		Если Не ЗначениеЗаполнено(ДопЛист.НОМЕР_КЭСП_В)
			Или Не ЗначениеЗаполнено(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_В)
			Или Не ЗначениеЗаполнено(ДопЛист.НАМИНОВАНИЕ_БАНКА_В)
			Или Не ЗначениеЗаполнено(ДопЛист.НАМИНОВАНИЕ_БАНКА_В2)
			Или Не ЗначениеЗаполнено(ДопЛист.НОМЕР_СЧЕТА_В) Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не заполнены обязательные реквизиты на листе Б";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
			
		КонецЕсли;
		
		Узел_МНБЭДС = ПолучитьПодчиненныйЭлемент(Узел_СвСчетБЭДС, "МНБЭДС");
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Индекс", ДопЛист.ИНДЕКС_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "КодРегион", ДопЛист.КОД_РЕГИОНА_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Район", ДопЛист.РАЙОН_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Город", ДопЛист.ГОРОД_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "НаселПункт", ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Улица", ДопЛист.УЛИЦА_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Дом", ДопЛист.ДОМ_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Корпус", ДопЛист.КОРПУС_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Кварт", ДопЛист.КВАРТИРА_В);
	Иначе
		Если Узел_СвСчетБанк <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвСчетБанк);
		КонецЕсли;
		Если Узел_СвСчетФК <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвСчетФК);
		КонецЕсли;
		Если Узел_СвКЭСП <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвКЭСП);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭлектронноеПредставление_ПереходНаУСН()
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ПереходНаУСН();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("ПереходНаУСН");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ПереходНаУСН");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ПрекращениеДеятельностиУСН()
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ПрекращениеДеятельностиУСН();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("ПрекращениеДеятельностиУСН");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ПрекращениеДеятельностиУСН");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ИзменениеОбъектаУСН()
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ИзменениеОбъектаУСН();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("ИзменениеОбъектаУСН");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ИзменениеОбъектаУСН");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_УтратаПраваУСН()
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_УтратаПраваУСН();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("УтратаПраваУСН");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "УтратаПраваУСН");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ОтказОтУСН()
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ОтказОтУСН();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("ОтказОтУСН");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ОтказОтУСН");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ПрекращениеДеятельностиПатент()
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ПрекращениеДеятельностиПатент();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("ПрекращениеДеятельностиПатент");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ПрекращениеДеятельностиПатент");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_УтратаПраваПатент()
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_УтратаПраваПатент();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("УтратаПраваПатент");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "УтратаПраваПатент");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ПолучениеПатента()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ПолучениеПатента();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("ПолучениеПатента");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ПолучениеПатента");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ПолучениеПатентаРекомендованнаяФорма()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ПолучениеПатентаРекомендованнаяФорма();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("ПолучениеПатентаРекомендованная");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ПолучениеПатентаРекомендованнаяФорма");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ФормаС09_2()

	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ФормаС09_2();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("С_09_2");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "С_09_2");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;

КонецФункции // ЭлектронноеПредставление_ФормаС09_2()

Функция ЭлектронноеПредставление_ФормаС09_3_1()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ФормаС09_3_1();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("С_09_3_1");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "С_09_3_1");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ФормаС09_3_2()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ФормаС09_3_2();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("С_09_3_2");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "С_09_3_2");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_Форма1_6_Учет()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_Форма1_6_Учет();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("1_6_Учет");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "1_6_Учет");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ФормаС09_4()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ФормаС09_4();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("С_09_4");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "С_09_4");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ФормаЕНВД1()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ФормаЕНВД1();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("ЕНВД1");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ЕНВД1");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ФормаЕНВД2()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ФормаЕНВД2();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("ЕНВД2");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ЕНВД2");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ФормаЕНВД3()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ФормаЕНВД3();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("ЕНВД3");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ЕНВД3");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ФормаЕНВД4()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ФормаЕНВД4();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("ЕНВД4");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ЕНВД4");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление_ФормаС09_1()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ФормаС09_1();
	СтруктураВыгрузки = ИзвлечьСтруктуруXML("С_09_1");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ФормаС09_1");
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление()
	Если ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатента Тогда
		Возврат ЭлектронноеПредставление_ПолучениеПатента();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма Тогда
		Возврат ЭлектронноеПредставление_ПолучениеПатентаРекомендованнаяФорма();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОбУтратеПраваНаПатент Тогда
		Возврат ЭлектронноеПредставление_УтратаПраваПатент();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме Тогда
		Возврат ЭлектронноеПредставление_ПрекращениеДеятельностиПатент();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбИзмененииОбъектаНалогообложенияПоУСН Тогда
		Возврат ЭлектронноеПредставление_ИзменениеОбъектаУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбОтказеОтУСН Тогда
		Возврат ЭлектронноеПредставление_ОтказОтУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбУтратеПраваНаУСН Тогда
		Возврат ЭлектронноеПредставление_УтратаПраваУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН Тогда
		Возврат ЭлектронноеПредставление_ПереходНаУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПрекращенииДеятельностиПоУСН Тогда
		Возврат ЭлектронноеПредставление_ПрекращениеДеятельностиУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_2 Тогда
		Возврат ЭлектронноеПредставление_ФормаС09_2();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_1 Тогда	
		Возврат ЭлектронноеПредставление_ФормаС09_3_1();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_2 Тогда
		Возврат ЭлектронноеПредставление_ФормаС09_3_2();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.Форма_1_6_Учет Тогда
		Возврат ЭлектронноеПредставление_Форма1_6_Учет();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_4 Тогда
		Возврат ЭлектронноеПредставление_ФормаС09_4();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1 Тогда
		Возврат ЭлектронноеПредставление_ФормаЕНВД1();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2 Тогда
		Возврат ЭлектронноеПредставление_ФормаЕНВД2();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3 Тогда
		Возврат ЭлектронноеПредставление_ФормаЕНВД3();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4 Тогда
		Возврат ЭлектронноеПредставление_ФормаЕНВД4();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1 Тогда
		Возврат ЭлектронноеПредставление_ФормаС09_1();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

//процедуры и функции для печати уведомлений
Функция ПолучитьСведенияОбОрганизации()
	
	ВозвращаемоеЗначение = Новый Структура("ЮридическоеФизическоеЛицо, НаименованиеПолное, ИНН, ФИО, Фамилия, Имя, Отчество, ОГРН, КПП");
	ВозвращаемоеЗначение.Вставить("ЭтоЮрЛицо", РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если Не ВозвращаемоеЗначение.ЭтоЮрЛицо Тогда
		СтрокаСведений = "ИННФЛ,ОГРН,ФамилияИП,ИмяИП,ОтчествоИП,ФИО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		ВозвращаемоеЗначение.ИНН = СведенияОбОрганизации.ИННФЛ;
		ВозвращаемоеЗначение.ОГРН = СведенияОбОрганизации.ОГРН;
		ВозвращаемоеЗначение.Фамилия = СведенияОбОрганизации.ФамилияИП;
		ВозвращаемоеЗначение.Имя = СведенияОбОрганизации.ИмяИП;
		ВозвращаемоеЗначение.Отчество = СведенияОбОрганизации.ОтчествоИП;
		ВозвращаемоеЗначение.ФИО = СведенияОбОрганизации.ФИО;
	Иначе
		СтрокаСведений = "ИННЮЛ,НаимЮЛПол,ОГРН,КППЮЛ";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		ВозвращаемоеЗначение.ИНН = СведенияОбОрганизации.ИННЮЛ;
		ВозвращаемоеЗначение.КПП = СведенияОбОрганизации.КППЮЛ;
		ВозвращаемоеЗначение.НаименованиеПолное = СведенияОбОрганизации.НаимЮЛПол;
		ВозвращаемоеЗначение.ОГРН = СведенияОбОрганизации.ОГРН;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ВывестиОбщиеДанныеПатент(ПараметрыМакета, СведенияОбИП, СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("П_ИНН") Тогда
		СтрокаВПараметрыМакета(СтруктураПараметров.П_ИНН, "ИНН_", ПараметрыМакета, 12);
	Иначе 
		СтрокаВПараметрыМакета(СведенияОбИП.ИНН, "ИНН_", ПараметрыМакета, 12);
	КонецЕсли;
	
	СтрокаВПараметрыМакета(СведенияОбИП.Фамилия, "Фамилия_", ПараметрыМакета, 37);
	СтрокаВПараметрыМакета(СведенияОбИП.Имя, "Имя_", ПараметрыМакета, 37);
	СтрокаВПараметрыМакета(СведенияОбИП.Отчество, "Отчество_", ПараметрыМакета, 37);
	
КонецПроцедуры

Процедура ВывестиОбщиеДанныеУСН(ПараметрыМакета, СведенияОбОрг, СтруктураПараметров)
	
	ЭтоЮЛ = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	ДлИНН = ?(ЭтоЮЛ, 10, 12);
	Если СтруктураПараметров.Свойство("П_ИНН") Тогда
		СтрокаВПараметрыМакета(СтруктураПараметров.П_ИНН, "ИНН_", ПараметрыМакета, ДлИНН);
		СтрокаВПараметрыМакета(СтруктураПараметров.ОРГАНИЗАЦИЯ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
		СтрокаВПараметрыМакета(СтруктураПараметров.П_КПП, "КПП_", ПараметрыМакета, 9);
	Иначе 
		СтрокаВПараметрыМакета(СведенияОбОрг.ИНН, "ИНН_", ПараметрыМакета, ДлИНН);
		Если ЭтоЮЛ Тогда
			СтрокаВПараметрыМакета(СведенияОбОрг.НаименованиеПолное, "ОрганизацияНазвание_", ПараметрыМакета, 160);
		Иначе
			СтрокаВПараметрыМакета(СведенияОбОрг.ФИО, "ОрганизацияНазвание_", ПараметрыМакета, 160);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьМакетПолучениеПатента()
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ПолучениеПатента");
	СтруктураПараметров = ДанныеУведомления.Получить();
	
	Область1 = МакетУведомления.ПолучитьОбласть("Страница1");
	ПараметрыМакета = Область1.Параметры;
	Строка = СтруктураПараметров.Титульный[0];
	СтрокаВПараметрыМакета(Строка.П_ИНН_1, "ИНН_", ПараметрыМакета, 12);
	СтрокаВПараметрыМакета(Строка.КОД_НО, "КОД_НО_", ПараметрыМакета, 4);
	СтрокаВПараметрыМакета(Строка.ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ, "Представитель_", ПараметрыМакета, 60);
	СтрокаВПараметрыМакета(Строка.ФАМИЛИЯ_ИП, "Фамилия_", ПараметрыМакета, 37);
	СтрокаВПараметрыМакета(Строка.ИМЯ_ИП, "Имя_", ПараметрыМакета, 37);
	СтрокаВПараметрыМакета(Строка.ОТЧЕСТВО_ИП, "Отчество_", ПараметрыМакета, 37);
	СтрокаВПараметрыМакета(Строка.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	СтрокаВПараметрыМакета(Строка.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокументПредставителя_", ПараметрыМакета, 40);
	СтрокаВПараметрыМакета(Строка.ОГРНИП, "ОГРН_", ПараметрыМакета, 15);
	СтрокаВПараметрыМакета(Строка.Индекс, "Индекс_", ПараметрыМакета, 6);
	СтрокаВПараметрыМакета(Строка.КодРегиона, "КодСубъекта_", ПараметрыМакета, 2);
	СтрокаВПараметрыМакета(Строка.Дом, "Дом_", ПараметрыМакета, 8);
	СтрокаВПараметрыМакета(Строка.Корпус, "Корпус_", ПараметрыМакета, 8);
	СтрокаВПараметрыМакета(Строка.Квартира, "Квартира_", ПараметрыМакета, 8);
	СтрокаВПараметрыМакета(Строка.Район, "Район_", ПараметрыМакета, 34);
	СтрокаВПараметрыМакета(Строка.Город, "Город_", ПараметрыМакета, 34);
	СтрокаВПараметрыМакета(Строка.НаселенныйПункт, "НаселенныйПункт_", ПараметрыМакета, 34);
	СтрокаВПараметрыМакета(Строка.Улица, "Улица_", ПараметрыМакета, 34);
	ПараметрыМакета.ПризнакПредставителя = Строка.ПРИЗНАК_НП_ПОДВАЛ;
	ВсегоСтраниц = 2+СтруктураПараметров.Листы3.Количество()+СтруктураПараметров.Листы4.Количество();
	
	Попытка
		Если ЗначениеЗаполнено(Строка.ДАТА_НАЧАЛО) Тогда
			ДатаВПараметрыМакета(Строка.ДАТА_НАЧАЛО, "ДатаПатента_", ПараметрыМакета);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ДАТА_ПОДПИСИ) Тогда
			ДатаВПараметрыМакета(Строка.ДАТА_ПОДПИСИ, "ДатаПодписи_", ПараметрыМакета);
		КонецЕсли;
		
		ЧислоВПараметрыМакета(ВсегоСтраниц, "НаСтраницах_", ПараметрыМакета, 3);
		ЧислоВПараметрыМакета(Строка.КОЛИЧЕСТВО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
		ЧислоВПараметрыМакета(Строка.КОЛИЧЕСТВО_МЕСЯЦЕВ, "СРОК_", ПараметрыМакета, 2);
	Исключение
	КонецПопытки;
	
	ПечатнаяФорма.Вывести(Область1);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	Область2 = МакетУведомления.ПолучитьОбласть("Страница2");
	ПараметрыМакета = Область2.Параметры;
	Строка = СтруктураПараметров.Страница2[0];
	СтрокаВПараметрыМакета(Строка.П_ИНН_2, "ИНН_", ПараметрыМакета, 12);
	СтрокаВПараметрыМакета(Строка.ОписаниеДеятельности, "Описание_", ПараметрыМакета, 560);
	СтрокаВПараметрыМакета(Строка.КодПредпринимательскойДеятельности, "КодДеятельности_", ПараметрыМакета, 6);
	ЧислоВПараметрыМакета(Строка.СредняяЧисленностьРаботников, "КоличествоРаботников_", ПараметрыМакета, 2, Истина);
	ПараметрыМакета.НаличиеРаботников = Строка.НаличиеРаботников;
	ПечатнаяФорма.Вывести(Область2);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	НомерЛиста = 3;
	Для Каждого Строка Из СтруктураПараметров.Листы3 Цикл 
		Область3 = МакетУведомления.ПолучитьОбласть("Страница3_1");
		ПараметрыМакета = Область3.Параметры;
		
		СтрокаВПараметрыМакета(Строка.П_ИНН_3, "ИНН_", ПараметрыМакета, 12);
		ЧислоВПараметрыМакета(НомерЛиста, "Страница_", ПараметрыМакета, 3);
		ПечатнаяФорма.Вывести(Область3);
		
		Область3 = МакетУведомления.ПолучитьОбласть("Страница3_2_1");
		ПараметрыМакета = Область3.Параметры;
		СтрокаВПараметрыМакета(Строка["КОД_ТС1"], "Код_", ПараметрыМакета, 2);
		ПечатнаяФорма.Вывести(Область3);
		
		Попытка
			Для Инд = 1 По 5 Цикл
				Область3 = МакетУведомления.ПолучитьОбласть("Страница3_2_2");
				ПараметрыМакета = Область3.Параметры;
				
				СтрокаВПараметрыМакета(Строка["ВИН_ТС"+Инд], "ВИН_", ПараметрыМакета, 25);
				СтрокаВПараметрыМакета(Строка["МАРКА_ТС"+Инд], "МАРКА_", ПараметрыМакета, 60);
				СтрокаВПараметрыМакета(Строка["ЗНАК_ТС"+Инд], "ЗНАК_", ПараметрыМакета, 30);
				ПечатнаяФорма.Вывести(Область3);
			КонецЦикла;
		Исключение
			Область3 = МакетУведомления.ПолучитьОбласть("Страница3_2");
			ПечатнаяФорма.Вывести(Область3);
			ПечатнаяФорма.Вывести(Область3);
			ПечатнаяФорма.Вывести(Область3);
			ПечатнаяФорма.Вывести(Область3);
			ПечатнаяФорма.Вывести(Область3);
			Область3 = МакетУведомления.ПолучитьОбласть("Страница3_3");
			ПечатнаяФорма.Вывести(Область3);
			ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
			НомерЛиста = НомерЛиста + 1;
			Прервать;
		КонецПопытки;
		
		Область3 = МакетУведомления.ПолучитьОбласть("Страница3_3");
		ПечатнаяФорма.Вывести(Область3);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		НомерЛиста = НомерЛиста + 1;
	КонецЦикла;
	
	Для Каждого Строка Из СтруктураПараметров.Листы4 Цикл 
		Область4 = МакетУведомления.ПолучитьОбласть("Страница4");
		ПараметрыМакета = Область4.Параметры;
		
		СтрокаВПараметрыМакета(Строка.П_ИНН_4, "ИНН_", ПараметрыМакета, 12);
		ЧислоВПараметрыМакета(НомерЛиста, "Страница_", ПараметрыМакета, 3);
		
		Попытка
			СтрокаВПараметрыМакета(Строка.КОД_ОБЪЕКТА, "Код_", ПараметрыМакета, 2);
			СтрокаВПараметрыМакета(Строка.ПРИЗНАК_ОБЪЕКТА, "Признак_", ПараметрыМакета, 1);
			ЧислоВПараметрыМакета(100*Строка.ПЛОЩАДЬ_ОБЪЕКТА, "Площадь_", ПараметрыМакета, 8);
			
			СтрокаВПараметрыМакета(Строка.Индекс1, "Индекс_", ПараметрыМакета, 6);
			СтрокаВПараметрыМакета(Строка.КодРегиона1, "КодСубъекта_", ПараметрыМакета, 2);
			СтрокаВПараметрыМакета(Строка.Дом1, "Дом_", ПараметрыМакета, 8);
			СтрокаВПараметрыМакета(Строка.Корпус1, "Корпус_", ПараметрыМакета, 8);
			СтрокаВПараметрыМакета(Строка.Квартира1, "Квартира_", ПараметрыМакета, 8);
			СтрокаВПараметрыМакета(Строка.Район1, "Район_", ПараметрыМакета, 34);
			СтрокаВПараметрыМакета(Строка.Город1, "Город_", ПараметрыМакета, 34);
			СтрокаВПараметрыМакета(Строка.НаселенныйПункт1, "НаселенныйПункт_", ПараметрыМакета, 34);
			СтрокаВПараметрыМакета(Строка.Улица1, "Улица_", ПараметрыМакета, 34);
		Исключение
			ПечатнаяФорма.Вывести(Область4);
			ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
			Прервать;
		КонецПопытки;
		
		ПечатнаяФорма.Вывести(Область4);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		НомерЛиста = НомерЛиста + 1;
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция ПечатьСразуПолучениеПатента()
	
	ПечатнаяФорма = СформироватьМакетПолучениеПатента();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция СформироватьМакетПолучениеПатентаРекомендованнаяФорма()
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ПолучениеПатентаРекомендованная");
	СтруктураПараметров = ДанныеУведомления.Получить();
	ЕстьНовыеСтрокиЛистТС = СтруктураПараметров.Свойство("Листы3_0");
	
	Область1 = МакетУведомления.ПолучитьОбласть("Страница1");
	ПараметрыМакета = Область1.Параметры;
	Строка = СтруктураПараметров.Титульный[0];
	СтрокаВПараметрыМакета(Строка.П_ИНН_1, "ИНН_", ПараметрыМакета, 12);
	СтрокаВПараметрыМакета(Строка.КОД_НО, "КОД_НО_", ПараметрыМакета, 4);
	СтрокаВПараметрыМакета(Строка.ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ, "Представитель_", ПараметрыМакета, 60);
	СтрокаВПараметрыМакета(Строка.ФАМИЛИЯ_ИП, "Фамилия_", ПараметрыМакета, 37);
	СтрокаВПараметрыМакета(Строка.ИМЯ_ИП, "Имя_", ПараметрыМакета, 37);
	СтрокаВПараметрыМакета(Строка.ОТЧЕСТВО_ИП, "Отчество_", ПараметрыМакета, 37);
	СтрокаВПараметрыМакета(Строка.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	СтрокаВПараметрыМакета(Строка.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокументПредставителя_", ПараметрыМакета, 40);
	СтрокаВПараметрыМакета(Строка.ОГРНИП, "ОГРН_", ПараметрыМакета, 15);
	СтрокаВПараметрыМакета(Строка.Индекс, "Индекс_", ПараметрыМакета, 6);
	СтрокаВПараметрыМакета(Строка.КодРегиона, "КодСубъекта_", ПараметрыМакета, 2);
	СтрокаВПараметрыМакета(Строка.Дом, "Дом_", ПараметрыМакета, 8);
	СтрокаВПараметрыМакета(Строка.Корпус, "Корпус_", ПараметрыМакета, 8);
	СтрокаВПараметрыМакета(Строка.Квартира, "Квартира_", ПараметрыМакета, 8);
	СтрокаВПараметрыМакета(Строка.Район, "Район_", ПараметрыМакета, 34);
	СтрокаВПараметрыМакета(Строка.Город, "Город_", ПараметрыМакета, 34);
	СтрокаВПараметрыМакета(Строка.НаселенныйПункт, "НаселенныйПункт_", ПараметрыМакета, 34);
	СтрокаВПараметрыМакета(Строка.Улица, "Улица_", ПараметрыМакета, 34);
	ПараметрыМакета.ПризнакПредставителя = Строка.ПРИЗНАК_НП_ПОДВАЛ;
	ВсегоСтраниц = 2+СтруктураПараметров.Листы3.Количество()+СтруктураПараметров.Листы4.Количество();
	
	Попытка
		Если ЗначениеЗаполнено(Строка.ДАТА_НАЧАЛО) Тогда
			ДатаВПараметрыМакета(Строка.ДАТА_НАЧАЛО, "ДатаПатента_", ПараметрыМакета);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ДАТА_ПОДПИСИ) Тогда
			ДатаВПараметрыМакета(Строка.ДАТА_ПОДПИСИ, "ДатаПодписи_", ПараметрыМакета);
		КонецЕсли;
		
		ЧислоВПараметрыМакета(ВсегоСтраниц, "НаСтраницах_", ПараметрыМакета, 3);
		ЧислоВПараметрыМакета(Строка.КОЛИЧЕСТВО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
		ЧислоВПараметрыМакета(Строка.КОЛИЧЕСТВО_МЕСЯЦЕВ, "СРОК_", ПараметрыМакета, 2);
	Исключение
	КонецПопытки;
	
	ПечатнаяФорма.Вывести(Область1);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	Область2 = МакетУведомления.ПолучитьОбласть("Страница2");
	ПараметрыМакета = Область2.Параметры;
	Строка = СтруктураПараметров.Страница2[0];
	СтрокаВПараметрыМакета(Строка.П_ИНН_2, "ИНН_", ПараметрыМакета, 12);
	СтрокаВПараметрыМакета(Строка.ОписаниеДеятельности, "Описание_", ПараметрыМакета, 560);
	СтрокаВПараметрыМакета(Строка.КодПредпринимательскойДеятельности, "КодДеятельности_", ПараметрыМакета, 6);
	ЧислоВПараметрыМакета(Строка.СредняяЧисленностьРаботников, "КоличествоРаботников_", ПараметрыМакета, 2, Истина);
	ПараметрыМакета.НаличиеРаботников = Строка.НаличиеРаботников;
	ПечатнаяФорма.Вывести(Область2);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	НомерЛиста = 3;
	Если ЕстьНовыеСтрокиЛистТС Тогда 
		Для Каждого Строка Из СтруктураПараметров.Листы3_0 Цикл 
			Область5 = МакетУведомления.ПолучитьОбласть("Страница5_1");
			ПечатнаяФорма.Вывести(Область5);
			
			Для Инд = 1 По 3 Цикл 
				Область5 = МакетУведомления.ПолучитьОбласть("Страница5_2");
				ПараметрыМакета = Область5.Параметры;
				
				СтрокаВПараметрыМакета(Строка["Индекс"+(Инд+1)], "Индекс_", ПараметрыМакета, 6);
				СтрокаВПараметрыМакета(Строка["КодРегиона"+(Инд+1)], "КодСубъекта_", ПараметрыМакета, 2);
				СтрокаВПараметрыМакета(Строка["Дом"+(Инд+1)], "Дом_", ПараметрыМакета, 8);
				СтрокаВПараметрыМакета(Строка["Корпус"+(Инд+1)], "Корпус_", ПараметрыМакета, 8);
				СтрокаВПараметрыМакета(Строка["Квартира"+(Инд+1)], "Квартира_", ПараметрыМакета, 8);
				СтрокаВПараметрыМакета(Строка["Район"+(Инд+1)], "Район_", ПараметрыМакета, 34);
				СтрокаВПараметрыМакета(Строка["Город"+(Инд+1)], "Город_", ПараметрыМакета, 34);
				СтрокаВПараметрыМакета(Строка["НаселенныйПункт"+(Инд+1)], "НаселенныйПункт_", ПараметрыМакета, 34);
				СтрокаВПараметрыМакета(Строка["Улица"+(Инд+1)], "Улица_", ПараметрыМакета, 34);
				
				СтрокаВПараметрыМакета(Строка["ОКТМО_МЕСТА_ДЕЯТЕЛЬНОСТИ"+(Инд+1)], "КодОКТМО_", ПараметрыМакета, 11);
				ПечатнаяФорма.Вывести(Область5);
			КонецЦикла;
			
			Область5 = МакетУведомления.ПолучитьОбласть("Страница5_3");
			ПечатнаяФорма.Вывести(Область5);
			ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из СтруктураПараметров.Листы3 Цикл 
		Область3 = МакетУведомления.ПолучитьОбласть("Страница3_1");
		ПараметрыМакета = Область3.Параметры;
		
		СтрокаВПараметрыМакета(Строка.П_ИНН_3, "ИНН_", ПараметрыМакета, 12);
		ЧислоВПараметрыМакета(НомерЛиста, "Страница_", ПараметрыМакета, 3);
		ПечатнаяФорма.Вывести(Область3);
		
		Область3 = МакетУведомления.ПолучитьОбласть("Страница3_2_1");
		ПараметрыМакета = Область3.Параметры;
		СтрокаВПараметрыМакета(Строка["КОД_ТС1"], "Код_", ПараметрыМакета, 2);
		ПечатнаяФорма.Вывести(Область3);
		
		Инд = 0;
		Попытка
			Для Инд = 1 По 3 Цикл
				Область3 = МакетУведомления.ПолучитьОбласть("Страница3_2_2");
				ПараметрыМакета = Область3.Параметры;
				
				СтрокаВПараметрыМакета(Строка["ВИН_ТС"+Инд], "ВИН_", ПараметрыМакета, 25);
				СтрокаВПараметрыМакета(Строка["МАРКА_ТС"+Инд], "МАРКА_", ПараметрыМакета, 30);
				СтрокаВПараметрыМакета(Строка["ЗНАК_ТС"+Инд], "ЗНАК_", ПараметрыМакета, 30);
				Если ЕстьНовыеСтрокиЛистТС Тогда 
					ЧислоВПараметрыМакета(100*Строка["ТОННАЖ_ТС"+Инд], "Груз_", ПараметрыМакета, 4, Ложь);
					ЧислоВПараметрыМакета(Строка["МЕСТ_ТС"+Инд], "Мест_", ПараметрыМакета, 4, Ложь);
				КонецЕсли;
				ПечатнаяФорма.Вывести(Область3);
			КонецЦикла;
		Исключение
			Область3 = МакетУведомления.ПолучитьОбласть("Страница3_2_1");
			Пока Инд <= 3 Цикл
				ПечатнаяФорма.Вывести(Область3);
				Инд = Инд + 1;
			КонецЦикла;
			Область3 = МакетУведомления.ПолучитьОбласть("Страница3_3");
			ПечатнаяФорма.Вывести(Область3);
			ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
			НомерЛиста = НомерЛиста + 1;
			Прервать;
		КонецПопытки;
		
		Область3 = МакетУведомления.ПолучитьОбласть("Страница3_3");
		ПечатнаяФорма.Вывести(Область3);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		НомерЛиста = НомерЛиста + 1;
	КонецЦикла;
	
	Для Каждого Строка Из СтруктураПараметров.Листы4 Цикл 
		Область4 = МакетУведомления.ПолучитьОбласть("Страница4");
		ПараметрыМакета = Область4.Параметры;
		
		СтрокаВПараметрыМакета(Строка.П_ИНН_4, "ИНН_", ПараметрыМакета, 12);
		ЧислоВПараметрыМакета(НомерЛиста, "Страница_", ПараметрыМакета, 3);
		
		Попытка
			СтрокаВПараметрыМакета(Строка.КОД_ОБЪЕКТА, "Код_", ПараметрыМакета, 2);
			СтрокаВПараметрыМакета(Строка.ПРИЗНАК_ОБЪЕКТА, "Признак_", ПараметрыМакета, 1);
			ЧислоВПараметрыМакета(100*Строка.ПЛОЩАДЬ_ОБЪЕКТА, "Площадь_", ПараметрыМакета, 8);
			
			СтрокаВПараметрыМакета(Строка.Индекс1, "Индекс_", ПараметрыМакета, 6);
			СтрокаВПараметрыМакета(Строка.КодРегиона1, "КодСубъекта_", ПараметрыМакета, 2);
			СтрокаВПараметрыМакета(Строка.Дом1, "Дом_", ПараметрыМакета, 8);
			СтрокаВПараметрыМакета(Строка.Корпус1, "Корпус_", ПараметрыМакета, 8);
			СтрокаВПараметрыМакета(Строка.Квартира1, "Квартира_", ПараметрыМакета, 8);
			СтрокаВПараметрыМакета(Строка.Район1, "Район_", ПараметрыМакета, 34);
			СтрокаВПараметрыМакета(Строка.Город1, "Город_", ПараметрыМакета, 34);
			СтрокаВПараметрыМакета(Строка.НаселенныйПункт1, "НаселенныйПункт_", ПараметрыМакета, 34);
			СтрокаВПараметрыМакета(Строка.Улица1, "Улица_", ПараметрыМакета, 34);
			Если ЕстьНовыеСтрокиЛистТС Тогда
				СтрокаВПараметрыМакета(Строка.ОКТМО_ОБЪЕКТА, "КодОКТМО_", ПараметрыМакета, 11);
			КонецЕсли;
		Исключение
			ПечатнаяФорма.Вывести(Область4);
			ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
			Прервать;
		КонецПопытки;
		
		ПечатнаяФорма.Вывести(Область4);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		НомерЛиста = НомерЛиста + 1;
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция ПечатьСразуПолучениеПатентаРекомендованнаяФорма()
	
	ПечатнаяФорма = СформироватьМакетПолучениеПатентаРекомендованнаяФорма();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция СформироватьМакетУтратаПраваНаПатент()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_УтратаПраваНаПатент");
	Область1 = МакетУведомления.ПолучитьОбласть("Страница1");
	ПараметрыМакета = Область1.Параметры;
	
	ДатаВПараметрыМакета(ДатаПодписи, "ДатаПодписи_", ПараметрыМакета);
	СтрокаВПараметрыМакета(ПодписантДокумент, "ДокументПредставителя_", ПараметрыМакета, 120);
	СтрокаВПараметрыМакета(ПодписантТелефон, "Телефон_", ПараметрыМакета, 20);
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	ПараметрыМакета.ПризнакПредставителя = ПодписантПризнак;
	ДанныеРегистрацияВИФНС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВИФНС, "Код, КПП");
	СтрокаВПараметрыМакета(ДанныеРегистрацияВИФНС.Код, "КОД_НО_", ПараметрыМакета, 4);
	
	СведенияОбИП = ПолучитьСведенияОбОрганизации();
	СтруктураПараметров = ДанныеУведомления.Получить();
	ВсегоСтраниц = 1 + СтруктураПараметров.Листы3.Количество();
	
	ВывестиОбщиеДанныеПатент(ПараметрыМакета, СведенияОбИП, СтруктураПараметров);
	
	ЧислоВПараметрыМакета(СтруктураПараметров.Титульный[0].КОЛИЧЕСТВО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	ЧислоВПараметрыМакета(ВсегоСтраниц, "НаСтраницах_", ПараметрыМакета, 3);
	ПараметрыМакета.КОД_ПРИЧИНЫ = СтруктураПараметров.Титульный[0].КОД_ПРИЧИНЫ;
	Если ЗначениеЗаполнено(СтруктураПараметров.Титульный[0].ДАТА_УТРАТЫ_ПРАВА) Тогда
		ДатаВПараметрыМакета(СтруктураПараметров.Титульный[0].ДАТА_УТРАТЫ_ПРАВА, "ДатаОбстоятельства_", ПараметрыМакета);
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(Область1);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	НомерЛиста = 2;
	Для Каждого Строка Из СтруктураПараметров.Листы3 Цикл 
		Область3 = МакетУведомления.ПолучитьОбласть("Страница3_1");
		ПараметрыМакета = Область3.Параметры;
		
		СтрокаВПараметрыМакета(Строка.П_ИНН_3, "ИНН_", ПараметрыМакета, 12);
		ЧислоВПараметрыМакета(НомерЛиста, "Страница_", ПараметрыМакета, 3);
		ПечатнаяФорма.Вывести(Область3);
		
		Для Инд = 1 По 17 Цикл
			Область3 = МакетУведомления.ПолучитьОбласть("Страница3_2_1");
			ПараметрыМакета = Область3.Параметры;
			СтрокаВПараметрыМакета(Строка["НОМЕР_ПАТЕНТА_"+Инд], "НОМЕР_ПАТЕНТА_", ПараметрыМакета, 13);
			ДатаВПараметрыМакета(Строка["ДАТА_НАЧАЛА_"+Инд], "ДатаНачалаДействия_", ПараметрыМакета);
			ДатаВПараметрыМакета(Строка["ДАТА_ОКОНЧАНИЕ_"+Инд], "ДатаОкончанияДействия_", ПараметрыМакета);
			ПечатнаяФорма.Вывести(Область3);
		КонецЦикла;
		
		Область3 = МакетУведомления.ПолучитьОбласть("Страница3_3");
		ПечатнаяФорма.Вывести(Область3);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		НомерЛиста = НомерЛиста + 1;
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция ПечатьСразуУтратаПраваНаПатент()
	
	ПечатнаяФорма = СформироватьМакетУтратаПраваНаПатент();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция СформироватьМакетПрекращениеДеятельностиПатент()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ПрекращениеДеятельностиПатент");
	ПараметрыМакета = МакетУведомления.Параметры;
	
	ДатаВПараметрыМакета(ДатаПодписи, "ДатаПодписи_", ПараметрыМакета);
	СтрокаВПараметрыМакета(ПодписантДокумент, "ДокументПредставителя_", ПараметрыМакета, 120);
	СтрокаВПараметрыМакета(ПодписантТелефон, "Телефон_", ПараметрыМакета, 20);
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	ПараметрыМакета.ПризнакПредставителя = ПодписантПризнак;
	ДанныеРегистрацияВИФНС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВИФНС, "Код, КПП");
	СтрокаВПараметрыМакета(ДанныеРегистрацияВИФНС.Код, "КОД_НО_", ПараметрыМакета, 4);
	
	СведенияОбИП = ПолучитьСведенияОбОрганизации();
	СтруктураПараметров = ДанныеУведомления.Получить();
	
	ВывестиОбщиеДанныеПатент(ПараметрыМакета, СведенияОбИП, СтруктураПараметров);
	
	ЧислоВПараметрыМакета(СтруктураПараметров.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	Если ЗначениеЗаполнено(СтруктураПараметров.ДАТА_ПРЕКРАЩЕНИЯ) Тогда
		ДатаВПараметрыМакета(СтруктураПараметров.ДАТА_ПРЕКРАЩЕНИЯ, "ДатаПрекращения_", ПараметрыМакета);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПараметров.ДАТА_ВЫДАЧИ) Тогда
		ДатаВПараметрыМакета(СтруктураПараметров.ДАТА_ВЫДАЧИ, "ДатаВыдачи_", ПараметрыМакета);
	КонецЕсли;
	СтрокаВПараметрыМакета(СтруктураПараметров.НОМЕР_ПАТЕНТА, "НомерПатента_", ПараметрыМакета, 13);
	
	ПечатнаяФорма.Вывести(МакетУведомления);
	Возврат ПечатнаяФорма;
КонецФункции

Функция ПечатьСразуПрекращениеДеятельностиПатент()
	
	ПечатнаяФорма = СформироватьМакетПрекращениеДеятельностиПатент();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция СформироватьМакетУтратаПраваНаУСН()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_УтратаПраваНаУСН");
	ПараметрыМакета = МакетУведомления.Параметры;
	
	ДатаВПараметрыМакета(ДатаПодписи, "ДатаПодписи_", ПараметрыМакета);
	СтрокаВПараметрыМакета(ПодписантДокумент, "ДокументПредставителя_", ПараметрыМакета, 120);
	СтрокаВПараметрыМакета(ПодписантТелефон, "Телефон_", ПараметрыМакета, 20);
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	ПараметрыМакета.ПризнакПредставителя = ПодписантПризнак;
	ДанныеРегистрацияВИФНС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВИФНС, "Код");
	СтрокаВПараметрыМакета(ДанныеРегистрацияВИФНС.Код, "КОД_НО_", ПараметрыМакета, 4);
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "КППЮЛ");
	СтрокаВПараметрыМакета(СведенияОбОрганизации.КППЮЛ, "КПП_", ПараметрыМакета, 9);
	
	СведенияОбОрг = ПолучитьСведенияОбОрганизации();
	СтруктураПараметров = ДанныеУведомления.Получить();
	ВывестиОбщиеДанныеУСН(ПараметрыМакета, СведенияОбОрг, СтруктураПараметров);
	
	ДатаВПараметрыМакета(СтруктураПараметров.ДАТА_ПРЕКРАЩЕНИЯ, "ДатаПерехода_", ПараметрыМакета);
	ЧислоВПараметрыМакета(СтруктураПараметров.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	
	СтрокаВПараметрыМакета(СтруктураПараметров.ГОД1, "Год2_", ПараметрыМакета, 4);
	СтрокаВПараметрыМакета(СтруктураПараметров.ГОД2, "Год3_", ПараметрыМакета, 4);
	СтрокаВПараметрыМакета(СтруктураПараметров.НАЛОГОВЫЙ_ПЕРИОД1, "НалоговыйПериод1_", ПараметрыМакета, 2);
	СтрокаВПараметрыМакета(СтруктураПараметров.НАЛОГОВЫЙ_ПЕРИОД2, "НалоговыйПериод2_", ПараметрыМакета, 2);
	СтрокаВПараметрыМакета(СтруктураПараметров.ПОДПУНКТ1, "Подпункт_", ПараметрыМакета, 3);
	ПараметрыМакета.Пункт = СтруктураПараметров.ПУНКТ1;
	СтрокаВПараметрыМакета(СтруктураПараметров.СТАТЬЯ1, "Статья_", ПараметрыМакета, 2);
	
	ПечатнаяФорма.Вывести(МакетУведомления);
	Возврат ПечатнаяФорма;
КонецФункции

Функция ПечатьСразуУтратаПраваНаУСН()
	
	ПечатнаяФорма = СформироватьМакетУтратаПраваНаУСН();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция СформироватьМакетПрекращениеДеятельностиУСН()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ПрекращениеДеятельностиУСН");
	ПараметрыМакета = МакетУведомления.Параметры;
	
	ДатаВПараметрыМакета(ДатаПодписи, "ДатаПодписи_", ПараметрыМакета);
	СтрокаВПараметрыМакета(ПодписантДокумент, "ДокументПредставителя_", ПараметрыМакета, 120);
	СтрокаВПараметрыМакета(ПодписантТелефон, "Телефон_", ПараметрыМакета, 20);
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	ПараметрыМакета.ПризнакПредставителя = ПодписантПризнак;
	ДанныеРегистрацияВИФНС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВИФНС, "Код");
	СтрокаВПараметрыМакета(ДанныеРегистрацияВИФНС.Код, "КОД_НО_", ПараметрыМакета, 4);
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "КППЮЛ");
	СтрокаВПараметрыМакета(СведенияОбОрганизации.КППЮЛ, "КПП_", ПараметрыМакета, 9);
	
	СведенияОбОрг = ПолучитьСведенияОбОрганизации();
	СтруктураПараметров = ДанныеУведомления.Получить();
	ВывестиОбщиеДанныеУСН(ПараметрыМакета, СведенияОбОрг, СтруктураПараметров);
	
	ДатаВПараметрыМакета(СтруктураПараметров.ДАТА_ПРЕКРАЩЕНИЯ, "ДатаПрекращения_", ПараметрыМакета);
	ЧислоВПараметрыМакета(СтруктураПараметров.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	
	ПечатнаяФорма.Вывести(МакетУведомления);
	Возврат ПечатнаяФорма;
КонецФункции

Функция ПечатьСразуПрекращениеДеятельностиУСН()
	
	ПечатнаяФорма = СформироватьМакетПрекращениеДеятельностиУСН();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция СформироватьМакетИзменениеОбъектаУСН()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ИзменениеОбъектаУСН");
	ПараметрыМакета = МакетУведомления.Параметры;
	
	ДатаВПараметрыМакета(ДатаПодписи, "ДатаПодписи_", ПараметрыМакета);
	СтрокаВПараметрыМакета(ПодписантДокумент, "ДокументПредставителя_", ПараметрыМакета, 120);
	СтрокаВПараметрыМакета(ПодписантТелефон, "Телефон_", ПараметрыМакета, 20);
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	ПараметрыМакета.ПризнакПредставителя = ПодписантПризнак;
	ДанныеРегистрацияВИФНС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВИФНС, "Код");
	СтрокаВПараметрыМакета(ДанныеРегистрацияВИФНС.Код, "КОД_НО_", ПараметрыМакета, 4);
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "КППЮЛ");
	СтрокаВПараметрыМакета(СведенияОбОрганизации.КППЮЛ, "КПП_", ПараметрыМакета, 9);
	
	СведенияОбОрг = ПолучитьСведенияОбОрганизации();
	СтруктураПараметров = ДанныеУведомления.Получить();
	ВывестиОбщиеДанныеУСН(ПараметрыМакета, СведенияОбОрг, СтруктураПараметров);
	
	СтрокаВПараметрыМакета(СтруктураПараметров.ГОД_ИЗМЕНЕНИЯ, "ГодИзменения_", ПараметрыМакета, 4);
	ПараметрыМакета.КодОбъекта = СтруктураПараметров.КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ;
	ЧислоВПараметрыМакета(СтруктураПараметров.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	
	ПечатнаяФорма.Вывести(МакетУведомления);
	Возврат ПечатнаяФорма;
КонецФункции

Функция ПечатьСразуИзменениеОбъектаУСН()
	
	ПечатнаяФорма = СформироватьМакетИзменениеОбъектаУСН();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция СформироватьМакетОтказОтУСН()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ОтказОтУСН");
	ПараметрыМакета = МакетУведомления.Параметры;
	
	ДатаВПараметрыМакета(ДатаПодписи, "ДатаПодписи_", ПараметрыМакета);
	СтрокаВПараметрыМакета(ПодписантДокумент, "ДокументПредставителя_", ПараметрыМакета, 120);
	СтрокаВПараметрыМакета(ПодписантТелефон, "Телефон_", ПараметрыМакета, 20);
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	ПараметрыМакета.ПризнакПредставителя = ПодписантПризнак;
	ДанныеРегистрацияВИФНС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВИФНС, "Код");
	СтрокаВПараметрыМакета(ДанныеРегистрацияВИФНС.Код, "КОД_НО_", ПараметрыМакета, 4);
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "КППЮЛ");
	СтрокаВПараметрыМакета(СведенияОбОрганизации.КППЮЛ, "КПП_", ПараметрыМакета, 9);
	
	СведенияОбОрг = ПолучитьСведенияОбОрганизации();
	СтруктураПараметров = ДанныеУведомления.Получить();
	ВывестиОбщиеДанныеУСН(ПараметрыМакета, СведенияОбОрг, СтруктураПараметров);
	
	СтрокаВПараметрыМакета(СтруктураПараметров.ГОД_ОТКАЗА_ОТ_УСН, "ГодПерехода_", ПараметрыМакета, 4);
	ЧислоВПараметрыМакета(СтруктураПараметров.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	
	ПечатнаяФорма.Вывести(МакетУведомления);
	Возврат ПечатнаяФорма;
КонецФункции

Функция ПечатьСразуОтказОтУСН()
	
	ПечатнаяФорма = СформироватьМакетОтказОтУСН();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция СформироватьМакетПереходНаУСН()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ПереходНаУСН");
	ПараметрыМакета = МакетУведомления.Параметры;
	
	ДатаВПараметрыМакета(ДатаПодписи, "ДатаПодписи_", ПараметрыМакета);
	СтрокаВПараметрыМакета(ПодписантДокумент, "ДокументПредставителя_", ПараметрыМакета, 120);
	СтрокаВПараметрыМакета(ПодписантТелефон, "Телефон_", ПараметрыМакета, 20);
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	ПараметрыМакета.ПризнакПредставителя = ПодписантПризнак;
	ДанныеРегистрацияВИФНС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВИФНС, "Код");
	СтрокаВПараметрыМакета(ДанныеРегистрацияВИФНС.Код, "КОД_НО_", ПараметрыМакета, 4);
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "КППЮЛ");
	СтрокаВПараметрыМакета(СведенияОбОрганизации.КППЮЛ, "КПП_", ПараметрыМакета, 9);
	
	СведенияОбОрг = ПолучитьСведенияОбОрганизации();
	СтруктураПараметров = ДанныеУведомления.Получить();
	ВывестиОбщиеДанныеУСН(ПараметрыМакета, СведенияОбОрг, СтруктураПараметров);
	
	ПараметрыМакета.ПризнакНП = СтруктураПараметров.ПРИЗНАК_НП;
	ПараметрыМакета.ПризнакВремениПерехода = СтруктураПараметров.КОД_ПЕРЕХОДА;
	СтрокаВПараметрыМакета(СтруктураПараметров.ГОД_ПЕРЕХОДА_1, "ГОД_1_", ПараметрыМакета, 4);
	ДатаВПараметрыМакета(СтруктураПараметров.ДАТА_ПЕРЕХОДА, "ДатаПерехода_", ПараметрыМакета);
	ПараметрыМакета.ОбъекНалогообложения = СтруктураПараметров.КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ;
	СтрокаВПараметрыМакета(СтруктураПараметров.ГОД_ПОДАЧИ_УВЕДОМЛЕНИЯ, "ГодПодачи_", ПараметрыМакета, 4);
	ЧислоВПараметрыМакета(СтруктураПараметров.ПОЛУЧЕНО_ДОХОДОВ, "ДоходовГодПодачи_", ПараметрыМакета, 9);
	ЧислоВПараметрыМакета(СтруктураПараметров.ОСТАТОЧНАЯ_СТОИМОСТЬ_ОС, "СтоимостьОС_", ПараметрыМакета, 9);
	ЧислоВПараметрыМакета(СтруктураПараметров.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	
	ПечатнаяФорма.Вывести(МакетУведомления);
	Возврат ПечатнаяФорма;
КонецФункции

Функция ПечатьСразуПереходНаУСН()
	
	ПечатнаяФорма = СформироватьМакетПереходНаУСН();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция СформироватьМакетФормаС09_2()

	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ФормаС_09_2");
	ПараметрыМакета = МакетУведомления.Параметры;
	
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	ДанныеРегистрацияВИФНС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВИФНС, "Код");
	СтрокаВПараметрыМакета(ДанныеРегистрацияВИФНС.Код, "КОД_НО_", ПараметрыМакета, 4);
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "КППЮЛ");
	СтрокаВПараметрыМакета(СведенияОбОрганизации.КППЮЛ, "КПП_", ПараметрыМакета, 9);
	
	СведенияОбОрг = ПолучитьСведенияОбОрганизации();
	СтруктураПараметров = ДанныеУведомления.Получить();
	
	Если СведенияОбОрг.ЭтоЮрЛицо Тогда
		Если СтруктураПараметров.Свойство("П_ИНН") Тогда 
			СтрокаВПараметрыМакета(СтруктураПараметров.П_ИНН, "ИНН_", ПараметрыМакета, 10);
			СтрокаВПараметрыМакета(СтруктураПараметров.ОРГАНИЗАЦИЯ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
			СтрокаВПараметрыМакета(СтруктураПараметров.П_ОГРН, "ОГРН_", ПараметрыМакета, 13);
			СтрокаВПараметрыМакета(СтруктураПараметров.П_КПП, "КПП_", ПараметрыМакета, 9);
		Иначе 
			СтрокаВПараметрыМакета(СведенияОбОрг.ИНН, "ИНН_", ПараметрыМакета, 10);
			СтрокаВПараметрыМакета(СведенияОбОрг.НаименованиеПолное, "ОрганизацияНазвание_", ПараметрыМакета, 160);
			СтрокаВПараметрыМакета(СведенияОбОрг.ОГРН, "ОГРН_", ПараметрыМакета, 13);
		КонецЕсли;
	Иначе
		Если СтруктураПараметров.Свойство("П_ИНН") Тогда 
			СтрокаВПараметрыМакета(СтруктураПараметров.П_ИНН, "ИНН_", ПараметрыМакета, 12);
			СтрокаВПараметрыМакета(СтруктураПараметров.ОРГАНИЗАЦИЯ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
			СтрокаВПараметрыМакета(СтруктураПараметров.П_ОГРНИП, "ОГРНИП_", ПараметрыМакета, 15);
		Иначе 
			СтрокаВПараметрыМакета(СведенияОбОрг.ИНН, "ИНН_", ПараметрыМакета, 12);
			СтрокаВПараметрыМакета(СведенияОбОрг.ФИО, "ОрганизацияНазвание_", ПараметрыМакета, 160);
			СтрокаВПараметрыМакета(СведенияОбОрг.ОГРН, "ОГРНИП_", ПараметрыМакета, 15);
		КонецЕсли;
	КонецЕсли;
	
	// данные основного раздела из сохраненных данных
	ПараметрыМакета.ПризнакСообщения = СтруктураПараметров.ПРИЗНАК_СООБЩЕНИЯ;
	ДатаВПараметрыМакета(СтруктураПараметров.ДАТА_СООБЩЕНИЯ, "ДатаСообщения_", ПараметрыМакета);
	СтрокаВПараметрыМакета(СтруктураПараметров.НАИМЕНОВАНИЕ_ЗАВИСИМОЙ_ОРГАНИЗАЦИИ, "ОргУчНазвание_", ПараметрыМакета, 160);
	ЦелаяЧасть = Цел(СтруктураПараметров.ПРОЦЕНТ_УЧАСТИЯ);
	ДробнаяЧасть = СтруктураПараметров.ПРОЦЕНТ_УЧАСТИЯ - ЦелаяЧасть;
	Если ЦелаяЧасть = 0 Тогда
		ПараметрыМакета["ПроцентУчастия_3"] = "0";
	Иначе 
		ЧислоВПараметрыМакета(ЦелаяЧасть, "ПроцентУчастия_", ПараметрыМакета, 3);
	КонецЕсли;
	Индекс = 4;
	Пока ДробнаяЧасть <> 0 Цикл
		ДробнаяЧасть = ДробнаяЧасть * 10;
		ЦелаяЧасть = Цел(ДробнаяЧасть);
		ДробнаяЧасть = ДробнаяЧасть - ЦелаяЧасть;
		ПараметрыМакета["ПроцентУчастия_"+Индекс] = "" + ЦелаяЧасть;
		Индекс = Индекс + 1;
	КонецЦикла;
	Пока Индекс <= 18 Цикл
		ПараметрыМакета["ПроцентУчастия_"+Индекс] = "0";
		Индекс = Индекс + 1;
	КонецЦикла;
	СтрокаВПараметрыМакета(СтруктураПараметров.ИНН_ЗАВИСИМОЙ, "ИННУчОрг_", ПараметрыМакета, 10);
	СтрокаВПараметрыМакета(СтруктураПараметров.КПП_ЗАВИСИМОЙ, "КППУчОрг_", ПараметрыМакета, 9);
	СтрокаВПараметрыМакета(СтруктураПараметров.ОКСМ, "ОКСМ_", ПараметрыМакета, 3);
	ЧислоВПараметрыМакета(СтруктураПараметров.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
		
	// данные подвала из сохраненных данных
	ПараметрыМакета.ПризнакПодписанта = СтруктураПараметров.ПРИЗНАК_НП_ПОДВАЛ;
	ДатаВПараметрыМакета(СтруктураПараметров.ДАТА_ПОДПИСИ, "ДатаПодписи_", ПараметрыМакета);
	СтрокаВПараметрыМакета(СтруктураПараметров.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	СтрокаВПараметрыМакета(СтруктураПараметров.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокументПредставителя_", ПараметрыМакета, 20);
	СтрокаВПараметрыМакета(СтруктураПараметров.ПредставительИННФЛ, "ИНН_ПОДПИСАНТ_", ПараметрыМакета, 12);
	ПараметрыМакета.Email = СтруктураПараметров.EMAIL_ПОДПИСАНТА;
	
	ПечатнаяФорма.Вывести(МакетУведомления);
	Возврат ПечатнаяФорма;

КонецФункции

Функция ПечатьСразуФормаС09_2()

	ПечатнаяФорма = СформироватьМакетФормаС09_2();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;

КонецФункции // ПечатьСразуФормаС09_2()
 
Функция СформироватьМакетФормаС09_3_1()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_"+ВидУведомления.Метаданные().Имя;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_С_09_3_1");
	ОбластьТитульный = МакетУведомления.ПолучитьОбласть("Титульный");
	ОбластьПодвалТитульный = МакетУведомления.ПолучитьОбласть("ОбластьПодвалТитульный");
	ОбластьПустаяСтрока = МакетУведомления.ПолучитьОбласть("ОбластьПустаяСтрока");
	МассивДляПроверки = Новый Массив;
	МассивДляПроверки.Добавить(ОбластьПустаяСтрока);
	МассивДляПроверки.Добавить(ОбластьПодвалТитульный);
	
	ПараметрыМакета = ОбластьТитульный.Параметры;
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.Титульный[0];
	
	СтрокаВПараметрыМакета(Титульный.П_ИНН, "ИНН_", ПараметрыМакета, 10);
	СтрокаВПараметрыМакета(Титульный.П_КПП, "КПП_", ПараметрыМакета, 9);
	СтрокаВПараметрыМакета(Титульный.КОД_НО, "КОД_НО_", ПараметрыМакета, 4);
	СтрокаВПараметрыМакета(Титульный.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
	СтрокаВПараметрыМакета(Титульный.ОГРН, "ОГРН_", ПараметрыМакета, 13);
	ЧислоВПараметрыМакета(Титульный.КОЛИЧЕСТВО_ПОДРАЗДЕЛЕНИЙ, "Количество_Подразделений_", ПараметрыМакета, 4);
	ЧислоВПараметрыМакета(Титульный.КОЛИЧЕСТВО_СТРАНИЦ, "КоличествоСтраниц_", ПараметрыМакета, 4);
	ЧислоВПараметрыМакета(Титульный.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	ПараметрыМакета.СозданиеВнесениеИзменений = Титульный.ПРИЗНАК_СООБЩЕНИЯ;
	
	ПараметрыМакета.ПризнакПодписанта = Титульный.ПРИЗНАК_НП_ПОДВАЛ;
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	СтрокаВПараметрыМакета(Титульный.ИНН_ПОДПИСАНТА, "ИНН_ПОДПИСАНТ_", ПараметрыМакета, 12);
	СтрокаВПараметрыМакета(Титульный.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	ПараметрыМакета.Email = Титульный.EMAIL_ПОДПИСАНТА;
	СтрокаВПараметрыМакета(Титульный.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	СтрокаВПараметрыМакета(Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокументПредставителя_", ПараметрыМакета, 40);
	ДатаВПараметрыМакета(Титульный.ДАТА_ПОДПИСИ, "ДатаПодписи_", ПараметрыМакета);
	
	ПечатнаяФорма.Вывести(ОбластьТитульный);
		
	Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл 
		ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
	КонецЦикла;
	
	ПечатнаяФорма.Вывести(ОбластьПодвалТитульный);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	ОбластьПодвалДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьПодвалДопЛист");
	МассивДляПроверки[1] = ОбластьПодвалДопЛист;
	
	Страница = 1;
	Для Каждого ДопЛист Из СтруктураПараметров.ДопЛисты Цикл 
		
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьДопЛист");
		ПараметрыМакета = ОбластьДопЛист.Параметры;
		Страница = Страница + 1;
		СтрокаВПараметрыМакета(ДопЛист.П_ИНН_Д, "ИНН_", ПараметрыМакета, 10);
		СтрокаВПараметрыМакета(ДопЛист.П_КПП_Д, "КПП_", ПараметрыМакета, 9);
		СтрокаВПараметрыМакета("0000", "СТР_", ПараметрыМакета, 4);
		ЧислоВПараметрыМакета(Страница, "СТР_", ПараметрыМакета, 4);
		ПараметрыМакета.СодержаниеДляПодразделения = ДопЛист.ПРИЗНАК_ИНФОРМАЦИИ;
		СтрокаВПараметрыМакета(ДопЛист.КПП_ПОДРАЗДЕЛЕНИЯ, "КПППодр_", ПараметрыМакета, 9);
		СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_ПОДРАЗДЕЛЕНИЯ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
		СтрокаВПараметрыМакета(ДопЛист.ИНДЕКС, "Индекс_", ПараметрыМакета, 6);
		СтрокаВПараметрыМакета(ДопЛист.КОД_РЕГИОНА, "КодРегиона_", ПараметрыМакета, 2);
		СтрокаВПараметрыМакета(ДопЛист.РАЙОН, "Район_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.ГОРОД, "Город_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ, "НаселенныйПункт_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.УЛИЦА, "Улица_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.ДОМ, "Дом_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.КОРПУС, "Корпус_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.КВАРТИРА, "Квартира_", ПараметрыМакета, 8);
		ДатаВПараметрыМакета(ДопЛист.ДАТА_ВНЕСЕНИЯ_ИЗМЕНЕНИЙ, "ДатаСоздания_", ПараметрыМакета);
		
		ПечатнаяФорма.Вывести(ОбластьДопЛист);
				
			Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл 
				ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
			КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьПодвалДопЛист);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ПечатьСразуФормаС09_3_1()
	ПечатнаяФорма = СформироватьМакетФормаС09_3_1();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_" + ВидУведомления.Метаданные().Имя;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакетФормаС09_3_2()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_"+ВидУведомления.Метаданные().Имя;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_С_09_3_2");
	ОбластьТитульный = МакетУведомления.ПолучитьОбласть("Титульный");
	ОбластьПодвалТитульный = МакетУведомления.ПолучитьОбласть("ОбластьПодвалТитульный");
	ОбластьПустаяСтрока = МакетУведомления.ПолучитьОбласть("ОбластьПустаяСтрока");
	МассивДляПроверки = Новый Массив;
	МассивДляПроверки.Добавить(ОбластьПустаяСтрока);
	МассивДляПроверки.Добавить(ОбластьПодвалТитульный);
	
	ПараметрыМакета = ОбластьТитульный.Параметры;
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.Титульный[0];
	
	СтрокаВПараметрыМакета(Титульный.П_ИНН, "ИНН_", ПараметрыМакета, 10);
	СтрокаВПараметрыМакета(Титульный.П_КПП, "КПП_", ПараметрыМакета, 9);
	СтрокаВПараметрыМакета(Титульный.КОД_НО, "КОД_НО_", ПараметрыМакета, 4);
	СтрокаВПараметрыМакета(Титульный.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
	СтрокаВПараметрыМакета(Титульный.ОГРН, "ОГРН_", ПараметрыМакета, 13);
	ЧислоВПараметрыМакета(Титульный.КОЛИЧЕСТВО_ПОДРАЗДЕЛЕНИЙ, "Количество_Подразделений_", ПараметрыМакета, 4);
	ЧислоВПараметрыМакета(Титульный.КОЛИЧЕСТВО_СТРАНИЦ, "КоличествоСтраниц_", ПараметрыМакета, 4);
	ЧислоВПараметрыМакета(Титульный.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	
	ПараметрыМакета.ПризнакПодписанта = Титульный.ПРИЗНАК_НП_ПОДВАЛ;
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	СтрокаВПараметрыМакета(Титульный.ИНН_ПОДПИСАНТА, "ИНН_ПОДПИСАНТ_", ПараметрыМакета, 12);
	СтрокаВПараметрыМакета(Титульный.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	ПараметрыМакета.Email = Титульный.EMAIL_ПОДПИСАНТА;
	СтрокаВПараметрыМакета(Титульный.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	СтрокаВПараметрыМакета(Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокументПредставителя_", ПараметрыМакета, 40);
	ДатаВПараметрыМакета(Титульный.ДАТА_ПОДПИСИ, "ДатаПодписи_", ПараметрыМакета);
	
	ПечатнаяФорма.Вывести(ОбластьТитульный);
		
	Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
		ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
	КонецЦикла;
		
	ПечатнаяФорма.Вывести(ОбластьПодвалТитульный);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	ОбластьПодвалДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьПодвалДопЛист");
	МассивДляПроверки[1] = ОбластьПодвалДопЛист;
	
	Страница = 1;
	Для Каждого ДопЛист Из СтруктураПараметров.ДопЛисты Цикл 
		
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьДопЛист");
		ПараметрыМакета = ОбластьДопЛист.Параметры;
		Страница = Страница + 1;
		СтрокаВПараметрыМакета(ДопЛист.П_ИНН_Д, "ИНН_", ПараметрыМакета, 10);
		СтрокаВПараметрыМакета(ДопЛист.П_КПП_Д, "КПП_", ПараметрыМакета, 9);
		СтрокаВПараметрыМакета("0000", "СТР_", ПараметрыМакета, 4);
		ЧислоВПараметрыМакета(Страница, "СТР_", ПараметрыМакета, 4);
		СтрокаВПараметрыМакета(ДопЛист.КПП_ПОДРАЗДЕЛЕНИЯ, "КПППодр_", ПараметрыМакета, 9);
		СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_ПОДРАЗДЕЛЕНИЯ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
		СтрокаВПараметрыМакета(ДопЛист.ИНДЕКС, "Индекс_", ПараметрыМакета, 6);
		СтрокаВПараметрыМакета(ДопЛист.КОД_РЕГИОНА, "КодРегиона_", ПараметрыМакета, 2);
		СтрокаВПараметрыМакета(ДопЛист.РАЙОН, "Район_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.ГОРОД, "Город_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ, "НаселенныйПункт_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.УЛИЦА, "Улица_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.ДОМ, "Дом_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.КОРПУС, "Корпус_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.КВАРТИРА, "Квартира_", ПараметрыМакета, 8);
		ПараметрыМакета.ПризнакЗакрытия = ДопЛист.ПРИЗНАК_ЗАКРЫТИЯ;
		ДатаВПараметрыМакета(ДопЛист.ДАТА_ВНЕСЕНИЯ_ИЗМЕНЕНИЙ, "ДатаСоздания_", ПараметрыМакета);
		
		ПечатнаяФорма.Вывести(ОбластьДопЛист);
				
			Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
				ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
			КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьПодвалДопЛист);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ПечатьСразуФормаС09_3_2()
	ПечатнаяФорма = СформироватьМакетФормаС09_3_2();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_" + ВидУведомления.Метаданные().Имя;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакетФорма_1_6_Учет()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_"+ВидУведомления.Метаданные().Имя;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_1_6_Учет");
	ОбластьТитульный = МакетУведомления.ПолучитьОбласть("Титульный");
	ОбластьПодвалТитульный = МакетУведомления.ПолучитьОбласть("ОбластьПодвалТитульный");
	ОбластьПустаяСтрока = МакетУведомления.ПолучитьОбласть("ОбластьПустаяСтрока");
	МассивДляПроверки = Новый Массив;
	МассивДляПроверки.Добавить(ОбластьПустаяСтрока);
	МассивДляПроверки.Добавить(ОбластьПодвалТитульный);
	
	ПараметрыМакета = ОбластьТитульный.Параметры;
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.Титульный[0];
	
	СтрокаВПараметрыМакета(Титульный.П_ИНН, "ИНН_", ПараметрыМакета, 10);
	СтрокаВПараметрыМакета(Титульный.П_КПП, "КПП_", ПараметрыМакета, 9);
	СтрокаВПараметрыМакета(Титульный.КОД_НО, "КОД_НО_", ПараметрыМакета, 4);
	СтрокаВПараметрыМакета(Титульный.ВЫБРАННЫЙ_НО, "ВыбранныйНО_", ПараметрыМакета, 4);
	СтрокаВПараметрыМакета(Титульный.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
	СтрокаВПараметрыМакета(Титульный.ОГРН, "ОГРН_", ПараметрыМакета, 13);
	ЧислоВПараметрыМакета(Титульный.КОЛИЧЕСТВО_ПОДРАЗДЕЛЕНИЙ, "Количество_Подразделений_", ПараметрыМакета, 4);
	ЧислоВПараметрыМакета(Титульный.КОЛИЧЕСТВО_СТРАНИЦ, "КоличествоСтраниц_", ПараметрыМакета, 4);
	ЧислоВПараметрыМакета(Титульный.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	ПараметрыМакета.ПризнакДаНет = Титульный.ПРИЗНАК_СТР1;
	
	ПараметрыМакета.ПризнакПодписанта = Титульный.ПРИЗНАК_НП_ПОДВАЛ;
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	СтрокаВПараметрыМакета(Титульный.ИНН_ПОДПИСАНТА, "ИНН_ПОДПИСАНТ_", ПараметрыМакета, 12);
	СтрокаВПараметрыМакета(Титульный.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	ПараметрыМакета.Email = Титульный.EMAIL_ПОДПИСАНТА;
	СтрокаВПараметрыМакета(Титульный.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	СтрокаВПараметрыМакета(Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокументПредставителя_", ПараметрыМакета, 40);
	ДатаВПараметрыМакета(Титульный.ДАТА_ПОДПИСИ, "ДатаПодписи_", ПараметрыМакета);
	
	ПечатнаяФорма.Вывести(ОбластьТитульный);
		
		Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
	
	ПечатнаяФорма.Вывести(ОбластьПодвалТитульный);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	ОбластьПодвалДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьПодвалДопЛист");
	МассивДляПроверки[1] = ОбластьПодвалДопЛист;
	
	Страница = 1;
	Для Каждого ДопЛист Из СтруктураПараметров.ДопЛисты Цикл 
		
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьДопЛист");
		ПараметрыМакета = ОбластьДопЛист.Параметры;
		Страница = Страница + 1;
		СтрокаВПараметрыМакета(ДопЛист.П_ИНН_Д, "ИНН_", ПараметрыМакета, 10);
		СтрокаВПараметрыМакета(ДопЛист.П_КПП_Д, "КПП_", ПараметрыМакета, 9);
		СтрокаВПараметрыМакета("0000", "СТР_", ПараметрыМакета, 4);
		ЧислоВПараметрыМакета(Страница, "СТР_", ПараметрыМакета, 4);
		СтрокаВПараметрыМакета(ДопЛист.КПП_ПОДРАЗДЕЛЕНИЯ, "КПППодр_", ПараметрыМакета, 9);
		СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_ПОДРАЗДЕЛЕНИЯ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
		СтрокаВПараметрыМакета(ДопЛист.ИНДЕКС, "Индекс_", ПараметрыМакета, 6);
		СтрокаВПараметрыМакета(ДопЛист.КОД_РЕГИОНА, "КодРегиона_", ПараметрыМакета, 2);
		СтрокаВПараметрыМакета(ДопЛист.РАЙОН, "Район_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.ГОРОД, "Город_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ, "НаселенныйПункт_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.УЛИЦА, "Улица_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.ДОМ, "Дом_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.КОРПУС, "Корпус_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.КВАРТИРА, "Квартира_", ПараметрыМакета, 8);
		ДатаВПараметрыМакета(ДопЛист.ДАТА_ВНЕСЕНИЯ_ИЗМЕНЕНИЙ, "ДатаСоздания_", ПараметрыМакета);
		ПараметрыМакета.ВидПодразделения = ДопЛист.ВИД_ПОДРАЗДЕЛЕНИЯ;
		СтрокаВПараметрыМакета(ДопЛист.ГРН, "ГРН_", ПараметрыМакета, 13);
		
		ПечатнаяФорма.Вывести(ОбластьДопЛист);
				
			Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
				ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
			КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьПодвалДопЛист);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ПечатьСразуФорма_1_6_Учет()
	ПечатнаяФорма = СформироватьМакетФорма_1_6_Учет();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_" + ВидУведомления.Метаданные().Имя;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакетФорма_С_09_1_ФНС()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_"+ВидУведомления.Метаданные().Имя+"ФНС";
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_С_09_1");
	ОбластьТитульный = МакетУведомления.ПолучитьОбласть("Титульный");
	ОбластьПодвалТитульный = МакетУведомления.ПолучитьОбласть("ОбластьПодвалТитульный");
	ОбластьПустаяСтрока = МакетУведомления.ПолучитьОбласть("ОбластьПустаяСтрока");
	МассивДляПроверки = Новый Массив;
	МассивДляПроверки.Добавить(ОбластьПустаяСтрока);
	МассивДляПроверки.Добавить(ОбластьПодвалТитульный);
	
	ПараметрыМакета = ОбластьТитульный.Параметры;
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.Титульный[0];
	
	СтрокаВПараметрыМакета(Титульный.П_ИНН, "ИНН_", ПараметрыМакета, 12);
	СтрокаВПараметрыМакета(Титульный.П_КПП, "КПП_", ПараметрыМакета, 9);
	СтрокаВПараметрыМакета(Титульный.КОД_НО, "КОД_НО_", ПараметрыМакета, 4);
	СтрокаВПараметрыМакета(Титульный.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
	СтрокаВПараметрыМакета(Титульный.ОГРН, "ОГРН_", ПараметрыМакета, 13);
	СтрокаВПараметрыМакета(Титульный.ОГРНИП, "ОГРНИП_", ПараметрыМакета, 15);
	СтрокаВПараметрыМакета(Титульный.КИО, "КИО_", ПараметрыМакета, 5);
	ЧислоВПараметрыМакета(Титульный.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	ПараметрыМакета.КтоСообщает = Титульный.ПРИЗНАК_ПОДАЮЩЕГО;
	ПараметрыМакета.ОткрытиеЗакрытие = Титульный.ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ;
	ПараметрыМакета.ПризнакГде = Титульный.ПРИЗНАК_ГДЕ;
	
	ПараметрыМакета.ПризнакПодписанта = Титульный.ПРИЗНАК_НП_ПОДВАЛ;
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	СтрокаВПараметрыМакета(Титульный.ИНН_ПОДПИСАНТА, "ИНН_ПОДПИСАНТ_", ПараметрыМакета, 12);
	СтрокаВПараметрыМакета(Титульный.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	ПараметрыМакета.Email = Титульный.EMAIL_ПОДПИСАНТА;
	СтрокаВПараметрыМакета(Титульный.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	СтрокаВПараметрыМакета(Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокументПредставителя_", ПараметрыМакета, 40);
	ДатаВПараметрыМакета(Титульный.ДАТА_ПОДПИСИ, "ДатаПодписи_", ПараметрыМакета);
	
	ПечатнаяФорма.Вывести(ОбластьТитульный);
		
	Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
		ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
	КонецЦикла;
	
	ПечатнаяФорма.Вывести(ОбластьПодвалТитульный);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	ДопЛист = "";
	Если ДанныеУведомления.Получить().ЛистА.Количество() > 0 Тогда
		ДопЛист = "А";
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьЛистА");
		ПараметрыМакета = ОбластьДопЛист.Параметры;
		СтруктураПараметров = ДанныеУведомления.Получить();
		ДопЛист = СтруктураПараметров.ЛистА[0];
		
		СтрокаВПараметрыМакета(ДопЛист.П_ИНН_А, "ИНН_", ПараметрыМакета, 12);
		СтрокаВПараметрыМакета(ДопЛист.П_КПП_А, "КПП_", ПараметрыМакета, 9);
		ДатаВПараметрыМакета(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А, "ДатаОткрытия_", ПараметрыМакета);
		СтрокаВПараметрыМакета(ДопЛист.НОМЕР_СЧЕТА_А, "НомерСчета_", ПараметрыМакета, 20);
		СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_БАНКА_А, "ОрганизацияНазвание_", ПараметрыМакета, 160);
		СтрокаВПараметрыМакета(ДопЛист.ИНДЕКС_А, "Индекс_", ПараметрыМакета, 6);
		СтрокаВПараметрыМакета(ДопЛист.КОД_РЕГИОНА_А, "КодРегиона_", ПараметрыМакета, 2);
		СтрокаВПараметрыМакета(ДопЛист.РАЙОН_А, "Район_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.ГОРОД_А, "Город_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ_А, "НаселенныйПункт_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.УЛИЦА_А, "Улица_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.ДОМ_А, "Дом_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.КОРПУС_А, "Корпус_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.КВАРТИРА_А, "Квартира_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.ИНН_А, "ИННА_", ПараметрыМакета, 10);
		СтрокаВПараметрыМакета(ДопЛист.КПП_А, "КППА_", ПараметрыМакета, 9);
		СтрокаВПараметрыМакета(ДопЛист.БИК_А, "БИКА_", ПараметрыМакета, 9);
	ИначеЕсли ДанныеУведомления.Получить().ЛистБ.Количество() > 0 Тогда
		ДопЛист = "Б";
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьЛистБ");
		ПараметрыМакета = ОбластьДопЛист.Параметры;
		СтруктураПараметров = ДанныеУведомления.Получить();
		ДопЛист = СтруктураПараметров.ЛистБ[0];
		
		СтрокаВПараметрыМакета(ДопЛист.П_ИНН_Б, "ИНН_", ПараметрыМакета, 12);
		СтрокаВПараметрыМакета(ДопЛист.П_КПП_Б, "КПП_", ПараметрыМакета, 9);
		ДатаВПараметрыМакета(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_Б, "ДатаОткрытия_", ПараметрыМакета);
		СтрокаВПараметрыМакета(ДопЛист.НОМЕР_СЧЕТА_Б, "НомерСчетаФК_", ПараметрыМакета, 20);
		СтрокаВПараметрыМакета(ДопЛист.ИНН_Б, "ИННФК_", ПараметрыМакета, 12);
		СтрокаВПараметрыМакета(ДопЛист.КПП_Б, "КППФК_", ПараметрыМакета, 9);
		СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_БАНКА_Б, "ОрганизацияНазвание_", ПараметрыМакета, 160);
		СтрокаВПараметрыМакета(ДопЛист.НОМЕР_СЧЕТА_Б2, "НомерСчета_", ПараметрыМакета, 20);
		СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_БАНКА_Б2, "БанкНазвание_", ПараметрыМакета, 160);
		СтрокаВПараметрыМакета(ДопЛист.ИНДЕКС_Б, "Индекс_", ПараметрыМакета, 6);
		СтрокаВПараметрыМакета(ДопЛист.КОД_РЕГИОНА_Б, "КодРегиона_", ПараметрыМакета, 2);
		СтрокаВПараметрыМакета(ДопЛист.РАЙОН_Б, "Район_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.ГОРОД_Б, "Город_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ_Б, "НаселенныйПункт_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.УЛИЦА_Б, "Улица_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.ДОМ_Б, "Дом_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.КОРПУС_Б, "Корпус_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.КВАРТИРА_Б, "Квартира_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.ИНН_Б2, "ИННБ_", ПараметрыМакета, 10);
		СтрокаВПараметрыМакета(ДопЛист.КПП_Б2, "КППБ_", ПараметрыМакета, 9);
		СтрокаВПараметрыМакета(ДопЛист.БИК_Б2, "БИКБ_", ПараметрыМакета, 9);
	ИначеЕсли ДанныеУведомления.Получить().ЛистВ.Количество() > 0 Тогда
		ДопЛист = "В";
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьЛистВ");
		ПараметрыМакета = ОбластьДопЛист.Параметры;
		СтруктураПараметров = ДанныеУведомления.Получить();
		ДопЛист = СтруктураПараметров.ЛистВ[0];
		
		СтрокаВПараметрыМакета(ДопЛист.П_ИНН_В, "ИНН_", ПараметрыМакета, 12);
		СтрокаВПараметрыМакета(ДопЛист.П_КПП_В, "КПП_", ПараметрыМакета, 9);
		ДатаВПараметрыМакета(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_В, "ДатаОткрытия_", ПараметрыМакета);
		СтрокаВПараметрыМакета(ДопЛист.НОМЕР_КЭСП_В, "НомерКЭСП_", ПараметрыМакета, 20);
		СтрокаВПараметрыМакета(ДопЛист.ИНН_В, "ИННКЭСП_", ПараметрыМакета, 12);
		СтрокаВПараметрыМакета(ДопЛист.КПП_В, "КППКЭСП_", ПараметрыМакета, 9);
		СтрокаВПараметрыМакета(ДопЛист.БИК_В, "БИККЭСП_", ПараметрыМакета, 9);
		СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_БАНКА_В, "ОрганизацияНазвание_", ПараметрыМакета, 160);
		СтрокаВПараметрыМакета(ДопЛист.НОМЕР_СЧЕТА_В, "НомерСчета_", ПараметрыМакета, 20);
		СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_БАНКА_В2, "БанкНазвание_", ПараметрыМакета, 160);
		СтрокаВПараметрыМакета(ДопЛист.ИНДЕКС_В, "Индекс_", ПараметрыМакета, 6);
		СтрокаВПараметрыМакета(ДопЛист.КОД_РЕГИОНА_В, "КодРегиона_", ПараметрыМакета, 2);
		СтрокаВПараметрыМакета(ДопЛист.РАЙОН_В, "Район_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.ГОРОД_В, "Город_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ_В, "НаселенныйПункт_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.УЛИЦА_В, "Улица_", ПараметрыМакета, 34);
		СтрокаВПараметрыМакета(ДопЛист.ДОМ_В, "Дом_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.КОРПУС_В, "Корпус_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.КВАРТИРА_В, "Квартира_", ПараметрыМакета, 8);
		СтрокаВПараметрыМакета(ДопЛист.ИНН_В2, "ИННВ_", ПараметрыМакета, 10);
		СтрокаВПараметрыМакета(ДопЛист.КПП_В2, "КППВ_", ПараметрыМакета, 9);
		СтрокаВПараметрыМакета(ДопЛист.БИК_В2, "БИКВ_", ПараметрыМакета, 9);
	Иначе 
		Возврат ПечатнаяФорма;
	КонецЕсли;
	ОбластьПодвалДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьПодвалДопЛист");
	МассивДляПроверки[1] = ОбластьПодвалДопЛист;
	
	ПечатнаяФорма.Вывести(ОбластьДопЛист);
	
	Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
		ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
	КонецЦикла;
	
	ПечатнаяФорма.Вывести(ОбластьПодвалДопЛист);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакетФорма_С_09_1_ПФР()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_"+ВидУведомления.Метаданные().Имя+"ПФР";
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_С_09_1");
	Область = МакетУведомления.ПолучитьОбласть("ОбластьПФР");
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.Титульный[0];
	ДопЛист = СтруктураПараметров.ЛистА[0];
	ПараметрыОбласти = Область.Параметры;
	
	СтрокаСведений = "РегНомПФР,ИПРегНомПФР,КодОрганаПФР,НаимОрганаПФР,АдрЮР,ФИОРук,ФИОБух,АдрПрописки,ФИО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
	ПараметрыОбласти.НаименованиеОрганизации = Титульный.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ;
	ПараметрыОбласти.ИНН = Титульный.П_ИНН;
	ПараметрыОбласти.КПП = Титульный.П_КПП;
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда 
		ПараметрыОбласти.РегНомерПФР = СведенияОбОрганизации.РегНомПФР;
		Если Найти(СведенияОбОрганизации.АдрЮР, ",,,,,,") = 0 Тогда 
			ПараметрыОбласти.АдресОрганизации = СведенияОбОрганизации.АдрЮР;
		КонецЕсли;
		ПараметрыОбласти.РуководительФИО = СведенияОбОрганизации.ФИОРук;
		ПараметрыОбласти.ГлавБухФИО = СведенияОбОрганизации.ФИОБух;
	Иначе
		ПараметрыОбласти.РегНомерПФР = СведенияОбОрганизации.ИПРегНомПФР;
		Если Найти(СведенияОбОрганизации.АдрПрописки, ",,,,,,") = 0 Тогда 
			ПараметрыОбласти.АдресОрганизации = СведенияОбОрганизации.АдрПрописки;
		КонецЕсли;
		ПараметрыОбласти.РуководительФИО = СведенияОбОрганизации.ФИО;
	КонецЕсли;
	ПараметрыОбласти.НаимОрганаПФР = СведенияОбОрганизации.НаимОрганаПФР;
	Если Титульный.ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ = "1" Тогда 
		ПараметрыОбласти.ОткрытиеЗакрытие = "открытии";
		ПараметрыОбласти.ОткЗакр = " открытия ";
	ИначеЕсли Титульный.ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ = "2" Тогда 
		ПараметрыОбласти.ОткрытиеЗакрытие = "закрытии";
		ПараметрыОбласти.ОткЗакр = " закрытия ";
	КонецЕсли;
	ПараметрыОбласти.НомерСчета = ДопЛист.НОМЕР_СЧЕТА_А;
	ПараметрыОбласти.ИНН_банк = ДопЛист.ИНН_А;
	ПараметрыОбласти.КПП_банк = ДопЛист.КПП_А;
	ПараметрыОбласти.БИК = ДопЛист.БИК_А;
	ПараметрыОбласти.НаимБанк = ДопЛист.НАМИНОВАНИЕ_БАНКА_А;
	ПараметрыОбласти.АдресБанк = Документы.УведомлениеОСпецрежимахНалогообложения.АдресСтрокой(ДопЛист, "_А");
	Если ЗначениеЗаполнено(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А) Тогда 
		ПараметрыОбласти.ДатаОткрЗакр = Формат(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А, "ДЛФ=ДД");
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(Область);
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакетФорма_С_09_1_ФСС()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_"+ВидУведомления.Метаданные().Имя+"ФСС";
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_С_09_1");
	Область = МакетУведомления.ПолучитьОбласть("ОбластьФСС");
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.Титульный[0];
	ДопЛист = СтруктураПараметров.ЛистА[0];
	ПараметрыОбласти = Область.Параметры;
	
	ПараметрыОбласти.НаимОрг = Титульный.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ;
	ПараметрыОбласти.ИНН = Титульный.П_ИНН;
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда 
		СтрокаСведений = "ФИОРук,ДолжнРук,РегистрационныйНомерФСС,НаименованиеТерриториальногоОрганаФСС,ОКАТО,ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		
		ПараметрыОбласти.РегНо = СведенияОбОрганизации.РегистрационныйНомерФСС;
		ПараметрыОбласти.ДолжностьРук = СведенияОбОрганизации.ДолжнРук;
		ПараметрыОбласти.ФИОРук = СведенияОбОрганизации.ФИОРук;
		ПараметрыОбласти.НаимОргФСС = СведенияОбОрганизации.НаименованиеТерриториальногоОрганаФСС;
		ПараметрыОбласти.ОКАТО = ?(Год(ДатаПодписи) >= 2014, СведенияОбОрганизации.ОКТМО, СведенияОбОрганизации.ОКАТО);
	Иначе
		СтрокаСведений = "ФИО,РегистрационныйНомерФСС,НаименованиеТерриториальногоОрганаФСС,ОКАТО,ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		
		ПараметрыОбласти.ФИОИП = СведенияОбОрганизации.ФИО;
		ПараметрыОбласти.РегНо = СведенияОбОрганизации.РегистрационныйНомерФСС;
		ПараметрыОбласти.НаимОргФСС = СведенияОбОрганизации.НаименованиеТерриториальногоОрганаФСС;
		ПараметрыОбласти.ОКАТО = ?(Год(ДатаПодписи) >= 2014, СведенияОбОрганизации.ОКТМО, СведенияОбОрганизации.ОКАТО);
	КонецЕсли;
	ПараметрыОбласти.ПолноеНаимБанк = ДопЛист.НАМИНОВАНИЕ_БАНКА_А;
	
	Если Титульный.ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ = "1" Тогда 
		ПараметрыОбласти.ОткрытиеЗакрытие = "открытии";
	ИначеЕсли Титульный.ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ = "2" Тогда 
		ПараметрыОбласти.ОткрытиеЗакрытие = "закрытии";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А) Тогда 
		ПараметрыОбласти.ДатаОткр = Формат(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А, "ДЛФ=ДД");
	КонецЕсли;
	ПараметрыОбласти.НомерСчета = ДопЛист.НОМЕР_СЧЕТА_А;
	ПараметрыОбласти.ИННБанк = ДопЛист.ИНН_А;
	ПараметрыОбласти.КППБанк = ДопЛист.КПП_А;
	ПараметрыОбласти.БИКБанк = ДопЛист.БИК_А;
	
	ПечатнаяФорма.Вывести(Область);
	Возврат ПечатнаяФорма;
КонецФункции

Функция ПечатьСразуФорма_С_09_1(ПФР_ФСС = 0)
	
	Если ПФР_ФСС = 0 Тогда
		ПечатнаяФорма = СформироватьМакетФорма_С_09_1_ФНС();
	ИначеЕсли ПФР_ФСС = 1 Тогда
		ПечатнаяФорма = СформироватьМакетФорма_С_09_1_ПФР();
	ИначеЕсли ПФР_ФСС = 2 Тогда
		ПечатнаяФорма = СформироватьМакетФорма_С_09_1_ФСС();
	КонецЕсли;
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_" + ВидУведомления.Метаданные().Имя;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакетФормаС09_4()

	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ФормаС_09_4");
	ПараметрыМакета = МакетУведомления.Параметры;
	
	ДатаВПараметрыМакета(ДатаПодписи, "ДатаПодписи_", ПараметрыМакета);
	
	СтрокаВПараметрыМакета(ПодписантДокумент, "ДокументПредставителя_", ПараметрыМакета, 120);
	СтрокаВПараметрыМакета(ПодписантТелефон, "Телефон_", ПараметрыМакета, 20);
	СтрокаВПараметрыМакета(ПодписантФамилия,  "ОргПодписантФамилия_", ПараметрыМакета, 20);
	СтрокаВПараметрыМакета(ПодписантИмя, 	  "ОргПодписантИмя_", ПараметрыМакета, 20);
	СтрокаВПараметрыМакета(ПодписантОтчество, "ОргПодписантОтчество_", ПараметрыМакета, 20);
	ДанныеРегистрацияВИФНС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВИФНС, "Код");
	СтрокаВПараметрыМакета(ДанныеРегистрацияВИФНС.Код, "КОД_НО_", ПараметрыМакета, 4);
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "КППЮЛ");
	СтрокаВПараметрыМакета(СведенияОбОрганизации.КППЮЛ, "КПП_", ПараметрыМакета, 9);
	
	СведенияОбОрг = ПолучитьСведенияОбОрганизации();
	Если СведенияОбОрг.ЭтоЮрЛицо Тогда
		СтрокаВПараметрыМакета(СведенияОбОрг.ИНН, "ИНН_", ПараметрыМакета, 12);
		СтрокаВПараметрыМакета(СведенияОбОрг.НаименованиеПолное, "ОрганизацияНазвание_", ПараметрыМакета, 160);
	Иначе
		СтрокаВПараметрыМакета(СведенияОбОрг.ИНН, "ИНН_", ПараметрыМакета, 12);
		СтрокаВПараметрыМакета(СведенияОбОрг.ФИО, "ОрганизацияНазвание_", ПараметрыМакета, 160);
	КонецЕсли;
	
	СтруктураПараметров = ДанныеУведомления.Получить();
	ЗаполнитьЗначенияСвойств(ПараметрыМакета, СтруктураПараметров);
	ДатаВПараметрыМакета(СтруктураПараметров.ДАТА_ПРИНЯТИЯ_РЕШЕНИЯ, "ДАТА_ПРИНЯТИЯ_РЕШЕНИЯ_", ПараметрыМакета);
	ПараметрыМакета.EMAIL_ПОДПИСАНТА = СтруктураПараметров.EMAIL_ПОДПИСАНТА;
	СтрокаВПараметрыМакета(СтруктураПараметров.ОГРН, "ОГРН_", ПараметрыМакета, 15);
	СтрокаВПараметрыМакета("000", "ПриложеноЛистов_", ПараметрыМакета, 3);
	ЧислоВПараметрыМакета(СтруктураПараметров.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	Если СтруктураПараметров.Свойство("ИНН_ПОДПИСАНТА") Тогда 
		СтрокаВПараметрыМакета(СтруктураПараметров.ИНН_ПОДПИСАНТА, "ИНН_ПОДПИСАНТА_", ПараметрыМакета, 12);
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(МакетУведомления);
	
	Возврат ПечатнаяФорма;

КонецФункции

Функция ПечатьСразуФормаС09_4()
	ПечатнаяФорма = СформироватьМакетФормаС09_4();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_" + ВидУведомления.Метаданные().Имя;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакетФорма_ЕНВД_1()
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_ФормаЕНВД1";
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ФормаЕНВД1");
	ОбластьТитульный = МакетУведомления.ПолучитьОбласть("Титульный");
	ОбластьОграничители = МакетУведомления.ПолучитьОбласть("Ограничители");
	ОбластьПустаяСтрока = МакетУведомления.ПолучитьОбласть("ПустаяСтрока");
	МассивДляПроверки = Новый Массив;
	МассивДляПроверки.Добавить(ОбластьПустаяСтрока);
	МассивДляПроверки.Добавить(ОбластьОграничители);
	
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.ТитульныйЛист[0];
	
	СтрокаВОбластиМакета(Титульный.П_ИНН, "ИНН1_", ОбластьТитульный.Области, 10);
	СтрокаВОбластиМакета(Титульный.П_КПП, "КПП1_", ОбластьТитульный.Области, 9);
	СтрокаВОбластиМакета(Титульный.КОД_НО, "КОД_НО_", ОбластьТитульный.Области, 4);
	СтрокаВОбластиМакета(Титульный.КОД_РЕЗИДЕНТА, "КОД_РЕЗИДЕНТА_", ОбластьТитульный.Области, 1);
	
	СтрокаВОбластиМакета(Титульный.ОРГАНИЗАЦИЯ, "НаимОрг_", ОбластьТитульный.Области, 160);
	СтрокаВОбластиМакета(Титульный.П_ОГРН, "ОГРН_", ОбластьТитульный.Области, 13);
	ДатаВОбластиМакета(Титульный.ДАТА_ПРИМЕНЕНЕНИ_ЕНВД, "ДАТА_ПРИМЕНЕНЕНИ_ЕНВД_", ОбластьТитульный.Области);	
	
	СтрокаВОбластиМакета("000", "ПРИЛОЖЕНО_СТРАНИЦ_", ОбластьТитульный.Области, 3);
	СтрокаВОбластиМакета("000", "ПРИЛОЖЕНО_ЛИСТОВ_", ОбластьТитульный.Области, 3);
	ЧислоВОбластиМакета(Титульный.ПРИЛОЖЕНО_СТРАНИЦ, "ПРИЛОЖЕНО_СТРАНИЦ_", ОбластьТитульный.Области, 3);
	ЧислоВОбластиМакета(Титульный.ПРИЛОЖЕНО_ЛИСТОВ, "ПРИЛОЖЕНО_ЛИСТОВ_", ОбластьТитульный.Области, 3);
	
	СтрокаВОбластиМакета(Титульный.ПРИЗНАК_НП_ПОДВАЛ, "ПРИЗНАК_НП_ПОДВАЛ_", ОбластьТитульный.Области, 1);
	СтрокаВОбластиМакета(ПодписантФамилия, "ОргПодписантФамилия_", ОбластьТитульный.Области, 20);
	СтрокаВОбластиМакета(ПодписантИмя, "ОргПодписантИмя_", ОбластьТитульный.Области, 20);
	СтрокаВОбластиМакета(ПодписантОтчество, "ОргПодписантОтчество_", ОбластьТитульный.Области, 20);
	
	СтрокаВОбластиМакета(Титульный.ИНН_ПРЕДСТАВИТЕЛЯ, "ИНН_ПРЕДСТАВИТЕЛЯ_", ОбластьТитульный.Области, 12);
	СтрокаВОбластиМакета(Титульный.ТЕЛЕФОН, "Телефон_", ОбластьТитульный.Области, 20);
	СтрокаВОбластиМакета(Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокУпПред_", ОбластьТитульный.Области, 40);
	ДатаВОбластиМакета(Титульный.ДАТА_ПОДПИСИ, "ДатаПодписи_", ОбластьТитульный.Области);
	
	ПечатнаяФорма.Вывести(ОбластьТитульный);
	//Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
	//	ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
	//КонецЦикла;
	ПечатнаяФорма.Вывести(ОбластьОграничители);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	ОбластьПодвалДопЛист = МакетУведомления.ПолучитьОбласть("ПустаяСтрока");
	МассивДляПроверки[1] = ОбластьПодвалДопЛист;
	
	Страница = 1;
	Для Каждого ДопЛист Из СтруктураПараметров.Лист2 Цикл 
		
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("Приложение");
		ОбластиМакета = ОбластьДопЛист.Области;
		Страница = Страница + 1;
		СтрокаВОбластиМакета(ДопЛист.П_ИНН1, "ИНН2_", ОбластиМакета, 10);
		СтрокаВОбластиМакета(ДопЛист.П_КПП1, "КПП2_", ОбластиМакета, 9);
		СтрокаВОбластиМакета("000", "НомСтр1_", ОбластиМакета, 3);
		ЧислоВОбластиМакета(Страница, "НомСтр1_", ОбластиМакета, 3);
		
		Для Инд = 1 по 3 Цикл
			СтрокаВОбластиМакета(ДопЛист["КОД_ВИДА_ДЕЯТЕЛЬНОСТИ" + Инд], "КОД_ВИДА_ДЕЯТЕЛЬНОСТИ" + Инд + "_", ОбластиМакета, 2); 
			СтрокаВОбластиМакета(ДопЛист["ИНДЕКС" + Инд], "ИНДЕКС" + Инд + "_", ОбластиМакета, 6); 
			СтрокаВОбластиМакета(ДопЛист["РЕГИОН" + Инд], "РЕГИОН" + Инд + "_", ОбластиМакета, 2); 
			СтрокаВОбластиМакета(ДопЛист["РАЙОН" + Инд], "РАЙОН" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["ГОРОД" + Инд], "ГОРОД" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["НаселенныйПункт" + Инд], "НаселенныйПункт" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["Улица" + Инд], "Улица" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["Дом" + Инд], "Дом" + Инд + "_", ОбластиМакета, 8); 
			СтрокаВОбластиМакета(ДопЛист["Корпус" + Инд], "Корпус" + Инд + "_", ОбластиМакета, 8); 
			СтрокаВОбластиМакета(ДопЛист["Квартира" + Инд], "Квартира" + Инд + "_", ОбластиМакета, 8); 
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьДопЛист);
		
		//Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
		//	ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		//КонецЦикла;
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ПечатьСразуФорма_ЕНВД_1()
	ПечатнаяФорма = СформироватьМакетФорма_ЕНВД_1();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_ФормаЕНВД1";
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакетФорма_ЕНВД_2()
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_ФормаЕНВД2";
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ФормаЕНВД2");
	ОбластьТитульный = МакетУведомления.ПолучитьОбласть("Титульный");
	ОбластьОграничители = МакетУведомления.ПолучитьОбласть("Ограничители");
	ОбластьПустаяСтрока = МакетУведомления.ПолучитьОбласть("ПустаяСтрока");
	МассивДляПроверки = Новый Массив;
	МассивДляПроверки.Добавить(ОбластьПустаяСтрока);
	МассивДляПроверки.Добавить(ОбластьОграничители);
	
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.ТитульныйЛист[0];
	
	СтрокаВОбластиМакета(Титульный.П_ИНН, "ИНН1_", ОбластьТитульный.Области, 12);
	
	СтрокаВОбластиМакета(Титульный.КОД_НО, "КОД_НО_", ОбластьТитульный.Области, 4);
	
	СведИП = ПолучитьСведенияОбОрганизации();
	СтрокаВОбластиМакета(СведИП.Фамилия, "Фамилия_", ОбластьТитульный.Области, 40);
	СтрокаВОбластиМакета(СведИП.Имя, "Имя_", ОбластьТитульный.Области, 40);
	СтрокаВОбластиМакета(СведИП.Отчество, "Отчество_", ОбластьТитульный.Области, 40);
	
	СтрокаВОбластиМакета(Титульный.П_ОГРНИП, "ОГРН_", ОбластьТитульный.Области, 15);
	ДатаВОбластиМакета(Титульный.ДАТА_ПРИМЕНЕНЕНИ_ЕНВД, "ДАТА_ПРИМЕНЕНЕНИ_ЕНВД_", ОбластьТитульный.Области);	
	
	СтрокаВОбластиМакета("000", "ПРИЛОЖЕНО_СТРАНИЦ_", ОбластьТитульный.Области, 3);
	СтрокаВОбластиМакета("000", "ПРИЛОЖЕНО_ЛИСТОВ_", ОбластьТитульный.Области, 3);
	ЧислоВОбластиМакета(Титульный.ПРИЛОЖЕНО_СТРАНИЦ, "ПРИЛОЖЕНО_СТРАНИЦ_", ОбластьТитульный.Области, 3);
	ЧислоВОбластиМакета(Титульный.ПРИЛОЖЕНО_ЛИСТОВ, "ПРИЛОЖЕНО_ЛИСТОВ_", ОбластьТитульный.Области, 3);
	
	СтрокаВОбластиМакета(Титульный.ПРИЗНАК_НП_ПОДВАЛ, "ПРИЗНАК_НП_ПОДВАЛ_", ОбластьТитульный.Области, 1);
	СтрокаВОбластиМакета(ПодписантФамилия, "ОргПодписантФамилия_", ОбластьТитульный.Области, 20);
	СтрокаВОбластиМакета(ПодписантИмя, "ОргПодписантИмя_", ОбластьТитульный.Области, 20);
	СтрокаВОбластиМакета(ПодписантОтчество, "ОргПодписантОтчество_", ОбластьТитульный.Области, 20);
	
	СтрокаВОбластиМакета(Титульный.ИНН_ПРЕДСТАВИТЕЛЯ, "ИНН_ПРЕДСТАВИТЕЛЯ_", ОбластьТитульный.Области, 12);
	СтрокаВОбластиМакета(Титульный.ТЕЛЕФОН, "Телефон_", ОбластьТитульный.Области, 20);
	СтрокаВОбластиМакета(Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокУпПред_", ОбластьТитульный.Области, 40);
	ДатаВОбластиМакета(Титульный.ДАТА_ПОДПИСИ, "ДатаПодписи_", ОбластьТитульный.Области);
	
	ПечатнаяФорма.Вывести(ОбластьТитульный);
	
	//Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
	//	ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
	//КонецЦикла;
	ПечатнаяФорма.Вывести(ОбластьОграничители);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	Страница = 1;
	Для Каждого ДопЛист Из СтруктураПараметров.Лист2 Цикл 
		
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("Приложение");
		ОбластиМакета = ОбластьДопЛист.Области;
		Страница = Страница + 1;
		СтрокаВОбластиМакета(ДопЛист.П_ИНН1, "ИНН2_", ОбластиМакета, 12);
		
		СтрокаВОбластиМакета("000", "НомСтр1_", ОбластиМакета, 3);
		ЧислоВОбластиМакета(Страница, "НомСтр1_", ОбластиМакета, 3);
		
		Для Инд = 1 по 3 Цикл
			СтрокаВОбластиМакета(ДопЛист["КОД_ВИДА_ДЕЯТЕЛЬНОСТИ" + Инд], "КОД_ВИДА_ДЕЯТЕЛЬНОСТИ" + Инд + "_", ОбластиМакета, 2); 
			СтрокаВОбластиМакета(ДопЛист["ИНДЕКС" + Инд], "ИНДЕКС" + Инд + "_", ОбластиМакета, 6); 
			СтрокаВОбластиМакета(ДопЛист["РЕГИОН" + Инд], "РЕГИОН" + Инд + "_", ОбластиМакета, 2); 
			СтрокаВОбластиМакета(ДопЛист["РАЙОН" + Инд], "РАЙОН" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["ГОРОД" + Инд], "ГОРОД" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["НаселенныйПункт" + Инд], "НаселенныйПункт" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["Улица" + Инд], "Улица" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["Дом" + Инд], "Дом" + Инд + "_", ОбластиМакета, 8); 
			СтрокаВОбластиМакета(ДопЛист["Корпус" + Инд], "Корпус" + Инд + "_", ОбластиМакета, 8); 
			СтрокаВОбластиМакета(ДопЛист["Квартира" + Инд], "Квартира" + Инд + "_", ОбластиМакета, 8); 
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьДопЛист);
				
		//Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
		//	ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		//КонецЦикла;
		//	
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ПечатьСразуФорма_ЕНВД_2()
	ПечатнаяФорма = СформироватьМакетФорма_ЕНВД_2();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_ФормаЕНВД2";
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакетФорма_ЕНВД_3()
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_ФормаЕНВД3";
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ФормаЕНВД3");
	ОбластьТитульный = МакетУведомления.ПолучитьОбласть("Титульный");
	ОбластьОграничители = МакетУведомления.ПолучитьОбласть("Ограничители");
	ОбластьПустаяСтрока = МакетУведомления.ПолучитьОбласть("ПустаяСтрока");
	МассивДляПроверки = Новый Массив;
	МассивДляПроверки.Добавить(ОбластьПустаяСтрока);
	МассивДляПроверки.Добавить(ОбластьОграничители);
	
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.ТитульныйЛист[0];
	
	СтрокаВОбластиМакета(Титульный.П_ИНН, "ИНН1_", ОбластьТитульный.Области, 10);
	СтрокаВОбластиМакета(Титульный.П_КПП, "КПП1_", ОбластьТитульный.Области, 9);
	СтрокаВОбластиМакета(Титульный.КОД_НО, "КОД_НО_", ОбластьТитульный.Области, 4);
	СтрокаВОбластиМакета(Титульный.КОД_ПРИЧИНЫ, "КОД_ПРИЧИНЫ_", ОбластьТитульный.Области, 1);
	СтрокаВОбластиМакета(Титульный.КОД_РЕЗИДЕНТА, "КОД_РЕЗИДЕНТА_", ОбластьТитульный.Области, 1);
	
	СтрокаВОбластиМакета(Титульный.ОРГАНИЗАЦИЯ, "НаимОрг_", ОбластьТитульный.Области, 160);
	СтрокаВОбластиМакета(Титульный.П_ОГРН, "ОГРН_", ОбластьТитульный.Области, 13);
	ДатаВОбластиМакета(Титульный.ДАТА_ПРЕКРАЩЕНИЯ_ЕНВД, "ДАТА_ПРИМЕНЕНЕНИ_ЕНВД_", ОбластьТитульный.Области);	
	
	СтрокаВОбластиМакета("000", "ПРИЛОЖЕНО_СТРАНИЦ_", ОбластьТитульный.Области, 3);
	СтрокаВОбластиМакета("000", "ПРИЛОЖЕНО_ЛИСТОВ_", ОбластьТитульный.Области, 3);
	ЧислоВОбластиМакета(Титульный.ПРИЛОЖЕНО_СТРАНИЦ, "ПРИЛОЖЕНО_СТРАНИЦ_", ОбластьТитульный.Области, 3);
	ЧислоВОбластиМакета(Титульный.ПРИЛОЖЕНО_ЛИСТОВ, "ПРИЛОЖЕНО_ЛИСТОВ_", ОбластьТитульный.Области, 3);
	
	СтрокаВОбластиМакета(Титульный.ПРИЗНАК_НП_ПОДВАЛ, "ПРИЗНАК_НП_ПОДВАЛ_", ОбластьТитульный.Области, 1);
	СтрокаВОбластиМакета(ПодписантФамилия, "ОргПодписантФамилия_", ОбластьТитульный.Области, 20);
	СтрокаВОбластиМакета(ПодписантИмя, "ОргПодписантИмя_", ОбластьТитульный.Области, 20);
	СтрокаВОбластиМакета(ПодписантОтчество, "ОргПодписантОтчество_", ОбластьТитульный.Области, 20);
	
	СтрокаВОбластиМакета(Титульный.ИНН_ПРЕДСТАВИТЕЛЯ, "ИНН_ПРЕДСТАВИТЕЛЯ_", ОбластьТитульный.Области, 12);
	СтрокаВОбластиМакета(Титульный.ТЕЛЕФОН, "Телефон_", ОбластьТитульный.Области, 20);
	СтрокаВОбластиМакета(Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокУпПред_", ОбластьТитульный.Области, 40);
	ДатаВОбластиМакета(Титульный.ДАТА_ПОДПИСИ, "ДатаПодписи_", ОбластьТитульный.Области);
	
	ПечатнаяФорма.Вывести(ОбластьТитульный);
		
	//Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
	//	ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
	//КонецЦикла;
		
	ПечатнаяФорма.Вывести(ОбластьОграничители);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	Страница = 1;
	Для Каждого ДопЛист Из СтруктураПараметров.Лист2 Цикл 
		
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("Приложение");
		ОбластиМакета = ОбластьДопЛист.Области;
		Страница = Страница + 1;
		СтрокаВОбластиМакета(ДопЛист.П_ИНН1, "ИНН2_", ОбластиМакета, 10);
		СтрокаВОбластиМакета(ДопЛист.П_КПП1, "КПП2_", ОбластиМакета, 9);
		СтрокаВОбластиМакета("000", "НомСтр1_", ОбластиМакета, 3);
		ЧислоВОбластиМакета(Страница, "НомСтр1_", ОбластиМакета, 3);
		
		Для Инд = 1 по 3 Цикл
			СтрокаВОбластиМакета(ДопЛист["КОД_ВИДА_ДЕЯТЕЛЬНОСТИ" + Инд], "КОД_ВИДА_ДЕЯТЕЛЬНОСТИ" + Инд + "_", ОбластиМакета, 2); 
			СтрокаВОбластиМакета(ДопЛист["ИНДЕКС" + Инд], "ИНДЕКС" + Инд + "_", ОбластиМакета, 6); 
			СтрокаВОбластиМакета(ДопЛист["РЕГИОН" + Инд], "РЕГИОН" + Инд + "_", ОбластиМакета, 2); 
			СтрокаВОбластиМакета(ДопЛист["РАЙОН" + Инд], "РАЙОН" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["ГОРОД" + Инд], "ГОРОД" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["НаселенныйПункт" + Инд], "НаселенныйПункт" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["Улица" + Инд], "Улица" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["Дом" + Инд], "Дом" + Инд + "_", ОбластиМакета, 8); 
			СтрокаВОбластиМакета(ДопЛист["Корпус" + Инд], "Корпус" + Инд + "_", ОбластиМакета, 8); 
			СтрокаВОбластиМакета(ДопЛист["Квартира" + Инд], "Квартира" + Инд + "_", ОбластиМакета, 8); 
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьДопЛист);
				
			//Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
			//	ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
			//КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ПечатьСразуФорма_ЕНВД_3()
	ПечатнаяФорма = СформироватьМакетФорма_ЕНВД_3();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_ФормаЕНВД3";
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакетФорма_ЕНВД_4()
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_ФормаЕНВД4";
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ФормаЕНВД4");
	ОбластьТитульный = МакетУведомления.ПолучитьОбласть("Титульный");
	ОбластьОграничители = МакетУведомления.ПолучитьОбласть("Ограничители");
	ОбластьПустаяСтрока = МакетУведомления.ПолучитьОбласть("ПустаяСтрока");
	МассивДляПроверки = Новый Массив;
	МассивДляПроверки.Добавить(ОбластьПустаяСтрока);
	МассивДляПроверки.Добавить(ОбластьОграничители);
	
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.ТитульныйЛист[0];
	
	СтрокаВОбластиМакета(Титульный.П_ИНН, "ИНН1_", ОбластьТитульный.Области, 12);
	
	СтрокаВОбластиМакета(Титульный.КОД_НО, "КОД_НО_", ОбластьТитульный.Области, 4);
	СтрокаВОбластиМакета(Титульный.КОД_ПРИЧИНЫ, "КОД_ПРИЧИНЫ_", ОбластьТитульный.Области, 1);
	
	СведИП = ПолучитьСведенияОбОрганизации();
	СтрокаВОбластиМакета(СведИП.Фамилия, "Фамилия_", ОбластьТитульный.Области, 40);
	СтрокаВОбластиМакета(СведИП.Имя, "Имя_", ОбластьТитульный.Области, 40);
	СтрокаВОбластиМакета(СведИП.Отчество, "Отчество_", ОбластьТитульный.Области, 40);
	
	СтрокаВОбластиМакета(Титульный.П_ОГРНИП, "ОГРН_", ОбластьТитульный.Области, 15);
	ДатаВОбластиМакета(Титульный.ДАТА_ПРЕКРАЩЕНИЯ_ЕНВД, "ДАТА_ПРИМЕНЕНЕНИ_ЕНВД_", ОбластьТитульный.Области);	
	
	СтрокаВОбластиМакета("000", "ПРИЛОЖЕНО_СТРАНИЦ_", ОбластьТитульный.Области, 3);
	СтрокаВОбластиМакета("000", "ПРИЛОЖЕНО_ЛИСТОВ_", ОбластьТитульный.Области, 3);
	ЧислоВОбластиМакета(Титульный.ПРИЛОЖЕНО_СТРАНИЦ, "ПРИЛОЖЕНО_СТРАНИЦ_", ОбластьТитульный.Области, 3);
	ЧислоВОбластиМакета(Титульный.ПРИЛОЖЕНО_ЛИСТОВ, "ПРИЛОЖЕНО_ЛИСТОВ_", ОбластьТитульный.Области, 3);
	
	СтрокаВОбластиМакета(Титульный.ПРИЗНАК_НП_ПОДВАЛ, "ПРИЗНАК_НП_ПОДВАЛ_", ОбластьТитульный.Области, 1);
	СтрокаВОбластиМакета(ПодписантФамилия, "ОргПодписантФамилия_", ОбластьТитульный.Области, 20);
	СтрокаВОбластиМакета(ПодписантИмя, "ОргПодписантИмя_", ОбластьТитульный.Области, 20);
	СтрокаВОбластиМакета(ПодписантОтчество, "ОргПодписантОтчество_", ОбластьТитульный.Области, 20);
	
	СтрокаВОбластиМакета(Титульный.ИНН_ПРЕДСТАВИТЕЛЯ, "ИНН_ПРЕДСТАВИТЕЛЯ_", ОбластьТитульный.Области, 12);
	СтрокаВОбластиМакета(Титульный.ТЕЛЕФОН, "Телефон_", ОбластьТитульный.Области, 20);
	СтрокаВОбластиМакета(Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокУпПред_", ОбластьТитульный.Области, 40);
	ДатаВОбластиМакета(Титульный.ДАТА_ПОДПИСИ, "ДатаПодписи_", ОбластьТитульный.Области);
	
	ПечатнаяФорма.Вывести(ОбластьТитульный);
	
	//Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
	//	ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
	//КонецЦикла;
		
	ПечатнаяФорма.Вывести(ОбластьОграничители);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	Страница = 1;
	Для Каждого ДопЛист Из СтруктураПараметров.Лист2 Цикл 
		
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("Приложение");
		ОбластиМакета = ОбластьДопЛист.Области;
		Страница = Страница + 1;
		СтрокаВОбластиМакета(ДопЛист.П_ИНН1, "ИНН2_", ОбластиМакета, 12);
		
		СтрокаВОбластиМакета("000", "НомСтр1_", ОбластиМакета, 3);
		ЧислоВОбластиМакета(Страница, "НомСтр1_", ОбластиМакета, 3);
		
		Для Инд = 1 по 3 Цикл
			СтрокаВОбластиМакета(ДопЛист["КОД_ВИДА_ДЕЯТЕЛЬНОСТИ" + Инд], "КОД_ВИДА_ДЕЯТЕЛЬНОСТИ" + Инд + "_", ОбластиМакета, 2); 
			СтрокаВОбластиМакета(ДопЛист["ИНДЕКС" + Инд], "ИНДЕКС" + Инд + "_", ОбластиМакета, 6); 
			СтрокаВОбластиМакета(ДопЛист["РЕГИОН" + Инд], "РЕГИОН" + Инд + "_", ОбластиМакета, 2); 
			СтрокаВОбластиМакета(ДопЛист["РАЙОН" + Инд], "РАЙОН" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["ГОРОД" + Инд], "ГОРОД" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["НаселенныйПункт" + Инд], "НаселенныйПункт" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["Улица" + Инд], "Улица" + Инд + "_", ОбластиМакета, 34); 
			СтрокаВОбластиМакета(ДопЛист["Дом" + Инд], "Дом" + Инд + "_", ОбластиМакета, 8); 
			СтрокаВОбластиМакета(ДопЛист["Корпус" + Инд], "Корпус" + Инд + "_", ОбластиМакета, 8); 
			СтрокаВОбластиМакета(ДопЛист["Квартира" + Инд], "Квартира" + Инд + "_", ОбластиМакета, 8); 
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьДопЛист);
				
			//Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
			//	ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
			//КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ПечатьСразуФорма_ЕНВД_4()
	ПечатнаяФорма = СформироватьМакетФорма_ЕНВД_4();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_ФормаЕНВД4";
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
КонецФункции

//Для сообщения об открытии/закрытии счета
//0=ФНС
//1=ПФР
//2=ФСС
Функция ПечатьСразу(ПФР_ФСС = 0) Экспорт 
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН Тогда 
		Возврат ПечатьСразуПереходНаУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбОтказеОтУСН Тогда 
		Возврат ПечатьСразуОтказОтУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбИзмененииОбъектаНалогообложенияПоУСН Тогда 
		Возврат ПечатьСразуИзменениеОбъектаУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПрекращенииДеятельностиПоУСН Тогда 
		Возврат ПечатьСразуПрекращениеДеятельностиУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбУтратеПраваНаУСН Тогда 
		Возврат ПечатьСразуУтратаПраваНаУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОбУтратеПраваНаПатент Тогда 
		Возврат ПечатьСразуУтратаПраваНаПатент();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме Тогда 
		Возврат ПечатьСразуПрекращениеДеятельностиПатент();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатента Тогда 
		Возврат ПечатьСразуПолучениеПатента();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма Тогда 
		Возврат ПечатьСразуПолучениеПатентаРекомендованнаяФорма();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1 Тогда
		Возврат ПечатьСразуФорма_ЕНВД_1();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2 Тогда
		Возврат ПечатьСразуФорма_ЕНВД_2();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3 Тогда
		Возврат ПечатьСразуФорма_ЕНВД_3();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4 Тогда
		Возврат ПечатьСразуФорма_ЕНВД_4();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_2 Тогда 
		Возврат ПечатьСразуФормаС09_2();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_1 Тогда 
		Возврат ПечатьСразуФормаС09_3_1();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_2 Тогда 
		Возврат ПечатьСразуФормаС09_3_2();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.Форма_1_6_Учет Тогда 
		Возврат ПечатьСразуФорма_1_6_Учет();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1 Тогда
		Возврат ПечатьСразуФорма_С_09_1(ПФР_ФСС);
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_4 Тогда 
		Возврат ПечатьСразуФормаС09_4();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Для сообщения об открытии/закрытии счета
//0=ФНС
//1=ПФР
//2=ФСС
Функция СформироватьМакет(ПФР_ФСС = 0) Экспорт 
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН Тогда 
		Возврат СформироватьМакетПереходНаУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбОтказеОтУСН Тогда 
		Возврат СформироватьМакетОтказОтУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбИзмененииОбъектаНалогообложенияПоУСН Тогда 
		Возврат СформироватьМакетИзменениеОбъектаУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПрекращенииДеятельностиПоУСН Тогда 
		Возврат СформироватьМакетПрекращениеДеятельностиУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбУтратеПраваНаУСН Тогда 
		Возврат СформироватьМакетУтратаПраваНаУСН();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОбУтратеПраваНаПатент Тогда 
		Возврат СформироватьМакетУтратаПраваНаПатент();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме Тогда 
		Возврат СформироватьМакетПрекращениеДеятельностиПатент();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатента Тогда 
		Возврат СформироватьМакетПолучениеПатента();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма Тогда 
		Возврат СформироватьМакетПолучениеПатентаРекомендованнаяФорма();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1 Тогда
		Возврат СформироватьМакетФорма_ЕНВД_1();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2 Тогда
		Возврат СформироватьМакетФорма_ЕНВД_2();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3 Тогда
		Возврат СформироватьМакетФорма_ЕНВД_3();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4 Тогда
		Возврат СформироватьМакетФорма_ЕНВД_4();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_2 Тогда
		Возврат СформироватьМакетФормаС09_2();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_4 Тогда
		Возврат СформироватьМакетФормаС09_4();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_1 Тогда
		Возврат СформироватьМакетФормаС09_3_1();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_2 Тогда
		Возврат СформироватьМакетФормаС09_3_2();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.Форма_1_6_Учет Тогда
		Возврат СформироватьМакетФорма_1_6_Учет();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1 Тогда
		Если ПФР_ФСС = 0 Тогда
			Возврат СформироватьМакетФорма_С_09_1_ФНС();
		ИначеЕсли ПФР_ФСС = 1 Тогда
			Возврат СформироватьМакетФорма_С_09_1_ПФР();
		ИначеЕсли ПФР_ФСС = 2 Тогда
			Возврат СформироватьМакетФорма_С_09_1_ФСС();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАПОЛНЕНИЯ МАКЕТОВ

Процедура СтрокаВПараметрыМакета(Строка, ПрефиксПараметра, ПараметрыМакета, ДлинаОбластиМакета)
	
	ДлинаСтроки = Мин(СтрДлина(Строка), ДлинаОбластиМакета);
	Индекс = 1;
	
	Пока Индекс <= ДлинаСтроки Цикл 
		ИмяПараметра = ПрефиксПараметра + Индекс;
		ПараметрыМакета[ИмяПараметра] = Сред(Строка, Индекс, 1);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЧислоВПараметрыМакета(Число, ПрефиксПараметра, ПараметрыМакета, КоличествоЗнаков, ВыводитьНоль = Ложь)
	
	Если Число = 0 И ВыводитьНоль Тогда
		ПараметрыМакета[ПрефиксПараметра+КоличествоЗнаков] = "0";
		Возврат;
	КонецЕсли;
	
	СтрокаЧисла = Формат(Число, "ЧГ=0");
	ДлинаСтроки = СтрДлина(СтрокаЧисла);
	
	Если ДлинаСтроки > КоличествоЗнаков Тогда 
		Позиция = КоличествоЗнаков;
		Пока Позиция > 0 Цикл
			ИмяПараметра = ПрефиксПараметра + Позиция;
			ПараметрыМакета[ИмяПараметра] = "#";
			Позиция = Позиция - 1;
		КонецЦикла;
	Иначе
		Позиция = ДлинаСтроки;
		Разница = КоличествоЗнаков - ДлинаСтроки;
		Пока Позиция > 0 Цикл
			ИмяПараметра = ПрефиксПараметра + (Позиция + Разница);
			ПараметрыМакета[ИмяПараметра] = Сред(СтрокаЧисла, Позиция, 1);
			Позиция = Позиция - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаВПараметрыМакета( Дата, ПрефиксПараметра, ПараметрыМакета)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда 
		Возврат;
	КонецЕсли;
	
	День = День(Дата);
	Месяц = Месяц(Дата);
	Год = Год(Дата);
	
	Если День < 10 Тогда
		ПараметрыМакета[ПрефиксПараметра + "1"] = "0";
		ПараметрыМакета[ПрефиксПараметра + "2"] = "" + День;
	Иначе
		ПараметрыМакета[ПрефиксПараметра + "1"] = "" + Цел(День/10);
		ПараметрыМакета[ПрефиксПараметра + "2"] = "" + День%10;
	КонецЕсли;
	
	Если Месяц < 10 Тогда
		ПараметрыМакета[ПрефиксПараметра + "3"] = "0";
		ПараметрыМакета[ПрефиксПараметра + "4"] = "" + Месяц;
	Иначе
		ПараметрыМакета[ПрефиксПараметра + "3"] = "1";
		ПараметрыМакета[ПрефиксПараметра + "4"] = "" + (Месяц - 10);
	КонецЕсли;
	
	ГТ = Цел(Год/1000);
	ГС = Цел((Год%1000)/100);
	ГД = Цел((Год%100)/10);
	ГЕ = Год%10;
	
	ПараметрыМакета[ПрефиксПараметра + "5"] = "" + ГТ;
	ПараметрыМакета[ПрефиксПараметра + "6"] = "" + ГС;
	ПараметрыМакета[ПрефиксПараметра + "7"] = "" + ГД;
	ПараметрыМакета[ПрефиксПараметра + "8"] = "" + ГЕ;

КонецПроцедуры

Процедура СтрокаВОбластиМакета(Строка, ПрефиксПараметра, ОбластиМакета, ДлинаОбластиМакета)
	
	ДлинаСтроки = Мин(СтрДлина(Строка), ДлинаОбластиМакета);
	Индекс = 1;
	
	Пока Индекс <= ДлинаСтроки Цикл 
		ИмяПараметра = ПрефиксПараметра + Индекс;
		ОбластиМакета[ИмяПараметра].Текст = Сред(Строка, Индекс, 1);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЧислоВОбластиМакета(Число, ПрефиксПараметра, ОбластиМакета, КоличествоЗнаков)
	
	СтрокаЧисла = Формат(Число, "ЧГ=0");
	ДлинаСтроки = СтрДлина(СтрокаЧисла);
	
	Если ДлинаСтроки > КоличествоЗнаков Тогда 
		Позиция = КоличествоЗнаков;
		Пока Позиция > 0 Цикл
			ИмяПараметра = ПрефиксПараметра + Позиция;
			ОбластиМакета[ИмяПараметра].Текст = "#";
			Позиция = Позиция - 1;
		КонецЦикла;
	Иначе
		Позиция = ДлинаСтроки;
		Разница = КоличествоЗнаков - ДлинаСтроки;
		Пока Позиция > 0 Цикл
			ИмяПараметра = ПрефиксПараметра + (Позиция + Разница);
			ОбластиМакета[ИмяПараметра].Текст = Сред(СтрокаЧисла, Позиция, 1);
			Позиция = Позиция - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаВОбластиМакета( Дата, ПрефиксПараметра, ОбластиМакета)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда 
		Возврат;
	КонецЕсли;
	
	День = День(Дата);
	Месяц = Месяц(Дата);
	Год = Год(Дата);
	
	Если День < 10 Тогда
		ОбластиМакета[ПрефиксПараметра + "1"].Текст = "0";
		ОбластиМакета[ПрефиксПараметра + "2"].Текст = "" + День;
	Иначе
		ОбластиМакета[ПрефиксПараметра + "1"].Текст = "" + Цел(День/10);
		ОбластиМакета[ПрефиксПараметра + "2"].Текст = "" + День%10;
	КонецЕсли;
	
	Если Месяц < 10 Тогда
		ОбластиМакета[ПрефиксПараметра + "3"].Текст = "0";
		ОбластиМакета[ПрефиксПараметра + "4"].Текст = "" + Месяц;
	Иначе
		ОбластиМакета[ПрефиксПараметра + "3"].Текст = "1";
		ОбластиМакета[ПрефиксПараметра + "4"].Текст = "" + (Месяц - 10);
	КонецЕсли;
	
	ГТ = Цел(Год/1000);
	ГС = Цел((Год%1000)/100);
	ГД = Цел((Год%100)/10);
	ГЕ = Год%10;
	
	ОбластиМакета[ПрефиксПараметра + "5"].Текст = "" + ГТ;
	ОбластиМакета[ПрефиксПараметра + "6"].Текст = "" + ГС;
	ОбластиМакета[ПрефиксПараметра + "7"].Текст = "" + ГД;
	ОбластиМакета[ПрефиксПараметра + "8"].Текст = "" + ГЕ;

КонецПроцедуры

#КонецЕсли