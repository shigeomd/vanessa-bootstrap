&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если РасчетыВУЕ Тогда
		//Уведомим об изменениях в правилах переоценки задолженности в у.е. с 2015 года
		НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("ПереоценкаЗадолженностиПоДоговорамВУЕ2015");
	КонецЕсли;	

	// Включим предопределенные счета и их субсчета
	УчетПроизводства.ОграничитьВыборСчетамиПрямыхРасходов(Элементы.СчетЗатрат);
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Продукция",               "Продукция");
	СписокТабличныхЧастей.Добавить("Услуги",                  "Услуги");
	СписокТабличныхЧастей.Добавить("ИспользованныеМатериалы", "ИспользованныеМатериалы");
	СписокТабличныхЧастей.Добавить("ВозвращенныеМатериалы",   "ВозвращенныеМатериалы");
	СписокТабличныхЧастей.Добавить("ВозвратнаяТара",          "ВозвратнаяТара");

	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

	УстановитьУсловноеОформление();

	ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураПолученный" 
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РасчетыВУЕ Тогда
		ПодключитьОбработчикОжидания("УведомитьОбИзмененияхПравилПереоценкиЗадолженностейВУЕ", 0.60, Истина);
	КонецЕсли;	
	
	ПроверитьКонтрагентовПриОткрытии();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();

	ПроверкаКонтрагентов.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПоступлениеИзПереработки";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерСчетаФактурыПолученного) И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Номер счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НомерСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) И ЗначениеЗаполнено(НомерСчетаФактурыПолученного)  Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДатаСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ЗначениеЗаполнено(НомерСчетаФактурыПолученного)
		И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ТекущийОбъект.Ссылка, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного);
		
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Результат);
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
												 
	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	ПроверкаКонтрагентов.ОпределитьНаличиеИзмененияВСчетеФактуре(ЭтотОбъект, СчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если КонтрагентыВСчетеФактуреИзменилисьПослеЗаписи Тогда
		ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактура);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПроверкаКонтрагентовКлиент.СохранитьРезультатПроверкиКонтрагентовПриЗакрытии(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПроверкаКонтрагентов.ПередЗаписьюНаСервере(ЭтотОбъект, СчетФактура);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

	ЗапуститьПроверкуКонтрагентов(Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;

	ЗапуститьПроверкуКонтрагентов(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
		УведомитьОбИзмененияхПравилПереоценкиЗадолженностейВУЕ();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)

	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр"	   , ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата"                 , Объект.Дата);
	ПараметрыФормы.Вставить("ДоговорКонтрагента"   , Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"          , Объект.Организация);
	ПараметрыФормы.Вставить("ОстаткиОбороты"       , "Дт");
	ПараметрыФормы.Вставить("ТипыДокументов"       , "Метаданные.Документы.ПоступлениеИзПереработки.ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип");
	ПараметрыФормы.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	ПараметрыФормы.Вставить("АдресХранилищаЗачетАвансов"	, АдресХранилищаЗачетАвансов);
	ПараметрыФормы.Вставить("СпособЗачетаАвансов"  			, Объект.СпособЗачетаАвансов);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовСКонтрагентом", Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовПоАвансам"  	, Объект.СчетУчетаРасчетовПоАвансам);
	ПараметрыФормы.Вставить("ВсегдаОтображатьСчетаУчета"  	, Истина);

	ОткрытьФорму("ОбщаяФорма.ВыборПорядкаУчетаРасчетов", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");
	ЗапуститьПроверкуКонтрагентов(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
		СчетЗатратПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|СуммаПлановая, ПлановаяСтоимость,
		|Счет, Спецификация");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ПродукцияНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПересчитатьСумму(Элемент)

	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаПлановаяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти.ПлановаяСтоимость = СтрокаТабличнойЧасти.СуммаПлановая / СтрокаТабличнойЧасти.Количество;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС, СпособУчетаНДС,
		|СтатьяЗатрат, СчетУчетаНДС, ОтражениеВУСН");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента, ПрименяютсяСтавки4и2");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.ПрименяютсяСтавки4и2 = ПрименяютсяСтавки4и2;
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПересчитатьСумму(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ТекущиеДанные, Объект.СуммаВключаетНДС, 1, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура УслугиПересчитатьЦену(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ?(ТекущиеДанные.Количество = 0, 1, ТекущиеДанные.Количество);
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(ТекущиеДанные, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги", ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Услуги");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыИспользованныеМатериалы

&НаКлиенте
Процедура ИспользованныеМатериалыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ИспользованныеМатериалы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, СчетУчета, СтатьяЗатрат, ОтражениеВУСН");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ИспользованныеМатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВозвращенныеМатериалы

&НаКлиенте
Процедура ВозвращенныеМатериалыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвращенныеМатериалы.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, СчетУчета, СчетПередачи, ОтражениеВУСН");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ВозвращенныеМатериалыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)
	
	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, Цена, Сумма, СчетУчета");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.СуммаВключаетНДС = Истина;
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПересчитатьСумму(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	ОбщегоНазначенияБПКлиент.ПересчитатьСумму(ТекущиеДанные, Объект.СуммаВключаетНДС, 1);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;

	Если ТекущиеДанные.Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборПродукция(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Продукция"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Услуги"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнойТары(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("ВозвратнаяТара"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодборИспользованныеМатериалы(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("ИспользованныеМатериалы"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвращенныеМатериалы(Команда)

	ОткрытьФорму(
		"Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("ВозвращенныеМатериалы"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИспользованныеМатериалыОстатками(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите контрагента'"), Объект.Ссылка, "Контрагент", "Объект");
		Возврат;
	КонецЕсли;

	Если Объект.ИспользованныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
			|Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиМатериалыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьИспользованныеМатериалыОстаткамиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвращенныеМатериалыОстатками(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите контрагента'"), Объект.Ссылка, "Контрагент", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВозвращенныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
			|Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиВозвращенныеМатериалыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьВозвращенныеМатериалыОстаткамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИспользованныеМатериалыПоСпецификации(Команда)

	Если Объект.ИспользованныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
			|Заполнить?'");
		ДополнительныеПараметры = Новый Структура("ТабЧасть", "ИспользованныеМатериалы");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиМатериалыПоСпецификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПоСпецификацииНаСервере("ИспользованныеМатериалы");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвращенныеМатериалыПоСпецификации(Команда)

	Если Объект.ВозвращенныеМатериалы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
			|Заполнить?'");
		ДополнительныеПараметры = Новый Структура("ТабЧасть", "ВозвращенныеМатериалы");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиМатериалыПоСпецификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПоСпецификацииНаСервере("ВозвращенныеМатериалы");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУслуги Тогда

		НадоИнициализировать = Ложь;
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если Форма.ПрименяютсяСтавки4и2
			И НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			Форма.УстановитьУсловноеОформлениеУслуги();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()

	// СчетУчетаРасчетовПоТаре

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовПоТаре");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьВозвратнаяТара", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслуги() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиОбщее()

	НастройкиУсловногоОформления.Вставить("УслугиОбщееПроинициализировано", Истина);


	// УслугиСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// УслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.НеРавно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("УслугиПрименяютсяСтавки4и2Проинициализировано", Истина);


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2");
			
		УчетАгентскогоНДС 		= РеквизитыДоговора.УчетАгентскогоНДС;
		ПрименяютсяСтавки4и2 	= РеквизитыДоговора.НДСПоСтавкам4и2;
		РасчетыВУЕ 				= РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
		ТребуетсяСчетФактура 	= НЕ УчетАгентскогоНДС;
	
	Иначе

		УчетАгентскогоНДС 		= Ложь;
		ПрименяютсяСтавки4и2 	= Ложь;
		РасчетыВУЕ 				= Ложь;
		ТребуетсяСчетФактура 	= Ложь;
	
		Если ЗначениеЗаполнено(Объект.Контрагент)
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменениеНаСервере();
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);

	ЕстьВозвратнаяТара = ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И Объект.ВозвратнаяТара.Количество() > 0;

	ЗаполнитьДобавленныеКолонкиТаблиц();

	УчетВзаиморасчетов.УстановитьПорядокУчетаРасчетов(ЭтаФорма);		

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	УпрощенныйУчетНДС				 = УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	ПлательщикНДС					 = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19		 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация,	Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры	 = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	ЕстьВалютныйУчет 				 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	// Доступность взаимосвязанных полей
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ПодразделениеЗатрат.Доступность      = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ДоговорКонтрагента.Доступность  = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);

	Элементы.ПорядокУчетаРасчетов.Доступность 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Гиперссылка 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);

	// Счет-фактура
	Если Форма.ТребуетсяСчетФактура И НЕ ЗначениеЗаполнено(Форма.СчетФактура) Тогда
		Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница = Элементы.ГруппаЗарегистрироватьСчетФактуру;
	Иначе
		Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница = Элементы.ГруппаСчетФактураСсылка;
	КонецЕсли;
	Элементы.НадписьСчетФактура.Гиперссылка = Форма.ТребуетсяСчетФактура;
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	ЗаполнитьСписокВыбораСтавокНДС(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавокНДС(Форма)

	Элементы = Форма.Элементы;
	
	СписокВыбораСтавок = Элементы.УслугиСтавкаНДС.СписокВыбора;
	СписокВыбораСтавок.Очистить();
	
	Если Форма.ПрименяютсяСтавки4и2 Тогда
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"), "4%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"), "2%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		
	Иначе
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"));
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуру(Форма, РеквизитыСФ = Неопределено)

	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруПолученный(
		Форма, 
		РеквизитыСФ, 
		Форма.ТребуетсяСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// Структура параметров
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТолькоПросмотр",       ТолькоПросмотр);

	// Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если НЕ РаздельныйУчетНДСНаСчете19
		ИЛИ ИспользоватьТипыЦенНоменклатуры
		ИЛИ (ЕстьВалютныйУчет И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета)
		ИЛИ РасчетыВУЕ Тогда 
		
		ОткрыватьИзМеню = Ложь;
		
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;

		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС);
		
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	// Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		ВалютаДоИзменения = Объект.ВалютаДокумента;
		
		Объект.ТипЦен                  = СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;

		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСВключенВСтоимость	   = СтруктураЦеныИВалюта.НДСВключенВСтоимость;
		
		Модифицированность = Истина;
		
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
		
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;	
		 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	ТипПолучаемыхЦен = Объект.ТипЦен;

	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура", Истина);
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Услуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса,
			ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1,
			ТипПолучаемыхЦен.ЦенаВключаетНДС);
	КонецЦикла;

	Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса,
			ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 1,
			ТипПолучаемыхЦен.ЦенаВключаетНДС);
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(
	Строка,
	ТаблицаЦенНоменклатуры,
	ВалютаПередИзменением,
	СтруктураКурса,
	ПерезаполнитьЦены,
	ПересчитатьЦены,
	ПересчитатьНДС,
	ЕстьНДС,
	ЗначениеПустогоКоличества,
	Знач ЦенаВключаетНДС)

	КурсВалютыДокумента 	 = ?(Объект.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Объект.КурсВзаиморасчетов);
	КратностьВалютыДокумента = ?(Объект.ВалютаДокумента = ВалютаРегламентированногоУчета, 1, Объект.КратностьВзаиморасчетов);
	
	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		
		Если НайденнаяСтрока <> Неопределено Тогда
			
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
			КурсВалютыДокумента, НайденнаяСтрока.Кратность, КратностьВалютыДокумента);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
			Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
				ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
			Иначе
				ЦенаВключаетНДС = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ПересчитатьЦены Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс, 
				КурсВалютыДокумента, СтруктураКурса.Кратность, КратностьВалютыДокумента);
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
		
	КонецЕсли;
		
	Если ЕстьНДС Тогда
		Строка.Цена     = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС, ПрименяютсяСтавки4и2));
		Строка.Сумма    = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма,
			Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС, ПрименяютсяСтавки4и2));
	Иначе
		Строка.Цена  = Цена;
		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();

	ПодразделениеПоУмолчанию = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменениеНаСервере();
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Продукция" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Продукция");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Услуги" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ИспользованныеМатериалы" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ИспользованныеМатериалы");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвращенныеМатериалы" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвращенныеМатериалы");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратнаяТара");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	КонтрагентОбработатьИзменениеНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере()

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров());

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ДоговорКонтрагентаОбработатьИзменение();
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()

	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения        = Объект.КратностьВзаиморасчетов;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов,УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2");
		
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
		
	УчетАгентскогоНДС       = ДоговорУказан И РеквизитыДоговора.УчетАгентскогоНДС;
	ПрименяютсяСтавки4и2    = ДоговорУказан И РеквизитыДоговора.НДСПоСтавкам4и2;
	РасчетыВУЕ              = ДоговорУказан И РеквизитыДоговора.РасчетыВУсловныхЕдиницах;

	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

	ПересчитатьСуммы = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	
	ЕстьСтрокиВТабличныхЧастях = (Объект.Услуги.Количество() + Объект.ВозвратнаяТара.Количество()) > 0;
	
	Если ЕстьСтрокиВТабличныхЧастях И (ПересчитатьСуммы ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, Ложь, ПересчитатьСуммы, ПересчитатьНДС);
	КонецЕсли;
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Объект.ЗачетАвансов.Очистить();
	УчетВзаиморасчетов.УстановитьПорядокУчетаРасчетов(ЭтаФорма);	

	ТребуетсяСчетФактура = НЕ УчетАгентскогоНДС И ДоговорУказан;

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПродукцияНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	
	ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ПлановаяСтоимость	= СведенияОНоменклатуре.ПлановаяСтоимость;
	СтрокаТабличнойЧасти.Спецификация		= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Продукция", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание		= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена			= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.СтатьяЗатрат	= ?(ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат), 
																		СведенияОНоменклатуре.СтатьяЗатрат,
																		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
	
	СтрокаТабличнойЧасти.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.ПрименяютсяСтавки4и2);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользованныеМатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
	СтрокаТабличнойЧасти.СтатьяЗатрат	= ?(ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат), 
																		СведенияОНоменклатуре.СтатьяЗатрат,
																		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ИспользованныеМатериалы", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвращенныеМатериалыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвращенныеМатериалы", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;	

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ВозвратнаяТара", СведенияОНоменклатуре);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	Форма.ИтогиВсего = Объект.Услуги.Итог("Всего");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ВалютаРегламентированногоУчета, НДСВключенВСтоимость",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета,
		Объект.НДСВключенВСтоимость);
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	// Заполнение колонки Всего табличной части Услуги
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;

	// Заполнение колонки Всего табличной части ВозвратнаяТара
	Для Каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиенте
Функция ПолучитьСписокПодборов(ИмяТаблицы)

	// Список возможных подборов - в Обработка.ПодборНоменклатуры.Форма.Форма.УстановитьТекущийСписок(Форма)
	СписокПодборов = Новый СписокЗначений();
	СписокПодборов.Добавить("", НСтр("ru = 'По справочнику'"));

	Возврат СписокПодборов;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);

	Если ИмяТаблицы = "Услуги" Тогда
		ЗаголовокПодбора     = НСтр("ru = 'Подбор услуг в документ %1 (%2)'");
		ПредставлениеТаблицы = НСтр("ru = 'Услуги'");
	ИначеЕсли ИмяТаблицы = "Продукция" Тогда
		ЗаголовокПодбора     = НСтр("ru = 'Подбор продукции в документ %1 (%2)'");
		ПредставлениеТаблицы = НСтр("ru = 'Продукция'");
	ИначеЕсли ИмяТаблицы = "ВозвращенныеМатериалы" Тогда
		ЗаголовокПодбора     = НСтр("ru = 'Подбор возвращенных материалов в документ %1 (%2)'");
		ПредставлениеТаблицы = НСтр("ru = 'Возвращенные материалы'");
	ИначеЕсли ИмяТаблицы = "ИспользованныеМатериалы" Тогда
		ЗаголовокПодбора     = НСтр("ru = 'Подбор использованных материалов в документ %1 (%2)'");
		ПредставлениеТаблицы = НСтр("ru = 'Использованные материалы'");
	Иначе
		ЗаголовокПодбора     = "";
		ПредставлениеТаблицы = "";
	КонецЕсли;

	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокПодбора,
		Объект.Ссылка,
		ПредставлениеТаблицы);
	ПараметрыФормы.Вставить("ДатаРасчетов",   ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение",  Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Валюта",         ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыФормы.Вставить("ЕстьЦена", 	  Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("Заголовок",      ЗаголовокПодбора);
	ПараметрыФормы.Вставить("СписокПодборов", ПолучитьСписокПодборов(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы",     ИмяТаблицы);
	Если ИмяТаблицы <> "Услуги" Тогда // В списке Услуги может быть и продукция и услуги
		ПараметрыФормы.Вставить("Услуги", Ложь);
	КонецЕсли;

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ИмяТаблицы = "Продукция" Тогда
		ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		ДанныеОбъекта.Вставить("ТипЦен", Объект.ТипЦен);
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ДанныеОбъекта.Вставить("ТипЦен", Объект.ТипЦен);
		ДанныеОбъекта.СуммаВключаетНДС = Истина;
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
		
		Если ИмяТаблицы = "Продукция" Тогда
			
			СтрокаТабличнойЧасти.Спецификация		= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
			СтрокаТабличнойЧасти.ПлановаяСтоимость	= СведенияОНоменклатуре.ПлановаяСтоимость;
			
			ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
			
		ИначеЕсли ИмяТаблицы = "Услуги" Тогда
			
			СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
			СтрокаТабличнойЧасти.Цена			= СведенияОНоменклатуре.Цена;
			СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
			СтрокаТабличнойЧасти.СтатьяЗатрат	= ?(ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат), 
																		СведенияОНоменклатуре.СтатьяЗатрат,
																		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
			
			СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			
		ИначеЕсли ИмяТаблицы = "ИспользованныеМатериалы" Тогда
			
			СтрокаТабличнойЧасти.СтатьяЗатрат	= ?(ЗначениеЗаполнено(СведенияОНоменклатуре.СтатьяЗатрат), 
																		СведенияОНоменклатуре.СтатьяЗатрат,
																		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
			СтрокаТабличнойЧасти.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
			
		ИначеЕсли ИмяТаблицы = "ВозвращенныеМатериалы" Тогда
			
			СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			
		ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
			
			СтрокаТабличнойЧасти.Цена	= СведенияОНоменклатуре.Цена;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	УчетВзаиморасчетов.ОбработкаВыбораПорядокУчетаРасчетов(ЭтаФорма, ВыбранноеЗначение);
	
	УчетВзаиморасчетов.УстановитьПорядокУчетаРасчетов(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

// Возвращаемое значение:
// Таблица значений - список материалов, имеющихся у переработчика
&НаСервереБезКонтекста
Функция ОстаткиМатериаловУПереработчика(Организация, Контрагент, Ссылка, Дата)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент",  Контрагент);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Запрос.УстановитьПараметр("Дата", Новый Граница(
			Новый МоментВремени(Дата, Ссылка), ВидГраницы.Исключая));
	Иначе
		Запрос.УстановитьПараметр("Дата", Неопределено);
	КонецЕсли;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("СтатьяЗатратПоУмолчанию", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаМатериалыПереданныеВПереработку
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПереданныеВПереработку))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаМатериалыПереданныеВПереработку.Счет
	|				ИЗ
	|					СчетаМатериалыПереданныеВПереработку),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Счет КАК СчетУчета,
	|	ДанныеРегистра.Номенклатура,
	|	ВЫБОР 
	|		КОГДА ДанныеРегистра.Номенклатура.СтатьяЗатрат = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка) 
	|			ТОГДА &СтатьяЗатратПоУмолчанию 
	|			ИНАЧЕ ДанныеРегистра.Номенклатура.СтатьяЗатрат 
	|		КОНЕЦ КАК СтатьяЗатрат,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН,
	|	ДанныеРегистра.Количество,
	|	ДанныеРегистра.Номенклатура.Наименование КАК НоменклатураНаименование
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНаименование";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВозвращенныеМатериалыОстаткамиНаСервере()

	ОстаткиМатериалов = ОстаткиМатериаловУПереработчика(Объект.Организация, Объект.Контрагент, Объект.Ссылка, Объект.Дата);
	
	Объект.ВозвращенныеМатериалы.Загрузить(ОстаткиМатериалов);
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвращенныеМатериалы");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИспользованныеМатериалыОстаткамиНаСервере()
	
	ОстаткиМатериалов = ОстаткиМатериаловУПереработчика(Объект.Организация, Объект.Контрагент, Объект.Ссылка, Объект.Дата);
	
	Объект.ИспользованныеМатериалы.Загрузить(ОстаткиМатериалов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиМатериалыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьИспользованныеМатериалыОстаткамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиВозвращенныеМатериалыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьВозвращенныеМатериалыОстаткамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиМатериалыПоСпецификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоСпецификацииНаСервере(ДополнительныеПараметры.ТабЧасть);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере(ИмяТабличнойЧасти)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|// Таблица документа
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукции.Спецификация КАК Спецификация,
	|	ТаблицаПродукции.Количество   КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТабличнаяЧастьПродукция КАК ТаблицаПродукции
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|// Таблица продукции
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокумента.Номенклатура                 КАК Номенклатура,
	|	ВТ_ТаблицаДокумента.Спецификация                 КАК Спецификация,
	|	ЕСТЬNULL(СпецификацииНоменклатуры.Количество, 0) КАК КоличествоНаВыходе,
	|	ВТ_ТаблицаДокумента.Количество                   КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаПродукции
	|ИЗ
	|	ВТ_ТаблицаДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.СпецификацииНоменклатуры КАК СпецификацииНоменклатуры
	|		ПО ВТ_ТаблицаДокумента.Спецификация = СпецификацииНоменклатуры.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|// Количество по каждой спецификации
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПродукции.Спецификация       КАК Спецификация,
	|	ВТ_ТаблицаПродукции.КоличествоНаВыходе КАК КоличествоНаВыходе,
	|	СУММА(ВТ_ТаблицаПродукции.Количество)  КАК КоличествоПродукции
	|ПОМЕСТИТЬ ВТ_КоличествоПоСпецификациям
	|ИЗ
	|	ВТ_ТаблицаПродукции
	|ГДЕ
	|	ВТ_ТаблицаПродукции.Спецификация <> ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Спецификация,
	|	КоличествоНаВыходе
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|// Основной запрос
	|ВЫБРАТЬ
	|	СоставСпецификации.Номенклатура                  КАК Номенклатура,
	|	СоставСпецификации.Номенклатура.Наименование     КАК НоменклатураНаименование,
	|	СоставСпецификации.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР 
	|		КОГДА СоставСпецификации.Номенклатура.СтатьяЗатрат = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка) 
	|			ТОГДА &СтатьяЗатратПоУмолчанию 
	|			ИНАЧЕ СоставСпецификации.Номенклатура.СтатьяЗатрат 
	|		КОНЕЦ КАК СтатьяЗатрат,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА ВТ_КоличествоПоСпецификациям.КоличествоНаВыходе = 0
	|				ТОГДА 0
	|			Иначе
	|				ВТ_КоличествоПоСпецификациям.КоличествоПродукции
	|					* СоставСпецификации.Количество
	|					/ ВТ_КоличествоПоСпецификациям.КоличествоНаВыходе
	|		КОНЕЦ
	|	) КАК Количество
	|ИЗ
	|	ВТ_КоличествоПоСпецификациям
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СоставСпецификации
	|		ПО СоставСпецификации.Ссылка = ВТ_КоличествоПоСпецификациям.Спецификация
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставСпецификации.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНаименование";
	
	Запрос.УстановитьПараметр("ТабличнаяЧастьПродукция", Объект.Продукция.Выгрузить());
	Запрос.УстановитьПараметр("СтатьяЗатратПоУмолчанию", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов"));
	
	ТаблицаМатериалов = Запрос.Выполнить().Выгрузить();
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаМатериалов);
	
	Документы.ПоступлениеИзПереработки.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруПолученный(ЭтаФорма);
	Если РеквизитыСФ <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	ЗапуститьПроверкуКонтрагентов(Элементы.НадписьСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура УведомитьОбИзмененияхПравилПереоценкиЗадолженностейВУЕ()
	
	Если РасчетыВУЕ Тогда
		ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ПереоценкаЗадолженностиПоДоговорамВУЕ2015", , НастройкиПредупреждений);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура СчетЗатратПриИзмененииНаСервере()

	// Заполним основную номенклатурную группу
	Если БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу() Тогда
		Объект.НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагентов(ДополнительныеПараметры = Неопределено)
	
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПараметрыФоновогоЗадания = ПроверкаКонтрагентовКлиент.ПараметрыФоновогоЗадания(ДополнительныеПараметры);
		ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания);
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		// Прерываем предыдущую проверку
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	
	ФоновоеЗаданиеЗавершилось = ПроверкаКонтрагентовВызовСервера.ПроверкаКонтрагентовЗавершилась(ИдентификаторЗаданияПроверкиКонтрагента);
	
	// Если есть незавершившиеся фоновые задания, то продолжаем ждать результат
	Если ФоновоеЗаданиеЗавершилось Тогда
		ОтобразитьРезультатПроверкиКонтрагента();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента()
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ДополнительныеПараметры = Неопределено)
	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ДополнительныеПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроверкуКонтрагентовПриСозданииНаСервере()
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверкаКонтрагентов.УправлениеФормойПриСозданииНаСервере(ЭтотОбъект);
		ПроверитьКонтрагентовФоновоеЗадание();
	Иначе
		ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(ЭтотОбъект, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаНеИспользуется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентовПриОткрытии()
	
	Если ИспользованиеПроверкиВозможно Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверкаКонтрагентов(Источник) 
	Возврат ПроверкаКонтрагентов.ТребуетсяПроверкаКонтрагентов(ЭтотОбъект, Источник);
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтрагентовПриНаступленииСобытия(ИмяСобытия, Параметр, Источник)
	
	Если ПроверкаКонтрагентовКлиент.СобытиеТребуетПроверкиКонтрагента(ЭтотОбъект, ИмяСобытия, Параметр, Источник)
		И ТребуетсяПроверкаКонтрагентов(Источник) Тогда
		
		ЗапуститьПроверкуКонтрагентов(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти