#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("Реквизиты",                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_РублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента",         НомераТаблиц.Количество());
	
	// В случае включения НДС в стоимость проводки по НДС не будет в Хозрасчетном, 
	// поэтому для таблицы СуммыПроводок используем НДСПредъявленный.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.ПодразделениеОрганизации.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|					ТОГДА Реквизиты.Организация.ЦифровойИндексОбособленногоПодразделения
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Поставщик,
	|	Реквизиты.Контрагент.ИНН КАК ИННпоставщика,
	|	Реквизиты.Контрагент КАК ОбособленноеПодразделениеПоставщика,
	|	НЕОПРЕДЕЛЕНО КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА Реквизиты.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ КАК Покупатель,
	|	Реквизиты.Организация.ИНН КАК ИННпокупателя,
	|	Реквизиты.Организация КАК ОбособленноеПодразделениеПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК ЕстьТовары,
	|	"""" КАК АдресДоставки
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУслуги.Номенклатура КАК Товар,
	|	ТаблицаУслуги.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаУслуги.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаУслуги.Содержание КАК ТоварНаименование,
	|	"""" КАК СтранаПроисхождения,
	|	"""" КАК ПредставлениеСтраны,
	|	"""" КАК НомерГТД,
	|	"""" КАК ПредставлениеГТД,
	|	ТаблицаУслуги.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.СуммаНДС,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ИСТИНА КАК ЭтоУслуга,
	|	ТаблицаУслуги.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаУслуги.Ссылка,
	|	ЛОЖЬ КАК ЭтоКомиссия,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0) КАК СуммаБезНДСРуб,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК КонтрагентСводныйСФ
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.Услуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаУслуги.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|			И (ТаблицаУслуги.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &ДокументОснование";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоступлениеИзПереработкиВозвратнаяТара.Номенклатура,
	|	ПоступлениеИзПереработкиВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ИСТИНА КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ВозвратнаяТара
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.ВозвратнаяТара КАК ПоступлениеИзПереработкиВозвратнаяТара
	|ГДЕ
	|	ПоступлениеИзПереработкиВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеИзПереработкиУслуги.Номенклатура КАК Номенклатура,
	|	ПоступлениеИзПереработкиУслуги.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.Услуги КАК ПоступлениеИзПереработкиУслуги
	|ГДЕ
	|	ПоступлениеИзПереработкиУслуги.Ссылка = &Ссылка
	|	И НЕ ПоступлениеИзПереработкиУслуги.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВозвратнаяТара.Номенклатура
	|				ИЗ
	|					ВозвратнаяТара КАК ВозвратнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратнаяТара.Номенклатура,
	|	ВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ВозвратнаяТара.ЦенаВключаетНДС
	|ИЗ
	|	ВозвратнаяТара КАК ВозвратнаяТара";
	
	Если Не ЗначениеЗаполнено(Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить()) Тогда
		ТекстЗапроса = ТекстЗапроса 
		+ "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоступлениеИзПереработкиПродукция.Номенклатура КАК Номенклатура,
		|	ПоступлениеИзПереработкиПродукция.ПлановаяСтоимость КАК Цена,
		|	&Валюта,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияЦен.ПоПлановымЦенам),
		|   &ЦенаВключаетНДС
		|ИЗ
		|	Документ.ПоступлениеИзПереработки.Продукция КАК ПоступлениеИзПереработкиПродукция
		|ГДЕ
		|	ПоступлениеИзПереработкиПродукция.Ссылка = &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса= ТекстЗапроса
	+"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект) Экспорт
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация,  Объект.Контрагент, Объект.ДоговорКонтрагента);
		
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;
	
КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчета") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Продукция" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			СтрокаТабличнойЧасти.Счет = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДС) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
			СтрокаТабличнойЧасти.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "ИспользованныеМатериалы" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетПередачи) Тогда
			СтрокаТабличнойЧасти.СчетУчета =
				БухгалтерскийУчетВызовСервераПовтИсп.СчетУчетаМатериалыПереданныеВПереработку(СчетаУчета.СчетПередачи);
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "ВозвращенныеМатериалы" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетПередачи) Тогда
			СтрокаТабличнойЧасти.СчетУчета =
				БухгалтерскийУчетВызовСервераПовтИсп.СчетУчетаМатериалыПереданныеВПереработку(СчетаУчета.СчетПередачи);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			СтрокаТабличнойЧасти.СчетПередачи = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	ИначеЕсли ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			СтрокаТабличнойЧасти.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьПредъявленСчетФактура");
	МассивРеквизитов.Добавить("УдалитьНомерВходящегоСчетаФактуры");
	МассивРеквизитов.Добавить("УдалитьДатаВходящегоСчетаФактуры");
	МассивРеквизитов.Добавить("УдалитьНДСПредъявленКВычету");
	МассивРеквизитов.Добавить("УдалитьКодСпособаПолучения");
	МассивРеквизитов.Добавить("УдалитьКодВидаОперации");
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	МассивРеквизитов.Добавить("УдалитьСделка");
	
	Возврат МассивРеквизитов;
	
КонецФункции

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Ссылка,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("ВалютаРеглУчета,ВалютаДокумента,ВалютаВзаиморасчетов,ДоговорКонтрагента,ВидДоговора,Ссылка,СуммаВключаетНДС,Организация,Период,
		|КурсВзаиморасчетов,КратностьВзаиморасчетов,КурсДокумента,КратностьДокумента,РасчетыВУсловныхЕдиницах,ОрганизацияПрименяетУСН,НачислятьНДСПоОтгрузке");
	
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	Если НЕ УчетнаяПолитика.Существует(Выборка.Организация, Выборка.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ИспользоватьСчет40 = (УчетнаяПолитика.СпособУчетаВыпускаГотовойПродукции(Выборка.Организация, Выборка.Период) =
		Перечисления.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40);
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Выборка.Организация, Выборка.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	
	// Определяем необходимость движений по регистрам учета УСН:
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Выборка.Организация, Выборка.Период);
	
	// Коэффициенты пересчета сумм
	// - из валюты документа в валюту взаиморасчетов 
	// - из валюты взаиморасчетов в рубли
	Реквизиты.ОрганизацияПрименяетУСН = УчетнаяПолитика.СистемаНалогообложения(Выборка.Организация, Выборка.Период) = Перечисления.СистемыНалогообложения.Упрощенная;
	Реквизиты.НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Выборка.Организация, Выборка.Период);
	Реквизиты.ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Реквизиты.ВалютаВзаиморасчетов = Реквизиты.ВалютаРеглУчета Тогда
		Реквизиты.КурсДокумента = 1;
		Реквизиты.КратностьДокумента = 1;
		КоэффициентРуб = 1;
	Иначе
		Реквизиты.КурсДокумента = Реквизиты.КурсВзаиморасчетов;
		Реквизиты.КратностьДокумента = Реквизиты.КратностьВзаиморасчетов;
		КоэффициентРуб = Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов;
	КонецЕсли;
	
	Если Реквизиты.ВалютаВзаиморасчетов = Реквизиты.ВалютаДокумента Тогда
		Реквизиты.КурсВзаиморасчетов = 1;
		Реквизиты.КратностьВзаиморасчетов = 1;
		КоэффициентВзаиморасчетов = 1;
	Иначе
		Реквизиты.КурсВзаиморасчетов = Реквизиты.КурсВзаиморасчетов; 
		Реквизиты.КратностьВзаиморасчетов = Реквизиты.КратностьВзаиморасчетов;
		КоэффициентВзаиморасчетов = (Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов) / КоэффициентРуб;
	КонецЕсли;

	
	Запрос.УстановитьПараметр("КоэффициентВзаиморасчетов",      КоэффициентВзаиморасчетов);
	Запрос.УстановитьПараметр("КоэффициентРуб",                 КоэффициентРуб);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",                Реквизиты.ВалютаРеглУчета);
	Запрос.УстановитьПараметр("СинонимПродукция",               НСтр("ru = 'Продукция'"));
	Запрос.УстановитьПараметр("ИспользоватьСчет40",             ИспользоватьСчет40);
	Запрос.УстановитьПараметр("ВедетсяУчетПоПартиям",           ВедетсяУчетПоПартиям);
	Запрос.УстановитьПараметр("УчестьРасходыУСНУслуги",         ПрименяетсяУСНДоходыМинусРасходы);
	Запрос.УстановитьПараметр("СинонимИспользованныеМатериалы", НСтр("ru = 'Использованные материалы'"));
	Запрос.УстановитьПараметр("СинонимВозвращенныеМатериалы",   НСтр("ru = 'Возвращенные материалы'"));
	Запрос.УстановитьПараметр("СинонимУслуги",					НСтр("ru = 'Услуги'"));
	
	Запрос.УстановитьПараметр("ВестиУчетПоВидамДеятельностиИП",	УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Выборка.Организация, Выборка.Период));
	Запрос.УстановитьПараметр("ОсновнаяНоменклатурнаяГруппа",	УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Выборка.Организация, Выборка.Период));
	Запрос.УстановитьПараметр("ПустоеПодразделение", 			БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	ПодготовитьТаблицыДокументаДляЦелейПриобретенияРеализации(Запрос, Реквизиты);

	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаТаблицыДокумента(НомераТаблиц)
		+ ТекстЗапросаПлановаяСтоимостьПродукции(НомераТаблиц)
		+ ТекстЗапросаВыпускПродукции(НомераТаблиц)
		+ ТекстЗапросаЗачетАвансов(НомераТаблиц)
		+ ТекстЗапросаПоступлениеУслуг(НомераТаблиц)
		+ ТекстЗапросаОценкаСтоимости(НомераТаблиц)
		+ ТекстЗапросаСписаниеМатериалов(НомераТаблиц)
		+ ТекстЗапросаВозвратМатериалов(НомераТаблиц)
		+ ТекстЗапросаПоступлениеТары(НомераТаблиц)
		+ ТекстЗапросаНДС(НомераТаблиц)
		+ ТекстЗапросаПереоценкаВалютныхОстатков(НомераТаблиц)
		+ ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц)
		+ ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции

Процедура ПодготовитьТаблицыДокументаДляЦелейПриобретенияРеализации(Запрос, Реквизиты)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Услуги.Ссылка,
	|	Услуги.НомерСтроки,
	|	Услуги.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Услуги.Номенклатура,
	|	Услуги.Количество,
	|	Услуги.Цена,
	|	Услуги.Сумма,
	|	Услуги.СтавкаНДС,
	|	Услуги.СуммаНДС КАК НДС,
	|	Услуги.СтатьяЗатрат,
	|	Услуги.СчетУчетаНДС,
	|	Услуги.СпособУчетаНДС,
	|	Услуги.Содержание,
	|	Услуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Услуги.Ссылка.СчетЗатрат КАК СчетЗатрат,
	|	Услуги.ОтражениеВУСН
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Услуги = РезультатЗапроса[0].Выгрузить();
	УчетВзаиморасчетов.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(Услуги, Реквизиты);
	Запрос.УстановитьПараметр("Услуги",Услуги);

КонецПроцедуры

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаПродукция", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаМатериалы", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаВозвращенныеМатериалы", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаТара", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПродукция.Ссылка,
	|	ТаблицаПродукция.НомерСтроки,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Счет КАК СчетУчета,
	|	ТаблицаПродукция.Количество,
	|	ТаблицаПродукция.СуммаПлановая
	|ПОМЕСТИТЬ ТаблицаПродукция
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.Продукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаПродукция.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Ссылка,
	|	ТаблицаУслуги.НомерСтроки,
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.Содержание,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СчетУчетаНДС,
	|	ТаблицаУслуги.СпособУчетаНДС,
	|	ТаблицаУслуги.СчетЗатрат КАК СчетЗатрат,
	|	ТаблицаУслуги.СуммаВал КАК СуммаВзаиморасчетов,
	|	ТаблицаУслуги.НДСВал КАК СуммаНДСВзаиморасчетов,
	|	ТаблицаУслуги.Сумма КАК СуммаРуб,
	|	ТаблицаУслуги.НДС КАК СуммаНДСРуб,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ТаблицаУслуги.СтатьяЗатрат,
	|	ТаблицаУслуги.ВалютаВзаиморасчетов,
	|	&УчестьРасходыУСНУслуги КАК УчестьРасходыУСНУслуги
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	&Услуги КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМатериалы.Ссылка,
	|	ТаблицаМатериалы.НомерСтроки,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.Количество,
	|	ТаблицаМатериалы.СчетУчета,
	|	ТаблицаМатериалы.СтатьяЗатрат
	|ПОМЕСТИТЬ ТаблицаМатериалы
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.ИспользованныеМатериалы КАК ТаблицаМатериалы
	|ГДЕ
	|	ТаблицаМатериалы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВозвращенныеМатериалы.Ссылка,
	|	ТаблицаВозвращенныеМатериалы.НомерСтроки,
	|	ТаблицаВозвращенныеМатериалы.Номенклатура,
	|	ТаблицаВозвращенныеМатериалы.Количество,
	|	ТаблицаВозвращенныеМатериалы.СчетУчета,
	|	ТаблицаВозвращенныеМатериалы.СчетПередачи
	|ПОМЕСТИТЬ ТаблицаВозвращенныеМатериалы
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.ВозвращенныеМатериалы КАК ТаблицаВозвращенныеМатериалы
	|ГДЕ
	|	ТаблицаВозвращенныеМатериалы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТара.Ссылка,
	|	ТаблицаТара.НомерСтроки,
	|	ТаблицаТара.Номенклатура,
	|	ТаблицаТара.Количество,
	|	ТаблицаТара.Сумма,
	|	ВЫРАЗИТЬ(ТаблицаТара.Сумма * &КоэффициентВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаВзаиморасчетов,
	|	ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТара.Сумма * &КоэффициентВзаиморасчетов КАК ЧИСЛО(15, 2))) * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ТаблицаТара.СчетУчета
	|ПОМЕСТИТЬ ТаблицаТара
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.ВозвратнаяТара КАК ТаблицаТара
	|ГДЕ
	|	ТаблицаТара.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПлановаяСтоимостьПродукции(НомераТаблиц)

	НомераТаблиц.Вставить("ПлановаяСтоимостьПродукцииРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПлановаяСтоимостьПродукцииТаблица"  , НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	&ИспользоватьСчет40 КАК ИспользоватьСчет40
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Продукция"" КАК ИмяСписка,
	|	&СинонимПродукция КАК СинонимСписка,
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСчет40
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции)
	|		ИНАЧЕ ТаблицаПродукция.Ссылка.СчетЗатрат
	|	КОНЕЦ КАК СчетЗатрат,
	|	ТаблицаПродукция.Ссылка.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	ТаблицаПродукция.Ссылка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаЗатрат,
	|	ТаблицаПродукция.СчетУчета КАК СчетУчета,
	|	ТаблицаПродукция.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаПродукция.Ссылка.Склад КАК Склад,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.СуммаПлановая КАК СуммаПлановая,
	|	ТаблицаПродукция.СуммаПлановая КАК СуммаПлановаяНУ
	|ИЗ
	|	ТаблицаПродукция КАК ТаблицаПродукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукция.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВыпускПродукции(НомераТаблиц)

	НомераТаблиц.Вставить("ВыпускПродукцииРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВыпускПродукцииТаблица"  , НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Продукция"" КАК ИмяСписка,
	|	&СинонимПродукция КАК СинонимСписка,
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Ссылка.СчетЗатрат КАК СчетЗатрат,
	|	ТаблицаПродукция.Ссылка.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	ТаблицаПродукция.Ссылка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаЗатрат,
	|	ТаблицаПродукция.СчетУчета КАК СчетСписания,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Хозрасчетный.УчетПоПодразделениям, ЛОЖЬ)
	|			ТОГДА ТаблицаПродукция.Ссылка.ПодразделениеОрганизации
	|		ИНАЧЕ &ПустоеПодразделение
	|	КОНЕЦ КАК ПодразделениеСписания,
	|	ВЫБОР
	|		КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
	|					ТОГДА ТаблицаПродукция.Ссылка.Склад
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВидыСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|								И &ВедетсяУчетПоПартиям
	|							ТОГДА ТаблицаПродукция.Ссылка
	|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СубконтоСписания1,
	|	ВЫБОР
	|		КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
	|					ТОГДА ТаблицаПродукция.Ссылка.Склад
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВидыСубконто2.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|								И &ВедетсяУчетПоПартиям
	|							ТОГДА ТаблицаПродукция.Ссылка
	|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СубконтоСписания2,
	|	ВЫБОР
	|		КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|			ТОГДА ТаблицаПродукция.Номенклатура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады)
	|					ТОГДА ТаблицаПродукция.Ссылка.Склад
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВидыСубконто3.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии)
	|								И &ВедетсяУчетПоПартиям
	|							ТОГДА ТаблицаПродукция.Ссылка
	|						ИНАЧЕ НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СубконтоСписания3,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.СуммаПлановая КАК ПлановаяСтоимость,
	|	ЛОЖЬ КАК ПрямыеРасходыРаспределятьПоКоличеству
	|ИЗ
	|	ТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто1
	|		ПО ТаблицаПродукция.СчетУчета = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто2
	|		ПО ТаблицаПродукция.СчетУчета = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто3
	|		ПО ТаблицаПродукция.СчетУчета = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ТаблицаПродукция.СчетУчета = Хозрасчетный.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукция.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц)

	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаАвансов",   НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Ссылка КАК ДокументРасчетов,
	|	ТаблицаУслуги.Ссылка.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	ТаблицаУслуги.Ссылка.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ТаблицаУслуги.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаУслуги.Ссылка.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаУслуги.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаУслуги.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаУслуги.Ссылка.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ТаблицаУслуги.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|	СУММА(ТаблицаУслуги.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаУслуги.СуммаРуб) КАК СуммаРуб,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	0 КАК СуммаВзаиморасчетовЕНВД,
	|	0 КАК СуммаВзаиморасчетовПатент
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.Ссылка,
	|	ТаблицаУслуги.Ссылка.СчетУчетаРасчетовСКонтрагентом,
	|	ТаблицаУслуги.Ссылка.СчетУчетаРасчетовПоАвансам,
	|	ТаблицаУслуги.Ссылка.Контрагент,
	|	ТаблицаУслуги.Ссылка.ДоговорКонтрагента,
	|	ТаблицаУслуги.Ссылка.ДоговорКонтрагента.ВидДоговора,
	|	ТаблицаУслуги.ВалютаВзаиморасчетов,
	|	ТаблицаУслуги.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
	|	ТаблицаУслуги.Ссылка.ДоговорКонтрагента.УчетАгентскогоНДС,
	|	ТаблицаУслуги.Ссылка.ПодразделениеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗачетАвансов.НомерСтроки,
	|	ТаблицаЗачетАвансов.Ссылка.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ТаблицаЗачетАвансов.Ссылка.Контрагент,
	|	ТаблицаЗачетАвансов.Ссылка.ДоговорКонтрагента,
	|	ТаблицаЗачетАвансов.ДокументАванса,
	|	ТаблицаЗачетАвансов.СуммаЗачета
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.ЗачетАвансов КАК ТаблицаЗачетАвансов
	|ГДЕ
	|	ТаблицаЗачетАвансов.Ссылка = &Ссылка
	|	И ТаблицаЗачетАвансов.Ссылка.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПоДокументу)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗачетАвансов.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаПоступлениеУслуг(НомераТаблиц)

	НомераТаблиц.Вставить("ПоступлениеУслугРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПоступлениеУслугТаблица"  , НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Услуги"" КАК ИмяСписка,
	|	ТаблицаУслуги.НомерСтроки,
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ТаблицаУслуги.СуммаРуб КАК СуммаБУ,
	|	ТаблицаУслуги.СуммаРуб КАК СуммаНУ,
	|	ТаблицаУслуги.СуммаРуб КАК СуммаРуб,
	|	ТаблицаУслуги.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаУслуги.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ТаблицаУслуги.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ТаблицаУслуги.Ссылка.СчетЗатрат КАК СчетЗатрат,
	|	ТаблицаУслуги.Ссылка.НоменклатурнаяГруппа КАК Субконто1,
	|	ТаблицаУслуги.СтатьяЗатрат КАК Субконто2,
	|	ТаблицаУслуги.СтатьяЗатрат КАК СтатьяЗатрат,
	|	НЕОПРЕДЕЛЕНО КАК Субконто3,
	|	ТаблицаУслуги.Ссылка.СчетЗатрат КАК СчетЗатратНУ,
	|	ТаблицаУслуги.Ссылка.НоменклатурнаяГруппа КАК СубконтоНУ1,
	|	ТаблицаУслуги.СтатьяЗатрат КАК СубконтоНУ2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоНУ3,
	|	ТаблицаУслуги.Ссылка.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	ТаблицаУслуги.Ссылка.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
	|	""Контрагенты"" КАК ВидКорСубконто1,
	|	""Договоры"" КАК ВидКорСубконто2,
	|	""ДокументыРасчетовСКонтрагентами"" КАК ВидКорСубконто3,
	|	ТаблицаУслуги.Ссылка.Контрагент КАК КорСубконто1,
	|	ТаблицаУслуги.Ссылка.ДоговорКонтрагента КАК КорСубконто2,
	|	ТаблицаУслуги.Ссылка КАК КорСубконто3,
	|	ТаблицаУслуги.Содержание
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаУслуги.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаНДС(НомераТаблиц)

	НомераТаблиц.Вставить("РеквизитыНДС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПродукцияНДС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ИспользованныеМатериалыНДС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвращенныеМатериалыНДС",   НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеПолучатель,
	|	Реквизиты.Склад,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.Склад.ТипСклада КАК ТипСкладаОтправителя,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	|	ДоговорыКонтрагентов.УчетАгентскогоНДС,
	|	ДоговорыКонтрагентов.ВидАгентскогоДоговора,
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом,
	|	НЕОПРЕДЕЛЕНО КАК НДСвСтоимостиТоваров,
	|	НЕОПРЕДЕЛЕНО КАК СчетСписанияНДС,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияНДС1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияНДС2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоСписанияНДС3,
	|	ИСТИНА КАК СписыватьНДСнаКорСчетИАналитикуТовара,
	|	Реквизиты.Склад КАК СкладПолучатель,
	|	Реквизиты.Склад.ТипСклада КАК ТипСкладаПолучателя
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Реквизиты.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.СчетУчета КАК СчетУчета,
	|	ТаблицаПродукция.Количество КАК Количество
	|ИЗ
	|	ТаблицаПродукция КАК ТаблицаПродукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ИспользованныеМатериалы"" КАК ИмяСписка,
	|	&СинонимИспользованныеМатериалы КАК СинонимСписка,
	|	ТаблицаМатериалы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ТаблицаМатериалы.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалы.СчетУчета КАК СчетУчета,
	|	ТаблицаМатериалы.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка) КАК НовыйСпособУчетаНДС
	|ИЗ
	|	ТаблицаМатериалы КАК ТаблицаМатериалы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаМатериалы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвращенныеМатериалы"" КАК ИмяСписка,
	|	ТаблицаВозвращенныеМатериалы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ТаблицаВозвращенныеМатериалы.Номенклатура КАК Номенклатура,
	|	ТаблицаВозвращенныеМатериалы.СчетУчета КАК СчетУчета,
	|	ТаблицаВозвращенныеМатериалы.Количество КАК Количество,
	|	ТаблицаВозвращенныеМатериалы.СчетПередачи КАК СчетУчетаПолучатель,
	|	ТаблицаВозвращенныеМатериалы.Ссылка.Склад КАК СкладПолучатель,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка) КАК НовыйСпособУчетаНДС
	|ИЗ
	|	ТаблицаВозвращенныеМатериалы КАК ТаблицаВозвращенныеМатериалы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаВозвращенныеМатериалы.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОценкаСтоимости(НомераТаблиц)
	
	НомераТаблиц.Вставить("ОценкаСтоимостиРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	"""" КАК Содержание
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСписаниеМатериалов(НомераТаблиц)
	
	НомераТаблиц.Вставить("СписаниеМатериаловРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписаниеМатериаловТаблица", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	""Списание"" КАК ТипСписания,
	|	Реквизиты.Ссылка КАК ДокументРеализации,
	|	""ПоступлениеИзПереработки"" КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	ЛОЖЬ КАК ДеятельностьНаПатенте,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	""Списание запасов на затраты производства"" КАК Содержание
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ИспользованныеМатериалы"" КАК ИмяСписка,
	|	&СинонимИспользованныеМатериалы КАК СинонимСписка,
	|	ТаблицаМатериалы.Ссылка.Дата КАК Период,
	|	ТаблицаМатериалы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаМатериалы.СчетУчета,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.Ссылка.Склад КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	0 КАК Себестоимость,
	|	ТаблицаМатериалы.Количество,
	|	ТаблицаМатериалы.Ссылка.ПодразделениеЗатрат КАК КорПодразделение,
	|	ТаблицаМатериалы.Ссылка.СчетЗатрат КАК КорСчетСписания,
	|	ТаблицаМатериалы.Ссылка.НоменклатурнаяГруппа КАК КорСубконто1,
	|	ТаблицаМатериалы.СтатьяЗатрат КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат) КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом
	|ИЗ
	|	ТаблицаМатериалы КАК ТаблицаМатериалы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВозвратМатериалов(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВозвратМатериаловРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВозвратМатериаловТаблица", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	""Возврат материалов из переработки на стороне"" КАК Содержание
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвращенныеМатериалы"" КАК ИмяСписка,
	|	&СинонимВозвращенныеМатериалы КАК СинонимСписка,
	|	ТаблицаВозвращенныеМатериалы.Ссылка.Дата КАК Период,
	|	ТаблицаВозвращенныеМатериалы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВозвращенныеМатериалы.СчетУчета,
	|	ТаблицаВозвращенныеМатериалы.Номенклатура,
	|	ТаблицаВозвращенныеМатериалы.Ссылка.Склад КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
	|	0 КАК Себестоимость,
	|	ТаблицаВозвращенныеМатериалы.Количество,
	|	ТаблицаВозвращенныеМатериалы.Ссылка.ПодразделениеОрганизации КАК КорПодразделение,
	|	ТаблицаВозвращенныеМатериалы.СчетПередачи КАК КорСчетСписания,
	|	ТаблицаВозвращенныеМатериалы.Номенклатура КАК КорСубконто1,
	|	ТаблицаВозвращенныеМатериалы.Ссылка.Склад КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура) КАК ВидКорСубконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом
	|ИЗ
	|	ТаблицаВозвращенныеМатериалы КАК ТаблицаВозвращенныеМатериалы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеТары(НомераТаблиц)

	НомераТаблиц.Вставить("ПоступлениеТарыРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПоступлениеТарыТаблица", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.Склад,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.СчетУчетаРасчетовПоТаре,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВозвратнаяТара"" КАК ИмяСписка,
	|	ТаблицаТара.Ссылка,
	|	ТаблицаТара.НомерСтроки,
	|	ТаблицаТара.Номенклатура,
	|	ТаблицаТара.СуммаВзаиморасчетов,
	|	ТаблицаТара.СуммаРуб,
	|	ТаблицаТара.Количество,
	|	ТаблицаТара.СчетУчета,
	|	""Передача тары"" КАК Содержание
	|ИЗ
	|	ТаблицаТара КАК ТаблицаТара
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТара.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПереоценкаВалютныхОстатков(НомераТаблиц)

	НомераТаблиц.Вставить("ПереоценкаВалютныхОстатковРеквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц)

	НомераТаблиц.Вставить("ПоступлениеРасходовУСНРеквизиты",       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПоступлениеРасходовУСНТаблицаРасходов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги) КАК ВидРасхода,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
	|	ТаблицаУслуги.Номенклатура КАК ЭлементРасхода,
	|	ЛОЖЬ КАК ЭтоТовар,
	|	ЛОЖЬ КАК ЭтоМатериал,
	|	ТаблицаУслуги.СчетЗатрат КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.СуммаВзаиморасчетов КАК Сумма,
	|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК НДС,
	|	ТаблицаУслуги.ОтражениеВУСН КАК ОтражениеВУСН
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|ГДЕ
	|	ТаблицаУслуги.УчестьРасходыУСНУслуги";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц)

	НомераТаблиц.Вставить("ПоступлениеМПЗИПРеквизиты",		НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаУслуг",	НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ПоступлениеТоваровУслуг"" КАК ТипПоступления,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	""ПоступлениеИзПереработки"" КАК ВидОперации
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Услуги"" КАК ИмяСписка,
	|	&СинонимУслуги КАК СинонимСписка,
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.СуммаРуб КАК Сумма,
	|	ТаблицаУслуги.СуммаНДСРуб КАК НДС,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СырьеИМатериалы) КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
	|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
	|		ИНАЧЕ Реквизиты.НоменклатурнаяГруппа
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ТаблицаУслуги.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ТаблицаУслуги.СтатьяЗатрат.ВидРасходовНУ КАК ВидРасходовНУ,
	|	ИСТИНА КАК ПринятиеКналоговомуУчету,
	|	ТаблицаУслуги.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	НЕОПРЕДЕЛЕНО КАК Партия
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеИзПереработки КАК Реквизиты
	|		ПО ТаблицаУслуги.Ссылка = Реквизиты.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаУслуги.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПодготовитьТаблицыМатериаловПродукцииИП(ТаблицаСписанныеМПЗ, ТаблицаВозвращенныеМатериалы, ВыпускПродукцииТаблица, ТаблицаРеквизиты, Движения) Экспорт
	Перем СтруктураТаблиц;
	
	СтруктураТаблиц	= Новый Структура("ТаблицаМатериалов, ПолученоПродукции, ПолученныеУслуги, УслугиОтнесенныеНаИМР");
	
	Реквизиты	= ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	ТипНоменклатурнойГруппы	= Тип("СправочникСсылка.НоменклатурныеГруппы");
	
	МассивТиповЗатрат = Новый Массив;
	МассивТиповЗатрат.Добавить(Тип("СправочникСсылка.СтатьиЗатрат"));
	МассивТиповЗатрат.Добавить(Тип("СправочникСсылка.ПрочиеДоходыИРасходы"));
	МассивТиповЗатрат.Добавить(Тип("СправочникСсылка.РасходыБудущихПериодов"));
	
	ВремТаблицаСписанныеМПЗ	= ТаблицаСписанныеМПЗ.Скопировать();
	ВремТаблицаСписанныеМПЗ.Колонки.Добавить("СчетЗатрат",				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ВремТаблицаСписанныеМПЗ.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ВремТаблицаСписанныеМПЗ.Колонки.Добавить("СтатьяЗатрат",			Новый ОписаниеТипов(МассивТиповЗатрат));
	
	ВремТаблицаСписанныеМПЗ.ЗагрузитьКолонку(ВремТаблицаСписанныеМПЗ.ВыгрузитьКолонку("КорСчетСписания"),	"СчетЗатрат");
	ВремТаблицаСписанныеМПЗ.ЗагрузитьКолонку(ВремТаблицаСписанныеМПЗ.ВыгрузитьКолонку("КорСубконто1"),		"НоменклатурнаяГруппа");
	ВремТаблицаСписанныеМПЗ.ЗагрузитьКолонку(ВремТаблицаСписанныеМПЗ.ВыгрузитьКолонку("КорСубконто2"),		"СтатьяЗатрат");
	
	// Подготовка таблиц для распределения материалов и услуг на готовую продукцию.
	ТаблицаМатериалов	= Новый ТаблицаЗначений;
	ТаблицаМатериалов.Колонки.Добавить("ИмяСписка",				ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаМатериалов.Колонки.Добавить("СинонимСписка",			ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаМатериалов.Колонки.Добавить("НомерСтроки",			ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ТаблицаМатериалов.Колонки.Добавить("Продукция",				Справочники.ТипВсеСсылки());
	ТаблицаМатериалов.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаМатериалов.Колонки.Добавить("Номенклатура",			Справочники.ТипВсеСсылки());
	ТаблицаМатериалов.Колонки.Добавить("Партия",				Документы.ТипВсеСсылки());
	ТаблицаМатериалов.Колонки.Добавить("СчетУчета",				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМатериалов.Колонки.Добавить("СчетЗатрат",			Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМатериалов.Колонки.Добавить("СтатьяЗатрат",			Справочники.ТипВсеСсылки());
	ТаблицаМатериалов.Колонки.Добавить("СчетДоходов",			Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаМатериалов.Колонки.Добавить("Количество",			ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаМатериалов.Колонки.Добавить("КоличествоПродукции",	ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ПолученныеУслуги	= Новый ТаблицаЗначений;
	ПолученныеУслуги.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ПолученныеУслуги.Колонки.Добавить("ХарактерДеятельности",	Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	ПолученныеУслуги.Колонки.Добавить("ВидМПЗ",					Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	ПолученныеУслуги.Колонки.Добавить("Номенклатура",			Справочники.ТипВсеСсылки());
	ПолученныеУслуги.Колонки.Добавить("Партия",					Документы.ТипВсеСсылки());
	ПолученныеУслуги.Колонки.Добавить("ДокументОплаты",			Документы.ТипВсеСсылки());
	ПолученныеУслуги.Колонки.Добавить("Количество",				ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ПолученныеУслуги.Колонки.Добавить("Сумма",					ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПолученныеУслуги.Колонки.Добавить("НДС",					ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПолученныеУслуги.Колонки.Добавить("СчетУчетаПродукции",		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПолученныеУслуги.Колонки.Добавить("Продукция",				Справочники.ТипВсеСсылки());
	
	УслугиОтнесенныеНаИМР	= Новый ТаблицаЗначений;
	УслугиОтнесенныеНаИМР.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	УслугиОтнесенныеНаИМР.Колонки.Добавить("ХарактерДеятельности",	Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	УслугиОтнесенныеНаИМР.Колонки.Добавить("СтатьяЗатрат",			Справочники.ТипВсеСсылки());
	УслугиОтнесенныеНаИМР.Колонки.Добавить("Партия",				Документы.ТипВсеСсылки());
	УслугиОтнесенныеНаИМР.Колонки.Добавить("ДокументОплаты",		Документы.ТипВсеСсылки());
	УслугиОтнесенныеНаИМР.Колонки.Добавить("МПЗ",					Справочники.ТипВсеСсылки());
	УслугиОтнесенныеНаИМР.Колонки.Добавить("ПартияМПЗ",				Документы.ТипВсеСсылки());
	УслугиОтнесенныеНаИМР.Колонки.Добавить("Количество",			ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	УслугиОтнесенныеНаИМР.Колонки.Добавить("Сумма",					ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	УслугиОтнесенныеНаИМР.Колонки.Добавить("НДС",					ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	ПолученоПродукции =Новый ТаблицаЗначений;
	ПолученоПродукции.Колонки.Добавить("СчетЗатрат",			Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПолученоПродукции.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ПолученоПродукции.Колонки.Добавить("Продукция",				Справочники.ТипВсеСсылки());
	ПолученоПродукции.Колонки.Добавить("СчетУчетаПродукции",	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПолученоПродукции.Колонки.Добавить("КоличествоПродукции",	ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ПолученоПродукции.Колонки.Добавить("ПлановаяСтоимость",		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// Заполняем таблицу "ПолученоПродукции"
	Для Каждого Продукция Из ВыпускПродукцииТаблица Цикл
		
		Если Продукция.ПлановаяСтоимость = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока	= ПолученоПродукции.Добавить();
		НоваяСтрока.СчетЗатрат				= Продукция.СчетЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа	= Продукция.НоменклатурнаяГруппаЗатрат;
		НоваяСтрока.Продукция				= Продукция.Номенклатура;
		НоваяСтрока.СчетУчетаПродукции		= Продукция.СчетСписания;
		НоваяСтрока.КоличествоПродукции		= Продукция.Количество;
		НоваяСтрока.ПлановаяСтоимость		= Продукция.ПлановаяСтоимость;
		
	КонецЦикла;
	
	ПолученоПродукции.Свернуть("СчетЗатрат, НоменклатурнаяГруппа, Продукция, СчетУчетаПродукции", "КоличествоПродукции, ПлановаяСтоимость");
		
	// Распределение материалов по готовой продукции.
	МассивКоэффициентов = ПолученоПродукции.ВыгрузитьКолонку("ПлановаяСтоимость");
		
	Для Каждого Материал Из ВремТаблицаСписанныеМПЗ Цикл
		
		Если Материал.Количество = 0 Тогда
			// Распределение невозможно
			Продолжить;
		КонецЕсли;
		
		Если МассивКоэффициентов.Количество() > 0 Тогда
			
			МассивКоличество = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(Материал.Количество, МассивКоэффициентов, 3);
			
			Для Индекс = 0 По МассивКоэффициентов.ВГраница() Цикл
				
				Если МассивКоличество[Индекс] = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				МатериалПоПродукции = ТаблицаМатериалов.Добавить();
				ЗаполнитьЗначенияСвойств(МатериалПоПродукции, Материал);
				ЗаполнитьЗначенияСвойств(МатериалПоПродукции, ПолученоПродукции[Индекс]);
				
				МатериалПоПродукции.СчетЗатрат	= ПолученоПродукции[Индекс].СчетУчетаПродукции;
				МатериалПоПродукции.Количество	= МассивКоличество[Индекс];
				
			КонецЦикла;
			
		Иначе
			
			МатериалПоПродукции	= ТаблицаМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(МатериалПоПродукции, Материал);
			МатериалПоПродукции.Продукция	= Материал.СтатьяЗатрат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределение услуг по готовой продукции.
	Для Каждого Услуга Из Движения.ИПМПЗ Цикл
		
		Если Услуга.Количество = 0 Тогда
			// Распределение невозможно
			Продолжить;
		КонецЕсли;
		
		Если МассивКоэффициентов.Количество() > 0 Тогда
			
			МассивКоличество	= ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(Услуга.Количество, МассивКоэффициентов, 3);
			МассивСумма			= ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(Услуга.Сумма, МассивКоэффициентов, 2);
			МассивНДС			= ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(Услуга.НДС, МассивКоэффициентов, 2);
			
			Для Индекс = 0 По МассивКоэффициентов.ВГраница() Цикл
				
				Если МассивКоличество[Индекс] = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				УслугаПоПродукции	= ПолученныеУслуги.Добавить();
				ЗаполнитьЗначенияСвойств(УслугаПоПродукции, Услуга);
				ЗаполнитьЗначенияСвойств(УслугаПоПродукции, ПолученоПродукции[Индекс]);
				
				УслугаПоПродукции.Количество	= МассивКоличество[Индекс];
				УслугаПоПродукции.Сумма			= ?(МассивСумма <> Неопределено, МассивСумма[Индекс], 0);
				УслугаПоПродукции.НДС			= ?(МассивНДС <> Неопределено, МассивНДС[Индекс], 0);
				
			КонецЦикла;
			
		Иначе
			
			// отнесение услуг на ИМР
			ИМР	= УслугиОтнесенныеНаИМР.Добавить();
			ЗаполнитьЗначенияСвойств(ИМР, Услуга);
			ИМР.СтатьяЗатрат = Услуга.Номенклатура;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// После распределения полученных услуг по готовой продукции движения регистра ИПМПЗ можно очистить,
	// чтобы не пришлось их лишний раз сторнировать из-за возможного несовпадения характера деятельности.
	Движения.ИПМПЗ.Очистить();
	
	ТаблицаМатериалов	= УчетДоходовИРасходовПредпринимателя.ДополнитьТаблицуСписанияМатериалов(ТаблицаМатериалов, ТаблицаРеквизиты);
	
	СтруктураТаблиц.ТаблицаМатериалов		= ТаблицаМатериалов;
	СтруктураТаблиц.ПолученоПродукции		= ПолученоПродукции;
	СтруктураТаблиц.ПолученныеУслуги		= ПолученныеУслуги;
	СтруктураТаблиц.УслугиОтнесенныеНаИМР	= УслугиОтнесенныеНаИМР;
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Процедура ДобавитьКолонкуСодержаниеПродукция(ТаблицаПродукция) Экспорт
	
	Если ТаблицаПродукция.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаПродукция.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаПродукция Цикл
		СтрокаТаблицы.Содержание = "Выпуск " + БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицыНДС(ТаблицыДокумента) Экспорт
	
	Товары = ТаблицыДокумента.ТаблицаТовары.СкопироватьКолонки(
		"НомерСтроки,Содержание,СуммаРуб,СуммаНДСРуб,СчетУчета,СчетУчетаНДС,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов,СтавкаНДС,Количество");
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов(
		"СправочникСсылка.Номенклатура,СправочникСсылка.ОбъектыСтроительства"));
	
	Для каждого СтрокаДокумента Из ТаблицыДокумента.ТаблицаТовары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
	КонецЦикла;
	Для каждого СтрокаДокумента Из ТаблицыДокумента.ТаблицаОборудование Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
	КонецЦикла;
	Для каждого СтрокаДокумента Из ТаблицыДокумента.ТаблицаОбъектыСтроительства Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
	КонецЦикла;
	
	Услуги = ТаблицыДокумента.ТаблицаУслуги.Скопировать(,
		"НомерСтроки,Содержание,СуммаРуб,СуммаНДСРуб,СчетЗатрат,СчетУчетаНДС,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов,СтавкаНДС,
		|ПодразделениеЗатрат,Субконто1,Субконто2,Субконто3");
	Услуги.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	
	Для каждого СтрокаУслуги Из Услуги Цикл
		Если ТипЗнч(СтрокаУслуги.Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтрокаУслуги.СтатьяЗатрат = СтрокаУслуги.Субконто1;
		ИначеЕсли ТипЗнч(СтрокаУслуги.Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтрокаУслуги.СтатьяЗатрат = СтрокаУслуги.Субконто2;
		ИначеЕсли ТипЗнч(СтрокаУслуги.Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтрокаУслуги.СтатьяЗатрат = СтрокаУслуги.Субконто3;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Товары,Услуги", Товары, Услуги);
		
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Накладная на передачу готовой продукции (МХ-18)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "МХ18";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на передачу готовой продукции (МХ-18)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Приходный ордер (М-4)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М4";
	КомандаПечати.Представление = НСтр("ru = 'Приходный ордер (М-4)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Счет-фактура от поставщика
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактураПолученный";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура за поставщика'");
	КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиСчетовФактурПолученных";
	КомандаПечати.Порядок       = 70;
	
	// Справка-расчет "Рублевые суммы документа в валюте"
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьРублевыхСуммДокументовВВалюте";
	КомандаПечати.Идентификатор = "РублевыеСуммыДокументаВВалюте";
	КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Рублевые суммы документа в валюте""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
	
	// Акт об оказании услуг за поставщика
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг за поставщика'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 70;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Поступление из переработки""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьМХ18(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент  = Новый ТабличныйДокумент;
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеИзПереработки_МХ18";

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_МХ18");

	Шапка                        = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы             = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	Строка                       = Макет.ПолучитьОбласть("Строка");
	Итого                        = Макет.ПолучитьОбласть("Итого");
	ИтогоПоНакладнойОднаСтраница = Макет.ПолучитьОбласть("ИтогоПоНакладнойОднаСтраница");
	ИтогоПоНакладнойМногоСтраниц = Макет.ПолучитьОбласть("ИтогоПоНакладнойМногоСтраниц");
	ПодвалТаблицы                = Макет.ПолучитьОбласть("ПодвалТаблицы");
	Подвал                       = Макет.ПолучитьОбласть("Подвал");

	ТоварКод = "Код";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
 	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеИзПереработки.Ссылка КАК Ссылка,
	|	ПоступлениеИзПереработки.Номер КАК НомерДокумента,
	|	ПоступлениеИзПереработки.Дата КАК ДатаДокумента,
	|	ПоступлениеИзПереработки.Организация КАК Организация,
	|	ПоступлениеИзПереработки.ПодразделениеОрганизации КАК Подразделение,
	|	ПоступлениеИзПереработки.ПодразделениеОрганизации.НаименованиеПолное КАК ПредставлениеПодразделения,
	|	ПоступлениеИзПереработки.Склад КАК Склад,
	|	ПоступлениеИзПереработкиПродукция.Номенклатура,
	|	ПоступлениеИзПереработкиПродукция.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПоступлениеИзПереработкиПродукция.Номенклатура.Артикул
	|		ИНАЧЕ ПоступлениеИзПереработкиПродукция.Номенклатура.Код
	|	КОНЕЦ КАК ТоварКод,
	|	1 КАК Коэффициент,
	|	ПоступлениеИзПереработкиПродукция.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПоступлениеИзПереработкиПродукция.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ПоступлениеИзПереработкиПродукция.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	СУММА(ПоступлениеИзПереработкиПродукция.Количество) КАК Количество,
	|	СУММА(ПоступлениеИзПереработкиПродукция.СуммаПлановая) КАК СуммаПлановая,
	|	СУММА(ПоступлениеИзПереработкиПродукция.Количество) КАК КоличествоМест,
	|	МИНИМУМ(ПоступлениеИзПереработкиПродукция.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеИзПереработки.Продукция КАК ПоступлениеИзПереработкиПродукция
	|	ПО ПоступлениеИзПереработки.Ссылка = ПоступлениеИзПереработкиПродукция.Ссылка
	|ГДЕ
	|	ПоступлениеИзПереработки.Ссылка В(&СписокОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеИзПереработки.Ссылка,
	|	ПоступлениеИзПереработки.Номер,
	|	ПоступлениеИзПереработки.Дата,
	|	ПоступлениеИзПереработки.Организация,
	|	ПоступлениеИзПереработки.ПодразделениеОрганизации,
	|	ПоступлениеИзПереработки.ПодразделениеОрганизации.НаименованиеПолное,
	|	ПоступлениеИзПереработки.Склад,
	|	ПоступлениеИзПереработкиПродукция.Номенклатура,
	|	ПоступлениеИзПереработкиПродукция.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПоступлениеИзПереработкиПродукция.Номенклатура.Артикул
	|		ИНАЧЕ ПоступлениеИзПереработкиПродукция.Номенклатура.Код
	|	КОНЕЦ,
	|	ПоступлениеИзПереработкиПродукция.Номенклатура.ЕдиницаИзмерения,
	|	ПоступлениеИзПереработкиПродукция.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ПоступлениеИзПереработкиПродукция.Номенклатура.ЕдиницаИзмерения.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Ссылка,
	|	НомерСтроки";

	ШапкаДокумента = Запрос.Выполнить().Выбрать();

	ПервыйДокумент = Истина;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Вычисление количества строк
	СоответствиеКоличествоСтрок = Новый Соответствие;
	Пока ШапкаДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл
		СчетчикСтрок = 0;
		Пока ШапкаДокумента.Следующий() Цикл
			СчетчикСтрок = СчетчикСтрок + 1;
		КонецЦикла;
		СоответствиеКоличествоСтрок.Вставить(ШапкаДокумента.Ссылка, СчетчикСтрок);
	КонецЦикла;	
	ШапкаДокумента.Сбросить();

	Пока ШапкаДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл

		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;

		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		// Выводим шапку
		Шапка.Параметры.Заполнить(ШапкаДокумента);
		Шапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ШапкаДокумента.НомерДокумента, Истина, Ложь);
		Шапка.Параметры.ДатаДокумента  = ШапкаДокумента.ДатаДокумента;

		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ШапкаДокумента.Организация,
			ШапкаДокумента.ДатаДокумента);

		Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
		Шапка.Параметры.ПредставлениеПолучателя  = ШапкаДокумента.Склад;
		Шапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;

		ТабДокумент.Вывести(Шапка);

		// Выводим заголовок таблицы
		ТабДокумент.Вывести(ЗаголовокТаблицы);

		// Инициализация счетчика строк
		НомерСтроки = 0;
		КоличествоСтрок = СоответствиеКоличествоСтрок.Получить(ШапкаДокумента.Ссылка);
		
		// Инициализация счетчика страниц
		НомерСтраницы = 1;

		// Инициализация итогов по странице
		ИтогоМассаБруттоНаСтранице = 0;
		ИтогоМестНаСтранице        = 0;
		ИтогоКоличествоНаСтранице  = 0;
		ИтогоСуммаНаСтранице       = 0;

		// Инициализация итогов по документу
		ИтогоМассаБрутто = 0;
		ИтогоМест        = 0;
		ИтогоКоличество  = 0;
		ИтогСумма        = 0;
		
		// Выводим многострочную часть документа
		Пока ШапкаДокумента.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ШапкаДокумента.СуммаПлановая) Тогда 
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			// Проверим, помещается ли строка с итогами на страницу, если нет, будем
			// выводить итоги по странице, а строку перенесем на следующую страницу
			СтрокаСИтогами = Новый Массив;
			СтрокаСИтогами.Добавить(Строка);

			// Если строка - последняя в таблице, проверим, поместятся ли
			// итоги по накладной и подвал.
			Если НомерСтроки = КоличествоСтрок Тогда

				Если НомерСтраницы > 1 Тогда
					СтрокаСИтогами.Добавить(Итого);
					СтрокаСИтогами.Добавить(ИтогоПоНакладнойМногоСтраниц);
					СтрокаСИтогами.Добавить(Подвал);
				Иначе
					СтрокаСИтогами.Добавить(ИтогоПоНакладнойОднаСтраница);
					СтрокаСИтогами.Добавить(Подвал);
				КонецЕсли;

			Иначе // не последняя строка, достаточно проверить, поместятся ли итоги по странице

				СтрокаСИтогами.Добавить(Итого);

			КонецЕсли;

			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСИтогами) Тогда

				// Выводим итоги по странице
				Итого.Параметры.ИтогМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице;
				Итого.Параметры.ИтогМестНаСтранице        = ИтогоМестНаСтранице;
				Итого.Параметры.ИтогКоличествоНаСтранице  = ИтогоКоличествоНаСтранице;
				Итого.Параметры.ИтогСуммаНаСтранице       = ИтогоСуммаНаСтранице;

				ТабДокумент.Вывести(Итого);

				// Выводим подвал таблицы
				ТабДокумент.Вывести(ПодвалТаблицы);

				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

				// Очистим итоги по странице
				ИтогоМассаБруттоНаСтранице = 0;
				ИтогоМестНаСтранице        = 0;
				ИтогоКоличествоНаСтранице  = 0;
				ИтогоСуммаНаСтранице       = 0;

				// Установим новый номер
				НомерСтраницы = НомерСтраницы + 1;
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;

				ТабДокумент.Вывести(ЗаголовокТаблицы);

			КонецЕсли;

			// Выводим строку
			Строка.Параметры.Заполнить(ШапкаДокумента);
			Строка.Параметры.Цена              = ?(ШапкаДокумента.Количество = 0, 0, ШапкаДокумента.СуммаПлановая
												 / ШапкаДокумента.Количество);
			Строка.Параметры.Сумма             = ШапкаДокумента.СуммаПлановая;

			Мест       = ШапкаДокумента.КоличествоМест;
			Мест       = ?(Мест <> Неопределено, Мест, 0);
			Количество = ШапкаДокумента.Количество;

			ТабДокумент.Вывести(Строка);

			// Увеличим итоги по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоМестНаСтранице        = ИтогоМестНаСтранице       + Мест;
			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице + Количество;
			ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице      + ШапкаДокумента.СуммаПлановая;

			// Увеличим итоги по документу
			ИтогоМассаБрутто = 0;
			ИтогоМест        = ИтогоМест + Мест;
			ИтогоКоличество  = ИтогоКоличество + Количество;
			ИтогСумма        = ИтогСумма + ШапкаДокумента.СуммаПлановая;

		КонецЦикла;

		// Если страниц много, выводим промежуточные итоги по последней странице
		// перед итогами по накладной
		Если НомерСтраницы > 1 Тогда

			// Выводим итоги по странице
			Итого.Параметры.ИтогМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице;
			Итого.Параметры.ИтогМестНаСтранице        = ИтогоМестНаСтранице;
			Итого.Параметры.ИтогКоличествоНаСтранице  = ИтогоКоличествоНаСтранице;
			Итого.Параметры.ИтогСуммаНаСтранице       = ИтогоСуммаНаСтранице;

			ТабДокумент.Вывести(Итого);

			// Выводим итоги по накладной
			ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
			ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогМест        = ИтогоМест;
			ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогКоличество  = ИтогоКоличество;
			ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогСумма       = ИтогСумма;

			ТабДокумент.Вывести(ИтогоПоНакладнойМногоСтраниц);

		Иначе // только итоги по накладной

			ИтогоПоНакладнойОднаСтраница.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
			ИтогоПоНакладнойОднаСтраница.Параметры.ИтогМест        = ИтогоМест;
			ИтогоПоНакладнойОднаСтраница.Параметры.ИтогКоличество  = ИтогоКоличество;
			ИтогоПоНакладнойОднаСтраница.Параметры.ИтогСумма       = ИтогСумма;

			ТабДокумент.Вывести(ИтогоПоНакладнойОднаСтраница);

		КонецЕсли;

		// Выводим подвал таблицы
		ТабДокумент.Вывести(ПодвалТаблицы);

		// Выводим подвал документа
		Подвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, , ",,,,,,,,0");
		Подвал.Параметры.ИтогСуммаПрописью	= ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогСумма, ВалютаРегламентированногоУчета);
		
		ТабДокумент.Вывести(Подвал);

		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ШапкаДокумента.Ссылка);
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция ПечатьМ4(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М4");

	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.АвтоМасштаб        = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_М4";

	ОбластьМакетаШапка              = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакетаЗаголовокТаблицы   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаСтрока             = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвалСтрок        = Макет.ПолучитьОбласть("ПодвалСтрок");
	ОбластьМакетаИтого              = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал             = Макет.ПолучитьОбласть("Подвал");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеИзПереработкиНоменклатура.Номер,
	|	ПоступлениеИзПереработкиНоменклатура.Ссылка,
	|	ПоступлениеИзПереработкиНоменклатура.ДатаСоставления КАК ДатаДокумента,
	|	ПоступлениеИзПереработкиНоменклатура.ДатаСоставления,
	|	ПоступлениеИзПереработкиНоменклатура.Организация,
	|	ПоступлениеИзПереработкиНоменклатура.Организация КАК ЮридическоеФизическоеЛицо,
	|	ПоступлениеИзПереработкиНоменклатура.МестоПриемки,
	|	ПоступлениеИзПереработкиНоменклатура.СкладНаименование,
	|	ПоступлениеИзПереработкиНоменклатура.ПоставщикКод,
	|	ПоступлениеИзПереработкиНоменклатура.Поставщик,
	|	ПоступлениеИзПереработкиНоменклатура.РасчетыВУсловныхЕдиницах,
	|	ПоступлениеИзПереработкиНоменклатура.ВалютаДокумента,
	|	ПоступлениеИзПереработкиНоменклатура.Курс,
	|	ПоступлениеИзПереработкиНоменклатура.Кратность,
	|	ПоступлениеИзПереработкиНоменклатура.СуммаВключаетНДС,
	|	ПоступлениеИзПереработкиНоменклатура.СубСчет,
	|	ПоступлениеИзПереработкиНоменклатура.ПодразделениеЗатрат,
	|	ПоступлениеИзПереработкиНоменклатура.Номенклатура,
	|	ПоступлениеИзПереработкиНоменклатура.ТоварНаименование,
	|	ПоступлениеИзПереработкиНоменклатура.ТоварКод,
	|	ПоступлениеИзПереработкиНоменклатура.ЕдиницаИзмеренияНаименование,
	|	ПоступлениеИзПереработкиНоменклатура.ЕдиницаИзмеренияКод,
	|	ПоступлениеИзПереработкиНоменклатура.НомерТЧ,
	|	СУММА(ПоступлениеИзПереработкиНоменклатура.КоличествоПринято) КАК КоличествоПринято,
	|	СУММА(ПоступлениеИзПереработкиНоменклатура.Стоимость) КАК Стоимость,
	|	МИНИМУМ(ПоступлениеИзПереработкиНоменклатура.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеИзПереработки.Номер КАК Номер,
	|		ПоступлениеИзПереработки.Ссылка КАК Ссылка,
	|		ПоступлениеИзПереработки.Дата КАК ДатаДокумента,
	|		ПоступлениеИзПереработки.Дата КАК ДатаСоставления,
	|		ПоступлениеИзПереработки.Организация КАК Организация,
	|		ПоступлениеИзПереработки.Организация КАК ЮридическоеФизическоеЛицо,
	|		ПоступлениеИзПереработки.Склад КАК МестоПриемки,
	|		ПоступлениеИзПереработки.Склад.Представление КАК СкладНаименование,
	|		ПоступлениеИзПереработки.Контрагент.Код КАК ПоставщикКод,
	|		ПоступлениеИзПереработки.Контрагент КАК Поставщик,
	|		ПоступлениеИзПереработки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|		ПоступлениеИзПереработки.ВалютаДокумента КАК ВалютаДокумента,
	|		ПоступлениеИзПереработки.КурсВзаиморасчетов КАК Курс,
	|		ПоступлениеИзПереработки.КратностьВзаиморасчетов КАК Кратность,
	|		ПоступлениеИзПереработки.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|		ПоступлениеИзПереработки.СчетЗатрат КАК СубСчет,
	|		ПоступлениеИзПереработки.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|		ПоступлениеИзПереработкиПродукция.Номенклатура КАК Номенклатура,
	|		ПоступлениеИзПереработкиПродукция.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ПоступлениеИзПереработкиПродукция.Номенклатура.Артикул
	|			ИНАЧЕ ПоступлениеИзПереработкиПродукция.Номенклатура.Код
	|		КОНЕЦ КАК ТоварКод,
	|		ПоступлениеИзПереработкиПродукция.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|		ПоступлениеИзПереработкиПродукция.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|		ПоступлениеИзПереработкиПродукция.Количество КАК КоличествоПринято,
	|		ПоступлениеИзПереработкиПродукция.СуммаПлановая КАК Стоимость,
	|		1 КАК НомерТЧ,
	|		ПоступлениеИзПереработкиПродукция.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеИзПереработки.Продукция КАК ПоступлениеИзПереработкиПродукция
	|			ПО ПоступлениеИзПереработки.Ссылка = ПоступлениеИзПереработкиПродукция.Ссылка
	|	ГДЕ
	|		ПоступлениеИзПереработки.Ссылка В(&СписокОбъектов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеИзПереработки.Номер,
	|		ПоступлениеИзПереработки.Ссылка,
	|		ПоступлениеИзПереработки.Дата,
	|		ПоступлениеИзПереработки.Дата,
	|		ПоступлениеИзПереработки.Организация,
	|		ПоступлениеИзПереработки.Организация,
	|		ПоступлениеИзПереработки.Склад,
	|		ПоступлениеИзПереработки.Склад.Представление,
	|		ПоступлениеИзПереработки.Контрагент.Код,
	|		ПоступлениеИзПереработки.Контрагент,
	|		ПоступлениеИзПереработки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
	|		ПоступлениеИзПереработки.ВалютаДокумента,
	|		ПоступлениеИзПереработки.КурсВзаиморасчетов,
	|		ПоступлениеИзПереработки.КратностьВзаиморасчетов,
	|		ПоступлениеИзПереработки.СуммаВключаетНДС,
	|		ПоступлениеИзПереработки.СчетУчетаРасчетовСКонтрагентом,
	|		ПоступлениеИзПереработки.ПодразделениеЗатрат,
	|		ПоступлениеИзПереработкиВозвращенныеМатериалы.Номенклатура,
	|		ПоступлениеИзПереработкиВозвращенныеМатериалы.Номенклатура.НаименованиеПолное,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ПоступлениеИзПереработкиВозвращенныеМатериалы.Номенклатура.Артикул
	|			ИНАЧЕ ПоступлениеИзПереработкиВозвращенныеМатериалы.Номенклатура.Код
	|		КОНЕЦ,
	|		ПоступлениеИзПереработкиВозвращенныеМатериалы.Номенклатура.ЕдиницаИзмерения.Наименование,
	|		ПоступлениеИзПереработкиВозвращенныеМатериалы.Номенклатура.ЕдиницаИзмерения.Код,
	|		ПоступлениеИзПереработкиВозвращенныеМатериалы.Количество,
	|		0,
	|		2,
	|		ПоступлениеИзПереработкиВозвращенныеМатериалы.НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеИзПереработки.ВозвращенныеМатериалы КАК ПоступлениеИзПереработкиВозвращенныеМатериалы
	|			ПО ПоступлениеИзПереработки.Ссылка = ПоступлениеИзПереработкиВозвращенныеМатериалы.Ссылка
	|	ГДЕ
	|		ПоступлениеИзПереработки.Ссылка В(&СписокОбъектов)) КАК ПоступлениеИзПереработкиНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеИзПереработкиНоменклатура.Ссылка,
	|	ПоступлениеИзПереработкиНоменклатура.Номер,
	|	ПоступлениеИзПереработкиНоменклатура.ДатаСоставления,
	|	ПоступлениеИзПереработкиНоменклатура.Организация,
	|	ПоступлениеИзПереработкиНоменклатура.МестоПриемки,
	|	ПоступлениеИзПереработкиНоменклатура.Поставщик,
	|	ПоступлениеИзПереработкиНоменклатура.РасчетыВУсловныхЕдиницах,
	|	ПоступлениеИзПереработкиНоменклатура.ВалютаДокумента,
	|	ПоступлениеИзПереработкиНоменклатура.Курс,
	|	ПоступлениеИзПереработкиНоменклатура.Кратность,
	|	ПоступлениеИзПереработкиНоменклатура.СуммаВключаетНДС,
	|	ПоступлениеИзПереработкиНоменклатура.СубСчет,
	|	ПоступлениеИзПереработкиНоменклатура.ПодразделениеЗатрат,
	|	ПоступлениеИзПереработкиНоменклатура.Номенклатура,
	|	ПоступлениеИзПереработкиНоменклатура.ТоварКод,
	|	ПоступлениеИзПереработкиНоменклатура.ЕдиницаИзмеренияНаименование,
	|	ПоступлениеИзПереработкиНоменклатура.ЕдиницаИзмеренияКод,
	|	ПоступлениеИзПереработкиНоменклатура.СкладНаименование,
	|	ПоступлениеИзПереработкиНоменклатура.ПоставщикКод,
	|	ПоступлениеИзПереработкиНоменклатура.НомерТЧ,
	|	ПоступлениеИзПереработкиНоменклатура.ТоварНаименование,
	|	ПоступлениеИзПереработкиНоменклатура.ДатаСоставления,
	|	ПоступлениеИзПереработкиНоменклатура.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеИзПереработкиНоменклатура.Ссылка,
	|	ДатаДокумента,
	|	ПоступлениеИзПереработкиНоменклатура.НомерТЧ,
	|	НомерСтроки УБЫВ";

	ПервыйДокумент = Истина;

	Шапка = Запрос.Выполнить().Выбрать();

	// Вычисление количества строк
	СоответствиеКоличествоСтрок = Новый Соответствие;
	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		СчетчикСтрок = 0;
		Пока Шапка.Следующий() Цикл
			СчетчикСтрок = СчетчикСтрок + 1;
		КонецЦикла;
		СоответствиеКоличествоСтрок.Вставить(Шапка.Ссылка, СчетчикСтрок);
	КонецЦикла;	
	Шапка.Сбросить();

	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл

		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;

		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		// Выводим общие реквизиты шапки
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.ЮридическоеФизическоеЛицо, Шапка.ДатаСоставления);

		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации   = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОПокупателе);
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.НомерДокумента             = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Истина, Ложь);
		ОбластьМакетаШапка.Параметры.ПредставлениеПодразделения = ?(ЗначениеЗаполнено(Шапка.ПодразделениеЗатрат),Шапка.ПодразделениеЗатрат.Наименование,"");

		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Выводим заголовок докмента
		ОбластьМакетаЗаголовокДокумента.Параметры.Заполнить(Шапка);
		ОбластьМакетаЗаголовокДокумента.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
		ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаСоставления),
			"НаименованиеДляПечатныхФорм,");
		ОбластьМакетаЗаголовокДокумента.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокДокумента);

		// Выводим заголовок таблицы
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

		// Инициализация итогов в документе
		ИтогоКоличествоПринято = 0;
		ИтогоСуммаБезНДС       = 0;
		ИтогоСуммаНДС          = 0;
		ИтогоВсегоСНДС         = 0;
		Ном                    = 0;

		// Инициализация счетчиков страниц и строк
		НомерСтраницы   = 1;
		НомерСтроки     = 0;
		КоличествоСтрок = СоответствиеКоличествоСтрок.Получить(Шапка.Ссылка);

		// Выводим многострочную часть докмента
		Пока Шапка.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(Шапка.Номенклатура) 
				ИЛИ (НЕ ЗначениеЗаполнено(Шапка.Стоимость) И Шапка.НомерТЧ = 1) Тогда 
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;

			ОбластьМакетаСтрока.Параметры.Заполнить(Шапка);

			Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
			ВсегоСНДС = Шапка.Стоимость;

			КоличествоПринято = ?(ЗначениеЗаполнено(Шапка.КоличествоПринято), Шапка.КоличествоПринято, 0);
			СуммаНДС          = 0;
			Цена              = (ВсегоСНДС - СуммаНДС) / ?(ЗначениеЗаполнено(КоличествоПринято), КоличествоПринято, 1);

			ОбластьМакетаСтрока.Параметры.КоличествоПринято = КоличествоПринято;
			ОбластьМакетаСтрока.Параметры.ВсегоСНДС         = ВсегоСНДС;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС       = ВсегоСНДС - СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДС          = СуммаНДС;
			ОбластьМакетаСтрока.Параметры.Цена              = Цена;
			ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(Шапка.ТоварНаименование);

			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);  // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			Иначе                                              // иначе - только подвал строк
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалСтрок);
			КонецЕсли;

			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

				ТабДокумент.Вывести(ОбластьМакетаПодвалСтрок);
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();


				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;

				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

			КонецЕсли;

			ТабДокумент.Вывести(ОбластьМакетаСтрока);

			ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
			ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС + ВсегоСНДС - СуммаНДС;
			ИтогоСуммаНДС          = ИтогоСуммаНДС + СуммаНДС;
			ИтогоВсегоСНДС         = ИтогоВсегоСНДС + ВсегоСНДС;

		КонецЦикла;

		// Выводим итоги по документу
		ОбластьМакетаИтого.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
		ОбластьМакетаИтого.Параметры.ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС;
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС          = ИтогоСуммаНДС;
		ОбластьМакетаИтого.Параметры.ИтогоВсегоСНДС         = ИтогоВсегоСНДС;
		ТабДокумент.Вывести(ОбластьМакетаИтого);

		// Выводим итоги по документу
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МХ18") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МХ18", "Накладная МХ-18",
			ПечатьМХ18(МассивОбъектов, ОбъектыПечати), , "ОбщийМакет.ПФ_MXL_МХ18");
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М4") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М4", "М-4 (Приходный ордер)",
			ПечатьМ4(МассивОбъектов, ОбъектыПечати), , "ОбщийМакет.ПФ_MXL_М4");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		ТаблицаСведенийАктаОбОказанииУслуг = ПолучитьТаблицуСведенийАктаОбОказанииУслуг(МассивОбъектов);
		СтруктураПараметровПечати = Новый Структура;
		СтруктураПараметровПечати.Вставить("ВидДокументаПечати", "ПоступлениеИзПереработки");
		СтруктураПараметровПечати.Вставить("ИмяПараметровПечати", "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеИзПереработки_Акт");
		СтруктураПараметровПечати.Вставить("ИмяМакетаПечати", "Документ.ПоступлениеИзПереработки.ПФ_MXL_Акт");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт", "Акт об оказании услуг за поставщика", 
			ПечатьТорговыхДокументов.ПечатьАктаОбОказанииУслуг(ТаблицаСведенийАктаОбОказанииУслуг, ОбъектыПечати, СтруктураПараметровПечати),,
					"Документ.ПоступлениеИзПереработки.ПФ_MXL_Акт");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийАктаОбОказанииУслуг()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеИзПереработки.Ссылка КАК Ссылка,
	|	ПоступлениеИзПереработки.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПоступлениеИзПереработки.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|ГДЕ
	|	ПоступлениеИзПереработки.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеИзПереработки.Ссылка КАК Документ,
	|	ПоступлениеИзПереработки.Дата КАК ДатаДляПолученияСведений,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	ПоступлениеИзПереработки.Контрагент КАК Поставщик,
	|	ПРЕДСТАВЛЕНИЕ(ПоступлениеИзПереработки.ДоговорКонтрагента) КАК ПредставлениеДоговора,
	|	ПоступлениеИзПереработки.Организация КАК Получатель,
	|	ПоступлениеИзПереработки.Организация КАК Организация,
	|	ПоступлениеИзПереработки.ПодразделениеОрганизации КАК Подразделение,
	|	"""" КАК БанковскийСчетПродавца,
	|	ПоступлениеИзПереработки.ВалютаДокумента КАК Валюта,
	|	ПоступлениеИзПереработки.КурсВзаиморасчетов КАК Курс,
	|	ПоступлениеИзПереработки.КратностьВзаиморасчетов КАК Кратность,
	|	ЕСТЬNULL(ПоступлениеИзПереработки.ВалютаДокумента.Код, """") КАК ВалютаКод,
	|	ЕСТЬNULL(ПоступлениеИзПереработки.ВалютаДокумента.Наименование, """") КАК ВалютаНаименование,
	|	ЕСТЬNULL(ПоступлениеИзПереработки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ПоступлениеИзПереработки.СуммаВключаетНДС,
	|	"""" КАК Руководитель,
	|	"""" КАК ЗаРуководителяПоПриказу
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ПоступлениеИзПереработки.Организация = ДанныеПервичныхДокументов.Организация
	|			И ПоступлениеИзПереработки.Ссылка = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ПоступлениеИзПереработки.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыДляПечати.Ссылка
	|			ИЗ
	|				ДокументыДляПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеИзПереработки.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги) КАК ТабличнаяЧасть,
	|	ПоступлениеИзПереработки.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеИзПереработки.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ ПоступлениеИзПереработки.Содержание ПОДОБНО """"
	|			ТОГДА ПоступлениеИзПереработки.Содержание
	|		КОГДА НЕ ПоступлениеИзПереработки.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ПоступлениеИзПереработки.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ ПоступлениеИзПереработки.Номенклатура.Наименование
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПоступлениеИзПереработки.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ПоступлениеИзПереработки.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК НоменклатураКод,
	|	ЕСТЬNULL(ПоступлениеИзПереработки.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ПоступлениеИзПереработки.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(ПоступлениеИзПереработки.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ПоступлениеИзПереработки.Количество,
	|	ПоступлениеИзПереработки.Цена КАК Цена,
	|	ПоступлениеИзПереработки.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА ПоступлениеИзПереработки.Сумма - ПоступлениеИзПереработки.СуммаНДС
	|		ИНАЧЕ ПоступлениеИзПереработки.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ПоступлениеИзПереработки.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеИзПереработки.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоВРублях,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСВРублях,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуществуютЗаписиРублевыхСумм
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеИзПереработки.Услуги КАК ПоступлениеИзПереработки
	|		ПО ДокументыДляПечати.Ссылка = ПоступлениеИзПереработки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (ПоступлениеИзПереработки.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (ПоступлениеИзПереработки.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	НомерСтроки";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуСведенийАктаОбОказанииУслуг(Знач МассивОбъектов) Экспорт
	
	ТаблицаСведений = ПечатьТорговыхДокументов.ПолучитьОписаниеАктаОбОказанииУслуг();
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийАктаОбОказанииУслуг();
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	СтрокиДокументов = РезультатыЗапроса[3].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	ВалютаРегУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	РеквизитыВалютыРегУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаРегУчета, "Код, Наименование");
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		Если Выборка.РасчетыВУсловныхЕдиницах Тогда
			СведенияОДокументе.Валюта             = ВалютаРегУчета;
			СведенияОДокументе.ВалютаКод          = РеквизитыВалютыРегУчета.Код;
			СведенияОДокументе.ВалютаНаименование = РеквизитыВалютыРегУчета.Наименование;
		КонецЕсли;
		
		ТаблицаДокумента = ПечатьТорговыхДокументов.ПолучитьОписаниеТаблицыАктаОбОказанииУслуг();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		НуженПересчетВРубли = Ложь;
		Если Выборка.Валюта <> ВалютаРегУчета
			И Выборка.РасчетыВУсловныхЕдиницах Тогда
			НуженПересчетВРубли = Истина;
		КонецЕсли;
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
			Если НуженПересчетВРубли Тогда
				Если Строка.СуществуютЗаписиРублевыхСумм Тогда
					СтрокаТаблицыДокумента.СуммаНДС = Строка.НДСВРублях;
					СтрокаТаблицыДокумента.СуммаБезНДС = Строка.ВсегоВРублях - Строка.НДСВРублях;
				Иначе
					Кратность = ?(Выборка.Кратность = 0, 1, Выборка.Кратность);
					СтрокаТаблицыДокумента.СуммаНДС = Строка.СуммаНДС * Выборка.Курс / Кратность;;
					СтрокаТаблицыДокумента.СуммаБезНДС = (Строка.СуммаБезНДС + Строка.СуммаНДС) * Выборка.Курс / Кратность - СтрокаТаблицыДокумента.СуммаНДС;
				КонецЕсли;
				СтрокаТаблицыДокумента.Сумма = СтрокаТаблицыДокумента.СуммаБезНДС + ?(Выборка.СуммаВключаетНДС, СтрокаТаблицыДокумента.СуммаНДС, 0);
				СтрокаТаблицыДокумента.Цена  = ?(СтрокаТаблицыДокумента.Количество=0, СтрокаТаблицыДокумента.Сумма, СтрокаТаблицыДокумента.Сумма / СтрокаТаблицыДокумента.Количество);
			КонецЕсли;
			СтрокаТаблицыДокумента.СуммаСНДС = СтрокаТаблицыДокумента.СуммаБезНДС + СтрокаТаблицыДокумента.СуммаНДС;
			
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		ПечатьТорговыхДокументов.ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, Новый Структура("ЗаполнятьРуководителя"));
		
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРублевыеСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента",                                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",                                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РегистрСведенийРублевыеСуммыДокументовВВалюте",             НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ПоДокументамЗачетнныхАвансов",                           НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",                                          НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ПоДокументамЗачетнныхАвансов",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ТаблицаПоШапкеДокумента",                    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                                               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_РегистрСведенийРублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	ДанныеОбрабатываемогоДокумента.Проведен КАК Проведен,
	|	ДанныеОбрабатываемогоДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	ДанныеОбрабатываемогоДокумента.Контрагент КАК Контрагент,
	|	ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.УчетАгентскогоНДС, ЛОЖЬ) КАК УчетАгентскогоНДС,
	|	ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	ДанныеОбрабатываемогоДокумента.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПоШапкеДокумента.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаПоШапкеДокумента.Дата КАК Дата,
	|	ВТ_ТаблицаПоШапкеДокумента.Проведен КАК Проведен,
	|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация,
	|	ВТ_ТаблицаПоШапкеДокумента.Контрагент,
	|	ВТ_ТаблицаПоШапкеДокумента.ДоговорКонтрагента,
	|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов,
	|	ВТ_ТаблицаПоШапкеДокумента.НомерВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.ДатаВходящегоДокумента,
	|	ВТ_ТаблицаПоШапкеДокумента.РасчетыВУсловныхЕдиницах,
	|	ВТ_ТаблицаПоШапкеДокумента.УчетАгентскогоНДС,
	|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РублевыеСуммыДокументовВВалюте.Всего,
	|	РублевыеСуммыДокументовВВалюте.НДС,
	|	РублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО РублевыеСуммыДокументовВВалюте.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|			И (РублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Ссылка,
	|	Хозрасчетный.Сумма КАК СуммаПредоплатыРуб,
	|	Хозрасчетный.ВалютнаяСуммаДт КАК СуммаПредоплатыВал,
	|	ХозрасчетныйСубконто.Значение КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйСубконто.Значение) КАК ДокументПредоплатыПредставление,
	|	ВТ_ТаблицаПоШапкеДокумента.Организация КАК Организация
	|ПОМЕСТИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
	|		ПО Хозрасчетный.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
	|			И Хозрасчетный.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам
	|			И Хозрасчетный.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
	|			И (ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Хозрасчетный.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка КАК Ссылка,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыРуб КАК СуммаПредоплатыРуб,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.СуммаПредоплатыВал КАК СуммаПредоплатыВал,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ,
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.ДокументПредоплатыПредставление,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента
	|ИЗ
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента КАК ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Организация = ДанныеПервичныхДокументов.Организация
	|			И ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Документ = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента.Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРуб),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПоДокументамЗачетнныхАвансовДоПолученияНомераИДатыВходящегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеИзПереработкиУслуги.Ссылка КАК Ссылка,
	|	ПоступлениеИзПереработкиУслуги.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеИзПереработкиУслуги.Номенклатура КАК Товар,
	|	ПоступлениеИзПереработкиУслуги.Номенклатура.Наименование КАК ТоварНаименование,
	|	ПоступлениеИзПереработкиУслуги.Сумма КАК ВсегоВал,
	|	ПоступлениеИзПереработкиУслуги.СуммаНДС КАК НДСВал,
	|	ПоступлениеИзПереработкиУслуги.СтавкаНДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК ВсегоРуб,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДСРуб,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДСРуб
	|ИЗ
	|	Документ.ПоступлениеИзПереработки.Услуги КАК ПоступлениеИзПереработкиУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ПоступлениеИзПереработкиУслуги.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И ПоступлениеИзПереработкиУслуги.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|ГДЕ
	|	ПоступлениеИзПереработкиУслуги.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРуб),
	|	СУММА(НДСРуб),
	|	СУММА(НалоговаяБазаНДСРуб)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли