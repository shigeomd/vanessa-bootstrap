#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ПодчиненныеСчетаФактуры; // таблица счетов-фактур, основанием которых является этот документ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") 
		+ ОплатаПоставщикам.Итог("Сумма") 
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Прочее");
		
	СформироватьСчетаФактуры(Отказ);
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата) Тогда
		НДСВключенВСтоимость = Ложь;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись
		И НЕ ЭтоНовый() Тогда
		ОбновитьСчетаФактуры(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	СуммаВключаетНДС = Ложь;

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.АвансовыйОтчет.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеТовары(ПараметрыПроведения.ПоступлениеТоваровТаблица);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеПрочее(ПараметрыПроведения.ПоступлениеПрочееТаблица);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеТовары(ПараметрыПроведения.ПоступлениеТарыТаблица);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеОплата(ПараметрыПроведения.ПогашениеЗадолженностиТаблица);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеТовары(ПараметрыПроведения.ТоварыНДС);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеПрочее(ПараметрыПроведения.УслугиНДС);
	Документы.АвансовыйОтчет.ДобавитьКолонкуСодержаниеТовары(ПараметрыПроведения.НомераГТД);
	
	ТаблицаВзаиморасчетов     = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.ПогашениеЗадолженностиТаблица, ПараметрыПроведения.ПогашениеЗадолженности, Отказ);
	
	ТаблицаСуммовыхРазниц     = УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(ТаблицаВзаиморасчетов,
		ПараметрыПроведения.Реквизиты, Отказ);
	
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН        = Новый Структура("ТаблицаРасчетов", ТаблицаВзаиморасчетов);
	
	// Учет доходов и расходов ИП
	ТаблицаТоваровИП          = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаТоваров,
		ПараметрыПроведения.Реквизиты);
	
	ТаблицаПрочееИП           = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаПрочее,
		ПараметрыПроведения.Реквизиты);
	
	СтруктураТаблицМПЗ        = Новый Структура("ТаблицаТоваров, ТаблицаПрочее",
		ТаблицаТоваровИП, ТаблицаПрочееИП);
	
	ТаблицыОплатыПоставщикуИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыОплатыПоставщику(
		ТаблицаВзаиморасчетов, ПараметрыПроведения.ПогашениеЗадолженности);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Поступление товаров
	УчетТоваров.СформироватьДвиженияПоступлениеТоваров(
		ПараметрыПроведения.ПоступлениеТоваровТаблица, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Поступление возвратной тары
	УчетТоваров.СформироватьДвиженияПоступлениеТарыНесколькоКонтрагентов(
		ПараметрыПроведения.ПоступлениеТарыТаблица, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Поступление прочее
	УчетДоходовРасходов.СформироватьДвиженияПоступлениеУслуг(
		ПараметрыПроведения.ПоступлениеПрочееТаблица, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	//Движения регистра "Рублевые суммы документов в валюте"
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(ПараметрыПроведения.ПоступлениеТоваровТаблица, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеБезНДС(ПараметрыПроведения.ПогашениеЗадолженностиТаблица, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	//Табличная часть "Прочее"
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеПоступлениеСобственныхТоваровУслуг(ПараметрыПроведения.ПоступлениеПрочееТаблица, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// НДС
	УчетНДС.СформироватьДвиженияПоступлениеТоваровУслугОтПодотчетногоЛица(
		ПараметрыПроведения.ТоварыНДС, ПараметрыПроведения.УслугиНДС, ПараметрыПроведения.НомераГТД,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетНДСРаздельный.СформироватьДвиженияПоступлениеТоваровУслугОтПодотчетногоЛица(
		ПараметрыПроведения.ТоварыНДС, ПараметрыПроведения.УслугиНДС,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Оплата
	УчетВзаиморасчетов.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчетов,
		ПараметрыПроведения.ПогашениеЗадолженности, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(ТаблицаСуммовыхРазниц,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// УСН
	СуммаСторноРасхода = 0;
	УчетУСН.ПоступлениеРасходовУСН(ПараметрыПроведения.ПоступлениеРасходовУСНТаблицаРасходов, 
		ПараметрыПроведения.ПоступлениеРасходовУСНРеквизиты, СуммаСторноРасхода, Движения, Отказ);
	
	Если НЕ Отказ И Движения.РасходыПриУСН.Количество() > 0 Тогда
		Движения.РасходыПриУСН.Записать(Истина);
		Движения.РасходыПриУСН.Записывать = Ложь;
	КонецЕсли; 
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(СтруктураТаблицМПЗ,
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаВзаиморасчетов,, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОплатаПоставщику(
		ТаблицыОплатыПоставщикуИП,
		ПараметрыПроведения.ПогашениеЗадолженности, Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Движения.Записать();
	
	ОбновитьСчетаФактуры(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ПроводитьПоНУ = БухгалтерскийУчетПереопределяемый.ПроводитьПоНУ(Организация, Дата);
	
	ОтражатьВНалоговомУчете                = ПроводитьПоНУ И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ОтражатьВНалоговомУчетеУСН             = ПроводитьПоНУ И УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата);
	ОтражатьВНалоговомУчетеУСНДоходы       = ПроводитьПоНУ И УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Дата);
	ОтражатьВНалоговомУчетеПредпринимателя = ПроводитьПоНУ И УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	РаздельныйУчетНДСНа19Счете			   = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);
	ПлательщикНДС 						   = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	
	Если Товары.Количество() = 0 
		И (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") ИЛИ ВозвратнаяТара.Количество() = 0) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	// Проверка табличной части "Товары"
	Если НЕ ОтражатьВНалоговомУчетеУСН Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ОтражениеВУСН");
	КонецЕсли;
	
	// Нижеперечисленные реквизиты будут проверяться по условиям:
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Поставщик");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДатаСФ");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерСФ");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СтранаПроисхождения");
		
	Для каждого СтрокаТаблицы Из Товары Цикл
		Префикс = "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Товары'");
		
		// Проверка страны происхождения
		Если УчетТоваров.НеУказанаСтранаПроисхождения(СтрокаТаблицы.НомерГТД, СтрокаТаблицы.СтранаПроисхождения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Страна происхождения'"),
				СтрокаТаблицы.НомерСтроки, ИмяСписка);
			Поле = Префикс + "СтранаПроисхождения";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если СтрокаТаблицы.ПредъявленСФ Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Поставщик'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "Поставщик";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Дата счета-фактуры'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "ДатаСФ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			Если ПустаяСтрока(СтрокаТаблицы.НомерСФ) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Номер счета-фактуры'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "НомерСФ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка табличной части "Возвратная тара"
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.ДоговорКонтрагента");
		
	КонецЕсли;
	
	// Проверять надо только по доп.условиям
	МассивНепроверяемыхРеквизитов.Добавить("ОплатаПоставщикам.Сделка"); // доп.условие - СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
	
	// Проверка табличной части "Оплата поставщикам"
	Для каждого СтрокаТаблицы Из ОплатаПоставщикам Цикл
		Префикс = "ОплатаПоставщикам[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Оплата поставщикам'");
		
		Если СтрокаТаблицы.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Документ расчетов'"),
				СтрокаТаблицы.НомерСтроки, ИмяСписка);
			Поле = Префикс + "Сделка";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			Поле = Префикс + "ДоговорКонтрагента";
			ТекстСообщения = "";
			ПроведениеВозможно = УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
				ЭтотОбъект, СтрокаТаблицы.ДоговорКонтрагента, ТекстСообщения);
			Если НЕ ПроведениеВозможно Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
					НСтр("ru = 'Договор'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОтражатьВНалоговомУчетеУСН Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Прочее.ОтражениеВУСН");
	КонецЕсли;
	
	// Нижеперечисленные реквизиты будут проверяться по условиям:
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.Поставщик");
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.ДатаСФ");
	МассивНепроверяемыхРеквизитов.Добавить("Прочее.НомерСФ");
	
	Для каждого СтрокаТаблицы Из Прочее Цикл
		Префикс = "Прочее[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		ИмяСписка = НСтр("ru = 'Прочее'");
		
		Если СтрокаТаблицы.ПредъявленСФ Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Поставщик'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "Поставщик";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Дата счета-фактуры'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "ДатаСФ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			Если ПустаяСтрока(СтрокаТаблицы.НомерСФ) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Номер счета-фактуры'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
				Поле = Префикс + "НомерСФ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	ОбновитьСчетаФактуры(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	ОбрабатываемыеТабличныеЧасти = Новый Массив;
	ОбрабатываемыеТабличныеЧасти.Добавить(Товары);
	ОбрабатываемыеТабличныеЧасти.Добавить(Прочее);
	
	Для каждого ТабличнаяЧасть Из ОбрабатываемыеТабличныеЧасти Цикл
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			СтрокаТЧ.ПредъявленСФ	= Ложь;
			СтрокаТЧ.ДатаСФ 		= '00010101';
			СтрокаТЧ.НомерСФ 		= "";
			СтрокаТЧ.СчетФактура	= Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьСчетаФактуры(Отказ)
	
	ДанныеСчетовФактур = ДанныеСчетовФактурПоДокументу();
	
	ПроверитьРазныеЗначенияБланкаСтрогойОтчетности(ДанныеСчетовФактур, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ДокументСсылка = ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументСсылка = Документы.АвансовыйОтчет.ПолучитьСсылку();
			УстановитьСсылкуНового(ДокументСсылка);
		КонецЕсли;
	Иначе
		ДокументСсылка = Ссылка;
	КонецЕсли;
	
	ПодчиненныеСчетаФактуры = НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур);
	
	ЗаполнитьСчетаФактурыВДокументе();
	
КонецПроцедуры

Функция ДанныеСчетовФактурПоДокументу()

	ДанныеСчетовФактур = ЭтотОбъект.Прочее.ВыгрузитьКолонки("Поставщик,НомерСФ,ДатаСФ,СчетФактура,БланкСтрогойОтчетности");
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Товары Цикл
		Если СтрокаТабличнойЧасти.ПредъявленСФ Тогда
			НоваяСтрока = ДанныеСчетовФактур.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Прочее Цикл
		Если СтрокаТабличнойЧасти.ПредъявленСФ Тогда
			НоваяСтрока = ДанныеСчетовФактур.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Неопределено;
		КонецЕсли;
	КонецЦикла;
	ДанныеСчетовФактур.Свернуть("Поставщик,НомерСФ,ДатаСФ,СчетФактура,БланкСтрогойОтчетности");
	
	Возврат ДанныеСчетовФактур;

КонецФункции

Процедура ПроверитьРазныеЗначенияБланкаСтрогойОтчетности(ДанныеСчетовФактур, Отказ)

	ТаблицаДублей = ДанныеСчетовФактур.Скопировать(, 
		"Поставщик,ДатаСФ,НомерСФ,БланкСтрогойОтчетности");
	ТаблицаДублей.Свернуть("Поставщик,ДатаСФ,НомерСФ,БланкСтрогойОтчетности");
	ТаблицаДублей.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
	ТаблицаДублей.ЗаполнитьЗначения(1, "Количество");
	ТаблицаДублей.Свернуть("Поставщик,ДатаСФ,НомерСФ", "Количество");
	Для каждого СтрокаТаблицы Из ТаблицаДублей Цикл
		Если СтрокаТаблицы.Количество > 1 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Для счета-фактуры № %1 от %2 (поставщик: %3) из списка ""Прочее"" 
				|указаны разные значения флажка ""Бланк строгой отчетности"".'"),
				СтрокаТаблицы.НомерСФ,
				Формат(СтрокаТаблицы.ДатаСФ, "ДЛФ=D"),
				СтрокаТаблицы.Поставщик);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПрочееБланкСтрогойОтчетности", "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция НайтиСоздатьПодчиненныеСчетаФактуры(ДокументСсылка, ДанныеСчетовФактур)

	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
	Для каждого СтрокаТаблицы Из ДанныеСчетовФактур Цикл
		
		СтрокаСФ = НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаТаблицы);
		Если СтрокаСФ = Неопределено Тогда
			
			ПараметрыСчетаФактуры = Новый Структура("Организация, Контрагент", Организация, СтрокаТаблицы.Поставщик);
			ПараметрыСчетаФактуры.Вставить("НомерСчетаФактурыПолученного", СтрокаТаблицы.НомерСФ);
			ПараметрыСчетаФактуры.Вставить("ДатаСчетаФактурыПолученного", СтрокаТаблицы.ДатаСФ);
			ПараметрыСчетаФактуры.Вставить("БланкСтрогойОтчетности", СтрокаТаблицы.БланкСтрогойОтчетности);
			
			ДокументСФ = УчетНДСПереопределяемый.НайтиСчетФактуруПолученный(ПараметрыСчетаФактуры);
			
			Если ДокументСФ = Неопределено Тогда
				ДокументСФ = Документы.СчетФактураПолученный.СоздатьДокумент();
				ДокументСФ.Дата            = ЭтотОбъект.Дата;
				ДокументСФ.Организация     = ЭтотОбъект.Организация;
				ДокументСФ.Контрагент      = СтрокаТаблицы.Поставщик;
				ДокументСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
				ДокументСФ.Ответственный   = Пользователи.ТекущийПользователь();
				ДокументСФ.Комментарий     = "Создан автоматически на основании авансового отчета";
				ДокументСФ.НомерВходящегоДокумента = СтрокаТаблицы.НомерСФ;
				ДокументСФ.ДатаВходящегоДокумента  = СтрокаТаблицы.ДатаСФ;
				ДокументСФ.НДСПредъявленКВычету    = НЕ РаздельныйУчетНДС И (ДокументСФ.Дата >= '20120101'); 
				ДокументСФ.КодВидаОперации         = "01";
				ДокументСФ.КодСпособаПолучения     = 1;
				ЗаполнитьЗначенияСвойств(ДокументСФ, СтрокаТаблицы);
			Иначе
				ДокументСФ = ДокументСФ.ПолучитьОбъект();
			КонецЕсли;
			
			ДокументСФ.ДокументыОснования.Добавить().ДокументОснование = ДокументСсылка;
			ДокументСФ.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
			ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
			ДокументСФ.Записать();
			
			СтрокаСФ = ТаблицаСФ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСФ, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(СтрокаСФ, ДокументСФ);
			
		Иначе
			
			Если СтрокаСФ.БланкСтрогойОтчетности <> СтрокаТаблицы.БланкСтрогойОтчетности Тогда
				ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
				ДокументСФ.БланкСтрогойОтчетности = СтрокаТаблицы.БланкСтрогойОтчетности;
				ДокументСФ.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
				ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
				ДокументСФ.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСФ;

КонецФункции

Процедура ЗаполнитьСчетаФактурыВДокументе()

	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Товары Цикл
		Если СтрокаТабличнойЧасти.ПредъявленСФ Тогда
			СтрокаСФ = НайтиСтрокуСчетаФактуры(ПодчиненныеСчетаФактуры, СтрокаТабличнойЧасти);
			Если СтрокаСФ <> Неопределено Тогда
				СтрокаТабличнойЧасти.СчетФактура = СтрокаСФ.Ссылка;
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект.Прочее Цикл
		Если СтрокаТабличнойЧасти.ПредъявленСФ Тогда
			СтрокаСФ = НайтиСтрокуСчетаФактуры(ПодчиненныеСчетаФактуры, СтрокаТабличнойЧасти);
			Если СтрокаСФ <> Неопределено Тогда
				СтрокаТабличнойЧасти.СчетФактура = СтрокаСФ.Ссылка;
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСчетаФактуры(РежимЗаписи)

	Для каждого СтрокаСФ Из ПодчиненныеСчетаФактуры Цикл
	
		Если ЭтотОбъект.ПометкаУдаления ИЛИ НЕ СтрокаСФ.Использован Тогда
			Если НЕ СтрокаСФ.ПометкаУдаления Тогда
				ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
				ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
				Если ДокументСФ.ДокументыОснования.Количество() > 1 Тогда
					СтрокиТекОснования = ДокументСФ.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ЭтотОбъект.Ссылка));
					Для каждого СтрокаТекОснования Из СтрокиТекОснования Цикл
						ДокументСФ.ДокументыОснования.Удалить(СтрокаТекОснования);
					КонецЦикла;
					РежимЗаписиСФ = ?(ДокументСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
					ДокументСФ.Записать(РежимЗаписиСФ);
				Иначе
					ДокументСФ.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДокументСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			ДокументСФ.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
			Если ДокументСФ.ПометкаУдаления Тогда
				ДокументСФ.ПометкаУдаления = Ложь;
			КонецЕсли;
			РежимЗаписиСФ = РежимЗаписи;
			Если ДокументСФ.Проведен И РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.ОтменаПроведения;
			ИначеЕсли НЕ ДокументСФ.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписиСФ = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
			ДокументСФ.Записать(РежимЗаписиСФ);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Ссылка.Дата КАК Дата,
	|	СчетФактураПолученный.Ссылка.НомерВходящегоДокумента КАК НомерСФ,
	|	СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента КАК ДатаСФ,
	|	СчетФактураПолученный.Ссылка.Контрагент КАК Поставщик,
	|	СчетФактураПолученный.Ссылка.БланкСтрогойОтчетности КАК БланкСтрогойОтчетности,
	|	СчетФактураПолученный.Ссылка.Проведен КАК Проведен,
	|	СчетФактураПолученный.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование = &ДокументСсылка
	|	И СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";

	ТаблицаСФ = Запрос.Выполнить().Выгрузить();
	ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	Возврат ТаблицаСФ;

КонецФункции

Функция НайтиСтрокуСчетаФактуры(ТаблицаСФ, СтрокаДокумента)
	
	СтруктураПоиска = Новый Структура("НомерСФ, ДатаСФ, Ссылка",
		СтрокаДокумента.НомерСФ, СтрокаДокумента.ДатаСФ, СтрокаДокумента.СчетФактура);
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Поставщик = СтрокаДокумента.Поставщик
			ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Поставщик) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("НомерСФ, ДатаСФ",
		СтрокаДокумента.НомерСФ, СтрокаДокумента.ДатаСФ);
	НайденныеСтроки = ТаблицаСФ.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.Поставщик = СтрокаДокумента.Поставщик
			ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.Поставщик) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

#КонецЕсли
