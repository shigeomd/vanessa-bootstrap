#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Табличная часть Товары
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",      "ЗапасыКромеЗабалансовых");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчетаНДС",   "ПредъявленныйНДС_Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",     "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СпособУчетаНДС", "СпособУчетаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",          "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ПредъявленСчетФактура", "ПредъявленСФ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",              "СуммаНДС");
	
	// Табличная часть ВозвратнаяТара
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ВозвратнаяТара", "СчетУчета", "ВозвратнаяТараНаСкладе");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ВозвратнаяТара", "СчетУчетаТары", "ВозвратнаяТараПолученная");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент", "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	
	// Табличная часть Прочее
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Прочее", "СпособУчетаНДС", "СпособУчетаНДСПредъявленного");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура",          "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ПредъявленСчетФактура", "ПредъявленСФ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",              "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Прочее", "СчетЗатрат",     "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто1",            "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто2",            "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто3",            "СубконтоЗатрат3");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДС",        "ПредъявленныйНДС_Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ПредъявленСчетФактура", "ПредъявленСФ");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",              "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетЗатратНУ",     "Затраты");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "СчетЗатрат");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ПлательщикНалогаНаПрибыль");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ1",          "СубконтоЗатрат1");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "Субконто1");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ2",          "СубконтоЗатрат2");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "Субконто2");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоНУ3",          "СубконтоЗатрат3");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Основание",    "Субконто3");
	
	// Табличная часть ОплатаПоставщикам
	// - оплата задолженности 
	// -- расчеты с обычным поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОплатаПоставщикам", "СчетУчетаРасчетовСКонтрагентом", "РасчетыСПоставщиком");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент",                   "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ПогашатьЗадолженность");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	
	// - только аванс
	// -- расчеты с обычным поставщиком
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "ОплатаПоставщикам", "СчетУчетаРасчетовПоАвансам", "АвансыПоставщику");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент",                   "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента",           "ДоговорКонтрагента");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СпособПогашенияЗадолженности", "СпособПогашенияЗадолженности");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ПогашатьЗадолженность");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Подразделение", "ПодразделениеОрганизации");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "НДСВключенВСтоимость");
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВТабличнойЧасти(
		Объект,
		ИмяТабличнойЧасти);

КонецПроцедуры

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьСтроки(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью
//
// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  Объект                - ДокументОбъект или соответствующие данные формы
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - оставлен для совместимости; не используется
//  ТолькоСпособУчета     - оставлен для совместимости; не используется
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре = Неопределено, ТолькоСпособУчета = Неопределено) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		Объект,
		СтрокаТабличнойЧасти,
		ИмяТабличнойЧасти);

КонецПроцедуры

#КонецОбласти



#КонецОбласти 


Функция ПолучитьСуммуВыданныхАвансов(Ссылка) Экспорт
	
	СуммаАванса = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(АвансовыйОтчетВыданныеАвансы.ДокументАванса.СуммаДокумента), 0) КАК ДокументАвансаСуммаДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	|ГДЕ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаАванса = Выборка.ДокументАвансаСуммаДокумента;
	КонецЕсли;
	
	Возврат СуммаАванса;
	
КонецФункции

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АвансовыйОтчетВозвратнаяТара.Номенклатура,
	|	АвансовыйОтчетВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ИСТИНА КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ВозвратнаяТара
	|ИЗ
	|	Документ.АвансовыйОтчет.ВозвратнаяТара КАК АвансовыйОтчетВозвратнаяТара
	|ГДЕ
	|	АвансовыйОтчетВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетТовары.Номенклатура КАК Номенклатура,
	|	АвансовыйОтчетТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка = &Ссылка
	|	И НЕ АвансовыйОтчетТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВозвратнаяТара.Номенклатура
	|				ИЗ
	|					ВозвратнаяТара КАК ВозвратнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратнаяТара.Номенклатура,
	|	ВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ВозвратнаяТара.ЦенаВключаетНДС
	|ИЗ
	|	ВозвратнаяТара КАК ВозвратнаяТара
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ПараметрыПроведения            = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	ПлательщикНДС  = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация,  Реквизиты.Период);
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(
		Реквизиты.Организация, Реквизиты.Период);
	НачислятьНДСПоОтгрузке           = УчетнаяПолитика.НачислятьНДСПоОтгрузке(
		Реквизиты.Организация, Реквизиты.Период);
	ВестиУчетПоВидамДеятельностиИП   = УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(
		Реквизиты.Организация, Реквизиты.Период);
	ОсновнаяНоменклатурнаяГруппа     = УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(
		Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНа19Счете       = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(
		Реквизиты.Организация, Реквизиты.Период);
	
	Реквизиты.Вставить("ВалютаРеглУчета", ВалютаРегламентированногоУчета);
	Реквизиты.Вставить("РасчетыВВалюте",  Реквизиты.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета);
	Реквизиты.Вставить("ПлательщикНДС",                    ПлательщикНДС);
	Реквизиты.Вставить("ПлательщикНДФЛ",                   ПлательщикНДФЛ);
	Реквизиты.Вставить("ПрименяетсяУСН",                   ПрименяетсяУСН);
	Реквизиты.Вставить("ПрименяетсяУСНДоходыМинусРасходы", ПрименяетсяУСНДоходыМинусРасходы);
	Реквизиты.Вставить("НачислятьНДСПоОтгрузке",           НачислятьНДСПоОтгрузке);
	
	Если Реквизиты.ВалютаДокумента = Реквизиты.ВалютаРеглУчета Тогда
		КоэффициентРуб	= 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
		
		Если СтруктураКурсаДокумента.Кратность = 0 Тогда
			Отказ = Истина;
			ШаблонСообщения = НСтр("ru = 'Документ %1 не может быть проведен.
				|Не задана кратность валюты %2 на дату %3'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ДокументСсылка, Реквизиты.ВалютаДокумента, Формат(Реквизиты.Период, "ДЛФ=D"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументСсылка);
			Возврат ПараметрыПроведения;
		КонецЕсли;
		
		КоэффициентРуб = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВалютаРеглУчета",                  ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("РасчетыВВалюте",                   Реквизиты.РасчетыВВалюте);
	Запрос.УстановитьПараметр("Период",                           Реквизиты.Период);
	Запрос.УстановитьПараметр("КоэффициентРуб",                   КоэффициентРуб);
	Запрос.УстановитьПараметр("ПрименяетсяУСНДоходыМинусРасходы", ПрименяетсяУСНДоходыМинусРасходы);
	Запрос.УстановитьПараметр("ВестиУчетПоВидамДеятельностиИП",   ВестиУчетПоВидамДеятельностиИП);
	Запрос.УстановитьПараметр("ОсновнаяНоменклатурнаяГруппа",     ОсновнаяНоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("МассивСчетовДляГТД",               УчетНДСВызовСервераПовтИсп.СчетаУчетаДляГТД());
	Запрос.УстановитьПараметр("Субсчета10",
		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Материалы));
	Запрос.УстановитьПараметр("Субсчета97",
		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов));
	Запрос.УстановитьПараметр("СинонимТовары", НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("СинонимПрочее", НСтр("ru = 'Прочее'"));
	Запрос.УстановитьПараметр("РаздельныйУчетНДСНа19Счете", РаздельныйУчетНДСНа19Счете);
	Запрос.УстановитьПараметр("ПлательщикНДС",              ПлательщикНДС);
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст =
		ТекстЗапросаПоступлениеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеТоваровУслугНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеТоваровГТД(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеПрочее(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты",       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты",                       НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьАвансы) КАК ЕстьАвансы,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьТара) КАК ЕстьТара,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьОплаты) КАК ЕстьОплаты,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьПрочее) КАК ЕстьПрочее
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьАвансы,
	|		ЛОЖЬ КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьТара,
	|		ЛОЖЬ КАК ЕстьОплаты,
	|		ЛОЖЬ КАК ЕстьПрочее
	|	ИЗ
	|		Документ.АвансовыйОтчет.ВыданныеАвансы КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.Товары КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.ВозвратнаяТара КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.АвансовыйОтчет.Прочее КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.ФизЛицо КАК ФизЛицо,
	|	Реквизиты.КурсДокумента КАК КурсДокумента,
	|	Реквизиты.КратностьДокумента КАК КратностьДокумента,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком) КАК ВидДоговора,
	|	""ПоступлениеТоваровУслуг"" КАК ТипПоступления,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК РасчетыПоРеализации,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	Реквизиты.КурсДокумента КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьДокумента КАК КратностьВзаиморасчетов,
	|	Реквизиты.ФизЛицо КАК ФизЛицо,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ТипСклада КАК ТипСклада,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(СоставДокумента.ЕстьАвансы, ЛОЖЬ) КАК ЕстьАвансы,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТара, ЛОЖЬ) КАК ЕстьТара,
	|	ЕСТЬNULL(СоставДокумента.ЕстьОплаты, ЛОЖЬ) КАК ЕстьОплаты,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПрочее, ЛОЖЬ) КАК ЕстьПрочее
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты)
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДСРуб,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.НомерГТД КАК НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ТаблицаТовары.СпособУчетаНДС КАК СпособУчетаНДС,
		|	ТаблицаТовары.ОтражениеВУСН КАК ОтражениеВУСН,
		|	ТаблицаТовары.ВидДокВходящий КАК ВидДокВходящий,
		|	ТаблицаТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	ТаблицаТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетФактура = ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаТовары.СчетФактура
		|	КОНЕЦ КАК СчетФактура,
		|	ТаблицаТовары.Поставщик КАК Контрагент,
		|	ТаблицаТовары.ПредъявленСФ КАК ПредъявленСчетФактура,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ИСТИНА)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ &ПрименяетсяУСНДоходыМинусРасходы
		|	КОНЕЦ КАК УчестьРасходыУСНТовары,
		|	ВЫБОР
		|		КОГДА НЕ &РаздельныйУчетНДСНа19Счете
		|				И (ТаблицаТовары.ПредъявленСФ
		|					ИЛИ НЕ &ПлательщикНДС)
		|				И Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НДСВключенВСтоимость,
		|	Реквизиты.ВалютаДокумента КАК РеквизитыВалютаДокумента,
		|	Реквизиты.ФизЛицо КАК РеквизитыФизЛицо
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьТара Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Тара.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Тара.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ВалютыВзаиморасчетов
		|ИЗ
		|	Документ.АвансовыйОтчет.ВозвратнаяТара КАК Тара
		|ГДЕ
		|	Тара.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВалютаВзаиморасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта КАК ВалютаВзаиморасчетов,
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ПОМЕСТИТЬ КурсыВалютВзаиморасчетов
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(
		|			&Период,
		|			Валюта В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВалютыВзаиморасчетов.ВалютаВзаиморасчетов
		|				ИЗ
		|					ВалютыВзаиморасчетов)) КАК КурсыВалютСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВалютаВзаиморасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВалютыВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВалютыВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	КурсыВалютВзаиморасчетов.Курс КАК Курс,
		|	КурсыВалютВзаиморасчетов.Кратность КАК Кратность
		|ПОМЕСТИТЬ КурсыДоговоров
		|ИЗ
		|	ВалютыВзаиморасчетов КАК ВалютыВзаиморасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютВзаиморасчетов КАК КурсыВалютВзаиморасчетов
		|		ПО ВалютыВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалютВзаиморасчетов.ВалютаВзаиморасчетов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДоговорКонтрагента
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаТара.Ссылка,
		|	ТаблицаТара.НомерСтроки,
		|	ТаблицаТара.Номенклатура,
		|	ТаблицаТара.Количество,
		|	ТаблицаТара.Сумма,
		|	ТаблицаТара.Сумма КАК СуммаВзаиморасчетов,
		|	ВЫРАЗИТЬ(ТаблицаТара.Сумма * ЕСТЬNULL(КурсыДоговоров.Курс / КурсыДоговоров.Кратность, 1) КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	ТаблицаТара.СчетУчета,
		|	ТаблицаТара.СчетУчетаТары,
		|	ТаблицаТара.Контрагент,
		|	ТаблицаТара.ДоговорКонтрагента,
		|	ТаблицаТара.ВидДокВходящий,
		|	ТаблицаТара.ДатаВходящегоДокумента,
		|	ТаблицаТара.НомерВходящегоДокумента,
		|	КурсыДоговоров.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ТаблицаТара
		|ИЗ
		|	Документ.АвансовыйОтчет.ВозвратнаяТара КАК ТаблицаТара
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыДоговоров КАК КурсыДоговоров
		|		ПО ТаблицаТара.ДоговорКонтрагента = КурсыДоговоров.ДоговорКонтрагента
		|ГДЕ
		|	ТаблицаТара.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаВалютыВзаиморасчетов",     НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВременнаяТаблицаКурсыВалютВзаиморасчетов", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВременнаяТаблицаКурсыДоговоров",           НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВременнаяТаблицаТара",                     НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаПрочее.Ссылка КАК Ссылка,
		|	ТаблицаПрочее.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПрочее.Номенклатура КАК Номенклатура,
		|	ТаблицаПрочее.Содержание КАК Содержание,
		|	1 КАК Количество,
		|	ТаблицаПрочее.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаПрочее.Сумма
		|		ИНАЧЕ ТаблицаПрочее.Сумма + ТаблицаПрочее.СуммаНДС
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	ТаблицаПрочее.СуммаНДС КАК СуммаНДСВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА Реквизиты.СуммаВключаетНДС
		|			ТОГДА ТаблицаПрочее.Сумма
		|		ИНАЧЕ ТаблицаПрочее.Сумма + ТаблицаПрочее.СуммаНДС
		|	КОНЕЦ КАК СуммаРуб,
		|	ТаблицаПрочее.СуммаНДС КАК СуммаНДСРуб,
		|	ТаблицаПрочее.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ТаблицаПрочее.СпособУчетаНДС КАК СпособУчетаНДС,
		|	ТаблицаПрочее.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
		|	ТаблицаПрочее.СчетЗатрат КАК СчетЗатрат,
		|	ТаблицаПрочее.Субконто1 КАК Субконто1,
		|	ТаблицаПрочее.Субконто2 КАК Субконто2,
		|	ТаблицаПрочее.Субконто3 КАК Субконто3,
		|	ТаблицаПрочее.СчетЗатратНУ КАК СчетЗатратНУ,
		|	ТаблицаПрочее.СубконтоНУ1 КАК СубконтоНУ1,
		|	ТаблицаПрочее.СубконтоНУ2 КАК СубконтоНУ2,
		|	ТаблицаПрочее.СубконтоНУ3 КАК СубконтоНУ3,
		|	ТаблицаПрочее.ОтражениеВУСН КАК ОтражениеВУСН,
		|	ТаблицаПрочее.ВидДокВходящий КАК ВидДокВходящий,
		|	ТаблицаПрочее.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	ТаблицаПрочее.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ВЫБОР
		|		КОГДА ТаблицаПрочее.СчетФактура = ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаПрочее.СчетФактура
		|	КОНЕЦ КАК СчетФактура,
		|	ТаблицаПрочее.Поставщик КАК Контрагент,
		|	ТаблицаПрочее.ПредъявленСФ КАК ПредъявленСчетФактура,
		|	&ПрименяетсяУСНДоходыМинусРасходы КАК УчестьРасходыУСНУслуги,
		|	ВЫБОР
		|		КОГДА НЕ &РаздельныйУчетНДСНа19Счете
		|				И (ТаблицаПрочее.ПредъявленСФ
		|					ИЛИ НЕ &ПлательщикНДС)
		|				И Реквизиты.НДСВключенВСтоимость
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НДСВключенВСтоимость,
		|	Реквизиты.ВалютаДокумента КАК РеквизитыВалютаДокумента,
		|	Реквизиты.ФизЛицо КАК РеквизитыФизЛицо
		|ПОМЕСТИТЬ ТаблицаПрочее
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК ТаблицаПрочее
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаПрочее.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаПрочее", НомераТаблиц.Количество());
	КонецЕсли;
	
	Если Реквизиты.ЕстьОплаты Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаОплата.Ссылка,
		|	ТаблицаОплата.НомерСтроки,
		|	ТаблицаОплата.ВидДокВходящий,
		|	ТаблицаОплата.ДатаВходящегоДокумента,
		|	ТаблицаОплата.НомерВходящегоДокумента,
		|	ТаблицаОплата.Сумма КАК СуммаПлатежа,
		|	ВЫРАЗИТЬ(ТаблицаОплата.Сумма * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
		|	ТаблицаОплата.Контрагент,
		|	ТаблицаОплата.ДоговорКонтрагента,
		|	ТаблицаОплата.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаОплата.Содержание,
		|	ТаблицаОплата.СуммаВзаиморасчетов,
		|	ТаблицаОплата.СчетУчетаРасчетовСКонтрагентом,
		|	ТаблицаОплата.КурсВзаиморасчетов,
		|	ТаблицаОплата.КратностьВзаиморасчетов,
		|	ТаблицаОплата.СчетУчетаРасчетовПоАвансам,
		|	ТаблицаОплата.Сделка,
		|	ТаблицаОплата.СпособПогашенияЗадолженности,
		|	Реквизиты.ВалютаДокумента КАК РеквизитыВалютаДокумента,
		|	Реквизиты.ПодразделениеОрганизации КАК РеквизитыПодразделениеОрганизации,
		|	Реквизиты.ФизЛицо КАК РеквизитыФизЛицо
		|ПОМЕСТИТЬ ТаблицаОплата
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицаОплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаОплата.Ссылка = &Ссылка"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ВременнаяТаблицаОплата", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары();
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		СуммыТаблицыПрочее = Результат[НомераТаблиц["СуммыТаблицыПрочее"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыПрочее, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыПрочее", СуммыТаблицыПрочее);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеПрочее();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
КонецПроцедуры

Функция ТекстЗапросаРасчетыВВалютеТовары()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Количество КАК Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб КАК СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ВременнаяТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаТовары.СчетУчета КАК СчетУчета,
	|	ВременнаяТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ВременнаяТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВременнаяТаблицаТовары.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ВременнаяТаблицаТовары.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ВременнаяТаблицаТовары.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ВременнаяТаблицаТовары.ВидДокВходящий КАК ВидДокВходящий,
	|	ВременнаяТаблицаТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВременнаяТаблицаТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВременнаяТаблицаТовары.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаТовары.СчетФактура КАК СчетФактура,
	|	ВременнаяТаблицаТовары.ПредъявленСчетФактура КАК ПредъявленСчетФактура,
	|	ВременнаяТаблицаТовары.УчестьРасходыУСНТовары КАК УчестьРасходыУСНТовары,
	|	ВременнаяТаблицаТовары.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ВременнаяТаблицаТовары.РеквизитыВалютаДокумента КАК РеквизитыВалютаДокумента,
	|	ВременнаяТаблицаТовары.РеквизитыФизЛицо КАК РеквизитыФизЛицо
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеПрочее()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СуммыТаблицыПрочее.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыПрочее.СуммаВзаиморасчетов,
	|	СуммыТаблицыПрочее.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыПрочее.СуммаРуб,
	|	СуммыТаблицыПрочее.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыПрочее
	|ИЗ
	|	&СуммыТаблицыПрочее КАК СуммыТаблицыПрочее
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаПрочее.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаПрочее.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаПрочее.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаПрочее.Содержание КАК Содержание,
	|	ВременнаяТаблицаПрочее.Количество КАК Количество,
	|	СуммыТаблицыПрочее.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыТаблицыПрочее.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыПрочее.СуммаРуб КАК СуммаРуб,
	|	СуммыТаблицыПрочее.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ВременнаяТаблицаПрочее.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаПрочее.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ВременнаяТаблицаПрочее.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ВременнаяТаблицаПрочее.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	ВременнаяТаблицаПрочее.СчетЗатрат КАК СчетЗатрат,
	|	ВременнаяТаблицаПрочее.Субконто1 КАК Субконто1,
	|	ВременнаяТаблицаПрочее.Субконто2 КАК Субконто2,
	|	ВременнаяТаблицаПрочее.Субконто3 КАК Субконто3,
	|	ВременнаяТаблицаПрочее.СчетЗатратНУ КАК СчетЗатратНУ,
	|	ВременнаяТаблицаПрочее.СубконтоНУ1 КАК СубконтоНУ1,
	|	ВременнаяТаблицаПрочее.СубконтоНУ2 КАК СубконтоНУ2,
	|	ВременнаяТаблицаПрочее.СубконтоНУ3 КАК СубконтоНУ3,
	|	ВременнаяТаблицаПрочее.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ВременнаяТаблицаПрочее.ВидДокВходящий КАК ВидДокВходящий,
	|	ВременнаяТаблицаПрочее.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВременнаяТаблицаПрочее.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВременнаяТаблицаПрочее.СчетФактура КАК СчетФактура,
	|	ВременнаяТаблицаПрочее.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаПрочее.ПредъявленСчетФактура КАК ПредъявленСчетФактура,
	|	ВременнаяТаблицаПрочее.УчестьРасходыУСНУслуги КАК УчестьРасходыУСНУслуги,
	|	ВременнаяТаблицаПрочее.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ВременнаяТаблицаПрочее.РеквизитыВалютаДокумента КАК РеквизитыВалютаДокумента,
	|	ВременнаяТаблицаПрочее.РеквизитыФизЛицо КАК РеквизитыФизЛицо
	|ПОМЕСТИТЬ ТаблицаПрочее
	|ИЗ
	|	ВременнаяТаблицаПрочее КАК ВременнаяТаблицаПрочее
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыПрочее КАК СуммыТаблицыПрочее
	|		ПО ВременнаяТаблицаПрочее.НомерСтроки = СуммыТаблицыПрочее.НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты)
	
	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц, Реквизиты);
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаТовары", "ПОМЕСТИТЬ ВременнаяТаблицаТовары");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Ссылка = &Ссылка", "ТаблицаТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаРуб,
		|	ВременнаяТаблицаТовары.СуммаНДСРуб
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаПрочее", "ПОМЕСТИТЬ ВременнаяТаблицаПрочее");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаПрочее.Ссылка = &Ссылка", "ТаблицаПрочее.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|НомерСтроки");
		НомераТаблиц.Вставить("СуммыТаблицыПрочее", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаПрочее.НомерСтроки,
		|	ВременнаяТаблицаПрочее.СтавкаНДС,
		|	ВременнаяТаблицаПрочее.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаПрочее.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаПрочее.СуммаРуб,
		|	ВременнаяТаблицаПрочее.СуммаНДСРуб
		|ИЗ
		|	ВременнаяТаблицаПрочее КАК ВременнаяТаблицаПрочее"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоступлениеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("ПоступлениеТоваровТаблица", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДСВРознице,
	|	ТаблицаТовары.СуммаВзаиморасчетов - ВЫБОР
	|		КОГДА ТаблицаТовары.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.СуммаНДСВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаРуб - ВЫБОР
	|		КОГДА ТаблицаТовары.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.СуммаНДСРуб
	|	КОНЕЦ КАК СуммаБУ,
	|	ТаблицаТовары.СуммаРуб - ВЫБОР
	|		КОГДА ТаблицаТовары.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.СуммаНДСРуб
	|	КОНЕЦ КАК СуммаНУ,
	|	ТаблицаТовары.СуммаНДСРуб,
	|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаБезНДСРуб,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.РеквизитыВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК КорСчет,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций) КАК ВидКорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
	|	ТаблицаТовары.РеквизитыФизЛицо КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ТаблицаТовары.ВидДокВходящий,
	|	ТаблицаТовары.НомерВходящегоДокумента,
	|	ТаблицаТовары.ДатаВходящегоДокумента
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	НомераТаблиц.Вставить("ПоступлениеТоваровТаблица", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеТоваровУслугНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СуммаВзаиморасчетов - ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.СчетУчетаНДС,
		|	ТаблицаТовары.СпособУчетаНДС,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК СуммаНДС,
		|	ТаблицаТовары.СуммаНДСРуб,
		|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаРуб,
		|	ТаблицаТовары.СуммаРуб - ТаблицаТовары.СуммаНДСРуб КАК СуммаБезНДСРуб,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.ВидДокВходящий,
		|	ТаблицаТовары.НомерВходящегоДокумента,
		|	ТаблицаТовары.ДатаВходящегоДокумента,
		|	ТаблицаТовары.Контрагент,
		|	ТаблицаТовары.ПредъявленСчетФактура,
		|	ТаблицаТовары.СчетФактура,
		|	ТаблицаТовары.НДСВключенВСтоимость
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ТоварыНДС", НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ТоварыНДС", Неопределено);
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицаПрочее.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПрочее.СуммаВзаиморасчетов - ТаблицаПрочее.СуммаНДСВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТаблицаПрочее.СуммаНДСВзаиморасчетов,
		|	ТаблицаПрочее.Количество,
		|	ТаблицаПрочее.СчетЗатрат,
		|	ТаблицаПрочее.СчетУчетаНДС,
		|	ТаблицаПрочее.СпособУчетаНДС,
		|	ТаблицаПрочее.СуммаНДСВзаиморасчетов КАК СуммаНДС,
		|	ТаблицаПрочее.СуммаНДСРуб,
		|	ТаблицаПрочее.СуммаРуб - ТаблицаПрочее.СуммаНДСРуб КАК СуммаРуб,
		|	ТаблицаПрочее.СуммаРуб - ТаблицаПрочее.СуммаНДСРуб КАК СуммаБезНДСРуб,
		|	ТаблицаПрочее.СтавкаНДС,
		|	ТаблицаПрочее.ВидДокВходящий,
		|	ТаблицаПрочее.НомерВходящегоДокумента,
		|	ТаблицаПрочее.ДатаВходящегоДокумента,
		|	ТаблицаПрочее.Контрагент,
		|	ТаблицаПрочее.ПредъявленСчетФактура,
		|	ТаблицаПрочее.СчетФактура,
		|	ТаблицаПрочее.Содержание,
		|	ТаблицаПрочее.Субконто1,
		|	ТаблицаПрочее.Субконто2,
		|	ТаблицаПрочее.Субконто3,
		|	ВЫБОР
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаПрочее.Субконто1
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаПрочее.Субконто2
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ТаблицаПрочее.Субконто3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтатьяЗатрат,
		|	ТаблицаПрочее.ПодразделениеЗатрат,
		|	ТаблицаПрочее.НДСВключенВСтоимость
		|ИЗ
		|	ТаблицаПрочее КАК ТаблицаПрочее
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("УслугиНДС", НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("УслугиНДС", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоступлениеТоваровГТД(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("НомераГТД", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	1 КАК НомерСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.СчетФактура КАК ДокументОснование,
	|	ТаблицаТовары.СчетУчета КАК СчетУчета,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.ВидДокВходящий,
	|	ТаблицаТовары.НомерВходящегоДокумента,
	|	ТаблицаТовары.ДатаВходящегоДокумента,
	|	ТаблицаТовары.Количество КАК Количество
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И ТаблицаТовары.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.РОССИЯ)
	|	И ТаблицаТовары.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ТаблицаТовары.СчетУчета В (&МассивСчетовДляГТД)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	НомераТаблиц.Вставить("НомераГТД", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеПрочее(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьПрочее Тогда
		ПараметрыПроведения.Вставить("ПоступлениеПрочееТаблица", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Прочее"" КАК ИмяСписка,
	|	ТаблицаПрочее.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПрочее.СуммаВзаиморасчетов - ВЫБОР
	|		КОГДА ТаблицаПрочее.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПрочее.СуммаНДСВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаПрочее.СуммаРуб - ВЫБОР
	|		КОГДА ТаблицаПрочее.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПрочее.СуммаНДСРуб
	|	КОНЕЦ КАК СуммаБУ,
	|	ТаблицаПрочее.СуммаРуб - ВЫБОР
	|		КОГДА ТаблицаПрочее.НДСВключенВСтоимость
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПрочее.СуммаНДСРуб
	|	КОНЕЦ КАК СуммаНУ,
	|	ТаблицаПрочее.СуммаНДСРуб,
	|	ТаблицаПрочее.СуммаРуб - ТаблицаПрочее.СуммаНДСРуб КАК СуммаБезНДСРуб,
	|	ТаблицаПрочее.СчетЗатрат,
	|	ТаблицаПрочее.СчетЗатратНУ,
	|	ВЫБОР
	|		КОГДА ТаблицаПрочее.РеквизитыВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК КорСчет,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций) КАК ВидКорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3,
	|	ТаблицаПрочее.РеквизитыФизЛицо КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ТаблицаПрочее.ВидДокВходящий,
	|	ТаблицаПрочее.НомерВходящегоДокумента,
	|	ТаблицаПрочее.ДатаВходящегоДокумента,
	|	ТаблицаПрочее.ПодразделениеЗатрат,
	|	ТаблицаПрочее.Субконто1,
	|	ТаблицаПрочее.Субконто2,
	|	ТаблицаПрочее.Субконто3,
	|	ТаблицаПрочее.СубконтоНУ1,
	|	ТаблицаПрочее.СубконтоНУ2,
	|	ТаблицаПрочее.СубконтоНУ3,
	|	ТаблицаПрочее.Содержание
	|ИЗ
	|	ТаблицаПрочее КАК ТаблицаПрочее
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	НомераТаблиц.Вставить("ПоступлениеПрочееТаблица", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеТары(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТара Тогда
		ПараметрыПроведения.Вставить("ПоступлениеТарыТаблица", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ВозвратнаяТара"" КАК ИмяСписка,
	|	ТаблицаТара.Ссылка,
	|	ТаблицаТара.НомерСтроки,
	|	ТаблицаТара.Номенклатура,
	|	ТаблицаТара.СуммаВзаиморасчетов,
	|	ТаблицаТара.СуммаРуб,
	|	0 КАК СуммаБезНДСРуб,
	|	0 КАК СуммаНДСРуб,
	|	ТаблицаТара.Количество,
	|	ТаблицаТара.СчетУчета,
	|	ТаблицаТара.Контрагент,
	|	ТаблицаТара.ДоговорКонтрагента,
	|	ТаблицаТара.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаТара.СчетУчетаТары КАК СчетУчетаРасчетовПоТаре,
	|	ТаблицаТара.ВидДокВходящий,
	|	ТаблицаТара.НомерВходящегоДокумента,
	|	ТаблицаТара.ДатаВходящегоДокумента
	|ИЗ
	|	ТаблицаТара КАК ТаблицаТара
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТара.НомерСтроки";
	
	НомераТаблиц.Вставить("ПоступлениеТарыТаблица", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПогашениеЗадолженности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	""АвансовыйОтчет"" КАК ВидОперации,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	НомераТаблиц.Вставить("ПогашениеЗадолженности", НомераТаблиц.Количество());
	
	Если НЕ Реквизиты.ЕстьОплаты Тогда
		ПараметрыПроведения.Вставить("ПогашениеЗадолженностиТаблица", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	""ОплатаПоставщикам"" КАК ИмяСписка,
	|	ТаблицаОплата.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОплата.РеквизитыПодразделениеОрганизации КАК Подразделение,
	|	ТаблицаОплата.Контрагент,
	|	ТаблицаОплата.ДоговорКонтрагента,
	|	ТаблицаОплата.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаОплата.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА ТаблицаОплата.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ТаблицаОплата.СпособПогашенияЗадолженности,
	|	ТаблицаОплата.Сделка КАК ДокументРасчетов,
	|	ТаблицаОплата.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	ТаблицаОплата.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
	|	ВЫБОР
	|		КОГДА ТаблицаОплата.РеквизитыВалютаДокумента = &ВалютаРеглУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК КорСчет,
	|	ТаблицаОплата.РеквизитыФизЛицо КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ТаблицаОплата.РеквизитыПодразделениеОрганизации КАК КорПодразделение,
	|	ТаблицаОплата.СуммаВзаиморасчетов,
	|	ТаблицаОплата.СуммаРуб,
	|	ТаблицаОплата.СуммаРуб КАК СуммаБУ,
	|	0 КАК СуммаБезНДСРуб,
	|	0 КАК СуммаНДСРуб,
	|	ТаблицаОплата.ВидДокВходящий,
	|	ТаблицаОплата.ДатаВходящегоДокумента,
	|	ТаблицаОплата.НомерВходящегоДокумента,
	|	ТаблицаОплата.Содержание
	|ИЗ
	|	ТаблицаОплата КАК ТаблицаОплата
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	НомераТаблиц.Вставить("ПогашениеЗадолженностиТаблица", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеРасходовУСН(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.ПрименяетсяУСН ИЛИ
		НЕ Реквизиты.ЕстьТовары И НЕ (Реквизиты.ЕстьПрочее И Реквизиты.ПрименяетсяУСНДоходыМинусРасходы) Тогда
		ПараметрыПроведения.Вставить("ПоступлениеРасходовУСНРеквизиты",       Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеРасходовУСНТаблицаРасходов", Неопределено);
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ФизЛицо КАК ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	НомераТаблиц.Вставить("ПоступлениеРасходовУСНРеквизиты", НомераТаблиц.Количество());
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Номенклатура) КАК ВидРасхода,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
		|	ТаблицаТовары.Номенклатура КАК ЭлементРасхода,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчета В (&Субсчета10)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СчетУчета В (&Субсчета10)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоМатериал,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.Ссылка КАК Партия,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.СуммаВзаиморасчетов КАК Сумма,
		|	ТаблицаТовары.СуммаНДСВзаиморасчетов КАК НДС,
		|	ТаблицаТовары.ОтражениеВУСН КАК ОтражениеВУСН
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.УчестьРасходыУСНТовары";
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее И Реквизиты.ПрименяетсяУСНДоходыМинусРасходы Тогда
		ТекстЗапроса = ТекстЗапроса
		+ ?(Реквизиты.ЕстьТовары, "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|", "") +
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.СчетЗатрат В (&Субсчета97)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.РБП)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.Услуги)
		|	КОНЕЦ КАК ВидРасхода,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.СчетЗатрат В (&Субсчета97)
		|			ТОГДА ТаблицаУслуги.Субконто1
		|		ИНАЧЕ ТаблицаУслуги.Номенклатура
		|	КОНЕЦ КАК ЭлементРасхода,
		|	ЛОЖЬ КАК ЭтоТовар,
		|	ЛОЖЬ КАК ЭтоМатериал,
		|	ТаблицаУслуги.СчетЗатрат КАК СчетУчета,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	0 КАК Количество,
		|	ТаблицаУслуги.СуммаВзаиморасчетов КАК Сумма,
		|	ТаблицаУслуги.СуммаНДСВзаиморасчетов КАК НДС,
		|	ТаблицаУслуги.ОтражениеВУСН КАК ОтражениеВУСН
		|ИЗ
		|	ТаблицаПрочее КАК ТаблицаУслуги";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ПоступлениеРасходовУСНТаблицаРасходов", НомераТаблиц.Количество());
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПоступлениеМПЗИП(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	Если НЕ Реквизиты.ПлательщикНДФЛ Тогда
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаТоваров",        Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаПрочее",         Неопределено);
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", Неопределено);
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.СуммаРуб КАК Сумма,
		|	ТаблицаТовары.СуммаНДСРуб КАК НДС,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
		|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
		|		ИНАЧЕ ТаблицаТовары.Номенклатура.НоменклатурнаяГруппа
		|	КОНЕЦ КАК НоменклатурнаяГруппа,
		|	НЕОПРЕДЕЛЕНО КАК СтатьяЗатрат,
		|	НЕОПРЕДЕЛЕНО КАК ВидРасходовНУ,
		|	ИСТИНА КАК ПринятиеКналоговомуУчету,
		|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
		|	НЕОПРЕДЕЛЕНО КАК Партия
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаТоваров", НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаТоваров", Неопределено);
	КонецЕсли;
	
	Если Реквизиты.ЕстьПрочее Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	""Прочее"" КАК ИмяСписка,
		|	&СинонимПрочее КАК СинонимСписка,
		|	ТаблицаПрочее.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПрочее.Номенклатура КАК Номенклатура,
		|	ТаблицаПрочее.СуммаРуб КАК Сумма,
		|	ТаблицаПрочее.СуммаНДСРуб КАК НДС,
		|	0 КАК Количество,
		|	ТаблицаПрочее.СчетЗатрат КАК СчетУчета,
		|	ВЫБОР
		|		КОГДА НЕ &ВестиУчетПоВидамДеятельностиИП
		|			ТОГДА &ОсновнаяНоменклатурнаяГруппа
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
		|			ТОГДА ТаблицаПрочее.Субконто1
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.НоменклатурныеГруппы
		|			ТОГДА ТаблицаПрочее.Субконто2
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.НоменклатурныеГруппы
		|			ТОГДА ТаблицаПрочее.Субконто3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК НоменклатурнаяГруппа,
		|	ВЫБОР
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|				ИЛИ ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|				ИЛИ ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.РасходыБудущихПериодов
		|			ТОГДА ТаблицаПрочее.Субконто1
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|				ИЛИ ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|				ИЛИ ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.РасходыБудущихПериодов
		|			ТОГДА ТаблицаПрочее.Субконто2
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|				ИЛИ ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|				ИЛИ ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.РасходыБудущихПериодов
		|			ТОГДА ТаблицаПрочее.Субконто3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтатьяЗатрат,
		|	ВЫБОР
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто2 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто3 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидРасходовНУ,
		|	ВЫБОР
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто2 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто3 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПринятиеКналоговомуУчету,
		|	ВЫБОР
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаПрочее.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаПрочее.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто2 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		КОГДА ТаблицаПрочее.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаПрочее.Субконто3 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
		|	НЕОПРЕДЕЛЕНО КАК Партия
		|ИЗ
		|	ТаблицаПрочее КАК ТаблицаПрочее
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаПрочее", НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаПрочее", Неопределено);
	КонецЕсли;
	
	Если Реквизиты.ЕстьТовары ИЛИ Реквизиты.ЕстьПрочее Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Вложенный.ДокументРасчетов КАК ДокументРасчетов,
		|	СУММА(Вложенный.СуммаРуб) КАК СуммаРуб
		|ИЗ
		|	("
		+ ?(НЕ Реквизиты.ЕстьТовары, "",
		"ВЫБРАТЬ
		|		&Ссылка КАК ДокументРасчетов,
		|		ТаблицаТовары.СуммаРуб КАК СуммаРуб
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары")
		+ ?(НЕ Реквизиты.ЕстьТовары ИЛИ НЕ Реквизиты.ЕстьПрочее, "", "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|") + ?(НЕ Реквизиты.ЕстьПрочее, "", "
		|	ВЫБРАТЬ
		|		&Ссылка КАК ДокументРасчетов,
		|		ТаблицаПрочее.СуммаРуб КАК СуммаРуб
		|	ИЗ
		|		ТаблицаПрочее КАК ТаблицаПрочее")
		+ ") КАК Вложенный
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументРасчетов"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", НомераТаблиц.Количество());
	Иначе
		ПараметрыПроведения.Вставить("ПоступлениеМПЗИПТаблицаВзаиморасчетов", Неопределено);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьКолонкуСодержаниеТовары(ТаблицаЗначений) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	
	ШаблонСодержания = "Поступление %1 по %2 %3 от %4";
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		МПЗ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета);
		СтрокаТаблицы.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
			МПЗ, СтрокаТаблицы.ВидДокВходящий, СтрокаТаблицы.НомерВходящегоДокумента,
			Формат(СтрокаТаблицы.ДатаВходящегоДокумента, "ДЛФ=Д"));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкуСодержаниеПрочее(ТаблицаЗначений) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСодержания = "%1 по %2 %3 от %4";
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
			СтрокаТаблицы.Содержание, СтрокаТаблицы.ВидДокВходящий, СтрокаТаблицы.НомерВходящегоДокумента,
			Формат(СтрокаТаблицы.ДатаВходящегоДокумента, "ДЛФ=Д"));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкуСодержаниеОплата(ТаблицаЗначений) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСодержания = "%1 по %2 %3 от %4";
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
			СтрокаТаблицы.Содержание, СтрокаТаблицы.ВидДокВходящий, СтрокаТаблицы.НомерВходящегоДокумента,
			Формат(СтрокаТаблицы.ДатаВходящегоДокумента, "ДЛФ=Д"));
	КонецЦикла;
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Авансовый отчет
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Аванс_Отчет";
	КомандаПечати.Представление = НСтр("ru = 'Авансовый отчет (АО-1)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Авансовый отчет""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьДанныеДокументов(МассивДокументов)
	
	СтруктураВозврата = Новый Структура("НачалоПериода, ОкончаниеПериода, Организации, ЕстьВалютные",
		Дата(1, 1, 1), Дата(1, 1, 1), Справочники.Организации.ПустаяСсылка(), Ложь);
	Если ТипЗнч(МассивДокументов) <> Тип("Массив") ИЛИ МассивДокументов.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ВалютаРегУчета",   ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(АвансовыйОтчет.Дата) КАК НачалоПериода,
	|	МАКСИМУМ(АвансовыйОтчет.Дата) КАК ОкончаниеПериода
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчет.Организация КАК Организации
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивДокументов)
	|	И АвансовыйОтчет.ВалютаДокумента <> &ВалютаРегУчета";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаДата = Пакет[0].Выбрать();
	Если ВыборкаДата.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаДата);
	КонецЕсли;
	
	Если НЕ Пакет[1].Пустой() Тогда
		СтруктураВозврата.Вставить("Организации", Пакет[1].Выгрузить().ВыгрузитьКолонку("Организации"));
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ЕстьВалютные", НЕ Пакет[2].Пустой());
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвансовогоОтчета(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов",  МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ПустойСчет",      ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчет.ФизЛицо КАК ФизическоеЛицо,
	|	АвансовыйОтчет.Дата КАК Дата,
	|	АвансовыйОтчет.Ссылка КАК ДокументСсылка,
	|	АвансовыйОтчет.Организация
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)";
	
	ТаблицаРаботников = Запрос.Выполнить().Выгрузить();
	
	Если ПривилегированныйРежим() Тогда
		// Отключение привилегированного режима при переходе в другую подсистему
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	УчетЗарплаты.ПолучитьТаблицуСотрудников(ТаблицаРаботников);
	Запрос.УстановитьПараметр("Сотрудники", ТаблицаРаботников);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабСотрудники.Сотрудник,
	|	ТабСотрудники.ПодразделениеСотрудника,
	|	ТабСотрудники.ПодразделениеСотрудникаКод,
	|	ТабСотрудники.ПредставлениеПодразделенияСотрудника,
	|	ТабСотрудники.ДокументСсылка
	|Поместить ВТСотрудники
	|ИЗ
	|	&Сотрудники КАК ТабСотрудники";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчет.Ссылка,
	|	АвансовыйОтчет.МоментВремени,
	|	АвансовыйОтчет.Номер,
	|	АвансовыйОтчет.Дата КАК ДатаДокумента,
	|	АвансовыйОтчет.ФизЛицо КАК ПодотчетноеЛицо,
	|	АвансовыйОтчет.ФизЛицо.Представление КАК ПредставлениеПодотчетногоЛица,
	|	АвансовыйОтчет.Организация КАК Руководители,
	|	АвансовыйОтчет.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА АвансовыйОтчет.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ АвансовыйОтчет.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	АвансовыйОтчет.ПодразделениеОрганизации.Код КАК КодПодразделения,
	|	АвансовыйОтчет.Организация КАК Организация,
	|	АвансовыйОтчет.НазначениеАванса КАК НазначениеАванса,
	|	АвансовыйОтчет.ВалютаДокумента,
	|	АвансовыйОтчет.СуммаВключаетНДС,
	|	АвансовыйОтчет.ВалютаДокумента.Представление КАК ПредставлениеВалюты,
	|	АвансовыйОтчет.СуммаДокумента,
	|	АвансовыйОтчет.КоличествоДокументов,
	|	АвансовыйОтчет.КоличествоЛистов,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	Сотрудники.ПодразделениеСотрудникаКод КАК ПодразделениеСотрудникаКод,
	|	Сотрудники.ПредставлениеПодразделенияСотрудника КАК ПредставлениеПодразделенияСотрудника
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
	|		ПО АвансовыйОтчет.Ссылка = Сотрудники.ДокументСсылка
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	АвансовыйОтчет.Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка КАК АвансовыйОтчет,
	|	АвансовыйОтчетВыданныеАвансы.ДокументАванса КАК ДокументАванса,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчетВыданныеАвансы.ДокументАванса ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|			ТОГДА ""БАНК""
	|		ИНАЧЕ ""КАССА""
	|	КОНЕЦ КАК ТипДокумента,
	|	АвансовыйОтчетВыданныеАвансы.ДокументАванса.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	|ГДЕ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка В(&МассивОбъектов)";
	
	ДокументыАвансов = Запрос.Выполнить().Выбрать();
	
	ДанныеДокументов = ПолучитьДанныеДокументов(МассивОбъектов);
	Если ДанныеДокументов.ЕстьВалютные Тогда
		
		Запрос.УстановитьПараметр("НачалоПериода",    ДанныеДокументов.НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ДанныеДокументов.ОкончаниеПериода);
		Запрос.УстановитьПараметр("Организации",      ДанныеДокументов.Организации);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаДт,
		|	0 КАК СуммаКт,
		|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&ОкончаниеПериода,
		|			Регистратор,
		|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
		|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал),
		|			,
		|			Организация В (&Организации)
		|				И ВалютаКт <> &ВалютаРеглУчета
		|				И ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы)) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.Регистратор В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	0,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот,
		|	ХозрасчетныйОборотыДтКт.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&ОкончаниеПериода,
		|			Регистратор,
		|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал),
		|			,
		|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
		|			Организация В (&Организации)
		|				И ВалютаДт <> &ВалютаРеглУчета
		|				И ВЫРАЗИТЬ(СубконтоКт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы)) КАК ХозрасчетныйОборотыДтКт
		|ГДЕ
		|	ХозрасчетныйОборотыДтКт.Регистратор В(&МассивОбъектов)";
		
		ЗапросПоВалютнымПроводкам = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	Хозрасчетный.СчетДт КАК СчетДт,
	|	Хозрасчетный.СчетКт КАК СчетКт,
	|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки,
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор В(&МассивОбъектов)
	|	И НЕ(Хозрасчетный.СчетДт.Забалансовый
	|				ИЛИ Хозрасчетный.СчетКт.Забалансовый)
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Регистратор,
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаПроводок = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Поставщик КАК Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК ДокументНомер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента КАК ДокументДата,
	|	АвансовыйОтчет.ВидДокВходящий КАК НаименованиеРасхода,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, ВЫБОР
	|				КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|								ТОГДА АвансовыйОтчет.Сумма
	|							ИНАЧЕ АвансовыйОтчет.Сумма * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|							ТОГДА АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|						ИНАЧЕ (АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС) * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|					КОНЕЦ
	|			КОНЕЦ)) КАК ПоОтчету,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС = ИСТИНА
	|						ТОГДА АвансовыйОтчет.Сумма
	|					ИНАЧЕ АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ) КАК ПоОтчетуВВалюте,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, ВЫБОР
	|				КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|					ТОГДА АвансовыйОтчет.СуммаНДС
	|				ИНАЧЕ АвансовыйОтчет.СуммаНДС * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|			КОНЕЦ)) КАК СуммаНДС,
	|	АвансовыйОтчет.СчетУчета.Код КАК СчетЗатрат,
	|	АвансовыйОтчет.СчетУчетаНДС.Код КАК СчетНДС,
	|	АвансовыйОтчет.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДанныеАвансовогоОтчета
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО АвансовыйОтчет.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И АвансовыйОтчет.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|			И (АвансовыйОтчет.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.СчетУчета.Код,
	|	АвансовыйОтчет.СчетУчетаНДС.Код,
	|	АвансовыйОтчет.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, ВЫБОР
	|				КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|					ТОГДА АвансовыйОтчет.Сумма
	|				ИНАЧЕ АвансовыйОтчет.СуммаВзаиморасчетов * (АвансовыйОтчет.КурсВзаиморасчетов / АвансовыйОтчет.КратностьВзаиморасчетов)
	|			КОНЕЦ)),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ АвансовыйОтчет.СуммаВзаиморасчетов
	|		КОНЕЦ),
	|	СУММА(0),
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код = АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|			КОНЕЦ + ВЫБОР
	|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|						И НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА "", ""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО АвансовыйОтчет.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И АвансовыйОтчет.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ОплатаПоставщикам))
	|			И (АвансовыйОтчет.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код = АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|			КОНЕЦ + ВЫБОР
	|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|						И НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА "", ""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			КОНЕЦ
	|	КОНЕЦ,
	|	АвансовыйОтчет.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, ВЫБОР
	|				КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|								ТОГДА АвансовыйОтчет.Сумма
	|							ИНАЧЕ АвансовыйОтчет.Сумма * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|							ТОГДА АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|						ИНАЧЕ (АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС) * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|					КОНЕЦ
	|			КОНЕЦ)),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА АвансовыйОтчет.Ссылка.СуммаВключаетНДС = ИСТИНА
	|						ТОГДА АвансовыйОтчет.Сумма
	|					ИНАЧЕ АвансовыйОтчет.Сумма + АвансовыйОтчет.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ),
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, ВЫБОР
	|				КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|					ТОГДА АвансовыйОтчет.СуммаНДС
	|				ИНАЧЕ АвансовыйОтчет.СуммаНДС * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|			КОНЕЦ)),
	|	АвансовыйОтчет.СчетЗатрат.Код,
	|	АвансовыйОтчет.СчетУчетаНДС.Код,
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО АвансовыйОтчет.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор
	|			И АвансовыйОтчет.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Прочее))
	|			И (АвансовыйОтчет.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета)
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	АвансовыйОтчет.СчетЗатрат.Код,
	|	АвансовыйОтчет.СчетУчетаНДС.Код,
	|	АвансовыйОтчет.Ссылка";
	
	Запрос.Выполнить();
	
	// Свертка сумм по документам, подтверждающим расходы.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеАвансовогоОтчета.Ссылка КАК Ссылка,
	|	ДанныеАвансовогоОтчета.Поставщик КАК Поставщик,
	|	ДанныеАвансовогоОтчета.ДокументНомер КАК ДокументНомер,
	|	ДанныеАвансовогоОтчета.ДокументДата КАК ДокументДата,
	|	ДанныеАвансовогоОтчета.НаименованиеРасхода КАК НаименованиеРасхода,
	|	СУММА(ДанныеАвансовогоОтчета.ПоОтчету) КАК ПоОтчету,
	|	СУММА(ДанныеАвансовогоОтчета.ПоОтчетуВВалюте) КАК ПоОтчетуВВалюте,
	|	СУММА(ДанныеАвансовогоОтчета.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	ДанныеАвансовогоОтчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеАвансовогоОтчета.Ссылка,
	|	ДанныеАвансовогоОтчета.Поставщик,
	|	ДанныеАвансовогоОтчета.ДокументНомер,
	|	ДанныеАвансовогоОтчета.ДокументДата,
	|	ДанныеАвансовогоОтчета.НаименованиеРасхода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата,
	|	ДокументНомер";
	
	ВыборкаПоТоварам = Запрос.Выполнить().Выбрать();
	
	// Выборка уникальных счетов учета по документам, подтверждающим расходы
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеАвансовогоОтчета.Ссылка КАК Ссылка,
	|	ДанныеАвансовогоОтчета.Поставщик КАК Поставщик,
	|	ДанныеАвансовогоОтчета.ДокументНомер КАК ДокументНомер,
	|	ДанныеАвансовогоОтчета.ДокументДата КАК ДокументДата,
	|	ДанныеАвансовогоОтчета.НаименованиеРасхода КАК НаименованиеРасхода,
	|	ДанныеАвансовогоОтчета.СчетЗатрат КАК Счет
	|ИЗ
	|	ДанныеАвансовогоОтчета
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеАвансовогоОтчета.Ссылка,
	|	ДанныеАвансовогоОтчета.Поставщик,
	|	ДанныеАвансовогоОтчета.ДокументНомер,
	|	ДанныеАвансовогоОтчета.ДокументДата,
	|	ДанныеАвансовогоОтчета.НаименованиеРасхода,
	|	ДанныеАвансовогоОтчета.СчетНДС
	|ИЗ
	|	ДанныеАвансовогоОтчета";
	
	ВыборкаСчетов  = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	
	Субсчета71     = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(
		ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
	Субсчета71Вал  = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(
		ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал);
	
	Пока Шапка.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчет");
		
		// ТИТУЛЬНЫЙ ЛИСТ
		ЗапросТитул = Новый Запрос();
		Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			ЗапросТитул.УстановитьПараметр("Субсчета71", Субсчета71Вал);
		Иначе
			ЗапросТитул.УстановитьПараметр("Субсчета71", Субсчета71);
		КонецЕсли;
		
		ЗапросТитул.УстановитьПараметр("Сотрудник",     Шапка.ПодотчетноеЛицо);
		ЗапросТитул.УстановитьПараметр("Организация",   Шапка.Организация);
		ЗапросТитул.УстановитьПараметр("ДатаИтогов",    Шапка.МоментВремени);
		ЗапросТитул.УстановитьПараметр("Подразделение", Шапка.ПодразделениеОрганизации);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаОстатокДт,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаИтогов,
		|			Счет В (&Субсчета71),
		|			,
		|			Организация = &Организация
		|				И Субконто1 = &Сотрудник
		|				И Подразделение = &Подразделение) КАК ХозрасчетныйОстатки";
		
		Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Подразделение = &Подразделение", "");
		КонецЕсли;
		
		ЗапросТитул.Текст = ТекстЗапроса;
		ПредыдущийАванс = ЗапросТитул.Выполнить();
		Если ПредыдущийАванс.Пустой() Тогда
			Перерасход = 0;
			Остаток    = 0;
		Иначе
			ПредыдущийАвансВыборка = ПредыдущийАванс.Выбрать();
			ПредыдущийАвансВыборка.Следующий();
			
			Перерасход = ПредыдущийАвансВыборка.СуммаОстатокКт;
			Остаток    = ПредыдущийАвансВыборка.СуммаОстатокДт;
		КонецЕсли;
		
		ДанныеВал  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Шапка.ВалютаДокумента, Шапка.ДатаДокумента);
		
		Если НЕ ЗначениеЗаполнено(ДанныеВал.Кратность) Тогда
			ДанныеВал.Кратность = 1;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеВал.Курс) Тогда
			ДанныеВал.Курс = 1;
		КонецЕсли;
		
		Если Перерасход <> 0 Тогда
			СуммаДоДокумента = - Перерасход;
		ИначеЕсли Остаток <> 0 Тогда
			СуммаДоДокумента = Остаток;
		Иначе
			СуммаДоДокумента = 0;
		КонецЕсли;
		
		ПолученоИзКассы = 0;
		ПолученоИзКассыПоКартам = 0;
		
		ДокументыАвансов.Сбросить();
		Пока ДокументыАвансов.НайтиСледующий(Новый Структура("АвансовыйОтчет", Шапка.Ссылка)) Цикл
			ДобавленнаяСумма = ?(ЗначениеЗаполнено(ДокументыАвансов.Сумма), ДокументыАвансов.Сумма, 0);
			Если ДокументыАвансов.ТипДокумента = "КАССА" Тогда
				ПолученоИзКассы = ПолученоИзКассы + ДобавленнаяСумма;
			Иначе
				ПолученоИзКассыПоКартам = ПолученоИзКассыПоКартам + ДобавленнаяСумма;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Титул");
		
		КурсДока = ЗаполнениеДокументов.КурсДокумента(Шапка.Ссылка, ВалютаРегламентированногоУчета);
		КратДока = ЗаполнениеДокументов.КратностьДокумента(Шапка.Ссылка, ВалютаРегламентированногоУчета);
		КурсоваяРазница = 0;
		
		Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			ОбластьМакета.Параметры.ПредставлениеВалютыДокумента   = Шапка.ПредставлениеВалюты;
			ОбластьМакета.Параметры.ПолученоИзКассыВВалюте         = ПолученоИзКассы;
			ОбластьМакета.Параметры.ПолученоИзКассыВВалютеПоКартам = ПолученоИзКассыПоКартам;
			ПолученоИзКассы         = ?(КратДока <> 0, Окр(ПолученоИзКассы * КурсДока / КратДока, 2), 0);
			ПолученоИзКассыПоКартам = ?(КратДока <> 0, Окр(ПолученоИзКассыПоКартам * КурсДока / КратДока, 2), 0);
			
			ЗапросПоВалютнымПроводкам.Сбросить();
			Если ЗапросПоВалютнымПроводкам.НайтиСледующий(Новый Структура("Регистратор", Шапка.Ссылка)) Тогда
				КурсоваяРазница = ЗапросПоВалютнымПроводкам.СуммаДт - ЗапросПоВалютнымПроводкам.СуммаКт;
			КонецЕсли;
			
			// курсовую разницу не разделяем по видам полученных средств
			Если ПолученоИзКассы > 0 Тогда
				ПолученоИзКассы = ПолученоИзКассы + КурсоваяРазница;
			Иначе
				ПолученоИзКассыПоКартам = ПолученоИзКассыПоКартам + КурсоваяРазница;
			КонецЕсли;
			
			Израсходовано = Окр(Шапка.СуммаДокумента * КурсДока / КратДока, 2) + КурсоваяРазница;
		Иначе
			Израсходовано = Шапка.СуммаДокумента;
		КонецЕсли;
		
		ИтогоПолучено = ПолученоИзКассы + ПолученоИзКассыПоКартам;
		
		СуммаДоДокумента = СуммаДоДокумента - ИтогоПолучено;
		
		ДанныеПодотчетногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
		
		ПодотчетноеЛицо   = ДанныеПодотчетногоЛица.Представление;
		ПодотчетноеЛицоОт = ПодотчетноеЛицо;
		ТабельныйНомер    = ДанныеПодотчетногоЛица.ТабельныйНомер;
		Должность         = ДанныеПодотчетногоЛица.Должность;
		
		// Выводим титульный лист авансового отчета
		ОбластьМакета.Параметры.Заполнить(Шапка);
		Если ЗначениеЗаполнено(Шапка.ПодразделениеСотрудника) Тогда
			ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.ПредставлениеПодразделенияСотрудника;
			ОбластьМакета.Параметры.КодПодразделения = Шапка.ПодразделениеСотрудникаКод;
		КонецЕсли; 
		
		ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица          = ПодотчетноеЛицо;
		ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛицаОт        = ПодотчетноеЛицоОт;
		ОбластьМакета.Параметры.ТабельныйНомер                         = ТабельныйНомер;
		ОбластьМакета.Параметры.ДолжностьПодотчетногоЛицаПредставление = Должность;
		ОбластьМакета.Параметры.НомерДокумента                         = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Истина, Ложь);
		ОбластьМакета.Параметры.ПолученоИзКассы                        = ПолученоИзКассы;
		ОбластьМакета.Параметры.ПолученоИзКассыПоКартам                = ПолученоИзКассыПоКартам;
		
		Если СуммаДоДокумента >= 0 Тогда
			ОбластьМакета.Параметры.НачальныйОстаток    =  СуммаДоДокумента;
		Иначе
			ОбластьМакета.Параметры.НачальныйПерерасход = -СуммаДоДокумента;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИтогоПолучено = ИтогоПолучено;
		ОбластьМакета.Параметры.Израсходовано = Израсходовано;
		ОстатокНаКонец = СуммаДоДокумента + ИтогоПолучено - Израсходовано;
		Если ОстатокНаКонец >= 0  Тогда
			ОбластьМакета.Параметры.КонечныйОстаток    =  ОстатокНаКонец;
		Иначе
			ОбластьМакета.Параметры.КонечныйПерерасход = -ОстатокНаКонец;
		КонецЕсли;
		
		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		
		ПодразделениеОтветственныхЛиц =
			?(ЗначениеЗаполнено(Шапка.ПодразделениеСотрудника), Шапка.ПодразделениеСотрудника ,Шапка.ПодразделениеОрганизации);
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
		Руководитель = Руководители.РуководительПредставление;
		Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
		Кассир       = Руководители.КассирПредставление;
		
		ДляРасчета   = Шапка.СуммаДокумента * ДанныеВал.Курс / ДанныеВал.Кратность;
		
		ИспСумма     = Окр(ДляРасчета, 2, 1);
		ЦелСумма     = Цел(ИспСумма);
		КопСумма     = Формат((ИспСумма - ЦелСумма) * 100, "ЧЦ=2; ЧН=00; ЧВН=");
		
		ОбластьМакета.Параметры.ИзрасходованоРуб = ЦелСумма;
		ОбластьМакета.Параметры.ИзрасходованоКоп = КопСумма;
		ОбластьМакета.Параметры.ДатаДокумента    = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.Руководитель     = Руководитель;
		ОбластьМакета.Параметры.ГлавныйБухгалтер = Бухгалтер;
		
		ОбластьМакета.Параметры.ОрганизацияПоОКПО    = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.СуммаОтчетаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
			ИспСумма, ВалютаРегламентированногоУчета) + " (" + ЦелСумма + " руб. " + КопСумма + " коп.)";
		ОбластьМакета.Параметры.КоличествоДокументов = Шапка.КоличествоДокументов;
		ОбластьМакета.Параметры.КоличествоЛистов     = Шапка.КоличествоЛистов;
		
		ОбластьМакета.Параметры.ПредставлениеОрганизации           = ПредставлениеОрганизации;
		ОбластьМакета.Параметры.ПредставлениеГлавногоБухгалтера    = Бухгалтер;
		ОбластьМакета.Параметры.Кассир                             = Кассир;
		ОбластьМакета.Параметры.РуководительПредставление          = Руководитель;
		ОбластьМакета.Параметры.ДолжностьРуководителяПредставление = Руководители.РуководительДолжностьПредставление;
		
		Счетчик = 0;
		ВыборкаПроводок.Сбросить();
		Пока ВыборкаПроводок.НайтиСледующий(Новый Структура("Регистратор", Шапка.Ссылка)) Цикл
			Счетчик = Счетчик + 1;
			ОбластьМакета.Параметры["СубСчетДебет"  + Счетчик] = ВыборкаПроводок.СчетДт;
			ОбластьМакета.Параметры["СуммаДебет"    + Счетчик] = ВыборкаПроводок.Сумма;
			ОбластьМакета.Параметры["СубСчетКредит" + Счетчик] = ВыборкаПроводок.СчетКт;
			ОбластьМакета.Параметры["СуммаКредит"   + Счетчик] = ВыборкаПроводок.Сумма;
			
			// Регламентированная форма АО-1 предусматривает только 8 строк для вывода Бухгалтерских записей
			Если Счетчик = 8 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// ОБОРОТНАЯ СТОРОНА
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим табличные части
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		НомерСтроки   = 0;
		
		ИтогоПоОтчету        = 0;
		ИтогоПоОтчетуВВалюте = 0;
		
		ВыборкаПоТоварам.Сбросить();
		Пока ВыборкаПоТоварам.НайтиСледующий(Новый Структура("Ссылка", Шапка.Ссылка)) Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
			ОбластьМакета.Параметры.ДокументДата        = ВыборкаПоТоварам.ДокументДата;
			ОбластьМакета.Параметры.НаименованиеРасхода = СокрЛП(ВыборкаПоТоварам.НаименованиеРасхода);
			ОбластьМакета.Параметры.ДебетСубСчета 		= "";
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Поставщик",           ВыборкаПоТоварам.Поставщик);
			СтруктураПоиска.Вставить("ДокументНомер",       ВыборкаПоТоварам.ДокументНомер);
			СтруктураПоиска.Вставить("ДокументДата",        ВыборкаПоТоварам.ДокументДата);
			СтруктураПоиска.Вставить("НаименованиеРасхода", ВыборкаПоТоварам.НаименованиеРасхода);
			СтруктураПоиска.Вставить("Ссылка",              Шапка.Ссылка);
			
			ВыборкаСчетов.Сбросить();
			Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
				ОбластьМакета.Параметры.ДебетСубСчета = ОбластьМакета.Параметры.ДебетСубСчета
					+ ?(ПустаяСтрока(ОбластьМакета.Параметры.ДебетСубСчета), "", ", ")
					+ ВыборкаСчетов.Счет;
			КонецЦикла;
			
			Сумма = ВыборкаПоТоварам.ПоОтчету;
			
			ОбластьМакета.Параметры.ПоОтчету = Сумма;
			ОбластьМакета.Параметры.ПоУчету  = Сумма;
			
			ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
			
			Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
				
				СуммаВВалюте = ВыборкаПоТоварам.ПоОтчетуВВалюте;
				
				ОбластьМакета.Параметры.ПоУчетуВВалюте  = СуммаВВалюте;
				ОбластьМакета.Параметры.ПоОтчетуВВалюте = СуммаВВалюте;
				
				ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + СуммаВВалюте;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		// Выводим подвал авансового отчета
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ПодотчетноеЛицо;
		ОбластьМакета.Параметры.ИтогоПоОтчету        = ИтогоПоОтчету;
		ОбластьМакета.Параметры.ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте;
		ОбластьМакета.Параметры.ИтогоПоУчету         = ИтогоПоОтчету;
		ОбластьМакета.Параметры.ИтогоПоУчетувВалюте  = ИтогоПоОтчетуВВалюте;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РублевыеСуммыДокументовВВалюте", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременныеТаблицы",                  НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаПоставщики",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты",                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента",         НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Товар,
	|	ТаблицаТовары.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ТаблицаТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	ТаблицаТовары.Поставщик КАК Поставщик,
	|	ТаблицаТовары.Поставщик.ИНН КАК ИННПоставщика,
	|	ТаблицаТовары.Поставщик КАК ОбособленноеПодразделениеПоставщика,
	|	ТаблицаТовары.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСРуб,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0) КАК СуммаБезНДСРуб
	|ПОМЕСТИТЬ ТабличныеЧастиДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаТовары.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И ТаблицаТовары.СчетФактура = &СчетФактура
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаПрочее.НомерСтроки,
	|	ТаблицаПрочее.Номенклатура,
	|	ТаблицаПрочее.Номенклатура.Код,
	|	ТаблицаПрочее.Номенклатура.Артикул,
	|	ТаблицаПрочее.Содержание,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ТаблицаПрочее.Номенклатура.ЕдиницаИзмерения,
	|	1,
	|	ТаблицаПрочее.Сумма,
	|	ТаблицаПрочее.Сумма,
	|	ТаблицаПрочее.СуммаНДС,
	|	ТаблицаПрочее.СтавкаНДС,
	|	ИСТИНА,
	|	ТаблицаПрочее.Ссылка.СуммаВключаетНДС,
	|	ТаблицаПрочее.Ссылка,
	|	ЛОЖЬ,
	|	ТаблицаПрочее.Поставщик,
	|	ТаблицаПрочее.Поставщик.ИНН,
	|	ТаблицаПрочее.Поставщик,
	|	ТаблицаПрочее.СчетФактура,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0)
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК ТаблицаПрочее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО ТаблицаПрочее.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Прочее))
	|ГДЕ
	|	ТаблицаПрочее.Ссылка = &ДокументОснование
	|	И ТаблицаПрочее.СчетФактура = &СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоставщиков.Поставщик КАК Поставщик,
	|	ТаблицаПоставщиков.ИННПоставщика КАК ИННПоставщика,
	|	ТаблицаПоставщиков.ОбособленноеПодразделениеПоставщика КАК ОбособленноеПодразделениеПоставщика,
	|	ТаблицаПоставщиков.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ Поставщики
	|ИЗ
	|	ТабличныеЧастиДокумента КАК ТаблицаПоставщиков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	&ПустоеПодразделение КАК Подразделение,
	|	"""" КАК ЦифровойИндексОбособленногоПодразделения,
	|	Поставщики.Поставщик КАК Поставщик,
	|	Поставщики.ИННПоставщика КАК ИННПоставщика,
	|	Поставщики.ОбособленноеПодразделениеПоставщика КАК ОбособленноеПодразделениеПоставщика,
	|	НЕОПРЕДЕЛЕНО КАК Грузоотправитель,
	|	Реквизиты.Организация КАК Покупатель,
	|	Реквизиты.Организация.ИНН КАК ИННПокупателя,
	|	Реквизиты.Организация КАК ОбособленноеПодразделениеПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаВзаиморасчетов,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	НЕОПРЕДЕЛЕНО КАК ВидДоговора,
	|	НЕОПРЕДЕЛЕНО КАК Основание,
	|	ЛОЖЬ КАК ЕстьТовары,
	|	&СчетФактура КАК СчетФактура,
	|	"""" КАК АдресДоставки
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Поставщики КАК Поставщики
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерТабЧасти,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Товар КАК Товар,
	|	ТаблицаТовары.ТоварКод,
	|	ТаблицаТовары.ТоварАртикул,
	|	ТаблицаТовары.ТоварНаименование,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.ПредставлениеСтраны,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.ПредставлениеГТД,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.ЭтоУслуга,
	|	ТаблицаТовары.СуммаВключаетНДС,
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.ЭтоКомиссия,
	|	ТаблицаТовары.ВсегоРуб,
	|	ТаблицаТовары.НДСРуб,
	|	ТаблицаТовары.СуммаБезНДСРуб,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК КонтрагентСводныйСФ
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ТабличныеЧастиДокумента КАК ТаблицаТовары";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСчетФактураВыданныйНалоговыйАгентРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаБезНДС
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСчетФактураПолученныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118) КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	СУММА(ТаблицаДокумента.Сумма * 18 / 118) КАК СуммаНДС
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ДоговорКонтрагента,
	|	ТаблицаДокумента.СчетУчетаРасчетовПоАвансам";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм,ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Проверяем, нужно ли для макета ОтчетККМ формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Аванс_Отчет") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Аванс_Отчет",
			"Авансовый отчет",
			ПечатьАвансовогоОтчета(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчет");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ФизЛицо");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	Возврат МассивРеквизитов;
	
КонецФункции

#КонецЕсли