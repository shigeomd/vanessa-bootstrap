#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьОбъект(Объект, СтруктураПараметров) Экспорт

	ЗаполнениеДокументов.Заполнить(Объект, СтруктураПараметров);
	
	ДанныеДляЗаполнения = Новый Структура;
	
	СтруктураЗаполнения = Новый Структура("Организация, НалоговыйПериод");
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, СтруктураПараметров);
	
	ЗаполнитьТабличнуюЧасть(СтруктураЗаполнения, ДанныеДляЗаполнения);
	
	Объект.ВыставленныеСчетаФактуры.Загрузить(ДанныеДляЗаполнения.ВыставленныеСчетаФактуры);
	Объект.ПолученныеСчетаФактуры.Загрузить(ДанныеДляЗаполнения.ПолученныеСчетаФактуры);
	                                      
КонецПроцедуры

Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт

	ОшибкаЗаполнения = Ложь;
	СтрокаСообщения = "";
	ДанныеДляЗаполнения = Новый Структура();
	
	ЗаполнитьТабличнуюЧасть(СтруктураПараметров, ДанныеДляЗаполнения);
	
	Если ДанныеДляЗаполнения.ВыставленныеСчетаФактуры.Количество() = 0
		И ДанныеДляЗаполнения.ПолученныеСчетаФактуры.Количество() = 0 Тогда
		ОшибкаЗаполнения = Истина;
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда
		ДанныеДляЗаполнения.Вставить("ОшибкаЗаполнения");
	КонецЕсли;	
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);

КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧасть(СтруктураПараметров, ДанныеДляЗаполнения)
	
	ВыставленныеСчетаФактуры = Документы.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.ПустаяСсылка().ВыставленныеСчетаФактуры.ВыгрузитьКолонки();
	ПолученныеСчетаФактуры = Документы.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.ПустаяСсылка().ПолученныеСчетаФактуры.ВыгрузитьКолонки();
	
	ДанныеДляЗаполнения.Вставить("ВыставленныеСчетаФактуры", ВыставленныеСчетаФактуры);
	ДанныеДляЗаполнения.Вставить("ПолученныеСчетаФактуры", ПолученныеСчетаФактуры);
		
	СведенияОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтруктураПараметров.Организация);
	НаименованиеОрганизацииДляПечатныхФорм = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОрганизации, "НаименованиеДляПечатныхФорм,");
	СтруктураПараметров.Вставить("НаименованиеОрганизацииДляПечатныхФорм",	НаименованиеОрганизацииДляПечатныхФорм);
	
	СтруктураПараметров.Вставить("СписокОрганизаций", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(СтруктураПараметров.Организация));
	
	СтруктураЗаписейЖурнала	= УчетНДС.ПолучитьЗаписиЖурналаСчетовФактур(СтруктураПараметров);
	
	НомерПП = 1;
	
	ВыборкаГруппировка = СтруктураЗаписейЖурнала.ВыставленныеСчетаФактуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГруппировка.Следующий() Цикл
		
		ВыборкаЗаписи = ВыборкаГруппировка.Выбрать();
		Пока ВыборкаЗаписи.Следующий() Цикл
			НоваяСтрока	= ВыставленныеСчетаФактуры.Добавить();
			УчетНДС.ЗаполнитьСтрокуЖурналаУчетаСчетовФактур(НоваяСтрока, ВыборкаЗаписи, СтруктураПараметров);
			
			НоваяСтрока.Ном	= НомерПП;
			
			НомерПП = НомерПП + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	НомерПП = 1;
	
	Выборка = СтруктураЗаписейЖурнала.ПолученныеСчетаФактуры.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока	= ПолученныеСчетаФактуры.Добавить();
		УчетНДС.ЗаполнитьСтрокуЖурналаУчетаСчетовФактур(НоваяСтрока, Выборка, СтруктураПараметров);
		
		НоваяСтрока.Ном	= НомерПП;
		
		НомерПП = НомерПП + 1;
		
	КонецЦикла;
	
КонецПроцедуры	

// Функция поиска документа, относящегося к выбранному налоговому периоду
//
// Параметры
// 	<Организация>		- <СправочникСсылка.Организации>
// 	<НалоговыйПериод>	- <Дата> - налоговый период
//
// Возвращаемое значение:
// 	<Массив, Неопределено> - упорядоченный по дате массив документов
//
Функция НайтиДокументыЗаНалоговыйПериод(Организация, НалоговыйПериод) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НалоговыйПериод) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода",	НачалоКвартала(НалоговыйПериод));
	Запрос.УстановитьПараметр("КонецНалоговогоПериода",		КонецКвартала(НалоговыйПериод));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде КАК ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде
	|ГДЕ
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Организация = &Организация
	|	И ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.НалоговыйПериод >= &НачалоНалоговогоПериода
	|	И ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.НалоговыйПериод <= &КонецНалоговогоПериода
	|	И НЕ ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Результат	= Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДокументов	= Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДокументов;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ОБНОВЛЕНИЯ

// Обработчик обновления на версию 3.0.25
//
// Процедура заполняет реквизит "ПериодПоСКНП" в тех документах,
// в которых он не заполнен
// 
Процедура ОбработатьДокументыСНезаполненнымРеквизитомПериодПоСКНП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Ссылка,
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Организация,
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Реорганизация,
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.НалоговыйПериод
	|ИЗ
	|	Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде КАК ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде
	|ГДЕ
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.ПериодПоСКНП = """"
	|	И НЕ ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбрабатываемыйДокумент = Выборка.Ссылка;
			
			ОбрабатываемыйОбъект = ОбрабатываемыйДокумент.ПолучитьОбъект();
			ОбрабатываемыйОбъект.ПериодПоСКНП = УчетНДСКлиентСервер.ПолучитьКодПоСКНП(Выборка.НалоговыйПериод, Выборка.Реорганизация);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбрабатываемыйОбъект);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Печать журнала счетов-фактур
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЖурналУчетаСчетовФактур";
	КомандаПечати.Представление = НСтр("ru = 'Печать журнала счетов-фактур'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЖурналУчетаСчетовФактур",
		НСтр("ru = 'Журнал учета счетов-фактур'"),
		ПечатьЖурналаУчетаСчетовФактур(МассивОбъектов, ОбъектыПечати));
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ПечатьЖурналаУчетаСчетовФактур(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Ссылка,
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Организация,
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.НалоговыйПериод,
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.ВыставленныеСчетаФактуры.(
	|		Ссылка,
	|		НомерСтроки,
	|		ДатаПередачиПолучения,
	|		КодСпособаВыставления,
	|		КодВидаОперации,
	|		НомерСчетаФактуры,
	|		ДатаСчетаФактуры,
	|		НомерКорректировочногоСчетаФактуры,
	|		ДатаКорректировочногоСчетаФактуры,
	|		НомерИсправления,
	|		ДатаИсправления,
	|		КонтрагентНаименование,
	|		КонтрагентИННКПП,
	|		Валюта,
	|		СуммаДокумента,
	|		СуммаНДС,
	|		СуммаДокументаРазницаУменьшение,
	|		СуммаДокументаРазницаУвеличение,
	|		СуммаНДСРазницаУменьшение,
	|		СуммаНДСРазницаУвеличение,
	|		Ном,
	|		СчетФактура
	|	),
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.ПолученныеСчетаФактуры.(
	|		Ссылка,
	|		НомерСтроки,
	|		ДатаПередачиПолучения,
	|		КодСпособаВыставления,
	|		КодВидаОперации,
	|		НомерСчетаФактуры,
	|		ДатаСчетаФактуры,
	|		НомерКорректировочногоСчетаФактуры,
	|		ДатаКорректировочногоСчетаФактуры,
	|		НомерИсправления,
	|		ДатаИсправления,
	|		КонтрагентНаименование,
	|		КонтрагентИННКПП,
	|		Валюта,
	|		СуммаДокумента,
	|		СуммаНДС,
	|		СуммаДокументаРазницаУменьшение,
	|		СуммаДокументаРазницаУвеличение,
	|		СуммаНДСРазницаУменьшение,
	|		СуммаНДСРазницаУвеличение,
	|		Ном,
	|		СчетФактура
	|	),
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Организация.ИНН КАК ОрганизацияИНН,
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Организация.КПП КАК ОрганизацияКПП
	|ИЗ
	|	Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде КАК ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде
	|ГДЕ
	|	ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Ссылка В(&МассивОбъектов)";
	
	Результат = Запрос.Выполнить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЖурналУчетаСчетовФактур";
		
	ПервыйДокумент = Истина;
	
	ВыборкаПоОбъектам = Результат.Выбрать();
	
	Пока ВыборкаПоОбъектам.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ВыборкаПоОбъектам.НалоговыйПериод);
		Если ВерсияПостановленияНДС1137 = 3 Тогда
			ВызватьИсключение НСтр("ru = 'Начиная с 4 квартала 2014 г. возможность заполнения, печати и выгрузки документа отсутствует (до утверждения формата выгрузки ФНС)'");
		Иначе
			Макет = ПолучитьОбщийМакет("ЖурналУчетаСчетовФактур1137");
		КонецЕсли; 

		// ШАПКА
		
		СведенияОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаПоОбъектам.Организация);
		НаименованиеОрганизацииДляПечатныхФорм = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОрганизации, "НаименованиеДляПечатныхФорм,");
		
		Отступ = Макет.ПолучитьОбласть("Отступ");
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
		ТабличныйДокумент.Вывести(Секция);
		
		Шапка = Макет.ПолучитьОбласть("Шапка");
		СведенияОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаПоОбъектам.Организация);
		Шапка.Параметры.Организация = НаименованиеОрганизацииДляПечатныхФорм;
		Шапка.Параметры.ИННКПП = "" + ВыборкаПоОбъектам.ОрганизацияИНН + ?(НЕ ЗначениеЗаполнено(ВыборкаПоОбъектам.ОрганизацияКПП), "", ("/" + ВыборкаПоОбъектам.ОрганизацияКПП));
		Шапка.Параметры.Квартал = Формат(ВыборкаПоОбъектам.НалоговыйПериод, "ДФ = к");
		Шапка.Параметры.Год = Формат(ВыборкаПоОбъектам.НалоговыйПериод, "ДФ = гггг");
		
		ТабличныйДокумент.Вывести(Шапка);
		
		ТабличныйДокумент.Вывести(Отступ);
		
		// ЧАСТЬ 1
		
		Часть1Заголовок = Макет.ПолучитьОбласть("Часть1Заголовок");
		ТабличныйДокумент.Вывести(Часть1Заголовок);
		
		Часть1Строка = Макет.ПолучитьОбласть("Часть1Строка");
		
		ВыставленныеСчетаФактуры = ВыборкаПоОбъектам.ВыставленныеСчетаФактуры.Выбрать();
		
		Пока ВыставленныеСчетаФактуры.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Часть1Строка.Параметры, ВыставленныеСчетаФактуры);
			ТабличныйДокумент.Вывести(Часть1Строка);
		КонецЦикла;
		
		
		ТабличныйДокумент.Вывести(Отступ);
		
		// ЧАСТЬ 2
		
		Часть2Заголовок = Макет.ПолучитьОбласть("Часть2Заголовок");
		ТабличныйДокумент.Вывести(Часть2Заголовок);
		
		Часть2Строка = Макет.ПолучитьОбласть("Часть2Строка");
		
		ПолученныеСчетаФактуры = ВыборкаПоОбъектам.ПолученныеСчетаФактуры.Выбрать();
		
		Пока ПолученныеСчетаФактуры.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Часть2Строка.Параметры, ПолученныеСчетаФактуры);
			ТабличныйДокумент.Вывести(Часть2Строка);
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(Отступ);
		
		// ПОДВАЛ
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("ФИОРук");
		СписокПоказателей.Добавить("ФИО");
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			ВыборкаПоОбъектам.Организация, ТекущаяДата(), СписокПоказателей);
		СведенияОЮрФизЛице = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
			ВыборкаПоОбъектам.Организация, ТекущаяДата());
		СведенияОбОрганизации.Вставить("Свидетельство", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОЮрФизЛице, "Свидетельство,"));
		
		Подвал.Параметры.ИмяРук = СведенияОбОрганизации.ФИОРук;
		Подвал.Параметры.ИмяОрг = ?(НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(
			ВыборкаПоОбъектам.Организация), СведенияОбОрганизации.ФИО, "");
		Подвал.Параметры.Свидетельство = СведенияОбОрганизации.Свидетельство;
		
		ТабличныйДокумент.Вывести(Подвал);
			
		УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоОбъектам.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДОКУМЕНТОВ ПО УЧЕТУ НДС

Процедура СформироватьДокументыОтчетности(СтруктураПараметров, АдресХранилища) Экспорт

	Результат = УчетНДС.СформироватьДокументыОтчетности(СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецЕсли